// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240101preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// This connection type covers the AAD auth for any applicable Azure service
type AADAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'AAD'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string     `pulumi:"category"`
	ExpiryTime     *string     `pulumi:"expiryTime"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// AADAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts AADAuthTypeWorkspaceConnectionPropertiesArgs and AADAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `AADAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	AADAuthTypeWorkspaceConnectionPropertiesArgs{...}
type AADAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToAADAuthTypeWorkspaceConnectionPropertiesOutput() AADAuthTypeWorkspaceConnectionPropertiesOutput
	ToAADAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) AADAuthTypeWorkspaceConnectionPropertiesOutput
}

// This connection type covers the AAD auth for any applicable Azure service
type AADAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'AAD'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput   `pulumi:"category"`
	ExpiryTime     pulumi.StringPtrInput   `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput     `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input            `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (AADAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AADAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i AADAuthTypeWorkspaceConnectionPropertiesArgs) ToAADAuthTypeWorkspaceConnectionPropertiesOutput() AADAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToAADAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i AADAuthTypeWorkspaceConnectionPropertiesArgs) ToAADAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AADAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AADAuthTypeWorkspaceConnectionPropertiesOutput)
}

// This connection type covers the AAD auth for any applicable Azure service
type AADAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (AADAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AADAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) ToAADAuthTypeWorkspaceConnectionPropertiesOutput() AADAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) ToAADAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AADAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AAD'.
func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// This connection type covers the AAD auth for any applicable Azure service
type AADAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'AAD'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string `pulumi:"category"`
	CreatedByWorkspaceArmId string  `pulumi:"createdByWorkspaceArmId"`
	ExpiryTime              *string `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// This connection type covers the AAD auth for any applicable Azure service
type AADAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AADAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAADAuthTypeWorkspaceConnectionPropertiesResponseOutput() AADAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAADAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) AADAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AAD'.
func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AADAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AADAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on AKS.
type AKS struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// AKS properties
	Properties *AKSSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKS
func (val *AKS) Defaults() *AKS {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AKSInput is an input type that accepts AKSArgs and AKSOutput values.
// You can construct a concrete instance of `AKSInput` via:
//
//	AKSArgs{...}
type AKSInput interface {
	pulumi.Input

	ToAKSOutput() AKSOutput
	ToAKSOutputWithContext(context.Context) AKSOutput
}

// A Machine Learning compute based on AKS.
type AKSArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// AKS properties
	Properties AKSSchemaPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKSArgs
func (val *AKSArgs) Defaults() *AKSArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AKSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AKS)(nil)).Elem()
}

func (i AKSArgs) ToAKSOutput() AKSOutput {
	return i.ToAKSOutputWithContext(context.Background())
}

func (i AKSArgs) ToAKSOutputWithContext(ctx context.Context) AKSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSOutput)
}

func (i AKSArgs) ToAKSPtrOutput() AKSPtrOutput {
	return i.ToAKSPtrOutputWithContext(context.Background())
}

func (i AKSArgs) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSOutput).ToAKSPtrOutputWithContext(ctx)
}

// AKSPtrInput is an input type that accepts AKSArgs, AKSPtr and AKSPtrOutput values.
// You can construct a concrete instance of `AKSPtrInput` via:
//
//	        AKSArgs{...}
//
//	or:
//
//	        nil
type AKSPtrInput interface {
	pulumi.Input

	ToAKSPtrOutput() AKSPtrOutput
	ToAKSPtrOutputWithContext(context.Context) AKSPtrOutput
}

type aksPtrType AKSArgs

func AKSPtr(v *AKSArgs) AKSPtrInput {
	return (*aksPtrType)(v)
}

func (*aksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AKS)(nil)).Elem()
}

func (i *aksPtrType) ToAKSPtrOutput() AKSPtrOutput {
	return i.ToAKSPtrOutputWithContext(context.Background())
}

func (i *aksPtrType) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSPtrOutput)
}

// A Machine Learning compute based on AKS.
type AKSOutput struct{ *pulumi.OutputState }

func (AKSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKS)(nil)).Elem()
}

func (o AKSOutput) ToAKSOutput() AKSOutput {
	return o
}

func (o AKSOutput) ToAKSOutputWithContext(ctx context.Context) AKSOutput {
	return o
}

func (o AKSOutput) ToAKSPtrOutput() AKSPtrOutput {
	return o.ToAKSPtrOutputWithContext(context.Background())
}

func (o AKSOutput) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AKS) *AKS {
		return &v
	}).(AKSPtrOutput)
}

// Location for the underlying compute
func (o AKSOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AKS) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AKSOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AKS) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// AKS properties
func (o AKSOutput) Properties() AKSSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v AKS) *AKSSchemaProperties { return v.Properties }).(AKSSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AKSOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AKSPtrOutput struct{ *pulumi.OutputState }

func (AKSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKS)(nil)).Elem()
}

func (o AKSPtrOutput) ToAKSPtrOutput() AKSPtrOutput {
	return o
}

func (o AKSPtrOutput) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return o
}

func (o AKSPtrOutput) Elem() AKSOutput {
	return o.ApplyT(func(v *AKS) AKS {
		if v != nil {
			return *v
		}
		var ret AKS
		return ret
	}).(AKSOutput)
}

// Location for the underlying compute
func (o AKSPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o AKSPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AKS) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// AKS properties
func (o AKSPtrOutput) Properties() AKSSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v *AKS) *AKSSchemaProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(AKSSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AKSPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on AKS.
type AKSResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// AKS properties
	Properties *AKSSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKSResponse
func (val *AKSResponse) Defaults() *AKSResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A Machine Learning compute based on AKS.
type AKSResponseOutput struct{ *pulumi.OutputState }

func (AKSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSResponse)(nil)).Elem()
}

func (o AKSResponseOutput) ToAKSResponseOutput() AKSResponseOutput {
	return o
}

func (o AKSResponseOutput) ToAKSResponseOutputWithContext(ctx context.Context) AKSResponseOutput {
	return o
}

// Location for the underlying compute
func (o AKSResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o AKSResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AKSResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AKSResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o AKSResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v AKSResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o AKSResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// AKS properties
func (o AKSResponseOutput) Properties() AKSSchemaResponsePropertiesPtrOutput {
	return o.ApplyT(func(v AKSResponse) *AKSSchemaResponseProperties { return v.Properties }).(AKSSchemaResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o AKSResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AKSResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o AKSResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o AKSResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// AKS properties
type AKSSchemaProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfiguration `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfiguration `pulumi:"sslConfiguration"`
}

// Defaults sets the appropriate defaults for AKSSchemaProperties
func (val *AKSSchemaProperties) Defaults() *AKSSchemaProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

// AKSSchemaPropertiesInput is an input type that accepts AKSSchemaPropertiesArgs and AKSSchemaPropertiesOutput values.
// You can construct a concrete instance of `AKSSchemaPropertiesInput` via:
//
//	AKSSchemaPropertiesArgs{...}
type AKSSchemaPropertiesInput interface {
	pulumi.Input

	ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput
	ToAKSSchemaPropertiesOutputWithContext(context.Context) AKSSchemaPropertiesOutput
}

// AKS properties
type AKSSchemaPropertiesArgs struct {
	// Number of agents
	AgentCount pulumi.IntPtrInput `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize pulumi.StringPtrInput `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration AksNetworkingConfigurationPtrInput `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn pulumi.StringPtrInput `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose pulumi.StringPtrInput `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet pulumi.StringPtrInput `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType pulumi.StringPtrInput `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration SslConfigurationPtrInput `pulumi:"sslConfiguration"`
}

// Defaults sets the appropriate defaults for AKSSchemaPropertiesArgs
func (val *AKSSchemaPropertiesArgs) Defaults() *AKSSchemaPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		tmp.ClusterPurpose = pulumi.StringPtr("FastProd")
	}
	if tmp.LoadBalancerType == nil {
		tmp.LoadBalancerType = pulumi.StringPtr("PublicIp")
	}
	return &tmp
}
func (AKSSchemaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaProperties)(nil)).Elem()
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput {
	return i.ToAKSSchemaPropertiesOutputWithContext(context.Background())
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesOutputWithContext(ctx context.Context) AKSSchemaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesOutput)
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return i.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesOutput).ToAKSSchemaPropertiesPtrOutputWithContext(ctx)
}

// AKSSchemaPropertiesPtrInput is an input type that accepts AKSSchemaPropertiesArgs, AKSSchemaPropertiesPtr and AKSSchemaPropertiesPtrOutput values.
// You can construct a concrete instance of `AKSSchemaPropertiesPtrInput` via:
//
//	        AKSSchemaPropertiesArgs{...}
//
//	or:
//
//	        nil
type AKSSchemaPropertiesPtrInput interface {
	pulumi.Input

	ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput
	ToAKSSchemaPropertiesPtrOutputWithContext(context.Context) AKSSchemaPropertiesPtrOutput
}

type aksschemaPropertiesPtrType AKSSchemaPropertiesArgs

func AKSSchemaPropertiesPtr(v *AKSSchemaPropertiesArgs) AKSSchemaPropertiesPtrInput {
	return (*aksschemaPropertiesPtrType)(v)
}

func (*aksschemaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaProperties)(nil)).Elem()
}

func (i *aksschemaPropertiesPtrType) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return i.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i *aksschemaPropertiesPtrType) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesPtrOutput)
}

// AKS properties
type AKSSchemaPropertiesOutput struct{ *pulumi.OutputState }

func (AKSSchemaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaProperties)(nil)).Elem()
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput {
	return o
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesOutputWithContext(ctx context.Context) AKSSchemaPropertiesOutput {
	return o
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return o.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AKSSchemaProperties) *AKSSchemaProperties {
		return &v
	}).(AKSSchemaPropertiesPtrOutput)
}

// Number of agents
func (o AKSSchemaPropertiesOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *int { return v.AgentCount }).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaPropertiesOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.AgentVmSize }).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaPropertiesOutput) AksNetworkingConfiguration() AksNetworkingConfigurationPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *AksNetworkingConfiguration { return v.AksNetworkingConfiguration }).(AksNetworkingConfigurationPtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaPropertiesOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.ClusterFqdn }).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaPropertiesOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.ClusterPurpose }).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaPropertiesOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.LoadBalancerSubnet }).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaPropertiesOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaPropertiesOutput) SslConfiguration() SslConfigurationPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *SslConfiguration { return v.SslConfiguration }).(SslConfigurationPtrOutput)
}

type AKSSchemaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AKSSchemaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaProperties)(nil)).Elem()
}

func (o AKSSchemaPropertiesPtrOutput) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return o
}

func (o AKSSchemaPropertiesPtrOutput) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return o
}

func (o AKSSchemaPropertiesPtrOutput) Elem() AKSSchemaPropertiesOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) AKSSchemaProperties {
		if v != nil {
			return *v
		}
		var ret AKSSchemaProperties
		return ret
	}).(AKSSchemaPropertiesOutput)
}

// Number of agents
func (o AKSSchemaPropertiesPtrOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *int {
		if v == nil {
			return nil
		}
		return v.AgentCount
	}).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaPropertiesPtrOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.AgentVmSize
	}).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaPropertiesPtrOutput) AksNetworkingConfiguration() AksNetworkingConfigurationPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *AksNetworkingConfiguration {
		if v == nil {
			return nil
		}
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationPtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaPropertiesPtrOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterFqdn
	}).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaPropertiesPtrOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterPurpose
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaPropertiesPtrOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSubnet
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaPropertiesPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaPropertiesPtrOutput) SslConfiguration() SslConfigurationPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *SslConfiguration {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SslConfigurationPtrOutput)
}

// AKS properties
type AKSSchemaResponseProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfigurationResponse `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfigurationResponse `pulumi:"sslConfiguration"`
	// System services
	SystemServices []SystemServiceResponse `pulumi:"systemServices"`
}

// Defaults sets the appropriate defaults for AKSSchemaResponseProperties
func (val *AKSSchemaResponseProperties) Defaults() *AKSSchemaResponseProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

// AKS properties
type AKSSchemaResponsePropertiesOutput struct{ *pulumi.OutputState }

func (AKSSchemaResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaResponseProperties)(nil)).Elem()
}

func (o AKSSchemaResponsePropertiesOutput) ToAKSSchemaResponsePropertiesOutput() AKSSchemaResponsePropertiesOutput {
	return o
}

func (o AKSSchemaResponsePropertiesOutput) ToAKSSchemaResponsePropertiesOutputWithContext(ctx context.Context) AKSSchemaResponsePropertiesOutput {
	return o
}

// Number of agents
func (o AKSSchemaResponsePropertiesOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *int { return v.AgentCount }).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaResponsePropertiesOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.AgentVmSize }).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaResponsePropertiesOutput) AksNetworkingConfiguration() AksNetworkingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *AksNetworkingConfigurationResponse {
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationResponsePtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaResponsePropertiesOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.ClusterFqdn }).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaResponsePropertiesOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.ClusterPurpose }).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaResponsePropertiesOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.LoadBalancerSubnet }).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaResponsePropertiesOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaResponsePropertiesOutput) SslConfiguration() SslConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *SslConfigurationResponse { return v.SslConfiguration }).(SslConfigurationResponsePtrOutput)
}

// System services
func (o AKSSchemaResponsePropertiesOutput) SystemServices() SystemServiceResponseArrayOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) []SystemServiceResponse { return v.SystemServices }).(SystemServiceResponseArrayOutput)
}

type AKSSchemaResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AKSSchemaResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaResponseProperties)(nil)).Elem()
}

func (o AKSSchemaResponsePropertiesPtrOutput) ToAKSSchemaResponsePropertiesPtrOutput() AKSSchemaResponsePropertiesPtrOutput {
	return o
}

func (o AKSSchemaResponsePropertiesPtrOutput) ToAKSSchemaResponsePropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaResponsePropertiesPtrOutput {
	return o
}

func (o AKSSchemaResponsePropertiesPtrOutput) Elem() AKSSchemaResponsePropertiesOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) AKSSchemaResponseProperties {
		if v != nil {
			return *v
		}
		var ret AKSSchemaResponseProperties
		return ret
	}).(AKSSchemaResponsePropertiesOutput)
}

// Number of agents
func (o AKSSchemaResponsePropertiesPtrOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.AgentCount
	}).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaResponsePropertiesPtrOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.AgentVmSize
	}).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaResponsePropertiesPtrOutput) AksNetworkingConfiguration() AksNetworkingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *AksNetworkingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationResponsePtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaResponsePropertiesPtrOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterFqdn
	}).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaResponsePropertiesPtrOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterPurpose
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaResponsePropertiesPtrOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSubnet
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaResponsePropertiesPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaResponsePropertiesPtrOutput) SslConfiguration() SslConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *SslConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SslConfigurationResponsePtrOutput)
}

// System services
func (o AKSSchemaResponsePropertiesPtrOutput) SystemServices() SystemServiceResponseArrayOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) []SystemServiceResponse {
		if v == nil {
			return nil
		}
		return v.SystemServices
	}).(SystemServiceResponseArrayOutput)
}

type AccessKeyAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'AccessKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string                       `pulumi:"category"`
	Credentials    *WorkspaceConnectionAccessKey `pulumi:"credentials"`
	ExpiryTime     *string                       `pulumi:"expiryTime"`
	IsSharedToAll  *bool                         `pulumi:"isSharedToAll"`
	Metadata       interface{}                   `pulumi:"metadata"`
	SharedUserList []string                      `pulumi:"sharedUserList"`
	Target         *string                       `pulumi:"target"`
}

// AccessKeyAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs and AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `AccessKeyAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs{...}
type AccessKeyAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput
	ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'AccessKey'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput                `pulumi:"category"`
	Credentials    WorkspaceConnectionAccessKeyPtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput                `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput                  `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                         `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput              `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput                `pulumi:"target"`
}

func (AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i AccessKeyAuthTypeWorkspaceConnectionPropertiesArgs) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput)
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AccessKey'.
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionAccessKeyPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionAccessKey {
		return v.Credentials
	}).(WorkspaceConnectionAccessKeyPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'AccessKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                               `pulumi:"category"`
	CreatedByWorkspaceArmId string                                `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionAccessKeyResponse `pulumi:"credentials"`
	ExpiryTime              *string                               `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput() AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AccessKey'.
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) string {
		return v.CreatedByWorkspaceArmId
	}).(pulumi.StringOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionAccessKeyResponsePtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionAccessKeyResponse {
		return v.Credentials
	}).(WorkspaceConnectionAccessKeyResponsePtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type AccountApiKeysResponse struct {
	Key1 *string `pulumi:"key1"`
	Key2 *string `pulumi:"key2"`
}

type AccountApiKeysResponseOutput struct{ *pulumi.OutputState }

func (AccountApiKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountApiKeysResponse)(nil)).Elem()
}

func (o AccountApiKeysResponseOutput) ToAccountApiKeysResponseOutput() AccountApiKeysResponseOutput {
	return o
}

func (o AccountApiKeysResponseOutput) ToAccountApiKeysResponseOutputWithContext(ctx context.Context) AccountApiKeysResponseOutput {
	return o
}

func (o AccountApiKeysResponseOutput) Key1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountApiKeysResponse) *string { return v.Key1 }).(pulumi.StringPtrOutput)
}

func (o AccountApiKeysResponseOutput) Key2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountApiKeysResponse) *string { return v.Key2 }).(pulumi.StringPtrOutput)
}

type AccountApiKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (AccountApiKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountApiKeysResponse)(nil)).Elem()
}

func (o AccountApiKeysResponsePtrOutput) ToAccountApiKeysResponsePtrOutput() AccountApiKeysResponsePtrOutput {
	return o
}

func (o AccountApiKeysResponsePtrOutput) ToAccountApiKeysResponsePtrOutputWithContext(ctx context.Context) AccountApiKeysResponsePtrOutput {
	return o
}

func (o AccountApiKeysResponsePtrOutput) Elem() AccountApiKeysResponseOutput {
	return o.ApplyT(func(v *AccountApiKeysResponse) AccountApiKeysResponse {
		if v != nil {
			return *v
		}
		var ret AccountApiKeysResponse
		return ret
	}).(AccountApiKeysResponseOutput)
}

func (o AccountApiKeysResponsePtrOutput) Key1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountApiKeysResponse) *string {
		if v == nil {
			return nil
		}
		return v.Key1
	}).(pulumi.StringPtrOutput)
}

func (o AccountApiKeysResponsePtrOutput) Key2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccountApiKeysResponse) *string {
		if v == nil {
			return nil
		}
		return v.Key2
	}).(pulumi.StringPtrOutput)
}

// This connection type covers the account key connection for Azure storage
type AccountKeyAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'AccountKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string                                   `pulumi:"category"`
	Credentials    *WorkspaceConnectionSharedAccessSignature `pulumi:"credentials"`
	ExpiryTime     *string                                   `pulumi:"expiryTime"`
	IsSharedToAll  *bool                                     `pulumi:"isSharedToAll"`
	Metadata       interface{}                               `pulumi:"metadata"`
	SharedUserList []string                                  `pulumi:"sharedUserList"`
	Target         *string                                   `pulumi:"target"`
}

// AccountKeyAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs and AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `AccountKeyAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs{...}
type AccountKeyAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput
	ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput
}

// This connection type covers the account key connection for Azure storage
type AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'AccountKey'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput                            `pulumi:"category"`
	Credentials    WorkspaceConnectionSharedAccessSignaturePtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput                            `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput                              `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                                     `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput                          `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput                            `pulumi:"target"`
}

func (AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i AccountKeyAuthTypeWorkspaceConnectionPropertiesArgs) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput)
}

// This connection type covers the account key connection for Azure storage
type AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutput() AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AccountKey'.
func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionSharedAccessSignature {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignaturePtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// This connection type covers the account key connection for Azure storage
type AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'AccountKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                           `pulumi:"category"`
	CreatedByWorkspaceArmId string                                            `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionSharedAccessSignatureResponse `pulumi:"credentials"`
	ExpiryTime              *string                                           `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// This connection type covers the account key connection for Azure storage
type AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput() AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AccountKey'.
func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) string {
		return v.CreatedByWorkspaceArmId
	}).(pulumi.StringOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionSharedAccessSignatureResponsePtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionSharedAccessSignatureResponse {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignatureResponsePtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecrets `pulumi:"secrets"`
}

// AccountKeyDatastoreCredentialsInput is an input type that accepts AccountKeyDatastoreCredentialsArgs and AccountKeyDatastoreCredentialsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreCredentialsInput` via:
//
//	AccountKeyDatastoreCredentialsArgs{...}
type AccountKeyDatastoreCredentialsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput
	ToAccountKeyDatastoreCredentialsOutputWithContext(context.Context) AccountKeyDatastoreCredentialsOutput
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecretsInput `pulumi:"secrets"`
}

func (AccountKeyDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return i.ToAccountKeyDatastoreCredentialsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreCredentialsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage account secrets.
func (o AccountKeyDatastoreCredentialsOutput) Secrets() AccountKeyDatastoreSecretsOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) AccountKeyDatastoreSecrets { return v.Secrets }).(AccountKeyDatastoreSecretsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentialsResponse)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutput() AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecrets struct {
	// Storage account key.
	Key *string `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType string `pulumi:"secretsType"`
}

// AccountKeyDatastoreSecretsInput is an input type that accepts AccountKeyDatastoreSecretsArgs and AccountKeyDatastoreSecretsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreSecretsInput` via:
//
//	AccountKeyDatastoreSecretsArgs{...}
type AccountKeyDatastoreSecretsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput
	ToAccountKeyDatastoreSecretsOutputWithContext(context.Context) AccountKeyDatastoreSecretsOutput
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsArgs struct {
	// Storage account key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (AccountKeyDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return i.ToAccountKeyDatastoreSecretsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreSecretsOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return o
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return o
}

// Storage account key.
func (o AccountKeyDatastoreSecretsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetails struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccount `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccount `pulumi:"userCreatedAcrAccount"`
}

// AcrDetailsInput is an input type that accepts AcrDetailsArgs and AcrDetailsOutput values.
// You can construct a concrete instance of `AcrDetailsInput` via:
//
//	AcrDetailsArgs{...}
type AcrDetailsInput interface {
	pulumi.Input

	ToAcrDetailsOutput() AcrDetailsOutput
	ToAcrDetailsOutputWithContext(context.Context) AcrDetailsOutput
}

// Details of ACR account to be used for the Registry
type AcrDetailsArgs struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount SystemCreatedAcrAccountPtrInput `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount UserCreatedAcrAccountPtrInput `pulumi:"userCreatedAcrAccount"`
}

func (AcrDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArgs) ToAcrDetailsOutput() AcrDetailsOutput {
	return i.ToAcrDetailsOutputWithContext(context.Background())
}

func (i AcrDetailsArgs) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsOutput)
}

// AcrDetailsArrayInput is an input type that accepts AcrDetailsArray and AcrDetailsArrayOutput values.
// You can construct a concrete instance of `AcrDetailsArrayInput` via:
//
//	AcrDetailsArray{ AcrDetailsArgs{...} }
type AcrDetailsArrayInput interface {
	pulumi.Input

	ToAcrDetailsArrayOutput() AcrDetailsArrayOutput
	ToAcrDetailsArrayOutputWithContext(context.Context) AcrDetailsArrayOutput
}

type AcrDetailsArray []AcrDetailsInput

func (AcrDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return i.ToAcrDetailsArrayOutputWithContext(context.Background())
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsArrayOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsOutput struct{ *pulumi.OutputState }

func (AcrDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (o AcrDetailsOutput) ToAcrDetailsOutput() AcrDetailsOutput {
	return o
}

func (o AcrDetailsOutput) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *SystemCreatedAcrAccount { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountPtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsOutput) UserCreatedAcrAccount() UserCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *UserCreatedAcrAccount { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountPtrOutput)
}

type AcrDetailsArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) Index(i pulumi.IntInput) AcrDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetails {
		return vs[0].([]AcrDetails)[vs[1].(int)]
	}).(AcrDetailsOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponse struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccountResponse `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccountResponse `pulumi:"userCreatedAcrAccount"`
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponseOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutput() AcrDetailsResponseOutput {
	return o
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutputWithContext(ctx context.Context) AcrDetailsResponseOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *SystemCreatedAcrAccountResponse { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountResponsePtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) UserCreatedAcrAccount() UserCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *UserCreatedAcrAccountResponse { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountResponsePtrOutput)
}

type AcrDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutput() AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutputWithContext(ctx context.Context) AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) Index(i pulumi.IntInput) AcrDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetailsResponse {
		return vs[0].([]AcrDetailsResponse)[vs[1].(int)]
	}).(AcrDetailsResponseOutput)
}

type ActualCapacityInfoResponse struct {
	// Gets or sets the total number of instances for the group.
	Allocated *int `pulumi:"allocated"`
	// Gets or sets the number of instances which failed to successfully complete assignment.
	AssignmentFailed *int `pulumi:"assignmentFailed"`
	// Gets or sets the number of instances which successfully completed assignment.
	AssignmentSuccess *int `pulumi:"assignmentSuccess"`
}

// Defaults sets the appropriate defaults for ActualCapacityInfoResponse
func (val *ActualCapacityInfoResponse) Defaults() *ActualCapacityInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Allocated == nil {
		allocated_ := 0
		tmp.Allocated = &allocated_
	}
	if tmp.AssignmentFailed == nil {
		assignmentFailed_ := 0
		tmp.AssignmentFailed = &assignmentFailed_
	}
	if tmp.AssignmentSuccess == nil {
		assignmentSuccess_ := 0
		tmp.AssignmentSuccess = &assignmentSuccess_
	}
	return &tmp
}

type ActualCapacityInfoResponseOutput struct{ *pulumi.OutputState }

func (ActualCapacityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActualCapacityInfoResponse)(nil)).Elem()
}

func (o ActualCapacityInfoResponseOutput) ToActualCapacityInfoResponseOutput() ActualCapacityInfoResponseOutput {
	return o
}

func (o ActualCapacityInfoResponseOutput) ToActualCapacityInfoResponseOutputWithContext(ctx context.Context) ActualCapacityInfoResponseOutput {
	return o
}

// Gets or sets the total number of instances for the group.
func (o ActualCapacityInfoResponseOutput) Allocated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.Allocated }).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which failed to successfully complete assignment.
func (o ActualCapacityInfoResponseOutput) AssignmentFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.AssignmentFailed }).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which successfully completed assignment.
func (o ActualCapacityInfoResponseOutput) AssignmentSuccess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.AssignmentSuccess }).(pulumi.IntPtrOutput)
}

type ActualCapacityInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ActualCapacityInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActualCapacityInfoResponse)(nil)).Elem()
}

func (o ActualCapacityInfoResponsePtrOutput) ToActualCapacityInfoResponsePtrOutput() ActualCapacityInfoResponsePtrOutput {
	return o
}

func (o ActualCapacityInfoResponsePtrOutput) ToActualCapacityInfoResponsePtrOutputWithContext(ctx context.Context) ActualCapacityInfoResponsePtrOutput {
	return o
}

func (o ActualCapacityInfoResponsePtrOutput) Elem() ActualCapacityInfoResponseOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) ActualCapacityInfoResponse {
		if v != nil {
			return *v
		}
		var ret ActualCapacityInfoResponse
		return ret
	}).(ActualCapacityInfoResponseOutput)
}

// Gets or sets the total number of instances for the group.
func (o ActualCapacityInfoResponsePtrOutput) Allocated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.Allocated
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which failed to successfully complete assignment.
func (o ActualCapacityInfoResponsePtrOutput) AssignmentFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.AssignmentFailed
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which successfully completed assignment.
func (o ActualCapacityInfoResponsePtrOutput) AssignmentSuccess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.AssignmentSuccess
	}).(pulumi.IntPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfiguration struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// AksNetworkingConfigurationInput is an input type that accepts AksNetworkingConfigurationArgs and AksNetworkingConfigurationOutput values.
// You can construct a concrete instance of `AksNetworkingConfigurationInput` via:
//
//	AksNetworkingConfigurationArgs{...}
type AksNetworkingConfigurationInput interface {
	pulumi.Input

	ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput
	ToAksNetworkingConfigurationOutputWithContext(context.Context) AksNetworkingConfigurationOutput
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationArgs struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP pulumi.StringPtrInput `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr pulumi.StringPtrInput `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr pulumi.StringPtrInput `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (AksNetworkingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfiguration)(nil)).Elem()
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput {
	return i.ToAksNetworkingConfigurationOutputWithContext(context.Background())
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationOutputWithContext(ctx context.Context) AksNetworkingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationOutput)
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return i.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationOutput).ToAksNetworkingConfigurationPtrOutputWithContext(ctx)
}

// AksNetworkingConfigurationPtrInput is an input type that accepts AksNetworkingConfigurationArgs, AksNetworkingConfigurationPtr and AksNetworkingConfigurationPtrOutput values.
// You can construct a concrete instance of `AksNetworkingConfigurationPtrInput` via:
//
//	        AksNetworkingConfigurationArgs{...}
//
//	or:
//
//	        nil
type AksNetworkingConfigurationPtrInput interface {
	pulumi.Input

	ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput
	ToAksNetworkingConfigurationPtrOutputWithContext(context.Context) AksNetworkingConfigurationPtrOutput
}

type aksNetworkingConfigurationPtrType AksNetworkingConfigurationArgs

func AksNetworkingConfigurationPtr(v *AksNetworkingConfigurationArgs) AksNetworkingConfigurationPtrInput {
	return (*aksNetworkingConfigurationPtrType)(v)
}

func (*aksNetworkingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfiguration)(nil)).Elem()
}

func (i *aksNetworkingConfigurationPtrType) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return i.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (i *aksNetworkingConfigurationPtrType) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfiguration)(nil)).Elem()
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput {
	return o
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationOutputWithContext(ctx context.Context) AksNetworkingConfigurationOutput {
	return o
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return o.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AksNetworkingConfiguration) *AksNetworkingConfiguration {
		return &v
	}).(AksNetworkingConfigurationPtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AksNetworkingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfiguration)(nil)).Elem()
}

func (o AksNetworkingConfigurationPtrOutput) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return o
}

func (o AksNetworkingConfigurationPtrOutput) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return o
}

func (o AksNetworkingConfigurationPtrOutput) Elem() AksNetworkingConfigurationOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) AksNetworkingConfiguration {
		if v != nil {
			return *v
		}
		var ret AksNetworkingConfiguration
		return ret
	}).(AksNetworkingConfigurationOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationPtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationPtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationPtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationResponse struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfigurationResponse)(nil)).Elem()
}

func (o AksNetworkingConfigurationResponseOutput) ToAksNetworkingConfigurationResponseOutput() AksNetworkingConfigurationResponseOutput {
	return o
}

func (o AksNetworkingConfigurationResponseOutput) ToAksNetworkingConfigurationResponseOutputWithContext(ctx context.Context) AksNetworkingConfigurationResponseOutput {
	return o
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationResponseOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationResponseOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationResponseOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AksNetworkingConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfigurationResponse)(nil)).Elem()
}

func (o AksNetworkingConfigurationResponsePtrOutput) ToAksNetworkingConfigurationResponsePtrOutput() AksNetworkingConfigurationResponsePtrOutput {
	return o
}

func (o AksNetworkingConfigurationResponsePtrOutput) ToAksNetworkingConfigurationResponsePtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationResponsePtrOutput {
	return o
}

func (o AksNetworkingConfigurationResponsePtrOutput) Elem() AksNetworkingConfigurationResponseOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) AksNetworkingConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AksNetworkingConfigurationResponse
		return ret
	}).(AksNetworkingConfigurationResponseOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationResponsePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationResponsePtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationResponsePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

type AllFeatures struct {
	// Expected value is 'AllFeatures'.
	FilterType string `pulumi:"filterType"`
}

// AllFeaturesInput is an input type that accepts AllFeaturesArgs and AllFeaturesOutput values.
// You can construct a concrete instance of `AllFeaturesInput` via:
//
//	AllFeaturesArgs{...}
type AllFeaturesInput interface {
	pulumi.Input

	ToAllFeaturesOutput() AllFeaturesOutput
	ToAllFeaturesOutputWithContext(context.Context) AllFeaturesOutput
}

type AllFeaturesArgs struct {
	// Expected value is 'AllFeatures'.
	FilterType pulumi.StringInput `pulumi:"filterType"`
}

func (AllFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllFeatures)(nil)).Elem()
}

func (i AllFeaturesArgs) ToAllFeaturesOutput() AllFeaturesOutput {
	return i.ToAllFeaturesOutputWithContext(context.Background())
}

func (i AllFeaturesArgs) ToAllFeaturesOutputWithContext(ctx context.Context) AllFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllFeaturesOutput)
}

func (i AllFeaturesArgs) ToAllFeaturesPtrOutput() AllFeaturesPtrOutput {
	return i.ToAllFeaturesPtrOutputWithContext(context.Background())
}

func (i AllFeaturesArgs) ToAllFeaturesPtrOutputWithContext(ctx context.Context) AllFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllFeaturesOutput).ToAllFeaturesPtrOutputWithContext(ctx)
}

// AllFeaturesPtrInput is an input type that accepts AllFeaturesArgs, AllFeaturesPtr and AllFeaturesPtrOutput values.
// You can construct a concrete instance of `AllFeaturesPtrInput` via:
//
//	        AllFeaturesArgs{...}
//
//	or:
//
//	        nil
type AllFeaturesPtrInput interface {
	pulumi.Input

	ToAllFeaturesPtrOutput() AllFeaturesPtrOutput
	ToAllFeaturesPtrOutputWithContext(context.Context) AllFeaturesPtrOutput
}

type allFeaturesPtrType AllFeaturesArgs

func AllFeaturesPtr(v *AllFeaturesArgs) AllFeaturesPtrInput {
	return (*allFeaturesPtrType)(v)
}

func (*allFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllFeatures)(nil)).Elem()
}

func (i *allFeaturesPtrType) ToAllFeaturesPtrOutput() AllFeaturesPtrOutput {
	return i.ToAllFeaturesPtrOutputWithContext(context.Background())
}

func (i *allFeaturesPtrType) ToAllFeaturesPtrOutputWithContext(ctx context.Context) AllFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllFeaturesPtrOutput)
}

type AllFeaturesOutput struct{ *pulumi.OutputState }

func (AllFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllFeatures)(nil)).Elem()
}

func (o AllFeaturesOutput) ToAllFeaturesOutput() AllFeaturesOutput {
	return o
}

func (o AllFeaturesOutput) ToAllFeaturesOutputWithContext(ctx context.Context) AllFeaturesOutput {
	return o
}

func (o AllFeaturesOutput) ToAllFeaturesPtrOutput() AllFeaturesPtrOutput {
	return o.ToAllFeaturesPtrOutputWithContext(context.Background())
}

func (o AllFeaturesOutput) ToAllFeaturesPtrOutputWithContext(ctx context.Context) AllFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllFeatures) *AllFeatures {
		return &v
	}).(AllFeaturesPtrOutput)
}

// Expected value is 'AllFeatures'.
func (o AllFeaturesOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v AllFeatures) string { return v.FilterType }).(pulumi.StringOutput)
}

type AllFeaturesPtrOutput struct{ *pulumi.OutputState }

func (AllFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllFeatures)(nil)).Elem()
}

func (o AllFeaturesPtrOutput) ToAllFeaturesPtrOutput() AllFeaturesPtrOutput {
	return o
}

func (o AllFeaturesPtrOutput) ToAllFeaturesPtrOutputWithContext(ctx context.Context) AllFeaturesPtrOutput {
	return o
}

func (o AllFeaturesPtrOutput) Elem() AllFeaturesOutput {
	return o.ApplyT(func(v *AllFeatures) AllFeatures {
		if v != nil {
			return *v
		}
		var ret AllFeatures
		return ret
	}).(AllFeaturesOutput)
}

// Expected value is 'AllFeatures'.
func (o AllFeaturesPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllFeatures) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

type AllFeaturesResponse struct {
	// Expected value is 'AllFeatures'.
	FilterType string `pulumi:"filterType"`
}

type AllFeaturesResponseOutput struct{ *pulumi.OutputState }

func (AllFeaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllFeaturesResponse)(nil)).Elem()
}

func (o AllFeaturesResponseOutput) ToAllFeaturesResponseOutput() AllFeaturesResponseOutput {
	return o
}

func (o AllFeaturesResponseOutput) ToAllFeaturesResponseOutputWithContext(ctx context.Context) AllFeaturesResponseOutput {
	return o
}

// Expected value is 'AllFeatures'.
func (o AllFeaturesResponseOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v AllFeaturesResponse) string { return v.FilterType }).(pulumi.StringOutput)
}

type AllFeaturesResponsePtrOutput struct{ *pulumi.OutputState }

func (AllFeaturesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllFeaturesResponse)(nil)).Elem()
}

func (o AllFeaturesResponsePtrOutput) ToAllFeaturesResponsePtrOutput() AllFeaturesResponsePtrOutput {
	return o
}

func (o AllFeaturesResponsePtrOutput) ToAllFeaturesResponsePtrOutputWithContext(ctx context.Context) AllFeaturesResponsePtrOutput {
	return o
}

func (o AllFeaturesResponsePtrOutput) Elem() AllFeaturesResponseOutput {
	return o.ApplyT(func(v *AllFeaturesResponse) AllFeaturesResponse {
		if v != nil {
			return *v
		}
		var ret AllFeaturesResponse
		return ret
	}).(AllFeaturesResponseOutput)
}

// Expected value is 'AllFeatures'.
func (o AllFeaturesResponsePtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllFeaturesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodes struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// AllNodesInput is an input type that accepts AllNodesArgs and AllNodesOutput values.
// You can construct a concrete instance of `AllNodesInput` via:
//
//	AllNodesArgs{...}
type AllNodesInput interface {
	pulumi.Input

	ToAllNodesOutput() AllNodesOutput
	ToAllNodesOutputWithContext(context.Context) AllNodesOutput
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesArgs struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType pulumi.StringInput `pulumi:"nodesValueType"`
}

func (AllNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (i AllNodesArgs) ToAllNodesOutput() AllNodesOutput {
	return i.ToAllNodesOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput)
}

func (i AllNodesArgs) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput).ToAllNodesPtrOutputWithContext(ctx)
}

// AllNodesPtrInput is an input type that accepts AllNodesArgs, AllNodesPtr and AllNodesPtrOutput values.
// You can construct a concrete instance of `AllNodesPtrInput` via:
//
//	        AllNodesArgs{...}
//
//	or:
//
//	        nil
type AllNodesPtrInput interface {
	pulumi.Input

	ToAllNodesPtrOutput() AllNodesPtrOutput
	ToAllNodesPtrOutputWithContext(context.Context) AllNodesPtrOutput
}

type allNodesPtrType AllNodesArgs

func AllNodesPtr(v *AllNodesArgs) AllNodesPtrInput {
	return (*allNodesPtrType)(v)
}

func (*allNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (i *allNodesPtrType) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i *allNodesPtrType) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesOutput struct{ *pulumi.OutputState }

func (AllNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (o AllNodesOutput) ToAllNodesOutput() AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o.ToAllNodesPtrOutputWithContext(context.Background())
}

func (o AllNodesOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllNodes) *AllNodes {
		return &v
	}).(AllNodesPtrOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodes) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesPtrOutput struct{ *pulumi.OutputState }

func (AllNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) Elem() AllNodesOutput {
	return o.ApplyT(func(v *AllNodes) AllNodes {
		if v != nil {
			return *v
		}
		var ret AllNodes
		return ret
	}).(AllNodesOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesPtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodes) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponse struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponseOutput struct{ *pulumi.OutputState }

func (AllNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutput() AllNodesResponseOutput {
	return o
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutputWithContext(ctx context.Context) AllNodesResponseOutput {
	return o
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponseOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodesResponse) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesResponsePtrOutput struct{ *pulumi.OutputState }

func (AllNodesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutput() AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutputWithContext(ctx context.Context) AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) Elem() AllNodesResponseOutput {
	return o.ApplyT(func(v *AllNodesResponse) AllNodesResponse {
		if v != nil {
			return *v
		}
		var ret AllNodesResponse
		return ret
	}).(AllNodesResponseOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponsePtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute.
type AmlCompute struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of AmlCompute
	Properties *AmlComputeProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlCompute
func (val *AmlCompute) Defaults() *AmlCompute {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AmlComputeInput is an input type that accepts AmlComputeArgs and AmlComputeOutput values.
// You can construct a concrete instance of `AmlComputeInput` via:
//
//	AmlComputeArgs{...}
type AmlComputeInput interface {
	pulumi.Input

	ToAmlComputeOutput() AmlComputeOutput
	ToAmlComputeOutputWithContext(context.Context) AmlComputeOutput
}

// An Azure Machine Learning compute.
type AmlComputeArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of AmlCompute
	Properties AmlComputePropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlComputeArgs
func (val *AmlComputeArgs) Defaults() *AmlComputeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AmlComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlCompute)(nil)).Elem()
}

func (i AmlComputeArgs) ToAmlComputeOutput() AmlComputeOutput {
	return i.ToAmlComputeOutputWithContext(context.Background())
}

func (i AmlComputeArgs) ToAmlComputeOutputWithContext(ctx context.Context) AmlComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputeOutput)
}

func (i AmlComputeArgs) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return i.ToAmlComputePtrOutputWithContext(context.Background())
}

func (i AmlComputeArgs) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputeOutput).ToAmlComputePtrOutputWithContext(ctx)
}

// AmlComputePtrInput is an input type that accepts AmlComputeArgs, AmlComputePtr and AmlComputePtrOutput values.
// You can construct a concrete instance of `AmlComputePtrInput` via:
//
//	        AmlComputeArgs{...}
//
//	or:
//
//	        nil
type AmlComputePtrInput interface {
	pulumi.Input

	ToAmlComputePtrOutput() AmlComputePtrOutput
	ToAmlComputePtrOutputWithContext(context.Context) AmlComputePtrOutput
}

type amlComputePtrType AmlComputeArgs

func AmlComputePtr(v *AmlComputeArgs) AmlComputePtrInput {
	return (*amlComputePtrType)(v)
}

func (*amlComputePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlCompute)(nil)).Elem()
}

func (i *amlComputePtrType) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return i.ToAmlComputePtrOutputWithContext(context.Background())
}

func (i *amlComputePtrType) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePtrOutput)
}

// An Azure Machine Learning compute.
type AmlComputeOutput struct{ *pulumi.OutputState }

func (AmlComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlCompute)(nil)).Elem()
}

func (o AmlComputeOutput) ToAmlComputeOutput() AmlComputeOutput {
	return o
}

func (o AmlComputeOutput) ToAmlComputeOutputWithContext(ctx context.Context) AmlComputeOutput {
	return o
}

func (o AmlComputeOutput) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return o.ToAmlComputePtrOutputWithContext(context.Background())
}

func (o AmlComputeOutput) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlCompute) *AmlCompute {
		return &v
	}).(AmlComputePtrOutput)
}

// Location for the underlying compute
func (o AmlComputeOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputeOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlCompute) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputeOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlCompute) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of AmlCompute
func (o AmlComputeOutput) Properties() AmlComputePropertiesPtrOutput {
	return o.ApplyT(func(v AmlCompute) *AmlComputeProperties { return v.Properties }).(AmlComputePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputeOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AmlComputePtrOutput struct{ *pulumi.OutputState }

func (AmlComputePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlCompute)(nil)).Elem()
}

func (o AmlComputePtrOutput) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return o
}

func (o AmlComputePtrOutput) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return o
}

func (o AmlComputePtrOutput) Elem() AmlComputeOutput {
	return o.ApplyT(func(v *AmlCompute) AmlCompute {
		if v != nil {
			return *v
		}
		var ret AmlCompute
		return ret
	}).(AmlComputeOutput)
}

// Location for the underlying compute
func (o AmlComputePtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of AmlCompute
func (o AmlComputePtrOutput) Properties() AmlComputePropertiesPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *AmlComputeProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(AmlComputePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponse struct {
	// ID of the compute node.
	NodeId string `pulumi:"nodeId"`
	// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
	NodeState string `pulumi:"nodeState"`
	// SSH port number of the node.
	Port float64 `pulumi:"port"`
	// Private IP address of the compute node.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP address of the compute node.
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// ID of the Experiment running on the node, if any else null.
	RunId string `pulumi:"runId"`
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponseOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutput() AmlComputeNodeInformationResponseOutput {
	return o
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseOutput {
	return o
}

// ID of the compute node.
func (o AmlComputeNodeInformationResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
func (o AmlComputeNodeInformationResponseOutput) NodeState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeState }).(pulumi.StringOutput)
}

// SSH port number of the node.
func (o AmlComputeNodeInformationResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

// Private IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Public IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// ID of the Experiment running on the node, if any else null.
func (o AmlComputeNodeInformationResponseOutput) RunId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.RunId }).(pulumi.StringOutput)
}

type AmlComputeNodeInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutput() AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) Index(i pulumi.IntInput) AmlComputeNodeInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AmlComputeNodeInformationResponse {
		return vs[0].([]AmlComputeNodeInformationResponse)[vs[1].(int)]
	}).(AmlComputeNodeInformationResponseOutput)
}

// AML Compute properties
type AmlComputeProperties struct {
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettings `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentials `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImage `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputeProperties
func (val *AmlComputeProperties) Defaults() *AmlComputeProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// AmlComputePropertiesInput is an input type that accepts AmlComputePropertiesArgs and AmlComputePropertiesOutput values.
// You can construct a concrete instance of `AmlComputePropertiesInput` via:
//
//	AmlComputePropertiesArgs{...}
type AmlComputePropertiesInput interface {
	pulumi.Input

	ToAmlComputePropertiesOutput() AmlComputePropertiesOutput
	ToAmlComputePropertiesOutputWithContext(context.Context) AmlComputePropertiesOutput
}

// AML Compute properties
type AmlComputePropertiesArgs struct {
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp pulumi.BoolPtrInput `pulumi:"enableNodePublicIp"`
	// Network is isolated or not
	IsolatedNetwork pulumi.BoolPtrInput `pulumi:"isolatedNetwork"`
	// Compute OS Type
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag pulumi.Input `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess pulumi.StringPtrInput `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings ScaleSettingsPtrInput `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet ResourceIdPtrInput `pulumi:"subnet"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials UserAccountCredentialsPtrInput `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage VirtualMachineImagePtrInput `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority pulumi.StringPtrInput `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputePropertiesArgs
func (val *AmlComputePropertiesArgs) Defaults() *AmlComputePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		tmp.EnableNodePublicIp = pulumi.BoolPtr(true)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		tmp.RemoteLoginPortPublicAccess = pulumi.StringPtr("NotSpecified")
	}

	return &tmp
}
func (AmlComputePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeProperties)(nil)).Elem()
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesOutput() AmlComputePropertiesOutput {
	return i.ToAmlComputePropertiesOutputWithContext(context.Background())
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesOutputWithContext(ctx context.Context) AmlComputePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesOutput)
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return i.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesOutput).ToAmlComputePropertiesPtrOutputWithContext(ctx)
}

// AmlComputePropertiesPtrInput is an input type that accepts AmlComputePropertiesArgs, AmlComputePropertiesPtr and AmlComputePropertiesPtrOutput values.
// You can construct a concrete instance of `AmlComputePropertiesPtrInput` via:
//
//	        AmlComputePropertiesArgs{...}
//
//	or:
//
//	        nil
type AmlComputePropertiesPtrInput interface {
	pulumi.Input

	ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput
	ToAmlComputePropertiesPtrOutputWithContext(context.Context) AmlComputePropertiesPtrOutput
}

type amlComputePropertiesPtrType AmlComputePropertiesArgs

func AmlComputePropertiesPtr(v *AmlComputePropertiesArgs) AmlComputePropertiesPtrInput {
	return (*amlComputePropertiesPtrType)(v)
}

func (*amlComputePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputeProperties)(nil)).Elem()
}

func (i *amlComputePropertiesPtrType) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return i.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (i *amlComputePropertiesPtrType) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesPtrOutput)
}

// AML Compute properties
type AmlComputePropertiesOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeProperties)(nil)).Elem()
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesOutput() AmlComputePropertiesOutput {
	return o
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesOutputWithContext(ctx context.Context) AmlComputePropertiesOutput {
	return o
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return o.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlComputeProperties) *AmlComputeProperties {
		return &v
	}).(AmlComputePropertiesPtrOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *bool { return v.IsolatedNetwork }).(pulumi.BoolPtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v AmlComputeProperties) interface{} { return v.PropertyBag }).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.RemoteLoginPortPublicAccess }).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesOutput) ScaleSettings() ScaleSettingsPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *ScaleSettings { return v.ScaleSettings }).(ScaleSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *ResourceId { return v.Subnet }).(ResourceIdPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesOutput) UserAccountCredentials() UserAccountCredentialsPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *UserAccountCredentials { return v.UserAccountCredentials }).(UserAccountCredentialsPtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesOutput) VirtualMachineImage() VirtualMachineImagePtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *VirtualMachineImage { return v.VirtualMachineImage }).(VirtualMachineImagePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.VmPriority }).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AmlComputePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputeProperties)(nil)).Elem()
}

func (o AmlComputePropertiesPtrOutput) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return o
}

func (o AmlComputePropertiesPtrOutput) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return o
}

func (o AmlComputePropertiesPtrOutput) Elem() AmlComputePropertiesOutput {
	return o.ApplyT(func(v *AmlComputeProperties) AmlComputeProperties {
		if v != nil {
			return *v
		}
		var ret AmlComputeProperties
		return ret
	}).(AmlComputePropertiesOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesPtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesPtrOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsolatedNetwork
	}).(pulumi.BoolPtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesPtrOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmlComputeProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.PropertyBag
	}).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesPtrOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.RemoteLoginPortPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesPtrOutput) ScaleSettings() ScaleSettingsPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *ScaleSettings {
		if v == nil {
			return nil
		}
		return v.ScaleSettings
	}).(ScaleSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesPtrOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *ResourceId {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesPtrOutput) UserAccountCredentials() UserAccountCredentialsPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *UserAccountCredentials {
		if v == nil {
			return nil
		}
		return v.UserAccountCredentials
	}).(UserAccountCredentialsPtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesPtrOutput) VirtualMachineImage() VirtualMachineImagePtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *VirtualMachineImage {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImage
	}).(VirtualMachineImagePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesPtrOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmPriority
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesPtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// AML Compute properties
type AmlComputePropertiesResponse struct {
	// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
	AllocationState string `pulumi:"allocationState"`
	// The time at which the compute entered its current allocation state.
	AllocationStateTransitionTime string `pulumi:"allocationStateTransitionTime"`
	// The number of compute nodes currently assigned to the compute.
	CurrentNodeCount int `pulumi:"currentNodeCount"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Collection of errors encountered by various compute nodes during node setup.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Counts of various node states on the compute.
	NodeStateCounts NodeStateCountsResponse `pulumi:"nodeStateCounts"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettingsResponse `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
	TargetNodeCount int `pulumi:"targetNodeCount"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentialsResponse `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImageResponse `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputePropertiesResponse
func (val *AmlComputePropertiesResponse) Defaults() *AmlComputePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// AML Compute properties
type AmlComputePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputePropertiesResponse)(nil)).Elem()
}

func (o AmlComputePropertiesResponseOutput) ToAmlComputePropertiesResponseOutput() AmlComputePropertiesResponseOutput {
	return o
}

func (o AmlComputePropertiesResponseOutput) ToAmlComputePropertiesResponseOutputWithContext(ctx context.Context) AmlComputePropertiesResponseOutput {
	return o
}

// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
func (o AmlComputePropertiesResponseOutput) AllocationState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) string { return v.AllocationState }).(pulumi.StringOutput)
}

// The time at which the compute entered its current allocation state.
func (o AmlComputePropertiesResponseOutput) AllocationStateTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) string { return v.AllocationStateTransitionTime }).(pulumi.StringOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o AmlComputePropertiesResponseOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) int { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesResponseOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered by various compute nodes during node setup.
func (o AmlComputePropertiesResponseOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) []ErrorResponseResponse { return v.Errors }).(ErrorResponseResponseArrayOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesResponseOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *bool { return v.IsolatedNetwork }).(pulumi.BoolPtrOutput)
}

// Counts of various node states on the compute.
func (o AmlComputePropertiesResponseOutput) NodeStateCounts() NodeStateCountsResponseOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) NodeStateCountsResponse { return v.NodeStateCounts }).(NodeStateCountsResponseOutput)
}

// Compute OS Type
func (o AmlComputePropertiesResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesResponseOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) interface{} { return v.PropertyBag }).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesResponseOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.RemoteLoginPortPublicAccess }).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesResponseOutput) ScaleSettings() ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *ScaleSettingsResponse { return v.ScaleSettings }).(ScaleSettingsResponsePtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesResponseOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *ResourceIdResponse { return v.Subnet }).(ResourceIdResponsePtrOutput)
}

// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
func (o AmlComputePropertiesResponseOutput) TargetNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) int { return v.TargetNodeCount }).(pulumi.IntOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesResponseOutput) UserAccountCredentials() UserAccountCredentialsResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *UserAccountCredentialsResponse { return v.UserAccountCredentials }).(UserAccountCredentialsResponsePtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesResponseOutput) VirtualMachineImage() VirtualMachineImageResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *VirtualMachineImageResponse { return v.VirtualMachineImage }).(VirtualMachineImageResponsePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesResponseOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.VmPriority }).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AmlComputePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputePropertiesResponse)(nil)).Elem()
}

func (o AmlComputePropertiesResponsePtrOutput) ToAmlComputePropertiesResponsePtrOutput() AmlComputePropertiesResponsePtrOutput {
	return o
}

func (o AmlComputePropertiesResponsePtrOutput) ToAmlComputePropertiesResponsePtrOutputWithContext(ctx context.Context) AmlComputePropertiesResponsePtrOutput {
	return o
}

func (o AmlComputePropertiesResponsePtrOutput) Elem() AmlComputePropertiesResponseOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) AmlComputePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AmlComputePropertiesResponse
		return ret
	}).(AmlComputePropertiesResponseOutput)
}

// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
func (o AmlComputePropertiesResponsePtrOutput) AllocationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AllocationState
	}).(pulumi.StringPtrOutput)
}

// The time at which the compute entered its current allocation state.
func (o AmlComputePropertiesResponsePtrOutput) AllocationStateTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AllocationStateTransitionTime
	}).(pulumi.StringPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o AmlComputePropertiesResponsePtrOutput) CurrentNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentNodeCount
	}).(pulumi.IntPtrOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesResponsePtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered by various compute nodes during node setup.
func (o AmlComputePropertiesResponsePtrOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) []ErrorResponseResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorResponseResponseArrayOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesResponsePtrOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsolatedNetwork
	}).(pulumi.BoolPtrOutput)
}

// Counts of various node states on the compute.
func (o AmlComputePropertiesResponsePtrOutput) NodeStateCounts() NodeStateCountsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *NodeStateCountsResponse {
		if v == nil {
			return nil
		}
		return &v.NodeStateCounts
	}).(NodeStateCountsResponsePtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesResponsePtrOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PropertyBag
	}).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesResponsePtrOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteLoginPortPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesResponsePtrOutput) ScaleSettings() ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *ScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ScaleSettings
	}).(ScaleSettingsResponsePtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesResponsePtrOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdResponsePtrOutput)
}

// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
func (o AmlComputePropertiesResponsePtrOutput) TargetNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TargetNodeCount
	}).(pulumi.IntPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesResponsePtrOutput) UserAccountCredentials() UserAccountCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *UserAccountCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.UserAccountCredentials
	}).(UserAccountCredentialsResponsePtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesResponsePtrOutput) VirtualMachineImage() VirtualMachineImageResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *VirtualMachineImageResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImage
	}).(VirtualMachineImageResponsePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesResponsePtrOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmPriority
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute.
type AmlComputeResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of AmlCompute
	Properties *AmlComputePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlComputeResponse
func (val *AmlComputeResponse) Defaults() *AmlComputeResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// An Azure Machine Learning compute.
type AmlComputeResponseOutput struct{ *pulumi.OutputState }

func (AmlComputeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeResponse)(nil)).Elem()
}

func (o AmlComputeResponseOutput) ToAmlComputeResponseOutput() AmlComputeResponseOutput {
	return o
}

func (o AmlComputeResponseOutput) ToAmlComputeResponseOutputWithContext(ctx context.Context) AmlComputeResponseOutput {
	return o
}

// Location for the underlying compute
func (o AmlComputeResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputeResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o AmlComputeResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputeResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o AmlComputeResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v AmlComputeResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o AmlComputeResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of AmlCompute
func (o AmlComputeResponseOutput) Properties() AmlComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *AmlComputePropertiesResponse { return v.Properties }).(AmlComputePropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o AmlComputeResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AmlComputeResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o AmlComputeResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputeResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// AML Token identity configuration.
type AmlToken struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AmlTokenInput is an input type that accepts AmlTokenArgs and AmlTokenOutput values.
// You can construct a concrete instance of `AmlTokenInput` via:
//
//	AmlTokenArgs{...}
type AmlTokenInput interface {
	pulumi.Input

	ToAmlTokenOutput() AmlTokenOutput
	ToAmlTokenOutputWithContext(context.Context) AmlTokenOutput
}

// AML Token identity configuration.
type AmlTokenArgs struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
}

func (AmlTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (i AmlTokenArgs) ToAmlTokenOutput() AmlTokenOutput {
	return i.ToAmlTokenOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput)
}

func (i AmlTokenArgs) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput).ToAmlTokenPtrOutputWithContext(ctx)
}

// AmlTokenPtrInput is an input type that accepts AmlTokenArgs, AmlTokenPtr and AmlTokenPtrOutput values.
// You can construct a concrete instance of `AmlTokenPtrInput` via:
//
//	        AmlTokenArgs{...}
//
//	or:
//
//	        nil
type AmlTokenPtrInput interface {
	pulumi.Input

	ToAmlTokenPtrOutput() AmlTokenPtrOutput
	ToAmlTokenPtrOutputWithContext(context.Context) AmlTokenPtrOutput
}

type amlTokenPtrType AmlTokenArgs

func AmlTokenPtr(v *AmlTokenArgs) AmlTokenPtrInput {
	return (*amlTokenPtrType)(v)
}

func (*amlTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenPtrOutput)
}

// AML Token identity configuration.
type AmlTokenOutput struct{ *pulumi.OutputState }

func (AmlTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (o AmlTokenOutput) ToAmlTokenOutput() AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (o AmlTokenOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlToken) *AmlToken {
		return &v
	}).(AmlTokenPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlToken) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenPtrOutput struct{ *pulumi.OutputState }

func (AmlTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) Elem() AmlTokenOutput {
	return o.ApplyT(func(v *AmlToken) AmlToken {
		if v != nil {
			return *v
		}
		var ret AmlToken
		return ret
	}).(AmlTokenOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlToken) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// AML token compute identity definition.
type AmlTokenComputeIdentity struct {
	// Monitor compute identity type enum.
	// Expected value is 'AmlToken'.
	ComputeIdentityType string `pulumi:"computeIdentityType"`
}

// AmlTokenComputeIdentityInput is an input type that accepts AmlTokenComputeIdentityArgs and AmlTokenComputeIdentityOutput values.
// You can construct a concrete instance of `AmlTokenComputeIdentityInput` via:
//
//	AmlTokenComputeIdentityArgs{...}
type AmlTokenComputeIdentityInput interface {
	pulumi.Input

	ToAmlTokenComputeIdentityOutput() AmlTokenComputeIdentityOutput
	ToAmlTokenComputeIdentityOutputWithContext(context.Context) AmlTokenComputeIdentityOutput
}

// AML token compute identity definition.
type AmlTokenComputeIdentityArgs struct {
	// Monitor compute identity type enum.
	// Expected value is 'AmlToken'.
	ComputeIdentityType pulumi.StringInput `pulumi:"computeIdentityType"`
}

func (AmlTokenComputeIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenComputeIdentity)(nil)).Elem()
}

func (i AmlTokenComputeIdentityArgs) ToAmlTokenComputeIdentityOutput() AmlTokenComputeIdentityOutput {
	return i.ToAmlTokenComputeIdentityOutputWithContext(context.Background())
}

func (i AmlTokenComputeIdentityArgs) ToAmlTokenComputeIdentityOutputWithContext(ctx context.Context) AmlTokenComputeIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenComputeIdentityOutput)
}

// AML token compute identity definition.
type AmlTokenComputeIdentityOutput struct{ *pulumi.OutputState }

func (AmlTokenComputeIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenComputeIdentity)(nil)).Elem()
}

func (o AmlTokenComputeIdentityOutput) ToAmlTokenComputeIdentityOutput() AmlTokenComputeIdentityOutput {
	return o
}

func (o AmlTokenComputeIdentityOutput) ToAmlTokenComputeIdentityOutputWithContext(ctx context.Context) AmlTokenComputeIdentityOutput {
	return o
}

// Monitor compute identity type enum.
// Expected value is 'AmlToken'.
func (o AmlTokenComputeIdentityOutput) ComputeIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlTokenComputeIdentity) string { return v.ComputeIdentityType }).(pulumi.StringOutput)
}

// AML token compute identity definition.
type AmlTokenComputeIdentityResponse struct {
	// Monitor compute identity type enum.
	// Expected value is 'AmlToken'.
	ComputeIdentityType string `pulumi:"computeIdentityType"`
}

// AML token compute identity definition.
type AmlTokenComputeIdentityResponseOutput struct{ *pulumi.OutputState }

func (AmlTokenComputeIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenComputeIdentityResponse)(nil)).Elem()
}

func (o AmlTokenComputeIdentityResponseOutput) ToAmlTokenComputeIdentityResponseOutput() AmlTokenComputeIdentityResponseOutput {
	return o
}

func (o AmlTokenComputeIdentityResponseOutput) ToAmlTokenComputeIdentityResponseOutputWithContext(ctx context.Context) AmlTokenComputeIdentityResponseOutput {
	return o
}

// Monitor compute identity type enum.
// Expected value is 'AmlToken'.
func (o AmlTokenComputeIdentityResponseOutput) ComputeIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlTokenComputeIdentityResponse) string { return v.ComputeIdentityType }).(pulumi.StringOutput)
}

// AML Token identity configuration.
type AmlTokenResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AML Token identity configuration.
type AmlTokenResponseOutput struct{ *pulumi.OutputState }

func (AmlTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutput() AmlTokenResponseOutput {
	return o
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutputWithContext(ctx context.Context) AmlTokenResponseOutput {
	return o
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlTokenResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (AmlTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutput() AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutputWithContext(ctx context.Context) AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) Elem() AmlTokenResponseOutput {
	return o.ApplyT(func(v *AmlTokenResponse) AmlTokenResponse {
		if v != nil {
			return *v
		}
		var ret AmlTokenResponse
		return ret
	}).(AmlTokenResponseOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'ApiKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Api key object for workspace connection credential.
	Credentials    *WorkspaceConnectionApiKey `pulumi:"credentials"`
	ExpiryTime     *string                    `pulumi:"expiryTime"`
	IsSharedToAll  *bool                      `pulumi:"isSharedToAll"`
	Metadata       interface{}                `pulumi:"metadata"`
	SharedUserList []string                   `pulumi:"sharedUserList"`
	Target         *string                    `pulumi:"target"`
}

// ApiKeyAuthWorkspaceConnectionPropertiesInput is an input type that accepts ApiKeyAuthWorkspaceConnectionPropertiesArgs and ApiKeyAuthWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `ApiKeyAuthWorkspaceConnectionPropertiesInput` via:
//
//	ApiKeyAuthWorkspaceConnectionPropertiesArgs{...}
type ApiKeyAuthWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToApiKeyAuthWorkspaceConnectionPropertiesOutput() ApiKeyAuthWorkspaceConnectionPropertiesOutput
	ToApiKeyAuthWorkspaceConnectionPropertiesOutputWithContext(context.Context) ApiKeyAuthWorkspaceConnectionPropertiesOutput
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'ApiKey'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Api key object for workspace connection credential.
	Credentials    WorkspaceConnectionApiKeyPtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput             `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput               `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                      `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput           `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput             `pulumi:"target"`
}

func (ApiKeyAuthWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyAuthWorkspaceConnectionProperties)(nil)).Elem()
}

func (i ApiKeyAuthWorkspaceConnectionPropertiesArgs) ToApiKeyAuthWorkspaceConnectionPropertiesOutput() ApiKeyAuthWorkspaceConnectionPropertiesOutput {
	return i.ToApiKeyAuthWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i ApiKeyAuthWorkspaceConnectionPropertiesArgs) ToApiKeyAuthWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ApiKeyAuthWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyAuthWorkspaceConnectionPropertiesOutput)
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (ApiKeyAuthWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyAuthWorkspaceConnectionProperties)(nil)).Elem()
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) ToApiKeyAuthWorkspaceConnectionPropertiesOutput() ApiKeyAuthWorkspaceConnectionPropertiesOutput {
	return o
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) ToApiKeyAuthWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ApiKeyAuthWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ApiKey'.
func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Api key object for workspace connection credential.
func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionApiKeyPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) *WorkspaceConnectionApiKey { return v.Credentials }).(WorkspaceConnectionApiKeyPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ApiKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string `pulumi:"category"`
	CreatedByWorkspaceArmId string  `pulumi:"createdByWorkspaceArmId"`
	// Api key object for workspace connection credential.
	Credentials *WorkspaceConnectionApiKeyResponse `pulumi:"credentials"`
	ExpiryTime  *string                            `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyAuthWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ToApiKeyAuthWorkspaceConnectionPropertiesResponseOutput() ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ToApiKeyAuthWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ApiKey'.
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

// Api key object for workspace connection credential.
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionApiKeyResponsePtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionApiKeyResponse {
		return v.Credentials
	}).(WorkspaceConnectionApiKeyResponsePtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceId struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ArmResourceIdInput is an input type that accepts ArmResourceIdArgs and ArmResourceIdOutput values.
// You can construct a concrete instance of `ArmResourceIdInput` via:
//
//	ArmResourceIdArgs{...}
type ArmResourceIdInput interface {
	pulumi.Input

	ToArmResourceIdOutput() ArmResourceIdOutput
	ToArmResourceIdOutputWithContext(context.Context) ArmResourceIdOutput
}

// ARM ResourceId of a resource
type ArmResourceIdArgs struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ArmResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (i ArmResourceIdArgs) ToArmResourceIdOutput() ArmResourceIdOutput {
	return i.ToArmResourceIdOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput)
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput).ToArmResourceIdPtrOutputWithContext(ctx)
}

// ArmResourceIdPtrInput is an input type that accepts ArmResourceIdArgs, ArmResourceIdPtr and ArmResourceIdPtrOutput values.
// You can construct a concrete instance of `ArmResourceIdPtrInput` via:
//
//	        ArmResourceIdArgs{...}
//
//	or:
//
//	        nil
type ArmResourceIdPtrInput interface {
	pulumi.Input

	ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput
	ToArmResourceIdPtrOutputWithContext(context.Context) ArmResourceIdPtrOutput
}

type armResourceIdPtrType ArmResourceIdArgs

func ArmResourceIdPtr(v *ArmResourceIdArgs) ArmResourceIdPtrInput {
	return (*armResourceIdPtrType)(v)
}

func (*armResourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdOutput struct{ *pulumi.OutputState }

func (ArmResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdOutput) ToArmResourceIdOutput() ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmResourceId) *ArmResourceId {
		return &v
	}).(ArmResourceIdPtrOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceId) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) Elem() ArmResourceIdOutput {
	return o.ApplyT(func(v *ArmResourceId) ArmResourceId {
		if v != nil {
			return *v
		}
		var ret ArmResourceId
		return ret
	}).(ArmResourceIdOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceId) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdResponse struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ARM ResourceId of a resource
type ArmResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutput() ArmResourceIdResponseOutput {
	return o
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutputWithContext(ctx context.Context) ArmResourceIdResponseOutput {
	return o
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceIdResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutput() ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutputWithContext(ctx context.Context) ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) Elem() ArmResourceIdResponseOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) ArmResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ArmResourceIdResponse
		return ret
	}).(ArmResourceIdResponseOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUser struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

// AssignedUserInput is an input type that accepts AssignedUserArgs and AssignedUserOutput values.
// You can construct a concrete instance of `AssignedUserInput` via:
//
//	AssignedUserArgs{...}
type AssignedUserInput interface {
	pulumi.Input

	ToAssignedUserOutput() AssignedUserOutput
	ToAssignedUserOutputWithContext(context.Context) AssignedUserOutput
}

// A user that can be assigned to a compute instance.
type AssignedUserArgs struct {
	// User’s AAD Object Id.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (AssignedUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUser)(nil)).Elem()
}

func (i AssignedUserArgs) ToAssignedUserOutput() AssignedUserOutput {
	return i.ToAssignedUserOutputWithContext(context.Background())
}

func (i AssignedUserArgs) ToAssignedUserOutputWithContext(ctx context.Context) AssignedUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserOutput)
}

func (i AssignedUserArgs) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return i.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (i AssignedUserArgs) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserOutput).ToAssignedUserPtrOutputWithContext(ctx)
}

// AssignedUserPtrInput is an input type that accepts AssignedUserArgs, AssignedUserPtr and AssignedUserPtrOutput values.
// You can construct a concrete instance of `AssignedUserPtrInput` via:
//
//	        AssignedUserArgs{...}
//
//	or:
//
//	        nil
type AssignedUserPtrInput interface {
	pulumi.Input

	ToAssignedUserPtrOutput() AssignedUserPtrOutput
	ToAssignedUserPtrOutputWithContext(context.Context) AssignedUserPtrOutput
}

type assignedUserPtrType AssignedUserArgs

func AssignedUserPtr(v *AssignedUserArgs) AssignedUserPtrInput {
	return (*assignedUserPtrType)(v)
}

func (*assignedUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUser)(nil)).Elem()
}

func (i *assignedUserPtrType) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return i.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (i *assignedUserPtrType) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUserOutput struct{ *pulumi.OutputState }

func (AssignedUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUser)(nil)).Elem()
}

func (o AssignedUserOutput) ToAssignedUserOutput() AssignedUserOutput {
	return o
}

func (o AssignedUserOutput) ToAssignedUserOutputWithContext(ctx context.Context) AssignedUserOutput {
	return o
}

func (o AssignedUserOutput) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return o.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (o AssignedUserOutput) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssignedUser) *AssignedUser {
		return &v
	}).(AssignedUserPtrOutput)
}

// User’s AAD Object Id.
func (o AssignedUserOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUser) string { return v.ObjectId }).(pulumi.StringOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUser) string { return v.TenantId }).(pulumi.StringOutput)
}

type AssignedUserPtrOutput struct{ *pulumi.OutputState }

func (AssignedUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUser)(nil)).Elem()
}

func (o AssignedUserPtrOutput) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return o
}

func (o AssignedUserPtrOutput) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return o
}

func (o AssignedUserPtrOutput) Elem() AssignedUserOutput {
	return o.ApplyT(func(v *AssignedUser) AssignedUser {
		if v != nil {
			return *v
		}
		var ret AssignedUser
		return ret
	}).(AssignedUserOutput)
}

// User’s AAD Object Id.
func (o AssignedUserPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUser) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUser) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUserResponse struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

// A user that can be assigned to a compute instance.
type AssignedUserResponseOutput struct{ *pulumi.OutputState }

func (AssignedUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUserResponse)(nil)).Elem()
}

func (o AssignedUserResponseOutput) ToAssignedUserResponseOutput() AssignedUserResponseOutput {
	return o
}

func (o AssignedUserResponseOutput) ToAssignedUserResponseOutputWithContext(ctx context.Context) AssignedUserResponseOutput {
	return o
}

// User’s AAD Object Id.
func (o AssignedUserResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUserResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUserResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type AssignedUserResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignedUserResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUserResponse)(nil)).Elem()
}

func (o AssignedUserResponsePtrOutput) ToAssignedUserResponsePtrOutput() AssignedUserResponsePtrOutput {
	return o
}

func (o AssignedUserResponsePtrOutput) ToAssignedUserResponsePtrOutputWithContext(ctx context.Context) AssignedUserResponsePtrOutput {
	return o
}

func (o AssignedUserResponsePtrOutput) Elem() AssignedUserResponseOutput {
	return o.ApplyT(func(v *AssignedUserResponse) AssignedUserResponse {
		if v != nil {
			return *v
		}
		var ret AssignedUserResponse
		return ret
	}).(AssignedUserResponseOutput)
}

// User’s AAD Object Id.
func (o AssignedUserResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUserResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUserResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type AutoDeleteSetting struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSetting
func (val *AutoDeleteSetting) Defaults() *AutoDeleteSetting {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

// AutoDeleteSettingInput is an input type that accepts AutoDeleteSettingArgs and AutoDeleteSettingOutput values.
// You can construct a concrete instance of `AutoDeleteSettingInput` via:
//
//	AutoDeleteSettingArgs{...}
type AutoDeleteSettingInput interface {
	pulumi.Input

	ToAutoDeleteSettingOutput() AutoDeleteSettingOutput
	ToAutoDeleteSettingOutputWithContext(context.Context) AutoDeleteSettingOutput
}

type AutoDeleteSettingArgs struct {
	// When to check if an asset is expired
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Expiration condition value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingArgs
func (val *AutoDeleteSettingArgs) Defaults() *AutoDeleteSettingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		tmp.Condition = pulumi.StringPtr("CreatedGreaterThan")
	}
	return &tmp
}
func (AutoDeleteSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return i.ToAutoDeleteSettingOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput)
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput).ToAutoDeleteSettingPtrOutputWithContext(ctx)
}

// AutoDeleteSettingPtrInput is an input type that accepts AutoDeleteSettingArgs, AutoDeleteSettingPtr and AutoDeleteSettingPtrOutput values.
// You can construct a concrete instance of `AutoDeleteSettingPtrInput` via:
//
//	        AutoDeleteSettingArgs{...}
//
//	or:
//
//	        nil
type AutoDeleteSettingPtrInput interface {
	pulumi.Input

	ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput
	ToAutoDeleteSettingPtrOutputWithContext(context.Context) AutoDeleteSettingPtrOutput
}

type autoDeleteSettingPtrType AutoDeleteSettingArgs

func AutoDeleteSettingPtr(v *AutoDeleteSettingArgs) AutoDeleteSettingPtrInput {
	return (*autoDeleteSettingPtrType)(v)
}

func (*autoDeleteSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingPtrOutput)
}

type AutoDeleteSettingOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoDeleteSetting) *AutoDeleteSetting {
		return &v
	}).(AutoDeleteSettingPtrOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingPtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) Elem() AutoDeleteSettingOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) AutoDeleteSetting {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSetting
		return ret
	}).(AutoDeleteSettingOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponse struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingResponse
func (val *AutoDeleteSettingResponse) Defaults() *AutoDeleteSettingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

type AutoDeleteSettingResponseOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutput() AutoDeleteSettingResponseOutput {
	return o
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutputWithContext(ctx context.Context) AutoDeleteSettingResponseOutput {
	return o
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponseOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutput() AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutputWithContext(ctx context.Context) AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) Elem() AutoDeleteSettingResponseOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) AutoDeleteSettingResponse {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSettingResponse
		return ret
	}).(AutoDeleteSettingResponseOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponsePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoForecastHorizonInput is an input type that accepts AutoForecastHorizonArgs and AutoForecastHorizonOutput values.
// You can construct a concrete instance of `AutoForecastHorizonInput` via:
//
//	AutoForecastHorizonArgs{...}
type AutoForecastHorizonInput interface {
	pulumi.Input

	ToAutoForecastHorizonOutput() AutoForecastHorizonOutput
	ToAutoForecastHorizonOutputWithContext(context.Context) AutoForecastHorizonOutput
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return i.ToAutoForecastHorizonOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput)
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput).ToAutoForecastHorizonPtrOutputWithContext(ctx)
}

// AutoForecastHorizonPtrInput is an input type that accepts AutoForecastHorizonArgs, AutoForecastHorizonPtr and AutoForecastHorizonPtrOutput values.
// You can construct a concrete instance of `AutoForecastHorizonPtrInput` via:
//
//	        AutoForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type AutoForecastHorizonPtrInput interface {
	pulumi.Input

	ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput
	ToAutoForecastHorizonPtrOutputWithContext(context.Context) AutoForecastHorizonPtrOutput
}

type autoForecastHorizonPtrType AutoForecastHorizonArgs

func AutoForecastHorizonPtr(v *AutoForecastHorizonArgs) AutoForecastHorizonPtrInput {
	return (*autoForecastHorizonPtrType)(v)
}

func (*autoForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoForecastHorizon) *AutoForecastHorizon {
		return &v
	}).(AutoForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) Elem() AutoForecastHorizonOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) AutoForecastHorizon {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizon
		return ret
	}).(AutoForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutput() AutoForecastHorizonResponseOutput {
	return o
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutputWithContext(ctx context.Context) AutoForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutput() AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutputWithContext(ctx context.Context) AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) Elem() AutoForecastHorizonResponseOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) AutoForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizonResponse
		return ret
	}).(AutoForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettings `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJob
func (val *AutoMLJob) Defaults() *AutoMLJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJobInput is an input type that accepts AutoMLJobArgs and AutoMLJobOutput values.
// You can construct a concrete instance of `AutoMLJobInput` via:
//
//	AutoMLJobArgs{...}
type AutoMLJobInput interface {
	pulumi.Input

	ToAutoMLJobOutput() AutoMLJobOutput
	ToAutoMLJobOutputWithContext(context.Context) AutoMLJobOutput
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings QueueSettingsPtrInput `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails pulumi.Input `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobArgs
func (val *AutoMLJobArgs) Defaults() *AutoMLJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (AutoMLJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (i AutoMLJobArgs) ToAutoMLJobOutput() AutoMLJobOutput {
	return i.ToAutoMLJobOutputWithContext(context.Background())
}

func (i AutoMLJobArgs) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoMLJobOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobOutput struct{ *pulumi.OutputState }

func (AutoMLJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (o AutoMLJobOutput) ToAutoMLJobOutput() AutoMLJobOutput {
	return o
}

func (o AutoMLJobOutput) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o AutoMLJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o AutoMLJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o AutoMLJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o AutoMLJobOutput) QueueSettings() QueueSettingsPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *QueueSettings { return v.QueueSettings }).(QueueSettingsPtrOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o AutoMLJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettingsResponse `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobResponse
func (val *AutoMLJobResponse) Defaults() *AutoMLJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponseOutput struct{ *pulumi.OutputState }

func (AutoMLJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJobResponse)(nil)).Elem()
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutput() AutoMLJobResponseOutput {
	return o
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutputWithContext(ctx context.Context) AutoMLJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o AutoMLJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o AutoMLJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o AutoMLJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o AutoMLJobResponseOutput) QueueSettings() QueueSettingsResponsePtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *QueueSettingsResponse { return v.QueueSettings }).(QueueSettingsResponsePtrOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o AutoMLJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o AutoMLJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobResponseOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoNCrossValidationsInput is an input type that accepts AutoNCrossValidationsArgs and AutoNCrossValidationsOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsInput` via:
//
//	AutoNCrossValidationsArgs{...}
type AutoNCrossValidationsInput interface {
	pulumi.Input

	ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput
	ToAutoNCrossValidationsOutputWithContext(context.Context) AutoNCrossValidationsOutput
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return i.ToAutoNCrossValidationsOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput)
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput).ToAutoNCrossValidationsPtrOutputWithContext(ctx)
}

// AutoNCrossValidationsPtrInput is an input type that accepts AutoNCrossValidationsArgs, AutoNCrossValidationsPtr and AutoNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsPtrInput` via:
//
//	        AutoNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type AutoNCrossValidationsPtrInput interface {
	pulumi.Input

	ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput
	ToAutoNCrossValidationsPtrOutputWithContext(context.Context) AutoNCrossValidationsPtrOutput
}

type autoNCrossValidationsPtrType AutoNCrossValidationsArgs

func AutoNCrossValidationsPtr(v *AutoNCrossValidationsArgs) AutoNCrossValidationsPtrInput {
	return (*autoNCrossValidationsPtrType)(v)
}

func (*autoNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoNCrossValidations) *AutoNCrossValidations {
		return &v
	}).(AutoNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) Elem() AutoNCrossValidationsOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) AutoNCrossValidations {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidations
		return ret
	}).(AutoNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutput() AutoNCrossValidationsResponseOutput {
	return o
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutputWithContext(ctx context.Context) AutoNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutput() AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) Elem() AutoNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) AutoNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidationsResponse
		return ret
	}).(AutoNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Auto pause properties
type AutoPauseProperties struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// AutoPausePropertiesInput is an input type that accepts AutoPausePropertiesArgs and AutoPausePropertiesOutput values.
// You can construct a concrete instance of `AutoPausePropertiesInput` via:
//
//	AutoPausePropertiesArgs{...}
type AutoPausePropertiesInput interface {
	pulumi.Input

	ToAutoPausePropertiesOutput() AutoPausePropertiesOutput
	ToAutoPausePropertiesOutputWithContext(context.Context) AutoPausePropertiesOutput
}

// Auto pause properties
type AutoPausePropertiesArgs struct {
	DelayInMinutes pulumi.IntPtrInput  `pulumi:"delayInMinutes"`
	Enabled        pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AutoPausePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPauseProperties)(nil)).Elem()
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesOutput() AutoPausePropertiesOutput {
	return i.ToAutoPausePropertiesOutputWithContext(context.Background())
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesOutputWithContext(ctx context.Context) AutoPausePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesOutput)
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return i.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesOutput).ToAutoPausePropertiesPtrOutputWithContext(ctx)
}

// AutoPausePropertiesPtrInput is an input type that accepts AutoPausePropertiesArgs, AutoPausePropertiesPtr and AutoPausePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoPausePropertiesPtrInput` via:
//
//	        AutoPausePropertiesArgs{...}
//
//	or:
//
//	        nil
type AutoPausePropertiesPtrInput interface {
	pulumi.Input

	ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput
	ToAutoPausePropertiesPtrOutputWithContext(context.Context) AutoPausePropertiesPtrOutput
}

type autoPausePropertiesPtrType AutoPausePropertiesArgs

func AutoPausePropertiesPtr(v *AutoPausePropertiesArgs) AutoPausePropertiesPtrInput {
	return (*autoPausePropertiesPtrType)(v)
}

func (*autoPausePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPauseProperties)(nil)).Elem()
}

func (i *autoPausePropertiesPtrType) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return i.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoPausePropertiesPtrType) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesPtrOutput)
}

// Auto pause properties
type AutoPausePropertiesOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPauseProperties)(nil)).Elem()
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesOutput() AutoPausePropertiesOutput {
	return o
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesOutputWithContext(ctx context.Context) AutoPausePropertiesOutput {
	return o
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return o.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoPauseProperties) *AutoPauseProperties {
		return &v
	}).(AutoPausePropertiesPtrOutput)
}

func (o AutoPausePropertiesOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoPauseProperties) *int { return v.DelayInMinutes }).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoPauseProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutoPausePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPauseProperties)(nil)).Elem()
}

func (o AutoPausePropertiesPtrOutput) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return o
}

func (o AutoPausePropertiesPtrOutput) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return o
}

func (o AutoPausePropertiesPtrOutput) Elem() AutoPausePropertiesOutput {
	return o.ApplyT(func(v *AutoPauseProperties) AutoPauseProperties {
		if v != nil {
			return *v
		}
		var ret AutoPauseProperties
		return ret
	}).(AutoPausePropertiesOutput)
}

func (o AutoPausePropertiesPtrOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoPauseProperties) *int {
		if v == nil {
			return nil
		}
		return v.DelayInMinutes
	}).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoPauseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Auto pause properties
type AutoPausePropertiesResponse struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// Auto pause properties
type AutoPausePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPausePropertiesResponse)(nil)).Elem()
}

func (o AutoPausePropertiesResponseOutput) ToAutoPausePropertiesResponseOutput() AutoPausePropertiesResponseOutput {
	return o
}

func (o AutoPausePropertiesResponseOutput) ToAutoPausePropertiesResponseOutputWithContext(ctx context.Context) AutoPausePropertiesResponseOutput {
	return o
}

func (o AutoPausePropertiesResponseOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoPausePropertiesResponse) *int { return v.DelayInMinutes }).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoPausePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutoPausePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPausePropertiesResponse)(nil)).Elem()
}

func (o AutoPausePropertiesResponsePtrOutput) ToAutoPausePropertiesResponsePtrOutput() AutoPausePropertiesResponsePtrOutput {
	return o
}

func (o AutoPausePropertiesResponsePtrOutput) ToAutoPausePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoPausePropertiesResponsePtrOutput {
	return o
}

func (o AutoPausePropertiesResponsePtrOutput) Elem() AutoPausePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) AutoPausePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AutoPausePropertiesResponse
		return ret
	}).(AutoPausePropertiesResponseOutput)
}

func (o AutoPausePropertiesResponsePtrOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayInMinutes
	}).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Auto scale properties
type AutoScaleProperties struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

// AutoScalePropertiesInput is an input type that accepts AutoScalePropertiesArgs and AutoScalePropertiesOutput values.
// You can construct a concrete instance of `AutoScalePropertiesInput` via:
//
//	AutoScalePropertiesArgs{...}
type AutoScalePropertiesInput interface {
	pulumi.Input

	ToAutoScalePropertiesOutput() AutoScalePropertiesOutput
	ToAutoScalePropertiesOutputWithContext(context.Context) AutoScalePropertiesOutput
}

// Auto scale properties
type AutoScalePropertiesArgs struct {
	Enabled      pulumi.BoolPtrInput `pulumi:"enabled"`
	MaxNodeCount pulumi.IntPtrInput  `pulumi:"maxNodeCount"`
	MinNodeCount pulumi.IntPtrInput  `pulumi:"minNodeCount"`
}

func (AutoScalePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleProperties)(nil)).Elem()
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesOutput() AutoScalePropertiesOutput {
	return i.ToAutoScalePropertiesOutputWithContext(context.Background())
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesOutputWithContext(ctx context.Context) AutoScalePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesOutput)
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return i.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesOutput).ToAutoScalePropertiesPtrOutputWithContext(ctx)
}

// AutoScalePropertiesPtrInput is an input type that accepts AutoScalePropertiesArgs, AutoScalePropertiesPtr and AutoScalePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoScalePropertiesPtrInput` via:
//
//	        AutoScalePropertiesArgs{...}
//
//	or:
//
//	        nil
type AutoScalePropertiesPtrInput interface {
	pulumi.Input

	ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput
	ToAutoScalePropertiesPtrOutputWithContext(context.Context) AutoScalePropertiesPtrOutput
}

type autoScalePropertiesPtrType AutoScalePropertiesArgs

func AutoScalePropertiesPtr(v *AutoScalePropertiesArgs) AutoScalePropertiesPtrInput {
	return (*autoScalePropertiesPtrType)(v)
}

func (*autoScalePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleProperties)(nil)).Elem()
}

func (i *autoScalePropertiesPtrType) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return i.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoScalePropertiesPtrType) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesPtrOutput)
}

// Auto scale properties
type AutoScalePropertiesOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleProperties)(nil)).Elem()
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesOutput() AutoScalePropertiesOutput {
	return o
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesOutputWithContext(ctx context.Context) AutoScalePropertiesOutput {
	return o
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return o.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoScaleProperties) *AutoScaleProperties {
		return &v
	}).(AutoScalePropertiesPtrOutput)
}

func (o AutoScalePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type AutoScalePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleProperties)(nil)).Elem()
}

func (o AutoScalePropertiesPtrOutput) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return o
}

func (o AutoScalePropertiesPtrOutput) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return o
}

func (o AutoScalePropertiesPtrOutput) Elem() AutoScalePropertiesOutput {
	return o.ApplyT(func(v *AutoScaleProperties) AutoScaleProperties {
		if v != nil {
			return *v
		}
		var ret AutoScaleProperties
		return ret
	}).(AutoScalePropertiesOutput)
}

func (o AutoScalePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Auto scale properties
type AutoScalePropertiesResponse struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

// Auto scale properties
type AutoScalePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScalePropertiesResponse)(nil)).Elem()
}

func (o AutoScalePropertiesResponseOutput) ToAutoScalePropertiesResponseOutput() AutoScalePropertiesResponseOutput {
	return o
}

func (o AutoScalePropertiesResponseOutput) ToAutoScalePropertiesResponseOutputWithContext(ctx context.Context) AutoScalePropertiesResponseOutput {
	return o
}

func (o AutoScalePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesResponseOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesResponseOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type AutoScalePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScalePropertiesResponse)(nil)).Elem()
}

func (o AutoScalePropertiesResponsePtrOutput) ToAutoScalePropertiesResponsePtrOutput() AutoScalePropertiesResponsePtrOutput {
	return o
}

func (o AutoScalePropertiesResponsePtrOutput) ToAutoScalePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoScalePropertiesResponsePtrOutput {
	return o
}

func (o AutoScalePropertiesResponsePtrOutput) Elem() AutoScalePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) AutoScalePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AutoScalePropertiesResponse
		return ret
	}).(AutoScalePropertiesResponseOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type AutoSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoSeasonalityInput is an input type that accepts AutoSeasonalityArgs and AutoSeasonalityOutput values.
// You can construct a concrete instance of `AutoSeasonalityInput` via:
//
//	AutoSeasonalityArgs{...}
type AutoSeasonalityInput interface {
	pulumi.Input

	ToAutoSeasonalityOutput() AutoSeasonalityOutput
	ToAutoSeasonalityOutputWithContext(context.Context) AutoSeasonalityOutput
}

type AutoSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return i.ToAutoSeasonalityOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput)
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput).ToAutoSeasonalityPtrOutputWithContext(ctx)
}

// AutoSeasonalityPtrInput is an input type that accepts AutoSeasonalityArgs, AutoSeasonalityPtr and AutoSeasonalityPtrOutput values.
// You can construct a concrete instance of `AutoSeasonalityPtrInput` via:
//
//	        AutoSeasonalityArgs{...}
//
//	or:
//
//	        nil
type AutoSeasonalityPtrInput interface {
	pulumi.Input

	ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput
	ToAutoSeasonalityPtrOutputWithContext(context.Context) AutoSeasonalityPtrOutput
}

type autoSeasonalityPtrType AutoSeasonalityArgs

func AutoSeasonalityPtr(v *AutoSeasonalityArgs) AutoSeasonalityPtrInput {
	return (*autoSeasonalityPtrType)(v)
}

func (*autoSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityPtrOutput)
}

type AutoSeasonalityOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoSeasonality) *AutoSeasonality {
		return &v
	}).(AutoSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) Elem() AutoSeasonalityOutput {
	return o.ApplyT(func(v *AutoSeasonality) AutoSeasonality {
		if v != nil {
			return *v
		}
		var ret AutoSeasonality
		return ret
	}).(AutoSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutput() AutoSeasonalityResponseOutput {
	return o
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutputWithContext(ctx context.Context) AutoSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutput() AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutputWithContext(ctx context.Context) AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) Elem() AutoSeasonalityResponseOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) AutoSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret AutoSeasonalityResponse
		return ret
	}).(AutoSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetLagsInput is an input type that accepts AutoTargetLagsArgs and AutoTargetLagsOutput values.
// You can construct a concrete instance of `AutoTargetLagsInput` via:
//
//	AutoTargetLagsArgs{...}
type AutoTargetLagsInput interface {
	pulumi.Input

	ToAutoTargetLagsOutput() AutoTargetLagsOutput
	ToAutoTargetLagsOutputWithContext(context.Context) AutoTargetLagsOutput
}

type AutoTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return i.ToAutoTargetLagsOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput)
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput).ToAutoTargetLagsPtrOutputWithContext(ctx)
}

// AutoTargetLagsPtrInput is an input type that accepts AutoTargetLagsArgs, AutoTargetLagsPtr and AutoTargetLagsPtrOutput values.
// You can construct a concrete instance of `AutoTargetLagsPtrInput` via:
//
//	        AutoTargetLagsArgs{...}
//
//	or:
//
//	        nil
type AutoTargetLagsPtrInput interface {
	pulumi.Input

	ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput
	ToAutoTargetLagsPtrOutputWithContext(context.Context) AutoTargetLagsPtrOutput
}

type autoTargetLagsPtrType AutoTargetLagsArgs

func AutoTargetLagsPtr(v *AutoTargetLagsArgs) AutoTargetLagsPtrInput {
	return (*autoTargetLagsPtrType)(v)
}

func (*autoTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsPtrOutput)
}

type AutoTargetLagsOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetLags) *AutoTargetLags {
		return &v
	}).(AutoTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) Elem() AutoTargetLagsOutput {
	return o.ApplyT(func(v *AutoTargetLags) AutoTargetLags {
		if v != nil {
			return *v
		}
		var ret AutoTargetLags
		return ret
	}).(AutoTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutput() AutoTargetLagsResponseOutput {
	return o
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutputWithContext(ctx context.Context) AutoTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutput() AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutputWithContext(ctx context.Context) AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) Elem() AutoTargetLagsResponseOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) AutoTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetLagsResponse
		return ret
	}).(AutoTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetRollingWindowSizeInput is an input type that accepts AutoTargetRollingWindowSizeArgs and AutoTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizeInput` via:
//
//	AutoTargetRollingWindowSizeArgs{...}
type AutoTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput
	ToAutoTargetRollingWindowSizeOutputWithContext(context.Context) AutoTargetRollingWindowSizeOutput
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return i.ToAutoTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput)
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput).ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// AutoTargetRollingWindowSizePtrInput is an input type that accepts AutoTargetRollingWindowSizeArgs, AutoTargetRollingWindowSizePtr and AutoTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizePtrInput` via:
//
//	        AutoTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type AutoTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput
	ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Context) AutoTargetRollingWindowSizePtrOutput
}

type autoTargetRollingWindowSizePtrType AutoTargetRollingWindowSizeArgs

func AutoTargetRollingWindowSizePtr(v *AutoTargetRollingWindowSizeArgs) AutoTargetRollingWindowSizePtrInput {
	return (*autoTargetRollingWindowSizePtrType)(v)
}

func (*autoTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizePtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetRollingWindowSize) *AutoTargetRollingWindowSize {
		return &v
	}).(AutoTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) Elem() AutoTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) AutoTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSize
		return ret
	}).(AutoTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutput() AutoTargetRollingWindowSizeResponseOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutput() AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) Elem() AutoTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) AutoTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSizeResponse
		return ret
	}).(AutoTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Settings for Autologger.
type AutologgerSettings struct {
	// [Required] Indicates whether mlflow autologger is enabled.
	MlflowAutologger string `pulumi:"mlflowAutologger"`
}

// AutologgerSettingsInput is an input type that accepts AutologgerSettingsArgs and AutologgerSettingsOutput values.
// You can construct a concrete instance of `AutologgerSettingsInput` via:
//
//	AutologgerSettingsArgs{...}
type AutologgerSettingsInput interface {
	pulumi.Input

	ToAutologgerSettingsOutput() AutologgerSettingsOutput
	ToAutologgerSettingsOutputWithContext(context.Context) AutologgerSettingsOutput
}

// Settings for Autologger.
type AutologgerSettingsArgs struct {
	// [Required] Indicates whether mlflow autologger is enabled.
	MlflowAutologger pulumi.StringInput `pulumi:"mlflowAutologger"`
}

func (AutologgerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutologgerSettings)(nil)).Elem()
}

func (i AutologgerSettingsArgs) ToAutologgerSettingsOutput() AutologgerSettingsOutput {
	return i.ToAutologgerSettingsOutputWithContext(context.Background())
}

func (i AutologgerSettingsArgs) ToAutologgerSettingsOutputWithContext(ctx context.Context) AutologgerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutologgerSettingsOutput)
}

func (i AutologgerSettingsArgs) ToAutologgerSettingsPtrOutput() AutologgerSettingsPtrOutput {
	return i.ToAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (i AutologgerSettingsArgs) ToAutologgerSettingsPtrOutputWithContext(ctx context.Context) AutologgerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutologgerSettingsOutput).ToAutologgerSettingsPtrOutputWithContext(ctx)
}

// AutologgerSettingsPtrInput is an input type that accepts AutologgerSettingsArgs, AutologgerSettingsPtr and AutologgerSettingsPtrOutput values.
// You can construct a concrete instance of `AutologgerSettingsPtrInput` via:
//
//	        AutologgerSettingsArgs{...}
//
//	or:
//
//	        nil
type AutologgerSettingsPtrInput interface {
	pulumi.Input

	ToAutologgerSettingsPtrOutput() AutologgerSettingsPtrOutput
	ToAutologgerSettingsPtrOutputWithContext(context.Context) AutologgerSettingsPtrOutput
}

type autologgerSettingsPtrType AutologgerSettingsArgs

func AutologgerSettingsPtr(v *AutologgerSettingsArgs) AutologgerSettingsPtrInput {
	return (*autologgerSettingsPtrType)(v)
}

func (*autologgerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutologgerSettings)(nil)).Elem()
}

func (i *autologgerSettingsPtrType) ToAutologgerSettingsPtrOutput() AutologgerSettingsPtrOutput {
	return i.ToAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (i *autologgerSettingsPtrType) ToAutologgerSettingsPtrOutputWithContext(ctx context.Context) AutologgerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutologgerSettingsPtrOutput)
}

// Settings for Autologger.
type AutologgerSettingsOutput struct{ *pulumi.OutputState }

func (AutologgerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutologgerSettings)(nil)).Elem()
}

func (o AutologgerSettingsOutput) ToAutologgerSettingsOutput() AutologgerSettingsOutput {
	return o
}

func (o AutologgerSettingsOutput) ToAutologgerSettingsOutputWithContext(ctx context.Context) AutologgerSettingsOutput {
	return o
}

func (o AutologgerSettingsOutput) ToAutologgerSettingsPtrOutput() AutologgerSettingsPtrOutput {
	return o.ToAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (o AutologgerSettingsOutput) ToAutologgerSettingsPtrOutputWithContext(ctx context.Context) AutologgerSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutologgerSettings) *AutologgerSettings {
		return &v
	}).(AutologgerSettingsPtrOutput)
}

// [Required] Indicates whether mlflow autologger is enabled.
func (o AutologgerSettingsOutput) MlflowAutologger() pulumi.StringOutput {
	return o.ApplyT(func(v AutologgerSettings) string { return v.MlflowAutologger }).(pulumi.StringOutput)
}

type AutologgerSettingsPtrOutput struct{ *pulumi.OutputState }

func (AutologgerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutologgerSettings)(nil)).Elem()
}

func (o AutologgerSettingsPtrOutput) ToAutologgerSettingsPtrOutput() AutologgerSettingsPtrOutput {
	return o
}

func (o AutologgerSettingsPtrOutput) ToAutologgerSettingsPtrOutputWithContext(ctx context.Context) AutologgerSettingsPtrOutput {
	return o
}

func (o AutologgerSettingsPtrOutput) Elem() AutologgerSettingsOutput {
	return o.ApplyT(func(v *AutologgerSettings) AutologgerSettings {
		if v != nil {
			return *v
		}
		var ret AutologgerSettings
		return ret
	}).(AutologgerSettingsOutput)
}

// [Required] Indicates whether mlflow autologger is enabled.
func (o AutologgerSettingsPtrOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutologgerSettings) *string {
		if v == nil {
			return nil
		}
		return &v.MlflowAutologger
	}).(pulumi.StringPtrOutput)
}

// Settings for Autologger.
type AutologgerSettingsResponse struct {
	// [Required] Indicates whether mlflow autologger is enabled.
	MlflowAutologger string `pulumi:"mlflowAutologger"`
}

// Settings for Autologger.
type AutologgerSettingsResponseOutput struct{ *pulumi.OutputState }

func (AutologgerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutologgerSettingsResponse)(nil)).Elem()
}

func (o AutologgerSettingsResponseOutput) ToAutologgerSettingsResponseOutput() AutologgerSettingsResponseOutput {
	return o
}

func (o AutologgerSettingsResponseOutput) ToAutologgerSettingsResponseOutputWithContext(ctx context.Context) AutologgerSettingsResponseOutput {
	return o
}

// [Required] Indicates whether mlflow autologger is enabled.
func (o AutologgerSettingsResponseOutput) MlflowAutologger() pulumi.StringOutput {
	return o.ApplyT(func(v AutologgerSettingsResponse) string { return v.MlflowAutologger }).(pulumi.StringOutput)
}

type AutologgerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutologgerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutologgerSettingsResponse)(nil)).Elem()
}

func (o AutologgerSettingsResponsePtrOutput) ToAutologgerSettingsResponsePtrOutput() AutologgerSettingsResponsePtrOutput {
	return o
}

func (o AutologgerSettingsResponsePtrOutput) ToAutologgerSettingsResponsePtrOutputWithContext(ctx context.Context) AutologgerSettingsResponsePtrOutput {
	return o
}

func (o AutologgerSettingsResponsePtrOutput) Elem() AutologgerSettingsResponseOutput {
	return o.ApplyT(func(v *AutologgerSettingsResponse) AutologgerSettingsResponse {
		if v != nil {
			return *v
		}
		var ret AutologgerSettingsResponse
		return ret
	}).(AutologgerSettingsResponseOutput)
}

// [Required] Indicates whether mlflow autologger is enabled.
func (o AutologgerSettingsResponsePtrOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutologgerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MlflowAutologger
	}).(pulumi.StringPtrOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastore struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastore
func (val *AzureBlobDatastore) Defaults() *AzureBlobDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureBlobDatastoreInput is an input type that accepts AzureBlobDatastoreArgs and AzureBlobDatastoreOutput values.
// You can construct a concrete instance of `AzureBlobDatastoreInput` via:
//
//	AzureBlobDatastoreArgs{...}
type AzureBlobDatastoreInput interface {
	pulumi.Input

	ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput
	ToAzureBlobDatastoreOutputWithContext(context.Context) AzureBlobDatastoreOutput
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreArgs struct {
	// Storage account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Storage account container name.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreArgs
func (val *AzureBlobDatastoreArgs) Defaults() *AzureBlobDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureBlobDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return i.ToAzureBlobDatastoreOutputWithContext(context.Background())
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatastoreOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return o
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o AzureBlobDatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureBlobDatastoreOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureBlobDatastoreOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponse struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreResponse
func (val *AzureBlobDatastoreResponse) Defaults() *AzureBlobDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastoreResponse)(nil)).Elem()
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutput() AzureBlobDatastoreResponseOutput {
	return o
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutputWithContext(ctx context.Context) AzureBlobDatastoreResponseOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o AzureBlobDatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureBlobDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureBlobDatastoreResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureBlobDatastoreResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1Datastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1Datastore
func (val *AzureDataLakeGen1Datastore) Defaults() *AzureDataLakeGen1Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen1DatastoreInput is an input type that accepts AzureDataLakeGen1DatastoreArgs and AzureDataLakeGen1DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen1DatastoreInput` via:
//
//	AzureDataLakeGen1DatastoreArgs{...}
type AzureDataLakeGen1DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput
	ToAzureDataLakeGen1DatastoreOutputWithContext(context.Context) AzureDataLakeGen1DatastoreOutput
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreArgs struct {
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Azure Resource Group name
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName pulumi.StringInput `pulumi:"storeName"`
	// Azure Subscription Id
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreArgs
func (val *AzureDataLakeGen1DatastoreArgs) Defaults() *AzureDataLakeGen1DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen1DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return i.ToAzureDataLakeGen1DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen1DatastoreOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o AzureDataLakeGen1DatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Azure Resource Group name
func (o AzureDataLakeGen1DatastoreOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.StoreName }).(pulumi.StringOutput)
}

// Azure Subscription Id
func (o AzureDataLakeGen1DatastoreOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreResponse
func (val *AzureDataLakeGen1DatastoreResponse) Defaults() *AzureDataLakeGen1DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutput() AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o AzureDataLakeGen1DatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *IntellectualPropertyResponse {
		return v.IntellectualProperty
	}).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen1DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Azure Resource Group name
func (o AzureDataLakeGen1DatastoreResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreResponseOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.StoreName }).(pulumi.StringOutput)
}

// Azure Subscription Id
func (o AzureDataLakeGen1DatastoreResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2Datastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2Datastore
func (val *AzureDataLakeGen2Datastore) Defaults() *AzureDataLakeGen2Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen2DatastoreInput is an input type that accepts AzureDataLakeGen2DatastoreArgs and AzureDataLakeGen2DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen2DatastoreInput` via:
//
//	AzureDataLakeGen2DatastoreArgs{...}
type AzureDataLakeGen2DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput
	ToAzureDataLakeGen2DatastoreOutputWithContext(context.Context) AzureDataLakeGen2DatastoreOutput
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem pulumi.StringInput `pulumi:"filesystem"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreArgs
func (val *AzureDataLakeGen2DatastoreArgs) Defaults() *AzureDataLakeGen2DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen2DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return i.ToAzureDataLakeGen2DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen2DatastoreOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.Filesystem }).(pulumi.StringOutput)
}

// Intellectual Property details.
func (o AzureDataLakeGen2DatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureDataLakeGen2DatastoreOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureDataLakeGen2DatastoreOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreResponse
func (val *AzureDataLakeGen2DatastoreResponse) Defaults() *AzureDataLakeGen2DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutput() AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreResponseOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.Filesystem }).(pulumi.StringOutput)
}

// Intellectual Property details.
func (o AzureDataLakeGen2DatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *IntellectualPropertyResponse {
		return v.IntellectualProperty
	}).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen2DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureDataLakeGen2DatastoreResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureDataLakeGen2DatastoreResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhook struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// AzureDevOpsWebhookInput is an input type that accepts AzureDevOpsWebhookArgs and AzureDevOpsWebhookOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookInput` via:
//
//	AzureDevOpsWebhookArgs{...}
type AzureDevOpsWebhookInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput
	ToAzureDevOpsWebhookOutputWithContext(context.Context) AzureDevOpsWebhookOutput
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookArgs struct {
	// Send callback on a specified notification event
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType pulumi.StringInput `pulumi:"webhookType"`
}

func (AzureDevOpsWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return i.ToAzureDevOpsWebhookOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookOutput)
}

// AzureDevOpsWebhookMapInput is an input type that accepts AzureDevOpsWebhookMap and AzureDevOpsWebhookMapOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookMapInput` via:
//
//	AzureDevOpsWebhookMap{ "key": AzureDevOpsWebhookArgs{...} }
type AzureDevOpsWebhookMapInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput
	ToAzureDevOpsWebhookMapOutputWithContext(context.Context) AzureDevOpsWebhookMapOutput
}

type AzureDevOpsWebhookMap map[string]AzureDevOpsWebhookInput

func (AzureDevOpsWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return i.ToAzureDevOpsWebhookMapOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookMapOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return o
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhook {
		return vs[0].(map[string]AzureDevOpsWebhook)[vs[1].(string)]
	}).(AzureDevOpsWebhookOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponse struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponseOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutput() AzureDevOpsWebhookResponseOutput {
	return o
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookResponseOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookResponseMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutput() AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhookResponse {
		return vs[0].(map[string]AzureDevOpsWebhookResponse)[vs[1].(string)]
	}).(AzureDevOpsWebhookResponseOutput)
}

// Azure File datastore configuration.
type AzureFileDatastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastore
func (val *AzureFileDatastore) Defaults() *AzureFileDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureFileDatastoreInput is an input type that accepts AzureFileDatastoreArgs and AzureFileDatastoreOutput values.
// You can construct a concrete instance of `AzureFileDatastoreInput` via:
//
//	AzureFileDatastoreArgs{...}
type AzureFileDatastoreInput interface {
	pulumi.Input

	ToAzureFileDatastoreOutput() AzureFileDatastoreOutput
	ToAzureFileDatastoreOutputWithContext(context.Context) AzureFileDatastoreOutput
}

// Azure File datastore configuration.
type AzureFileDatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName pulumi.StringInput `pulumi:"fileShareName"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreArgs
func (val *AzureFileDatastoreArgs) Defaults() *AzureFileDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureFileDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return i.ToAzureFileDatastoreOutputWithContext(context.Background())
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileDatastoreOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return o
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.FileShareName }).(pulumi.StringOutput)
}

// Intellectual Property details.
func (o AzureFileDatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureFileDatastoreOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureFileDatastoreOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Azure Resource Group name
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Azure Subscription Id
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreResponse
func (val *AzureFileDatastoreResponse) Defaults() *AzureFileDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure File datastore configuration.
type AzureFileDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastoreResponse)(nil)).Elem()
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutput() AzureFileDatastoreResponseOutput {
	return o
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutputWithContext(ctx context.Context) AzureFileDatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreResponseOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.FileShareName }).(pulumi.StringOutput)
}

// Intellectual Property details.
func (o AzureFileDatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureFileDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Azure Resource Group name
func (o AzureFileDatastoreResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Azure Subscription Id
func (o AzureFileDatastoreResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type AzureOpenAiFineTuning struct {
	// HyperParameters for fine tuning Azure Open AI model.
	HyperParameters *AzureOpenAiHyperParameters `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInput `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'AzureOpenAI'.
	ModelProvider string `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData interface{} `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData interface{} `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for AzureOpenAiFineTuning
func (val *AzureOpenAiFineTuning) Defaults() *AzureOpenAiFineTuning {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Model = *tmp.Model.Defaults()

	return &tmp
}

// AzureOpenAiFineTuningInput is an input type that accepts AzureOpenAiFineTuningArgs and AzureOpenAiFineTuningOutput values.
// You can construct a concrete instance of `AzureOpenAiFineTuningInput` via:
//
//	AzureOpenAiFineTuningArgs{...}
type AzureOpenAiFineTuningInput interface {
	pulumi.Input

	ToAzureOpenAiFineTuningOutput() AzureOpenAiFineTuningOutput
	ToAzureOpenAiFineTuningOutputWithContext(context.Context) AzureOpenAiFineTuningOutput
}

type AzureOpenAiFineTuningArgs struct {
	// HyperParameters for fine tuning Azure Open AI model.
	HyperParameters AzureOpenAiHyperParametersPtrInput `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInputInput `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'AzureOpenAI'.
	ModelProvider pulumi.StringInput `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData pulumi.Input `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData pulumi.Input `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for AzureOpenAiFineTuningArgs
func (val *AzureOpenAiFineTuningArgs) Defaults() *AzureOpenAiFineTuningArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AzureOpenAiFineTuningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiFineTuning)(nil)).Elem()
}

func (i AzureOpenAiFineTuningArgs) ToAzureOpenAiFineTuningOutput() AzureOpenAiFineTuningOutput {
	return i.ToAzureOpenAiFineTuningOutputWithContext(context.Background())
}

func (i AzureOpenAiFineTuningArgs) ToAzureOpenAiFineTuningOutputWithContext(ctx context.Context) AzureOpenAiFineTuningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureOpenAiFineTuningOutput)
}

type AzureOpenAiFineTuningOutput struct{ *pulumi.OutputState }

func (AzureOpenAiFineTuningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiFineTuning)(nil)).Elem()
}

func (o AzureOpenAiFineTuningOutput) ToAzureOpenAiFineTuningOutput() AzureOpenAiFineTuningOutput {
	return o
}

func (o AzureOpenAiFineTuningOutput) ToAzureOpenAiFineTuningOutputWithContext(ctx context.Context) AzureOpenAiFineTuningOutput {
	return o
}

// HyperParameters for fine tuning Azure Open AI model.
func (o AzureOpenAiFineTuningOutput) HyperParameters() AzureOpenAiHyperParametersPtrOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) *AzureOpenAiHyperParameters { return v.HyperParameters }).(AzureOpenAiHyperParametersPtrOutput)
}

// [Required] Input model for fine tuning.
func (o AzureOpenAiFineTuningOutput) Model() MLFlowModelJobInputOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) MLFlowModelJobInput { return v.Model }).(MLFlowModelJobInputOutput)
}

// Enum to determine the type of fine tuning.
// Expected value is 'AzureOpenAI'.
func (o AzureOpenAiFineTuningOutput) ModelProvider() pulumi.StringOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) string { return v.ModelProvider }).(pulumi.StringOutput)
}

// [Required] Fine tuning task type.
func (o AzureOpenAiFineTuningOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data for fine tuning.
func (o AzureOpenAiFineTuningOutput) TrainingData() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) interface{} { return v.TrainingData }).(pulumi.AnyOutput)
}

// Validation data for fine tuning.
func (o AzureOpenAiFineTuningOutput) ValidationData() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuning) interface{} { return v.ValidationData }).(pulumi.AnyOutput)
}

type AzureOpenAiFineTuningResponse struct {
	// HyperParameters for fine tuning Azure Open AI model.
	HyperParameters *AzureOpenAiHyperParametersResponse `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInputResponse `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'AzureOpenAI'.
	ModelProvider string `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData interface{} `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData interface{} `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for AzureOpenAiFineTuningResponse
func (val *AzureOpenAiFineTuningResponse) Defaults() *AzureOpenAiFineTuningResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Model = *tmp.Model.Defaults()

	return &tmp
}

type AzureOpenAiFineTuningResponseOutput struct{ *pulumi.OutputState }

func (AzureOpenAiFineTuningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiFineTuningResponse)(nil)).Elem()
}

func (o AzureOpenAiFineTuningResponseOutput) ToAzureOpenAiFineTuningResponseOutput() AzureOpenAiFineTuningResponseOutput {
	return o
}

func (o AzureOpenAiFineTuningResponseOutput) ToAzureOpenAiFineTuningResponseOutputWithContext(ctx context.Context) AzureOpenAiFineTuningResponseOutput {
	return o
}

// HyperParameters for fine tuning Azure Open AI model.
func (o AzureOpenAiFineTuningResponseOutput) HyperParameters() AzureOpenAiHyperParametersResponsePtrOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) *AzureOpenAiHyperParametersResponse { return v.HyperParameters }).(AzureOpenAiHyperParametersResponsePtrOutput)
}

// [Required] Input model for fine tuning.
func (o AzureOpenAiFineTuningResponseOutput) Model() MLFlowModelJobInputResponseOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) MLFlowModelJobInputResponse { return v.Model }).(MLFlowModelJobInputResponseOutput)
}

// Enum to determine the type of fine tuning.
// Expected value is 'AzureOpenAI'.
func (o AzureOpenAiFineTuningResponseOutput) ModelProvider() pulumi.StringOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) string { return v.ModelProvider }).(pulumi.StringOutput)
}

// [Required] Fine tuning task type.
func (o AzureOpenAiFineTuningResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data for fine tuning.
func (o AzureOpenAiFineTuningResponseOutput) TrainingData() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) interface{} { return v.TrainingData }).(pulumi.AnyOutput)
}

// Validation data for fine tuning.
func (o AzureOpenAiFineTuningResponseOutput) ValidationData() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureOpenAiFineTuningResponse) interface{} { return v.ValidationData }).(pulumi.AnyOutput)
}

// Azure Open AI hyperparameters for fine tuning.
type AzureOpenAiHyperParameters struct {
	// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
	BatchSize *int `pulumi:"batchSize"`
	// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
	LearningRateMultiplier *float64 `pulumi:"learningRateMultiplier"`
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
	NEpochs *int `pulumi:"nEpochs"`
}

// AzureOpenAiHyperParametersInput is an input type that accepts AzureOpenAiHyperParametersArgs and AzureOpenAiHyperParametersOutput values.
// You can construct a concrete instance of `AzureOpenAiHyperParametersInput` via:
//
//	AzureOpenAiHyperParametersArgs{...}
type AzureOpenAiHyperParametersInput interface {
	pulumi.Input

	ToAzureOpenAiHyperParametersOutput() AzureOpenAiHyperParametersOutput
	ToAzureOpenAiHyperParametersOutputWithContext(context.Context) AzureOpenAiHyperParametersOutput
}

// Azure Open AI hyperparameters for fine tuning.
type AzureOpenAiHyperParametersArgs struct {
	// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
	BatchSize pulumi.IntPtrInput `pulumi:"batchSize"`
	// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
	LearningRateMultiplier pulumi.Float64PtrInput `pulumi:"learningRateMultiplier"`
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
	NEpochs pulumi.IntPtrInput `pulumi:"nEpochs"`
}

func (AzureOpenAiHyperParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiHyperParameters)(nil)).Elem()
}

func (i AzureOpenAiHyperParametersArgs) ToAzureOpenAiHyperParametersOutput() AzureOpenAiHyperParametersOutput {
	return i.ToAzureOpenAiHyperParametersOutputWithContext(context.Background())
}

func (i AzureOpenAiHyperParametersArgs) ToAzureOpenAiHyperParametersOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureOpenAiHyperParametersOutput)
}

func (i AzureOpenAiHyperParametersArgs) ToAzureOpenAiHyperParametersPtrOutput() AzureOpenAiHyperParametersPtrOutput {
	return i.ToAzureOpenAiHyperParametersPtrOutputWithContext(context.Background())
}

func (i AzureOpenAiHyperParametersArgs) ToAzureOpenAiHyperParametersPtrOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureOpenAiHyperParametersOutput).ToAzureOpenAiHyperParametersPtrOutputWithContext(ctx)
}

// AzureOpenAiHyperParametersPtrInput is an input type that accepts AzureOpenAiHyperParametersArgs, AzureOpenAiHyperParametersPtr and AzureOpenAiHyperParametersPtrOutput values.
// You can construct a concrete instance of `AzureOpenAiHyperParametersPtrInput` via:
//
//	        AzureOpenAiHyperParametersArgs{...}
//
//	or:
//
//	        nil
type AzureOpenAiHyperParametersPtrInput interface {
	pulumi.Input

	ToAzureOpenAiHyperParametersPtrOutput() AzureOpenAiHyperParametersPtrOutput
	ToAzureOpenAiHyperParametersPtrOutputWithContext(context.Context) AzureOpenAiHyperParametersPtrOutput
}

type azureOpenAiHyperParametersPtrType AzureOpenAiHyperParametersArgs

func AzureOpenAiHyperParametersPtr(v *AzureOpenAiHyperParametersArgs) AzureOpenAiHyperParametersPtrInput {
	return (*azureOpenAiHyperParametersPtrType)(v)
}

func (*azureOpenAiHyperParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureOpenAiHyperParameters)(nil)).Elem()
}

func (i *azureOpenAiHyperParametersPtrType) ToAzureOpenAiHyperParametersPtrOutput() AzureOpenAiHyperParametersPtrOutput {
	return i.ToAzureOpenAiHyperParametersPtrOutputWithContext(context.Background())
}

func (i *azureOpenAiHyperParametersPtrType) ToAzureOpenAiHyperParametersPtrOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureOpenAiHyperParametersPtrOutput)
}

// Azure Open AI hyperparameters for fine tuning.
type AzureOpenAiHyperParametersOutput struct{ *pulumi.OutputState }

func (AzureOpenAiHyperParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiHyperParameters)(nil)).Elem()
}

func (o AzureOpenAiHyperParametersOutput) ToAzureOpenAiHyperParametersOutput() AzureOpenAiHyperParametersOutput {
	return o
}

func (o AzureOpenAiHyperParametersOutput) ToAzureOpenAiHyperParametersOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersOutput {
	return o
}

func (o AzureOpenAiHyperParametersOutput) ToAzureOpenAiHyperParametersPtrOutput() AzureOpenAiHyperParametersPtrOutput {
	return o.ToAzureOpenAiHyperParametersPtrOutputWithContext(context.Background())
}

func (o AzureOpenAiHyperParametersOutput) ToAzureOpenAiHyperParametersPtrOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureOpenAiHyperParameters) *AzureOpenAiHyperParameters {
		return &v
	}).(AzureOpenAiHyperParametersPtrOutput)
}

// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
func (o AzureOpenAiHyperParametersOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParameters) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
func (o AzureOpenAiHyperParametersOutput) LearningRateMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParameters) *float64 { return v.LearningRateMultiplier }).(pulumi.Float64PtrOutput)
}

// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
func (o AzureOpenAiHyperParametersOutput) NEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParameters) *int { return v.NEpochs }).(pulumi.IntPtrOutput)
}

type AzureOpenAiHyperParametersPtrOutput struct{ *pulumi.OutputState }

func (AzureOpenAiHyperParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureOpenAiHyperParameters)(nil)).Elem()
}

func (o AzureOpenAiHyperParametersPtrOutput) ToAzureOpenAiHyperParametersPtrOutput() AzureOpenAiHyperParametersPtrOutput {
	return o
}

func (o AzureOpenAiHyperParametersPtrOutput) ToAzureOpenAiHyperParametersPtrOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersPtrOutput {
	return o
}

func (o AzureOpenAiHyperParametersPtrOutput) Elem() AzureOpenAiHyperParametersOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParameters) AzureOpenAiHyperParameters {
		if v != nil {
			return *v
		}
		var ret AzureOpenAiHyperParameters
		return ret
	}).(AzureOpenAiHyperParametersOutput)
}

// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
func (o AzureOpenAiHyperParametersPtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParameters) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
func (o AzureOpenAiHyperParametersPtrOutput) LearningRateMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRateMultiplier
	}).(pulumi.Float64PtrOutput)
}

// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
func (o AzureOpenAiHyperParametersPtrOutput) NEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParameters) *int {
		if v == nil {
			return nil
		}
		return v.NEpochs
	}).(pulumi.IntPtrOutput)
}

// Azure Open AI hyperparameters for fine tuning.
type AzureOpenAiHyperParametersResponse struct {
	// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
	BatchSize *int `pulumi:"batchSize"`
	// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
	LearningRateMultiplier *float64 `pulumi:"learningRateMultiplier"`
	// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
	NEpochs *int `pulumi:"nEpochs"`
}

// Azure Open AI hyperparameters for fine tuning.
type AzureOpenAiHyperParametersResponseOutput struct{ *pulumi.OutputState }

func (AzureOpenAiHyperParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureOpenAiHyperParametersResponse)(nil)).Elem()
}

func (o AzureOpenAiHyperParametersResponseOutput) ToAzureOpenAiHyperParametersResponseOutput() AzureOpenAiHyperParametersResponseOutput {
	return o
}

func (o AzureOpenAiHyperParametersResponseOutput) ToAzureOpenAiHyperParametersResponseOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersResponseOutput {
	return o
}

// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
func (o AzureOpenAiHyperParametersResponseOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParametersResponse) *int { return v.BatchSize }).(pulumi.IntPtrOutput)
}

// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
func (o AzureOpenAiHyperParametersResponseOutput) LearningRateMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParametersResponse) *float64 { return v.LearningRateMultiplier }).(pulumi.Float64PtrOutput)
}

// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
func (o AzureOpenAiHyperParametersResponseOutput) NEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureOpenAiHyperParametersResponse) *int { return v.NEpochs }).(pulumi.IntPtrOutput)
}

type AzureOpenAiHyperParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureOpenAiHyperParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureOpenAiHyperParametersResponse)(nil)).Elem()
}

func (o AzureOpenAiHyperParametersResponsePtrOutput) ToAzureOpenAiHyperParametersResponsePtrOutput() AzureOpenAiHyperParametersResponsePtrOutput {
	return o
}

func (o AzureOpenAiHyperParametersResponsePtrOutput) ToAzureOpenAiHyperParametersResponsePtrOutputWithContext(ctx context.Context) AzureOpenAiHyperParametersResponsePtrOutput {
	return o
}

func (o AzureOpenAiHyperParametersResponsePtrOutput) Elem() AzureOpenAiHyperParametersResponseOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParametersResponse) AzureOpenAiHyperParametersResponse {
		if v != nil {
			return *v
		}
		var ret AzureOpenAiHyperParametersResponse
		return ret
	}).(AzureOpenAiHyperParametersResponseOutput)
}

// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.
func (o AzureOpenAiHyperParametersResponsePtrOutput) BatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.BatchSize
	}).(pulumi.IntPtrOutput)
}

// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid over fitting.
func (o AzureOpenAiHyperParametersResponsePtrOutput) LearningRateMultiplier() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRateMultiplier
	}).(pulumi.Float64PtrOutput)
}

// The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
func (o AzureOpenAiHyperParametersResponsePtrOutput) NEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureOpenAiHyperParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.NEpochs
	}).(pulumi.IntPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicy
func (val *BanditPolicy) Defaults() *BanditPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// BanditPolicyInput is an input type that accepts BanditPolicyArgs and BanditPolicyOutput values.
// You can construct a concrete instance of `BanditPolicyInput` via:
//
//	BanditPolicyArgs{...}
type BanditPolicyInput interface {
	pulumi.Input

	ToBanditPolicyOutput() BanditPolicyOutput
	ToBanditPolicyOutputWithContext(context.Context) BanditPolicyOutput
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount pulumi.Float64PtrInput `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor pulumi.Float64PtrInput `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyArgs
func (val *BanditPolicyArgs) Defaults() *BanditPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	if tmp.SlackAmount == nil {
		tmp.SlackAmount = pulumi.Float64Ptr(0.0)
	}
	if tmp.SlackFactor == nil {
		tmp.SlackFactor = pulumi.Float64Ptr(0.0)
	}
	return &tmp
}
func (BanditPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (i BanditPolicyArgs) ToBanditPolicyOutput() BanditPolicyOutput {
	return i.ToBanditPolicyOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput)
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput).ToBanditPolicyPtrOutputWithContext(ctx)
}

// BanditPolicyPtrInput is an input type that accepts BanditPolicyArgs, BanditPolicyPtr and BanditPolicyPtrOutput values.
// You can construct a concrete instance of `BanditPolicyPtrInput` via:
//
//	        BanditPolicyArgs{...}
//
//	or:
//
//	        nil
type BanditPolicyPtrInput interface {
	pulumi.Input

	ToBanditPolicyPtrOutput() BanditPolicyPtrOutput
	ToBanditPolicyPtrOutputWithContext(context.Context) BanditPolicyPtrOutput
}

type banditPolicyPtrType BanditPolicyArgs

func BanditPolicyPtr(v *BanditPolicyArgs) BanditPolicyPtrInput {
	return (*banditPolicyPtrType)(v)
}

func (*banditPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyOutput struct{ *pulumi.OutputState }

func (BanditPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyOutput) ToBanditPolicyOutput() BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BanditPolicy) *BanditPolicy {
		return &v
	}).(BanditPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyPtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) Elem() BanditPolicyOutput {
	return o.ApplyT(func(v *BanditPolicy) BanditPolicy {
		if v != nil {
			return *v
		}
		var ret BanditPolicy
		return ret
	}).(BanditPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyPtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyPtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyResponse
func (val *BanditPolicyResponse) Defaults() *BanditPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponseOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutput() BanditPolicyResponseOutput {
	return o
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutputWithContext(ctx context.Context) BanditPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponseOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponseOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutput() BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutputWithContext(ctx context.Context) BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) Elem() BanditPolicyResponseOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) BanditPolicyResponse {
		if v != nil {
			return *v
		}
		var ret BanditPolicyResponse
		return ret
	}).(BanditPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentType struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Properties relevant to different deployment types.
	DeploymentConfiguration *BatchPipelineComponentDeploymentConfiguration `pulumi:"deploymentConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfiguration `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettings `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentType
func (val *BatchDeploymentType) Defaults() *BatchDeploymentType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// BatchDeploymentTypeInput is an input type that accepts BatchDeploymentTypeArgs and BatchDeploymentTypeOutput values.
// You can construct a concrete instance of `BatchDeploymentTypeInput` via:
//
//	BatchDeploymentTypeArgs{...}
type BatchDeploymentTypeInput interface {
	pulumi.Input

	ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput
	ToBatchDeploymentTypeOutputWithContext(context.Context) BatchDeploymentTypeOutput
}

// Batch inference settings per deployment.
type BatchDeploymentTypeArgs struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Properties relevant to different deployment types.
	DeploymentConfiguration BatchPipelineComponentDeploymentConfigurationPtrInput `pulumi:"deploymentConfiguration"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel pulumi.StringPtrInput `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize pulumi.Float64PtrInput `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model pulumi.Input `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction pulumi.StringPtrInput `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName pulumi.StringPtrInput `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources DeploymentResourceConfigurationPtrInput `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings BatchRetrySettingsPtrInput `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentTypeArgs
func (val *BatchDeploymentTypeArgs) Defaults() *BatchDeploymentTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		tmp.ErrorThreshold = pulumi.IntPtr(-1)
	}
	if tmp.LoggingLevel == nil {
		tmp.LoggingLevel = pulumi.StringPtr("Info")
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		tmp.MaxConcurrencyPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MiniBatchSize == nil {
		tmp.MiniBatchSize = pulumi.Float64Ptr(10.0)
	}
	if tmp.OutputAction == nil {
		tmp.OutputAction = pulumi.StringPtr("AppendRow")
	}
	if tmp.OutputFileName == nil {
		tmp.OutputFileName = pulumi.StringPtr("predictions.csv")
	}

	return &tmp
}
func (BatchDeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return i.ToBatchDeploymentTypeOutputWithContext(context.Background())
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchDeploymentTypeOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentTypeOutput struct{ *pulumi.OutputState }

func (BatchDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return o
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Properties relevant to different deployment types.
func (o BatchDeploymentTypeOutput) DeploymentConfiguration() BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *BatchPipelineComponentDeploymentConfiguration {
		return v.DeploymentConfiguration
	}).(BatchPipelineComponentDeploymentConfigurationPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o BatchDeploymentTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentTypeOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentTypeOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentTypeOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentTypeOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentTypeOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentTypeOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentType) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentTypeOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentTypeOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentTypeOutput) Resources() DeploymentResourceConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *DeploymentResourceConfiguration { return v.Resources }).(DeploymentResourceConfigurationPtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentTypeOutput) RetrySettings() BatchRetrySettingsPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *BatchRetrySettings { return v.RetrySettings }).(BatchRetrySettingsPtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentResponse struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Properties relevant to different deployment types.
	DeploymentConfiguration *BatchPipelineComponentDeploymentConfigurationResponse `pulumi:"deploymentConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfigurationResponse `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettingsResponse `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentResponse
func (val *BatchDeploymentResponse) Defaults() *BatchDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// Batch inference settings per deployment.
type BatchDeploymentResponseOutput struct{ *pulumi.OutputState }

func (BatchDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentResponse)(nil)).Elem()
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutput() BatchDeploymentResponseOutput {
	return o
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutputWithContext(ctx context.Context) BatchDeploymentResponseOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Properties relevant to different deployment types.
func (o BatchDeploymentResponseOutput) DeploymentConfiguration() BatchPipelineComponentDeploymentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *BatchPipelineComponentDeploymentConfigurationResponse {
		return v.DeploymentConfiguration
	}).(BatchPipelineComponentDeploymentConfigurationResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o BatchDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentResponseOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentResponseOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentResponseOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentResponseOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentResponseOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentResponseOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentResponseOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o BatchDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentResponseOutput) Resources() DeploymentResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *DeploymentResourceConfigurationResponse { return v.Resources }).(DeploymentResourceConfigurationResponsePtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentResponseOutput) RetrySettings() BatchRetrySettingsResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *BatchRetrySettingsResponse { return v.RetrySettings }).(BatchRetrySettingsResponsePtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint.
	Defaults *BatchEndpointDefaults `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// BatchEndpointTypeInput is an input type that accepts BatchEndpointTypeArgs and BatchEndpointTypeOutput values.
// You can construct a concrete instance of `BatchEndpointTypeInput` via:
//
//	BatchEndpointTypeArgs{...}
type BatchEndpointTypeInput interface {
	pulumi.Input

	ToBatchEndpointTypeOutput() BatchEndpointTypeOutput
	ToBatchEndpointTypeOutputWithContext(context.Context) BatchEndpointTypeOutput
}

// Batch endpoint configuration.
type BatchEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Default values for Batch Endpoint.
	Defaults BatchEndpointDefaultsPtrInput `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (BatchEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return i.ToBatchEndpointTypeOutputWithContext(context.Background())
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointTypeOutput)
}

// Batch endpoint configuration.
type BatchEndpointTypeOutput struct{ *pulumi.OutputState }

func (BatchEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return o
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint.
func (o BatchEndpointTypeOutput) Defaults() BatchEndpointDefaultsPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *BatchEndpointDefaults { return v.Defaults }).(BatchEndpointDefaultsPtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o BatchEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Batch endpoint default values
type BatchEndpointDefaults struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// BatchEndpointDefaultsInput is an input type that accepts BatchEndpointDefaultsArgs and BatchEndpointDefaultsOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsInput` via:
//
//	BatchEndpointDefaultsArgs{...}
type BatchEndpointDefaultsInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput
	ToBatchEndpointDefaultsOutputWithContext(context.Context) BatchEndpointDefaultsOutput
}

// Batch endpoint default values
type BatchEndpointDefaultsArgs struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName pulumi.StringPtrInput `pulumi:"deploymentName"`
}

func (BatchEndpointDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return i.ToBatchEndpointDefaultsOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput)
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput).ToBatchEndpointDefaultsPtrOutputWithContext(ctx)
}

// BatchEndpointDefaultsPtrInput is an input type that accepts BatchEndpointDefaultsArgs, BatchEndpointDefaultsPtr and BatchEndpointDefaultsPtrOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsPtrInput` via:
//
//	        BatchEndpointDefaultsArgs{...}
//
//	or:
//
//	        nil
type BatchEndpointDefaultsPtrInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput
	ToBatchEndpointDefaultsPtrOutputWithContext(context.Context) BatchEndpointDefaultsPtrOutput
}

type batchEndpointDefaultsPtrType BatchEndpointDefaultsArgs

func BatchEndpointDefaultsPtr(v *BatchEndpointDefaultsArgs) BatchEndpointDefaultsPtrInput {
	return (*batchEndpointDefaultsPtrType)(v)
}

func (*batchEndpointDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchEndpointDefaults) *BatchEndpointDefaults {
		return &v
	}).(BatchEndpointDefaultsPtrOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaults) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsPtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) Elem() BatchEndpointDefaultsOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) BatchEndpointDefaults {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaults
		return ret
	}).(BatchEndpointDefaultsOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsResponse struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// Batch endpoint default values
type BatchEndpointDefaultsResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutput() BatchEndpointDefaultsResponseOutput {
	return o
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponseOutput {
	return o
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponseOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaultsResponse) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutput() BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) Elem() BatchEndpointDefaultsResponseOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) BatchEndpointDefaultsResponse {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaultsResponse
		return ret
	}).(BatchEndpointDefaultsResponseOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponsePtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint.
	Defaults *BatchEndpointDefaultsResponse `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
}

// Batch endpoint configuration.
type BatchEndpointResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointResponse)(nil)).Elem()
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutput() BatchEndpointResponseOutput {
	return o
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutputWithContext(ctx context.Context) BatchEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint.
func (o BatchEndpointResponseOutput) Defaults() BatchEndpointDefaultsResponsePtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *BatchEndpointDefaultsResponse { return v.Defaults }).(BatchEndpointDefaultsResponsePtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o BatchEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint URI.
func (o BatchEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o BatchEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Properties for a Batch Pipeline Component Deployment.
type BatchPipelineComponentDeploymentConfiguration struct {
	// The ARM id of the component to be run.
	ComponentId *IdAssetReference `pulumi:"componentId"`
	// The enumerated property types for batch deployments.
	// Expected value is 'PipelineComponent'.
	DeploymentConfigurationType string `pulumi:"deploymentConfigurationType"`
	// The description which will be applied to the job.
	Description *string `pulumi:"description"`
	// Run-time settings for the pipeline job.
	Settings map[string]string `pulumi:"settings"`
	// The tags which will be applied to the job.
	Tags map[string]string `pulumi:"tags"`
}

// BatchPipelineComponentDeploymentConfigurationInput is an input type that accepts BatchPipelineComponentDeploymentConfigurationArgs and BatchPipelineComponentDeploymentConfigurationOutput values.
// You can construct a concrete instance of `BatchPipelineComponentDeploymentConfigurationInput` via:
//
//	BatchPipelineComponentDeploymentConfigurationArgs{...}
type BatchPipelineComponentDeploymentConfigurationInput interface {
	pulumi.Input

	ToBatchPipelineComponentDeploymentConfigurationOutput() BatchPipelineComponentDeploymentConfigurationOutput
	ToBatchPipelineComponentDeploymentConfigurationOutputWithContext(context.Context) BatchPipelineComponentDeploymentConfigurationOutput
}

// Properties for a Batch Pipeline Component Deployment.
type BatchPipelineComponentDeploymentConfigurationArgs struct {
	// The ARM id of the component to be run.
	ComponentId IdAssetReferencePtrInput `pulumi:"componentId"`
	// The enumerated property types for batch deployments.
	// Expected value is 'PipelineComponent'.
	DeploymentConfigurationType pulumi.StringInput `pulumi:"deploymentConfigurationType"`
	// The description which will be applied to the job.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Run-time settings for the pipeline job.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The tags which will be applied to the job.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (BatchPipelineComponentDeploymentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchPipelineComponentDeploymentConfiguration)(nil)).Elem()
}

func (i BatchPipelineComponentDeploymentConfigurationArgs) ToBatchPipelineComponentDeploymentConfigurationOutput() BatchPipelineComponentDeploymentConfigurationOutput {
	return i.ToBatchPipelineComponentDeploymentConfigurationOutputWithContext(context.Background())
}

func (i BatchPipelineComponentDeploymentConfigurationArgs) ToBatchPipelineComponentDeploymentConfigurationOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchPipelineComponentDeploymentConfigurationOutput)
}

func (i BatchPipelineComponentDeploymentConfigurationArgs) ToBatchPipelineComponentDeploymentConfigurationPtrOutput() BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return i.ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i BatchPipelineComponentDeploymentConfigurationArgs) ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchPipelineComponentDeploymentConfigurationOutput).ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(ctx)
}

// BatchPipelineComponentDeploymentConfigurationPtrInput is an input type that accepts BatchPipelineComponentDeploymentConfigurationArgs, BatchPipelineComponentDeploymentConfigurationPtr and BatchPipelineComponentDeploymentConfigurationPtrOutput values.
// You can construct a concrete instance of `BatchPipelineComponentDeploymentConfigurationPtrInput` via:
//
//	        BatchPipelineComponentDeploymentConfigurationArgs{...}
//
//	or:
//
//	        nil
type BatchPipelineComponentDeploymentConfigurationPtrInput interface {
	pulumi.Input

	ToBatchPipelineComponentDeploymentConfigurationPtrOutput() BatchPipelineComponentDeploymentConfigurationPtrOutput
	ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(context.Context) BatchPipelineComponentDeploymentConfigurationPtrOutput
}

type batchPipelineComponentDeploymentConfigurationPtrType BatchPipelineComponentDeploymentConfigurationArgs

func BatchPipelineComponentDeploymentConfigurationPtr(v *BatchPipelineComponentDeploymentConfigurationArgs) BatchPipelineComponentDeploymentConfigurationPtrInput {
	return (*batchPipelineComponentDeploymentConfigurationPtrType)(v)
}

func (*batchPipelineComponentDeploymentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchPipelineComponentDeploymentConfiguration)(nil)).Elem()
}

func (i *batchPipelineComponentDeploymentConfigurationPtrType) ToBatchPipelineComponentDeploymentConfigurationPtrOutput() BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return i.ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (i *batchPipelineComponentDeploymentConfigurationPtrType) ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchPipelineComponentDeploymentConfigurationPtrOutput)
}

// Properties for a Batch Pipeline Component Deployment.
type BatchPipelineComponentDeploymentConfigurationOutput struct{ *pulumi.OutputState }

func (BatchPipelineComponentDeploymentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchPipelineComponentDeploymentConfiguration)(nil)).Elem()
}

func (o BatchPipelineComponentDeploymentConfigurationOutput) ToBatchPipelineComponentDeploymentConfigurationOutput() BatchPipelineComponentDeploymentConfigurationOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationOutput) ToBatchPipelineComponentDeploymentConfigurationOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationOutput) ToBatchPipelineComponentDeploymentConfigurationPtrOutput() BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return o.ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(context.Background())
}

func (o BatchPipelineComponentDeploymentConfigurationOutput) ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchPipelineComponentDeploymentConfiguration) *BatchPipelineComponentDeploymentConfiguration {
		return &v
	}).(BatchPipelineComponentDeploymentConfigurationPtrOutput)
}

// The ARM id of the component to be run.
func (o BatchPipelineComponentDeploymentConfigurationOutput) ComponentId() IdAssetReferencePtrOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfiguration) *IdAssetReference { return v.ComponentId }).(IdAssetReferencePtrOutput)
}

// The enumerated property types for batch deployments.
// Expected value is 'PipelineComponent'.
func (o BatchPipelineComponentDeploymentConfigurationOutput) DeploymentConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfiguration) string { return v.DeploymentConfigurationType }).(pulumi.StringOutput)
}

// The description which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfiguration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Run-time settings for the pipeline job.
func (o BatchPipelineComponentDeploymentConfigurationOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfiguration) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The tags which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfiguration) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type BatchPipelineComponentDeploymentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BatchPipelineComponentDeploymentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchPipelineComponentDeploymentConfiguration)(nil)).Elem()
}

func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) ToBatchPipelineComponentDeploymentConfigurationPtrOutput() BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) ToBatchPipelineComponentDeploymentConfigurationPtrOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationPtrOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) Elem() BatchPipelineComponentDeploymentConfigurationOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) BatchPipelineComponentDeploymentConfiguration {
		if v != nil {
			return *v
		}
		var ret BatchPipelineComponentDeploymentConfiguration
		return ret
	}).(BatchPipelineComponentDeploymentConfigurationOutput)
}

// The ARM id of the component to be run.
func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) ComponentId() IdAssetReferencePtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) *IdAssetReference {
		if v == nil {
			return nil
		}
		return v.ComponentId
	}).(IdAssetReferencePtrOutput)
}

// The enumerated property types for batch deployments.
// Expected value is 'PipelineComponent'.
func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) DeploymentConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The description which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Run-time settings for the pipeline job.
func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.StringMapOutput)
}

// The tags which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Properties for a Batch Pipeline Component Deployment.
type BatchPipelineComponentDeploymentConfigurationResponse struct {
	// The ARM id of the component to be run.
	ComponentId *IdAssetReferenceResponse `pulumi:"componentId"`
	// The enumerated property types for batch deployments.
	// Expected value is 'PipelineComponent'.
	DeploymentConfigurationType string `pulumi:"deploymentConfigurationType"`
	// The description which will be applied to the job.
	Description *string `pulumi:"description"`
	// Run-time settings for the pipeline job.
	Settings map[string]string `pulumi:"settings"`
	// The tags which will be applied to the job.
	Tags map[string]string `pulumi:"tags"`
}

// Properties for a Batch Pipeline Component Deployment.
type BatchPipelineComponentDeploymentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BatchPipelineComponentDeploymentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchPipelineComponentDeploymentConfigurationResponse)(nil)).Elem()
}

func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) ToBatchPipelineComponentDeploymentConfigurationResponseOutput() BatchPipelineComponentDeploymentConfigurationResponseOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) ToBatchPipelineComponentDeploymentConfigurationResponseOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationResponseOutput {
	return o
}

// The ARM id of the component to be run.
func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) ComponentId() IdAssetReferenceResponsePtrOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfigurationResponse) *IdAssetReferenceResponse {
		return v.ComponentId
	}).(IdAssetReferenceResponsePtrOutput)
}

// The enumerated property types for batch deployments.
// Expected value is 'PipelineComponent'.
func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) DeploymentConfigurationType() pulumi.StringOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfigurationResponse) string {
		return v.DeploymentConfigurationType
	}).(pulumi.StringOutput)
}

// The description which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfigurationResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Run-time settings for the pipeline job.
func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfigurationResponse) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The tags which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchPipelineComponentDeploymentConfigurationResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type BatchPipelineComponentDeploymentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchPipelineComponentDeploymentConfigurationResponse)(nil)).Elem()
}

func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) ToBatchPipelineComponentDeploymentConfigurationResponsePtrOutput() BatchPipelineComponentDeploymentConfigurationResponsePtrOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) ToBatchPipelineComponentDeploymentConfigurationResponsePtrOutputWithContext(ctx context.Context) BatchPipelineComponentDeploymentConfigurationResponsePtrOutput {
	return o
}

func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) Elem() BatchPipelineComponentDeploymentConfigurationResponseOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) BatchPipelineComponentDeploymentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret BatchPipelineComponentDeploymentConfigurationResponse
		return ret
	}).(BatchPipelineComponentDeploymentConfigurationResponseOutput)
}

// The ARM id of the component to be run.
func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) ComponentId() IdAssetReferenceResponsePtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) *IdAssetReferenceResponse {
		if v == nil {
			return nil
		}
		return v.ComponentId
	}).(IdAssetReferenceResponsePtrOutput)
}

// The enumerated property types for batch deployments.
// Expected value is 'PipelineComponent'.
func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) DeploymentConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DeploymentConfigurationType
	}).(pulumi.StringPtrOutput)
}

// The description which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Run-time settings for the pipeline job.
func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Settings
	}).(pulumi.StringMapOutput)
}

// The tags which will be applied to the job.
func (o BatchPipelineComponentDeploymentConfigurationResponsePtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BatchPipelineComponentDeploymentConfigurationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettings struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettings
func (val *BatchRetrySettings) Defaults() *BatchRetrySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchRetrySettingsInput is an input type that accepts BatchRetrySettingsArgs and BatchRetrySettingsOutput values.
// You can construct a concrete instance of `BatchRetrySettingsInput` via:
//
//	BatchRetrySettingsArgs{...}
type BatchRetrySettingsInput interface {
	pulumi.Input

	ToBatchRetrySettingsOutput() BatchRetrySettingsOutput
	ToBatchRetrySettingsOutputWithContext(context.Context) BatchRetrySettingsOutput
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsArgs struct {
	// Maximum retry count for a mini-batch
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsArgs
func (val *BatchRetrySettingsArgs) Defaults() *BatchRetrySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		tmp.MaxRetries = pulumi.IntPtr(3)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT30S")
	}
	return &tmp
}
func (BatchRetrySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return i.ToBatchRetrySettingsOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput)
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput).ToBatchRetrySettingsPtrOutputWithContext(ctx)
}

// BatchRetrySettingsPtrInput is an input type that accepts BatchRetrySettingsArgs, BatchRetrySettingsPtr and BatchRetrySettingsPtrOutput values.
// You can construct a concrete instance of `BatchRetrySettingsPtrInput` via:
//
//	        BatchRetrySettingsArgs{...}
//
//	or:
//
//	        nil
type BatchRetrySettingsPtrInput interface {
	pulumi.Input

	ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput
	ToBatchRetrySettingsPtrOutputWithContext(context.Context) BatchRetrySettingsPtrOutput
}

type batchRetrySettingsPtrType BatchRetrySettingsArgs

func BatchRetrySettingsPtr(v *BatchRetrySettingsArgs) BatchRetrySettingsPtrInput {
	return (*batchRetrySettingsPtrType)(v)
}

func (*batchRetrySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchRetrySettings) *BatchRetrySettings {
		return &v
	}).(BatchRetrySettingsPtrOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsPtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) Elem() BatchRetrySettingsOutput {
	return o.ApplyT(func(v *BatchRetrySettings) BatchRetrySettings {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettings
		return ret
	}).(BatchRetrySettingsOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponse struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsResponse
func (val *BatchRetrySettingsResponse) Defaults() *BatchRetrySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponseOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutput() BatchRetrySettingsResponseOutput {
	return o
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutputWithContext(ctx context.Context) BatchRetrySettingsResponseOutput {
	return o
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponseOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutput() BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutputWithContext(ctx context.Context) BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) Elem() BatchRetrySettingsResponseOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) BatchRetrySettingsResponse {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettingsResponse
		return ret
	}).(BatchRetrySettingsResponseOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponsePtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithm struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// BayesianSamplingAlgorithmInput is an input type that accepts BayesianSamplingAlgorithmArgs and BayesianSamplingAlgorithmOutput values.
// You can construct a concrete instance of `BayesianSamplingAlgorithmInput` via:
//
//	BayesianSamplingAlgorithmArgs{...}
type BayesianSamplingAlgorithmInput interface {
	pulumi.Input

	ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput
	ToBayesianSamplingAlgorithmOutputWithContext(context.Context) BayesianSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmArgs struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (BayesianSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return i.ToBayesianSamplingAlgorithmOutputWithContext(context.Background())
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BayesianSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return o
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponse struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithmResponse)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutput() BayesianSamplingAlgorithmResponseOutput {
	return o
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

type BindOptions struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

// BindOptionsInput is an input type that accepts BindOptionsArgs and BindOptionsOutput values.
// You can construct a concrete instance of `BindOptionsInput` via:
//
//	BindOptionsArgs{...}
type BindOptionsInput interface {
	pulumi.Input

	ToBindOptionsOutput() BindOptionsOutput
	ToBindOptionsOutputWithContext(context.Context) BindOptionsOutput
}

type BindOptionsArgs struct {
	// Indicate whether to create host path.
	CreateHostPath pulumi.BoolPtrInput `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation pulumi.StringPtrInput `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux pulumi.StringPtrInput `pulumi:"selinux"`
}

func (BindOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptions)(nil)).Elem()
}

func (i BindOptionsArgs) ToBindOptionsOutput() BindOptionsOutput {
	return i.ToBindOptionsOutputWithContext(context.Background())
}

func (i BindOptionsArgs) ToBindOptionsOutputWithContext(ctx context.Context) BindOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsOutput)
}

func (i BindOptionsArgs) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return i.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (i BindOptionsArgs) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsOutput).ToBindOptionsPtrOutputWithContext(ctx)
}

// BindOptionsPtrInput is an input type that accepts BindOptionsArgs, BindOptionsPtr and BindOptionsPtrOutput values.
// You can construct a concrete instance of `BindOptionsPtrInput` via:
//
//	        BindOptionsArgs{...}
//
//	or:
//
//	        nil
type BindOptionsPtrInput interface {
	pulumi.Input

	ToBindOptionsPtrOutput() BindOptionsPtrOutput
	ToBindOptionsPtrOutputWithContext(context.Context) BindOptionsPtrOutput
}

type bindOptionsPtrType BindOptionsArgs

func BindOptionsPtr(v *BindOptionsArgs) BindOptionsPtrInput {
	return (*bindOptionsPtrType)(v)
}

func (*bindOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptions)(nil)).Elem()
}

func (i *bindOptionsPtrType) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return i.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (i *bindOptionsPtrType) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsPtrOutput)
}

type BindOptionsOutput struct{ *pulumi.OutputState }

func (BindOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptions)(nil)).Elem()
}

func (o BindOptionsOutput) ToBindOptionsOutput() BindOptionsOutput {
	return o
}

func (o BindOptionsOutput) ToBindOptionsOutputWithContext(ctx context.Context) BindOptionsOutput {
	return o
}

func (o BindOptionsOutput) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return o.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (o BindOptionsOutput) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BindOptions) *BindOptions {
		return &v
	}).(BindOptionsPtrOutput)
}

// Indicate whether to create host path.
func (o BindOptionsOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BindOptions) *bool { return v.CreateHostPath }).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptions) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptions) *string { return v.Selinux }).(pulumi.StringPtrOutput)
}

type BindOptionsPtrOutput struct{ *pulumi.OutputState }

func (BindOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptions)(nil)).Elem()
}

func (o BindOptionsPtrOutput) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return o
}

func (o BindOptionsPtrOutput) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return o
}

func (o BindOptionsPtrOutput) Elem() BindOptionsOutput {
	return o.ApplyT(func(v *BindOptions) BindOptions {
		if v != nil {
			return *v
		}
		var ret BindOptions
		return ret
	}).(BindOptionsOutput)
}

// Indicate whether to create host path.
func (o BindOptionsPtrOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BindOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CreateHostPath
	}).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsPtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsPtrOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Selinux
	}).(pulumi.StringPtrOutput)
}

type BindOptionsResponse struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

type BindOptionsResponseOutput struct{ *pulumi.OutputState }

func (BindOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptionsResponse)(nil)).Elem()
}

func (o BindOptionsResponseOutput) ToBindOptionsResponseOutput() BindOptionsResponseOutput {
	return o
}

func (o BindOptionsResponseOutput) ToBindOptionsResponseOutputWithContext(ctx context.Context) BindOptionsResponseOutput {
	return o
}

// Indicate whether to create host path.
func (o BindOptionsResponseOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *bool { return v.CreateHostPath }).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsResponseOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsResponseOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *string { return v.Selinux }).(pulumi.StringPtrOutput)
}

type BindOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (BindOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptionsResponse)(nil)).Elem()
}

func (o BindOptionsResponsePtrOutput) ToBindOptionsResponsePtrOutput() BindOptionsResponsePtrOutput {
	return o
}

func (o BindOptionsResponsePtrOutput) ToBindOptionsResponsePtrOutputWithContext(ctx context.Context) BindOptionsResponsePtrOutput {
	return o
}

func (o BindOptionsResponsePtrOutput) Elem() BindOptionsResponseOutput {
	return o.ApplyT(func(v *BindOptionsResponse) BindOptionsResponse {
		if v != nil {
			return *v
		}
		var ret BindOptionsResponse
		return ret
	}).(BindOptionsResponseOutput)
}

// Indicate whether to create host path.
func (o BindOptionsResponsePtrOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateHostPath
	}).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsResponsePtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsResponsePtrOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Selinux
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContext struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContext
func (val *BuildContext) Defaults() *BuildContext {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// BuildContextInput is an input type that accepts BuildContextArgs and BuildContextOutput values.
// You can construct a concrete instance of `BuildContextInput` via:
//
//	BuildContextArgs{...}
type BuildContextInput interface {
	pulumi.Input

	ToBuildContextOutput() BuildContextOutput
	ToBuildContextOutputWithContext(context.Context) BuildContextOutput
}

// Configuration settings for Docker build context
type BuildContextArgs struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri pulumi.StringInput `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextArgs
func (val *BuildContextArgs) Defaults() *BuildContextArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		tmp.DockerfilePath = pulumi.StringPtr("Dockerfile")
	}
	return &tmp
}
func (BuildContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (i BuildContextArgs) ToBuildContextOutput() BuildContextOutput {
	return i.ToBuildContextOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput)
}

func (i BuildContextArgs) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput).ToBuildContextPtrOutputWithContext(ctx)
}

// BuildContextPtrInput is an input type that accepts BuildContextArgs, BuildContextPtr and BuildContextPtrOutput values.
// You can construct a concrete instance of `BuildContextPtrInput` via:
//
//	        BuildContextArgs{...}
//
//	or:
//
//	        nil
type BuildContextPtrInput interface {
	pulumi.Input

	ToBuildContextPtrOutput() BuildContextPtrOutput
	ToBuildContextPtrOutputWithContext(context.Context) BuildContextPtrOutput
}

type buildContextPtrType BuildContextArgs

func BuildContextPtr(v *BuildContextArgs) BuildContextPtrInput {
	return (*buildContextPtrType)(v)
}

func (*buildContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (i *buildContextPtrType) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i *buildContextPtrType) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextOutput struct{ *pulumi.OutputState }

func (BuildContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (o BuildContextOutput) ToBuildContextOutput() BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o.ToBuildContextPtrOutputWithContext(context.Background())
}

func (o BuildContextOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildContext) *BuildContext {
		return &v
	}).(BuildContextPtrOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContext) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContext) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextPtrOutput struct{ *pulumi.OutputState }

func (BuildContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) Elem() BuildContextOutput {
	return o.ApplyT(func(v *BuildContext) BuildContext {
		if v != nil {
			return *v
		}
		var ret BuildContext
		return ret
	}).(BuildContextOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextPtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextPtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextResponse struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextResponse
func (val *BuildContextResponse) Defaults() *BuildContextResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// Configuration settings for Docker build context
type BuildContextResponseOutput struct{ *pulumi.OutputState }

func (BuildContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutput() BuildContextResponseOutput {
	return o
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutputWithContext(ctx context.Context) BuildContextResponseOutput {
	return o
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponseOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContextResponse) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponseOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContextResponse) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildContextResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutput() BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutputWithContext(ctx context.Context) BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) Elem() BuildContextResponseOutput {
	return o.ApplyT(func(v *BuildContextResponse) BuildContextResponse {
		if v != nil {
			return *v
		}
		var ret BuildContextResponse
		return ret
	}).(BuildContextResponseOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponsePtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponsePtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

type CapacityReservationGroupType struct {
	// Offer used by this capacity reservation group.
	Offer *ServerlessOffer `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity int `pulumi:"reservedCapacity"`
}

// CapacityReservationGroupTypeInput is an input type that accepts CapacityReservationGroupTypeArgs and CapacityReservationGroupTypeOutput values.
// You can construct a concrete instance of `CapacityReservationGroupTypeInput` via:
//
//	CapacityReservationGroupTypeArgs{...}
type CapacityReservationGroupTypeInput interface {
	pulumi.Input

	ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput
	ToCapacityReservationGroupTypeOutputWithContext(context.Context) CapacityReservationGroupTypeOutput
}

type CapacityReservationGroupTypeArgs struct {
	// Offer used by this capacity reservation group.
	Offer ServerlessOfferPtrInput `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity pulumi.IntInput `pulumi:"reservedCapacity"`
}

func (CapacityReservationGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupType)(nil)).Elem()
}

func (i CapacityReservationGroupTypeArgs) ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput {
	return i.ToCapacityReservationGroupTypeOutputWithContext(context.Background())
}

func (i CapacityReservationGroupTypeArgs) ToCapacityReservationGroupTypeOutputWithContext(ctx context.Context) CapacityReservationGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationGroupTypeOutput)
}

type CapacityReservationGroupTypeOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupType)(nil)).Elem()
}

func (o CapacityReservationGroupTypeOutput) ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput {
	return o
}

func (o CapacityReservationGroupTypeOutput) ToCapacityReservationGroupTypeOutputWithContext(ctx context.Context) CapacityReservationGroupTypeOutput {
	return o
}

// Offer used by this capacity reservation group.
func (o CapacityReservationGroupTypeOutput) Offer() ServerlessOfferPtrOutput {
	return o.ApplyT(func(v CapacityReservationGroupType) *ServerlessOffer { return v.Offer }).(ServerlessOfferPtrOutput)
}

// [Required] Specifies the amount of capacity to reserve.
func (o CapacityReservationGroupTypeOutput) ReservedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityReservationGroupType) int { return v.ReservedCapacity }).(pulumi.IntOutput)
}

type CapacityReservationGroupResponse struct {
	// Offer used by this capacity reservation group.
	Offer *ServerlessOfferResponse `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity int `pulumi:"reservedCapacity"`
}

type CapacityReservationGroupResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupResponse)(nil)).Elem()
}

func (o CapacityReservationGroupResponseOutput) ToCapacityReservationGroupResponseOutput() CapacityReservationGroupResponseOutput {
	return o
}

func (o CapacityReservationGroupResponseOutput) ToCapacityReservationGroupResponseOutputWithContext(ctx context.Context) CapacityReservationGroupResponseOutput {
	return o
}

// Offer used by this capacity reservation group.
func (o CapacityReservationGroupResponseOutput) Offer() ServerlessOfferResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationGroupResponse) *ServerlessOfferResponse { return v.Offer }).(ServerlessOfferResponsePtrOutput)
}

// [Required] Specifies the amount of capacity to reserve.
func (o CapacityReservationGroupResponseOutput) ReservedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityReservationGroupResponse) int { return v.ReservedCapacity }).(pulumi.IntOutput)
}

type CategoricalDataDriftMetricThreshold struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical data drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// CategoricalDataDriftMetricThresholdInput is an input type that accepts CategoricalDataDriftMetricThresholdArgs and CategoricalDataDriftMetricThresholdOutput values.
// You can construct a concrete instance of `CategoricalDataDriftMetricThresholdInput` via:
//
//	CategoricalDataDriftMetricThresholdArgs{...}
type CategoricalDataDriftMetricThresholdInput interface {
	pulumi.Input

	ToCategoricalDataDriftMetricThresholdOutput() CategoricalDataDriftMetricThresholdOutput
	ToCategoricalDataDriftMetricThresholdOutputWithContext(context.Context) CategoricalDataDriftMetricThresholdOutput
}

type CategoricalDataDriftMetricThresholdArgs struct {
	// Expected value is 'Categorical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The categorical data drift metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (CategoricalDataDriftMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataDriftMetricThreshold)(nil)).Elem()
}

func (i CategoricalDataDriftMetricThresholdArgs) ToCategoricalDataDriftMetricThresholdOutput() CategoricalDataDriftMetricThresholdOutput {
	return i.ToCategoricalDataDriftMetricThresholdOutputWithContext(context.Background())
}

func (i CategoricalDataDriftMetricThresholdArgs) ToCategoricalDataDriftMetricThresholdOutputWithContext(ctx context.Context) CategoricalDataDriftMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoricalDataDriftMetricThresholdOutput)
}

type CategoricalDataDriftMetricThresholdOutput struct{ *pulumi.OutputState }

func (CategoricalDataDriftMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataDriftMetricThreshold)(nil)).Elem()
}

func (o CategoricalDataDriftMetricThresholdOutput) ToCategoricalDataDriftMetricThresholdOutput() CategoricalDataDriftMetricThresholdOutput {
	return o
}

func (o CategoricalDataDriftMetricThresholdOutput) ToCategoricalDataDriftMetricThresholdOutputWithContext(ctx context.Context) CategoricalDataDriftMetricThresholdOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalDataDriftMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical data drift metric to calculate.
func (o CategoricalDataDriftMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalDataDriftMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type CategoricalDataDriftMetricThresholdResponse struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical data drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type CategoricalDataDriftMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (CategoricalDataDriftMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataDriftMetricThresholdResponse)(nil)).Elem()
}

func (o CategoricalDataDriftMetricThresholdResponseOutput) ToCategoricalDataDriftMetricThresholdResponseOutput() CategoricalDataDriftMetricThresholdResponseOutput {
	return o
}

func (o CategoricalDataDriftMetricThresholdResponseOutput) ToCategoricalDataDriftMetricThresholdResponseOutputWithContext(ctx context.Context) CategoricalDataDriftMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalDataDriftMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical data drift metric to calculate.
func (o CategoricalDataDriftMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalDataDriftMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v CategoricalDataDriftMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type CategoricalDataQualityMetricThreshold struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical data quality metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// CategoricalDataQualityMetricThresholdInput is an input type that accepts CategoricalDataQualityMetricThresholdArgs and CategoricalDataQualityMetricThresholdOutput values.
// You can construct a concrete instance of `CategoricalDataQualityMetricThresholdInput` via:
//
//	CategoricalDataQualityMetricThresholdArgs{...}
type CategoricalDataQualityMetricThresholdInput interface {
	pulumi.Input

	ToCategoricalDataQualityMetricThresholdOutput() CategoricalDataQualityMetricThresholdOutput
	ToCategoricalDataQualityMetricThresholdOutputWithContext(context.Context) CategoricalDataQualityMetricThresholdOutput
}

type CategoricalDataQualityMetricThresholdArgs struct {
	// Expected value is 'Categorical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The categorical data quality metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (CategoricalDataQualityMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataQualityMetricThreshold)(nil)).Elem()
}

func (i CategoricalDataQualityMetricThresholdArgs) ToCategoricalDataQualityMetricThresholdOutput() CategoricalDataQualityMetricThresholdOutput {
	return i.ToCategoricalDataQualityMetricThresholdOutputWithContext(context.Background())
}

func (i CategoricalDataQualityMetricThresholdArgs) ToCategoricalDataQualityMetricThresholdOutputWithContext(ctx context.Context) CategoricalDataQualityMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoricalDataQualityMetricThresholdOutput)
}

type CategoricalDataQualityMetricThresholdOutput struct{ *pulumi.OutputState }

func (CategoricalDataQualityMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataQualityMetricThreshold)(nil)).Elem()
}

func (o CategoricalDataQualityMetricThresholdOutput) ToCategoricalDataQualityMetricThresholdOutput() CategoricalDataQualityMetricThresholdOutput {
	return o
}

func (o CategoricalDataQualityMetricThresholdOutput) ToCategoricalDataQualityMetricThresholdOutputWithContext(ctx context.Context) CategoricalDataQualityMetricThresholdOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalDataQualityMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical data quality metric to calculate.
func (o CategoricalDataQualityMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalDataQualityMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type CategoricalDataQualityMetricThresholdResponse struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical data quality metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type CategoricalDataQualityMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (CategoricalDataQualityMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalDataQualityMetricThresholdResponse)(nil)).Elem()
}

func (o CategoricalDataQualityMetricThresholdResponseOutput) ToCategoricalDataQualityMetricThresholdResponseOutput() CategoricalDataQualityMetricThresholdResponseOutput {
	return o
}

func (o CategoricalDataQualityMetricThresholdResponseOutput) ToCategoricalDataQualityMetricThresholdResponseOutputWithContext(ctx context.Context) CategoricalDataQualityMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalDataQualityMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical data quality metric to calculate.
func (o CategoricalDataQualityMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalDataQualityMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v CategoricalDataQualityMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type CategoricalPredictionDriftMetricThreshold struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical prediction drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// CategoricalPredictionDriftMetricThresholdInput is an input type that accepts CategoricalPredictionDriftMetricThresholdArgs and CategoricalPredictionDriftMetricThresholdOutput values.
// You can construct a concrete instance of `CategoricalPredictionDriftMetricThresholdInput` via:
//
//	CategoricalPredictionDriftMetricThresholdArgs{...}
type CategoricalPredictionDriftMetricThresholdInput interface {
	pulumi.Input

	ToCategoricalPredictionDriftMetricThresholdOutput() CategoricalPredictionDriftMetricThresholdOutput
	ToCategoricalPredictionDriftMetricThresholdOutputWithContext(context.Context) CategoricalPredictionDriftMetricThresholdOutput
}

type CategoricalPredictionDriftMetricThresholdArgs struct {
	// Expected value is 'Categorical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The categorical prediction drift metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (CategoricalPredictionDriftMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalPredictionDriftMetricThreshold)(nil)).Elem()
}

func (i CategoricalPredictionDriftMetricThresholdArgs) ToCategoricalPredictionDriftMetricThresholdOutput() CategoricalPredictionDriftMetricThresholdOutput {
	return i.ToCategoricalPredictionDriftMetricThresholdOutputWithContext(context.Background())
}

func (i CategoricalPredictionDriftMetricThresholdArgs) ToCategoricalPredictionDriftMetricThresholdOutputWithContext(ctx context.Context) CategoricalPredictionDriftMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CategoricalPredictionDriftMetricThresholdOutput)
}

type CategoricalPredictionDriftMetricThresholdOutput struct{ *pulumi.OutputState }

func (CategoricalPredictionDriftMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalPredictionDriftMetricThreshold)(nil)).Elem()
}

func (o CategoricalPredictionDriftMetricThresholdOutput) ToCategoricalPredictionDriftMetricThresholdOutput() CategoricalPredictionDriftMetricThresholdOutput {
	return o
}

func (o CategoricalPredictionDriftMetricThresholdOutput) ToCategoricalPredictionDriftMetricThresholdOutputWithContext(ctx context.Context) CategoricalPredictionDriftMetricThresholdOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalPredictionDriftMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical prediction drift metric to calculate.
func (o CategoricalPredictionDriftMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalPredictionDriftMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type CategoricalPredictionDriftMetricThresholdResponse struct {
	// Expected value is 'Categorical'.
	DataType string `pulumi:"dataType"`
	// [Required] The categorical prediction drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type CategoricalPredictionDriftMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (CategoricalPredictionDriftMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalPredictionDriftMetricThresholdResponse)(nil)).Elem()
}

func (o CategoricalPredictionDriftMetricThresholdResponseOutput) ToCategoricalPredictionDriftMetricThresholdResponseOutput() CategoricalPredictionDriftMetricThresholdResponseOutput {
	return o
}

func (o CategoricalPredictionDriftMetricThresholdResponseOutput) ToCategoricalPredictionDriftMetricThresholdResponseOutputWithContext(ctx context.Context) CategoricalPredictionDriftMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Categorical'.
func (o CategoricalPredictionDriftMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The categorical prediction drift metric to calculate.
func (o CategoricalPredictionDriftMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CategoricalPredictionDriftMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v CategoricalPredictionDriftMetricThresholdResponse) *MonitoringThresholdResponse {
		return v.Threshold
	}).(MonitoringThresholdResponsePtrOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// CertificateDatastoreCredentialsInput is an input type that accepts CertificateDatastoreCredentialsArgs and CertificateDatastoreCredentialsOutput values.
// You can construct a concrete instance of `CertificateDatastoreCredentialsInput` via:
//
//	CertificateDatastoreCredentialsArgs{...}
type CertificateDatastoreCredentialsInput interface {
	pulumi.Input

	ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput
	ToCertificateDatastoreCredentialsOutputWithContext(context.Context) CertificateDatastoreCredentialsOutput
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (CertificateDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return i.ToCertificateDatastoreCredentialsOutputWithContext(context.Background())
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreCredentialsOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return o
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o CertificateDatastoreCredentialsOutput) Secrets() CertificateDatastoreSecretsOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) CertificateDatastoreSecrets { return v.Secrets }).(CertificateDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentialsResponse)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutput() CertificateDatastoreCredentialsResponseOutput {
	return o
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecrets struct {
	// Service principal certificate.
	Certificate *string `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType string `pulumi:"secretsType"`
}

// CertificateDatastoreSecretsInput is an input type that accepts CertificateDatastoreSecretsArgs and CertificateDatastoreSecretsOutput values.
// You can construct a concrete instance of `CertificateDatastoreSecretsInput` via:
//
//	CertificateDatastoreSecretsArgs{...}
type CertificateDatastoreSecretsInput interface {
	pulumi.Input

	ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput
	ToCertificateDatastoreSecretsOutputWithContext(context.Context) CertificateDatastoreSecretsOutput
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsArgs struct {
	// Service principal certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (CertificateDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return i.ToCertificateDatastoreSecretsOutputWithContext(context.Background())
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreSecretsOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return o
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return o
}

// Service principal certificate.
func (o CertificateDatastoreSecretsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Classification task in AutoML Table vertical.
type Classification struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParameters `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Classification
func (val *Classification) Defaults() *Classification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ClassificationInput is an input type that accepts ClassificationArgs and ClassificationOutput values.
// You can construct a concrete instance of `ClassificationInput` via:
//
//	ClassificationArgs{...}
type ClassificationInput interface {
	pulumi.Input

	ToClassificationOutput() ClassificationOutput
	ToClassificationOutputWithContext(context.Context) ClassificationOutput
}

// Classification task in AutoML Table vertical.
type ClassificationArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters TableFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel pulumi.StringPtrInput `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace TableParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings TableSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings ClassificationTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ClassificationArgs
func (val *ClassificationArgs) Defaults() *ClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("AUCWeighted")
	}

	return &tmp
}
func (ClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (i ClassificationArgs) ToClassificationOutput() ClassificationOutput {
	return i.ToClassificationOutputWithContext(context.Background())
}

func (i ClassificationArgs) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationOutput struct{ *pulumi.OutputState }

func (ClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (o ClassificationOutput) ToClassificationOutput() ClassificationOutput {
	return o
}

func (o ClassificationOutput) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ClassificationOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Classification) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o ClassificationOutput) FixedParameters() TableFixedParametersPtrOutput {
	return o.ApplyT(func(v Classification) *TableFixedParameters { return v.FixedParameters }).(TableFixedParametersPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ClassificationOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Classification) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Positive label for binary metrics calculation.
func (o ClassificationOutput) PositiveLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.PositiveLabel }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ClassificationOutput) SearchSpace() TableParameterSubspaceArrayOutput {
	return o.ApplyT(func(v Classification) []TableParameterSubspace { return v.SearchSpace }).(TableParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o ClassificationOutput) SweepSettings() TableSweepSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableSweepSettings { return v.SweepSettings }).(TableSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Classification) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ClassificationOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Classification) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Classification) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Classification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationOutput) TrainingSettings() ClassificationTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *ClassificationTrainingSettings { return v.TrainingSettings }).(ClassificationTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o ClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Classification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Classification) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ClassificationOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

type ClassificationModelPerformanceMetricThreshold struct {
	// [Required] The classification model performance to calculate.
	Metric string `pulumi:"metric"`
	// Expected value is 'Classification'.
	ModelType string `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// ClassificationModelPerformanceMetricThresholdInput is an input type that accepts ClassificationModelPerformanceMetricThresholdArgs and ClassificationModelPerformanceMetricThresholdOutput values.
// You can construct a concrete instance of `ClassificationModelPerformanceMetricThresholdInput` via:
//
//	ClassificationModelPerformanceMetricThresholdArgs{...}
type ClassificationModelPerformanceMetricThresholdInput interface {
	pulumi.Input

	ToClassificationModelPerformanceMetricThresholdOutput() ClassificationModelPerformanceMetricThresholdOutput
	ToClassificationModelPerformanceMetricThresholdOutputWithContext(context.Context) ClassificationModelPerformanceMetricThresholdOutput
}

type ClassificationModelPerformanceMetricThresholdArgs struct {
	// [Required] The classification model performance to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// Expected value is 'Classification'.
	ModelType pulumi.StringInput `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (ClassificationModelPerformanceMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationModelPerformanceMetricThreshold)(nil)).Elem()
}

func (i ClassificationModelPerformanceMetricThresholdArgs) ToClassificationModelPerformanceMetricThresholdOutput() ClassificationModelPerformanceMetricThresholdOutput {
	return i.ToClassificationModelPerformanceMetricThresholdOutputWithContext(context.Background())
}

func (i ClassificationModelPerformanceMetricThresholdArgs) ToClassificationModelPerformanceMetricThresholdOutputWithContext(ctx context.Context) ClassificationModelPerformanceMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationModelPerformanceMetricThresholdOutput)
}

type ClassificationModelPerformanceMetricThresholdOutput struct{ *pulumi.OutputState }

func (ClassificationModelPerformanceMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationModelPerformanceMetricThreshold)(nil)).Elem()
}

func (o ClassificationModelPerformanceMetricThresholdOutput) ToClassificationModelPerformanceMetricThresholdOutput() ClassificationModelPerformanceMetricThresholdOutput {
	return o
}

func (o ClassificationModelPerformanceMetricThresholdOutput) ToClassificationModelPerformanceMetricThresholdOutputWithContext(ctx context.Context) ClassificationModelPerformanceMetricThresholdOutput {
	return o
}

// [Required] The classification model performance to calculate.
func (o ClassificationModelPerformanceMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// Expected value is 'Classification'.
func (o ClassificationModelPerformanceMetricThresholdOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThreshold) string { return v.ModelType }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o ClassificationModelPerformanceMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type ClassificationModelPerformanceMetricThresholdResponse struct {
	// [Required] The classification model performance to calculate.
	Metric string `pulumi:"metric"`
	// Expected value is 'Classification'.
	ModelType string `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type ClassificationModelPerformanceMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (ClassificationModelPerformanceMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationModelPerformanceMetricThresholdResponse)(nil)).Elem()
}

func (o ClassificationModelPerformanceMetricThresholdResponseOutput) ToClassificationModelPerformanceMetricThresholdResponseOutput() ClassificationModelPerformanceMetricThresholdResponseOutput {
	return o
}

func (o ClassificationModelPerformanceMetricThresholdResponseOutput) ToClassificationModelPerformanceMetricThresholdResponseOutputWithContext(ctx context.Context) ClassificationModelPerformanceMetricThresholdResponseOutput {
	return o
}

// [Required] The classification model performance to calculate.
func (o ClassificationModelPerformanceMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// Expected value is 'Classification'.
func (o ClassificationModelPerformanceMetricThresholdResponseOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThresholdResponse) string { return v.ModelType }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o ClassificationModelPerformanceMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v ClassificationModelPerformanceMetricThresholdResponse) *MonitoringThresholdResponse {
		return v.Threshold
	}).(MonitoringThresholdResponsePtrOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParametersResponse `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ClassificationResponse
func (val *ClassificationResponse) Defaults() *ClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Classification task in AutoML Table vertical.
type ClassificationResponseOutput struct{ *pulumi.OutputState }

func (ClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationResponse)(nil)).Elem()
}

func (o ClassificationResponseOutput) ToClassificationResponseOutput() ClassificationResponseOutput {
	return o
}

func (o ClassificationResponseOutput) ToClassificationResponseOutputWithContext(ctx context.Context) ClassificationResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ClassificationResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o ClassificationResponseOutput) FixedParameters() TableFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableFixedParametersResponse { return v.FixedParameters }).(TableFixedParametersResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ClassificationResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v ClassificationResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Positive label for binary metrics calculation.
func (o ClassificationResponseOutput) PositiveLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.PositiveLabel }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ClassificationResponseOutput) SearchSpace() TableParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v ClassificationResponse) []TableParameterSubspaceResponse { return v.SearchSpace }).(TableParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o ClassificationResponseOutput) SweepSettings() TableSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableSweepSettingsResponse { return v.SweepSettings }).(TableSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ClassificationResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationResponseOutput) TrainingSettings() ClassificationTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *ClassificationTrainingSettingsResponse { return v.TrainingSettings }).(ClassificationTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o ClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ClassificationResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettings struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettings
func (val *ClassificationTrainingSettings) Defaults() *ClassificationTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// ClassificationTrainingSettingsInput is an input type that accepts ClassificationTrainingSettingsArgs and ClassificationTrainingSettingsOutput values.
// You can construct a concrete instance of `ClassificationTrainingSettingsInput` via:
//
//	ClassificationTrainingSettingsArgs{...}
type ClassificationTrainingSettingsInput interface {
	pulumi.Input

	ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput
	ToClassificationTrainingSettingsOutputWithContext(context.Context) ClassificationTrainingSettingsOutput
}

// Classification Training related configuration.
type ClassificationTrainingSettingsArgs struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode pulumi.StringPtrInput `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettingsArgs
func (val *ClassificationTrainingSettingsArgs) Defaults() *ClassificationTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	if tmp.TrainingMode == nil {
		tmp.TrainingMode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (ClassificationTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettings)(nil)).Elem()
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput {
	return i.ToClassificationTrainingSettingsOutputWithContext(context.Background())
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsOutputWithContext(ctx context.Context) ClassificationTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsOutput)
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return i.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsOutput).ToClassificationTrainingSettingsPtrOutputWithContext(ctx)
}

// ClassificationTrainingSettingsPtrInput is an input type that accepts ClassificationTrainingSettingsArgs, ClassificationTrainingSettingsPtr and ClassificationTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `ClassificationTrainingSettingsPtrInput` via:
//
//	        ClassificationTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type ClassificationTrainingSettingsPtrInput interface {
	pulumi.Input

	ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput
	ToClassificationTrainingSettingsPtrOutputWithContext(context.Context) ClassificationTrainingSettingsPtrOutput
}

type classificationTrainingSettingsPtrType ClassificationTrainingSettingsArgs

func ClassificationTrainingSettingsPtr(v *ClassificationTrainingSettingsArgs) ClassificationTrainingSettingsPtrInput {
	return (*classificationTrainingSettingsPtrType)(v)
}

func (*classificationTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettings)(nil)).Elem()
}

func (i *classificationTrainingSettingsPtrType) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return i.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *classificationTrainingSettingsPtrType) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettingsOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettings)(nil)).Elem()
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput {
	return o
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsOutputWithContext(ctx context.Context) ClassificationTrainingSettingsOutput {
	return o
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return o.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationTrainingSettings) *ClassificationTrainingSettings {
		return &v
	}).(ClassificationTrainingSettingsPtrOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ClassificationTrainingSettingsOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type ClassificationTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettings)(nil)).Elem()
}

func (o ClassificationTrainingSettingsPtrOutput) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return o
}

func (o ClassificationTrainingSettingsPtrOutput) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return o
}

func (o ClassificationTrainingSettingsPtrOutput) Elem() ClassificationTrainingSettingsOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) ClassificationTrainingSettings {
		if v != nil {
			return *v
		}
		var ret ClassificationTrainingSettings
		return ret
	}).(ClassificationTrainingSettingsOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ClassificationTrainingSettingsPtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettingsResponse struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettingsResponse
func (val *ClassificationTrainingSettingsResponse) Defaults() *ClassificationTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// Classification Training related configuration.
type ClassificationTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettingsResponse)(nil)).Elem()
}

func (o ClassificationTrainingSettingsResponseOutput) ToClassificationTrainingSettingsResponseOutput() ClassificationTrainingSettingsResponseOutput {
	return o
}

func (o ClassificationTrainingSettingsResponseOutput) ToClassificationTrainingSettingsResponseOutputWithContext(ctx context.Context) ClassificationTrainingSettingsResponseOutput {
	return o
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ClassificationTrainingSettingsResponseOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type ClassificationTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettingsResponse)(nil)).Elem()
}

func (o ClassificationTrainingSettingsResponsePtrOutput) ToClassificationTrainingSettingsResponsePtrOutput() ClassificationTrainingSettingsResponsePtrOutput {
	return o
}

func (o ClassificationTrainingSettingsResponsePtrOutput) ToClassificationTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsResponsePtrOutput {
	return o
}

func (o ClassificationTrainingSettingsResponsePtrOutput) Elem() ClassificationTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) ClassificationTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ClassificationTrainingSettingsResponse
		return ret
	}).(ClassificationTrainingSettingsResponseOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ClassificationTrainingSettingsResponsePtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfiguration struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// CodeConfigurationInput is an input type that accepts CodeConfigurationArgs and CodeConfigurationOutput values.
// You can construct a concrete instance of `CodeConfigurationInput` via:
//
//	CodeConfigurationArgs{...}
type CodeConfigurationInput interface {
	pulumi.Input

	ToCodeConfigurationOutput() CodeConfigurationOutput
	ToCodeConfigurationOutputWithContext(context.Context) CodeConfigurationOutput
}

// Configuration for a scoring code asset.
type CodeConfigurationArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript pulumi.StringInput `pulumi:"scoringScript"`
}

func (CodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return i.ToCodeConfigurationOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput)
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput).ToCodeConfigurationPtrOutputWithContext(ctx)
}

// CodeConfigurationPtrInput is an input type that accepts CodeConfigurationArgs, CodeConfigurationPtr and CodeConfigurationPtrOutput values.
// You can construct a concrete instance of `CodeConfigurationPtrInput` via:
//
//	        CodeConfigurationArgs{...}
//
//	or:
//
//	        nil
type CodeConfigurationPtrInput interface {
	pulumi.Input

	ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput
	ToCodeConfigurationPtrOutputWithContext(context.Context) CodeConfigurationPtrOutput
}

type codeConfigurationPtrType CodeConfigurationArgs

func CodeConfigurationPtr(v *CodeConfigurationArgs) CodeConfigurationPtrInput {
	return (*codeConfigurationPtrType)(v)
}

func (*codeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationOutput struct{ *pulumi.OutputState }

func (CodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeConfiguration) *CodeConfiguration {
		return &v
	}).(CodeConfigurationPtrOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfiguration) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfiguration) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) Elem() CodeConfigurationOutput {
	return o.ApplyT(func(v *CodeConfiguration) CodeConfiguration {
		if v != nil {
			return *v
		}
		var ret CodeConfiguration
		return ret
	}).(CodeConfigurationOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationPtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationPtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// Configuration for a scoring code asset.
type CodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutput() CodeConfigurationResponseOutput {
	return o
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutputWithContext(ctx context.Context) CodeConfigurationResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponseOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutput() CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutputWithContext(ctx context.Context) CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) Elem() CodeConfigurationResponseOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) CodeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CodeConfigurationResponse
		return ret
	}).(CodeConfigurationResponseOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponsePtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponsePtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Container for code asset versions.
type CodeContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerType
func (val *CodeContainerType) Defaults() *CodeContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeContainerTypeInput is an input type that accepts CodeContainerTypeArgs and CodeContainerTypeOutput values.
// You can construct a concrete instance of `CodeContainerTypeInput` via:
//
//	CodeContainerTypeArgs{...}
type CodeContainerTypeInput interface {
	pulumi.Input

	ToCodeContainerTypeOutput() CodeContainerTypeOutput
	ToCodeContainerTypeOutputWithContext(context.Context) CodeContainerTypeOutput
}

// Container for code asset versions.
type CodeContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerTypeArgs
func (val *CodeContainerTypeArgs) Defaults() *CodeContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return i.ToCodeContainerTypeOutputWithContext(context.Background())
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeContainerTypeOutput)
}

// Container for code asset versions.
type CodeContainerTypeOutput struct{ *pulumi.OutputState }

func (CodeContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return o
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return o
}

// The asset description text.
func (o CodeContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for code asset versions.
type CodeContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerResponse
func (val *CodeContainerResponse) Defaults() *CodeContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for code asset versions.
type CodeContainerResponseOutput struct{ *pulumi.OutputState }

func (CodeContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerResponse)(nil)).Elem()
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutput() CodeContainerResponseOutput {
	return o
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutputWithContext(ctx context.Context) CodeContainerResponseOutput {
	return o
}

// The asset description text.
func (o CodeContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o CodeContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o CodeContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o CodeContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code container.
func (o CodeContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionType
func (val *CodeVersionType) Defaults() *CodeVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeVersionTypeInput is an input type that accepts CodeVersionTypeArgs and CodeVersionTypeOutput values.
// You can construct a concrete instance of `CodeVersionTypeInput` via:
//
//	CodeVersionTypeArgs{...}
type CodeVersionTypeInput interface {
	pulumi.Input

	ToCodeVersionTypeOutput() CodeVersionTypeOutput
	ToCodeVersionTypeOutputWithContext(context.Context) CodeVersionTypeOutput
}

// Code asset version details.
type CodeVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Uri where code is located
	CodeUri pulumi.StringPtrInput `pulumi:"codeUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionTypeArgs
func (val *CodeVersionTypeArgs) Defaults() *CodeVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return i.ToCodeVersionTypeOutputWithContext(context.Background())
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeVersionTypeOutput)
}

// Code asset version details.
type CodeVersionTypeOutput struct{ *pulumi.OutputState }

func (CodeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return o
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o CodeVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Uri where code is located
func (o CodeVersionTypeOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o CodeVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o CodeVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionResponse
func (val *CodeVersionResponse) Defaults() *CodeVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Code asset version details.
type CodeVersionResponseOutput struct{ *pulumi.OutputState }

func (CodeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionResponse)(nil)).Elem()
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutput() CodeVersionResponseOutput {
	return o
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutputWithContext(ctx context.Context) CodeVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o CodeVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Uri where code is located
func (o CodeVersionResponseOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o CodeVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o CodeVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code version.
func (o CodeVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type CognitiveServicesSku struct {
	Capacity *int    `pulumi:"capacity"`
	Family   *string `pulumi:"family"`
	Name     *string `pulumi:"name"`
	Size     *string `pulumi:"size"`
	Tier     *string `pulumi:"tier"`
}

// CognitiveServicesSkuInput is an input type that accepts CognitiveServicesSkuArgs and CognitiveServicesSkuOutput values.
// You can construct a concrete instance of `CognitiveServicesSkuInput` via:
//
//	CognitiveServicesSkuArgs{...}
type CognitiveServicesSkuInput interface {
	pulumi.Input

	ToCognitiveServicesSkuOutput() CognitiveServicesSkuOutput
	ToCognitiveServicesSkuOutputWithContext(context.Context) CognitiveServicesSkuOutput
}

type CognitiveServicesSkuArgs struct {
	Capacity pulumi.IntPtrInput    `pulumi:"capacity"`
	Family   pulumi.StringPtrInput `pulumi:"family"`
	Name     pulumi.StringPtrInput `pulumi:"name"`
	Size     pulumi.StringPtrInput `pulumi:"size"`
	Tier     pulumi.StringPtrInput `pulumi:"tier"`
}

func (CognitiveServicesSkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CognitiveServicesSku)(nil)).Elem()
}

func (i CognitiveServicesSkuArgs) ToCognitiveServicesSkuOutput() CognitiveServicesSkuOutput {
	return i.ToCognitiveServicesSkuOutputWithContext(context.Background())
}

func (i CognitiveServicesSkuArgs) ToCognitiveServicesSkuOutputWithContext(ctx context.Context) CognitiveServicesSkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CognitiveServicesSkuOutput)
}

func (i CognitiveServicesSkuArgs) ToCognitiveServicesSkuPtrOutput() CognitiveServicesSkuPtrOutput {
	return i.ToCognitiveServicesSkuPtrOutputWithContext(context.Background())
}

func (i CognitiveServicesSkuArgs) ToCognitiveServicesSkuPtrOutputWithContext(ctx context.Context) CognitiveServicesSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CognitiveServicesSkuOutput).ToCognitiveServicesSkuPtrOutputWithContext(ctx)
}

// CognitiveServicesSkuPtrInput is an input type that accepts CognitiveServicesSkuArgs, CognitiveServicesSkuPtr and CognitiveServicesSkuPtrOutput values.
// You can construct a concrete instance of `CognitiveServicesSkuPtrInput` via:
//
//	        CognitiveServicesSkuArgs{...}
//
//	or:
//
//	        nil
type CognitiveServicesSkuPtrInput interface {
	pulumi.Input

	ToCognitiveServicesSkuPtrOutput() CognitiveServicesSkuPtrOutput
	ToCognitiveServicesSkuPtrOutputWithContext(context.Context) CognitiveServicesSkuPtrOutput
}

type cognitiveServicesSkuPtrType CognitiveServicesSkuArgs

func CognitiveServicesSkuPtr(v *CognitiveServicesSkuArgs) CognitiveServicesSkuPtrInput {
	return (*cognitiveServicesSkuPtrType)(v)
}

func (*cognitiveServicesSkuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CognitiveServicesSku)(nil)).Elem()
}

func (i *cognitiveServicesSkuPtrType) ToCognitiveServicesSkuPtrOutput() CognitiveServicesSkuPtrOutput {
	return i.ToCognitiveServicesSkuPtrOutputWithContext(context.Background())
}

func (i *cognitiveServicesSkuPtrType) ToCognitiveServicesSkuPtrOutputWithContext(ctx context.Context) CognitiveServicesSkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CognitiveServicesSkuPtrOutput)
}

type CognitiveServicesSkuOutput struct{ *pulumi.OutputState }

func (CognitiveServicesSkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CognitiveServicesSku)(nil)).Elem()
}

func (o CognitiveServicesSkuOutput) ToCognitiveServicesSkuOutput() CognitiveServicesSkuOutput {
	return o
}

func (o CognitiveServicesSkuOutput) ToCognitiveServicesSkuOutputWithContext(ctx context.Context) CognitiveServicesSkuOutput {
	return o
}

func (o CognitiveServicesSkuOutput) ToCognitiveServicesSkuPtrOutput() CognitiveServicesSkuPtrOutput {
	return o.ToCognitiveServicesSkuPtrOutputWithContext(context.Background())
}

func (o CognitiveServicesSkuOutput) ToCognitiveServicesSkuPtrOutputWithContext(ctx context.Context) CognitiveServicesSkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CognitiveServicesSku) *CognitiveServicesSku {
		return &v
	}).(CognitiveServicesSkuPtrOutput)
}

func (o CognitiveServicesSkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

func (o CognitiveServicesSkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSku) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSku) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type CognitiveServicesSkuPtrOutput struct{ *pulumi.OutputState }

func (CognitiveServicesSkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CognitiveServicesSku)(nil)).Elem()
}

func (o CognitiveServicesSkuPtrOutput) ToCognitiveServicesSkuPtrOutput() CognitiveServicesSkuPtrOutput {
	return o
}

func (o CognitiveServicesSkuPtrOutput) ToCognitiveServicesSkuPtrOutputWithContext(ctx context.Context) CognitiveServicesSkuPtrOutput {
	return o
}

func (o CognitiveServicesSkuPtrOutput) Elem() CognitiveServicesSkuOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) CognitiveServicesSku {
		if v != nil {
			return *v
		}
		var ret CognitiveServicesSku
		return ret
	}).(CognitiveServicesSkuOutput)
}

func (o CognitiveServicesSkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

func (o CognitiveServicesSkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSku) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

type CognitiveServicesSkuResponse struct {
	Capacity *int    `pulumi:"capacity"`
	Family   *string `pulumi:"family"`
	Name     *string `pulumi:"name"`
	Size     *string `pulumi:"size"`
	Tier     *string `pulumi:"tier"`
}

type CognitiveServicesSkuResponseOutput struct{ *pulumi.OutputState }

func (CognitiveServicesSkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CognitiveServicesSkuResponse)(nil)).Elem()
}

func (o CognitiveServicesSkuResponseOutput) ToCognitiveServicesSkuResponseOutput() CognitiveServicesSkuResponseOutput {
	return o
}

func (o CognitiveServicesSkuResponseOutput) ToCognitiveServicesSkuResponseOutputWithContext(ctx context.Context) CognitiveServicesSkuResponseOutput {
	return o
}

func (o CognitiveServicesSkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

func (o CognitiveServicesSkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSkuResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CognitiveServicesSkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type CognitiveServicesSkuResponsePtrOutput struct{ *pulumi.OutputState }

func (CognitiveServicesSkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CognitiveServicesSkuResponse)(nil)).Elem()
}

func (o CognitiveServicesSkuResponsePtrOutput) ToCognitiveServicesSkuResponsePtrOutput() CognitiveServicesSkuResponsePtrOutput {
	return o
}

func (o CognitiveServicesSkuResponsePtrOutput) ToCognitiveServicesSkuResponsePtrOutputWithContext(ctx context.Context) CognitiveServicesSkuResponsePtrOutput {
	return o
}

func (o CognitiveServicesSkuResponsePtrOutput) Elem() CognitiveServicesSkuResponseOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) CognitiveServicesSkuResponse {
		if v != nil {
			return *v
		}
		var ret CognitiveServicesSkuResponse
		return ret
	}).(CognitiveServicesSkuResponseOutput)
}

func (o CognitiveServicesSkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

func (o CognitiveServicesSkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

func (o CognitiveServicesSkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CognitiveServicesSkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

type Collection struct {
	// The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth.
	ClientId *string `pulumi:"clientId"`
	// Enable or disable data collection.
	DataCollectionMode *string `pulumi:"dataCollectionMode"`
	// The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage.
	DataId *string `pulumi:"dataId"`
	// The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
	SamplingRate *float64 `pulumi:"samplingRate"`
}

// Defaults sets the appropriate defaults for Collection
func (val *Collection) Defaults() *Collection {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataCollectionMode == nil {
		dataCollectionMode_ := "Disabled"
		tmp.DataCollectionMode = &dataCollectionMode_
	}
	if tmp.SamplingRate == nil {
		samplingRate_ := 1.0
		tmp.SamplingRate = &samplingRate_
	}
	return &tmp
}

// CollectionInput is an input type that accepts CollectionArgs and CollectionOutput values.
// You can construct a concrete instance of `CollectionInput` via:
//
//	CollectionArgs{...}
type CollectionInput interface {
	pulumi.Input

	ToCollectionOutput() CollectionOutput
	ToCollectionOutputWithContext(context.Context) CollectionOutput
}

type CollectionArgs struct {
	// The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Enable or disable data collection.
	DataCollectionMode pulumi.StringPtrInput `pulumi:"dataCollectionMode"`
	// The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage.
	DataId pulumi.StringPtrInput `pulumi:"dataId"`
	// The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
	SamplingRate pulumi.Float64PtrInput `pulumi:"samplingRate"`
}

// Defaults sets the appropriate defaults for CollectionArgs
func (val *CollectionArgs) Defaults() *CollectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataCollectionMode == nil {
		tmp.DataCollectionMode = pulumi.StringPtr("Disabled")
	}
	if tmp.SamplingRate == nil {
		tmp.SamplingRate = pulumi.Float64Ptr(1.0)
	}
	return &tmp
}
func (CollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Collection)(nil)).Elem()
}

func (i CollectionArgs) ToCollectionOutput() CollectionOutput {
	return i.ToCollectionOutputWithContext(context.Background())
}

func (i CollectionArgs) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionOutput)
}

// CollectionMapInput is an input type that accepts CollectionMap and CollectionMapOutput values.
// You can construct a concrete instance of `CollectionMapInput` via:
//
//	CollectionMap{ "key": CollectionArgs{...} }
type CollectionMapInput interface {
	pulumi.Input

	ToCollectionMapOutput() CollectionMapOutput
	ToCollectionMapOutputWithContext(context.Context) CollectionMapOutput
}

type CollectionMap map[string]CollectionInput

func (CollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Collection)(nil)).Elem()
}

func (i CollectionMap) ToCollectionMapOutput() CollectionMapOutput {
	return i.ToCollectionMapOutputWithContext(context.Background())
}

func (i CollectionMap) ToCollectionMapOutputWithContext(ctx context.Context) CollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectionMapOutput)
}

type CollectionOutput struct{ *pulumi.OutputState }

func (CollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Collection)(nil)).Elem()
}

func (o CollectionOutput) ToCollectionOutput() CollectionOutput {
	return o
}

func (o CollectionOutput) ToCollectionOutputWithContext(ctx context.Context) CollectionOutput {
	return o
}

// The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth.
func (o CollectionOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Collection) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enable or disable data collection.
func (o CollectionOutput) DataCollectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Collection) *string { return v.DataCollectionMode }).(pulumi.StringPtrOutput)
}

// The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage.
func (o CollectionOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Collection) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
func (o CollectionOutput) SamplingRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Collection) *float64 { return v.SamplingRate }).(pulumi.Float64PtrOutput)
}

type CollectionMapOutput struct{ *pulumi.OutputState }

func (CollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Collection)(nil)).Elem()
}

func (o CollectionMapOutput) ToCollectionMapOutput() CollectionMapOutput {
	return o
}

func (o CollectionMapOutput) ToCollectionMapOutputWithContext(ctx context.Context) CollectionMapOutput {
	return o
}

func (o CollectionMapOutput) MapIndex(k pulumi.StringInput) CollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Collection {
		return vs[0].(map[string]Collection)[vs[1].(string)]
	}).(CollectionOutput)
}

type CollectionResponse struct {
	// The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth.
	ClientId *string `pulumi:"clientId"`
	// Enable or disable data collection.
	DataCollectionMode *string `pulumi:"dataCollectionMode"`
	// The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage.
	DataId *string `pulumi:"dataId"`
	// The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
	SamplingRate *float64 `pulumi:"samplingRate"`
}

// Defaults sets the appropriate defaults for CollectionResponse
func (val *CollectionResponse) Defaults() *CollectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataCollectionMode == nil {
		dataCollectionMode_ := "Disabled"
		tmp.DataCollectionMode = &dataCollectionMode_
	}
	if tmp.SamplingRate == nil {
		samplingRate_ := 1.0
		tmp.SamplingRate = &samplingRate_
	}
	return &tmp
}

type CollectionResponseOutput struct{ *pulumi.OutputState }

func (CollectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectionResponse)(nil)).Elem()
}

func (o CollectionResponseOutput) ToCollectionResponseOutput() CollectionResponseOutput {
	return o
}

func (o CollectionResponseOutput) ToCollectionResponseOutputWithContext(ctx context.Context) CollectionResponseOutput {
	return o
}

// The msi client id used to collect logging to blob storage. If it's null,backend will pick a registered endpoint identity to auth.
func (o CollectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CollectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enable or disable data collection.
func (o CollectionResponseOutput) DataCollectionMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CollectionResponse) *string { return v.DataCollectionMode }).(pulumi.StringPtrOutput)
}

// The data asset arm resource id. Client side will ensure data asset is pointing to the blob storage, and backend will collect data to the blob storage.
func (o CollectionResponseOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CollectionResponse) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// The sampling rate for collection. Sampling rate 1.0 means we collect 100% of data by default.
func (o CollectionResponseOutput) SamplingRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v CollectionResponse) *float64 { return v.SamplingRate }).(pulumi.Float64PtrOutput)
}

type CollectionResponseMapOutput struct{ *pulumi.OutputState }

func (CollectionResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CollectionResponse)(nil)).Elem()
}

func (o CollectionResponseMapOutput) ToCollectionResponseMapOutput() CollectionResponseMapOutput {
	return o
}

func (o CollectionResponseMapOutput) ToCollectionResponseMapOutputWithContext(ctx context.Context) CollectionResponseMapOutput {
	return o
}

func (o CollectionResponseMapOutput) MapIndex(k pulumi.StringInput) CollectionResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CollectionResponse {
		return vs[0].(map[string]CollectionResponse)[vs[1].(string)]
	}).(CollectionResponseOutput)
}

// Column transformer parameters.
type ColumnTransformer struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// ColumnTransformerInput is an input type that accepts ColumnTransformerArgs and ColumnTransformerOutput values.
// You can construct a concrete instance of `ColumnTransformerInput` via:
//
//	ColumnTransformerArgs{...}
type ColumnTransformerInput interface {
	pulumi.Input

	ToColumnTransformerOutput() ColumnTransformerOutput
	ToColumnTransformerOutputWithContext(context.Context) ColumnTransformerOutput
}

// Column transformer parameters.
type ColumnTransformerArgs struct {
	// Fields to apply transformer logic on.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters pulumi.Input `pulumi:"parameters"`
}

func (ColumnTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArgs) ToColumnTransformerOutput() ColumnTransformerOutput {
	return i.ToColumnTransformerOutputWithContext(context.Background())
}

func (i ColumnTransformerArgs) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerOutput)
}

// ColumnTransformerArrayInput is an input type that accepts ColumnTransformerArray and ColumnTransformerArrayOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayInput` via:
//
//	ColumnTransformerArray{ ColumnTransformerArgs{...} }
type ColumnTransformerArrayInput interface {
	pulumi.Input

	ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput
	ToColumnTransformerArrayOutputWithContext(context.Context) ColumnTransformerArrayOutput
}

type ColumnTransformerArray []ColumnTransformerInput

func (ColumnTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return i.ToColumnTransformerArrayOutputWithContext(context.Background())
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayOutput)
}

// Column transformer parameters.
type ColumnTransformerOutput struct{ *pulumi.OutputState }

func (ColumnTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerOutput) ToColumnTransformerOutput() ColumnTransformerOutput {
	return o
}

func (o ColumnTransformerOutput) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformer) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformer) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) Index(i pulumi.IntInput) ColumnTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformer {
		return vs[0].([]ColumnTransformer)[vs[1].(int)]
	}).(ColumnTransformerOutput)
}

// Column transformer parameters.
type ColumnTransformerResponse struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// Column transformer parameters.
type ColumnTransformerResponseOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutput() ColumnTransformerResponseOutput {
	return o
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutputWithContext(ctx context.Context) ColumnTransformerResponseOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutput() ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) Index(i pulumi.IntInput) ColumnTransformerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformerResponse {
		return vs[0].([]ColumnTransformerResponse)[vs[1].(int)]
	}).(ColumnTransformerResponseOutput)
}

// Command job definition.
type CommandJob struct {
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	AutologgerSettings *AutologgerSettings `pulumi:"autologgerSettings"`
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, Ray, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimits `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettings `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJob
func (val *CommandJob) Defaults() *CommandJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// CommandJobInput is an input type that accepts CommandJobArgs and CommandJobOutput values.
// You can construct a concrete instance of `CommandJobInput` via:
//
//	CommandJobArgs{...}
type CommandJobInput interface {
	pulumi.Input

	ToCommandJobOutput() CommandJobOutput
	ToCommandJobOutputWithContext(context.Context) CommandJobOutput
}

// Command job definition.
type CommandJobArgs struct {
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	AutologgerSettings AutologgerSettingsPtrInput `pulumi:"autologgerSettings"`
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command pulumi.StringInput `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, Ray, or null.
	Distribution pulumi.Input `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Command Job limit.
	Limits CommandJobLimitsPtrInput `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings QueueSettingsPtrInput `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobArgs
func (val *CommandJobArgs) Defaults() *CommandJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (CommandJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (i CommandJobArgs) ToCommandJobOutput() CommandJobOutput {
	return i.ToCommandJobOutputWithContext(context.Background())
}

func (i CommandJobArgs) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobOutput)
}

// Command job definition.
type CommandJobOutput struct{ *pulumi.OutputState }

func (CommandJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (o CommandJobOutput) ToCommandJobOutput() CommandJobOutput {
	return o
}

func (o CommandJobOutput) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return o
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobOutput) AutologgerSettings() AutologgerSettingsPtrOutput {
	return o.ApplyT(func(v CommandJob) *AutologgerSettings { return v.AutologgerSettings }).(AutologgerSettingsPtrOutput)
}

// ARM resource ID of the code asset.
func (o CommandJobOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o CommandJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, Ray, or null.
func (o CommandJobOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobOutput) Limits() CommandJobLimitsPtrOutput {
	return o.ApplyT(func(v CommandJob) *CommandJobLimits { return v.Limits }).(CommandJobLimitsPtrOutput)
}

// Notification setting for the job
func (o CommandJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v CommandJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o CommandJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o CommandJobOutput) QueueSettings() QueueSettingsPtrOutput {
	return o.ApplyT(func(v CommandJob) *QueueSettings { return v.QueueSettings }).(QueueSettingsPtrOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v CommandJob) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o CommandJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Command Job limit class.
type CommandJobLimits struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// CommandJobLimitsInput is an input type that accepts CommandJobLimitsArgs and CommandJobLimitsOutput values.
// You can construct a concrete instance of `CommandJobLimitsInput` via:
//
//	CommandJobLimitsArgs{...}
type CommandJobLimitsInput interface {
	pulumi.Input

	ToCommandJobLimitsOutput() CommandJobLimitsOutput
	ToCommandJobLimitsOutputWithContext(context.Context) CommandJobLimitsOutput
}

// Command Job limit class.
type CommandJobLimitsArgs struct {
	// Expected value is 'Command'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (CommandJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return i.ToCommandJobLimitsOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput)
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput).ToCommandJobLimitsPtrOutputWithContext(ctx)
}

// CommandJobLimitsPtrInput is an input type that accepts CommandJobLimitsArgs, CommandJobLimitsPtr and CommandJobLimitsPtrOutput values.
// You can construct a concrete instance of `CommandJobLimitsPtrInput` via:
//
//	        CommandJobLimitsArgs{...}
//
//	or:
//
//	        nil
type CommandJobLimitsPtrInput interface {
	pulumi.Input

	ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput
	ToCommandJobLimitsPtrOutputWithContext(context.Context) CommandJobLimitsPtrOutput
}

type commandJobLimitsPtrType CommandJobLimitsArgs

func CommandJobLimitsPtr(v *CommandJobLimitsArgs) CommandJobLimitsPtrInput {
	return (*commandJobLimitsPtrType)(v)
}

func (*commandJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommandJobLimits) *CommandJobLimits {
		return &v
	}).(CommandJobLimitsPtrOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) Elem() CommandJobLimitsOutput {
	return o.ApplyT(func(v *CommandJobLimits) CommandJobLimits {
		if v != nil {
			return *v
		}
		var ret CommandJobLimits
		return ret
	}).(CommandJobLimitsOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsResponse struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// Command Job limit class.
type CommandJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutput() CommandJobLimitsResponseOutput {
	return o
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutputWithContext(ctx context.Context) CommandJobLimitsResponseOutput {
	return o
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutput() CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutputWithContext(ctx context.Context) CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) Elem() CommandJobLimitsResponseOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) CommandJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret CommandJobLimitsResponse
		return ret
	}).(CommandJobLimitsResponseOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command job definition.
type CommandJobResponse struct {
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	AutologgerSettings *AutologgerSettingsResponse `pulumi:"autologgerSettings"`
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, Ray, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimitsResponse `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// Input parameters.
	Parameters interface{} `pulumi:"parameters"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettingsResponse `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobResponse
func (val *CommandJobResponse) Defaults() *CommandJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Command job definition.
type CommandJobResponseOutput struct{ *pulumi.OutputState }

func (CommandJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobResponse)(nil)).Elem()
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutput() CommandJobResponseOutput {
	return o
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutputWithContext(ctx context.Context) CommandJobResponseOutput {
	return o
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobResponseOutput) AutologgerSettings() AutologgerSettingsResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *AutologgerSettingsResponse { return v.AutologgerSettings }).(AutologgerSettingsResponsePtrOutput)
}

// ARM resource ID of the code asset.
func (o CommandJobResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobResponseOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o CommandJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, Ray, or null.
func (o CommandJobResponseOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobResponseOutput) Limits() CommandJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *CommandJobLimitsResponse { return v.Limits }).(CommandJobLimitsResponsePtrOutput)
}

// Notification setting for the job
func (o CommandJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// Input parameters.
func (o CommandJobResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The asset property dictionary.
func (o CommandJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o CommandJobResponseOutput) QueueSettings() QueueSettingsResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *QueueSettingsResponse { return v.QueueSettings }).(QueueSettingsResponsePtrOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o CommandJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o CommandJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Used for sweep over component
type ComponentConfiguration struct {
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	PipelineSettings interface{} `pulumi:"pipelineSettings"`
}

// ComponentConfigurationInput is an input type that accepts ComponentConfigurationArgs and ComponentConfigurationOutput values.
// You can construct a concrete instance of `ComponentConfigurationInput` via:
//
//	ComponentConfigurationArgs{...}
type ComponentConfigurationInput interface {
	pulumi.Input

	ToComponentConfigurationOutput() ComponentConfigurationOutput
	ToComponentConfigurationOutputWithContext(context.Context) ComponentConfigurationOutput
}

// Used for sweep over component
type ComponentConfigurationArgs struct {
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	PipelineSettings pulumi.Input `pulumi:"pipelineSettings"`
}

func (ComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConfiguration)(nil)).Elem()
}

func (i ComponentConfigurationArgs) ToComponentConfigurationOutput() ComponentConfigurationOutput {
	return i.ToComponentConfigurationOutputWithContext(context.Background())
}

func (i ComponentConfigurationArgs) ToComponentConfigurationOutputWithContext(ctx context.Context) ComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConfigurationOutput)
}

func (i ComponentConfigurationArgs) ToComponentConfigurationPtrOutput() ComponentConfigurationPtrOutput {
	return i.ToComponentConfigurationPtrOutputWithContext(context.Background())
}

func (i ComponentConfigurationArgs) ToComponentConfigurationPtrOutputWithContext(ctx context.Context) ComponentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConfigurationOutput).ToComponentConfigurationPtrOutputWithContext(ctx)
}

// ComponentConfigurationPtrInput is an input type that accepts ComponentConfigurationArgs, ComponentConfigurationPtr and ComponentConfigurationPtrOutput values.
// You can construct a concrete instance of `ComponentConfigurationPtrInput` via:
//
//	        ComponentConfigurationArgs{...}
//
//	or:
//
//	        nil
type ComponentConfigurationPtrInput interface {
	pulumi.Input

	ToComponentConfigurationPtrOutput() ComponentConfigurationPtrOutput
	ToComponentConfigurationPtrOutputWithContext(context.Context) ComponentConfigurationPtrOutput
}

type componentConfigurationPtrType ComponentConfigurationArgs

func ComponentConfigurationPtr(v *ComponentConfigurationArgs) ComponentConfigurationPtrInput {
	return (*componentConfigurationPtrType)(v)
}

func (*componentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentConfiguration)(nil)).Elem()
}

func (i *componentConfigurationPtrType) ToComponentConfigurationPtrOutput() ComponentConfigurationPtrOutput {
	return i.ToComponentConfigurationPtrOutputWithContext(context.Background())
}

func (i *componentConfigurationPtrType) ToComponentConfigurationPtrOutputWithContext(ctx context.Context) ComponentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentConfigurationPtrOutput)
}

// Used for sweep over component
type ComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConfiguration)(nil)).Elem()
}

func (o ComponentConfigurationOutput) ToComponentConfigurationOutput() ComponentConfigurationOutput {
	return o
}

func (o ComponentConfigurationOutput) ToComponentConfigurationOutputWithContext(ctx context.Context) ComponentConfigurationOutput {
	return o
}

func (o ComponentConfigurationOutput) ToComponentConfigurationPtrOutput() ComponentConfigurationPtrOutput {
	return o.ToComponentConfigurationPtrOutputWithContext(context.Background())
}

func (o ComponentConfigurationOutput) ToComponentConfigurationPtrOutputWithContext(ctx context.Context) ComponentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComponentConfiguration) *ComponentConfiguration {
		return &v
	}).(ComponentConfigurationPtrOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o ComponentConfigurationOutput) PipelineSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentConfiguration) interface{} { return v.PipelineSettings }).(pulumi.AnyOutput)
}

type ComponentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ComponentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentConfiguration)(nil)).Elem()
}

func (o ComponentConfigurationPtrOutput) ToComponentConfigurationPtrOutput() ComponentConfigurationPtrOutput {
	return o
}

func (o ComponentConfigurationPtrOutput) ToComponentConfigurationPtrOutputWithContext(ctx context.Context) ComponentConfigurationPtrOutput {
	return o
}

func (o ComponentConfigurationPtrOutput) Elem() ComponentConfigurationOutput {
	return o.ApplyT(func(v *ComponentConfiguration) ComponentConfiguration {
		if v != nil {
			return *v
		}
		var ret ComponentConfiguration
		return ret
	}).(ComponentConfigurationOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o ComponentConfigurationPtrOutput) PipelineSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v *ComponentConfiguration) interface{} {
		if v == nil {
			return nil
		}
		return v.PipelineSettings
	}).(pulumi.AnyOutput)
}

// Used for sweep over component
type ComponentConfigurationResponse struct {
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	PipelineSettings interface{} `pulumi:"pipelineSettings"`
}

// Used for sweep over component
type ComponentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ComponentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentConfigurationResponse)(nil)).Elem()
}

func (o ComponentConfigurationResponseOutput) ToComponentConfigurationResponseOutput() ComponentConfigurationResponseOutput {
	return o
}

func (o ComponentConfigurationResponseOutput) ToComponentConfigurationResponseOutputWithContext(ctx context.Context) ComponentConfigurationResponseOutput {
	return o
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o ComponentConfigurationResponseOutput) PipelineSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentConfigurationResponse) interface{} { return v.PipelineSettings }).(pulumi.AnyOutput)
}

type ComponentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ComponentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentConfigurationResponse)(nil)).Elem()
}

func (o ComponentConfigurationResponsePtrOutput) ToComponentConfigurationResponsePtrOutput() ComponentConfigurationResponsePtrOutput {
	return o
}

func (o ComponentConfigurationResponsePtrOutput) ToComponentConfigurationResponsePtrOutputWithContext(ctx context.Context) ComponentConfigurationResponsePtrOutput {
	return o
}

func (o ComponentConfigurationResponsePtrOutput) Elem() ComponentConfigurationResponseOutput {
	return o.ApplyT(func(v *ComponentConfigurationResponse) ComponentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ComponentConfigurationResponse
		return ret
	}).(ComponentConfigurationResponseOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o ComponentConfigurationResponsePtrOutput) PipelineSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v *ComponentConfigurationResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PipelineSettings
	}).(pulumi.AnyOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerType
func (val *ComponentContainerType) Defaults() *ComponentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentContainerTypeInput is an input type that accepts ComponentContainerTypeArgs and ComponentContainerTypeOutput values.
// You can construct a concrete instance of `ComponentContainerTypeInput` via:
//
//	ComponentContainerTypeArgs{...}
type ComponentContainerTypeInput interface {
	pulumi.Input

	ToComponentContainerTypeOutput() ComponentContainerTypeOutput
	ToComponentContainerTypeOutputWithContext(context.Context) ComponentContainerTypeOutput
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerTypeArgs
func (val *ComponentContainerTypeArgs) Defaults() *ComponentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return i.ToComponentContainerTypeOutputWithContext(context.Background())
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentContainerTypeOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeOutput struct{ *pulumi.OutputState }

func (ComponentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return o
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return o
}

// The asset description text.
func (o ComponentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerResponse
func (val *ComponentContainerResponse) Defaults() *ComponentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponseOutput struct{ *pulumi.OutputState }

func (ComponentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerResponse)(nil)).Elem()
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutput() ComponentContainerResponseOutput {
	return o
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutputWithContext(ctx context.Context) ComponentContainerResponseOutput {
	return o
}

// The asset description text.
func (o ComponentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ComponentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ComponentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ComponentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component container.
func (o ComponentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the component lifecycle
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionType
func (val *ComponentVersionType) Defaults() *ComponentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentVersionTypeInput is an input type that accepts ComponentVersionTypeArgs and ComponentVersionTypeOutput values.
// You can construct a concrete instance of `ComponentVersionTypeInput` via:
//
//	ComponentVersionTypeArgs{...}
type ComponentVersionTypeInput interface {
	pulumi.Input

	ToComponentVersionTypeOutput() ComponentVersionTypeOutput
	ToComponentVersionTypeOutputWithContext(context.Context) ComponentVersionTypeOutput
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec pulumi.Input `pulumi:"componentSpec"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the component lifecycle
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionTypeArgs
func (val *ComponentVersionTypeArgs) Defaults() *ComponentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return i.ToComponentVersionTypeOutputWithContext(context.Background())
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVersionTypeOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeOutput struct{ *pulumi.OutputState }

func (ComponentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return o
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o ComponentVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionTypeOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionType) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o ComponentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o ComponentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the component lifecycle
func (o ComponentVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the component lifecycle
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionResponse
func (val *ComponentVersionResponse) Defaults() *ComponentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponseOutput struct{ *pulumi.OutputState }

func (ComponentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionResponse)(nil)).Elem()
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutput() ComponentVersionResponseOutput {
	return o
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutputWithContext(ctx context.Context) ComponentVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o ComponentVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionResponseOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionResponse) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o ComponentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o ComponentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component version.
func (o ComponentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the component lifecycle
func (o ComponentVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstance struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of ComputeInstance
	Properties *ComputeInstanceProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstance
func (val *ComputeInstance) Defaults() *ComputeInstance {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// ComputeInstanceInput is an input type that accepts ComputeInstanceArgs and ComputeInstanceOutput values.
// You can construct a concrete instance of `ComputeInstanceInput` via:
//
//	ComputeInstanceArgs{...}
type ComputeInstanceInput interface {
	pulumi.Input

	ToComputeInstanceOutput() ComputeInstanceOutput
	ToComputeInstanceOutputWithContext(context.Context) ComputeInstanceOutput
}

// An Azure Machine Learning compute instance.
type ComputeInstanceArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of ComputeInstance
	Properties ComputeInstancePropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstanceArgs
func (val *ComputeInstanceArgs) Defaults() *ComputeInstanceArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ComputeInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstance)(nil)).Elem()
}

func (i ComputeInstanceArgs) ToComputeInstanceOutput() ComputeInstanceOutput {
	return i.ToComputeInstanceOutputWithContext(context.Background())
}

func (i ComputeInstanceArgs) ToComputeInstanceOutputWithContext(ctx context.Context) ComputeInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceOutput)
}

func (i ComputeInstanceArgs) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return i.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (i ComputeInstanceArgs) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceOutput).ToComputeInstancePtrOutputWithContext(ctx)
}

// ComputeInstancePtrInput is an input type that accepts ComputeInstanceArgs, ComputeInstancePtr and ComputeInstancePtrOutput values.
// You can construct a concrete instance of `ComputeInstancePtrInput` via:
//
//	        ComputeInstanceArgs{...}
//
//	or:
//
//	        nil
type ComputeInstancePtrInput interface {
	pulumi.Input

	ToComputeInstancePtrOutput() ComputeInstancePtrOutput
	ToComputeInstancePtrOutputWithContext(context.Context) ComputeInstancePtrOutput
}

type computeInstancePtrType ComputeInstanceArgs

func ComputeInstancePtr(v *ComputeInstanceArgs) ComputeInstancePtrInput {
	return (*computeInstancePtrType)(v)
}

func (*computeInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstance)(nil)).Elem()
}

func (i *computeInstancePtrType) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return i.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (i *computeInstancePtrType) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePtrOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstanceOutput struct{ *pulumi.OutputState }

func (ComputeInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstance)(nil)).Elem()
}

func (o ComputeInstanceOutput) ToComputeInstanceOutput() ComputeInstanceOutput {
	return o
}

func (o ComputeInstanceOutput) ToComputeInstanceOutputWithContext(ctx context.Context) ComputeInstanceOutput {
	return o
}

func (o ComputeInstanceOutput) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return o.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (o ComputeInstanceOutput) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstance) *ComputeInstance {
		return &v
	}).(ComputeInstancePtrOutput)
}

// Location for the underlying compute
func (o ComputeInstanceOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstanceOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstance) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstanceOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of ComputeInstance
func (o ComputeInstanceOutput) Properties() ComputeInstancePropertiesPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *ComputeInstanceProperties { return v.Properties }).(ComputeInstancePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstanceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ComputeInstancePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstance)(nil)).Elem()
}

func (o ComputeInstancePtrOutput) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return o
}

func (o ComputeInstancePtrOutput) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return o
}

func (o ComputeInstancePtrOutput) Elem() ComputeInstanceOutput {
	return o.ApplyT(func(v *ComputeInstance) ComputeInstance {
		if v != nil {
			return *v
		}
		var ret ComputeInstance
		return ret
	}).(ComputeInstanceOutput)
}

// Location for the underlying compute
func (o ComputeInstancePtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstancePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstancePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstancePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of ComputeInstance
func (o ComputeInstancePtrOutput) Properties() ComputeInstancePropertiesPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *ComputeInstanceProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(ComputeInstancePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstancePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance application and its connectivity endpoint URI.
type ComputeInstanceApplicationResponse struct {
	// Name of the ComputeInstance application.
	DisplayName *string `pulumi:"displayName"`
	// Application' endpoint URI.
	EndpointUri *string `pulumi:"endpointUri"`
}

// Defines an Aml Instance application and its connectivity endpoint URI.
type ComputeInstanceApplicationResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceApplicationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceApplicationResponse)(nil)).Elem()
}

func (o ComputeInstanceApplicationResponseOutput) ToComputeInstanceApplicationResponseOutput() ComputeInstanceApplicationResponseOutput {
	return o
}

func (o ComputeInstanceApplicationResponseOutput) ToComputeInstanceApplicationResponseOutputWithContext(ctx context.Context) ComputeInstanceApplicationResponseOutput {
	return o
}

// Name of the ComputeInstance application.
func (o ComputeInstanceApplicationResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceApplicationResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Application' endpoint URI.
func (o ComputeInstanceApplicationResponseOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceApplicationResponse) *string { return v.EndpointUri }).(pulumi.StringPtrOutput)
}

type ComputeInstanceApplicationResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceApplicationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceApplicationResponse)(nil)).Elem()
}

func (o ComputeInstanceApplicationResponseArrayOutput) ToComputeInstanceApplicationResponseArrayOutput() ComputeInstanceApplicationResponseArrayOutput {
	return o
}

func (o ComputeInstanceApplicationResponseArrayOutput) ToComputeInstanceApplicationResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceApplicationResponseArrayOutput {
	return o
}

func (o ComputeInstanceApplicationResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceApplicationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceApplicationResponse {
		return vs[0].([]ComputeInstanceApplicationResponse)[vs[1].(int)]
	}).(ComputeInstanceApplicationResponseOutput)
}

// Specifies settings for autologger.
type ComputeInstanceAutologgerSettings struct {
	// Indicates whether mlflow autologger is enabled for notebooks.
	MlflowAutologger *string `pulumi:"mlflowAutologger"`
}

// ComputeInstanceAutologgerSettingsInput is an input type that accepts ComputeInstanceAutologgerSettingsArgs and ComputeInstanceAutologgerSettingsOutput values.
// You can construct a concrete instance of `ComputeInstanceAutologgerSettingsInput` via:
//
//	ComputeInstanceAutologgerSettingsArgs{...}
type ComputeInstanceAutologgerSettingsInput interface {
	pulumi.Input

	ToComputeInstanceAutologgerSettingsOutput() ComputeInstanceAutologgerSettingsOutput
	ToComputeInstanceAutologgerSettingsOutputWithContext(context.Context) ComputeInstanceAutologgerSettingsOutput
}

// Specifies settings for autologger.
type ComputeInstanceAutologgerSettingsArgs struct {
	// Indicates whether mlflow autologger is enabled for notebooks.
	MlflowAutologger pulumi.StringPtrInput `pulumi:"mlflowAutologger"`
}

func (ComputeInstanceAutologgerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceAutologgerSettings)(nil)).Elem()
}

func (i ComputeInstanceAutologgerSettingsArgs) ToComputeInstanceAutologgerSettingsOutput() ComputeInstanceAutologgerSettingsOutput {
	return i.ToComputeInstanceAutologgerSettingsOutputWithContext(context.Background())
}

func (i ComputeInstanceAutologgerSettingsArgs) ToComputeInstanceAutologgerSettingsOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAutologgerSettingsOutput)
}

func (i ComputeInstanceAutologgerSettingsArgs) ToComputeInstanceAutologgerSettingsPtrOutput() ComputeInstanceAutologgerSettingsPtrOutput {
	return i.ToComputeInstanceAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceAutologgerSettingsArgs) ToComputeInstanceAutologgerSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAutologgerSettingsOutput).ToComputeInstanceAutologgerSettingsPtrOutputWithContext(ctx)
}

// ComputeInstanceAutologgerSettingsPtrInput is an input type that accepts ComputeInstanceAutologgerSettingsArgs, ComputeInstanceAutologgerSettingsPtr and ComputeInstanceAutologgerSettingsPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceAutologgerSettingsPtrInput` via:
//
//	        ComputeInstanceAutologgerSettingsArgs{...}
//
//	or:
//
//	        nil
type ComputeInstanceAutologgerSettingsPtrInput interface {
	pulumi.Input

	ToComputeInstanceAutologgerSettingsPtrOutput() ComputeInstanceAutologgerSettingsPtrOutput
	ToComputeInstanceAutologgerSettingsPtrOutputWithContext(context.Context) ComputeInstanceAutologgerSettingsPtrOutput
}

type computeInstanceAutologgerSettingsPtrType ComputeInstanceAutologgerSettingsArgs

func ComputeInstanceAutologgerSettingsPtr(v *ComputeInstanceAutologgerSettingsArgs) ComputeInstanceAutologgerSettingsPtrInput {
	return (*computeInstanceAutologgerSettingsPtrType)(v)
}

func (*computeInstanceAutologgerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceAutologgerSettings)(nil)).Elem()
}

func (i *computeInstanceAutologgerSettingsPtrType) ToComputeInstanceAutologgerSettingsPtrOutput() ComputeInstanceAutologgerSettingsPtrOutput {
	return i.ToComputeInstanceAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (i *computeInstanceAutologgerSettingsPtrType) ToComputeInstanceAutologgerSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceAutologgerSettingsPtrOutput)
}

// Specifies settings for autologger.
type ComputeInstanceAutologgerSettingsOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAutologgerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceAutologgerSettings)(nil)).Elem()
}

func (o ComputeInstanceAutologgerSettingsOutput) ToComputeInstanceAutologgerSettingsOutput() ComputeInstanceAutologgerSettingsOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsOutput) ToComputeInstanceAutologgerSettingsOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsOutput) ToComputeInstanceAutologgerSettingsPtrOutput() ComputeInstanceAutologgerSettingsPtrOutput {
	return o.ToComputeInstanceAutologgerSettingsPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceAutologgerSettingsOutput) ToComputeInstanceAutologgerSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceAutologgerSettings) *ComputeInstanceAutologgerSettings {
		return &v
	}).(ComputeInstanceAutologgerSettingsPtrOutput)
}

// Indicates whether mlflow autologger is enabled for notebooks.
func (o ComputeInstanceAutologgerSettingsOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceAutologgerSettings) *string { return v.MlflowAutologger }).(pulumi.StringPtrOutput)
}

type ComputeInstanceAutologgerSettingsPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAutologgerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceAutologgerSettings)(nil)).Elem()
}

func (o ComputeInstanceAutologgerSettingsPtrOutput) ToComputeInstanceAutologgerSettingsPtrOutput() ComputeInstanceAutologgerSettingsPtrOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsPtrOutput) ToComputeInstanceAutologgerSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsPtrOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsPtrOutput) Elem() ComputeInstanceAutologgerSettingsOutput {
	return o.ApplyT(func(v *ComputeInstanceAutologgerSettings) ComputeInstanceAutologgerSettings {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceAutologgerSettings
		return ret
	}).(ComputeInstanceAutologgerSettingsOutput)
}

// Indicates whether mlflow autologger is enabled for notebooks.
func (o ComputeInstanceAutologgerSettingsPtrOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceAutologgerSettings) *string {
		if v == nil {
			return nil
		}
		return v.MlflowAutologger
	}).(pulumi.StringPtrOutput)
}

// Specifies settings for autologger.
type ComputeInstanceAutologgerSettingsResponse struct {
	// Indicates whether mlflow autologger is enabled for notebooks.
	MlflowAutologger *string `pulumi:"mlflowAutologger"`
}

// Specifies settings for autologger.
type ComputeInstanceAutologgerSettingsResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAutologgerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceAutologgerSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceAutologgerSettingsResponseOutput) ToComputeInstanceAutologgerSettingsResponseOutput() ComputeInstanceAutologgerSettingsResponseOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsResponseOutput) ToComputeInstanceAutologgerSettingsResponseOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsResponseOutput {
	return o
}

// Indicates whether mlflow autologger is enabled for notebooks.
func (o ComputeInstanceAutologgerSettingsResponseOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceAutologgerSettingsResponse) *string { return v.MlflowAutologger }).(pulumi.StringPtrOutput)
}

type ComputeInstanceAutologgerSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceAutologgerSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceAutologgerSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceAutologgerSettingsResponsePtrOutput) ToComputeInstanceAutologgerSettingsResponsePtrOutput() ComputeInstanceAutologgerSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsResponsePtrOutput) ToComputeInstanceAutologgerSettingsResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceAutologgerSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceAutologgerSettingsResponsePtrOutput) Elem() ComputeInstanceAutologgerSettingsResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceAutologgerSettingsResponse) ComputeInstanceAutologgerSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceAutologgerSettingsResponse
		return ret
	}).(ComputeInstanceAutologgerSettingsResponseOutput)
}

// Indicates whether mlflow autologger is enabled for notebooks.
func (o ComputeInstanceAutologgerSettingsResponsePtrOutput) MlflowAutologger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceAutologgerSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MlflowAutologger
	}).(pulumi.StringPtrOutput)
}

// Defines all connectivity endpoints and properties for an ComputeInstance.
type ComputeInstanceConnectivityEndpointsResponse struct {
	// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP Address of this ComputeInstance.
	PublicIpAddress string `pulumi:"publicIpAddress"`
}

// Defines all connectivity endpoints and properties for an ComputeInstance.
type ComputeInstanceConnectivityEndpointsResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceConnectivityEndpointsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceConnectivityEndpointsResponse)(nil)).Elem()
}

func (o ComputeInstanceConnectivityEndpointsResponseOutput) ToComputeInstanceConnectivityEndpointsResponseOutput() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponseOutput) ToComputeInstanceConnectivityEndpointsResponseOutputWithContext(ctx context.Context) ComputeInstanceConnectivityEndpointsResponseOutput {
	return o
}

// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
func (o ComputeInstanceConnectivityEndpointsResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceConnectivityEndpointsResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Public IP Address of this ComputeInstance.
func (o ComputeInstanceConnectivityEndpointsResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceConnectivityEndpointsResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

type ComputeInstanceConnectivityEndpointsResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceConnectivityEndpointsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceConnectivityEndpointsResponse)(nil)).Elem()
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) ToComputeInstanceConnectivityEndpointsResponsePtrOutput() ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) ToComputeInstanceConnectivityEndpointsResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) Elem() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) ComputeInstanceConnectivityEndpointsResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceConnectivityEndpointsResponse
		return ret
	}).(ComputeInstanceConnectivityEndpointsResponseOutput)
}

// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateIpAddress
	}).(pulumi.StringPtrOutput)
}

// Public IP Address of this ComputeInstance.
func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) PublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicIpAddress
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance container.
type ComputeInstanceContainerResponse struct {
	// Auto save settings.
	Autosave *string `pulumi:"autosave"`
	// Environment information of this container.
	Environment *ComputeInstanceEnvironmentInfoResponse `pulumi:"environment"`
	// Information of GPU.
	Gpu *string `pulumi:"gpu"`
	// Name of the ComputeInstance container.
	Name *string `pulumi:"name"`
	// network of this container.
	Network *string `pulumi:"network"`
	// services of this containers.
	Services []interface{} `pulumi:"services"`
}

// Defines an Aml Instance container.
type ComputeInstanceContainerResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceContainerResponse)(nil)).Elem()
}

func (o ComputeInstanceContainerResponseOutput) ToComputeInstanceContainerResponseOutput() ComputeInstanceContainerResponseOutput {
	return o
}

func (o ComputeInstanceContainerResponseOutput) ToComputeInstanceContainerResponseOutputWithContext(ctx context.Context) ComputeInstanceContainerResponseOutput {
	return o
}

// Auto save settings.
func (o ComputeInstanceContainerResponseOutput) Autosave() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Autosave }).(pulumi.StringPtrOutput)
}

// Environment information of this container.
func (o ComputeInstanceContainerResponseOutput) Environment() ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *ComputeInstanceEnvironmentInfoResponse { return v.Environment }).(ComputeInstanceEnvironmentInfoResponsePtrOutput)
}

// Information of GPU.
func (o ComputeInstanceContainerResponseOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Name of the ComputeInstance container.
func (o ComputeInstanceContainerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// network of this container.
func (o ComputeInstanceContainerResponseOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// services of this containers.
func (o ComputeInstanceContainerResponseOutput) Services() pulumi.ArrayOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) []interface{} { return v.Services }).(pulumi.ArrayOutput)
}

type ComputeInstanceContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceContainerResponse)(nil)).Elem()
}

func (o ComputeInstanceContainerResponseArrayOutput) ToComputeInstanceContainerResponseArrayOutput() ComputeInstanceContainerResponseArrayOutput {
	return o
}

func (o ComputeInstanceContainerResponseArrayOutput) ToComputeInstanceContainerResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceContainerResponseArrayOutput {
	return o
}

func (o ComputeInstanceContainerResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceContainerResponse {
		return vs[0].([]ComputeInstanceContainerResponse)[vs[1].(int)]
	}).(ComputeInstanceContainerResponseOutput)
}

// Describes information on user who created this ComputeInstance.
type ComputeInstanceCreatedByResponse struct {
	// Uniquely identifies the user within his/her organization.
	UserId string `pulumi:"userId"`
	// Name of the user.
	UserName string `pulumi:"userName"`
	// Uniquely identifies user' Azure Active Directory organization.
	UserOrgId string `pulumi:"userOrgId"`
}

// Describes information on user who created this ComputeInstance.
type ComputeInstanceCreatedByResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceCreatedByResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceCreatedByResponse)(nil)).Elem()
}

func (o ComputeInstanceCreatedByResponseOutput) ToComputeInstanceCreatedByResponseOutput() ComputeInstanceCreatedByResponseOutput {
	return o
}

func (o ComputeInstanceCreatedByResponseOutput) ToComputeInstanceCreatedByResponseOutputWithContext(ctx context.Context) ComputeInstanceCreatedByResponseOutput {
	return o
}

// Uniquely identifies the user within his/her organization.
func (o ComputeInstanceCreatedByResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserId }).(pulumi.StringOutput)
}

// Name of the user.
func (o ComputeInstanceCreatedByResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserName }).(pulumi.StringOutput)
}

// Uniquely identifies user' Azure Active Directory organization.
func (o ComputeInstanceCreatedByResponseOutput) UserOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserOrgId }).(pulumi.StringOutput)
}

type ComputeInstanceCreatedByResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceCreatedByResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceCreatedByResponse)(nil)).Elem()
}

func (o ComputeInstanceCreatedByResponsePtrOutput) ToComputeInstanceCreatedByResponsePtrOutput() ComputeInstanceCreatedByResponsePtrOutput {
	return o
}

func (o ComputeInstanceCreatedByResponsePtrOutput) ToComputeInstanceCreatedByResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceCreatedByResponsePtrOutput {
	return o
}

func (o ComputeInstanceCreatedByResponsePtrOutput) Elem() ComputeInstanceCreatedByResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) ComputeInstanceCreatedByResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceCreatedByResponse
		return ret
	}).(ComputeInstanceCreatedByResponseOutput)
}

// Uniquely identifies the user within his/her organization.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserId
	}).(pulumi.StringPtrOutput)
}

// Name of the user.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

// Uniquely identifies user' Azure Active Directory organization.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserOrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserOrgId
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance DataDisk.
type ComputeInstanceDataDiskResponse struct {
	// Caching type of Data Disk.
	Caching *string `pulumi:"caching"`
	// The initial disk size in gigabytes.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun *int `pulumi:"lun"`
	// type of this storage account.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Defaults sets the appropriate defaults for ComputeInstanceDataDiskResponse
func (val *ComputeInstanceDataDiskResponse) Defaults() *ComputeInstanceDataDiskResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StorageAccountType == nil {
		storageAccountType_ := "Standard_LRS"
		tmp.StorageAccountType = &storageAccountType_
	}
	return &tmp
}

// Defines an Aml Instance DataDisk.
type ComputeInstanceDataDiskResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceDataDiskResponse)(nil)).Elem()
}

func (o ComputeInstanceDataDiskResponseOutput) ToComputeInstanceDataDiskResponseOutput() ComputeInstanceDataDiskResponseOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseOutput) ToComputeInstanceDataDiskResponseOutputWithContext(ctx context.Context) ComputeInstanceDataDiskResponseOutput {
	return o
}

// Caching type of Data Disk.
func (o ComputeInstanceDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// The initial disk size in gigabytes.
func (o ComputeInstanceDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
func (o ComputeInstanceDataDiskResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// type of this storage account.
func (o ComputeInstanceDataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ComputeInstanceDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceDataDiskResponse)(nil)).Elem()
}

func (o ComputeInstanceDataDiskResponseArrayOutput) ToComputeInstanceDataDiskResponseArrayOutput() ComputeInstanceDataDiskResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseArrayOutput) ToComputeInstanceDataDiskResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceDataDiskResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceDataDiskResponse {
		return vs[0].([]ComputeInstanceDataDiskResponse)[vs[1].(int)]
	}).(ComputeInstanceDataDiskResponseOutput)
}

// Defines an Aml Instance DataMount.
type ComputeInstanceDataMountResponse struct {
	// who this data mount created by.
	CreatedBy *string `pulumi:"createdBy"`
	// Error of this data mount.
	Error *string `pulumi:"error"`
	// Mount Action.
	MountAction *string `pulumi:"mountAction"`
	// Mount Mode.
	MountMode *string `pulumi:"mountMode"`
	// name of the ComputeInstance data mount.
	MountName *string `pulumi:"mountName"`
	// Path of this data mount.
	MountPath *string `pulumi:"mountPath"`
	// Mount state.
	MountState *string `pulumi:"mountState"`
	// The time when the disk mounted.
	MountedOn *string `pulumi:"mountedOn"`
	// Source of the ComputeInstance data mount.
	Source *string `pulumi:"source"`
	// Data source type.
	SourceType *string `pulumi:"sourceType"`
}

// Defines an Aml Instance DataMount.
type ComputeInstanceDataMountResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceDataMountResponse)(nil)).Elem()
}

func (o ComputeInstanceDataMountResponseOutput) ToComputeInstanceDataMountResponseOutput() ComputeInstanceDataMountResponseOutput {
	return o
}

func (o ComputeInstanceDataMountResponseOutput) ToComputeInstanceDataMountResponseOutputWithContext(ctx context.Context) ComputeInstanceDataMountResponseOutput {
	return o
}

// who this data mount created by.
func (o ComputeInstanceDataMountResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// Error of this data mount.
func (o ComputeInstanceDataMountResponseOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Mount Action.
func (o ComputeInstanceDataMountResponseOutput) MountAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountAction }).(pulumi.StringPtrOutput)
}

// Mount Mode.
func (o ComputeInstanceDataMountResponseOutput) MountMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountMode }).(pulumi.StringPtrOutput)
}

// name of the ComputeInstance data mount.
func (o ComputeInstanceDataMountResponseOutput) MountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountName }).(pulumi.StringPtrOutput)
}

// Path of this data mount.
func (o ComputeInstanceDataMountResponseOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Mount state.
func (o ComputeInstanceDataMountResponseOutput) MountState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountState }).(pulumi.StringPtrOutput)
}

// The time when the disk mounted.
func (o ComputeInstanceDataMountResponseOutput) MountedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountedOn }).(pulumi.StringPtrOutput)
}

// Source of the ComputeInstance data mount.
func (o ComputeInstanceDataMountResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Data source type.
func (o ComputeInstanceDataMountResponseOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

type ComputeInstanceDataMountResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceDataMountResponse)(nil)).Elem()
}

func (o ComputeInstanceDataMountResponseArrayOutput) ToComputeInstanceDataMountResponseArrayOutput() ComputeInstanceDataMountResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataMountResponseArrayOutput) ToComputeInstanceDataMountResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceDataMountResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataMountResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceDataMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceDataMountResponse {
		return vs[0].([]ComputeInstanceDataMountResponse)[vs[1].(int)]
	}).(ComputeInstanceDataMountResponseOutput)
}

// Environment information
type ComputeInstanceEnvironmentInfoResponse struct {
	// name of environment.
	Name *string `pulumi:"name"`
	// version of environment.
	Version *string `pulumi:"version"`
}

// Environment information
type ComputeInstanceEnvironmentInfoResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceEnvironmentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceEnvironmentInfoResponse)(nil)).Elem()
}

func (o ComputeInstanceEnvironmentInfoResponseOutput) ToComputeInstanceEnvironmentInfoResponseOutput() ComputeInstanceEnvironmentInfoResponseOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponseOutput) ToComputeInstanceEnvironmentInfoResponseOutputWithContext(ctx context.Context) ComputeInstanceEnvironmentInfoResponseOutput {
	return o
}

// name of environment.
func (o ComputeInstanceEnvironmentInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceEnvironmentInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// version of environment.
func (o ComputeInstanceEnvironmentInfoResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceEnvironmentInfoResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComputeInstanceEnvironmentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceEnvironmentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceEnvironmentInfoResponse)(nil)).Elem()
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) ToComputeInstanceEnvironmentInfoResponsePtrOutput() ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) ToComputeInstanceEnvironmentInfoResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Elem() ComputeInstanceEnvironmentInfoResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) ComputeInstanceEnvironmentInfoResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceEnvironmentInfoResponse
		return ret
	}).(ComputeInstanceEnvironmentInfoResponseOutput)
}

// name of environment.
func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// version of environment.
func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The last operation on ComputeInstance.
type ComputeInstanceLastOperationResponse struct {
	// Name of the last operation.
	OperationName *string `pulumi:"operationName"`
	// Operation status.
	OperationStatus *string `pulumi:"operationStatus"`
	// Time of the last operation.
	OperationTime *string `pulumi:"operationTime"`
	// Trigger of operation.
	OperationTrigger *string `pulumi:"operationTrigger"`
}

// The last operation on ComputeInstance.
type ComputeInstanceLastOperationResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceLastOperationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceLastOperationResponse)(nil)).Elem()
}

func (o ComputeInstanceLastOperationResponseOutput) ToComputeInstanceLastOperationResponseOutput() ComputeInstanceLastOperationResponseOutput {
	return o
}

func (o ComputeInstanceLastOperationResponseOutput) ToComputeInstanceLastOperationResponseOutputWithContext(ctx context.Context) ComputeInstanceLastOperationResponseOutput {
	return o
}

// Name of the last operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// Operation status.
func (o ComputeInstanceLastOperationResponseOutput) OperationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationStatus }).(pulumi.StringPtrOutput)
}

// Time of the last operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationTime }).(pulumi.StringPtrOutput)
}

// Trigger of operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationTrigger }).(pulumi.StringPtrOutput)
}

type ComputeInstanceLastOperationResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceLastOperationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceLastOperationResponse)(nil)).Elem()
}

func (o ComputeInstanceLastOperationResponsePtrOutput) ToComputeInstanceLastOperationResponsePtrOutput() ComputeInstanceLastOperationResponsePtrOutput {
	return o
}

func (o ComputeInstanceLastOperationResponsePtrOutput) ToComputeInstanceLastOperationResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceLastOperationResponsePtrOutput {
	return o
}

func (o ComputeInstanceLastOperationResponsePtrOutput) Elem() ComputeInstanceLastOperationResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) ComputeInstanceLastOperationResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceLastOperationResponse
		return ret
	}).(ComputeInstanceLastOperationResponseOutput)
}

// Name of the last operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// Operation status.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationStatus
	}).(pulumi.StringPtrOutput)
}

// Time of the last operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationTime
	}).(pulumi.StringPtrOutput)
}

// Trigger of operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationTrigger
	}).(pulumi.StringPtrOutput)
}

// Compute Instance properties
type ComputeInstanceProperties struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// Specifies settings for autologger.
	AutologgerSettings *ComputeInstanceAutologgerSettings `pulumi:"autologgerSettings"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// List of Custom Services added to the compute.
	CustomServices []CustomService `pulumi:"customServices"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Enable Auto OS Patching. Possible values are: true, false.
	EnableOSPatching *bool `pulumi:"enableOSPatching"`
	// Enable root access. Possible values are: true, false.
	EnableRootAccess *bool `pulumi:"enableRootAccess"`
	// Enable SSO (single sign on). Possible values are: true, false.
	EnableSSO *bool `pulumi:"enableSSO"`
	// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
	IdleTimeBeforeShutdown *string `pulumi:"idleTimeBeforeShutdown"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettings `pulumi:"personalComputeInstanceSettings"`
	// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
	ReleaseQuotaOnStop *bool `pulumi:"releaseQuotaOnStop"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedules `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScripts `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettings `pulumi:"sshSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstanceProperties
func (val *ComputeInstanceProperties) Defaults() *ComputeInstanceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	if tmp.EnableOSPatching == nil {
		enableOSPatching_ := false
		tmp.EnableOSPatching = &enableOSPatching_
	}
	if tmp.EnableRootAccess == nil {
		enableRootAccess_ := true
		tmp.EnableRootAccess = &enableRootAccess_
	}
	if tmp.EnableSSO == nil {
		enableSSO_ := true
		tmp.EnableSSO = &enableSSO_
	}
	if tmp.ReleaseQuotaOnStop == nil {
		releaseQuotaOnStop_ := false
		tmp.ReleaseQuotaOnStop = &releaseQuotaOnStop_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// ComputeInstancePropertiesInput is an input type that accepts ComputeInstancePropertiesArgs and ComputeInstancePropertiesOutput values.
// You can construct a concrete instance of `ComputeInstancePropertiesInput` via:
//
//	ComputeInstancePropertiesArgs{...}
type ComputeInstancePropertiesInput interface {
	pulumi.Input

	ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput
	ToComputeInstancePropertiesOutputWithContext(context.Context) ComputeInstancePropertiesOutput
}

// Compute Instance properties
type ComputeInstancePropertiesArgs struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy pulumi.StringPtrInput `pulumi:"applicationSharingPolicy"`
	// Specifies settings for autologger.
	AutologgerSettings ComputeInstanceAutologgerSettingsPtrInput `pulumi:"autologgerSettings"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType pulumi.StringPtrInput `pulumi:"computeInstanceAuthorizationType"`
	// List of Custom Services added to the compute.
	CustomServices CustomServiceArrayInput `pulumi:"customServices"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp pulumi.BoolPtrInput `pulumi:"enableNodePublicIp"`
	// Enable Auto OS Patching. Possible values are: true, false.
	EnableOSPatching pulumi.BoolPtrInput `pulumi:"enableOSPatching"`
	// Enable root access. Possible values are: true, false.
	EnableRootAccess pulumi.BoolPtrInput `pulumi:"enableRootAccess"`
	// Enable SSO (single sign on). Possible values are: true, false.
	EnableSSO pulumi.BoolPtrInput `pulumi:"enableSSO"`
	// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
	IdleTimeBeforeShutdown pulumi.StringPtrInput `pulumi:"idleTimeBeforeShutdown"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings PersonalComputeInstanceSettingsPtrInput `pulumi:"personalComputeInstanceSettings"`
	// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
	ReleaseQuotaOnStop pulumi.BoolPtrInput `pulumi:"releaseQuotaOnStop"`
	// The list of schedules to be applied on the computes.
	Schedules ComputeSchedulesPtrInput `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts SetupScriptsPtrInput `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings ComputeInstanceSshSettingsPtrInput `pulumi:"sshSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet ResourceIdPtrInput `pulumi:"subnet"`
	// Virtual Machine Size
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstancePropertiesArgs
func (val *ComputeInstancePropertiesArgs) Defaults() *ComputeInstancePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		tmp.ApplicationSharingPolicy = pulumi.StringPtr("Shared")
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		tmp.ComputeInstanceAuthorizationType = pulumi.StringPtr("personal")
	}
	if tmp.EnableOSPatching == nil {
		tmp.EnableOSPatching = pulumi.BoolPtr(false)
	}
	if tmp.EnableRootAccess == nil {
		tmp.EnableRootAccess = pulumi.BoolPtr(true)
	}
	if tmp.EnableSSO == nil {
		tmp.EnableSSO = pulumi.BoolPtr(true)
	}
	if tmp.ReleaseQuotaOnStop == nil {
		tmp.ReleaseQuotaOnStop = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (ComputeInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceProperties)(nil)).Elem()
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput {
	return i.ToComputeInstancePropertiesOutputWithContext(context.Background())
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesOutputWithContext(ctx context.Context) ComputeInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesOutput)
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return i.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesOutput).ToComputeInstancePropertiesPtrOutputWithContext(ctx)
}

// ComputeInstancePropertiesPtrInput is an input type that accepts ComputeInstancePropertiesArgs, ComputeInstancePropertiesPtr and ComputeInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `ComputeInstancePropertiesPtrInput` via:
//
//	        ComputeInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type ComputeInstancePropertiesPtrInput interface {
	pulumi.Input

	ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput
	ToComputeInstancePropertiesPtrOutputWithContext(context.Context) ComputeInstancePropertiesPtrOutput
}

type computeInstancePropertiesPtrType ComputeInstancePropertiesArgs

func ComputeInstancePropertiesPtr(v *ComputeInstancePropertiesArgs) ComputeInstancePropertiesPtrInput {
	return (*computeInstancePropertiesPtrType)(v)
}

func (*computeInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceProperties)(nil)).Elem()
}

func (i *computeInstancePropertiesPtrType) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return i.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *computeInstancePropertiesPtrType) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesPtrOutput)
}

// Compute Instance properties
type ComputeInstancePropertiesOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceProperties)(nil)).Elem()
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput {
	return o
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesOutputWithContext(ctx context.Context) ComputeInstancePropertiesOutput {
	return o
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return o.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceProperties) *ComputeInstanceProperties {
		return &v
	}).(ComputeInstancePropertiesPtrOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.ApplicationSharingPolicy }).(pulumi.StringPtrOutput)
}

// Specifies settings for autologger.
func (o ComputeInstancePropertiesOutput) AutologgerSettings() ComputeInstanceAutologgerSettingsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ComputeInstanceAutologgerSettings { return v.AutologgerSettings }).(ComputeInstanceAutologgerSettingsPtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.ComputeInstanceAuthorizationType }).(pulumi.StringPtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesOutput) CustomServices() CustomServiceArrayOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) []CustomService { return v.CustomServices }).(CustomServiceArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Enable Auto OS Patching. Possible values are: true, false.
func (o ComputeInstancePropertiesOutput) EnableOSPatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.EnableOSPatching }).(pulumi.BoolPtrOutput)
}

// Enable root access. Possible values are: true, false.
func (o ComputeInstancePropertiesOutput) EnableRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.EnableRootAccess }).(pulumi.BoolPtrOutput)
}

// Enable SSO (single sign on). Possible values are: true, false.
func (o ComputeInstancePropertiesOutput) EnableSSO() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.EnableSSO }).(pulumi.BoolPtrOutput)
}

// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
func (o ComputeInstancePropertiesOutput) IdleTimeBeforeShutdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.IdleTimeBeforeShutdown }).(pulumi.StringPtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *PersonalComputeInstanceSettings {
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
func (o ComputeInstancePropertiesOutput) ReleaseQuotaOnStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.ReleaseQuotaOnStop }).(pulumi.BoolPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesOutput) Schedules() ComputeSchedulesPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ComputeSchedules { return v.Schedules }).(ComputeSchedulesPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesOutput) SetupScripts() SetupScriptsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *SetupScripts { return v.SetupScripts }).(SetupScriptsPtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesOutput) SshSettings() ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ComputeInstanceSshSettings { return v.SshSettings }).(ComputeInstanceSshSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ResourceId { return v.Subnet }).(ResourceIdPtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ComputeInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceProperties)(nil)).Elem()
}

func (o ComputeInstancePropertiesPtrOutput) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return o
}

func (o ComputeInstancePropertiesPtrOutput) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return o
}

func (o ComputeInstancePropertiesPtrOutput) Elem() ComputeInstancePropertiesOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) ComputeInstanceProperties {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceProperties
		return ret
	}).(ComputeInstancePropertiesOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesPtrOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSharingPolicy
	}).(pulumi.StringPtrOutput)
}

// Specifies settings for autologger.
func (o ComputeInstancePropertiesPtrOutput) AutologgerSettings() ComputeInstanceAutologgerSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ComputeInstanceAutologgerSettings {
		if v == nil {
			return nil
		}
		return v.AutologgerSettings
	}).(ComputeInstanceAutologgerSettingsPtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesPtrOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ComputeInstanceAuthorizationType
	}).(pulumi.StringPtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesPtrOutput) CustomServices() CustomServiceArrayOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) []CustomService {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(CustomServiceArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesPtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Enable Auto OS Patching. Possible values are: true, false.
func (o ComputeInstancePropertiesPtrOutput) EnableOSPatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOSPatching
	}).(pulumi.BoolPtrOutput)
}

// Enable root access. Possible values are: true, false.
func (o ComputeInstancePropertiesPtrOutput) EnableRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRootAccess
	}).(pulumi.BoolPtrOutput)
}

// Enable SSO (single sign on). Possible values are: true, false.
func (o ComputeInstancePropertiesPtrOutput) EnableSSO() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSSO
	}).(pulumi.BoolPtrOutput)
}

// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
func (o ComputeInstancePropertiesPtrOutput) IdleTimeBeforeShutdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeBeforeShutdown
	}).(pulumi.StringPtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesPtrOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *PersonalComputeInstanceSettings {
		if v == nil {
			return nil
		}
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
func (o ComputeInstancePropertiesPtrOutput) ReleaseQuotaOnStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.ReleaseQuotaOnStop
	}).(pulumi.BoolPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesPtrOutput) Schedules() ComputeSchedulesPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ComputeSchedules {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ComputeSchedulesPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesPtrOutput) SetupScripts() SetupScriptsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *SetupScripts {
		if v == nil {
			return nil
		}
		return v.SetupScripts
	}).(SetupScriptsPtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesPtrOutput) SshSettings() ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ComputeInstanceSshSettings {
		if v == nil {
			return nil
		}
		return v.SshSettings
	}).(ComputeInstanceSshSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesPtrOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ResourceId {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdPtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesPtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Compute Instance properties
type ComputeInstancePropertiesResponse struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// Describes available applications and their endpoints on this ComputeInstance.
	Applications []ComputeInstanceApplicationResponse `pulumi:"applications"`
	// Specifies settings for autologger.
	AutologgerSettings *ComputeInstanceAutologgerSettingsResponse `pulumi:"autologgerSettings"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// Describes all connectivity endpoints available for this ComputeInstance.
	ConnectivityEndpoints ComputeInstanceConnectivityEndpointsResponse `pulumi:"connectivityEndpoints"`
	// Describes informations of containers on this ComputeInstance.
	Containers []ComputeInstanceContainerResponse `pulumi:"containers"`
	// Describes information on user who created this ComputeInstance.
	CreatedBy ComputeInstanceCreatedByResponse `pulumi:"createdBy"`
	// List of Custom Services added to the compute.
	CustomServices []CustomServiceResponse `pulumi:"customServices"`
	// Describes informations of dataDisks on this ComputeInstance.
	DataDisks []ComputeInstanceDataDiskResponse `pulumi:"dataDisks"`
	// Describes informations of dataMounts on this ComputeInstance.
	DataMounts []ComputeInstanceDataMountResponse `pulumi:"dataMounts"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Enable Auto OS Patching. Possible values are: true, false.
	EnableOSPatching *bool `pulumi:"enableOSPatching"`
	// Enable root access. Possible values are: true, false.
	EnableRootAccess *bool `pulumi:"enableRootAccess"`
	// Enable SSO (single sign on). Possible values are: true, false.
	EnableSSO *bool `pulumi:"enableSSO"`
	// Collection of errors encountered on this ComputeInstance.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
	IdleTimeBeforeShutdown *string `pulumi:"idleTimeBeforeShutdown"`
	// The last operation on ComputeInstance.
	LastOperation ComputeInstanceLastOperationResponse `pulumi:"lastOperation"`
	// Returns metadata about the operating system image for this compute instance.
	OsImageMetadata ImageMetadataResponse `pulumi:"osImageMetadata"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettingsResponse `pulumi:"personalComputeInstanceSettings"`
	// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
	ReleaseQuotaOnStop *bool `pulumi:"releaseQuotaOnStop"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedulesResponse `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScriptsResponse `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettingsResponse `pulumi:"sshSettings"`
	// The current state of this ComputeInstance.
	State string `pulumi:"state"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// ComputeInstance version.
	Versions ComputeInstanceVersionResponse `pulumi:"versions"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstancePropertiesResponse
func (val *ComputeInstancePropertiesResponse) Defaults() *ComputeInstancePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	if tmp.EnableOSPatching == nil {
		enableOSPatching_ := false
		tmp.EnableOSPatching = &enableOSPatching_
	}
	if tmp.EnableRootAccess == nil {
		enableRootAccess_ := true
		tmp.EnableRootAccess = &enableRootAccess_
	}
	if tmp.EnableSSO == nil {
		enableSSO_ := true
		tmp.EnableSSO = &enableSSO_
	}
	if tmp.ReleaseQuotaOnStop == nil {
		releaseQuotaOnStop_ := false
		tmp.ReleaseQuotaOnStop = &releaseQuotaOnStop_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// Compute Instance properties
type ComputeInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstancePropertiesResponse)(nil)).Elem()
}

func (o ComputeInstancePropertiesResponseOutput) ToComputeInstancePropertiesResponseOutput() ComputeInstancePropertiesResponseOutput {
	return o
}

func (o ComputeInstancePropertiesResponseOutput) ToComputeInstancePropertiesResponseOutputWithContext(ctx context.Context) ComputeInstancePropertiesResponseOutput {
	return o
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesResponseOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.ApplicationSharingPolicy }).(pulumi.StringPtrOutput)
}

// Describes available applications and their endpoints on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Applications() ComputeInstanceApplicationResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceApplicationResponse { return v.Applications }).(ComputeInstanceApplicationResponseArrayOutput)
}

// Specifies settings for autologger.
func (o ComputeInstancePropertiesResponseOutput) AutologgerSettings() ComputeInstanceAutologgerSettingsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ComputeInstanceAutologgerSettingsResponse {
		return v.AutologgerSettings
	}).(ComputeInstanceAutologgerSettingsResponsePtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesResponseOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.ComputeInstanceAuthorizationType }).(pulumi.StringPtrOutput)
}

// Describes all connectivity endpoints available for this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) ConnectivityEndpoints() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceConnectivityEndpointsResponse {
		return v.ConnectivityEndpoints
	}).(ComputeInstanceConnectivityEndpointsResponseOutput)
}

// Describes informations of containers on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Containers() ComputeInstanceContainerResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceContainerResponse { return v.Containers }).(ComputeInstanceContainerResponseArrayOutput)
}

// Describes information on user who created this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) CreatedBy() ComputeInstanceCreatedByResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceCreatedByResponse { return v.CreatedBy }).(ComputeInstanceCreatedByResponseOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesResponseOutput) CustomServices() CustomServiceResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []CustomServiceResponse { return v.CustomServices }).(CustomServiceResponseArrayOutput)
}

// Describes informations of dataDisks on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) DataDisks() ComputeInstanceDataDiskResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceDataDiskResponse { return v.DataDisks }).(ComputeInstanceDataDiskResponseArrayOutput)
}

// Describes informations of dataMounts on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) DataMounts() ComputeInstanceDataMountResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceDataMountResponse { return v.DataMounts }).(ComputeInstanceDataMountResponseArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesResponseOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Enable Auto OS Patching. Possible values are: true, false.
func (o ComputeInstancePropertiesResponseOutput) EnableOSPatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.EnableOSPatching }).(pulumi.BoolPtrOutput)
}

// Enable root access. Possible values are: true, false.
func (o ComputeInstancePropertiesResponseOutput) EnableRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.EnableRootAccess }).(pulumi.BoolPtrOutput)
}

// Enable SSO (single sign on). Possible values are: true, false.
func (o ComputeInstancePropertiesResponseOutput) EnableSSO() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.EnableSSO }).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ErrorResponseResponse { return v.Errors }).(ErrorResponseResponseArrayOutput)
}

// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
func (o ComputeInstancePropertiesResponseOutput) IdleTimeBeforeShutdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.IdleTimeBeforeShutdown }).(pulumi.StringPtrOutput)
}

// The last operation on ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) LastOperation() ComputeInstanceLastOperationResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceLastOperationResponse { return v.LastOperation }).(ComputeInstanceLastOperationResponseOutput)
}

// Returns metadata about the operating system image for this compute instance.
func (o ComputeInstancePropertiesResponseOutput) OsImageMetadata() ImageMetadataResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ImageMetadataResponse { return v.OsImageMetadata }).(ImageMetadataResponseOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesResponseOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *PersonalComputeInstanceSettingsResponse {
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsResponsePtrOutput)
}

// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
func (o ComputeInstancePropertiesResponseOutput) ReleaseQuotaOnStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.ReleaseQuotaOnStop }).(pulumi.BoolPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesResponseOutput) Schedules() ComputeSchedulesResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ComputeSchedulesResponse { return v.Schedules }).(ComputeSchedulesResponsePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesResponseOutput) SetupScripts() SetupScriptsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *SetupScriptsResponse { return v.SetupScripts }).(SetupScriptsResponsePtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesResponseOutput) SshSettings() ComputeInstanceSshSettingsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ComputeInstanceSshSettingsResponse { return v.SshSettings }).(ComputeInstanceSshSettingsResponsePtrOutput)
}

// The current state of this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesResponseOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ResourceIdResponse { return v.Subnet }).(ResourceIdResponsePtrOutput)
}

// ComputeInstance version.
func (o ComputeInstancePropertiesResponseOutput) Versions() ComputeInstanceVersionResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceVersionResponse { return v.Versions }).(ComputeInstanceVersionResponseOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ComputeInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstancePropertiesResponse)(nil)).Elem()
}

func (o ComputeInstancePropertiesResponsePtrOutput) ToComputeInstancePropertiesResponsePtrOutput() ComputeInstancePropertiesResponsePtrOutput {
	return o
}

func (o ComputeInstancePropertiesResponsePtrOutput) ToComputeInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesResponsePtrOutput {
	return o
}

func (o ComputeInstancePropertiesResponsePtrOutput) Elem() ComputeInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) ComputeInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstancePropertiesResponse
		return ret
	}).(ComputeInstancePropertiesResponseOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesResponsePtrOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSharingPolicy
	}).(pulumi.StringPtrOutput)
}

// Describes available applications and their endpoints on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Applications() ComputeInstanceApplicationResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceApplicationResponse {
		if v == nil {
			return nil
		}
		return v.Applications
	}).(ComputeInstanceApplicationResponseArrayOutput)
}

// Specifies settings for autologger.
func (o ComputeInstancePropertiesResponsePtrOutput) AutologgerSettings() ComputeInstanceAutologgerSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceAutologgerSettingsResponse {
		if v == nil {
			return nil
		}
		return v.AutologgerSettings
	}).(ComputeInstanceAutologgerSettingsResponsePtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesResponsePtrOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputeInstanceAuthorizationType
	}).(pulumi.StringPtrOutput)
}

// Describes all connectivity endpoints available for this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) ConnectivityEndpoints() ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceConnectivityEndpointsResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectivityEndpoints
	}).(ComputeInstanceConnectivityEndpointsResponsePtrOutput)
}

// Describes informations of containers on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Containers() ComputeInstanceContainerResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceContainerResponse {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ComputeInstanceContainerResponseArrayOutput)
}

// Describes information on user who created this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) CreatedBy() ComputeInstanceCreatedByResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceCreatedByResponse {
		if v == nil {
			return nil
		}
		return &v.CreatedBy
	}).(ComputeInstanceCreatedByResponsePtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesResponsePtrOutput) CustomServices() CustomServiceResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []CustomServiceResponse {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(CustomServiceResponseArrayOutput)
}

// Describes informations of dataDisks on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) DataDisks() ComputeInstanceDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(ComputeInstanceDataDiskResponseArrayOutput)
}

// Describes informations of dataMounts on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) DataMounts() ComputeInstanceDataMountResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceDataMountResponse {
		if v == nil {
			return nil
		}
		return v.DataMounts
	}).(ComputeInstanceDataMountResponseArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesResponsePtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Enable Auto OS Patching. Possible values are: true, false.
func (o ComputeInstancePropertiesResponsePtrOutput) EnableOSPatching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOSPatching
	}).(pulumi.BoolPtrOutput)
}

// Enable root access. Possible values are: true, false.
func (o ComputeInstancePropertiesResponsePtrOutput) EnableRootAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRootAccess
	}).(pulumi.BoolPtrOutput)
}

// Enable SSO (single sign on). Possible values are: true, false.
func (o ComputeInstancePropertiesResponsePtrOutput) EnableSSO() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSSO
	}).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ErrorResponseResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorResponseResponseArrayOutput)
}

// Stops compute instance after user defined period of inactivity. Time is defined in ISO8601 format. Minimum is 15 min, maximum is 3 days.
func (o ComputeInstancePropertiesResponsePtrOutput) IdleTimeBeforeShutdown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdleTimeBeforeShutdown
	}).(pulumi.StringPtrOutput)
}

// The last operation on ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) LastOperation() ComputeInstanceLastOperationResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceLastOperationResponse {
		if v == nil {
			return nil
		}
		return &v.LastOperation
	}).(ComputeInstanceLastOperationResponsePtrOutput)
}

// Returns metadata about the operating system image for this compute instance.
func (o ComputeInstancePropertiesResponsePtrOutput) OsImageMetadata() ImageMetadataResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ImageMetadataResponse {
		if v == nil {
			return nil
		}
		return &v.OsImageMetadata
	}).(ImageMetadataResponsePtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesResponsePtrOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *PersonalComputeInstanceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsResponsePtrOutput)
}

// Release quota if compute instance stopped. Possible values are: true - release quota if compute instance stopped. false - don't release quota when compute instance stopped.
func (o ComputeInstancePropertiesResponsePtrOutput) ReleaseQuotaOnStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ReleaseQuotaOnStop
	}).(pulumi.BoolPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesResponsePtrOutput) Schedules() ComputeSchedulesResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeSchedulesResponse {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ComputeSchedulesResponsePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesResponsePtrOutput) SetupScripts() SetupScriptsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *SetupScriptsResponse {
		if v == nil {
			return nil
		}
		return v.SetupScripts
	}).(SetupScriptsResponsePtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesResponsePtrOutput) SshSettings() ComputeInstanceSshSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceSshSettingsResponse {
		if v == nil {
			return nil
		}
		return v.SshSettings
	}).(ComputeInstanceSshSettingsResponsePtrOutput)
}

// The current state of this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesResponsePtrOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdResponsePtrOutput)
}

// ComputeInstance version.
func (o ComputeInstancePropertiesResponsePtrOutput) Versions() ComputeInstanceVersionResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceVersionResponse {
		if v == nil {
			return nil
		}
		return &v.Versions
	}).(ComputeInstanceVersionResponsePtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstanceResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of ComputeInstance
	Properties *ComputeInstancePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstanceResponse
func (val *ComputeInstanceResponse) Defaults() *ComputeInstanceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// An Azure Machine Learning compute instance.
type ComputeInstanceResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceResponse)(nil)).Elem()
}

func (o ComputeInstanceResponseOutput) ToComputeInstanceResponseOutput() ComputeInstanceResponseOutput {
	return o
}

func (o ComputeInstanceResponseOutput) ToComputeInstanceResponseOutputWithContext(ctx context.Context) ComputeInstanceResponseOutput {
	return o
}

// Location for the underlying compute
func (o ComputeInstanceResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstanceResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o ComputeInstanceResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstanceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstanceResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o ComputeInstanceResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o ComputeInstanceResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of ComputeInstance
func (o ComputeInstanceResponseOutput) Properties() ComputeInstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *ComputeInstancePropertiesResponse { return v.Properties }).(ComputeInstancePropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o ComputeInstanceResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o ComputeInstanceResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstanceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettings struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettings
func (val *ComputeInstanceSshSettings) Defaults() *ComputeInstanceSshSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// ComputeInstanceSshSettingsInput is an input type that accepts ComputeInstanceSshSettingsArgs and ComputeInstanceSshSettingsOutput values.
// You can construct a concrete instance of `ComputeInstanceSshSettingsInput` via:
//
//	ComputeInstanceSshSettingsArgs{...}
type ComputeInstanceSshSettingsInput interface {
	pulumi.Input

	ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput
	ToComputeInstanceSshSettingsOutputWithContext(context.Context) ComputeInstanceSshSettingsOutput
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsArgs struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey pulumi.StringPtrInput `pulumi:"adminPublicKey"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess pulumi.StringPtrInput `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettingsArgs
func (val *ComputeInstanceSshSettingsArgs) Defaults() *ComputeInstanceSshSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		tmp.SshPublicAccess = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (ComputeInstanceSshSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettings)(nil)).Elem()
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput {
	return i.ToComputeInstanceSshSettingsOutputWithContext(context.Background())
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsOutput)
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return i.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsOutput).ToComputeInstanceSshSettingsPtrOutputWithContext(ctx)
}

// ComputeInstanceSshSettingsPtrInput is an input type that accepts ComputeInstanceSshSettingsArgs, ComputeInstanceSshSettingsPtr and ComputeInstanceSshSettingsPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceSshSettingsPtrInput` via:
//
//	        ComputeInstanceSshSettingsArgs{...}
//
//	or:
//
//	        nil
type ComputeInstanceSshSettingsPtrInput interface {
	pulumi.Input

	ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput
	ToComputeInstanceSshSettingsPtrOutputWithContext(context.Context) ComputeInstanceSshSettingsPtrOutput
}

type computeInstanceSshSettingsPtrType ComputeInstanceSshSettingsArgs

func ComputeInstanceSshSettingsPtr(v *ComputeInstanceSshSettingsArgs) ComputeInstanceSshSettingsPtrInput {
	return (*computeInstanceSshSettingsPtrType)(v)
}

func (*computeInstanceSshSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettings)(nil)).Elem()
}

func (i *computeInstanceSshSettingsPtrType) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return i.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (i *computeInstanceSshSettingsPtrType) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettings)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput {
	return o
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsOutput {
	return o
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return o.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceSshSettings) *ComputeInstanceSshSettings {
		return &v
	}).(ComputeInstanceSshSettingsPtrOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettings) *string { return v.AdminPublicKey }).(pulumi.StringPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettings) *string { return v.SshPublicAccess }).(pulumi.StringPtrOutput)
}

type ComputeInstanceSshSettingsPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettings)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsPtrOutput) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsPtrOutput) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsPtrOutput) Elem() ComputeInstanceSshSettingsOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) ComputeInstanceSshSettings {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceSshSettings
		return ret
	}).(ComputeInstanceSshSettingsOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsPtrOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) *string {
		if v == nil {
			return nil
		}
		return v.AdminPublicKey
	}).(pulumi.StringPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsPtrOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsResponse struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// Describes the admin user name.
	AdminUserName string `pulumi:"adminUserName"`
	// Describes the port for connecting through SSH.
	SshPort int `pulumi:"sshPort"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettingsResponse
func (val *ComputeInstanceSshSettingsResponse) Defaults() *ComputeInstanceSshSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsResponseOutput) ToComputeInstanceSshSettingsResponseOutput() ComputeInstanceSshSettingsResponseOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponseOutput) ToComputeInstanceSshSettingsResponseOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsResponseOutput {
	return o
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsResponseOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) *string { return v.AdminPublicKey }).(pulumi.StringPtrOutput)
}

// Describes the admin user name.
func (o ComputeInstanceSshSettingsResponseOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshSettingsResponseOutput) SshPort() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) int { return v.SshPort }).(pulumi.IntOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsResponseOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) *string { return v.SshPublicAccess }).(pulumi.StringPtrOutput)
}

type ComputeInstanceSshSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) ToComputeInstanceSshSettingsResponsePtrOutput() ComputeInstanceSshSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) ToComputeInstanceSshSettingsResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) Elem() ComputeInstanceSshSettingsResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) ComputeInstanceSshSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceSshSettingsResponse
		return ret
	}).(ComputeInstanceSshSettingsResponseOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsResponsePtrOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPublicKey
	}).(pulumi.StringPtrOutput)
}

// Describes the admin user name.
func (o ComputeInstanceSshSettingsResponsePtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshSettingsResponsePtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SshPort
	}).(pulumi.IntPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsResponsePtrOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Version of computeInstance.
type ComputeInstanceVersionResponse struct {
	// Runtime of compute instance.
	Runtime *string `pulumi:"runtime"`
}

// Version of computeInstance.
type ComputeInstanceVersionResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceVersionResponse)(nil)).Elem()
}

func (o ComputeInstanceVersionResponseOutput) ToComputeInstanceVersionResponseOutput() ComputeInstanceVersionResponseOutput {
	return o
}

func (o ComputeInstanceVersionResponseOutput) ToComputeInstanceVersionResponseOutputWithContext(ctx context.Context) ComputeInstanceVersionResponseOutput {
	return o
}

// Runtime of compute instance.
func (o ComputeInstanceVersionResponseOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceVersionResponse) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

type ComputeInstanceVersionResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceVersionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceVersionResponse)(nil)).Elem()
}

func (o ComputeInstanceVersionResponsePtrOutput) ToComputeInstanceVersionResponsePtrOutput() ComputeInstanceVersionResponsePtrOutput {
	return o
}

func (o ComputeInstanceVersionResponsePtrOutput) ToComputeInstanceVersionResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceVersionResponsePtrOutput {
	return o
}

func (o ComputeInstanceVersionResponsePtrOutput) Elem() ComputeInstanceVersionResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceVersionResponse) ComputeInstanceVersionResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceVersionResponse
		return ret
	}).(ComputeInstanceVersionResponseOutput)
}

// Runtime of compute instance.
func (o ComputeInstanceVersionResponsePtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceVersionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

type ComputeRecurrenceSchedule struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

// ComputeRecurrenceScheduleInput is an input type that accepts ComputeRecurrenceScheduleArgs and ComputeRecurrenceScheduleOutput values.
// You can construct a concrete instance of `ComputeRecurrenceScheduleInput` via:
//
//	ComputeRecurrenceScheduleArgs{...}
type ComputeRecurrenceScheduleInput interface {
	pulumi.Input

	ToComputeRecurrenceScheduleOutput() ComputeRecurrenceScheduleOutput
	ToComputeRecurrenceScheduleOutputWithContext(context.Context) ComputeRecurrenceScheduleOutput
}

type ComputeRecurrenceScheduleArgs struct {
	// [Required] List of hours for the schedule.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (ComputeRecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRecurrenceSchedule)(nil)).Elem()
}

func (i ComputeRecurrenceScheduleArgs) ToComputeRecurrenceScheduleOutput() ComputeRecurrenceScheduleOutput {
	return i.ToComputeRecurrenceScheduleOutputWithContext(context.Background())
}

func (i ComputeRecurrenceScheduleArgs) ToComputeRecurrenceScheduleOutputWithContext(ctx context.Context) ComputeRecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRecurrenceScheduleOutput)
}

func (i ComputeRecurrenceScheduleArgs) ToComputeRecurrenceSchedulePtrOutput() ComputeRecurrenceSchedulePtrOutput {
	return i.ToComputeRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i ComputeRecurrenceScheduleArgs) ToComputeRecurrenceSchedulePtrOutputWithContext(ctx context.Context) ComputeRecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRecurrenceScheduleOutput).ToComputeRecurrenceSchedulePtrOutputWithContext(ctx)
}

// ComputeRecurrenceSchedulePtrInput is an input type that accepts ComputeRecurrenceScheduleArgs, ComputeRecurrenceSchedulePtr and ComputeRecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `ComputeRecurrenceSchedulePtrInput` via:
//
//	        ComputeRecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type ComputeRecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToComputeRecurrenceSchedulePtrOutput() ComputeRecurrenceSchedulePtrOutput
	ToComputeRecurrenceSchedulePtrOutputWithContext(context.Context) ComputeRecurrenceSchedulePtrOutput
}

type computeRecurrenceSchedulePtrType ComputeRecurrenceScheduleArgs

func ComputeRecurrenceSchedulePtr(v *ComputeRecurrenceScheduleArgs) ComputeRecurrenceSchedulePtrInput {
	return (*computeRecurrenceSchedulePtrType)(v)
}

func (*computeRecurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRecurrenceSchedule)(nil)).Elem()
}

func (i *computeRecurrenceSchedulePtrType) ToComputeRecurrenceSchedulePtrOutput() ComputeRecurrenceSchedulePtrOutput {
	return i.ToComputeRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *computeRecurrenceSchedulePtrType) ToComputeRecurrenceSchedulePtrOutputWithContext(ctx context.Context) ComputeRecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRecurrenceSchedulePtrOutput)
}

type ComputeRecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (ComputeRecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRecurrenceSchedule)(nil)).Elem()
}

func (o ComputeRecurrenceScheduleOutput) ToComputeRecurrenceScheduleOutput() ComputeRecurrenceScheduleOutput {
	return o
}

func (o ComputeRecurrenceScheduleOutput) ToComputeRecurrenceScheduleOutputWithContext(ctx context.Context) ComputeRecurrenceScheduleOutput {
	return o
}

func (o ComputeRecurrenceScheduleOutput) ToComputeRecurrenceSchedulePtrOutput() ComputeRecurrenceSchedulePtrOutput {
	return o.ToComputeRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o ComputeRecurrenceScheduleOutput) ToComputeRecurrenceSchedulePtrOutputWithContext(ctx context.Context) ComputeRecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeRecurrenceSchedule) *ComputeRecurrenceSchedule {
		return &v
	}).(ComputeRecurrenceSchedulePtrOutput)
}

// [Required] List of hours for the schedule.
func (o ComputeRecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o ComputeRecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o ComputeRecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o ComputeRecurrenceScheduleOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceSchedule) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type ComputeRecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (ComputeRecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRecurrenceSchedule)(nil)).Elem()
}

func (o ComputeRecurrenceSchedulePtrOutput) ToComputeRecurrenceSchedulePtrOutput() ComputeRecurrenceSchedulePtrOutput {
	return o
}

func (o ComputeRecurrenceSchedulePtrOutput) ToComputeRecurrenceSchedulePtrOutputWithContext(ctx context.Context) ComputeRecurrenceSchedulePtrOutput {
	return o
}

func (o ComputeRecurrenceSchedulePtrOutput) Elem() ComputeRecurrenceScheduleOutput {
	return o.ApplyT(func(v *ComputeRecurrenceSchedule) ComputeRecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret ComputeRecurrenceSchedule
		return ret
	}).(ComputeRecurrenceScheduleOutput)
}

// [Required] List of hours for the schedule.
func (o ComputeRecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o ComputeRecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o ComputeRecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o ComputeRecurrenceSchedulePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type ComputeRecurrenceScheduleResponse struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

type ComputeRecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (ComputeRecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRecurrenceScheduleResponse)(nil)).Elem()
}

func (o ComputeRecurrenceScheduleResponseOutput) ToComputeRecurrenceScheduleResponseOutput() ComputeRecurrenceScheduleResponseOutput {
	return o
}

func (o ComputeRecurrenceScheduleResponseOutput) ToComputeRecurrenceScheduleResponseOutputWithContext(ctx context.Context) ComputeRecurrenceScheduleResponseOutput {
	return o
}

// [Required] List of hours for the schedule.
func (o ComputeRecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o ComputeRecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o ComputeRecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o ComputeRecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ComputeRecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type ComputeRecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeRecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRecurrenceScheduleResponse)(nil)).Elem()
}

func (o ComputeRecurrenceScheduleResponsePtrOutput) ToComputeRecurrenceScheduleResponsePtrOutput() ComputeRecurrenceScheduleResponsePtrOutput {
	return o
}

func (o ComputeRecurrenceScheduleResponsePtrOutput) ToComputeRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) ComputeRecurrenceScheduleResponsePtrOutput {
	return o
}

func (o ComputeRecurrenceScheduleResponsePtrOutput) Elem() ComputeRecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *ComputeRecurrenceScheduleResponse) ComputeRecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret ComputeRecurrenceScheduleResponse
		return ret
	}).(ComputeRecurrenceScheduleResponseOutput)
}

// [Required] List of hours for the schedule.
func (o ComputeRecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o ComputeRecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o ComputeRecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o ComputeRecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeRecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type ComputeRuntimeDto struct {
	SparkRuntimeVersion *string `pulumi:"sparkRuntimeVersion"`
}

// ComputeRuntimeDtoInput is an input type that accepts ComputeRuntimeDtoArgs and ComputeRuntimeDtoOutput values.
// You can construct a concrete instance of `ComputeRuntimeDtoInput` via:
//
//	ComputeRuntimeDtoArgs{...}
type ComputeRuntimeDtoInput interface {
	pulumi.Input

	ToComputeRuntimeDtoOutput() ComputeRuntimeDtoOutput
	ToComputeRuntimeDtoOutputWithContext(context.Context) ComputeRuntimeDtoOutput
}

type ComputeRuntimeDtoArgs struct {
	SparkRuntimeVersion pulumi.StringPtrInput `pulumi:"sparkRuntimeVersion"`
}

func (ComputeRuntimeDtoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRuntimeDto)(nil)).Elem()
}

func (i ComputeRuntimeDtoArgs) ToComputeRuntimeDtoOutput() ComputeRuntimeDtoOutput {
	return i.ToComputeRuntimeDtoOutputWithContext(context.Background())
}

func (i ComputeRuntimeDtoArgs) ToComputeRuntimeDtoOutputWithContext(ctx context.Context) ComputeRuntimeDtoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRuntimeDtoOutput)
}

func (i ComputeRuntimeDtoArgs) ToComputeRuntimeDtoPtrOutput() ComputeRuntimeDtoPtrOutput {
	return i.ToComputeRuntimeDtoPtrOutputWithContext(context.Background())
}

func (i ComputeRuntimeDtoArgs) ToComputeRuntimeDtoPtrOutputWithContext(ctx context.Context) ComputeRuntimeDtoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRuntimeDtoOutput).ToComputeRuntimeDtoPtrOutputWithContext(ctx)
}

// ComputeRuntimeDtoPtrInput is an input type that accepts ComputeRuntimeDtoArgs, ComputeRuntimeDtoPtr and ComputeRuntimeDtoPtrOutput values.
// You can construct a concrete instance of `ComputeRuntimeDtoPtrInput` via:
//
//	        ComputeRuntimeDtoArgs{...}
//
//	or:
//
//	        nil
type ComputeRuntimeDtoPtrInput interface {
	pulumi.Input

	ToComputeRuntimeDtoPtrOutput() ComputeRuntimeDtoPtrOutput
	ToComputeRuntimeDtoPtrOutputWithContext(context.Context) ComputeRuntimeDtoPtrOutput
}

type computeRuntimeDtoPtrType ComputeRuntimeDtoArgs

func ComputeRuntimeDtoPtr(v *ComputeRuntimeDtoArgs) ComputeRuntimeDtoPtrInput {
	return (*computeRuntimeDtoPtrType)(v)
}

func (*computeRuntimeDtoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRuntimeDto)(nil)).Elem()
}

func (i *computeRuntimeDtoPtrType) ToComputeRuntimeDtoPtrOutput() ComputeRuntimeDtoPtrOutput {
	return i.ToComputeRuntimeDtoPtrOutputWithContext(context.Background())
}

func (i *computeRuntimeDtoPtrType) ToComputeRuntimeDtoPtrOutputWithContext(ctx context.Context) ComputeRuntimeDtoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeRuntimeDtoPtrOutput)
}

type ComputeRuntimeDtoOutput struct{ *pulumi.OutputState }

func (ComputeRuntimeDtoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRuntimeDto)(nil)).Elem()
}

func (o ComputeRuntimeDtoOutput) ToComputeRuntimeDtoOutput() ComputeRuntimeDtoOutput {
	return o
}

func (o ComputeRuntimeDtoOutput) ToComputeRuntimeDtoOutputWithContext(ctx context.Context) ComputeRuntimeDtoOutput {
	return o
}

func (o ComputeRuntimeDtoOutput) ToComputeRuntimeDtoPtrOutput() ComputeRuntimeDtoPtrOutput {
	return o.ToComputeRuntimeDtoPtrOutputWithContext(context.Background())
}

func (o ComputeRuntimeDtoOutput) ToComputeRuntimeDtoPtrOutputWithContext(ctx context.Context) ComputeRuntimeDtoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeRuntimeDto) *ComputeRuntimeDto {
		return &v
	}).(ComputeRuntimeDtoPtrOutput)
}

func (o ComputeRuntimeDtoOutput) SparkRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeRuntimeDto) *string { return v.SparkRuntimeVersion }).(pulumi.StringPtrOutput)
}

type ComputeRuntimeDtoPtrOutput struct{ *pulumi.OutputState }

func (ComputeRuntimeDtoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRuntimeDto)(nil)).Elem()
}

func (o ComputeRuntimeDtoPtrOutput) ToComputeRuntimeDtoPtrOutput() ComputeRuntimeDtoPtrOutput {
	return o
}

func (o ComputeRuntimeDtoPtrOutput) ToComputeRuntimeDtoPtrOutputWithContext(ctx context.Context) ComputeRuntimeDtoPtrOutput {
	return o
}

func (o ComputeRuntimeDtoPtrOutput) Elem() ComputeRuntimeDtoOutput {
	return o.ApplyT(func(v *ComputeRuntimeDto) ComputeRuntimeDto {
		if v != nil {
			return *v
		}
		var ret ComputeRuntimeDto
		return ret
	}).(ComputeRuntimeDtoOutput)
}

func (o ComputeRuntimeDtoPtrOutput) SparkRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRuntimeDto) *string {
		if v == nil {
			return nil
		}
		return v.SparkRuntimeVersion
	}).(pulumi.StringPtrOutput)
}

type ComputeRuntimeDtoResponse struct {
	SparkRuntimeVersion *string `pulumi:"sparkRuntimeVersion"`
}

type ComputeRuntimeDtoResponseOutput struct{ *pulumi.OutputState }

func (ComputeRuntimeDtoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeRuntimeDtoResponse)(nil)).Elem()
}

func (o ComputeRuntimeDtoResponseOutput) ToComputeRuntimeDtoResponseOutput() ComputeRuntimeDtoResponseOutput {
	return o
}

func (o ComputeRuntimeDtoResponseOutput) ToComputeRuntimeDtoResponseOutputWithContext(ctx context.Context) ComputeRuntimeDtoResponseOutput {
	return o
}

func (o ComputeRuntimeDtoResponseOutput) SparkRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeRuntimeDtoResponse) *string { return v.SparkRuntimeVersion }).(pulumi.StringPtrOutput)
}

type ComputeRuntimeDtoResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeRuntimeDtoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeRuntimeDtoResponse)(nil)).Elem()
}

func (o ComputeRuntimeDtoResponsePtrOutput) ToComputeRuntimeDtoResponsePtrOutput() ComputeRuntimeDtoResponsePtrOutput {
	return o
}

func (o ComputeRuntimeDtoResponsePtrOutput) ToComputeRuntimeDtoResponsePtrOutputWithContext(ctx context.Context) ComputeRuntimeDtoResponsePtrOutput {
	return o
}

func (o ComputeRuntimeDtoResponsePtrOutput) Elem() ComputeRuntimeDtoResponseOutput {
	return o.ApplyT(func(v *ComputeRuntimeDtoResponse) ComputeRuntimeDtoResponse {
		if v != nil {
			return *v
		}
		var ret ComputeRuntimeDtoResponse
		return ret
	}).(ComputeRuntimeDtoResponseOutput)
}

func (o ComputeRuntimeDtoResponsePtrOutput) SparkRuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeRuntimeDtoResponse) *string {
		if v == nil {
			return nil
		}
		return v.SparkRuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedules struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopSchedule `pulumi:"computeStartStop"`
}

// ComputeSchedulesInput is an input type that accepts ComputeSchedulesArgs and ComputeSchedulesOutput values.
// You can construct a concrete instance of `ComputeSchedulesInput` via:
//
//	ComputeSchedulesArgs{...}
type ComputeSchedulesInput interface {
	pulumi.Input

	ToComputeSchedulesOutput() ComputeSchedulesOutput
	ToComputeSchedulesOutputWithContext(context.Context) ComputeSchedulesOutput
}

// The list of schedules to be applied on the computes
type ComputeSchedulesArgs struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop ComputeStartStopScheduleArrayInput `pulumi:"computeStartStop"`
}

func (ComputeSchedulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedules)(nil)).Elem()
}

func (i ComputeSchedulesArgs) ToComputeSchedulesOutput() ComputeSchedulesOutput {
	return i.ToComputeSchedulesOutputWithContext(context.Background())
}

func (i ComputeSchedulesArgs) ToComputeSchedulesOutputWithContext(ctx context.Context) ComputeSchedulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesOutput)
}

func (i ComputeSchedulesArgs) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return i.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (i ComputeSchedulesArgs) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesOutput).ToComputeSchedulesPtrOutputWithContext(ctx)
}

// ComputeSchedulesPtrInput is an input type that accepts ComputeSchedulesArgs, ComputeSchedulesPtr and ComputeSchedulesPtrOutput values.
// You can construct a concrete instance of `ComputeSchedulesPtrInput` via:
//
//	        ComputeSchedulesArgs{...}
//
//	or:
//
//	        nil
type ComputeSchedulesPtrInput interface {
	pulumi.Input

	ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput
	ToComputeSchedulesPtrOutputWithContext(context.Context) ComputeSchedulesPtrOutput
}

type computeSchedulesPtrType ComputeSchedulesArgs

func ComputeSchedulesPtr(v *ComputeSchedulesArgs) ComputeSchedulesPtrInput {
	return (*computeSchedulesPtrType)(v)
}

func (*computeSchedulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedules)(nil)).Elem()
}

func (i *computeSchedulesPtrType) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return i.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (i *computeSchedulesPtrType) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesPtrOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedulesOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedules)(nil)).Elem()
}

func (o ComputeSchedulesOutput) ToComputeSchedulesOutput() ComputeSchedulesOutput {
	return o
}

func (o ComputeSchedulesOutput) ToComputeSchedulesOutputWithContext(ctx context.Context) ComputeSchedulesOutput {
	return o
}

func (o ComputeSchedulesOutput) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return o.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulesOutput) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeSchedules) *ComputeSchedules {
		return &v
	}).(ComputeSchedulesPtrOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesOutput) ComputeStartStop() ComputeStartStopScheduleArrayOutput {
	return o.ApplyT(func(v ComputeSchedules) []ComputeStartStopSchedule { return v.ComputeStartStop }).(ComputeStartStopScheduleArrayOutput)
}

type ComputeSchedulesPtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedules)(nil)).Elem()
}

func (o ComputeSchedulesPtrOutput) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return o
}

func (o ComputeSchedulesPtrOutput) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return o
}

func (o ComputeSchedulesPtrOutput) Elem() ComputeSchedulesOutput {
	return o.ApplyT(func(v *ComputeSchedules) ComputeSchedules {
		if v != nil {
			return *v
		}
		var ret ComputeSchedules
		return ret
	}).(ComputeSchedulesOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesPtrOutput) ComputeStartStop() ComputeStartStopScheduleArrayOutput {
	return o.ApplyT(func(v *ComputeSchedules) []ComputeStartStopSchedule {
		if v == nil {
			return nil
		}
		return v.ComputeStartStop
	}).(ComputeStartStopScheduleArrayOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedulesResponse struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopScheduleResponse `pulumi:"computeStartStop"`
}

// The list of schedules to be applied on the computes
type ComputeSchedulesResponseOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulesResponse)(nil)).Elem()
}

func (o ComputeSchedulesResponseOutput) ToComputeSchedulesResponseOutput() ComputeSchedulesResponseOutput {
	return o
}

func (o ComputeSchedulesResponseOutput) ToComputeSchedulesResponseOutputWithContext(ctx context.Context) ComputeSchedulesResponseOutput {
	return o
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesResponseOutput) ComputeStartStop() ComputeStartStopScheduleResponseArrayOutput {
	return o.ApplyT(func(v ComputeSchedulesResponse) []ComputeStartStopScheduleResponse { return v.ComputeStartStop }).(ComputeStartStopScheduleResponseArrayOutput)
}

type ComputeSchedulesResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedulesResponse)(nil)).Elem()
}

func (o ComputeSchedulesResponsePtrOutput) ToComputeSchedulesResponsePtrOutput() ComputeSchedulesResponsePtrOutput {
	return o
}

func (o ComputeSchedulesResponsePtrOutput) ToComputeSchedulesResponsePtrOutputWithContext(ctx context.Context) ComputeSchedulesResponsePtrOutput {
	return o
}

func (o ComputeSchedulesResponsePtrOutput) Elem() ComputeSchedulesResponseOutput {
	return o.ApplyT(func(v *ComputeSchedulesResponse) ComputeSchedulesResponse {
		if v != nil {
			return *v
		}
		var ret ComputeSchedulesResponse
		return ret
	}).(ComputeSchedulesResponseOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesResponsePtrOutput) ComputeStartStop() ComputeStartStopScheduleResponseArrayOutput {
	return o.ApplyT(func(v *ComputeSchedulesResponse) []ComputeStartStopScheduleResponse {
		if v == nil {
			return nil
		}
		return v.ComputeStartStop
	}).(ComputeStartStopScheduleResponseArrayOutput)
}

// Compute start stop schedule properties
type ComputeStartStopSchedule struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *Cron `pulumi:"cron"`
	// Required if triggerType is Recurrence.
	Recurrence *Recurrence `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBase `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopSchedule
func (val *ComputeStartStopSchedule) Defaults() *ComputeStartStopSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// ComputeStartStopScheduleInput is an input type that accepts ComputeStartStopScheduleArgs and ComputeStartStopScheduleOutput values.
// You can construct a concrete instance of `ComputeStartStopScheduleInput` via:
//
//	ComputeStartStopScheduleArgs{...}
type ComputeStartStopScheduleInput interface {
	pulumi.Input

	ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput
	ToComputeStartStopScheduleOutputWithContext(context.Context) ComputeStartStopScheduleOutput
}

// Compute start stop schedule properties
type ComputeStartStopScheduleArgs struct {
	// [Required] The compute power action.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron CronPtrInput `pulumi:"cron"`
	// Required if triggerType is Recurrence.
	Recurrence RecurrencePtrInput `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule ScheduleBasePtrInput `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status pulumi.StringPtrInput `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType pulumi.StringPtrInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopScheduleArgs
func (val *ComputeStartStopScheduleArgs) Defaults() *ComputeStartStopScheduleArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ComputeStartStopScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopSchedule)(nil)).Elem()
}

func (i ComputeStartStopScheduleArgs) ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput {
	return i.ToComputeStartStopScheduleOutputWithContext(context.Background())
}

func (i ComputeStartStopScheduleArgs) ToComputeStartStopScheduleOutputWithContext(ctx context.Context) ComputeStartStopScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeStartStopScheduleOutput)
}

// ComputeStartStopScheduleArrayInput is an input type that accepts ComputeStartStopScheduleArray and ComputeStartStopScheduleArrayOutput values.
// You can construct a concrete instance of `ComputeStartStopScheduleArrayInput` via:
//
//	ComputeStartStopScheduleArray{ ComputeStartStopScheduleArgs{...} }
type ComputeStartStopScheduleArrayInput interface {
	pulumi.Input

	ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput
	ToComputeStartStopScheduleArrayOutputWithContext(context.Context) ComputeStartStopScheduleArrayOutput
}

type ComputeStartStopScheduleArray []ComputeStartStopScheduleInput

func (ComputeStartStopScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopSchedule)(nil)).Elem()
}

func (i ComputeStartStopScheduleArray) ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput {
	return i.ToComputeStartStopScheduleArrayOutputWithContext(context.Background())
}

func (i ComputeStartStopScheduleArray) ToComputeStartStopScheduleArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeStartStopScheduleArrayOutput)
}

// Compute start stop schedule properties
type ComputeStartStopScheduleOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopSchedule)(nil)).Elem()
}

func (o ComputeStartStopScheduleOutput) ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput {
	return o
}

func (o ComputeStartStopScheduleOutput) ToComputeStartStopScheduleOutputWithContext(ctx context.Context) ComputeStartStopScheduleOutput {
	return o
}

// [Required] The compute power action.
func (o ComputeStartStopScheduleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Required if triggerType is Cron.
func (o ComputeStartStopScheduleOutput) Cron() CronPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *Cron { return v.Cron }).(CronPtrOutput)
}

// Required if triggerType is Recurrence.
func (o ComputeStartStopScheduleOutput) Recurrence() RecurrencePtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *Recurrence { return v.Recurrence }).(RecurrencePtrOutput)
}

// [Deprecated] Not used any more.
func (o ComputeStartStopScheduleOutput) Schedule() ScheduleBasePtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *ScheduleBase { return v.Schedule }).(ScheduleBasePtrOutput)
}

// Is the schedule enabled or disabled?
func (o ComputeStartStopScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Required] The schedule trigger type.
func (o ComputeStartStopScheduleOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type ComputeStartStopScheduleArrayOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopSchedule)(nil)).Elem()
}

func (o ComputeStartStopScheduleArrayOutput) ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput {
	return o
}

func (o ComputeStartStopScheduleArrayOutput) ToComputeStartStopScheduleArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleArrayOutput {
	return o
}

func (o ComputeStartStopScheduleArrayOutput) Index(i pulumi.IntInput) ComputeStartStopScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeStartStopSchedule {
		return vs[0].([]ComputeStartStopSchedule)[vs[1].(int)]
	}).(ComputeStartStopScheduleOutput)
}

// Compute start stop schedule properties
type ComputeStartStopScheduleResponse struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *CronResponse `pulumi:"cron"`
	// A system assigned id for the schedule.
	Id string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus string `pulumi:"provisioningStatus"`
	// Required if triggerType is Recurrence.
	Recurrence *RecurrenceResponse `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBaseResponse `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopScheduleResponse
func (val *ComputeStartStopScheduleResponse) Defaults() *ComputeStartStopScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// Compute start stop schedule properties
type ComputeStartStopScheduleResponseOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopScheduleResponse)(nil)).Elem()
}

func (o ComputeStartStopScheduleResponseOutput) ToComputeStartStopScheduleResponseOutput() ComputeStartStopScheduleResponseOutput {
	return o
}

func (o ComputeStartStopScheduleResponseOutput) ToComputeStartStopScheduleResponseOutputWithContext(ctx context.Context) ComputeStartStopScheduleResponseOutput {
	return o
}

// [Required] The compute power action.
func (o ComputeStartStopScheduleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Required if triggerType is Cron.
func (o ComputeStartStopScheduleResponseOutput) Cron() CronResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *CronResponse { return v.Cron }).(CronResponsePtrOutput)
}

// A system assigned id for the schedule.
func (o ComputeStartStopScheduleResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The current deployment state of schedule.
func (o ComputeStartStopScheduleResponseOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) string { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Required if triggerType is Recurrence.
func (o ComputeStartStopScheduleResponseOutput) Recurrence() RecurrenceResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *RecurrenceResponse { return v.Recurrence }).(RecurrenceResponsePtrOutput)
}

// [Deprecated] Not used any more.
func (o ComputeStartStopScheduleResponseOutput) Schedule() ScheduleBaseResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *ScheduleBaseResponse { return v.Schedule }).(ScheduleBaseResponsePtrOutput)
}

// Is the schedule enabled or disabled?
func (o ComputeStartStopScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Required] The schedule trigger type.
func (o ComputeStartStopScheduleResponseOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type ComputeStartStopScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopScheduleResponse)(nil)).Elem()
}

func (o ComputeStartStopScheduleResponseArrayOutput) ToComputeStartStopScheduleResponseArrayOutput() ComputeStartStopScheduleResponseArrayOutput {
	return o
}

func (o ComputeStartStopScheduleResponseArrayOutput) ToComputeStartStopScheduleResponseArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleResponseArrayOutput {
	return o
}

func (o ComputeStartStopScheduleResponseArrayOutput) Index(i pulumi.IntInput) ComputeStartStopScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeStartStopScheduleResponse {
		return vs[0].([]ComputeStartStopScheduleResponse)[vs[1].(int)]
	}).(ComputeStartStopScheduleResponseOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirements struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettings `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettings `pulumi:"containerResourceRequests"`
}

// ContainerResourceRequirementsInput is an input type that accepts ContainerResourceRequirementsArgs and ContainerResourceRequirementsOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsInput` via:
//
//	ContainerResourceRequirementsArgs{...}
type ContainerResourceRequirementsInput interface {
	pulumi.Input

	ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput
	ToContainerResourceRequirementsOutputWithContext(context.Context) ContainerResourceRequirementsOutput
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsArgs struct {
	// Container resource limit info:
	ContainerResourceLimits ContainerResourceSettingsPtrInput `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests ContainerResourceSettingsPtrInput `pulumi:"containerResourceRequests"`
}

func (ContainerResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return i.ToContainerResourceRequirementsOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput)
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput).ToContainerResourceRequirementsPtrOutputWithContext(ctx)
}

// ContainerResourceRequirementsPtrInput is an input type that accepts ContainerResourceRequirementsArgs, ContainerResourceRequirementsPtr and ContainerResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsPtrInput` via:
//
//	        ContainerResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceRequirementsPtrInput interface {
	pulumi.Input

	ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput
	ToContainerResourceRequirementsPtrOutputWithContext(context.Context) ContainerResourceRequirementsPtrOutput
}

type containerResourceRequirementsPtrType ContainerResourceRequirementsArgs

func ContainerResourceRequirementsPtr(v *ContainerResourceRequirementsArgs) ContainerResourceRequirementsPtrInput {
	return (*containerResourceRequirementsPtrType)(v)
}

func (*containerResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceRequirements) *ContainerResourceRequirements {
		return &v
	}).(ContainerResourceRequirementsPtrOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceLimits }).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceRequests }).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) Elem() ContainerResourceRequirementsOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) ContainerResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirements
		return ret
	}).(ContainerResourceRequirementsOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponse struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettingsResponse `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettingsResponse `pulumi:"containerResourceRequests"`
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutput() ContainerResourceRequirementsResponseOutput {
	return o
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponseOutput {
	return o
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutput() ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) Elem() ContainerResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) ContainerResourceRequirementsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirementsResponse
		return ret
	}).(ContainerResourceRequirementsResponseOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceSettings struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

// ContainerResourceSettingsInput is an input type that accepts ContainerResourceSettingsArgs and ContainerResourceSettingsOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsInput` via:
//
//	ContainerResourceSettingsArgs{...}
type ContainerResourceSettingsInput interface {
	pulumi.Input

	ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput
	ToContainerResourceSettingsOutputWithContext(context.Context) ContainerResourceSettingsOutput
}

type ContainerResourceSettingsArgs struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu pulumi.StringPtrInput `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (ContainerResourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return i.ToContainerResourceSettingsOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput)
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput).ToContainerResourceSettingsPtrOutputWithContext(ctx)
}

// ContainerResourceSettingsPtrInput is an input type that accepts ContainerResourceSettingsArgs, ContainerResourceSettingsPtr and ContainerResourceSettingsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsPtrInput` via:
//
//	        ContainerResourceSettingsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceSettingsPtrInput interface {
	pulumi.Input

	ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput
	ToContainerResourceSettingsPtrOutputWithContext(context.Context) ContainerResourceSettingsPtrOutput
}

type containerResourceSettingsPtrType ContainerResourceSettingsArgs

func ContainerResourceSettingsPtr(v *ContainerResourceSettingsArgs) ContainerResourceSettingsPtrInput {
	return (*containerResourceSettingsPtrType)(v)
}

func (*containerResourceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceSettingsOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceSettings) *ContainerResourceSettings {
		return &v
	}).(ContainerResourceSettingsPtrOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) Elem() ContainerResourceSettingsOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) ContainerResourceSettings {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettings
		return ret
	}).(ContainerResourceSettingsOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponse struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

type ContainerResourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutput() ContainerResourceSettingsResponseOutput {
	return o
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutputWithContext(ctx context.Context) ContainerResourceSettingsResponseOutput {
	return o
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutput() ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) Elem() ContainerResourceSettingsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) ContainerResourceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettingsResponse
		return ret
	}).(ContainerResourceSettingsResponseOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type ContentSafetyEndpointDeploymentResourceProperties struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModel `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName *string               `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSku `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.ContentSafety'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

// ContentSafetyEndpointDeploymentResourcePropertiesInput is an input type that accepts ContentSafetyEndpointDeploymentResourcePropertiesArgs and ContentSafetyEndpointDeploymentResourcePropertiesOutput values.
// You can construct a concrete instance of `ContentSafetyEndpointDeploymentResourcePropertiesInput` via:
//
//	ContentSafetyEndpointDeploymentResourcePropertiesArgs{...}
type ContentSafetyEndpointDeploymentResourcePropertiesInput interface {
	pulumi.Input

	ToContentSafetyEndpointDeploymentResourcePropertiesOutput() ContentSafetyEndpointDeploymentResourcePropertiesOutput
	ToContentSafetyEndpointDeploymentResourcePropertiesOutputWithContext(context.Context) ContentSafetyEndpointDeploymentResourcePropertiesOutput
}

type ContentSafetyEndpointDeploymentResourcePropertiesArgs struct {
	// The failure reason if the creation failed.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelInput `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName pulumi.StringPtrInput        `pulumi:"raiPolicyName"`
	Sku           CognitiveServicesSkuPtrInput `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.ContentSafety'.
	Type pulumi.StringInput `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption pulumi.StringPtrInput `pulumi:"versionUpgradeOption"`
}

func (ContentSafetyEndpointDeploymentResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentSafetyEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (i ContentSafetyEndpointDeploymentResourcePropertiesArgs) ToContentSafetyEndpointDeploymentResourcePropertiesOutput() ContentSafetyEndpointDeploymentResourcePropertiesOutput {
	return i.ToContentSafetyEndpointDeploymentResourcePropertiesOutputWithContext(context.Background())
}

func (i ContentSafetyEndpointDeploymentResourcePropertiesArgs) ToContentSafetyEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) ContentSafetyEndpointDeploymentResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContentSafetyEndpointDeploymentResourcePropertiesOutput)
}

type ContentSafetyEndpointDeploymentResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ContentSafetyEndpointDeploymentResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentSafetyEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) ToContentSafetyEndpointDeploymentResourcePropertiesOutput() ContentSafetyEndpointDeploymentResourcePropertiesOutput {
	return o
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) ToContentSafetyEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) ContentSafetyEndpointDeploymentResourcePropertiesOutput {
	return o
}

// The failure reason if the creation failed.
func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) Model() EndpointDeploymentModelOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) EndpointDeploymentModel { return v.Model }).(EndpointDeploymentModelOutput)
}

// The name of RAI policy.
func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) Sku() CognitiveServicesSkuPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) *CognitiveServicesSku { return v.Sku }).(CognitiveServicesSkuPtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.ContentSafety'.
func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o ContentSafetyEndpointDeploymentResourcePropertiesOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourceProperties) *string { return v.VersionUpgradeOption }).(pulumi.StringPtrOutput)
}

type ContentSafetyEndpointDeploymentResourcePropertiesResponse struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelResponse `pulumi:"model"`
	// Read-only provision state status property.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of RAI policy.
	RaiPolicyName *string                       `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSkuResponse `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.ContentSafety'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

type ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContentSafetyEndpointDeploymentResourcePropertiesResponse)(nil)).Elem()
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) ToContentSafetyEndpointDeploymentResourcePropertiesResponseOutput() ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) ToContentSafetyEndpointDeploymentResourcePropertiesResponseOutputWithContext(ctx context.Context) ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

// The failure reason if the creation failed.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) Model() EndpointDeploymentModelResponseOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) EndpointDeploymentModelResponse {
		return v.Model
	}).(EndpointDeploymentModelResponseOutput)
}

// Read-only provision state status property.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of RAI policy.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) Sku() CognitiveServicesSkuResponsePtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) *CognitiveServicesSkuResponse {
		return v.Sku
	}).(CognitiveServicesSkuResponsePtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.ContentSafety'.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContentSafetyEndpointDeploymentResourcePropertiesResponse) *string {
		return v.VersionUpgradeOption
	}).(pulumi.StringPtrOutput)
}

type CosmosDbSettings struct {
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

// CosmosDbSettingsInput is an input type that accepts CosmosDbSettingsArgs and CosmosDbSettingsOutput values.
// You can construct a concrete instance of `CosmosDbSettingsInput` via:
//
//	CosmosDbSettingsArgs{...}
type CosmosDbSettingsInput interface {
	pulumi.Input

	ToCosmosDbSettingsOutput() CosmosDbSettingsOutput
	ToCosmosDbSettingsOutputWithContext(context.Context) CosmosDbSettingsOutput
}

type CosmosDbSettingsArgs struct {
	CollectionsThroughput pulumi.IntPtrInput `pulumi:"collectionsThroughput"`
}

func (CosmosDbSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return i.ToCosmosDbSettingsOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput)
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput).ToCosmosDbSettingsPtrOutputWithContext(ctx)
}

// CosmosDbSettingsPtrInput is an input type that accepts CosmosDbSettingsArgs, CosmosDbSettingsPtr and CosmosDbSettingsPtrOutput values.
// You can construct a concrete instance of `CosmosDbSettingsPtrInput` via:
//
//	        CosmosDbSettingsArgs{...}
//
//	or:
//
//	        nil
type CosmosDbSettingsPtrInput interface {
	pulumi.Input

	ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput
	ToCosmosDbSettingsPtrOutputWithContext(context.Context) CosmosDbSettingsPtrOutput
}

type cosmosDbSettingsPtrType CosmosDbSettingsArgs

func CosmosDbSettingsPtr(v *CosmosDbSettingsArgs) CosmosDbSettingsPtrInput {
	return (*cosmosDbSettingsPtrType)(v)
}

func (*cosmosDbSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsPtrOutput)
}

type CosmosDbSettingsOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosmosDbSettings) *CosmosDbSettings {
		return &v
	}).(CosmosDbSettingsPtrOutput)
}

func (o CosmosDbSettingsOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettings) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsPtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) Elem() CosmosDbSettingsOutput {
	return o.ApplyT(func(v *CosmosDbSettings) CosmosDbSettings {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettings
		return ret
	}).(CosmosDbSettingsOutput)
}

func (o CosmosDbSettingsPtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettings) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponse struct {
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

type CosmosDbSettingsResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutput() CosmosDbSettingsResponseOutput {
	return o
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutputWithContext(ctx context.Context) CosmosDbSettingsResponseOutput {
	return o
}

func (o CosmosDbSettingsResponseOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettingsResponse) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutput() CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutputWithContext(ctx context.Context) CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) Elem() CosmosDbSettingsResponseOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) CosmosDbSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettingsResponse
		return ret
	}).(CosmosDbSettingsResponseOutput)
}

func (o CosmosDbSettingsResponsePtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

type CreateMonitorAction struct {
	// Expected value is 'CreateMonitor'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines the monitor.
	MonitorDefinition MonitorDefinition `pulumi:"monitorDefinition"`
}

// CreateMonitorActionInput is an input type that accepts CreateMonitorActionArgs and CreateMonitorActionOutput values.
// You can construct a concrete instance of `CreateMonitorActionInput` via:
//
//	CreateMonitorActionArgs{...}
type CreateMonitorActionInput interface {
	pulumi.Input

	ToCreateMonitorActionOutput() CreateMonitorActionOutput
	ToCreateMonitorActionOutputWithContext(context.Context) CreateMonitorActionOutput
}

type CreateMonitorActionArgs struct {
	// Expected value is 'CreateMonitor'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines the monitor.
	MonitorDefinition MonitorDefinitionInput `pulumi:"monitorDefinition"`
}

func (CreateMonitorActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateMonitorAction)(nil)).Elem()
}

func (i CreateMonitorActionArgs) ToCreateMonitorActionOutput() CreateMonitorActionOutput {
	return i.ToCreateMonitorActionOutputWithContext(context.Background())
}

func (i CreateMonitorActionArgs) ToCreateMonitorActionOutputWithContext(ctx context.Context) CreateMonitorActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateMonitorActionOutput)
}

type CreateMonitorActionOutput struct{ *pulumi.OutputState }

func (CreateMonitorActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateMonitorAction)(nil)).Elem()
}

func (o CreateMonitorActionOutput) ToCreateMonitorActionOutput() CreateMonitorActionOutput {
	return o
}

func (o CreateMonitorActionOutput) ToCreateMonitorActionOutputWithContext(ctx context.Context) CreateMonitorActionOutput {
	return o
}

// Expected value is 'CreateMonitor'.
func (o CreateMonitorActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CreateMonitorAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines the monitor.
func (o CreateMonitorActionOutput) MonitorDefinition() MonitorDefinitionOutput {
	return o.ApplyT(func(v CreateMonitorAction) MonitorDefinition { return v.MonitorDefinition }).(MonitorDefinitionOutput)
}

type CreateMonitorActionResponse struct {
	// Expected value is 'CreateMonitor'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines the monitor.
	MonitorDefinition MonitorDefinitionResponse `pulumi:"monitorDefinition"`
}

type CreateMonitorActionResponseOutput struct{ *pulumi.OutputState }

func (CreateMonitorActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CreateMonitorActionResponse)(nil)).Elem()
}

func (o CreateMonitorActionResponseOutput) ToCreateMonitorActionResponseOutput() CreateMonitorActionResponseOutput {
	return o
}

func (o CreateMonitorActionResponseOutput) ToCreateMonitorActionResponseOutputWithContext(ctx context.Context) CreateMonitorActionResponseOutput {
	return o
}

// Expected value is 'CreateMonitor'.
func (o CreateMonitorActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CreateMonitorActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines the monitor.
func (o CreateMonitorActionResponseOutput) MonitorDefinition() MonitorDefinitionResponseOutput {
	return o.ApplyT(func(v CreateMonitorActionResponse) MonitorDefinitionResponse { return v.MonitorDefinition }).(MonitorDefinitionResponseOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type Cron struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Cron
func (val *Cron) Defaults() *Cron {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// CronInput is an input type that accepts CronArgs and CronOutput values.
// You can construct a concrete instance of `CronInput` via:
//
//	CronArgs{...}
type CronInput interface {
	pulumi.Input

	ToCronOutput() CronOutput
	ToCronOutputWithContext(context.Context) CronOutput
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronArgs struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronArgs
func (val *CronArgs) Defaults() *CronArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (CronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cron)(nil)).Elem()
}

func (i CronArgs) ToCronOutput() CronOutput {
	return i.ToCronOutputWithContext(context.Background())
}

func (i CronArgs) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronOutput)
}

func (i CronArgs) ToCronPtrOutput() CronPtrOutput {
	return i.ToCronPtrOutputWithContext(context.Background())
}

func (i CronArgs) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronOutput).ToCronPtrOutputWithContext(ctx)
}

// CronPtrInput is an input type that accepts CronArgs, CronPtr and CronPtrOutput values.
// You can construct a concrete instance of `CronPtrInput` via:
//
//	        CronArgs{...}
//
//	or:
//
//	        nil
type CronPtrInput interface {
	pulumi.Input

	ToCronPtrOutput() CronPtrOutput
	ToCronPtrOutputWithContext(context.Context) CronPtrOutput
}

type cronPtrType CronArgs

func CronPtr(v *CronArgs) CronPtrInput {
	return (*cronPtrType)(v)
}

func (*cronPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (i *cronPtrType) ToCronPtrOutput() CronPtrOutput {
	return i.ToCronPtrOutputWithContext(context.Background())
}

func (i *cronPtrType) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronOutput struct{ *pulumi.OutputState }

func (CronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cron)(nil)).Elem()
}

func (o CronOutput) ToCronOutput() CronOutput {
	return o
}

func (o CronOutput) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return o
}

func (o CronOutput) ToCronPtrOutput() CronPtrOutput {
	return o.ToCronPtrOutputWithContext(context.Background())
}

func (o CronOutput) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cron) *Cron {
		return &v
	}).(CronPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronPtrOutput struct{ *pulumi.OutputState }

func (CronPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (o CronPtrOutput) ToCronPtrOutput() CronPtrOutput {
	return o
}

func (o CronPtrOutput) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return o
}

func (o CronPtrOutput) Elem() CronOutput {
	return o.ApplyT(func(v *Cron) Cron {
		if v != nil {
			return *v
		}
		var ret Cron
		return ret
	}).(CronOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronResponse struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronResponse
func (val *CronResponse) Defaults() *CronResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronResponseOutput struct{ *pulumi.OutputState }

func (CronResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronResponse)(nil)).Elem()
}

func (o CronResponseOutput) ToCronResponseOutput() CronResponseOutput {
	return o
}

func (o CronResponseOutput) ToCronResponseOutputWithContext(ctx context.Context) CronResponseOutput {
	return o
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronResponseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronResponsePtrOutput struct{ *pulumi.OutputState }

func (CronResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronResponse)(nil)).Elem()
}

func (o CronResponsePtrOutput) ToCronResponsePtrOutput() CronResponsePtrOutput {
	return o
}

func (o CronResponsePtrOutput) ToCronResponsePtrOutputWithContext(ctx context.Context) CronResponsePtrOutput {
	return o
}

func (o CronResponsePtrOutput) Elem() CronResponseOutput {
	return o.ApplyT(func(v *CronResponse) CronResponse {
		if v != nil {
			return *v
		}
		var ret CronResponse
		return ret
	}).(CronResponseOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type CronTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTrigger
func (val *CronTrigger) Defaults() *CronTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// CronTriggerInput is an input type that accepts CronTriggerArgs and CronTriggerOutput values.
// You can construct a concrete instance of `CronTriggerInput` via:
//
//	CronTriggerArgs{...}
type CronTriggerInput interface {
	pulumi.Input

	ToCronTriggerOutput() CronTriggerOutput
	ToCronTriggerOutputWithContext(context.Context) CronTriggerOutput
}

type CronTriggerArgs struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTriggerArgs
func (val *CronTriggerArgs) Defaults() *CronTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (CronTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTrigger)(nil)).Elem()
}

func (i CronTriggerArgs) ToCronTriggerOutput() CronTriggerOutput {
	return i.ToCronTriggerOutputWithContext(context.Background())
}

func (i CronTriggerArgs) ToCronTriggerOutputWithContext(ctx context.Context) CronTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronTriggerOutput)
}

type CronTriggerOutput struct{ *pulumi.OutputState }

func (CronTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTrigger)(nil)).Elem()
}

func (o CronTriggerOutput) ToCronTriggerOutput() CronTriggerOutput {
	return o
}

func (o CronTriggerOutput) ToCronTriggerOutputWithContext(ctx context.Context) CronTriggerOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o CronTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronTriggerOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronTrigger) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o CronTriggerOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronTriggerOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Cron'.
func (o CronTriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v CronTrigger) string { return v.TriggerType }).(pulumi.StringOutput)
}

type CronTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTriggerResponse
func (val *CronTriggerResponse) Defaults() *CronTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type CronTriggerResponseOutput struct{ *pulumi.OutputState }

func (CronTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTriggerResponse)(nil)).Elem()
}

func (o CronTriggerResponseOutput) ToCronTriggerResponseOutput() CronTriggerResponseOutput {
	return o
}

func (o CronTriggerResponseOutput) ToCronTriggerResponseOutputWithContext(ctx context.Context) CronTriggerResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o CronTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronTriggerResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronTriggerResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o CronTriggerResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronTriggerResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Cron'.
func (o CronTriggerResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v CronTriggerResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// CustomForecastHorizonInput is an input type that accepts CustomForecastHorizonArgs and CustomForecastHorizonOutput values.
// You can construct a concrete instance of `CustomForecastHorizonInput` via:
//
//	CustomForecastHorizonArgs{...}
type CustomForecastHorizonInput interface {
	pulumi.Input

	ToCustomForecastHorizonOutput() CustomForecastHorizonOutput
	ToCustomForecastHorizonOutputWithContext(context.Context) CustomForecastHorizonOutput
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return i.ToCustomForecastHorizonOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput)
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput).ToCustomForecastHorizonPtrOutputWithContext(ctx)
}

// CustomForecastHorizonPtrInput is an input type that accepts CustomForecastHorizonArgs, CustomForecastHorizonPtr and CustomForecastHorizonPtrOutput values.
// You can construct a concrete instance of `CustomForecastHorizonPtrInput` via:
//
//	        CustomForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type CustomForecastHorizonPtrInput interface {
	pulumi.Input

	ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput
	ToCustomForecastHorizonPtrOutputWithContext(context.Context) CustomForecastHorizonPtrOutput
}

type customForecastHorizonPtrType CustomForecastHorizonArgs

func CustomForecastHorizonPtr(v *CustomForecastHorizonArgs) CustomForecastHorizonPtrInput {
	return (*customForecastHorizonPtrType)(v)
}

func (*customForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomForecastHorizon) *CustomForecastHorizon {
		return &v
	}).(CustomForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizon) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) Elem() CustomForecastHorizonOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) CustomForecastHorizon {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizon
		return ret
	}).(CustomForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutput() CustomForecastHorizonResponseOutput {
	return o
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutputWithContext(ctx context.Context) CustomForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutput() CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutputWithContext(ctx context.Context) CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) Elem() CustomForecastHorizonResponseOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) CustomForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizonResponse
		return ret
	}).(CustomForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Custom Keys credential object
type CustomKeys struct {
	Keys map[string]string `pulumi:"keys"`
}

// CustomKeysInput is an input type that accepts CustomKeysArgs and CustomKeysOutput values.
// You can construct a concrete instance of `CustomKeysInput` via:
//
//	CustomKeysArgs{...}
type CustomKeysInput interface {
	pulumi.Input

	ToCustomKeysOutput() CustomKeysOutput
	ToCustomKeysOutputWithContext(context.Context) CustomKeysOutput
}

// Custom Keys credential object
type CustomKeysArgs struct {
	Keys pulumi.StringMapInput `pulumi:"keys"`
}

func (CustomKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeys)(nil)).Elem()
}

func (i CustomKeysArgs) ToCustomKeysOutput() CustomKeysOutput {
	return i.ToCustomKeysOutputWithContext(context.Background())
}

func (i CustomKeysArgs) ToCustomKeysOutputWithContext(ctx context.Context) CustomKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomKeysOutput)
}

func (i CustomKeysArgs) ToCustomKeysPtrOutput() CustomKeysPtrOutput {
	return i.ToCustomKeysPtrOutputWithContext(context.Background())
}

func (i CustomKeysArgs) ToCustomKeysPtrOutputWithContext(ctx context.Context) CustomKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomKeysOutput).ToCustomKeysPtrOutputWithContext(ctx)
}

// CustomKeysPtrInput is an input type that accepts CustomKeysArgs, CustomKeysPtr and CustomKeysPtrOutput values.
// You can construct a concrete instance of `CustomKeysPtrInput` via:
//
//	        CustomKeysArgs{...}
//
//	or:
//
//	        nil
type CustomKeysPtrInput interface {
	pulumi.Input

	ToCustomKeysPtrOutput() CustomKeysPtrOutput
	ToCustomKeysPtrOutputWithContext(context.Context) CustomKeysPtrOutput
}

type customKeysPtrType CustomKeysArgs

func CustomKeysPtr(v *CustomKeysArgs) CustomKeysPtrInput {
	return (*customKeysPtrType)(v)
}

func (*customKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomKeys)(nil)).Elem()
}

func (i *customKeysPtrType) ToCustomKeysPtrOutput() CustomKeysPtrOutput {
	return i.ToCustomKeysPtrOutputWithContext(context.Background())
}

func (i *customKeysPtrType) ToCustomKeysPtrOutputWithContext(ctx context.Context) CustomKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomKeysPtrOutput)
}

// Custom Keys credential object
type CustomKeysOutput struct{ *pulumi.OutputState }

func (CustomKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeys)(nil)).Elem()
}

func (o CustomKeysOutput) ToCustomKeysOutput() CustomKeysOutput {
	return o
}

func (o CustomKeysOutput) ToCustomKeysOutputWithContext(ctx context.Context) CustomKeysOutput {
	return o
}

func (o CustomKeysOutput) ToCustomKeysPtrOutput() CustomKeysPtrOutput {
	return o.ToCustomKeysPtrOutputWithContext(context.Background())
}

func (o CustomKeysOutput) ToCustomKeysPtrOutputWithContext(ctx context.Context) CustomKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomKeys) *CustomKeys {
		return &v
	}).(CustomKeysPtrOutput)
}

func (o CustomKeysOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomKeys) map[string]string { return v.Keys }).(pulumi.StringMapOutput)
}

type CustomKeysPtrOutput struct{ *pulumi.OutputState }

func (CustomKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomKeys)(nil)).Elem()
}

func (o CustomKeysPtrOutput) ToCustomKeysPtrOutput() CustomKeysPtrOutput {
	return o
}

func (o CustomKeysPtrOutput) ToCustomKeysPtrOutputWithContext(ctx context.Context) CustomKeysPtrOutput {
	return o
}

func (o CustomKeysPtrOutput) Elem() CustomKeysOutput {
	return o.ApplyT(func(v *CustomKeys) CustomKeys {
		if v != nil {
			return *v
		}
		var ret CustomKeys
		return ret
	}).(CustomKeysOutput)
}

func (o CustomKeysPtrOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomKeys) map[string]string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringMapOutput)
}

// Custom Keys credential object
type CustomKeysResponse struct {
	Keys map[string]string `pulumi:"keys"`
}

// Custom Keys credential object
type CustomKeysResponseOutput struct{ *pulumi.OutputState }

func (CustomKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysResponse)(nil)).Elem()
}

func (o CustomKeysResponseOutput) ToCustomKeysResponseOutput() CustomKeysResponseOutput {
	return o
}

func (o CustomKeysResponseOutput) ToCustomKeysResponseOutputWithContext(ctx context.Context) CustomKeysResponseOutput {
	return o
}

func (o CustomKeysResponseOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomKeysResponse) map[string]string { return v.Keys }).(pulumi.StringMapOutput)
}

type CustomKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomKeysResponse)(nil)).Elem()
}

func (o CustomKeysResponsePtrOutput) ToCustomKeysResponsePtrOutput() CustomKeysResponsePtrOutput {
	return o
}

func (o CustomKeysResponsePtrOutput) ToCustomKeysResponsePtrOutputWithContext(ctx context.Context) CustomKeysResponsePtrOutput {
	return o
}

func (o CustomKeysResponsePtrOutput) Elem() CustomKeysResponseOutput {
	return o.ApplyT(func(v *CustomKeysResponse) CustomKeysResponse {
		if v != nil {
			return *v
		}
		var ret CustomKeysResponse
		return ret
	}).(CustomKeysResponseOutput)
}

func (o CustomKeysResponsePtrOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomKeysResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringMapOutput)
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'CustomKeys'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Custom Keys credential object
	Credentials    *CustomKeys `pulumi:"credentials"`
	ExpiryTime     *string     `pulumi:"expiryTime"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// CustomKeysWorkspaceConnectionPropertiesInput is an input type that accepts CustomKeysWorkspaceConnectionPropertiesArgs and CustomKeysWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `CustomKeysWorkspaceConnectionPropertiesInput` via:
//
//	CustomKeysWorkspaceConnectionPropertiesArgs{...}
type CustomKeysWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToCustomKeysWorkspaceConnectionPropertiesOutput() CustomKeysWorkspaceConnectionPropertiesOutput
	ToCustomKeysWorkspaceConnectionPropertiesOutputWithContext(context.Context) CustomKeysWorkspaceConnectionPropertiesOutput
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'CustomKeys'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Custom Keys credential object
	Credentials    CustomKeysPtrInput      `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput   `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput     `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input            `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (CustomKeysWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysWorkspaceConnectionProperties)(nil)).Elem()
}

func (i CustomKeysWorkspaceConnectionPropertiesArgs) ToCustomKeysWorkspaceConnectionPropertiesOutput() CustomKeysWorkspaceConnectionPropertiesOutput {
	return i.ToCustomKeysWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i CustomKeysWorkspaceConnectionPropertiesArgs) ToCustomKeysWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) CustomKeysWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomKeysWorkspaceConnectionPropertiesOutput)
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (CustomKeysWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysWorkspaceConnectionProperties)(nil)).Elem()
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) ToCustomKeysWorkspaceConnectionPropertiesOutput() CustomKeysWorkspaceConnectionPropertiesOutput {
	return o
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) ToCustomKeysWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) CustomKeysWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'CustomKeys'.
func (o CustomKeysWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o CustomKeysWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Custom Keys credential object
func (o CustomKeysWorkspaceConnectionPropertiesOutput) Credentials() CustomKeysPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) *CustomKeys { return v.Credentials }).(CustomKeysPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'CustomKeys'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string `pulumi:"category"`
	CreatedByWorkspaceArmId string  `pulumi:"createdByWorkspaceArmId"`
	// Custom Keys credential object
	Credentials *CustomKeysResponse `pulumi:"credentials"`
	ExpiryTime  *string             `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CustomKeysWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ToCustomKeysWorkspaceConnectionPropertiesResponseOutput() CustomKeysWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ToCustomKeysWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) CustomKeysWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'CustomKeys'.
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

// Custom Keys credential object
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Credentials() CustomKeysResponsePtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *CustomKeysResponse { return v.Credentials }).(CustomKeysResponsePtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type CustomMetricThreshold struct {
	// [Required] The user-defined metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// CustomMetricThresholdInput is an input type that accepts CustomMetricThresholdArgs and CustomMetricThresholdOutput values.
// You can construct a concrete instance of `CustomMetricThresholdInput` via:
//
//	CustomMetricThresholdArgs{...}
type CustomMetricThresholdInput interface {
	pulumi.Input

	ToCustomMetricThresholdOutput() CustomMetricThresholdOutput
	ToCustomMetricThresholdOutputWithContext(context.Context) CustomMetricThresholdOutput
}

type CustomMetricThresholdArgs struct {
	// [Required] The user-defined metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (CustomMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMetricThreshold)(nil)).Elem()
}

func (i CustomMetricThresholdArgs) ToCustomMetricThresholdOutput() CustomMetricThresholdOutput {
	return i.ToCustomMetricThresholdOutputWithContext(context.Background())
}

func (i CustomMetricThresholdArgs) ToCustomMetricThresholdOutputWithContext(ctx context.Context) CustomMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricThresholdOutput)
}

// CustomMetricThresholdArrayInput is an input type that accepts CustomMetricThresholdArray and CustomMetricThresholdArrayOutput values.
// You can construct a concrete instance of `CustomMetricThresholdArrayInput` via:
//
//	CustomMetricThresholdArray{ CustomMetricThresholdArgs{...} }
type CustomMetricThresholdArrayInput interface {
	pulumi.Input

	ToCustomMetricThresholdArrayOutput() CustomMetricThresholdArrayOutput
	ToCustomMetricThresholdArrayOutputWithContext(context.Context) CustomMetricThresholdArrayOutput
}

type CustomMetricThresholdArray []CustomMetricThresholdInput

func (CustomMetricThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomMetricThreshold)(nil)).Elem()
}

func (i CustomMetricThresholdArray) ToCustomMetricThresholdArrayOutput() CustomMetricThresholdArrayOutput {
	return i.ToCustomMetricThresholdArrayOutputWithContext(context.Background())
}

func (i CustomMetricThresholdArray) ToCustomMetricThresholdArrayOutputWithContext(ctx context.Context) CustomMetricThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMetricThresholdArrayOutput)
}

type CustomMetricThresholdOutput struct{ *pulumi.OutputState }

func (CustomMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMetricThreshold)(nil)).Elem()
}

func (o CustomMetricThresholdOutput) ToCustomMetricThresholdOutput() CustomMetricThresholdOutput {
	return o
}

func (o CustomMetricThresholdOutput) ToCustomMetricThresholdOutputWithContext(ctx context.Context) CustomMetricThresholdOutput {
	return o
}

// [Required] The user-defined metric to calculate.
func (o CustomMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CustomMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v CustomMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type CustomMetricThresholdArrayOutput struct{ *pulumi.OutputState }

func (CustomMetricThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomMetricThreshold)(nil)).Elem()
}

func (o CustomMetricThresholdArrayOutput) ToCustomMetricThresholdArrayOutput() CustomMetricThresholdArrayOutput {
	return o
}

func (o CustomMetricThresholdArrayOutput) ToCustomMetricThresholdArrayOutputWithContext(ctx context.Context) CustomMetricThresholdArrayOutput {
	return o
}

func (o CustomMetricThresholdArrayOutput) Index(i pulumi.IntInput) CustomMetricThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomMetricThreshold {
		return vs[0].([]CustomMetricThreshold)[vs[1].(int)]
	}).(CustomMetricThresholdOutput)
}

type CustomMetricThresholdResponse struct {
	// [Required] The user-defined metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type CustomMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (CustomMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMetricThresholdResponse)(nil)).Elem()
}

func (o CustomMetricThresholdResponseOutput) ToCustomMetricThresholdResponseOutput() CustomMetricThresholdResponseOutput {
	return o
}

func (o CustomMetricThresholdResponseOutput) ToCustomMetricThresholdResponseOutputWithContext(ctx context.Context) CustomMetricThresholdResponseOutput {
	return o
}

// [Required] The user-defined metric to calculate.
func (o CustomMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o CustomMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v CustomMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type CustomMetricThresholdResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomMetricThresholdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomMetricThresholdResponse)(nil)).Elem()
}

func (o CustomMetricThresholdResponseArrayOutput) ToCustomMetricThresholdResponseArrayOutput() CustomMetricThresholdResponseArrayOutput {
	return o
}

func (o CustomMetricThresholdResponseArrayOutput) ToCustomMetricThresholdResponseArrayOutputWithContext(ctx context.Context) CustomMetricThresholdResponseArrayOutput {
	return o
}

func (o CustomMetricThresholdResponseArrayOutput) Index(i pulumi.IntInput) CustomMetricThresholdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomMetricThresholdResponse {
		return vs[0].([]CustomMetricThresholdResponse)[vs[1].(int)]
	}).(CustomMetricThresholdResponseOutput)
}

type CustomModelFineTuning struct {
	// HyperParameters for fine tuning custom model.
	HyperParameters map[string]string `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInput `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'Custom'.
	ModelProvider string `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData interface{} `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData interface{} `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for CustomModelFineTuning
func (val *CustomModelFineTuning) Defaults() *CustomModelFineTuning {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Model = *tmp.Model.Defaults()

	return &tmp
}

// CustomModelFineTuningInput is an input type that accepts CustomModelFineTuningArgs and CustomModelFineTuningOutput values.
// You can construct a concrete instance of `CustomModelFineTuningInput` via:
//
//	CustomModelFineTuningArgs{...}
type CustomModelFineTuningInput interface {
	pulumi.Input

	ToCustomModelFineTuningOutput() CustomModelFineTuningOutput
	ToCustomModelFineTuningOutputWithContext(context.Context) CustomModelFineTuningOutput
}

type CustomModelFineTuningArgs struct {
	// HyperParameters for fine tuning custom model.
	HyperParameters pulumi.StringMapInput `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInputInput `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'Custom'.
	ModelProvider pulumi.StringInput `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData pulumi.Input `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData pulumi.Input `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for CustomModelFineTuningArgs
func (val *CustomModelFineTuningArgs) Defaults() *CustomModelFineTuningArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (CustomModelFineTuningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelFineTuning)(nil)).Elem()
}

func (i CustomModelFineTuningArgs) ToCustomModelFineTuningOutput() CustomModelFineTuningOutput {
	return i.ToCustomModelFineTuningOutputWithContext(context.Background())
}

func (i CustomModelFineTuningArgs) ToCustomModelFineTuningOutputWithContext(ctx context.Context) CustomModelFineTuningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelFineTuningOutput)
}

type CustomModelFineTuningOutput struct{ *pulumi.OutputState }

func (CustomModelFineTuningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelFineTuning)(nil)).Elem()
}

func (o CustomModelFineTuningOutput) ToCustomModelFineTuningOutput() CustomModelFineTuningOutput {
	return o
}

func (o CustomModelFineTuningOutput) ToCustomModelFineTuningOutputWithContext(ctx context.Context) CustomModelFineTuningOutput {
	return o
}

// HyperParameters for fine tuning custom model.
func (o CustomModelFineTuningOutput) HyperParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomModelFineTuning) map[string]string { return v.HyperParameters }).(pulumi.StringMapOutput)
}

// [Required] Input model for fine tuning.
func (o CustomModelFineTuningOutput) Model() MLFlowModelJobInputOutput {
	return o.ApplyT(func(v CustomModelFineTuning) MLFlowModelJobInput { return v.Model }).(MLFlowModelJobInputOutput)
}

// Enum to determine the type of fine tuning.
// Expected value is 'Custom'.
func (o CustomModelFineTuningOutput) ModelProvider() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelFineTuning) string { return v.ModelProvider }).(pulumi.StringOutput)
}

// [Required] Fine tuning task type.
func (o CustomModelFineTuningOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelFineTuning) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data for fine tuning.
func (o CustomModelFineTuningOutput) TrainingData() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomModelFineTuning) interface{} { return v.TrainingData }).(pulumi.AnyOutput)
}

// Validation data for fine tuning.
func (o CustomModelFineTuningOutput) ValidationData() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomModelFineTuning) interface{} { return v.ValidationData }).(pulumi.AnyOutput)
}

type CustomModelFineTuningResponse struct {
	// HyperParameters for fine tuning custom model.
	HyperParameters map[string]string `pulumi:"hyperParameters"`
	// [Required] Input model for fine tuning.
	Model MLFlowModelJobInputResponse `pulumi:"model"`
	// Enum to determine the type of fine tuning.
	// Expected value is 'Custom'.
	ModelProvider string `pulumi:"modelProvider"`
	// [Required] Fine tuning task type.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data for fine tuning.
	TrainingData interface{} `pulumi:"trainingData"`
	// Validation data for fine tuning.
	ValidationData interface{} `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for CustomModelFineTuningResponse
func (val *CustomModelFineTuningResponse) Defaults() *CustomModelFineTuningResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Model = *tmp.Model.Defaults()

	return &tmp
}

type CustomModelFineTuningResponseOutput struct{ *pulumi.OutputState }

func (CustomModelFineTuningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelFineTuningResponse)(nil)).Elem()
}

func (o CustomModelFineTuningResponseOutput) ToCustomModelFineTuningResponseOutput() CustomModelFineTuningResponseOutput {
	return o
}

func (o CustomModelFineTuningResponseOutput) ToCustomModelFineTuningResponseOutputWithContext(ctx context.Context) CustomModelFineTuningResponseOutput {
	return o
}

// HyperParameters for fine tuning custom model.
func (o CustomModelFineTuningResponseOutput) HyperParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) map[string]string { return v.HyperParameters }).(pulumi.StringMapOutput)
}

// [Required] Input model for fine tuning.
func (o CustomModelFineTuningResponseOutput) Model() MLFlowModelJobInputResponseOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) MLFlowModelJobInputResponse { return v.Model }).(MLFlowModelJobInputResponseOutput)
}

// Enum to determine the type of fine tuning.
// Expected value is 'Custom'.
func (o CustomModelFineTuningResponseOutput) ModelProvider() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) string { return v.ModelProvider }).(pulumi.StringOutput)
}

// [Required] Fine tuning task type.
func (o CustomModelFineTuningResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data for fine tuning.
func (o CustomModelFineTuningResponseOutput) TrainingData() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) interface{} { return v.TrainingData }).(pulumi.AnyOutput)
}

// Validation data for fine tuning.
func (o CustomModelFineTuningResponseOutput) ValidationData() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomModelFineTuningResponse) interface{} { return v.ValidationData }).(pulumi.AnyOutput)
}

type CustomModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInput
func (val *CustomModelJobInput) Defaults() *CustomModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobInputInput is an input type that accepts CustomModelJobInputArgs and CustomModelJobInputOutput values.
// You can construct a concrete instance of `CustomModelJobInputInput` via:
//
//	CustomModelJobInputArgs{...}
type CustomModelJobInputInput interface {
	pulumi.Input

	ToCustomModelJobInputOutput() CustomModelJobInputOutput
	ToCustomModelJobInputOutputWithContext(context.Context) CustomModelJobInputOutput
}

type CustomModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputArgs
func (val *CustomModelJobInputArgs) Defaults() *CustomModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (CustomModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return i.ToCustomModelJobInputOutputWithContext(context.Background())
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobInputOutput)
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputPtrOutput() CustomModelJobInputPtrOutput {
	return i.ToCustomModelJobInputPtrOutputWithContext(context.Background())
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputPtrOutputWithContext(ctx context.Context) CustomModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobInputOutput).ToCustomModelJobInputPtrOutputWithContext(ctx)
}

// CustomModelJobInputPtrInput is an input type that accepts CustomModelJobInputArgs, CustomModelJobInputPtr and CustomModelJobInputPtrOutput values.
// You can construct a concrete instance of `CustomModelJobInputPtrInput` via:
//
//	        CustomModelJobInputArgs{...}
//
//	or:
//
//	        nil
type CustomModelJobInputPtrInput interface {
	pulumi.Input

	ToCustomModelJobInputPtrOutput() CustomModelJobInputPtrOutput
	ToCustomModelJobInputPtrOutputWithContext(context.Context) CustomModelJobInputPtrOutput
}

type customModelJobInputPtrType CustomModelJobInputArgs

func CustomModelJobInputPtr(v *CustomModelJobInputArgs) CustomModelJobInputPtrInput {
	return (*customModelJobInputPtrType)(v)
}

func (*customModelJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomModelJobInput)(nil)).Elem()
}

func (i *customModelJobInputPtrType) ToCustomModelJobInputPtrOutput() CustomModelJobInputPtrOutput {
	return i.ToCustomModelJobInputPtrOutputWithContext(context.Background())
}

func (i *customModelJobInputPtrType) ToCustomModelJobInputPtrOutputWithContext(ctx context.Context) CustomModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobInputPtrOutput)
}

type CustomModelJobInputOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return o
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return o
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputPtrOutput() CustomModelJobInputPtrOutput {
	return o.ToCustomModelJobInputPtrOutputWithContext(context.Background())
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputPtrOutputWithContext(ctx context.Context) CustomModelJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomModelJobInput) *CustomModelJobInput {
		return &v
	}).(CustomModelJobInputPtrOutput)
}

// Description for the input.
func (o CustomModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o CustomModelJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobInputPtrOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomModelJobInput)(nil)).Elem()
}

func (o CustomModelJobInputPtrOutput) ToCustomModelJobInputPtrOutput() CustomModelJobInputPtrOutput {
	return o
}

func (o CustomModelJobInputPtrOutput) ToCustomModelJobInputPtrOutputWithContext(ctx context.Context) CustomModelJobInputPtrOutput {
	return o
}

func (o CustomModelJobInputPtrOutput) Elem() CustomModelJobInputOutput {
	return o.ApplyT(func(v *CustomModelJobInput) CustomModelJobInput {
		if v != nil {
			return *v
		}
		var ret CustomModelJobInput
		return ret
	}).(CustomModelJobInputOutput)
}

// Description for the input.
func (o CustomModelJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o CustomModelJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type CustomModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputResponse
func (val *CustomModelJobInputResponse) Defaults() *CustomModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInputResponse)(nil)).Elem()
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutput() CustomModelJobInputResponseOutput {
	return o
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutputWithContext(ctx context.Context) CustomModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o CustomModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o CustomModelJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomModelJobInputResponse)(nil)).Elem()
}

func (o CustomModelJobInputResponsePtrOutput) ToCustomModelJobInputResponsePtrOutput() CustomModelJobInputResponsePtrOutput {
	return o
}

func (o CustomModelJobInputResponsePtrOutput) ToCustomModelJobInputResponsePtrOutputWithContext(ctx context.Context) CustomModelJobInputResponsePtrOutput {
	return o
}

func (o CustomModelJobInputResponsePtrOutput) Elem() CustomModelJobInputResponseOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) CustomModelJobInputResponse {
		if v != nil {
			return *v
		}
		var ret CustomModelJobInputResponse
		return ret
	}).(CustomModelJobInputResponseOutput)
}

// Description for the input.
func (o CustomModelJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o CustomModelJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type CustomModelJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutput
func (val *CustomModelJobOutput) Defaults() *CustomModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobOutputInput is an input type that accepts CustomModelJobOutputArgs and CustomModelJobOutputOutput values.
// You can construct a concrete instance of `CustomModelJobOutputInput` via:
//
//	CustomModelJobOutputArgs{...}
type CustomModelJobOutputInput interface {
	pulumi.Input

	ToCustomModelJobOutputOutput() CustomModelJobOutputOutput
	ToCustomModelJobOutputOutputWithContext(context.Context) CustomModelJobOutputOutput
}

type CustomModelJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputArgs
func (val *CustomModelJobOutputArgs) Defaults() *CustomModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (CustomModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return i.ToCustomModelJobOutputOutputWithContext(context.Background())
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobOutputOutput)
}

type CustomModelJobOutputOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return o
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return o
}

// Output Asset Name.
func (o CustomModelJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o CustomModelJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o CustomModelJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o CustomModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'custom_model'.
func (o CustomModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o CustomModelJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CustomModelJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputResponse
func (val *CustomModelJobOutputResponse) Defaults() *CustomModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutputResponse)(nil)).Elem()
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutput() CustomModelJobOutputResponseOutput {
	return o
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutputWithContext(ctx context.Context) CustomModelJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o CustomModelJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o CustomModelJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o CustomModelJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o CustomModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'custom_model'.
func (o CustomModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o CustomModelJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CustomMonitoringSignal struct {
	// [Required] ARM resource ID of the component resource used to calculate the custom metrics.
	ComponentId string `pulumi:"componentId"`
	// Monitoring assets to take as input. Key is the component input port name, value is the data asset.
	InputAssets map[string]interface{} `pulumi:"inputAssets"`
	// Extra component parameters to take as input. Key is the component literal input port name, value is the parameter value.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []CustomMetricThreshold `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Expected value is 'Custom'.
	SignalType string `pulumi:"signalType"`
	// A list of metrics to calculate and their associated thresholds.
	WorkspaceConnection *MonitoringWorkspaceConnection `pulumi:"workspaceConnection"`
}

// CustomMonitoringSignalInput is an input type that accepts CustomMonitoringSignalArgs and CustomMonitoringSignalOutput values.
// You can construct a concrete instance of `CustomMonitoringSignalInput` via:
//
//	CustomMonitoringSignalArgs{...}
type CustomMonitoringSignalInput interface {
	pulumi.Input

	ToCustomMonitoringSignalOutput() CustomMonitoringSignalOutput
	ToCustomMonitoringSignalOutputWithContext(context.Context) CustomMonitoringSignalOutput
}

type CustomMonitoringSignalArgs struct {
	// [Required] ARM resource ID of the component resource used to calculate the custom metrics.
	ComponentId pulumi.StringInput `pulumi:"componentId"`
	// Monitoring assets to take as input. Key is the component input port name, value is the data asset.
	InputAssets pulumi.MapInput `pulumi:"inputAssets"`
	// Extra component parameters to take as input. Key is the component literal input port name, value is the parameter value.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds CustomMetricThresholdArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Expected value is 'Custom'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
	// A list of metrics to calculate and their associated thresholds.
	WorkspaceConnection MonitoringWorkspaceConnectionPtrInput `pulumi:"workspaceConnection"`
}

func (CustomMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMonitoringSignal)(nil)).Elem()
}

func (i CustomMonitoringSignalArgs) ToCustomMonitoringSignalOutput() CustomMonitoringSignalOutput {
	return i.ToCustomMonitoringSignalOutputWithContext(context.Background())
}

func (i CustomMonitoringSignalArgs) ToCustomMonitoringSignalOutputWithContext(ctx context.Context) CustomMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomMonitoringSignalOutput)
}

type CustomMonitoringSignalOutput struct{ *pulumi.OutputState }

func (CustomMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMonitoringSignal)(nil)).Elem()
}

func (o CustomMonitoringSignalOutput) ToCustomMonitoringSignalOutput() CustomMonitoringSignalOutput {
	return o
}

func (o CustomMonitoringSignalOutput) ToCustomMonitoringSignalOutputWithContext(ctx context.Context) CustomMonitoringSignalOutput {
	return o
}

// [Required] ARM resource ID of the component resource used to calculate the custom metrics.
func (o CustomMonitoringSignalOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) string { return v.ComponentId }).(pulumi.StringOutput)
}

// Monitoring assets to take as input. Key is the component input port name, value is the data asset.
func (o CustomMonitoringSignalOutput) InputAssets() pulumi.MapOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) map[string]interface{} { return v.InputAssets }).(pulumi.MapOutput)
}

// Extra component parameters to take as input. Key is the component literal input port name, value is the parameter value.
func (o CustomMonitoringSignalOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o CustomMonitoringSignalOutput) MetricThresholds() CustomMetricThresholdArrayOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) []CustomMetricThreshold { return v.MetricThresholds }).(CustomMetricThresholdArrayOutput)
}

// The current notification mode for this signal.
func (o CustomMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o CustomMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Expected value is 'Custom'.
func (o CustomMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

// A list of metrics to calculate and their associated thresholds.
func (o CustomMonitoringSignalOutput) WorkspaceConnection() MonitoringWorkspaceConnectionPtrOutput {
	return o.ApplyT(func(v CustomMonitoringSignal) *MonitoringWorkspaceConnection { return v.WorkspaceConnection }).(MonitoringWorkspaceConnectionPtrOutput)
}

type CustomMonitoringSignalResponse struct {
	// [Required] ARM resource ID of the component resource used to calculate the custom metrics.
	ComponentId string `pulumi:"componentId"`
	// Monitoring assets to take as input. Key is the component input port name, value is the data asset.
	InputAssets map[string]interface{} `pulumi:"inputAssets"`
	// Extra component parameters to take as input. Key is the component literal input port name, value is the parameter value.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []CustomMetricThresholdResponse `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Expected value is 'Custom'.
	SignalType string `pulumi:"signalType"`
	// A list of metrics to calculate and their associated thresholds.
	WorkspaceConnection *MonitoringWorkspaceConnectionResponse `pulumi:"workspaceConnection"`
}

type CustomMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (CustomMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomMonitoringSignalResponse)(nil)).Elem()
}

func (o CustomMonitoringSignalResponseOutput) ToCustomMonitoringSignalResponseOutput() CustomMonitoringSignalResponseOutput {
	return o
}

func (o CustomMonitoringSignalResponseOutput) ToCustomMonitoringSignalResponseOutputWithContext(ctx context.Context) CustomMonitoringSignalResponseOutput {
	return o
}

// [Required] ARM resource ID of the component resource used to calculate the custom metrics.
func (o CustomMonitoringSignalResponseOutput) ComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) string { return v.ComponentId }).(pulumi.StringOutput)
}

// Monitoring assets to take as input. Key is the component input port name, value is the data asset.
func (o CustomMonitoringSignalResponseOutput) InputAssets() pulumi.MapOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) map[string]interface{} { return v.InputAssets }).(pulumi.MapOutput)
}

// Extra component parameters to take as input. Key is the component literal input port name, value is the parameter value.
func (o CustomMonitoringSignalResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o CustomMonitoringSignalResponseOutput) MetricThresholds() CustomMetricThresholdResponseArrayOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) []CustomMetricThresholdResponse { return v.MetricThresholds }).(CustomMetricThresholdResponseArrayOutput)
}

// The current notification mode for this signal.
func (o CustomMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o CustomMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Expected value is 'Custom'.
func (o CustomMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

// A list of metrics to calculate and their associated thresholds.
func (o CustomMonitoringSignalResponseOutput) WorkspaceConnection() MonitoringWorkspaceConnectionResponsePtrOutput {
	return o.ApplyT(func(v CustomMonitoringSignalResponse) *MonitoringWorkspaceConnectionResponse {
		return v.WorkspaceConnection
	}).(MonitoringWorkspaceConnectionResponsePtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// CustomNCrossValidationsInput is an input type that accepts CustomNCrossValidationsArgs and CustomNCrossValidationsOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsInput` via:
//
//	CustomNCrossValidationsArgs{...}
type CustomNCrossValidationsInput interface {
	pulumi.Input

	ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput
	ToCustomNCrossValidationsOutputWithContext(context.Context) CustomNCrossValidationsOutput
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return i.ToCustomNCrossValidationsOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput)
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput).ToCustomNCrossValidationsPtrOutputWithContext(ctx)
}

// CustomNCrossValidationsPtrInput is an input type that accepts CustomNCrossValidationsArgs, CustomNCrossValidationsPtr and CustomNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsPtrInput` via:
//
//	        CustomNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type CustomNCrossValidationsPtrInput interface {
	pulumi.Input

	ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput
	ToCustomNCrossValidationsPtrOutputWithContext(context.Context) CustomNCrossValidationsPtrOutput
}

type customNCrossValidationsPtrType CustomNCrossValidationsArgs

func CustomNCrossValidationsPtr(v *CustomNCrossValidationsArgs) CustomNCrossValidationsPtrInput {
	return (*customNCrossValidationsPtrType)(v)
}

func (*customNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomNCrossValidations) *CustomNCrossValidations {
		return &v
	}).(CustomNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidations) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) Elem() CustomNCrossValidationsOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) CustomNCrossValidations {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidations
		return ret
	}).(CustomNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutput() CustomNCrossValidationsResponseOutput {
	return o
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutputWithContext(ctx context.Context) CustomNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutput() CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) Elem() CustomNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) CustomNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidationsResponse
		return ret
	}).(CustomNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

// CustomSeasonalityInput is an input type that accepts CustomSeasonalityArgs and CustomSeasonalityOutput values.
// You can construct a concrete instance of `CustomSeasonalityInput` via:
//
//	CustomSeasonalityArgs{...}
type CustomSeasonalityInput interface {
	pulumi.Input

	ToCustomSeasonalityOutput() CustomSeasonalityOutput
	ToCustomSeasonalityOutputWithContext(context.Context) CustomSeasonalityOutput
}

type CustomSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Seasonality value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return i.ToCustomSeasonalityOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput)
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput).ToCustomSeasonalityPtrOutputWithContext(ctx)
}

// CustomSeasonalityPtrInput is an input type that accepts CustomSeasonalityArgs, CustomSeasonalityPtr and CustomSeasonalityPtrOutput values.
// You can construct a concrete instance of `CustomSeasonalityPtrInput` via:
//
//	        CustomSeasonalityArgs{...}
//
//	or:
//
//	        nil
type CustomSeasonalityPtrInput interface {
	pulumi.Input

	ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput
	ToCustomSeasonalityPtrOutputWithContext(context.Context) CustomSeasonalityPtrOutput
}

type customSeasonalityPtrType CustomSeasonalityArgs

func CustomSeasonalityPtr(v *CustomSeasonalityArgs) CustomSeasonalityPtrInput {
	return (*customSeasonalityPtrType)(v)
}

func (*customSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityPtrOutput)
}

type CustomSeasonalityOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomSeasonality) *CustomSeasonality {
		return &v
	}).(CustomSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonality) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) Elem() CustomSeasonalityOutput {
	return o.ApplyT(func(v *CustomSeasonality) CustomSeasonality {
		if v != nil {
			return *v
		}
		var ret CustomSeasonality
		return ret
	}).(CustomSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

type CustomSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutput() CustomSeasonalityResponseOutput {
	return o
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutputWithContext(ctx context.Context) CustomSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutput() CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutputWithContext(ctx context.Context) CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) Elem() CustomSeasonalityResponseOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) CustomSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret CustomSeasonalityResponse
		return ret
	}).(CustomSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Specifies the custom service configuration
type CustomService struct {
	// Describes the docker settings for the image
	Docker *Docker `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []Endpoint `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariable `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *Image `pulumi:"image"`
	// Describes the jupyter kernel settings for the image if its a custom environment
	Kernel *JupyterKernelConfig `pulumi:"kernel"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinition `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomService
func (val *CustomService) Defaults() *CustomService {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

// CustomServiceInput is an input type that accepts CustomServiceArgs and CustomServiceOutput values.
// You can construct a concrete instance of `CustomServiceInput` via:
//
//	CustomServiceArgs{...}
type CustomServiceInput interface {
	pulumi.Input

	ToCustomServiceOutput() CustomServiceOutput
	ToCustomServiceOutputWithContext(context.Context) CustomServiceOutput
}

// Specifies the custom service configuration
type CustomServiceArgs struct {
	// Describes the docker settings for the image
	Docker DockerPtrInput `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints EndpointArrayInput `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables EnvironmentVariableMapInput `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image ImagePtrInput `pulumi:"image"`
	// Describes the jupyter kernel settings for the image if its a custom environment
	Kernel JupyterKernelConfigPtrInput `pulumi:"kernel"`
	// Name of the Custom Service
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes VolumeDefinitionArrayInput `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomServiceArgs
func (val *CustomServiceArgs) Defaults() *CustomServiceArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (CustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomService)(nil)).Elem()
}

func (i CustomServiceArgs) ToCustomServiceOutput() CustomServiceOutput {
	return i.ToCustomServiceOutputWithContext(context.Background())
}

func (i CustomServiceArgs) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceOutput)
}

// CustomServiceArrayInput is an input type that accepts CustomServiceArray and CustomServiceArrayOutput values.
// You can construct a concrete instance of `CustomServiceArrayInput` via:
//
//	CustomServiceArray{ CustomServiceArgs{...} }
type CustomServiceArrayInput interface {
	pulumi.Input

	ToCustomServiceArrayOutput() CustomServiceArrayOutput
	ToCustomServiceArrayOutputWithContext(context.Context) CustomServiceArrayOutput
}

type CustomServiceArray []CustomServiceInput

func (CustomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomService)(nil)).Elem()
}

func (i CustomServiceArray) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return i.ToCustomServiceArrayOutputWithContext(context.Background())
}

func (i CustomServiceArray) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceArrayOutput)
}

// Specifies the custom service configuration
type CustomServiceOutput struct{ *pulumi.OutputState }

func (CustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomService)(nil)).Elem()
}

func (o CustomServiceOutput) ToCustomServiceOutput() CustomServiceOutput {
	return o
}

func (o CustomServiceOutput) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return o
}

// Describes the docker settings for the image
func (o CustomServiceOutput) Docker() DockerPtrOutput {
	return o.ApplyT(func(v CustomService) *Docker { return v.Docker }).(DockerPtrOutput)
}

// Configuring the endpoints for the container
func (o CustomServiceOutput) Endpoints() EndpointArrayOutput {
	return o.ApplyT(func(v CustomService) []Endpoint { return v.Endpoints }).(EndpointArrayOutput)
}

// Environment Variable for the container
func (o CustomServiceOutput) EnvironmentVariables() EnvironmentVariableMapOutput {
	return o.ApplyT(func(v CustomService) map[string]EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableMapOutput)
}

// Describes the Image Specifications
func (o CustomServiceOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v CustomService) *Image { return v.Image }).(ImagePtrOutput)
}

// Describes the jupyter kernel settings for the image if its a custom environment
func (o CustomServiceOutput) Kernel() JupyterKernelConfigPtrOutput {
	return o.ApplyT(func(v CustomService) *JupyterKernelConfig { return v.Kernel }).(JupyterKernelConfigPtrOutput)
}

// Name of the Custom Service
func (o CustomServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configuring the volumes for the container
func (o CustomServiceOutput) Volumes() VolumeDefinitionArrayOutput {
	return o.ApplyT(func(v CustomService) []VolumeDefinition { return v.Volumes }).(VolumeDefinitionArrayOutput)
}

type CustomServiceArrayOutput struct{ *pulumi.OutputState }

func (CustomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomService)(nil)).Elem()
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) Index(i pulumi.IntInput) CustomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomService {
		return vs[0].([]CustomService)[vs[1].(int)]
	}).(CustomServiceOutput)
}

// Specifies the custom service configuration
type CustomServiceResponse struct {
	// Describes the docker settings for the image
	Docker *DockerResponse `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *ImageResponse `pulumi:"image"`
	// Describes the jupyter kernel settings for the image if its a custom environment
	Kernel *JupyterKernelConfigResponse `pulumi:"kernel"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinitionResponse `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomServiceResponse
func (val *CustomServiceResponse) Defaults() *CustomServiceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

// Specifies the custom service configuration
type CustomServiceResponseOutput struct{ *pulumi.OutputState }

func (CustomServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomServiceResponse)(nil)).Elem()
}

func (o CustomServiceResponseOutput) ToCustomServiceResponseOutput() CustomServiceResponseOutput {
	return o
}

func (o CustomServiceResponseOutput) ToCustomServiceResponseOutputWithContext(ctx context.Context) CustomServiceResponseOutput {
	return o
}

// Describes the docker settings for the image
func (o CustomServiceResponseOutput) Docker() DockerResponsePtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *DockerResponse { return v.Docker }).(DockerResponsePtrOutput)
}

// Configuring the endpoints for the container
func (o CustomServiceResponseOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v CustomServiceResponse) []EndpointResponse { return v.Endpoints }).(EndpointResponseArrayOutput)
}

// Environment Variable for the container
func (o CustomServiceResponseOutput) EnvironmentVariables() EnvironmentVariableResponseMapOutput {
	return o.ApplyT(func(v CustomServiceResponse) map[string]EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseMapOutput)
}

// Describes the Image Specifications
func (o CustomServiceResponseOutput) Image() ImageResponsePtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *ImageResponse { return v.Image }).(ImageResponsePtrOutput)
}

// Describes the jupyter kernel settings for the image if its a custom environment
func (o CustomServiceResponseOutput) Kernel() JupyterKernelConfigResponsePtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *JupyterKernelConfigResponse { return v.Kernel }).(JupyterKernelConfigResponsePtrOutput)
}

// Name of the Custom Service
func (o CustomServiceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configuring the volumes for the container
func (o CustomServiceResponseOutput) Volumes() VolumeDefinitionResponseArrayOutput {
	return o.ApplyT(func(v CustomServiceResponse) []VolumeDefinitionResponse { return v.Volumes }).(VolumeDefinitionResponseArrayOutput)
}

type CustomServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomServiceResponse)(nil)).Elem()
}

func (o CustomServiceResponseArrayOutput) ToCustomServiceResponseArrayOutput() CustomServiceResponseArrayOutput {
	return o
}

func (o CustomServiceResponseArrayOutput) ToCustomServiceResponseArrayOutputWithContext(ctx context.Context) CustomServiceResponseArrayOutput {
	return o
}

func (o CustomServiceResponseArrayOutput) Index(i pulumi.IntInput) CustomServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomServiceResponse {
		return vs[0].([]CustomServiceResponse)[vs[1].(int)]
	}).(CustomServiceResponseOutput)
}

type CustomTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

// CustomTargetLagsInput is an input type that accepts CustomTargetLagsArgs and CustomTargetLagsOutput values.
// You can construct a concrete instance of `CustomTargetLagsInput` via:
//
//	CustomTargetLagsArgs{...}
type CustomTargetLagsInput interface {
	pulumi.Input

	ToCustomTargetLagsOutput() CustomTargetLagsOutput
	ToCustomTargetLagsOutputWithContext(context.Context) CustomTargetLagsOutput
}

type CustomTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Set target lags values.
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (CustomTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return i.ToCustomTargetLagsOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput)
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput).ToCustomTargetLagsPtrOutputWithContext(ctx)
}

// CustomTargetLagsPtrInput is an input type that accepts CustomTargetLagsArgs, CustomTargetLagsPtr and CustomTargetLagsPtrOutput values.
// You can construct a concrete instance of `CustomTargetLagsPtrInput` via:
//
//	        CustomTargetLagsArgs{...}
//
//	or:
//
//	        nil
type CustomTargetLagsPtrInput interface {
	pulumi.Input

	ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput
	ToCustomTargetLagsPtrOutputWithContext(context.Context) CustomTargetLagsPtrOutput
}

type customTargetLagsPtrType CustomTargetLagsArgs

func CustomTargetLagsPtr(v *CustomTargetLagsArgs) CustomTargetLagsPtrInput {
	return (*customTargetLagsPtrType)(v)
}

func (*customTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsPtrOutput)
}

type CustomTargetLagsOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetLags) *CustomTargetLags {
		return &v
	}).(CustomTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLags) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) Elem() CustomTargetLagsOutput {
	return o.ApplyT(func(v *CustomTargetLags) CustomTargetLags {
		if v != nil {
			return *v
		}
		var ret CustomTargetLags
		return ret
	}).(CustomTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsPtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLags) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

type CustomTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutput() CustomTargetLagsResponseOutput {
	return o
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutputWithContext(ctx context.Context) CustomTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponseOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutput() CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutputWithContext(ctx context.Context) CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) Elem() CustomTargetLagsResponseOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) CustomTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetLagsResponse
		return ret
	}).(CustomTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponsePtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

// CustomTargetRollingWindowSizeInput is an input type that accepts CustomTargetRollingWindowSizeArgs and CustomTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizeInput` via:
//
//	CustomTargetRollingWindowSizeArgs{...}
type CustomTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput
	ToCustomTargetRollingWindowSizeOutputWithContext(context.Context) CustomTargetRollingWindowSizeOutput
}

type CustomTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return i.ToCustomTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput)
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput).ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// CustomTargetRollingWindowSizePtrInput is an input type that accepts CustomTargetRollingWindowSizeArgs, CustomTargetRollingWindowSizePtr and CustomTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizePtrInput` via:
//
//	        CustomTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type CustomTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput
	ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Context) CustomTargetRollingWindowSizePtrOutput
}

type customTargetRollingWindowSizePtrType CustomTargetRollingWindowSizeArgs

func CustomTargetRollingWindowSizePtr(v *CustomTargetRollingWindowSizeArgs) CustomTargetRollingWindowSizePtrInput {
	return (*customTargetRollingWindowSizePtrType)(v)
}

func (*customTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizePtrOutput)
}

type CustomTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetRollingWindowSize) *CustomTargetRollingWindowSize {
		return &v
	}).(CustomTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) Elem() CustomTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) CustomTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSize
		return ret
	}).(CustomTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

type CustomTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutput() CustomTargetRollingWindowSizeResponseOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutput() CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) Elem() CustomTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) CustomTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSizeResponse
		return ret
	}).(CustomTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type DataCollector struct {
	// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
	// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
	Collections map[string]Collection `pulumi:"collections"`
	// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
	RequestLogging *RequestLogging `pulumi:"requestLogging"`
	// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
	// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
	// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
	// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
	RollingRate *string `pulumi:"rollingRate"`
}

// Defaults sets the appropriate defaults for DataCollector
func (val *DataCollector) Defaults() *DataCollector {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RollingRate == nil {
		rollingRate_ := "Hour"
		tmp.RollingRate = &rollingRate_
	}
	return &tmp
}

// DataCollectorInput is an input type that accepts DataCollectorArgs and DataCollectorOutput values.
// You can construct a concrete instance of `DataCollectorInput` via:
//
//	DataCollectorArgs{...}
type DataCollectorInput interface {
	pulumi.Input

	ToDataCollectorOutput() DataCollectorOutput
	ToDataCollectorOutputWithContext(context.Context) DataCollectorOutput
}

type DataCollectorArgs struct {
	// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
	// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
	Collections CollectionMapInput `pulumi:"collections"`
	// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
	RequestLogging RequestLoggingPtrInput `pulumi:"requestLogging"`
	// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
	// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
	// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
	// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
	RollingRate pulumi.StringPtrInput `pulumi:"rollingRate"`
}

// Defaults sets the appropriate defaults for DataCollectorArgs
func (val *DataCollectorArgs) Defaults() *DataCollectorArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RollingRate == nil {
		tmp.RollingRate = pulumi.StringPtr("Hour")
	}
	return &tmp
}
func (DataCollectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollector)(nil)).Elem()
}

func (i DataCollectorArgs) ToDataCollectorOutput() DataCollectorOutput {
	return i.ToDataCollectorOutputWithContext(context.Background())
}

func (i DataCollectorArgs) ToDataCollectorOutputWithContext(ctx context.Context) DataCollectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectorOutput)
}

func (i DataCollectorArgs) ToDataCollectorPtrOutput() DataCollectorPtrOutput {
	return i.ToDataCollectorPtrOutputWithContext(context.Background())
}

func (i DataCollectorArgs) ToDataCollectorPtrOutputWithContext(ctx context.Context) DataCollectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectorOutput).ToDataCollectorPtrOutputWithContext(ctx)
}

// DataCollectorPtrInput is an input type that accepts DataCollectorArgs, DataCollectorPtr and DataCollectorPtrOutput values.
// You can construct a concrete instance of `DataCollectorPtrInput` via:
//
//	        DataCollectorArgs{...}
//
//	or:
//
//	        nil
type DataCollectorPtrInput interface {
	pulumi.Input

	ToDataCollectorPtrOutput() DataCollectorPtrOutput
	ToDataCollectorPtrOutputWithContext(context.Context) DataCollectorPtrOutput
}

type dataCollectorPtrType DataCollectorArgs

func DataCollectorPtr(v *DataCollectorArgs) DataCollectorPtrInput {
	return (*dataCollectorPtrType)(v)
}

func (*dataCollectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollector)(nil)).Elem()
}

func (i *dataCollectorPtrType) ToDataCollectorPtrOutput() DataCollectorPtrOutput {
	return i.ToDataCollectorPtrOutputWithContext(context.Background())
}

func (i *dataCollectorPtrType) ToDataCollectorPtrOutputWithContext(ctx context.Context) DataCollectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataCollectorPtrOutput)
}

type DataCollectorOutput struct{ *pulumi.OutputState }

func (DataCollectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollector)(nil)).Elem()
}

func (o DataCollectorOutput) ToDataCollectorOutput() DataCollectorOutput {
	return o
}

func (o DataCollectorOutput) ToDataCollectorOutputWithContext(ctx context.Context) DataCollectorOutput {
	return o
}

func (o DataCollectorOutput) ToDataCollectorPtrOutput() DataCollectorPtrOutput {
	return o.ToDataCollectorPtrOutputWithContext(context.Background())
}

func (o DataCollectorOutput) ToDataCollectorPtrOutputWithContext(ctx context.Context) DataCollectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataCollector) *DataCollector {
		return &v
	}).(DataCollectorPtrOutput)
}

// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
func (o DataCollectorOutput) Collections() CollectionMapOutput {
	return o.ApplyT(func(v DataCollector) map[string]Collection { return v.Collections }).(CollectionMapOutput)
}

// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
func (o DataCollectorOutput) RequestLogging() RequestLoggingPtrOutput {
	return o.ApplyT(func(v DataCollector) *RequestLogging { return v.RequestLogging }).(RequestLoggingPtrOutput)
}

// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
func (o DataCollectorOutput) RollingRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollector) *string { return v.RollingRate }).(pulumi.StringPtrOutput)
}

type DataCollectorPtrOutput struct{ *pulumi.OutputState }

func (DataCollectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollector)(nil)).Elem()
}

func (o DataCollectorPtrOutput) ToDataCollectorPtrOutput() DataCollectorPtrOutput {
	return o
}

func (o DataCollectorPtrOutput) ToDataCollectorPtrOutputWithContext(ctx context.Context) DataCollectorPtrOutput {
	return o
}

func (o DataCollectorPtrOutput) Elem() DataCollectorOutput {
	return o.ApplyT(func(v *DataCollector) DataCollector {
		if v != nil {
			return *v
		}
		var ret DataCollector
		return ret
	}).(DataCollectorOutput)
}

// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
func (o DataCollectorPtrOutput) Collections() CollectionMapOutput {
	return o.ApplyT(func(v *DataCollector) map[string]Collection {
		if v == nil {
			return nil
		}
		return v.Collections
	}).(CollectionMapOutput)
}

// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
func (o DataCollectorPtrOutput) RequestLogging() RequestLoggingPtrOutput {
	return o.ApplyT(func(v *DataCollector) *RequestLogging {
		if v == nil {
			return nil
		}
		return v.RequestLogging
	}).(RequestLoggingPtrOutput)
}

// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
func (o DataCollectorPtrOutput) RollingRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollector) *string {
		if v == nil {
			return nil
		}
		return v.RollingRate
	}).(pulumi.StringPtrOutput)
}

type DataCollectorResponse struct {
	// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
	// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
	Collections map[string]CollectionResponse `pulumi:"collections"`
	// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
	RequestLogging *RequestLoggingResponse `pulumi:"requestLogging"`
	// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
	// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
	// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
	// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
	RollingRate *string `pulumi:"rollingRate"`
}

// Defaults sets the appropriate defaults for DataCollectorResponse
func (val *DataCollectorResponse) Defaults() *DataCollectorResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RollingRate == nil {
		rollingRate_ := "Hour"
		tmp.RollingRate = &rollingRate_
	}
	return &tmp
}

type DataCollectorResponseOutput struct{ *pulumi.OutputState }

func (DataCollectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataCollectorResponse)(nil)).Elem()
}

func (o DataCollectorResponseOutput) ToDataCollectorResponseOutput() DataCollectorResponseOutput {
	return o
}

func (o DataCollectorResponseOutput) ToDataCollectorResponseOutputWithContext(ctx context.Context) DataCollectorResponseOutput {
	return o
}

// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
func (o DataCollectorResponseOutput) Collections() CollectionResponseMapOutput {
	return o.ApplyT(func(v DataCollectorResponse) map[string]CollectionResponse { return v.Collections }).(CollectionResponseMapOutput)
}

// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
func (o DataCollectorResponseOutput) RequestLogging() RequestLoggingResponsePtrOutput {
	return o.ApplyT(func(v DataCollectorResponse) *RequestLoggingResponse { return v.RequestLogging }).(RequestLoggingResponsePtrOutput)
}

// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
func (o DataCollectorResponseOutput) RollingRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataCollectorResponse) *string { return v.RollingRate }).(pulumi.StringPtrOutput)
}

type DataCollectorResponsePtrOutput struct{ *pulumi.OutputState }

func (DataCollectorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataCollectorResponse)(nil)).Elem()
}

func (o DataCollectorResponsePtrOutput) ToDataCollectorResponsePtrOutput() DataCollectorResponsePtrOutput {
	return o
}

func (o DataCollectorResponsePtrOutput) ToDataCollectorResponsePtrOutputWithContext(ctx context.Context) DataCollectorResponsePtrOutput {
	return o
}

func (o DataCollectorResponsePtrOutput) Elem() DataCollectorResponseOutput {
	return o.ApplyT(func(v *DataCollectorResponse) DataCollectorResponse {
		if v != nil {
			return *v
		}
		var ret DataCollectorResponse
		return ret
	}).(DataCollectorResponseOutput)
}

// [Required] The collection configuration. Each collection has it own configuration to collect model data and the name of collection can be arbitrary string.
// Model data collector can be used for either payload logging or custom logging or both of them. Collection request and response are reserved for payload logging, others are for custom logging.
func (o DataCollectorResponsePtrOutput) Collections() CollectionResponseMapOutput {
	return o.ApplyT(func(v *DataCollectorResponse) map[string]CollectionResponse {
		if v == nil {
			return nil
		}
		return v.Collections
	}).(CollectionResponseMapOutput)
}

// The request logging configuration for mdc, it includes advanced logging settings for all collections. It's optional.
func (o DataCollectorResponsePtrOutput) RequestLogging() RequestLoggingResponsePtrOutput {
	return o.ApplyT(func(v *DataCollectorResponse) *RequestLoggingResponse {
		if v == nil {
			return nil
		}
		return v.RequestLogging
	}).(RequestLoggingResponsePtrOutput)
}

// When model data is collected to blob storage, we need to roll the data to different path to avoid logging all of them in a single blob file.
// If the rolling rate is hour, all data will be collected in the blob path /yyyy/MM/dd/HH/.
// If it's day, all data will be collected in blob path /yyyy/MM/dd/.
// The other benefit of rolling path is that model monitoring ui is able to select a time range of data very quickly.
func (o DataCollectorResponsePtrOutput) RollingRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataCollectorResponse) *string {
		if v == nil {
			return nil
		}
		return v.RollingRate
	}).(pulumi.StringPtrOutput)
}

// Container for data asset versions.
type DataContainerType struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerType
func (val *DataContainerType) Defaults() *DataContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// DataContainerTypeInput is an input type that accepts DataContainerTypeArgs and DataContainerTypeOutput values.
// You can construct a concrete instance of `DataContainerTypeInput` via:
//
//	DataContainerTypeArgs{...}
type DataContainerTypeInput interface {
	pulumi.Input

	ToDataContainerTypeOutput() DataContainerTypeOutput
	ToDataContainerTypeOutputWithContext(context.Context) DataContainerTypeOutput
}

// Container for data asset versions.
type DataContainerTypeArgs struct {
	// [Required] Specifies the type of data.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerTypeArgs
func (val *DataContainerTypeArgs) Defaults() *DataContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DataContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return i.ToDataContainerTypeOutputWithContext(context.Background())
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataContainerTypeOutput)
}

// Container for data asset versions.
type DataContainerTypeOutput struct{ *pulumi.OutputState }

func (DataContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return o
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerTypeOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerType) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for data asset versions.
type DataContainerResponse struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerResponse
func (val *DataContainerResponse) Defaults() *DataContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for data asset versions.
type DataContainerResponseOutput struct{ *pulumi.OutputState }

func (DataContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerResponse)(nil)).Elem()
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutput() DataContainerResponseOutput {
	return o
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutputWithContext(ctx context.Context) DataContainerResponseOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o DataContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o DataContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o DataContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DataDriftMonitoringSignal struct {
	// The data segment used for scoping on a subset of the data population.
	DataSegment *MonitoringDataSegment `pulumi:"dataSegment"`
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings *FeatureImportanceSettings `pulumi:"featureImportanceSettings"`
	// The feature filter which identifies which feature to calculate drift over.
	Features interface{} `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'DataDrift'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataDriftMonitoringSignal
func (val *DataDriftMonitoringSignal) Defaults() *DataDriftMonitoringSignal {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

// DataDriftMonitoringSignalInput is an input type that accepts DataDriftMonitoringSignalArgs and DataDriftMonitoringSignalOutput values.
// You can construct a concrete instance of `DataDriftMonitoringSignalInput` via:
//
//	DataDriftMonitoringSignalArgs{...}
type DataDriftMonitoringSignalInput interface {
	pulumi.Input

	ToDataDriftMonitoringSignalOutput() DataDriftMonitoringSignalOutput
	ToDataDriftMonitoringSignalOutputWithContext(context.Context) DataDriftMonitoringSignalOutput
}

type DataDriftMonitoringSignalArgs struct {
	// The data segment used for scoping on a subset of the data population.
	DataSegment MonitoringDataSegmentPtrInput `pulumi:"dataSegment"`
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride pulumi.StringMapInput `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings FeatureImportanceSettingsPtrInput `pulumi:"featureImportanceSettings"`
	// The feature filter which identifies which feature to calculate drift over.
	Features pulumi.Input `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds pulumi.ArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData pulumi.Input `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData pulumi.Input `pulumi:"referenceData"`
	// Expected value is 'DataDrift'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataDriftMonitoringSignalArgs
func (val *DataDriftMonitoringSignalArgs) Defaults() *DataDriftMonitoringSignalArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (DataDriftMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDriftMonitoringSignal)(nil)).Elem()
}

func (i DataDriftMonitoringSignalArgs) ToDataDriftMonitoringSignalOutput() DataDriftMonitoringSignalOutput {
	return i.ToDataDriftMonitoringSignalOutputWithContext(context.Background())
}

func (i DataDriftMonitoringSignalArgs) ToDataDriftMonitoringSignalOutputWithContext(ctx context.Context) DataDriftMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDriftMonitoringSignalOutput)
}

type DataDriftMonitoringSignalOutput struct{ *pulumi.OutputState }

func (DataDriftMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDriftMonitoringSignal)(nil)).Elem()
}

func (o DataDriftMonitoringSignalOutput) ToDataDriftMonitoringSignalOutput() DataDriftMonitoringSignalOutput {
	return o
}

func (o DataDriftMonitoringSignalOutput) ToDataDriftMonitoringSignalOutputWithContext(ctx context.Context) DataDriftMonitoringSignalOutput {
	return o
}

// The data segment used for scoping on a subset of the data population.
func (o DataDriftMonitoringSignalOutput) DataSegment() MonitoringDataSegmentPtrOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) *MonitoringDataSegment { return v.DataSegment }).(MonitoringDataSegmentPtrOutput)
}

// A dictionary that maps feature names to their respective data types.
func (o DataDriftMonitoringSignalOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// The settings for computing feature importance.
func (o DataDriftMonitoringSignalOutput) FeatureImportanceSettings() FeatureImportanceSettingsPtrOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) *FeatureImportanceSettings { return v.FeatureImportanceSettings }).(FeatureImportanceSettingsPtrOutput)
}

// The feature filter which identifies which feature to calculate drift over.
func (o DataDriftMonitoringSignalOutput) Features() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) interface{} { return v.Features }).(pulumi.AnyOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o DataDriftMonitoringSignalOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o DataDriftMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o DataDriftMonitoringSignalOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o DataDriftMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o DataDriftMonitoringSignalOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'DataDrift'.
func (o DataDriftMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

type DataDriftMonitoringSignalResponse struct {
	// The data segment used for scoping on a subset of the data population.
	DataSegment *MonitoringDataSegmentResponse `pulumi:"dataSegment"`
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings *FeatureImportanceSettingsResponse `pulumi:"featureImportanceSettings"`
	// The feature filter which identifies which feature to calculate drift over.
	Features interface{} `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'DataDrift'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataDriftMonitoringSignalResponse
func (val *DataDriftMonitoringSignalResponse) Defaults() *DataDriftMonitoringSignalResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

type DataDriftMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (DataDriftMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataDriftMonitoringSignalResponse)(nil)).Elem()
}

func (o DataDriftMonitoringSignalResponseOutput) ToDataDriftMonitoringSignalResponseOutput() DataDriftMonitoringSignalResponseOutput {
	return o
}

func (o DataDriftMonitoringSignalResponseOutput) ToDataDriftMonitoringSignalResponseOutputWithContext(ctx context.Context) DataDriftMonitoringSignalResponseOutput {
	return o
}

// The data segment used for scoping on a subset of the data population.
func (o DataDriftMonitoringSignalResponseOutput) DataSegment() MonitoringDataSegmentResponsePtrOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) *MonitoringDataSegmentResponse { return v.DataSegment }).(MonitoringDataSegmentResponsePtrOutput)
}

// A dictionary that maps feature names to their respective data types.
func (o DataDriftMonitoringSignalResponseOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// The settings for computing feature importance.
func (o DataDriftMonitoringSignalResponseOutput) FeatureImportanceSettings() FeatureImportanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) *FeatureImportanceSettingsResponse {
		return v.FeatureImportanceSettings
	}).(FeatureImportanceSettingsResponsePtrOutput)
}

// The feature filter which identifies which feature to calculate drift over.
func (o DataDriftMonitoringSignalResponseOutput) Features() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) interface{} { return v.Features }).(pulumi.AnyOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o DataDriftMonitoringSignalResponseOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o DataDriftMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o DataDriftMonitoringSignalResponseOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o DataDriftMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o DataDriftMonitoringSignalResponseOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'DataDrift'.
func (o DataDriftMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v DataDriftMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

// A DataFactory compute.
type DataFactory struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DataFactoryInput is an input type that accepts DataFactoryArgs and DataFactoryOutput values.
// You can construct a concrete instance of `DataFactoryInput` via:
//
//	DataFactoryArgs{...}
type DataFactoryInput interface {
	pulumi.Input

	ToDataFactoryOutput() DataFactoryOutput
	ToDataFactoryOutputWithContext(context.Context) DataFactoryOutput
}

// A DataFactory compute.
type DataFactoryArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DataFactoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactory)(nil)).Elem()
}

func (i DataFactoryArgs) ToDataFactoryOutput() DataFactoryOutput {
	return i.ToDataFactoryOutputWithContext(context.Background())
}

func (i DataFactoryArgs) ToDataFactoryOutputWithContext(ctx context.Context) DataFactoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryOutput)
}

func (i DataFactoryArgs) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return i.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (i DataFactoryArgs) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryOutput).ToDataFactoryPtrOutputWithContext(ctx)
}

// DataFactoryPtrInput is an input type that accepts DataFactoryArgs, DataFactoryPtr and DataFactoryPtrOutput values.
// You can construct a concrete instance of `DataFactoryPtrInput` via:
//
//	        DataFactoryArgs{...}
//
//	or:
//
//	        nil
type DataFactoryPtrInput interface {
	pulumi.Input

	ToDataFactoryPtrOutput() DataFactoryPtrOutput
	ToDataFactoryPtrOutputWithContext(context.Context) DataFactoryPtrOutput
}

type dataFactoryPtrType DataFactoryArgs

func DataFactoryPtr(v *DataFactoryArgs) DataFactoryPtrInput {
	return (*dataFactoryPtrType)(v)
}

func (*dataFactoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFactory)(nil)).Elem()
}

func (i *dataFactoryPtrType) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return i.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (i *dataFactoryPtrType) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryPtrOutput)
}

// A DataFactory compute.
type DataFactoryOutput struct{ *pulumi.OutputState }

func (DataFactoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactory)(nil)).Elem()
}

func (o DataFactoryOutput) ToDataFactoryOutput() DataFactoryOutput {
	return o
}

func (o DataFactoryOutput) ToDataFactoryOutputWithContext(ctx context.Context) DataFactoryOutput {
	return o
}

func (o DataFactoryOutput) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return o.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (o DataFactoryOutput) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFactory) *DataFactory {
		return &v
	}).(DataFactoryPtrOutput)
}

// Location for the underlying compute
func (o DataFactoryOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactory) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFactory) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataFactoryPtrOutput struct{ *pulumi.OutputState }

func (DataFactoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFactory)(nil)).Elem()
}

func (o DataFactoryPtrOutput) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return o
}

func (o DataFactoryPtrOutput) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return o
}

func (o DataFactoryPtrOutput) Elem() DataFactoryOutput {
	return o.ApplyT(func(v *DataFactory) DataFactory {
		if v != nil {
			return *v
		}
		var ret DataFactory
		return ret
	}).(DataFactoryOutput)
}

// Location for the underlying compute
func (o DataFactoryPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataFactory) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type DataFactoryResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataFactory compute.
type DataFactoryResponseOutput struct{ *pulumi.OutputState }

func (DataFactoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactoryResponse)(nil)).Elem()
}

func (o DataFactoryResponseOutput) ToDataFactoryResponseOutput() DataFactoryResponseOutput {
	return o
}

func (o DataFactoryResponseOutput) ToDataFactoryResponseOutputWithContext(ctx context.Context) DataFactoryResponseOutput {
	return o
}

// Location for the underlying compute
func (o DataFactoryResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DataFactoryResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DataFactoryResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DataFactoryResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DataFactoryResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Errors during provisioning
func (o DataFactoryResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DataFactoryResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DataFactoryResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataImport struct {
	// Name of the asset for data import job to create
	AssetName *string `pulumi:"assetName"`
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Source data of the asset to import from
	Source interface{} `pulumi:"source"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataImport
func (val *DataImport) Defaults() *DataImport {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// DataImportInput is an input type that accepts DataImportArgs and DataImportOutput values.
// You can construct a concrete instance of `DataImportInput` via:
//
//	DataImportArgs{...}
type DataImportInput interface {
	pulumi.Input

	ToDataImportOutput() DataImportOutput
	ToDataImportOutputWithContext(context.Context) DataImportOutput
}

type DataImportArgs struct {
	// Name of the asset for data import job to create
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Source data of the asset to import from
	Source pulumi.Input `pulumi:"source"`
	// Stage in the data lifecycle assigned to this data asset
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataImportArgs
func (val *DataImportArgs) Defaults() *DataImportArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DataImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImport)(nil)).Elem()
}

func (i DataImportArgs) ToDataImportOutput() DataImportOutput {
	return i.ToDataImportOutputWithContext(context.Background())
}

func (i DataImportArgs) ToDataImportOutputWithContext(ctx context.Context) DataImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataImportOutput)
}

type DataImportOutput struct{ *pulumi.OutputState }

func (DataImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImport)(nil)).Elem()
}

func (o DataImportOutput) ToDataImportOutput() DataImportOutput {
	return o
}

func (o DataImportOutput) ToDataImportOutputWithContext(ctx context.Context) DataImportOutput {
	return o
}

// Name of the asset for data import job to create
func (o DataImportOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImport) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Specifies the lifecycle setting of managed data asset.
func (o DataImportOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v DataImport) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_folder'.
func (o DataImportOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataImport) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o DataImportOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v DataImport) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataImportOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImport) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o DataImportOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v DataImport) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o DataImportOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataImport) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o DataImportOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataImport) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataImportOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataImport) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Source data of the asset to import from
func (o DataImportOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v DataImport) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o DataImportOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImport) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataImportOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataImport) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DataImportResponse struct {
	// Name of the asset for data import job to create
	AssetName *string `pulumi:"assetName"`
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Source data of the asset to import from
	Source interface{} `pulumi:"source"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataImportResponse
func (val *DataImportResponse) Defaults() *DataImportResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type DataImportResponseOutput struct{ *pulumi.OutputState }

func (DataImportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataImportResponse)(nil)).Elem()
}

func (o DataImportResponseOutput) ToDataImportResponseOutput() DataImportResponseOutput {
	return o
}

func (o DataImportResponseOutput) ToDataImportResponseOutputWithContext(ctx context.Context) DataImportResponseOutput {
	return o
}

// Name of the asset for data import job to create
func (o DataImportResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Specifies the lifecycle setting of managed data asset.
func (o DataImportResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v DataImportResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_folder'.
func (o DataImportResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataImportResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o DataImportResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v DataImportResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataImportResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o DataImportResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v DataImportResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o DataImportResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataImportResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o DataImportResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataImportResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataImportResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataImportResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Source data of the asset to import from
func (o DataImportResponseOutput) Source() pulumi.AnyOutput {
	return o.ApplyT(func(v DataImportResponse) interface{} { return v.Source }).(pulumi.AnyOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o DataImportResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataImportResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataImportResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataImportResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalytics struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                              `pulumi:"disableLocalAuth"`
	Properties       *DataLakeAnalyticsSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DataLakeAnalyticsInput is an input type that accepts DataLakeAnalyticsArgs and DataLakeAnalyticsOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsInput` via:
//
//	DataLakeAnalyticsArgs{...}
type DataLakeAnalyticsInput interface {
	pulumi.Input

	ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput
	ToDataLakeAnalyticsOutputWithContext(context.Context) DataLakeAnalyticsOutput
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput                       `pulumi:"disableLocalAuth"`
	Properties       DataLakeAnalyticsSchemaPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DataLakeAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalytics)(nil)).Elem()
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput {
	return i.ToDataLakeAnalyticsOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsOutputWithContext(ctx context.Context) DataLakeAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsOutput)
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return i.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsOutput).ToDataLakeAnalyticsPtrOutputWithContext(ctx)
}

// DataLakeAnalyticsPtrInput is an input type that accepts DataLakeAnalyticsArgs, DataLakeAnalyticsPtr and DataLakeAnalyticsPtrOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsPtrInput` via:
//
//	        DataLakeAnalyticsArgs{...}
//
//	or:
//
//	        nil
type DataLakeAnalyticsPtrInput interface {
	pulumi.Input

	ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput
	ToDataLakeAnalyticsPtrOutputWithContext(context.Context) DataLakeAnalyticsPtrOutput
}

type dataLakeAnalyticsPtrType DataLakeAnalyticsArgs

func DataLakeAnalyticsPtr(v *DataLakeAnalyticsArgs) DataLakeAnalyticsPtrInput {
	return (*dataLakeAnalyticsPtrType)(v)
}

func (*dataLakeAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalytics)(nil)).Elem()
}

func (i *dataLakeAnalyticsPtrType) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return i.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (i *dataLakeAnalyticsPtrType) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsPtrOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalytics)(nil)).Elem()
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput {
	return o
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsOutputWithContext(ctx context.Context) DataLakeAnalyticsOutput {
	return o
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return o.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeAnalytics) *DataLakeAnalytics {
		return &v
	}).(DataLakeAnalyticsPtrOutput)
}

// Location for the underlying compute
func (o DataLakeAnalyticsOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalytics) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

func (o DataLakeAnalyticsOutput) Properties() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *DataLakeAnalyticsSchemaProperties { return v.Properties }).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalytics)(nil)).Elem()
}

func (o DataLakeAnalyticsPtrOutput) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return o
}

func (o DataLakeAnalyticsPtrOutput) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return o
}

func (o DataLakeAnalyticsPtrOutput) Elem() DataLakeAnalyticsOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) DataLakeAnalytics {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalytics
		return ret
	}).(DataLakeAnalyticsOutput)
}

// Location for the underlying compute
func (o DataLakeAnalyticsPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

func (o DataLakeAnalyticsPtrOutput) Properties() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *DataLakeAnalyticsSchemaProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                                     `pulumi:"modifiedOn"`
	Properties *DataLakeAnalyticsSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsResponseOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsResponse)(nil)).Elem()
}

func (o DataLakeAnalyticsResponseOutput) ToDataLakeAnalyticsResponseOutput() DataLakeAnalyticsResponseOutput {
	return o
}

func (o DataLakeAnalyticsResponseOutput) ToDataLakeAnalyticsResponseOutputWithContext(ctx context.Context) DataLakeAnalyticsResponseOutput {
	return o
}

// Location for the underlying compute
func (o DataLakeAnalyticsResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DataLakeAnalyticsResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DataLakeAnalyticsResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DataLakeAnalyticsResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o DataLakeAnalyticsResponseOutput) Properties() DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *DataLakeAnalyticsSchemaResponseProperties { return v.Properties }).(DataLakeAnalyticsSchemaResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o DataLakeAnalyticsResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DataLakeAnalyticsResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

// DataLakeAnalyticsSchemaPropertiesInput is an input type that accepts DataLakeAnalyticsSchemaPropertiesArgs and DataLakeAnalyticsSchemaPropertiesOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsSchemaPropertiesInput` via:
//
//	DataLakeAnalyticsSchemaPropertiesArgs{...}
type DataLakeAnalyticsSchemaPropertiesInput interface {
	pulumi.Input

	ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput
	ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(context.Context) DataLakeAnalyticsSchemaPropertiesOutput
}

type DataLakeAnalyticsSchemaPropertiesArgs struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName pulumi.StringPtrInput `pulumi:"dataLakeStoreAccountName"`
}

func (DataLakeAnalyticsSchemaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesOutput)
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesOutput).ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx)
}

// DataLakeAnalyticsSchemaPropertiesPtrInput is an input type that accepts DataLakeAnalyticsSchemaPropertiesArgs, DataLakeAnalyticsSchemaPropertiesPtr and DataLakeAnalyticsSchemaPropertiesPtrOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsSchemaPropertiesPtrInput` via:
//
//	        DataLakeAnalyticsSchemaPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataLakeAnalyticsSchemaPropertiesPtrInput interface {
	pulumi.Input

	ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput
	ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput
}

type dataLakeAnalyticsSchemaPropertiesPtrType DataLakeAnalyticsSchemaPropertiesArgs

func DataLakeAnalyticsSchemaPropertiesPtr(v *DataLakeAnalyticsSchemaPropertiesArgs) DataLakeAnalyticsSchemaPropertiesPtrInput {
	return (*dataLakeAnalyticsSchemaPropertiesPtrType)(v)
}

func (*dataLakeAnalyticsSchemaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (i *dataLakeAnalyticsSchemaPropertiesPtrType) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataLakeAnalyticsSchemaPropertiesPtrType) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

type DataLakeAnalyticsSchemaPropertiesOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeAnalyticsSchemaProperties) *DataLakeAnalyticsSchemaProperties {
		return &v
	}).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaPropertiesOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsSchemaProperties) *string { return v.DataLakeStoreAccountName }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) Elem() DataLakeAnalyticsSchemaPropertiesOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaProperties) DataLakeAnalyticsSchemaProperties {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalyticsSchemaProperties
		return ret
	}).(DataLakeAnalyticsSchemaPropertiesOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataLakeStoreAccountName
	}).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaResponseProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

type DataLakeAnalyticsSchemaResponsePropertiesOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaResponseProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) ToDataLakeAnalyticsSchemaResponsePropertiesOutput() DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) ToDataLakeAnalyticsSchemaResponsePropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsSchemaResponseProperties) *string { return v.DataLakeStoreAccountName }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaResponseProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ToDataLakeAnalyticsSchemaResponsePropertiesPtrOutput() DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ToDataLakeAnalyticsSchemaResponsePropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) Elem() DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaResponseProperties) DataLakeAnalyticsSchemaResponseProperties {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalyticsSchemaResponseProperties
		return ret
	}).(DataLakeAnalyticsSchemaResponsePropertiesOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataLakeStoreAccountName
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReference struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// DataPathAssetReferenceInput is an input type that accepts DataPathAssetReferenceArgs and DataPathAssetReferenceOutput values.
// You can construct a concrete instance of `DataPathAssetReferenceInput` via:
//
//	DataPathAssetReferenceArgs{...}
type DataPathAssetReferenceInput interface {
	pulumi.Input

	ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput
	ToDataPathAssetReferenceOutputWithContext(context.Context) DataPathAssetReferenceOutput
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceArgs struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (DataPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return i.ToDataPathAssetReferenceOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput)
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput).ToDataPathAssetReferencePtrOutputWithContext(ctx)
}

// DataPathAssetReferencePtrInput is an input type that accepts DataPathAssetReferenceArgs, DataPathAssetReferencePtr and DataPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `DataPathAssetReferencePtrInput` via:
//
//	        DataPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type DataPathAssetReferencePtrInput interface {
	pulumi.Input

	ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput
	ToDataPathAssetReferencePtrOutputWithContext(context.Context) DataPathAssetReferencePtrOutput
}

type dataPathAssetReferencePtrType DataPathAssetReferenceArgs

func DataPathAssetReferencePtr(v *DataPathAssetReferenceArgs) DataPathAssetReferencePtrInput {
	return (*dataPathAssetReferencePtrType)(v)
}

func (*dataPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataPathAssetReference) *DataPathAssetReference {
		return &v
	}).(DataPathAssetReferencePtrOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) Elem() DataPathAssetReferenceOutput {
	return o.ApplyT(func(v *DataPathAssetReference) DataPathAssetReference {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReference
		return ret
	}).(DataPathAssetReferenceOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferencePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponse struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutput() DataPathAssetReferenceResponseOutput {
	return o
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutputWithContext(ctx context.Context) DataPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponseOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutput() DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) Elem() DataPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) DataPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReferenceResponse
		return ret
	}).(DataPathAssetReferenceResponseOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponsePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

type DataQualityMonitoringSignal struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings *FeatureImportanceSettings `pulumi:"featureImportanceSettings"`
	// The features to calculate drift over.
	Features interface{} `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'DataQuality'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataQualityMonitoringSignal
func (val *DataQualityMonitoringSignal) Defaults() *DataQualityMonitoringSignal {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

// DataQualityMonitoringSignalInput is an input type that accepts DataQualityMonitoringSignalArgs and DataQualityMonitoringSignalOutput values.
// You can construct a concrete instance of `DataQualityMonitoringSignalInput` via:
//
//	DataQualityMonitoringSignalArgs{...}
type DataQualityMonitoringSignalInput interface {
	pulumi.Input

	ToDataQualityMonitoringSignalOutput() DataQualityMonitoringSignalOutput
	ToDataQualityMonitoringSignalOutputWithContext(context.Context) DataQualityMonitoringSignalOutput
}

type DataQualityMonitoringSignalArgs struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride pulumi.StringMapInput `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings FeatureImportanceSettingsPtrInput `pulumi:"featureImportanceSettings"`
	// The features to calculate drift over.
	Features pulumi.Input `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds pulumi.ArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which drift will be calculated for.
	ProductionData pulumi.Input `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData pulumi.Input `pulumi:"referenceData"`
	// Expected value is 'DataQuality'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataQualityMonitoringSignalArgs
func (val *DataQualityMonitoringSignalArgs) Defaults() *DataQualityMonitoringSignalArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (DataQualityMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityMonitoringSignal)(nil)).Elem()
}

func (i DataQualityMonitoringSignalArgs) ToDataQualityMonitoringSignalOutput() DataQualityMonitoringSignalOutput {
	return i.ToDataQualityMonitoringSignalOutputWithContext(context.Background())
}

func (i DataQualityMonitoringSignalArgs) ToDataQualityMonitoringSignalOutputWithContext(ctx context.Context) DataQualityMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataQualityMonitoringSignalOutput)
}

type DataQualityMonitoringSignalOutput struct{ *pulumi.OutputState }

func (DataQualityMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityMonitoringSignal)(nil)).Elem()
}

func (o DataQualityMonitoringSignalOutput) ToDataQualityMonitoringSignalOutput() DataQualityMonitoringSignalOutput {
	return o
}

func (o DataQualityMonitoringSignalOutput) ToDataQualityMonitoringSignalOutputWithContext(ctx context.Context) DataQualityMonitoringSignalOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o DataQualityMonitoringSignalOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// The settings for computing feature importance.
func (o DataQualityMonitoringSignalOutput) FeatureImportanceSettings() FeatureImportanceSettingsPtrOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) *FeatureImportanceSettings { return v.FeatureImportanceSettings }).(FeatureImportanceSettingsPtrOutput)
}

// The features to calculate drift over.
func (o DataQualityMonitoringSignalOutput) Features() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) interface{} { return v.Features }).(pulumi.AnyOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o DataQualityMonitoringSignalOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o DataQualityMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data produced by the production service which drift will be calculated for.
func (o DataQualityMonitoringSignalOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o DataQualityMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o DataQualityMonitoringSignalOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'DataQuality'.
func (o DataQualityMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

type DataQualityMonitoringSignalResponse struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// The settings for computing feature importance.
	FeatureImportanceSettings *FeatureImportanceSettingsResponse `pulumi:"featureImportanceSettings"`
	// The features to calculate drift over.
	Features interface{} `pulumi:"features"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'DataQuality'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for DataQualityMonitoringSignalResponse
func (val *DataQualityMonitoringSignalResponse) Defaults() *DataQualityMonitoringSignalResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

type DataQualityMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (DataQualityMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataQualityMonitoringSignalResponse)(nil)).Elem()
}

func (o DataQualityMonitoringSignalResponseOutput) ToDataQualityMonitoringSignalResponseOutput() DataQualityMonitoringSignalResponseOutput {
	return o
}

func (o DataQualityMonitoringSignalResponseOutput) ToDataQualityMonitoringSignalResponseOutputWithContext(ctx context.Context) DataQualityMonitoringSignalResponseOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o DataQualityMonitoringSignalResponseOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// The settings for computing feature importance.
func (o DataQualityMonitoringSignalResponseOutput) FeatureImportanceSettings() FeatureImportanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) *FeatureImportanceSettingsResponse {
		return v.FeatureImportanceSettings
	}).(FeatureImportanceSettingsResponsePtrOutput)
}

// The features to calculate drift over.
func (o DataQualityMonitoringSignalResponseOutput) Features() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) interface{} { return v.Features }).(pulumi.AnyOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o DataQualityMonitoringSignalResponseOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o DataQualityMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data produced by the production service which drift will be calculated for.
func (o DataQualityMonitoringSignalResponseOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o DataQualityMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o DataQualityMonitoringSignalResponseOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'DataQuality'.
func (o DataQualityMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v DataQualityMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

type DatabaseSource struct {
	// Workspace connection for data import source storage
	Connection *string `pulumi:"connection"`
	// SQL Query statement for data import Database source
	Query *string `pulumi:"query"`
	// Enum to determine the type of data.
	// Expected value is 'database'.
	SourceType string `pulumi:"sourceType"`
	// SQL StoredProcedure on data import Database source
	StoredProcedure *string `pulumi:"storedProcedure"`
	// SQL StoredProcedure parameters
	StoredProcedureParams []map[string]string `pulumi:"storedProcedureParams"`
	// Name of the table on data import Database source
	TableName *string `pulumi:"tableName"`
}

// DatabaseSourceInput is an input type that accepts DatabaseSourceArgs and DatabaseSourceOutput values.
// You can construct a concrete instance of `DatabaseSourceInput` via:
//
//	DatabaseSourceArgs{...}
type DatabaseSourceInput interface {
	pulumi.Input

	ToDatabaseSourceOutput() DatabaseSourceOutput
	ToDatabaseSourceOutputWithContext(context.Context) DatabaseSourceOutput
}

type DatabaseSourceArgs struct {
	// Workspace connection for data import source storage
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// SQL Query statement for data import Database source
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Enum to determine the type of data.
	// Expected value is 'database'.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
	// SQL StoredProcedure on data import Database source
	StoredProcedure pulumi.StringPtrInput `pulumi:"storedProcedure"`
	// SQL StoredProcedure parameters
	StoredProcedureParams pulumi.StringMapArrayInput `pulumi:"storedProcedureParams"`
	// Name of the table on data import Database source
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
}

func (DatabaseSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSource)(nil)).Elem()
}

func (i DatabaseSourceArgs) ToDatabaseSourceOutput() DatabaseSourceOutput {
	return i.ToDatabaseSourceOutputWithContext(context.Background())
}

func (i DatabaseSourceArgs) ToDatabaseSourceOutputWithContext(ctx context.Context) DatabaseSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSourceOutput)
}

func (i DatabaseSourceArgs) ToDatabaseSourcePtrOutput() DatabaseSourcePtrOutput {
	return i.ToDatabaseSourcePtrOutputWithContext(context.Background())
}

func (i DatabaseSourceArgs) ToDatabaseSourcePtrOutputWithContext(ctx context.Context) DatabaseSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSourceOutput).ToDatabaseSourcePtrOutputWithContext(ctx)
}

// DatabaseSourcePtrInput is an input type that accepts DatabaseSourceArgs, DatabaseSourcePtr and DatabaseSourcePtrOutput values.
// You can construct a concrete instance of `DatabaseSourcePtrInput` via:
//
//	        DatabaseSourceArgs{...}
//
//	or:
//
//	        nil
type DatabaseSourcePtrInput interface {
	pulumi.Input

	ToDatabaseSourcePtrOutput() DatabaseSourcePtrOutput
	ToDatabaseSourcePtrOutputWithContext(context.Context) DatabaseSourcePtrOutput
}

type databaseSourcePtrType DatabaseSourceArgs

func DatabaseSourcePtr(v *DatabaseSourceArgs) DatabaseSourcePtrInput {
	return (*databaseSourcePtrType)(v)
}

func (*databaseSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSource)(nil)).Elem()
}

func (i *databaseSourcePtrType) ToDatabaseSourcePtrOutput() DatabaseSourcePtrOutput {
	return i.ToDatabaseSourcePtrOutputWithContext(context.Background())
}

func (i *databaseSourcePtrType) ToDatabaseSourcePtrOutputWithContext(ctx context.Context) DatabaseSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseSourcePtrOutput)
}

type DatabaseSourceOutput struct{ *pulumi.OutputState }

func (DatabaseSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSource)(nil)).Elem()
}

func (o DatabaseSourceOutput) ToDatabaseSourceOutput() DatabaseSourceOutput {
	return o
}

func (o DatabaseSourceOutput) ToDatabaseSourceOutputWithContext(ctx context.Context) DatabaseSourceOutput {
	return o
}

func (o DatabaseSourceOutput) ToDatabaseSourcePtrOutput() DatabaseSourcePtrOutput {
	return o.ToDatabaseSourcePtrOutputWithContext(context.Background())
}

func (o DatabaseSourceOutput) ToDatabaseSourcePtrOutputWithContext(ctx context.Context) DatabaseSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabaseSource) *DatabaseSource {
		return &v
	}).(DatabaseSourcePtrOutput)
}

// Workspace connection for data import source storage
func (o DatabaseSourceOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSource) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// SQL Query statement for data import Database source
func (o DatabaseSourceOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSource) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'database'.
func (o DatabaseSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSource) string { return v.SourceType }).(pulumi.StringOutput)
}

// SQL StoredProcedure on data import Database source
func (o DatabaseSourceOutput) StoredProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSource) *string { return v.StoredProcedure }).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure parameters
func (o DatabaseSourceOutput) StoredProcedureParams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v DatabaseSource) []map[string]string { return v.StoredProcedureParams }).(pulumi.StringMapArrayOutput)
}

// Name of the table on data import Database source
func (o DatabaseSourceOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSource) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type DatabaseSourcePtrOutput struct{ *pulumi.OutputState }

func (DatabaseSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSource)(nil)).Elem()
}

func (o DatabaseSourcePtrOutput) ToDatabaseSourcePtrOutput() DatabaseSourcePtrOutput {
	return o
}

func (o DatabaseSourcePtrOutput) ToDatabaseSourcePtrOutputWithContext(ctx context.Context) DatabaseSourcePtrOutput {
	return o
}

func (o DatabaseSourcePtrOutput) Elem() DatabaseSourceOutput {
	return o.ApplyT(func(v *DatabaseSource) DatabaseSource {
		if v != nil {
			return *v
		}
		var ret DatabaseSource
		return ret
	}).(DatabaseSourceOutput)
}

// Workspace connection for data import source storage
func (o DatabaseSourcePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSource) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// SQL Query statement for data import Database source
func (o DatabaseSourcePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSource) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'database'.
func (o DatabaseSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure on data import Database source
func (o DatabaseSourcePtrOutput) StoredProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSource) *string {
		if v == nil {
			return nil
		}
		return v.StoredProcedure
	}).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure parameters
func (o DatabaseSourcePtrOutput) StoredProcedureParams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *DatabaseSource) []map[string]string {
		if v == nil {
			return nil
		}
		return v.StoredProcedureParams
	}).(pulumi.StringMapArrayOutput)
}

// Name of the table on data import Database source
func (o DatabaseSourcePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSource) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

type DatabaseSourceResponse struct {
	// Workspace connection for data import source storage
	Connection *string `pulumi:"connection"`
	// SQL Query statement for data import Database source
	Query *string `pulumi:"query"`
	// Enum to determine the type of data.
	// Expected value is 'database'.
	SourceType string `pulumi:"sourceType"`
	// SQL StoredProcedure on data import Database source
	StoredProcedure *string `pulumi:"storedProcedure"`
	// SQL StoredProcedure parameters
	StoredProcedureParams []map[string]string `pulumi:"storedProcedureParams"`
	// Name of the table on data import Database source
	TableName *string `pulumi:"tableName"`
}

type DatabaseSourceResponseOutput struct{ *pulumi.OutputState }

func (DatabaseSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseSourceResponse)(nil)).Elem()
}

func (o DatabaseSourceResponseOutput) ToDatabaseSourceResponseOutput() DatabaseSourceResponseOutput {
	return o
}

func (o DatabaseSourceResponseOutput) ToDatabaseSourceResponseOutputWithContext(ctx context.Context) DatabaseSourceResponseOutput {
	return o
}

// Workspace connection for data import source storage
func (o DatabaseSourceResponseOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// SQL Query statement for data import Database source
func (o DatabaseSourceResponseOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'database'.
func (o DatabaseSourceResponseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) string { return v.SourceType }).(pulumi.StringOutput)
}

// SQL StoredProcedure on data import Database source
func (o DatabaseSourceResponseOutput) StoredProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) *string { return v.StoredProcedure }).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure parameters
func (o DatabaseSourceResponseOutput) StoredProcedureParams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) []map[string]string { return v.StoredProcedureParams }).(pulumi.StringMapArrayOutput)
}

// Name of the table on data import Database source
func (o DatabaseSourceResponseOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseSourceResponse) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type DatabaseSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabaseSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseSourceResponse)(nil)).Elem()
}

func (o DatabaseSourceResponsePtrOutput) ToDatabaseSourceResponsePtrOutput() DatabaseSourceResponsePtrOutput {
	return o
}

func (o DatabaseSourceResponsePtrOutput) ToDatabaseSourceResponsePtrOutputWithContext(ctx context.Context) DatabaseSourceResponsePtrOutput {
	return o
}

func (o DatabaseSourceResponsePtrOutput) Elem() DatabaseSourceResponseOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) DatabaseSourceResponse {
		if v != nil {
			return *v
		}
		var ret DatabaseSourceResponse
		return ret
	}).(DatabaseSourceResponseOutput)
}

// Workspace connection for data import source storage
func (o DatabaseSourceResponsePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// SQL Query statement for data import Database source
func (o DatabaseSourceResponsePtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'database'.
func (o DatabaseSourceResponsePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure on data import Database source
func (o DatabaseSourceResponsePtrOutput) StoredProcedure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoredProcedure
	}).(pulumi.StringPtrOutput)
}

// SQL StoredProcedure parameters
func (o DatabaseSourceResponsePtrOutput) StoredProcedureParams() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) []map[string]string {
		if v == nil {
			return nil
		}
		return v.StoredProcedureParams
	}).(pulumi.StringMapArrayOutput)
}

// Name of the table on data import Database source
func (o DatabaseSourceResponsePtrOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TableName
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type Databricks struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Databricks
	Properties *DatabricksProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DatabricksInput is an input type that accepts DatabricksArgs and DatabricksOutput values.
// You can construct a concrete instance of `DatabricksInput` via:
//
//	DatabricksArgs{...}
type DatabricksInput interface {
	pulumi.Input

	ToDatabricksOutput() DatabricksOutput
	ToDatabricksOutputWithContext(context.Context) DatabricksOutput
}

// A DataFactory compute.
type DatabricksArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of Databricks
	Properties DatabricksPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Databricks)(nil)).Elem()
}

func (i DatabricksArgs) ToDatabricksOutput() DatabricksOutput {
	return i.ToDatabricksOutputWithContext(context.Background())
}

func (i DatabricksArgs) ToDatabricksOutputWithContext(ctx context.Context) DatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksOutput)
}

func (i DatabricksArgs) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return i.ToDatabricksPtrOutputWithContext(context.Background())
}

func (i DatabricksArgs) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksOutput).ToDatabricksPtrOutputWithContext(ctx)
}

// DatabricksPtrInput is an input type that accepts DatabricksArgs, DatabricksPtr and DatabricksPtrOutput values.
// You can construct a concrete instance of `DatabricksPtrInput` via:
//
//	        DatabricksArgs{...}
//
//	or:
//
//	        nil
type DatabricksPtrInput interface {
	pulumi.Input

	ToDatabricksPtrOutput() DatabricksPtrOutput
	ToDatabricksPtrOutputWithContext(context.Context) DatabricksPtrOutput
}

type databricksPtrType DatabricksArgs

func DatabricksPtr(v *DatabricksArgs) DatabricksPtrInput {
	return (*databricksPtrType)(v)
}

func (*databricksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Databricks)(nil)).Elem()
}

func (i *databricksPtrType) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return i.ToDatabricksPtrOutputWithContext(context.Background())
}

func (i *databricksPtrType) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPtrOutput)
}

// A DataFactory compute.
type DatabricksOutput struct{ *pulumi.OutputState }

func (DatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Databricks)(nil)).Elem()
}

func (o DatabricksOutput) ToDatabricksOutput() DatabricksOutput {
	return o
}

func (o DatabricksOutput) ToDatabricksOutputWithContext(ctx context.Context) DatabricksOutput {
	return o
}

func (o DatabricksOutput) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return o.ToDatabricksPtrOutputWithContext(context.Background())
}

func (o DatabricksOutput) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Databricks) *Databricks {
		return &v
	}).(DatabricksPtrOutput)
}

// Location for the underlying compute
func (o DatabricksOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v Databricks) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Databricks) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of Databricks
func (o DatabricksOutput) Properties() DatabricksPropertiesPtrOutput {
	return o.ApplyT(func(v Databricks) *DatabricksProperties { return v.Properties }).(DatabricksPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DatabricksPtrOutput struct{ *pulumi.OutputState }

func (DatabricksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Databricks)(nil)).Elem()
}

func (o DatabricksPtrOutput) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return o
}

func (o DatabricksPtrOutput) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return o
}

func (o DatabricksPtrOutput) Elem() DatabricksOutput {
	return o.ApplyT(func(v *Databricks) Databricks {
		if v != nil {
			return *v
		}
		var ret Databricks
		return ret
	}).(DatabricksOutput)
}

// Location for the underlying compute
func (o DatabricksPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Databricks) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of Databricks
func (o DatabricksPtrOutput) Properties() DatabricksPropertiesPtrOutput {
	return o.ApplyT(func(v *Databricks) *DatabricksProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(DatabricksPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Databricks
type DatabricksProperties struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// DatabricksPropertiesInput is an input type that accepts DatabricksPropertiesArgs and DatabricksPropertiesOutput values.
// You can construct a concrete instance of `DatabricksPropertiesInput` via:
//
//	DatabricksPropertiesArgs{...}
type DatabricksPropertiesInput interface {
	pulumi.Input

	ToDatabricksPropertiesOutput() DatabricksPropertiesOutput
	ToDatabricksPropertiesOutputWithContext(context.Context) DatabricksPropertiesOutput
}

// Properties of Databricks
type DatabricksPropertiesArgs struct {
	// Databricks access token
	DatabricksAccessToken pulumi.StringPtrInput `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl pulumi.StringPtrInput `pulumi:"workspaceUrl"`
}

func (DatabricksPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksProperties)(nil)).Elem()
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesOutput() DatabricksPropertiesOutput {
	return i.ToDatabricksPropertiesOutputWithContext(context.Background())
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesOutputWithContext(ctx context.Context) DatabricksPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesOutput)
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return i.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesOutput).ToDatabricksPropertiesPtrOutputWithContext(ctx)
}

// DatabricksPropertiesPtrInput is an input type that accepts DatabricksPropertiesArgs, DatabricksPropertiesPtr and DatabricksPropertiesPtrOutput values.
// You can construct a concrete instance of `DatabricksPropertiesPtrInput` via:
//
//	        DatabricksPropertiesArgs{...}
//
//	or:
//
//	        nil
type DatabricksPropertiesPtrInput interface {
	pulumi.Input

	ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput
	ToDatabricksPropertiesPtrOutputWithContext(context.Context) DatabricksPropertiesPtrOutput
}

type databricksPropertiesPtrType DatabricksPropertiesArgs

func DatabricksPropertiesPtr(v *DatabricksPropertiesArgs) DatabricksPropertiesPtrInput {
	return (*databricksPropertiesPtrType)(v)
}

func (*databricksPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksProperties)(nil)).Elem()
}

func (i *databricksPropertiesPtrType) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return i.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (i *databricksPropertiesPtrType) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesPtrOutput)
}

// Properties of Databricks
type DatabricksPropertiesOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksProperties)(nil)).Elem()
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesOutput() DatabricksPropertiesOutput {
	return o
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesOutputWithContext(ctx context.Context) DatabricksPropertiesOutput {
	return o
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return o.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabricksProperties) *DatabricksProperties {
		return &v
	}).(DatabricksPropertiesPtrOutput)
}

// Databricks access token
func (o DatabricksPropertiesOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksProperties) *string { return v.DatabricksAccessToken }).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksProperties) *string { return v.WorkspaceUrl }).(pulumi.StringPtrOutput)
}

type DatabricksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksProperties)(nil)).Elem()
}

func (o DatabricksPropertiesPtrOutput) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return o
}

func (o DatabricksPropertiesPtrOutput) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return o
}

func (o DatabricksPropertiesPtrOutput) Elem() DatabricksPropertiesOutput {
	return o.ApplyT(func(v *DatabricksProperties) DatabricksProperties {
		if v != nil {
			return *v
		}
		var ret DatabricksProperties
		return ret
	}).(DatabricksPropertiesOutput)
}

// Databricks access token
func (o DatabricksPropertiesPtrOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksProperties) *string {
		if v == nil {
			return nil
		}
		return v.DatabricksAccessToken
	}).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesPtrOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceUrl
	}).(pulumi.StringPtrOutput)
}

// Properties of Databricks
type DatabricksPropertiesResponse struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// Properties of Databricks
type DatabricksPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksPropertiesResponse)(nil)).Elem()
}

func (o DatabricksPropertiesResponseOutput) ToDatabricksPropertiesResponseOutput() DatabricksPropertiesResponseOutput {
	return o
}

func (o DatabricksPropertiesResponseOutput) ToDatabricksPropertiesResponseOutputWithContext(ctx context.Context) DatabricksPropertiesResponseOutput {
	return o
}

// Databricks access token
func (o DatabricksPropertiesResponseOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksPropertiesResponse) *string { return v.DatabricksAccessToken }).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesResponseOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksPropertiesResponse) *string { return v.WorkspaceUrl }).(pulumi.StringPtrOutput)
}

type DatabricksPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksPropertiesResponse)(nil)).Elem()
}

func (o DatabricksPropertiesResponsePtrOutput) ToDatabricksPropertiesResponsePtrOutput() DatabricksPropertiesResponsePtrOutput {
	return o
}

func (o DatabricksPropertiesResponsePtrOutput) ToDatabricksPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabricksPropertiesResponsePtrOutput {
	return o
}

func (o DatabricksPropertiesResponsePtrOutput) Elem() DatabricksPropertiesResponseOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) DatabricksPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DatabricksPropertiesResponse
		return ret
	}).(DatabricksPropertiesResponseOutput)
}

// Databricks access token
func (o DatabricksPropertiesResponsePtrOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabricksAccessToken
	}).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesResponsePtrOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceUrl
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type DatabricksResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Databricks
	Properties *DatabricksPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataFactory compute.
type DatabricksResponseOutput struct{ *pulumi.OutputState }

func (DatabricksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksResponse)(nil)).Elem()
}

func (o DatabricksResponseOutput) ToDatabricksResponseOutput() DatabricksResponseOutput {
	return o
}

func (o DatabricksResponseOutput) ToDatabricksResponseOutputWithContext(ctx context.Context) DatabricksResponseOutput {
	return o
}

// Location for the underlying compute
func (o DatabricksResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DatabricksResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DatabricksResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabricksResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DatabricksResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of Databricks
func (o DatabricksResponseOutput) Properties() DatabricksPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *DatabricksPropertiesResponse { return v.Properties }).(DatabricksPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o DatabricksResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DatabricksResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DatabricksResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DefaultScaleSettings struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

// DefaultScaleSettingsInput is an input type that accepts DefaultScaleSettingsArgs and DefaultScaleSettingsOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsInput` via:
//
//	DefaultScaleSettingsArgs{...}
type DefaultScaleSettingsInput interface {
	pulumi.Input

	ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput
	ToDefaultScaleSettingsOutputWithContext(context.Context) DefaultScaleSettingsOutput
}

type DefaultScaleSettingsArgs struct {
	// Expected value is 'Default'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
}

func (DefaultScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return i.ToDefaultScaleSettingsOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput)
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput).ToDefaultScaleSettingsPtrOutputWithContext(ctx)
}

// DefaultScaleSettingsPtrInput is an input type that accepts DefaultScaleSettingsArgs, DefaultScaleSettingsPtr and DefaultScaleSettingsPtrOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsPtrInput` via:
//
//	        DefaultScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type DefaultScaleSettingsPtrInput interface {
	pulumi.Input

	ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput
	ToDefaultScaleSettingsPtrOutputWithContext(context.Context) DefaultScaleSettingsPtrOutput
}

type defaultScaleSettingsPtrType DefaultScaleSettingsArgs

func DefaultScaleSettingsPtr(v *DefaultScaleSettingsArgs) DefaultScaleSettingsPtrInput {
	return (*defaultScaleSettingsPtrType)(v)
}

func (*defaultScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsPtrOutput)
}

type DefaultScaleSettingsOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultScaleSettings) *DefaultScaleSettings {
		return &v
	}).(DefaultScaleSettingsPtrOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) Elem() DefaultScaleSettingsOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) DefaultScaleSettings {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettings
		return ret
	}).(DefaultScaleSettingsOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

type DefaultScaleSettingsResponse struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

type DefaultScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutput() DefaultScaleSettingsResponseOutput {
	return o
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutputWithContext(ctx context.Context) DefaultScaleSettingsResponseOutput {
	return o
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutput() DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutputWithContext(ctx context.Context) DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) Elem() DefaultScaleSettingsResponseOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) DefaultScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettingsResponse
		return ret
	}).(DefaultScaleSettingsResponseOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

type DeploymentResourceConfiguration struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations []string `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfiguration
func (val *DeploymentResourceConfiguration) Defaults() *DeploymentResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

// DeploymentResourceConfigurationInput is an input type that accepts DeploymentResourceConfigurationArgs and DeploymentResourceConfigurationOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationInput` via:
//
//	DeploymentResourceConfigurationArgs{...}
type DeploymentResourceConfigurationInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput
	ToDeploymentResourceConfigurationOutputWithContext(context.Context) DeploymentResourceConfigurationOutput
}

type DeploymentResourceConfigurationArgs struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationArgs
func (val *DeploymentResourceConfigurationArgs) Defaults() *DeploymentResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	return &tmp
}
func (DeploymentResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return i.ToDeploymentResourceConfigurationOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput)
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput).ToDeploymentResourceConfigurationPtrOutputWithContext(ctx)
}

// DeploymentResourceConfigurationPtrInput is an input type that accepts DeploymentResourceConfigurationArgs, DeploymentResourceConfigurationPtr and DeploymentResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationPtrInput` via:
//
//	        DeploymentResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeploymentResourceConfigurationPtrInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput
	ToDeploymentResourceConfigurationPtrOutputWithContext(context.Context) DeploymentResourceConfigurationPtrOutput
}

type deploymentResourceConfigurationPtrType DeploymentResourceConfigurationArgs

func DeploymentResourceConfigurationPtr(v *DeploymentResourceConfigurationArgs) DeploymentResourceConfigurationPtrInput {
	return (*deploymentResourceConfigurationPtrType)(v)
}

func (*deploymentResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationPtrOutput)
}

type DeploymentResourceConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentResourceConfiguration) *DeploymentResourceConfiguration {
		return &v
	}).(DeploymentResourceConfigurationPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o DeploymentResourceConfigurationOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o DeploymentResourceConfigurationOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) Elem() DeploymentResourceConfigurationOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) DeploymentResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfiguration
		return ret
	}).(DeploymentResourceConfigurationOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o DeploymentResourceConfigurationPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o DeploymentResourceConfigurationPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponse struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations []string `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationResponse
func (val *DeploymentResourceConfigurationResponse) Defaults() *DeploymentResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

type DeploymentResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutput() DeploymentResourceConfigurationResponseOutput {
	return o
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponseOutput {
	return o
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o DeploymentResourceConfigurationResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o DeploymentResourceConfigurationResponseOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutput() DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) Elem() DeploymentResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) DeploymentResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfigurationResponse
		return ret
	}).(DeploymentResourceConfigurationResponseOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o DeploymentResourceConfigurationResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o DeploymentResourceConfigurationResponsePtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type Docker struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

// DockerInput is an input type that accepts DockerArgs and DockerOutput values.
// You can construct a concrete instance of `DockerInput` via:
//
//	DockerArgs{...}
type DockerInput interface {
	pulumi.Input

	ToDockerOutput() DockerOutput
	ToDockerOutputWithContext(context.Context) DockerOutput
}

type DockerArgs struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
}

func (DockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Docker)(nil)).Elem()
}

func (i DockerArgs) ToDockerOutput() DockerOutput {
	return i.ToDockerOutputWithContext(context.Background())
}

func (i DockerArgs) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerOutput)
}

func (i DockerArgs) ToDockerPtrOutput() DockerPtrOutput {
	return i.ToDockerPtrOutputWithContext(context.Background())
}

func (i DockerArgs) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerOutput).ToDockerPtrOutputWithContext(ctx)
}

// DockerPtrInput is an input type that accepts DockerArgs, DockerPtr and DockerPtrOutput values.
// You can construct a concrete instance of `DockerPtrInput` via:
//
//	        DockerArgs{...}
//
//	or:
//
//	        nil
type DockerPtrInput interface {
	pulumi.Input

	ToDockerPtrOutput() DockerPtrOutput
	ToDockerPtrOutputWithContext(context.Context) DockerPtrOutput
}

type dockerPtrType DockerArgs

func DockerPtr(v *DockerArgs) DockerPtrInput {
	return (*dockerPtrType)(v)
}

func (*dockerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (i *dockerPtrType) ToDockerPtrOutput() DockerPtrOutput {
	return i.ToDockerPtrOutputWithContext(context.Background())
}

func (i *dockerPtrType) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerPtrOutput)
}

type DockerOutput struct{ *pulumi.OutputState }

func (DockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Docker)(nil)).Elem()
}

func (o DockerOutput) ToDockerOutput() DockerOutput {
	return o
}

func (o DockerOutput) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return o
}

func (o DockerOutput) ToDockerPtrOutput() DockerPtrOutput {
	return o.ToDockerPtrOutputWithContext(context.Background())
}

func (o DockerOutput) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Docker) *Docker {
		return &v
	}).(DockerPtrOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Docker) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

type DockerPtrOutput struct{ *pulumi.OutputState }

func (DockerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (o DockerPtrOutput) ToDockerPtrOutput() DockerPtrOutput {
	return o
}

func (o DockerPtrOutput) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return o
}

func (o DockerPtrOutput) Elem() DockerOutput {
	return o.ApplyT(func(v *Docker) Docker {
		if v != nil {
			return *v
		}
		var ret Docker
		return ret
	}).(DockerOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Docker) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

type DockerResponse struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

type DockerResponseOutput struct{ *pulumi.OutputState }

func (DockerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerResponse)(nil)).Elem()
}

func (o DockerResponseOutput) ToDockerResponseOutput() DockerResponseOutput {
	return o
}

func (o DockerResponseOutput) ToDockerResponseOutputWithContext(ctx context.Context) DockerResponseOutput {
	return o
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerResponseOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerResponse) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

type DockerResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerResponse)(nil)).Elem()
}

func (o DockerResponsePtrOutput) ToDockerResponsePtrOutput() DockerResponsePtrOutput {
	return o
}

func (o DockerResponsePtrOutput) ToDockerResponsePtrOutputWithContext(ctx context.Context) DockerResponsePtrOutput {
	return o
}

func (o DockerResponsePtrOutput) Elem() DockerResponseOutput {
	return o.ApplyT(func(v *DockerResponse) DockerResponse {
		if v != nil {
			return *v
		}
		var ret DockerResponse
		return ret
	}).(DockerResponseOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerResponsePtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

type EncryptionProperty struct {
	// The byok cosmosdb account that customer brings to store customer's data
	// with encryption
	CosmosDbResourceId *string `pulumi:"cosmosDbResourceId"`
	// Identity to be used with the keyVault
	Identity *IdentityForCmk `pulumi:"identity"`
	// KeyVault details to do the encryption
	KeyVaultProperties KeyVaultProperties `pulumi:"keyVaultProperties"`
	// The byok search account that customer brings to store customer's data
	// with encryption
	SearchAccountResourceId *string `pulumi:"searchAccountResourceId"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
	// The byok storage account that customer brings to store customer's data
	// with encryption
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

// EncryptionPropertyInput is an input type that accepts EncryptionPropertyArgs and EncryptionPropertyOutput values.
// You can construct a concrete instance of `EncryptionPropertyInput` via:
//
//	EncryptionPropertyArgs{...}
type EncryptionPropertyInput interface {
	pulumi.Input

	ToEncryptionPropertyOutput() EncryptionPropertyOutput
	ToEncryptionPropertyOutputWithContext(context.Context) EncryptionPropertyOutput
}

type EncryptionPropertyArgs struct {
	// The byok cosmosdb account that customer brings to store customer's data
	// with encryption
	CosmosDbResourceId pulumi.StringPtrInput `pulumi:"cosmosDbResourceId"`
	// Identity to be used with the keyVault
	Identity IdentityForCmkPtrInput `pulumi:"identity"`
	// KeyVault details to do the encryption
	KeyVaultProperties KeyVaultPropertiesInput `pulumi:"keyVaultProperties"`
	// The byok search account that customer brings to store customer's data
	// with encryption
	SearchAccountResourceId pulumi.StringPtrInput `pulumi:"searchAccountResourceId"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status pulumi.StringInput `pulumi:"status"`
	// The byok storage account that customer brings to store customer's data
	// with encryption
	StorageAccountResourceId pulumi.StringPtrInput `pulumi:"storageAccountResourceId"`
}

func (EncryptionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return i.ToEncryptionPropertyOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput)
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput).ToEncryptionPropertyPtrOutputWithContext(ctx)
}

// EncryptionPropertyPtrInput is an input type that accepts EncryptionPropertyArgs, EncryptionPropertyPtr and EncryptionPropertyPtrOutput values.
// You can construct a concrete instance of `EncryptionPropertyPtrInput` via:
//
//	        EncryptionPropertyArgs{...}
//
//	or:
//
//	        nil
type EncryptionPropertyPtrInput interface {
	pulumi.Input

	ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput
	ToEncryptionPropertyPtrOutputWithContext(context.Context) EncryptionPropertyPtrOutput
}

type encryptionPropertyPtrType EncryptionPropertyArgs

func EncryptionPropertyPtr(v *EncryptionPropertyArgs) EncryptionPropertyPtrInput {
	return (*encryptionPropertyPtrType)(v)
}

func (*encryptionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyPtrOutput)
}

type EncryptionPropertyOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionProperty) *EncryptionProperty {
		return &v
	}).(EncryptionPropertyPtrOutput)
}

// The byok cosmosdb account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyOutput) CosmosDbResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *string { return v.CosmosDbResourceId }).(pulumi.StringPtrOutput)
}

// Identity to be used with the keyVault
func (o EncryptionPropertyOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *IdentityForCmk { return v.Identity }).(IdentityForCmkPtrOutput)
}

// KeyVault details to do the encryption
func (o EncryptionPropertyOutput) KeyVaultProperties() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v EncryptionProperty) KeyVaultProperties { return v.KeyVaultProperties }).(KeyVaultPropertiesOutput)
}

// The byok search account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyOutput) SearchAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *string { return v.SearchAccountResourceId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperty) string { return v.Status }).(pulumi.StringOutput)
}

// The byok storage account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type EncryptionPropertyPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) Elem() EncryptionPropertyOutput {
	return o.ApplyT(func(v *EncryptionProperty) EncryptionProperty {
		if v != nil {
			return *v
		}
		var ret EncryptionProperty
		return ret
	}).(EncryptionPropertyOutput)
}

// The byok cosmosdb account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyPtrOutput) CosmosDbResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return v.CosmosDbResourceId
	}).(pulumi.StringPtrOutput)
}

// Identity to be used with the keyVault
func (o EncryptionPropertyPtrOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *IdentityForCmk {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkPtrOutput)
}

// KeyVault details to do the encryption
func (o EncryptionPropertyPtrOutput) KeyVaultProperties() KeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *KeyVaultProperties {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(KeyVaultPropertiesPtrOutput)
}

// The byok search account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyPtrOutput) SearchAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return v.SearchAccountResourceId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The byok storage account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyPtrOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountResourceId
	}).(pulumi.StringPtrOutput)
}

type EncryptionPropertyResponse struct {
	// The byok cosmosdb account that customer brings to store customer's data
	// with encryption
	CosmosDbResourceId *string `pulumi:"cosmosDbResourceId"`
	// Identity to be used with the keyVault
	Identity *IdentityForCmkResponse `pulumi:"identity"`
	// KeyVault details to do the encryption
	KeyVaultProperties KeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// The byok search account that customer brings to store customer's data
	// with encryption
	SearchAccountResourceId *string `pulumi:"searchAccountResourceId"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
	// The byok storage account that customer brings to store customer's data
	// with encryption
	StorageAccountResourceId *string `pulumi:"storageAccountResourceId"`
}

type EncryptionPropertyResponseOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutput() EncryptionPropertyResponseOutput {
	return o
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutputWithContext(ctx context.Context) EncryptionPropertyResponseOutput {
	return o
}

// The byok cosmosdb account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponseOutput) CosmosDbResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *string { return v.CosmosDbResourceId }).(pulumi.StringPtrOutput)
}

// Identity to be used with the keyVault
func (o EncryptionPropertyResponseOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *IdentityForCmkResponse { return v.Identity }).(IdentityForCmkResponsePtrOutput)
}

// KeyVault details to do the encryption
func (o EncryptionPropertyResponseOutput) KeyVaultProperties() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) KeyVaultPropertiesResponse { return v.KeyVaultProperties }).(KeyVaultPropertiesResponseOutput)
}

// The byok search account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponseOutput) SearchAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *string { return v.SearchAccountResourceId }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The byok storage account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponseOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *string { return v.StorageAccountResourceId }).(pulumi.StringPtrOutput)
}

type EncryptionPropertyResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutput() EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) Elem() EncryptionPropertyResponseOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) EncryptionPropertyResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionPropertyResponse
		return ret
	}).(EncryptionPropertyResponseOutput)
}

// The byok cosmosdb account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponsePtrOutput) CosmosDbResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return v.CosmosDbResourceId
	}).(pulumi.StringPtrOutput)
}

// Identity to be used with the keyVault
func (o EncryptionPropertyResponsePtrOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *IdentityForCmkResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkResponsePtrOutput)
}

// KeyVault details to do the encryption
func (o EncryptionPropertyResponsePtrOutput) KeyVaultProperties() KeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *KeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(KeyVaultPropertiesResponsePtrOutput)
}

// The byok search account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponsePtrOutput) SearchAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return v.SearchAccountResourceId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// The byok storage account that customer brings to store customer's data
// with encryption
func (o EncryptionPropertyResponsePtrOutput) StorageAccountResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountResourceId
	}).(pulumi.StringPtrOutput)
}

type Endpoint struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for Endpoint
func (val *Endpoint) Defaults() *Endpoint {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//	EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

type EndpointArgs struct {
	// Host IP over which the application is exposed from the container
	HostIp pulumi.StringPtrInput `pulumi:"hostIp"`
	// Name of the Endpoint
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published pulumi.IntPtrInput `pulumi:"published"`
	// Application port inside the container.
	Target pulumi.IntPtrInput `pulumi:"target"`
}

// Defaults sets the appropriate defaults for EndpointArgs
func (val *EndpointArgs) Defaults() *EndpointArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("tcp")
	}
	return &tmp
}
func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// Host IP over which the application is exposed from the container
func (o EndpointOutput) HostIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.HostIp }).(pulumi.StringPtrOutput)
}

// Name of the Endpoint
func (o EndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol over which communication will happen over this endpoint
func (o EndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Port over which the application is exposed from container.
func (o EndpointOutput) Published() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Published }).(pulumi.IntPtrOutput)
}

// Application port inside the container.
func (o EndpointOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Target }).(pulumi.IntPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Endpoint {
		return vs[0].([]Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeys struct {
	// The primary key.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// EndpointAuthKeysInput is an input type that accepts EndpointAuthKeysArgs and EndpointAuthKeysOutput values.
// You can construct a concrete instance of `EndpointAuthKeysInput` via:
//
//	EndpointAuthKeysArgs{...}
type EndpointAuthKeysInput interface {
	pulumi.Input

	ToEndpointAuthKeysOutput() EndpointAuthKeysOutput
	ToEndpointAuthKeysOutputWithContext(context.Context) EndpointAuthKeysOutput
}

// Keys for endpoint authentication.
type EndpointAuthKeysArgs struct {
	// The primary key.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (EndpointAuthKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return i.ToEndpointAuthKeysOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput)
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput).ToEndpointAuthKeysPtrOutputWithContext(ctx)
}

// EndpointAuthKeysPtrInput is an input type that accepts EndpointAuthKeysArgs, EndpointAuthKeysPtr and EndpointAuthKeysPtrOutput values.
// You can construct a concrete instance of `EndpointAuthKeysPtrInput` via:
//
//	        EndpointAuthKeysArgs{...}
//
//	or:
//
//	        nil
type EndpointAuthKeysPtrInput interface {
	pulumi.Input

	ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput
	ToEndpointAuthKeysPtrOutputWithContext(context.Context) EndpointAuthKeysPtrOutput
}

type endpointAuthKeysPtrType EndpointAuthKeysArgs

func EndpointAuthKeysPtr(v *EndpointAuthKeysArgs) EndpointAuthKeysPtrInput {
	return (*endpointAuthKeysPtrType)(v)
}

func (*endpointAuthKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysPtrOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeysOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointAuthKeys) *EndpointAuthKeys {
		return &v
	}).(EndpointAuthKeysPtrOutput)
}

// The primary key.
func (o EndpointAuthKeysOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type EndpointAuthKeysPtrOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) Elem() EndpointAuthKeysOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) EndpointAuthKeys {
		if v != nil {
			return *v
		}
		var ret EndpointAuthKeys
		return ret
	}).(EndpointAuthKeysOutput)
}

// The primary key.
func (o EndpointAuthKeysPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysPtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

type EndpointDeploymentModel struct {
	// Model format
	Format *string `pulumi:"format"`
	// Model name.
	Name *string `pulumi:"name"`
	// Optional. Deployment model source ARM resource ID.
	Source *string `pulumi:"source"`
	// Model version.
	Version *string `pulumi:"version"`
}

// EndpointDeploymentModelInput is an input type that accepts EndpointDeploymentModelArgs and EndpointDeploymentModelOutput values.
// You can construct a concrete instance of `EndpointDeploymentModelInput` via:
//
//	EndpointDeploymentModelArgs{...}
type EndpointDeploymentModelInput interface {
	pulumi.Input

	ToEndpointDeploymentModelOutput() EndpointDeploymentModelOutput
	ToEndpointDeploymentModelOutputWithContext(context.Context) EndpointDeploymentModelOutput
}

type EndpointDeploymentModelArgs struct {
	// Model format
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Model name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. Deployment model source ARM resource ID.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Model version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (EndpointDeploymentModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeploymentModel)(nil)).Elem()
}

func (i EndpointDeploymentModelArgs) ToEndpointDeploymentModelOutput() EndpointDeploymentModelOutput {
	return i.ToEndpointDeploymentModelOutputWithContext(context.Background())
}

func (i EndpointDeploymentModelArgs) ToEndpointDeploymentModelOutputWithContext(ctx context.Context) EndpointDeploymentModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointDeploymentModelOutput)
}

type EndpointDeploymentModelOutput struct{ *pulumi.OutputState }

func (EndpointDeploymentModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeploymentModel)(nil)).Elem()
}

func (o EndpointDeploymentModelOutput) ToEndpointDeploymentModelOutput() EndpointDeploymentModelOutput {
	return o
}

func (o EndpointDeploymentModelOutput) ToEndpointDeploymentModelOutputWithContext(ctx context.Context) EndpointDeploymentModelOutput {
	return o
}

// Model format
func (o EndpointDeploymentModelOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModel) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Model name.
func (o EndpointDeploymentModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. Deployment model source ARM resource ID.
func (o EndpointDeploymentModelOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModel) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Model version.
func (o EndpointDeploymentModelOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModel) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EndpointDeploymentModelResponse struct {
	// Model format
	Format *string `pulumi:"format"`
	// Model name.
	Name *string `pulumi:"name"`
	// Optional. Deployment model source ARM resource ID.
	Source *string `pulumi:"source"`
	// Model version.
	Version *string `pulumi:"version"`
}

type EndpointDeploymentModelResponseOutput struct{ *pulumi.OutputState }

func (EndpointDeploymentModelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointDeploymentModelResponse)(nil)).Elem()
}

func (o EndpointDeploymentModelResponseOutput) ToEndpointDeploymentModelResponseOutput() EndpointDeploymentModelResponseOutput {
	return o
}

func (o EndpointDeploymentModelResponseOutput) ToEndpointDeploymentModelResponseOutputWithContext(ctx context.Context) EndpointDeploymentModelResponseOutput {
	return o
}

// Model format
func (o EndpointDeploymentModelResponseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModelResponse) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Model name.
func (o EndpointDeploymentModelResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModelResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. Deployment model source ARM resource ID.
func (o EndpointDeploymentModelResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModelResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Model version.
func (o EndpointDeploymentModelResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointDeploymentModelResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type EndpointResponse struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for EndpointResponse
func (val *EndpointResponse) Defaults() *EndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

type EndpointResponseOutput struct{ *pulumi.OutputState }

func (EndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseOutput) ToEndpointResponseOutput() EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return o
}

// Host IP over which the application is exposed from the container
func (o EndpointResponseOutput) HostIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.HostIp }).(pulumi.StringPtrOutput)
}

// Name of the Endpoint
func (o EndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol over which communication will happen over this endpoint
func (o EndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Port over which the application is exposed from container.
func (o EndpointResponseOutput) Published() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *int { return v.Published }).(pulumi.IntPtrOutput)
}

// Application port inside the container.
func (o EndpointResponseOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *int { return v.Target }).(pulumi.IntPtrOutput)
}

type EndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) Index(i pulumi.IntInput) EndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointResponse {
		return vs[0].([]EndpointResponse)[vs[1].(int)]
	}).(EndpointResponseOutput)
}

type EndpointScheduleAction struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

// EndpointScheduleActionInput is an input type that accepts EndpointScheduleActionArgs and EndpointScheduleActionOutput values.
// You can construct a concrete instance of `EndpointScheduleActionInput` via:
//
//	EndpointScheduleActionArgs{...}
type EndpointScheduleActionInput interface {
	pulumi.Input

	ToEndpointScheduleActionOutput() EndpointScheduleActionOutput
	ToEndpointScheduleActionOutputWithContext(context.Context) EndpointScheduleActionOutput
}

type EndpointScheduleActionArgs struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition pulumi.Input `pulumi:"endpointInvocationDefinition"`
}

func (EndpointScheduleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleAction)(nil)).Elem()
}

func (i EndpointScheduleActionArgs) ToEndpointScheduleActionOutput() EndpointScheduleActionOutput {
	return i.ToEndpointScheduleActionOutputWithContext(context.Background())
}

func (i EndpointScheduleActionArgs) ToEndpointScheduleActionOutputWithContext(ctx context.Context) EndpointScheduleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointScheduleActionOutput)
}

type EndpointScheduleActionOutput struct{ *pulumi.OutputState }

func (EndpointScheduleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleAction)(nil)).Elem()
}

func (o EndpointScheduleActionOutput) ToEndpointScheduleActionOutput() EndpointScheduleActionOutput {
	return o
}

func (o EndpointScheduleActionOutput) ToEndpointScheduleActionOutputWithContext(ctx context.Context) EndpointScheduleActionOutput {
	return o
}

// Expected value is 'InvokeBatchEndpoint'.
func (o EndpointScheduleActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointScheduleAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
// <see href="TBD" />
func (o EndpointScheduleActionOutput) EndpointInvocationDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v EndpointScheduleAction) interface{} { return v.EndpointInvocationDefinition }).(pulumi.AnyOutput)
}

type EndpointScheduleActionResponse struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

type EndpointScheduleActionResponseOutput struct{ *pulumi.OutputState }

func (EndpointScheduleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleActionResponse)(nil)).Elem()
}

func (o EndpointScheduleActionResponseOutput) ToEndpointScheduleActionResponseOutput() EndpointScheduleActionResponseOutput {
	return o
}

func (o EndpointScheduleActionResponseOutput) ToEndpointScheduleActionResponseOutputWithContext(ctx context.Context) EndpointScheduleActionResponseOutput {
	return o
}

// Expected value is 'InvokeBatchEndpoint'.
func (o EndpointScheduleActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointScheduleActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
// <see href="TBD" />
func (o EndpointScheduleActionResponseOutput) EndpointInvocationDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v EndpointScheduleActionResponse) interface{} { return v.EndpointInvocationDefinition }).(pulumi.AnyOutput)
}

// Container for environment specification versions.
type EnvironmentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerType
func (val *EnvironmentContainerType) Defaults() *EnvironmentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// EnvironmentContainerTypeInput is an input type that accepts EnvironmentContainerTypeArgs and EnvironmentContainerTypeOutput values.
// You can construct a concrete instance of `EnvironmentContainerTypeInput` via:
//
//	EnvironmentContainerTypeArgs{...}
type EnvironmentContainerTypeInput interface {
	pulumi.Input

	ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput
	ToEnvironmentContainerTypeOutputWithContext(context.Context) EnvironmentContainerTypeOutput
}

// Container for environment specification versions.
type EnvironmentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerTypeArgs
func (val *EnvironmentContainerTypeArgs) Defaults() *EnvironmentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EnvironmentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return i.ToEnvironmentContainerTypeOutputWithContext(context.Background())
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentContainerTypeOutput)
}

// Container for environment specification versions.
type EnvironmentContainerTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return o
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for environment specification versions.
type EnvironmentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerResponse
func (val *EnvironmentContainerResponse) Defaults() *EnvironmentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for environment specification versions.
type EnvironmentContainerResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerResponse)(nil)).Elem()
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutput() EnvironmentContainerResponseOutput {
	return o
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutputWithContext(ctx context.Context) EnvironmentContainerResponseOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o EnvironmentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o EnvironmentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment container.
func (o EnvironmentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type EnvironmentVariable struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariable
func (val *EnvironmentVariable) Defaults() *EnvironmentVariable {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//	EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

type EnvironmentVariableArgs struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of the Environment variable
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariableArgs
func (val *EnvironmentVariableArgs) Defaults() *EnvironmentVariableArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("local")
	}
	return &tmp
}
func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableMapInput is an input type that accepts EnvironmentVariableMap and EnvironmentVariableMapOutput values.
// You can construct a concrete instance of `EnvironmentVariableMapInput` via:
//
//	EnvironmentVariableMap{ "key": EnvironmentVariableArgs{...} }
type EnvironmentVariableMapInput interface {
	pulumi.Input

	ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput
	ToEnvironmentVariableMapOutputWithContext(context.Context) EnvironmentVariableMapOutput
}

type EnvironmentVariableMap map[string]EnvironmentVariableInput

func (EnvironmentVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableMap) ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput {
	return i.ToEnvironmentVariableMapOutputWithContext(context.Background())
}

func (i EnvironmentVariableMap) ToEnvironmentVariableMapOutputWithContext(ctx context.Context) EnvironmentVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableMapOutput)
}

type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// Type of the Environment Variable. Possible values are: local - For local variable
func (o EnvironmentVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the Environment variable
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableMapOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableMapOutput) ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput {
	return o
}

func (o EnvironmentVariableMapOutput) ToEnvironmentVariableMapOutputWithContext(ctx context.Context) EnvironmentVariableMapOutput {
	return o
}

func (o EnvironmentVariableMapOutput) MapIndex(k pulumi.StringInput) EnvironmentVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].(map[string]EnvironmentVariable)[vs[1].(string)]
	}).(EnvironmentVariableOutput)
}

type EnvironmentVariableResponse struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariableResponse
func (val *EnvironmentVariableResponse) Defaults() *EnvironmentVariableResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// Type of the Environment Variable. Possible values are: local - For local variable
func (o EnvironmentVariableResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the Environment variable
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseMapOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseMapOutput) ToEnvironmentVariableResponseMapOutput() EnvironmentVariableResponseMapOutput {
	return o
}

func (o EnvironmentVariableResponseMapOutput) ToEnvironmentVariableResponseMapOutputWithContext(ctx context.Context) EnvironmentVariableResponseMapOutput {
	return o
}

func (o EnvironmentVariableResponseMapOutput) MapIndex(k pulumi.StringInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].(map[string]EnvironmentVariableResponse)[vs[1].(string)]
	}).(EnvironmentVariableResponseOutput)
}

// Environment version details.
type EnvironmentVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContext `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerProperties `pulumi:"inferenceConfig"`
	// Intellectual Property details. Used if environment is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionType
func (val *EnvironmentVersionType) Defaults() *EnvironmentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// EnvironmentVersionTypeInput is an input type that accepts EnvironmentVersionTypeArgs and EnvironmentVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentVersionTypeInput` via:
//
//	EnvironmentVersionTypeArgs{...}
type EnvironmentVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput
	ToEnvironmentVersionTypeOutputWithContext(context.Context) EnvironmentVersionTypeOutput
}

// Environment version details.
type EnvironmentVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild pulumi.StringPtrInput `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build BuildContextPtrInput `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig InferenceContainerPropertiesPtrInput `pulumi:"inferenceConfig"`
	// Intellectual Property details. Used if environment is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionTypeArgs
func (val *EnvironmentVersionTypeArgs) Defaults() *EnvironmentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.AutoRebuild == nil {
		tmp.AutoRebuild = pulumi.StringPtr("Disabled")
	}

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (EnvironmentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return i.ToEnvironmentVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTypeOutput)
}

// Environment version details.
type EnvironmentVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return o
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o EnvironmentVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionTypeOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionTypeOutput) Build() BuildContextPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *BuildContext { return v.Build }).(BuildContextPtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionTypeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionTypeOutput) InferenceConfig() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *InferenceContainerProperties { return v.InferenceConfig }).(InferenceContainerPropertiesPtrOutput)
}

// Intellectual Property details. Used if environment is an Intellectual Property.
func (o EnvironmentVersionTypeOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o EnvironmentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o EnvironmentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionTypeOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment version details.
type EnvironmentVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContextResponse `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Environment type is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentType string `pulumi:"environmentType"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerPropertiesResponse `pulumi:"inferenceConfig"`
	// Intellectual Property details. Used if environment is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionResponse
func (val *EnvironmentVersionResponse) Defaults() *EnvironmentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// Environment version details.
type EnvironmentVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionResponse)(nil)).Elem()
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutput() EnvironmentVersionResponseOutput {
	return o
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutputWithContext(ctx context.Context) EnvironmentVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o EnvironmentVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionResponseOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionResponseOutput) Build() BuildContextResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *BuildContextResponse { return v.Build }).(BuildContextResponsePtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment type is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentVersionResponseOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.EnvironmentType }).(pulumi.StringOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionResponseOutput) InferenceConfig() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *InferenceContainerPropertiesResponse { return v.InferenceConfig }).(InferenceContainerPropertiesResponsePtrOutput)
}

// Intellectual Property details. Used if environment is an Intellectual Property.
func (o EnvironmentVersionResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o EnvironmentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o EnvironmentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment version.
func (o EnvironmentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutput() ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutputWithContext(ctx context.Context) ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) Elem() ErrorDetailResponseOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) ErrorDetailResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDetailResponse
		return ret
	}).(ErrorDetailResponseOutput)
}

// The error additional info.
func (o ErrorDetailResponsePtrOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorAdditionalInfoResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalInfo
	}).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorDetailResponsePtrOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorDetailResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorDetailResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponse struct {
	// The error object.
	Error *ErrorDetailResponse `pulumi:"error"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutput() ErrorResponseResponseOutput {
	return o
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutputWithContext(ctx context.Context) ErrorResponseResponseOutput {
	return o
}

// The error object.
func (o ErrorResponseResponseOutput) Error() ErrorDetailResponsePtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *ErrorDetailResponse { return v.Error }).(ErrorDetailResponsePtrOutput)
}

type ErrorResponseResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutput() ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutputWithContext(ctx context.Context) ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponseResponse {
		return vs[0].([]ErrorResponseResponse)[vs[1].(int)]
	}).(ErrorResponseResponseOutput)
}

// The estimated price info for using a VM of a particular OS type, tier, etc.
type EstimatedVMPriceResponse struct {
	// Operating system type used by the VM.
	OsType string `pulumi:"osType"`
	// The price charged for using the VM.
	RetailPrice float64 `pulumi:"retailPrice"`
	// The type of the VM.
	VmTier string `pulumi:"vmTier"`
}

// The estimated price info for using a VM of a particular OS type, tier, etc.
type EstimatedVMPriceResponseOutput struct{ *pulumi.OutputState }

func (EstimatedVMPriceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EstimatedVMPriceResponse)(nil)).Elem()
}

func (o EstimatedVMPriceResponseOutput) ToEstimatedVMPriceResponseOutput() EstimatedVMPriceResponseOutput {
	return o
}

func (o EstimatedVMPriceResponseOutput) ToEstimatedVMPriceResponseOutputWithContext(ctx context.Context) EstimatedVMPriceResponseOutput {
	return o
}

// Operating system type used by the VM.
func (o EstimatedVMPriceResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPriceResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The price charged for using the VM.
func (o EstimatedVMPriceResponseOutput) RetailPrice() pulumi.Float64Output {
	return o.ApplyT(func(v EstimatedVMPriceResponse) float64 { return v.RetailPrice }).(pulumi.Float64Output)
}

// The type of the VM.
func (o EstimatedVMPriceResponseOutput) VmTier() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPriceResponse) string { return v.VmTier }).(pulumi.StringOutput)
}

type EstimatedVMPriceResponseArrayOutput struct{ *pulumi.OutputState }

func (EstimatedVMPriceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EstimatedVMPriceResponse)(nil)).Elem()
}

func (o EstimatedVMPriceResponseArrayOutput) ToEstimatedVMPriceResponseArrayOutput() EstimatedVMPriceResponseArrayOutput {
	return o
}

func (o EstimatedVMPriceResponseArrayOutput) ToEstimatedVMPriceResponseArrayOutputWithContext(ctx context.Context) EstimatedVMPriceResponseArrayOutput {
	return o
}

func (o EstimatedVMPriceResponseArrayOutput) Index(i pulumi.IntInput) EstimatedVMPriceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EstimatedVMPriceResponse {
		return vs[0].([]EstimatedVMPriceResponse)[vs[1].(int)]
	}).(EstimatedVMPriceResponseOutput)
}

// The estimated price info for using a VM.
type EstimatedVMPricesResponse struct {
	// Three lettered code specifying the currency of the VM price. Example: USD
	BillingCurrency string `pulumi:"billingCurrency"`
	// The unit of time measurement for the specified VM price. Example: OneHour
	UnitOfMeasure string `pulumi:"unitOfMeasure"`
	// The list of estimated prices for using a VM of a particular OS type, tier, etc.
	Values []EstimatedVMPriceResponse `pulumi:"values"`
}

// The estimated price info for using a VM.
type EstimatedVMPricesResponseOutput struct{ *pulumi.OutputState }

func (EstimatedVMPricesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EstimatedVMPricesResponse)(nil)).Elem()
}

func (o EstimatedVMPricesResponseOutput) ToEstimatedVMPricesResponseOutput() EstimatedVMPricesResponseOutput {
	return o
}

func (o EstimatedVMPricesResponseOutput) ToEstimatedVMPricesResponseOutputWithContext(ctx context.Context) EstimatedVMPricesResponseOutput {
	return o
}

// Three lettered code specifying the currency of the VM price. Example: USD
func (o EstimatedVMPricesResponseOutput) BillingCurrency() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) string { return v.BillingCurrency }).(pulumi.StringOutput)
}

// The unit of time measurement for the specified VM price. Example: OneHour
func (o EstimatedVMPricesResponseOutput) UnitOfMeasure() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) string { return v.UnitOfMeasure }).(pulumi.StringOutput)
}

// The list of estimated prices for using a VM of a particular OS type, tier, etc.
func (o EstimatedVMPricesResponseOutput) Values() EstimatedVMPriceResponseArrayOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) []EstimatedVMPriceResponse { return v.Values }).(EstimatedVMPriceResponseArrayOutput)
}

type EstimatedVMPricesResponsePtrOutput struct{ *pulumi.OutputState }

func (EstimatedVMPricesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EstimatedVMPricesResponse)(nil)).Elem()
}

func (o EstimatedVMPricesResponsePtrOutput) ToEstimatedVMPricesResponsePtrOutput() EstimatedVMPricesResponsePtrOutput {
	return o
}

func (o EstimatedVMPricesResponsePtrOutput) ToEstimatedVMPricesResponsePtrOutputWithContext(ctx context.Context) EstimatedVMPricesResponsePtrOutput {
	return o
}

func (o EstimatedVMPricesResponsePtrOutput) Elem() EstimatedVMPricesResponseOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) EstimatedVMPricesResponse {
		if v != nil {
			return *v
		}
		var ret EstimatedVMPricesResponse
		return ret
	}).(EstimatedVMPricesResponseOutput)
}

// Three lettered code specifying the currency of the VM price. Example: USD
func (o EstimatedVMPricesResponsePtrOutput) BillingCurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BillingCurrency
	}).(pulumi.StringPtrOutput)
}

// The unit of time measurement for the specified VM price. Example: OneHour
func (o EstimatedVMPricesResponsePtrOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UnitOfMeasure
	}).(pulumi.StringPtrOutput)
}

// The list of estimated prices for using a VM of a particular OS type, tier, etc.
func (o EstimatedVMPricesResponsePtrOutput) Values() EstimatedVMPriceResponseArrayOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) []EstimatedVMPriceResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(EstimatedVMPriceResponseArrayOutput)
}

type FeatureAttributionDriftMonitoringSignal struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// [Required] The settings for computing feature importance.
	FeatureImportanceSettings FeatureImportanceSettings `pulumi:"featureImportanceSettings"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold FeatureAttributionMetricThreshold `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'FeatureAttributionDrift'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for FeatureAttributionDriftMonitoringSignal
func (val *FeatureAttributionDriftMonitoringSignal) Defaults() *FeatureAttributionDriftMonitoringSignal {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = *tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

// FeatureAttributionDriftMonitoringSignalInput is an input type that accepts FeatureAttributionDriftMonitoringSignalArgs and FeatureAttributionDriftMonitoringSignalOutput values.
// You can construct a concrete instance of `FeatureAttributionDriftMonitoringSignalInput` via:
//
//	FeatureAttributionDriftMonitoringSignalArgs{...}
type FeatureAttributionDriftMonitoringSignalInput interface {
	pulumi.Input

	ToFeatureAttributionDriftMonitoringSignalOutput() FeatureAttributionDriftMonitoringSignalOutput
	ToFeatureAttributionDriftMonitoringSignalOutputWithContext(context.Context) FeatureAttributionDriftMonitoringSignalOutput
}

type FeatureAttributionDriftMonitoringSignalArgs struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride pulumi.StringMapInput `pulumi:"featureDataTypeOverride"`
	// [Required] The settings for computing feature importance.
	FeatureImportanceSettings FeatureImportanceSettingsInput `pulumi:"featureImportanceSettings"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold FeatureAttributionMetricThresholdInput `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData pulumi.ArrayInput `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData pulumi.Input `pulumi:"referenceData"`
	// Expected value is 'FeatureAttributionDrift'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for FeatureAttributionDriftMonitoringSignalArgs
func (val *FeatureAttributionDriftMonitoringSignalArgs) Defaults() *FeatureAttributionDriftMonitoringSignalArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (FeatureAttributionDriftMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionDriftMonitoringSignal)(nil)).Elem()
}

func (i FeatureAttributionDriftMonitoringSignalArgs) ToFeatureAttributionDriftMonitoringSignalOutput() FeatureAttributionDriftMonitoringSignalOutput {
	return i.ToFeatureAttributionDriftMonitoringSignalOutputWithContext(context.Background())
}

func (i FeatureAttributionDriftMonitoringSignalArgs) ToFeatureAttributionDriftMonitoringSignalOutputWithContext(ctx context.Context) FeatureAttributionDriftMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureAttributionDriftMonitoringSignalOutput)
}

type FeatureAttributionDriftMonitoringSignalOutput struct{ *pulumi.OutputState }

func (FeatureAttributionDriftMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionDriftMonitoringSignal)(nil)).Elem()
}

func (o FeatureAttributionDriftMonitoringSignalOutput) ToFeatureAttributionDriftMonitoringSignalOutput() FeatureAttributionDriftMonitoringSignalOutput {
	return o
}

func (o FeatureAttributionDriftMonitoringSignalOutput) ToFeatureAttributionDriftMonitoringSignalOutputWithContext(ctx context.Context) FeatureAttributionDriftMonitoringSignalOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o FeatureAttributionDriftMonitoringSignalOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// [Required] The settings for computing feature importance.
func (o FeatureAttributionDriftMonitoringSignalOutput) FeatureImportanceSettings() FeatureImportanceSettingsOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) FeatureImportanceSettings {
		return v.FeatureImportanceSettings
	}).(FeatureImportanceSettingsOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o FeatureAttributionDriftMonitoringSignalOutput) MetricThreshold() FeatureAttributionMetricThresholdOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) FeatureAttributionMetricThreshold {
		return v.MetricThreshold
	}).(FeatureAttributionMetricThresholdOutput)
}

// The current notification mode for this signal.
func (o FeatureAttributionDriftMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o FeatureAttributionDriftMonitoringSignalOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o FeatureAttributionDriftMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o FeatureAttributionDriftMonitoringSignalOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'FeatureAttributionDrift'.
func (o FeatureAttributionDriftMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

type FeatureAttributionDriftMonitoringSignalResponse struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// [Required] The settings for computing feature importance.
	FeatureImportanceSettings FeatureImportanceSettingsResponse `pulumi:"featureImportanceSettings"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold FeatureAttributionMetricThresholdResponse `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'FeatureAttributionDrift'.
	SignalType string `pulumi:"signalType"`
}

// Defaults sets the appropriate defaults for FeatureAttributionDriftMonitoringSignalResponse
func (val *FeatureAttributionDriftMonitoringSignalResponse) Defaults() *FeatureAttributionDriftMonitoringSignalResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeatureImportanceSettings = *tmp.FeatureImportanceSettings.Defaults()

	return &tmp
}

type FeatureAttributionDriftMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (FeatureAttributionDriftMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionDriftMonitoringSignalResponse)(nil)).Elem()
}

func (o FeatureAttributionDriftMonitoringSignalResponseOutput) ToFeatureAttributionDriftMonitoringSignalResponseOutput() FeatureAttributionDriftMonitoringSignalResponseOutput {
	return o
}

func (o FeatureAttributionDriftMonitoringSignalResponseOutput) ToFeatureAttributionDriftMonitoringSignalResponseOutputWithContext(ctx context.Context) FeatureAttributionDriftMonitoringSignalResponseOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) map[string]string {
		return v.FeatureDataTypeOverride
	}).(pulumi.StringMapOutput)
}

// [Required] The settings for computing feature importance.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) FeatureImportanceSettings() FeatureImportanceSettingsResponseOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) FeatureImportanceSettingsResponse {
		return v.FeatureImportanceSettings
	}).(FeatureImportanceSettingsResponseOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) MetricThreshold() FeatureAttributionMetricThresholdResponseOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) FeatureAttributionMetricThresholdResponse {
		return v.MetricThreshold
	}).(FeatureAttributionMetricThresholdResponseOutput)
}

// The current notification mode for this signal.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'FeatureAttributionDrift'.
func (o FeatureAttributionDriftMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureAttributionDriftMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

type FeatureAttributionMetricThreshold struct {
	// [Required] The feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// FeatureAttributionMetricThresholdInput is an input type that accepts FeatureAttributionMetricThresholdArgs and FeatureAttributionMetricThresholdOutput values.
// You can construct a concrete instance of `FeatureAttributionMetricThresholdInput` via:
//
//	FeatureAttributionMetricThresholdArgs{...}
type FeatureAttributionMetricThresholdInput interface {
	pulumi.Input

	ToFeatureAttributionMetricThresholdOutput() FeatureAttributionMetricThresholdOutput
	ToFeatureAttributionMetricThresholdOutputWithContext(context.Context) FeatureAttributionMetricThresholdOutput
}

type FeatureAttributionMetricThresholdArgs struct {
	// [Required] The feature attribution metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (FeatureAttributionMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionMetricThreshold)(nil)).Elem()
}

func (i FeatureAttributionMetricThresholdArgs) ToFeatureAttributionMetricThresholdOutput() FeatureAttributionMetricThresholdOutput {
	return i.ToFeatureAttributionMetricThresholdOutputWithContext(context.Background())
}

func (i FeatureAttributionMetricThresholdArgs) ToFeatureAttributionMetricThresholdOutputWithContext(ctx context.Context) FeatureAttributionMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureAttributionMetricThresholdOutput)
}

type FeatureAttributionMetricThresholdOutput struct{ *pulumi.OutputState }

func (FeatureAttributionMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionMetricThreshold)(nil)).Elem()
}

func (o FeatureAttributionMetricThresholdOutput) ToFeatureAttributionMetricThresholdOutput() FeatureAttributionMetricThresholdOutput {
	return o
}

func (o FeatureAttributionMetricThresholdOutput) ToFeatureAttributionMetricThresholdOutputWithContext(ctx context.Context) FeatureAttributionMetricThresholdOutput {
	return o
}

// [Required] The feature attribution metric to calculate.
func (o FeatureAttributionMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureAttributionMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o FeatureAttributionMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v FeatureAttributionMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type FeatureAttributionMetricThresholdResponse struct {
	// [Required] The feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type FeatureAttributionMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (FeatureAttributionMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureAttributionMetricThresholdResponse)(nil)).Elem()
}

func (o FeatureAttributionMetricThresholdResponseOutput) ToFeatureAttributionMetricThresholdResponseOutput() FeatureAttributionMetricThresholdResponseOutput {
	return o
}

func (o FeatureAttributionMetricThresholdResponseOutput) ToFeatureAttributionMetricThresholdResponseOutputWithContext(ctx context.Context) FeatureAttributionMetricThresholdResponseOutput {
	return o
}

// [Required] The feature attribution metric to calculate.
func (o FeatureAttributionMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureAttributionMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o FeatureAttributionMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v FeatureAttributionMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type FeatureImportanceSettings struct {
	// The mode of operation for computing feature importance.
	Mode *string `pulumi:"mode"`
	// The name of the target column within the input data asset.
	TargetColumn *string `pulumi:"targetColumn"`
}

// Defaults sets the appropriate defaults for FeatureImportanceSettings
func (val *FeatureImportanceSettings) Defaults() *FeatureImportanceSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "Disabled"
		tmp.Mode = &mode_
	}
	return &tmp
}

// FeatureImportanceSettingsInput is an input type that accepts FeatureImportanceSettingsArgs and FeatureImportanceSettingsOutput values.
// You can construct a concrete instance of `FeatureImportanceSettingsInput` via:
//
//	FeatureImportanceSettingsArgs{...}
type FeatureImportanceSettingsInput interface {
	pulumi.Input

	ToFeatureImportanceSettingsOutput() FeatureImportanceSettingsOutput
	ToFeatureImportanceSettingsOutputWithContext(context.Context) FeatureImportanceSettingsOutput
}

type FeatureImportanceSettingsArgs struct {
	// The mode of operation for computing feature importance.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The name of the target column within the input data asset.
	TargetColumn pulumi.StringPtrInput `pulumi:"targetColumn"`
}

// Defaults sets the appropriate defaults for FeatureImportanceSettingsArgs
func (val *FeatureImportanceSettingsArgs) Defaults() *FeatureImportanceSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (FeatureImportanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureImportanceSettings)(nil)).Elem()
}

func (i FeatureImportanceSettingsArgs) ToFeatureImportanceSettingsOutput() FeatureImportanceSettingsOutput {
	return i.ToFeatureImportanceSettingsOutputWithContext(context.Background())
}

func (i FeatureImportanceSettingsArgs) ToFeatureImportanceSettingsOutputWithContext(ctx context.Context) FeatureImportanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureImportanceSettingsOutput)
}

func (i FeatureImportanceSettingsArgs) ToFeatureImportanceSettingsPtrOutput() FeatureImportanceSettingsPtrOutput {
	return i.ToFeatureImportanceSettingsPtrOutputWithContext(context.Background())
}

func (i FeatureImportanceSettingsArgs) ToFeatureImportanceSettingsPtrOutputWithContext(ctx context.Context) FeatureImportanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureImportanceSettingsOutput).ToFeatureImportanceSettingsPtrOutputWithContext(ctx)
}

// FeatureImportanceSettingsPtrInput is an input type that accepts FeatureImportanceSettingsArgs, FeatureImportanceSettingsPtr and FeatureImportanceSettingsPtrOutput values.
// You can construct a concrete instance of `FeatureImportanceSettingsPtrInput` via:
//
//	        FeatureImportanceSettingsArgs{...}
//
//	or:
//
//	        nil
type FeatureImportanceSettingsPtrInput interface {
	pulumi.Input

	ToFeatureImportanceSettingsPtrOutput() FeatureImportanceSettingsPtrOutput
	ToFeatureImportanceSettingsPtrOutputWithContext(context.Context) FeatureImportanceSettingsPtrOutput
}

type featureImportanceSettingsPtrType FeatureImportanceSettingsArgs

func FeatureImportanceSettingsPtr(v *FeatureImportanceSettingsArgs) FeatureImportanceSettingsPtrInput {
	return (*featureImportanceSettingsPtrType)(v)
}

func (*featureImportanceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureImportanceSettings)(nil)).Elem()
}

func (i *featureImportanceSettingsPtrType) ToFeatureImportanceSettingsPtrOutput() FeatureImportanceSettingsPtrOutput {
	return i.ToFeatureImportanceSettingsPtrOutputWithContext(context.Background())
}

func (i *featureImportanceSettingsPtrType) ToFeatureImportanceSettingsPtrOutputWithContext(ctx context.Context) FeatureImportanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureImportanceSettingsPtrOutput)
}

type FeatureImportanceSettingsOutput struct{ *pulumi.OutputState }

func (FeatureImportanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureImportanceSettings)(nil)).Elem()
}

func (o FeatureImportanceSettingsOutput) ToFeatureImportanceSettingsOutput() FeatureImportanceSettingsOutput {
	return o
}

func (o FeatureImportanceSettingsOutput) ToFeatureImportanceSettingsOutputWithContext(ctx context.Context) FeatureImportanceSettingsOutput {
	return o
}

func (o FeatureImportanceSettingsOutput) ToFeatureImportanceSettingsPtrOutput() FeatureImportanceSettingsPtrOutput {
	return o.ToFeatureImportanceSettingsPtrOutputWithContext(context.Background())
}

func (o FeatureImportanceSettingsOutput) ToFeatureImportanceSettingsPtrOutputWithContext(ctx context.Context) FeatureImportanceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureImportanceSettings) *FeatureImportanceSettings {
		return &v
	}).(FeatureImportanceSettingsPtrOutput)
}

// The mode of operation for computing feature importance.
func (o FeatureImportanceSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureImportanceSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the target column within the input data asset.
func (o FeatureImportanceSettingsOutput) TargetColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureImportanceSettings) *string { return v.TargetColumn }).(pulumi.StringPtrOutput)
}

type FeatureImportanceSettingsPtrOutput struct{ *pulumi.OutputState }

func (FeatureImportanceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureImportanceSettings)(nil)).Elem()
}

func (o FeatureImportanceSettingsPtrOutput) ToFeatureImportanceSettingsPtrOutput() FeatureImportanceSettingsPtrOutput {
	return o
}

func (o FeatureImportanceSettingsPtrOutput) ToFeatureImportanceSettingsPtrOutputWithContext(ctx context.Context) FeatureImportanceSettingsPtrOutput {
	return o
}

func (o FeatureImportanceSettingsPtrOutput) Elem() FeatureImportanceSettingsOutput {
	return o.ApplyT(func(v *FeatureImportanceSettings) FeatureImportanceSettings {
		if v != nil {
			return *v
		}
		var ret FeatureImportanceSettings
		return ret
	}).(FeatureImportanceSettingsOutput)
}

// The mode of operation for computing feature importance.
func (o FeatureImportanceSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureImportanceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The name of the target column within the input data asset.
func (o FeatureImportanceSettingsPtrOutput) TargetColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureImportanceSettings) *string {
		if v == nil {
			return nil
		}
		return v.TargetColumn
	}).(pulumi.StringPtrOutput)
}

type FeatureImportanceSettingsResponse struct {
	// The mode of operation for computing feature importance.
	Mode *string `pulumi:"mode"`
	// The name of the target column within the input data asset.
	TargetColumn *string `pulumi:"targetColumn"`
}

// Defaults sets the appropriate defaults for FeatureImportanceSettingsResponse
func (val *FeatureImportanceSettingsResponse) Defaults() *FeatureImportanceSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "Disabled"
		tmp.Mode = &mode_
	}
	return &tmp
}

type FeatureImportanceSettingsResponseOutput struct{ *pulumi.OutputState }

func (FeatureImportanceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureImportanceSettingsResponse)(nil)).Elem()
}

func (o FeatureImportanceSettingsResponseOutput) ToFeatureImportanceSettingsResponseOutput() FeatureImportanceSettingsResponseOutput {
	return o
}

func (o FeatureImportanceSettingsResponseOutput) ToFeatureImportanceSettingsResponseOutputWithContext(ctx context.Context) FeatureImportanceSettingsResponseOutput {
	return o
}

// The mode of operation for computing feature importance.
func (o FeatureImportanceSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureImportanceSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the target column within the input data asset.
func (o FeatureImportanceSettingsResponseOutput) TargetColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureImportanceSettingsResponse) *string { return v.TargetColumn }).(pulumi.StringPtrOutput)
}

type FeatureImportanceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureImportanceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureImportanceSettingsResponse)(nil)).Elem()
}

func (o FeatureImportanceSettingsResponsePtrOutput) ToFeatureImportanceSettingsResponsePtrOutput() FeatureImportanceSettingsResponsePtrOutput {
	return o
}

func (o FeatureImportanceSettingsResponsePtrOutput) ToFeatureImportanceSettingsResponsePtrOutputWithContext(ctx context.Context) FeatureImportanceSettingsResponsePtrOutput {
	return o
}

func (o FeatureImportanceSettingsResponsePtrOutput) Elem() FeatureImportanceSettingsResponseOutput {
	return o.ApplyT(func(v *FeatureImportanceSettingsResponse) FeatureImportanceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret FeatureImportanceSettingsResponse
		return ret
	}).(FeatureImportanceSettingsResponseOutput)
}

// The mode of operation for computing feature importance.
func (o FeatureImportanceSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureImportanceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The name of the target column within the input data asset.
func (o FeatureImportanceSettingsResponsePtrOutput) TargetColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureImportanceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetColumn
	}).(pulumi.StringPtrOutput)
}

type FeatureStoreSettings struct {
	ComputeRuntime             *ComputeRuntimeDto `pulumi:"computeRuntime"`
	OfflineStoreConnectionName *string            `pulumi:"offlineStoreConnectionName"`
	OnlineStoreConnectionName  *string            `pulumi:"onlineStoreConnectionName"`
}

// FeatureStoreSettingsInput is an input type that accepts FeatureStoreSettingsArgs and FeatureStoreSettingsOutput values.
// You can construct a concrete instance of `FeatureStoreSettingsInput` via:
//
//	FeatureStoreSettingsArgs{...}
type FeatureStoreSettingsInput interface {
	pulumi.Input

	ToFeatureStoreSettingsOutput() FeatureStoreSettingsOutput
	ToFeatureStoreSettingsOutputWithContext(context.Context) FeatureStoreSettingsOutput
}

type FeatureStoreSettingsArgs struct {
	ComputeRuntime             ComputeRuntimeDtoPtrInput `pulumi:"computeRuntime"`
	OfflineStoreConnectionName pulumi.StringPtrInput     `pulumi:"offlineStoreConnectionName"`
	OnlineStoreConnectionName  pulumi.StringPtrInput     `pulumi:"onlineStoreConnectionName"`
}

func (FeatureStoreSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStoreSettings)(nil)).Elem()
}

func (i FeatureStoreSettingsArgs) ToFeatureStoreSettingsOutput() FeatureStoreSettingsOutput {
	return i.ToFeatureStoreSettingsOutputWithContext(context.Background())
}

func (i FeatureStoreSettingsArgs) ToFeatureStoreSettingsOutputWithContext(ctx context.Context) FeatureStoreSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStoreSettingsOutput)
}

func (i FeatureStoreSettingsArgs) ToFeatureStoreSettingsPtrOutput() FeatureStoreSettingsPtrOutput {
	return i.ToFeatureStoreSettingsPtrOutputWithContext(context.Background())
}

func (i FeatureStoreSettingsArgs) ToFeatureStoreSettingsPtrOutputWithContext(ctx context.Context) FeatureStoreSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStoreSettingsOutput).ToFeatureStoreSettingsPtrOutputWithContext(ctx)
}

// FeatureStoreSettingsPtrInput is an input type that accepts FeatureStoreSettingsArgs, FeatureStoreSettingsPtr and FeatureStoreSettingsPtrOutput values.
// You can construct a concrete instance of `FeatureStoreSettingsPtrInput` via:
//
//	        FeatureStoreSettingsArgs{...}
//
//	or:
//
//	        nil
type FeatureStoreSettingsPtrInput interface {
	pulumi.Input

	ToFeatureStoreSettingsPtrOutput() FeatureStoreSettingsPtrOutput
	ToFeatureStoreSettingsPtrOutputWithContext(context.Context) FeatureStoreSettingsPtrOutput
}

type featureStoreSettingsPtrType FeatureStoreSettingsArgs

func FeatureStoreSettingsPtr(v *FeatureStoreSettingsArgs) FeatureStoreSettingsPtrInput {
	return (*featureStoreSettingsPtrType)(v)
}

func (*featureStoreSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStoreSettings)(nil)).Elem()
}

func (i *featureStoreSettingsPtrType) ToFeatureStoreSettingsPtrOutput() FeatureStoreSettingsPtrOutput {
	return i.ToFeatureStoreSettingsPtrOutputWithContext(context.Background())
}

func (i *featureStoreSettingsPtrType) ToFeatureStoreSettingsPtrOutputWithContext(ctx context.Context) FeatureStoreSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStoreSettingsPtrOutput)
}

type FeatureStoreSettingsOutput struct{ *pulumi.OutputState }

func (FeatureStoreSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStoreSettings)(nil)).Elem()
}

func (o FeatureStoreSettingsOutput) ToFeatureStoreSettingsOutput() FeatureStoreSettingsOutput {
	return o
}

func (o FeatureStoreSettingsOutput) ToFeatureStoreSettingsOutputWithContext(ctx context.Context) FeatureStoreSettingsOutput {
	return o
}

func (o FeatureStoreSettingsOutput) ToFeatureStoreSettingsPtrOutput() FeatureStoreSettingsPtrOutput {
	return o.ToFeatureStoreSettingsPtrOutputWithContext(context.Background())
}

func (o FeatureStoreSettingsOutput) ToFeatureStoreSettingsPtrOutputWithContext(ctx context.Context) FeatureStoreSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureStoreSettings) *FeatureStoreSettings {
		return &v
	}).(FeatureStoreSettingsPtrOutput)
}

func (o FeatureStoreSettingsOutput) ComputeRuntime() ComputeRuntimeDtoPtrOutput {
	return o.ApplyT(func(v FeatureStoreSettings) *ComputeRuntimeDto { return v.ComputeRuntime }).(ComputeRuntimeDtoPtrOutput)
}

func (o FeatureStoreSettingsOutput) OfflineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStoreSettings) *string { return v.OfflineStoreConnectionName }).(pulumi.StringPtrOutput)
}

func (o FeatureStoreSettingsOutput) OnlineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStoreSettings) *string { return v.OnlineStoreConnectionName }).(pulumi.StringPtrOutput)
}

type FeatureStoreSettingsPtrOutput struct{ *pulumi.OutputState }

func (FeatureStoreSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStoreSettings)(nil)).Elem()
}

func (o FeatureStoreSettingsPtrOutput) ToFeatureStoreSettingsPtrOutput() FeatureStoreSettingsPtrOutput {
	return o
}

func (o FeatureStoreSettingsPtrOutput) ToFeatureStoreSettingsPtrOutputWithContext(ctx context.Context) FeatureStoreSettingsPtrOutput {
	return o
}

func (o FeatureStoreSettingsPtrOutput) Elem() FeatureStoreSettingsOutput {
	return o.ApplyT(func(v *FeatureStoreSettings) FeatureStoreSettings {
		if v != nil {
			return *v
		}
		var ret FeatureStoreSettings
		return ret
	}).(FeatureStoreSettingsOutput)
}

func (o FeatureStoreSettingsPtrOutput) ComputeRuntime() ComputeRuntimeDtoPtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettings) *ComputeRuntimeDto {
		if v == nil {
			return nil
		}
		return v.ComputeRuntime
	}).(ComputeRuntimeDtoPtrOutput)
}

func (o FeatureStoreSettingsPtrOutput) OfflineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettings) *string {
		if v == nil {
			return nil
		}
		return v.OfflineStoreConnectionName
	}).(pulumi.StringPtrOutput)
}

func (o FeatureStoreSettingsPtrOutput) OnlineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettings) *string {
		if v == nil {
			return nil
		}
		return v.OnlineStoreConnectionName
	}).(pulumi.StringPtrOutput)
}

type FeatureStoreSettingsResponse struct {
	ComputeRuntime             *ComputeRuntimeDtoResponse `pulumi:"computeRuntime"`
	OfflineStoreConnectionName *string                    `pulumi:"offlineStoreConnectionName"`
	OnlineStoreConnectionName  *string                    `pulumi:"onlineStoreConnectionName"`
}

type FeatureStoreSettingsResponseOutput struct{ *pulumi.OutputState }

func (FeatureStoreSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStoreSettingsResponse)(nil)).Elem()
}

func (o FeatureStoreSettingsResponseOutput) ToFeatureStoreSettingsResponseOutput() FeatureStoreSettingsResponseOutput {
	return o
}

func (o FeatureStoreSettingsResponseOutput) ToFeatureStoreSettingsResponseOutputWithContext(ctx context.Context) FeatureStoreSettingsResponseOutput {
	return o
}

func (o FeatureStoreSettingsResponseOutput) ComputeRuntime() ComputeRuntimeDtoResponsePtrOutput {
	return o.ApplyT(func(v FeatureStoreSettingsResponse) *ComputeRuntimeDtoResponse { return v.ComputeRuntime }).(ComputeRuntimeDtoResponsePtrOutput)
}

func (o FeatureStoreSettingsResponseOutput) OfflineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStoreSettingsResponse) *string { return v.OfflineStoreConnectionName }).(pulumi.StringPtrOutput)
}

func (o FeatureStoreSettingsResponseOutput) OnlineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStoreSettingsResponse) *string { return v.OnlineStoreConnectionName }).(pulumi.StringPtrOutput)
}

type FeatureStoreSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureStoreSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStoreSettingsResponse)(nil)).Elem()
}

func (o FeatureStoreSettingsResponsePtrOutput) ToFeatureStoreSettingsResponsePtrOutput() FeatureStoreSettingsResponsePtrOutput {
	return o
}

func (o FeatureStoreSettingsResponsePtrOutput) ToFeatureStoreSettingsResponsePtrOutputWithContext(ctx context.Context) FeatureStoreSettingsResponsePtrOutput {
	return o
}

func (o FeatureStoreSettingsResponsePtrOutput) Elem() FeatureStoreSettingsResponseOutput {
	return o.ApplyT(func(v *FeatureStoreSettingsResponse) FeatureStoreSettingsResponse {
		if v != nil {
			return *v
		}
		var ret FeatureStoreSettingsResponse
		return ret
	}).(FeatureStoreSettingsResponseOutput)
}

func (o FeatureStoreSettingsResponsePtrOutput) ComputeRuntime() ComputeRuntimeDtoResponsePtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettingsResponse) *ComputeRuntimeDtoResponse {
		if v == nil {
			return nil
		}
		return v.ComputeRuntime
	}).(ComputeRuntimeDtoResponsePtrOutput)
}

func (o FeatureStoreSettingsResponsePtrOutput) OfflineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.OfflineStoreConnectionName
	}).(pulumi.StringPtrOutput)
}

func (o FeatureStoreSettingsResponsePtrOutput) OnlineStoreConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStoreSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.OnlineStoreConnectionName
	}).(pulumi.StringPtrOutput)
}

type FeatureSubset struct {
	// [Required] The list of features to include.
	Features []string `pulumi:"features"`
	// Expected value is 'FeatureSubset'.
	FilterType string `pulumi:"filterType"`
}

// FeatureSubsetInput is an input type that accepts FeatureSubsetArgs and FeatureSubsetOutput values.
// You can construct a concrete instance of `FeatureSubsetInput` via:
//
//	FeatureSubsetArgs{...}
type FeatureSubsetInput interface {
	pulumi.Input

	ToFeatureSubsetOutput() FeatureSubsetOutput
	ToFeatureSubsetOutputWithContext(context.Context) FeatureSubsetOutput
}

type FeatureSubsetArgs struct {
	// [Required] The list of features to include.
	Features pulumi.StringArrayInput `pulumi:"features"`
	// Expected value is 'FeatureSubset'.
	FilterType pulumi.StringInput `pulumi:"filterType"`
}

func (FeatureSubsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSubset)(nil)).Elem()
}

func (i FeatureSubsetArgs) ToFeatureSubsetOutput() FeatureSubsetOutput {
	return i.ToFeatureSubsetOutputWithContext(context.Background())
}

func (i FeatureSubsetArgs) ToFeatureSubsetOutputWithContext(ctx context.Context) FeatureSubsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSubsetOutput)
}

func (i FeatureSubsetArgs) ToFeatureSubsetPtrOutput() FeatureSubsetPtrOutput {
	return i.ToFeatureSubsetPtrOutputWithContext(context.Background())
}

func (i FeatureSubsetArgs) ToFeatureSubsetPtrOutputWithContext(ctx context.Context) FeatureSubsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSubsetOutput).ToFeatureSubsetPtrOutputWithContext(ctx)
}

// FeatureSubsetPtrInput is an input type that accepts FeatureSubsetArgs, FeatureSubsetPtr and FeatureSubsetPtrOutput values.
// You can construct a concrete instance of `FeatureSubsetPtrInput` via:
//
//	        FeatureSubsetArgs{...}
//
//	or:
//
//	        nil
type FeatureSubsetPtrInput interface {
	pulumi.Input

	ToFeatureSubsetPtrOutput() FeatureSubsetPtrOutput
	ToFeatureSubsetPtrOutputWithContext(context.Context) FeatureSubsetPtrOutput
}

type featureSubsetPtrType FeatureSubsetArgs

func FeatureSubsetPtr(v *FeatureSubsetArgs) FeatureSubsetPtrInput {
	return (*featureSubsetPtrType)(v)
}

func (*featureSubsetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSubset)(nil)).Elem()
}

func (i *featureSubsetPtrType) ToFeatureSubsetPtrOutput() FeatureSubsetPtrOutput {
	return i.ToFeatureSubsetPtrOutputWithContext(context.Background())
}

func (i *featureSubsetPtrType) ToFeatureSubsetPtrOutputWithContext(ctx context.Context) FeatureSubsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSubsetPtrOutput)
}

type FeatureSubsetOutput struct{ *pulumi.OutputState }

func (FeatureSubsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSubset)(nil)).Elem()
}

func (o FeatureSubsetOutput) ToFeatureSubsetOutput() FeatureSubsetOutput {
	return o
}

func (o FeatureSubsetOutput) ToFeatureSubsetOutputWithContext(ctx context.Context) FeatureSubsetOutput {
	return o
}

func (o FeatureSubsetOutput) ToFeatureSubsetPtrOutput() FeatureSubsetPtrOutput {
	return o.ToFeatureSubsetPtrOutputWithContext(context.Background())
}

func (o FeatureSubsetOutput) ToFeatureSubsetPtrOutputWithContext(ctx context.Context) FeatureSubsetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureSubset) *FeatureSubset {
		return &v
	}).(FeatureSubsetPtrOutput)
}

// [Required] The list of features to include.
func (o FeatureSubsetOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureSubset) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// Expected value is 'FeatureSubset'.
func (o FeatureSubsetOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureSubset) string { return v.FilterType }).(pulumi.StringOutput)
}

type FeatureSubsetPtrOutput struct{ *pulumi.OutputState }

func (FeatureSubsetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSubset)(nil)).Elem()
}

func (o FeatureSubsetPtrOutput) ToFeatureSubsetPtrOutput() FeatureSubsetPtrOutput {
	return o
}

func (o FeatureSubsetPtrOutput) ToFeatureSubsetPtrOutputWithContext(ctx context.Context) FeatureSubsetPtrOutput {
	return o
}

func (o FeatureSubsetPtrOutput) Elem() FeatureSubsetOutput {
	return o.ApplyT(func(v *FeatureSubset) FeatureSubset {
		if v != nil {
			return *v
		}
		var ret FeatureSubset
		return ret
	}).(FeatureSubsetOutput)
}

// [Required] The list of features to include.
func (o FeatureSubsetPtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FeatureSubset) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// Expected value is 'FeatureSubset'.
func (o FeatureSubsetPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureSubset) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

type FeatureSubsetResponse struct {
	// [Required] The list of features to include.
	Features []string `pulumi:"features"`
	// Expected value is 'FeatureSubset'.
	FilterType string `pulumi:"filterType"`
}

type FeatureSubsetResponseOutput struct{ *pulumi.OutputState }

func (FeatureSubsetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSubsetResponse)(nil)).Elem()
}

func (o FeatureSubsetResponseOutput) ToFeatureSubsetResponseOutput() FeatureSubsetResponseOutput {
	return o
}

func (o FeatureSubsetResponseOutput) ToFeatureSubsetResponseOutputWithContext(ctx context.Context) FeatureSubsetResponseOutput {
	return o
}

// [Required] The list of features to include.
func (o FeatureSubsetResponseOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeatureSubsetResponse) []string { return v.Features }).(pulumi.StringArrayOutput)
}

// Expected value is 'FeatureSubset'.
func (o FeatureSubsetResponseOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureSubsetResponse) string { return v.FilterType }).(pulumi.StringOutput)
}

type FeatureSubsetResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureSubsetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSubsetResponse)(nil)).Elem()
}

func (o FeatureSubsetResponsePtrOutput) ToFeatureSubsetResponsePtrOutput() FeatureSubsetResponsePtrOutput {
	return o
}

func (o FeatureSubsetResponsePtrOutput) ToFeatureSubsetResponsePtrOutputWithContext(ctx context.Context) FeatureSubsetResponsePtrOutput {
	return o
}

func (o FeatureSubsetResponsePtrOutput) Elem() FeatureSubsetResponseOutput {
	return o.ApplyT(func(v *FeatureSubsetResponse) FeatureSubsetResponse {
		if v != nil {
			return *v
		}
		var ret FeatureSubsetResponse
		return ret
	}).(FeatureSubsetResponseOutput)
}

// [Required] The list of features to include.
func (o FeatureSubsetResponsePtrOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FeatureSubsetResponse) []string {
		if v == nil {
			return nil
		}
		return v.Features
	}).(pulumi.StringArrayOutput)
}

// Expected value is 'FeatureSubset'.
func (o FeatureSubsetResponsePtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureSubsetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set
type FeaturesetContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainer
func (val *FeaturesetContainer) Defaults() *FeaturesetContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturesetContainerInput is an input type that accepts FeaturesetContainerArgs and FeaturesetContainerOutput values.
// You can construct a concrete instance of `FeaturesetContainerInput` via:
//
//	FeaturesetContainerArgs{...}
type FeaturesetContainerInput interface {
	pulumi.Input

	ToFeaturesetContainerOutput() FeaturesetContainerOutput
	ToFeaturesetContainerOutputWithContext(context.Context) FeaturesetContainerOutput
}

// Dto object representing feature set
type FeaturesetContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerArgs
func (val *FeaturesetContainerArgs) Defaults() *FeaturesetContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturesetContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return i.ToFeaturesetContainerOutputWithContext(context.Background())
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetContainerOutput)
}

// Dto object representing feature set
type FeaturesetContainerOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return o
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set
type FeaturesetContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerResponse
func (val *FeaturesetContainerResponse) Defaults() *FeaturesetContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature set
type FeaturesetContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainerResponse)(nil)).Elem()
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutput() FeaturesetContainerResponseOutput {
	return o
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutputWithContext(ctx context.Context) FeaturesetContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturesetContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturesetContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset container.
func (o FeaturesetContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing specification
type FeaturesetSpecification struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// FeaturesetSpecificationInput is an input type that accepts FeaturesetSpecificationArgs and FeaturesetSpecificationOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationInput` via:
//
//	FeaturesetSpecificationArgs{...}
type FeaturesetSpecificationInput interface {
	pulumi.Input

	ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput
	ToFeaturesetSpecificationOutputWithContext(context.Context) FeaturesetSpecificationOutput
}

// Dto object representing specification
type FeaturesetSpecificationArgs struct {
	// Specifies the spec path
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (FeaturesetSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return i.ToFeaturesetSpecificationOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput)
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput).ToFeaturesetSpecificationPtrOutputWithContext(ctx)
}

// FeaturesetSpecificationPtrInput is an input type that accepts FeaturesetSpecificationArgs, FeaturesetSpecificationPtr and FeaturesetSpecificationPtrOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationPtrInput` via:
//
//	        FeaturesetSpecificationArgs{...}
//
//	or:
//
//	        nil
type FeaturesetSpecificationPtrInput interface {
	pulumi.Input

	ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput
	ToFeaturesetSpecificationPtrOutputWithContext(context.Context) FeaturesetSpecificationPtrOutput
}

type featuresetSpecificationPtrType FeaturesetSpecificationArgs

func FeaturesetSpecificationPtr(v *FeaturesetSpecificationArgs) FeaturesetSpecificationPtrInput {
	return (*featuresetSpecificationPtrType)(v)
}

func (*featuresetSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeaturesetSpecification) *FeaturesetSpecification {
		return &v
	}).(FeaturesetSpecificationPtrOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecification) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationPtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) Elem() FeaturesetSpecificationOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) FeaturesetSpecification {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecification
		return ret
	}).(FeaturesetSpecificationOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationResponse struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// Dto object representing specification
type FeaturesetSpecificationResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutput() FeaturesetSpecificationResponseOutput {
	return o
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutputWithContext(ctx context.Context) FeaturesetSpecificationResponseOutput {
	return o
}

// Specifies the spec path
func (o FeaturesetSpecificationResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecificationResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutput() FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutputWithContext(ctx context.Context) FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) Elem() FeaturesetSpecificationResponseOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) FeaturesetSpecificationResponse {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecificationResponse
		return ret
	}).(FeaturesetSpecificationResponseOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set version
type FeaturesetVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettings `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecification `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionType
func (val *FeaturesetVersionType) Defaults() *FeaturesetVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// FeaturesetVersionTypeInput is an input type that accepts FeaturesetVersionTypeArgs and FeaturesetVersionTypeOutput values.
// You can construct a concrete instance of `FeaturesetVersionTypeInput` via:
//
//	FeaturesetVersionTypeArgs{...}
type FeaturesetVersionTypeInput interface {
	pulumi.Input

	ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput
	ToFeaturesetVersionTypeOutputWithContext(context.Context) FeaturesetVersionTypeOutput
}

// Dto object representing feature set version
type FeaturesetVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies list of entities
	Entities pulumi.StringArrayInput `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings MaterializationSettingsPtrInput `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the feature spec details
	Specification FeaturesetSpecificationPtrInput `pulumi:"specification"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionTypeArgs
func (val *FeaturesetVersionTypeArgs) Defaults() *FeaturesetVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (FeaturesetVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return i.ToFeaturesetVersionTypeOutputWithContext(context.Background())
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetVersionTypeOutput)
}

// Dto object representing feature set version
type FeaturesetVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return o
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturesetVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionTypeOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionType) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionTypeOutput) MaterializationSettings() MaterializationSettingsPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *MaterializationSettings { return v.MaterializationSettings }).(MaterializationSettingsPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionTypeOutput) Specification() FeaturesetSpecificationPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *FeaturesetSpecification { return v.Specification }).(FeaturesetSpecificationPtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set version
type FeaturesetVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettingsResponse `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset version container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecificationResponse `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionResponse
func (val *FeaturesetVersionResponse) Defaults() *FeaturesetVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// Dto object representing feature set version
type FeaturesetVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionResponse)(nil)).Elem()
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutput() FeaturesetVersionResponseOutput {
	return o
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutputWithContext(ctx context.Context) FeaturesetVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturesetVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionResponseOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionResponseOutput) MaterializationSettings() MaterializationSettingsResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *MaterializationSettingsResponse { return v.MaterializationSettings }).(MaterializationSettingsResponsePtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset version container.
func (o FeaturesetVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionResponseOutput) Specification() FeaturesetSpecificationResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *FeaturesetSpecificationResponse { return v.Specification }).(FeaturesetSpecificationResponsePtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainer
func (val *FeaturestoreEntityContainer) Defaults() *FeaturestoreEntityContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityContainerInput is an input type that accepts FeaturestoreEntityContainerArgs and FeaturestoreEntityContainerOutput values.
// You can construct a concrete instance of `FeaturestoreEntityContainerInput` via:
//
//	FeaturestoreEntityContainerArgs{...}
type FeaturestoreEntityContainerInput interface {
	pulumi.Input

	ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput
	ToFeaturestoreEntityContainerOutputWithContext(context.Context) FeaturestoreEntityContainerOutput
}

// Dto object representing feature entity
type FeaturestoreEntityContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerArgs
func (val *FeaturestoreEntityContainerArgs) Defaults() *FeaturestoreEntityContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return i.ToFeaturestoreEntityContainerOutputWithContext(context.Background())
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityContainerOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return o
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerResponse
func (val *FeaturestoreEntityContainerResponse) Defaults() *FeaturestoreEntityContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainerResponse)(nil)).Elem()
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutput() FeaturestoreEntityContainerResponseOutput {
	return o
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutputWithContext(ctx context.Context) FeaturestoreEntityContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturestoreEntityContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturestoreEntityContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity container.
func (o FeaturestoreEntityContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumn `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionType
func (val *FeaturestoreEntityVersionType) Defaults() *FeaturestoreEntityVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityVersionTypeInput is an input type that accepts FeaturestoreEntityVersionTypeArgs and FeaturestoreEntityVersionTypeOutput values.
// You can construct a concrete instance of `FeaturestoreEntityVersionTypeInput` via:
//
//	FeaturestoreEntityVersionTypeArgs{...}
type FeaturestoreEntityVersionTypeInput interface {
	pulumi.Input

	ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput
	ToFeaturestoreEntityVersionTypeOutputWithContext(context.Context) FeaturestoreEntityVersionTypeOutput
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies index columns
	IndexColumns IndexColumnArrayInput `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionTypeArgs
func (val *FeaturestoreEntityVersionTypeArgs) Defaults() *FeaturestoreEntityVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return i.ToFeaturestoreEntityVersionTypeOutputWithContext(context.Background())
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityVersionTypeOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return o
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionTypeOutput) IndexColumns() IndexColumnArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) []IndexColumn { return v.IndexColumns }).(IndexColumnArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumnResponse `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionResponse
func (val *FeaturestoreEntityVersionResponse) Defaults() *FeaturestoreEntityVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionResponse)(nil)).Elem()
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutput() FeaturestoreEntityVersionResponseOutput {
	return o
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutputWithContext(ctx context.Context) FeaturestoreEntityVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionResponseOutput) IndexColumns() IndexColumnResponseArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) []IndexColumnResponse { return v.IndexColumns }).(IndexColumnResponseArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity version.
func (o FeaturestoreEntityVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FileSystemSource struct {
	// Workspace connection for data import source storage
	Connection *string `pulumi:"connection"`
	// Path on data import FileSystem source
	Path *string `pulumi:"path"`
	// Enum to determine the type of data.
	// Expected value is 'file_system'.
	SourceType string `pulumi:"sourceType"`
}

// FileSystemSourceInput is an input type that accepts FileSystemSourceArgs and FileSystemSourceOutput values.
// You can construct a concrete instance of `FileSystemSourceInput` via:
//
//	FileSystemSourceArgs{...}
type FileSystemSourceInput interface {
	pulumi.Input

	ToFileSystemSourceOutput() FileSystemSourceOutput
	ToFileSystemSourceOutputWithContext(context.Context) FileSystemSourceOutput
}

type FileSystemSourceArgs struct {
	// Workspace connection for data import source storage
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// Path on data import FileSystem source
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine the type of data.
	// Expected value is 'file_system'.
	SourceType pulumi.StringInput `pulumi:"sourceType"`
}

func (FileSystemSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSource)(nil)).Elem()
}

func (i FileSystemSourceArgs) ToFileSystemSourceOutput() FileSystemSourceOutput {
	return i.ToFileSystemSourceOutputWithContext(context.Background())
}

func (i FileSystemSourceArgs) ToFileSystemSourceOutputWithContext(ctx context.Context) FileSystemSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSourceOutput)
}

func (i FileSystemSourceArgs) ToFileSystemSourcePtrOutput() FileSystemSourcePtrOutput {
	return i.ToFileSystemSourcePtrOutputWithContext(context.Background())
}

func (i FileSystemSourceArgs) ToFileSystemSourcePtrOutputWithContext(ctx context.Context) FileSystemSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSourceOutput).ToFileSystemSourcePtrOutputWithContext(ctx)
}

// FileSystemSourcePtrInput is an input type that accepts FileSystemSourceArgs, FileSystemSourcePtr and FileSystemSourcePtrOutput values.
// You can construct a concrete instance of `FileSystemSourcePtrInput` via:
//
//	        FileSystemSourceArgs{...}
//
//	or:
//
//	        nil
type FileSystemSourcePtrInput interface {
	pulumi.Input

	ToFileSystemSourcePtrOutput() FileSystemSourcePtrOutput
	ToFileSystemSourcePtrOutputWithContext(context.Context) FileSystemSourcePtrOutput
}

type fileSystemSourcePtrType FileSystemSourceArgs

func FileSystemSourcePtr(v *FileSystemSourceArgs) FileSystemSourcePtrInput {
	return (*fileSystemSourcePtrType)(v)
}

func (*fileSystemSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemSource)(nil)).Elem()
}

func (i *fileSystemSourcePtrType) ToFileSystemSourcePtrOutput() FileSystemSourcePtrOutput {
	return i.ToFileSystemSourcePtrOutputWithContext(context.Background())
}

func (i *fileSystemSourcePtrType) ToFileSystemSourcePtrOutputWithContext(ctx context.Context) FileSystemSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemSourcePtrOutput)
}

type FileSystemSourceOutput struct{ *pulumi.OutputState }

func (FileSystemSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSource)(nil)).Elem()
}

func (o FileSystemSourceOutput) ToFileSystemSourceOutput() FileSystemSourceOutput {
	return o
}

func (o FileSystemSourceOutput) ToFileSystemSourceOutputWithContext(ctx context.Context) FileSystemSourceOutput {
	return o
}

func (o FileSystemSourceOutput) ToFileSystemSourcePtrOutput() FileSystemSourcePtrOutput {
	return o.ToFileSystemSourcePtrOutputWithContext(context.Background())
}

func (o FileSystemSourceOutput) ToFileSystemSourcePtrOutputWithContext(ctx context.Context) FileSystemSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FileSystemSource) *FileSystemSource {
		return &v
	}).(FileSystemSourcePtrOutput)
}

// Workspace connection for data import source storage
func (o FileSystemSourceOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemSource) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Path on data import FileSystem source
func (o FileSystemSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'file_system'.
func (o FileSystemSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSource) string { return v.SourceType }).(pulumi.StringOutput)
}

type FileSystemSourcePtrOutput struct{ *pulumi.OutputState }

func (FileSystemSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemSource)(nil)).Elem()
}

func (o FileSystemSourcePtrOutput) ToFileSystemSourcePtrOutput() FileSystemSourcePtrOutput {
	return o
}

func (o FileSystemSourcePtrOutput) ToFileSystemSourcePtrOutputWithContext(ctx context.Context) FileSystemSourcePtrOutput {
	return o
}

func (o FileSystemSourcePtrOutput) Elem() FileSystemSourceOutput {
	return o.ApplyT(func(v *FileSystemSource) FileSystemSource {
		if v != nil {
			return *v
		}
		var ret FileSystemSource
		return ret
	}).(FileSystemSourceOutput)
}

// Workspace connection for data import source storage
func (o FileSystemSourcePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSource) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Path on data import FileSystem source
func (o FileSystemSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'file_system'.
func (o FileSystemSourcePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSource) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

type FileSystemSourceResponse struct {
	// Workspace connection for data import source storage
	Connection *string `pulumi:"connection"`
	// Path on data import FileSystem source
	Path *string `pulumi:"path"`
	// Enum to determine the type of data.
	// Expected value is 'file_system'.
	SourceType string `pulumi:"sourceType"`
}

type FileSystemSourceResponseOutput struct{ *pulumi.OutputState }

func (FileSystemSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemSourceResponse)(nil)).Elem()
}

func (o FileSystemSourceResponseOutput) ToFileSystemSourceResponseOutput() FileSystemSourceResponseOutput {
	return o
}

func (o FileSystemSourceResponseOutput) ToFileSystemSourceResponseOutputWithContext(ctx context.Context) FileSystemSourceResponseOutput {
	return o
}

// Workspace connection for data import source storage
func (o FileSystemSourceResponseOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Path on data import FileSystem source
func (o FileSystemSourceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'file_system'.
func (o FileSystemSourceResponseOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemSourceResponse) string { return v.SourceType }).(pulumi.StringOutput)
}

type FileSystemSourceResponsePtrOutput struct{ *pulumi.OutputState }

func (FileSystemSourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystemSourceResponse)(nil)).Elem()
}

func (o FileSystemSourceResponsePtrOutput) ToFileSystemSourceResponsePtrOutput() FileSystemSourceResponsePtrOutput {
	return o
}

func (o FileSystemSourceResponsePtrOutput) ToFileSystemSourceResponsePtrOutputWithContext(ctx context.Context) FileSystemSourceResponsePtrOutput {
	return o
}

func (o FileSystemSourceResponsePtrOutput) Elem() FileSystemSourceResponseOutput {
	return o.ApplyT(func(v *FileSystemSourceResponse) FileSystemSourceResponse {
		if v != nil {
			return *v
		}
		var ret FileSystemSourceResponse
		return ret
	}).(FileSystemSourceResponseOutput)
}

// Workspace connection for data import source storage
func (o FileSystemSourceResponsePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Path on data import FileSystem source
func (o FileSystemSourceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'file_system'.
func (o FileSystemSourceResponsePtrOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystemSourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.StringPtrOutput)
}

// FineTuning Job definition.
type FineTuningJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// [Required]
	FineTuningDetails interface{} `pulumi:"fineTuningDetails"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'FineTuning'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// [Required]
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FineTuningJob
func (val *FineTuningJob) Defaults() *FineTuningJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FineTuningJobInput is an input type that accepts FineTuningJobArgs and FineTuningJobOutput values.
// You can construct a concrete instance of `FineTuningJobInput` via:
//
//	FineTuningJobArgs{...}
type FineTuningJobInput interface {
	pulumi.Input

	ToFineTuningJobOutput() FineTuningJobOutput
	ToFineTuningJobOutputWithContext(context.Context) FineTuningJobOutput
}

// FineTuning Job definition.
type FineTuningJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// [Required]
	FineTuningDetails pulumi.Input `pulumi:"fineTuningDetails"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'FineTuning'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// [Required]
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FineTuningJobArgs
func (val *FineTuningJobArgs) Defaults() *FineTuningJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FineTuningJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FineTuningJob)(nil)).Elem()
}

func (i FineTuningJobArgs) ToFineTuningJobOutput() FineTuningJobOutput {
	return i.ToFineTuningJobOutputWithContext(context.Background())
}

func (i FineTuningJobArgs) ToFineTuningJobOutputWithContext(ctx context.Context) FineTuningJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FineTuningJobOutput)
}

// FineTuning Job definition.
type FineTuningJobOutput struct{ *pulumi.OutputState }

func (FineTuningJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FineTuningJob)(nil)).Elem()
}

func (o FineTuningJobOutput) ToFineTuningJobOutput() FineTuningJobOutput {
	return o
}

func (o FineTuningJobOutput) ToFineTuningJobOutputWithContext(ctx context.Context) FineTuningJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o FineTuningJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o FineTuningJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o FineTuningJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o FineTuningJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o FineTuningJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// [Required]
func (o FineTuningJobOutput) FineTuningDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v FineTuningJob) interface{} { return v.FineTuningDetails }).(pulumi.AnyOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o FineTuningJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v FineTuningJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o FineTuningJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'FineTuning'.
func (o FineTuningJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v FineTuningJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o FineTuningJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v FineTuningJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// [Required]
func (o FineTuningJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v FineTuningJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o FineTuningJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FineTuningJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o FineTuningJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v FineTuningJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o FineTuningJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v FineTuningJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FineTuningJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FineTuningJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// FineTuning Job definition.
type FineTuningJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// [Required]
	FineTuningDetails interface{} `pulumi:"fineTuningDetails"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'FineTuning'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// [Required]
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FineTuningJobResponse
func (val *FineTuningJobResponse) Defaults() *FineTuningJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FineTuning Job definition.
type FineTuningJobResponseOutput struct{ *pulumi.OutputState }

func (FineTuningJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FineTuningJobResponse)(nil)).Elem()
}

func (o FineTuningJobResponseOutput) ToFineTuningJobResponseOutput() FineTuningJobResponseOutput {
	return o
}

func (o FineTuningJobResponseOutput) ToFineTuningJobResponseOutputWithContext(ctx context.Context) FineTuningJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o FineTuningJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o FineTuningJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o FineTuningJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o FineTuningJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o FineTuningJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// [Required]
func (o FineTuningJobResponseOutput) FineTuningDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v FineTuningJobResponse) interface{} { return v.FineTuningDetails }).(pulumi.AnyOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o FineTuningJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v FineTuningJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o FineTuningJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'FineTuning'.
func (o FineTuningJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v FineTuningJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o FineTuningJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v FineTuningJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// [Required]
func (o FineTuningJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v FineTuningJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o FineTuningJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FineTuningJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o FineTuningJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v FineTuningJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o FineTuningJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v FineTuningJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o FineTuningJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v FineTuningJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FineTuningJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FineTuningJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Fixed input data definition.
type FixedInputData struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Fixed'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// FixedInputDataInput is an input type that accepts FixedInputDataArgs and FixedInputDataOutput values.
// You can construct a concrete instance of `FixedInputDataInput` via:
//
//	FixedInputDataArgs{...}
type FixedInputDataInput interface {
	pulumi.Input

	ToFixedInputDataOutput() FixedInputDataOutput
	ToFixedInputDataOutputWithContext(context.Context) FixedInputDataOutput
}

// Fixed input data definition.
type FixedInputDataArgs struct {
	// Mapping of column names to special uses.
	Columns pulumi.StringMapInput `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext pulumi.StringPtrInput `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Fixed'.
	InputDataType pulumi.StringInput `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (FixedInputDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedInputData)(nil)).Elem()
}

func (i FixedInputDataArgs) ToFixedInputDataOutput() FixedInputDataOutput {
	return i.ToFixedInputDataOutputWithContext(context.Background())
}

func (i FixedInputDataArgs) ToFixedInputDataOutputWithContext(ctx context.Context) FixedInputDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FixedInputDataOutput)
}

// Fixed input data definition.
type FixedInputDataOutput struct{ *pulumi.OutputState }

func (FixedInputDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedInputData)(nil)).Elem()
}

func (o FixedInputDataOutput) ToFixedInputDataOutput() FixedInputDataOutput {
	return o
}

func (o FixedInputDataOutput) ToFixedInputDataOutputWithContext(ctx context.Context) FixedInputDataOutput {
	return o
}

// Mapping of column names to special uses.
func (o FixedInputDataOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v FixedInputData) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o FixedInputDataOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedInputData) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Fixed'.
func (o FixedInputDataOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputData) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o FixedInputDataOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputData) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Input Asset URI.
func (o FixedInputDataOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputData) string { return v.Uri }).(pulumi.StringOutput)
}

// Fixed input data definition.
type FixedInputDataResponse struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Fixed'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Fixed input data definition.
type FixedInputDataResponseOutput struct{ *pulumi.OutputState }

func (FixedInputDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FixedInputDataResponse)(nil)).Elem()
}

func (o FixedInputDataResponseOutput) ToFixedInputDataResponseOutput() FixedInputDataResponseOutput {
	return o
}

func (o FixedInputDataResponseOutput) ToFixedInputDataResponseOutputWithContext(ctx context.Context) FixedInputDataResponseOutput {
	return o
}

// Mapping of column names to special uses.
func (o FixedInputDataResponseOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v FixedInputDataResponse) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o FixedInputDataResponseOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FixedInputDataResponse) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Fixed'.
func (o FixedInputDataResponseOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputDataResponse) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o FixedInputDataResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputDataResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Input Asset URI.
func (o FixedInputDataResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FixedInputDataResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type FlavorData struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

// FlavorDataInput is an input type that accepts FlavorDataArgs and FlavorDataOutput values.
// You can construct a concrete instance of `FlavorDataInput` via:
//
//	FlavorDataArgs{...}
type FlavorDataInput interface {
	pulumi.Input

	ToFlavorDataOutput() FlavorDataOutput
	ToFlavorDataOutputWithContext(context.Context) FlavorDataOutput
}

type FlavorDataArgs struct {
	// Model flavor-specific data.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FlavorDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (i FlavorDataArgs) ToFlavorDataOutput() FlavorDataOutput {
	return i.ToFlavorDataOutputWithContext(context.Background())
}

func (i FlavorDataArgs) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataOutput)
}

// FlavorDataMapInput is an input type that accepts FlavorDataMap and FlavorDataMapOutput values.
// You can construct a concrete instance of `FlavorDataMapInput` via:
//
//	FlavorDataMap{ "key": FlavorDataArgs{...} }
type FlavorDataMapInput interface {
	pulumi.Input

	ToFlavorDataMapOutput() FlavorDataMapOutput
	ToFlavorDataMapOutputWithContext(context.Context) FlavorDataMapOutput
}

type FlavorDataMap map[string]FlavorDataInput

func (FlavorDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (i FlavorDataMap) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return i.ToFlavorDataMapOutputWithContext(context.Background())
}

func (i FlavorDataMap) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataMapOutput)
}

type FlavorDataOutput struct{ *pulumi.OutputState }

func (FlavorDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (o FlavorDataOutput) ToFlavorDataOutput() FlavorDataOutput {
	return o
}

func (o FlavorDataOutput) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorData) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataMapOutput struct{ *pulumi.OutputState }

func (FlavorDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) MapIndex(k pulumi.StringInput) FlavorDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorData {
		return vs[0].(map[string]FlavorData)[vs[1].(string)]
	}).(FlavorDataOutput)
}

type FlavorDataResponse struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

type FlavorDataResponseOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutput() FlavorDataResponseOutput {
	return o
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutputWithContext(ctx context.Context) FlavorDataResponseOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataResponseOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorDataResponse) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataResponseMapOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutput() FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutputWithContext(ctx context.Context) FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) MapIndex(k pulumi.StringInput) FlavorDataResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorDataResponse {
		return vs[0].(map[string]FlavorDataResponse)[vs[1].(string)]
	}).(FlavorDataResponseOutput)
}

// Forecasting task in AutoML Table vertical.
type Forecasting struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParameters `pulumi:"fixedParameters"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettings `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Forecasting
func (val *Forecasting) Defaults() *Forecasting {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ForecastingInput is an input type that accepts ForecastingArgs and ForecastingOutput values.
// You can construct a concrete instance of `ForecastingInput` via:
//
//	ForecastingArgs{...}
type ForecastingInput interface {
	pulumi.Input

	ToForecastingOutput() ForecastingOutput
	ToForecastingOutputWithContext(context.Context) ForecastingOutput
}

// Forecasting task in AutoML Table vertical.
type ForecastingArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters TableFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Forecasting task specific inputs.
	ForecastingSettings ForecastingSettingsPtrInput `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace TableParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings TableSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings ForecastingTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ForecastingArgs
func (val *ForecastingArgs) Defaults() *ForecastingArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (ForecastingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (i ForecastingArgs) ToForecastingOutput() ForecastingOutput {
	return i.ToForecastingOutputWithContext(context.Background())
}

func (i ForecastingArgs) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingOutput struct{ *pulumi.OutputState }

func (ForecastingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (o ForecastingOutput) ToForecastingOutput() ForecastingOutput {
	return o
}

func (o ForecastingOutput) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ForecastingOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Forecasting) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o ForecastingOutput) FixedParameters() TableFixedParametersPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableFixedParameters { return v.FixedParameters }).(TableFixedParametersPtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingOutput) ForecastingSettings() ForecastingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *ForecastingSettings { return v.ForecastingSettings }).(ForecastingSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ForecastingOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ForecastingOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Forecasting) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for forecasting task.
func (o ForecastingOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ForecastingOutput) SearchSpace() TableParameterSubspaceArrayOutput {
	return o.ApplyT(func(v Forecasting) []TableParameterSubspace { return v.SearchSpace }).(TableParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o ForecastingOutput) SweepSettings() TableSweepSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableSweepSettings { return v.SweepSettings }).(TableSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ForecastingOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Forecasting) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ForecastingOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Forecasting) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Forecasting) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ForecastingOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Forecasting) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingOutput) TrainingSettings() ForecastingTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *ForecastingTrainingSettings { return v.TrainingSettings }).(ForecastingTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o ForecastingOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Forecasting) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Forecasting) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ForecastingOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParametersResponse `pulumi:"fixedParameters"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettingsResponse `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ForecastingResponse
func (val *ForecastingResponse) Defaults() *ForecastingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponseOutput struct{ *pulumi.OutputState }

func (ForecastingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingResponse)(nil)).Elem()
}

func (o ForecastingResponseOutput) ToForecastingResponseOutput() ForecastingResponseOutput {
	return o
}

func (o ForecastingResponseOutput) ToForecastingResponseOutputWithContext(ctx context.Context) ForecastingResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ForecastingResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o ForecastingResponseOutput) FixedParameters() TableFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableFixedParametersResponse { return v.FixedParameters }).(TableFixedParametersResponsePtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingResponseOutput) ForecastingSettings() ForecastingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *ForecastingSettingsResponse { return v.ForecastingSettings }).(ForecastingSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ForecastingResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ForecastingResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for forecasting task.
func (o ForecastingResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ForecastingResponseOutput) SearchSpace() TableParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v ForecastingResponse) []TableParameterSubspaceResponse { return v.SearchSpace }).(TableParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o ForecastingResponseOutput) SweepSettings() TableSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableSweepSettingsResponse { return v.SweepSettings }).(TableSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ForecastingResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ForecastingResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ForecastingResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ForecastingResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ForecastingResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingResponseOutput) TrainingSettings() ForecastingTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *ForecastingTrainingSettingsResponse { return v.TrainingSettings }).(ForecastingTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o ForecastingResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ForecastingResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettings struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The feature columns that are available for training but unknown at the time of forecast/inference.
	// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
	FeaturesUnknownAtForecastTime []string `pulumi:"featuresUnknownAtForecastTime"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettings
func (val *ForecastingSettings) Defaults() *ForecastingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// ForecastingSettingsInput is an input type that accepts ForecastingSettingsArgs and ForecastingSettingsOutput values.
// You can construct a concrete instance of `ForecastingSettingsInput` via:
//
//	ForecastingSettingsArgs{...}
type ForecastingSettingsInput interface {
	pulumi.Input

	ToForecastingSettingsOutput() ForecastingSettingsOutput
	ToForecastingSettingsOutputWithContext(context.Context) ForecastingSettingsOutput
}

// Forecasting specific parameters.
type ForecastingSettingsArgs struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays pulumi.StringPtrInput `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize pulumi.IntPtrInput `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags pulumi.StringPtrInput `pulumi:"featureLags"`
	// The feature columns that are available for training but unknown at the time of forecast/inference.
	// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
	FeaturesUnknownAtForecastTime pulumi.StringArrayInput `pulumi:"featuresUnknownAtForecastTime"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon pulumi.Input `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality pulumi.Input `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig pulumi.StringPtrInput `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction pulumi.StringPtrInput `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags pulumi.Input `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize pulumi.Input `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName pulumi.StringPtrInput `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames pulumi.StringArrayInput `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl pulumi.StringPtrInput `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsArgs
func (val *ForecastingSettingsArgs) Defaults() *ForecastingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		tmp.FeatureLags = pulumi.StringPtr("None")
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		tmp.ShortSeriesHandlingConfig = pulumi.StringPtr("Auto")
	}
	if tmp.TargetAggregateFunction == nil {
		tmp.TargetAggregateFunction = pulumi.StringPtr("None")
	}
	if tmp.UseStl == nil {
		tmp.UseStl = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ForecastingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return i.ToForecastingSettingsOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput)
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput).ToForecastingSettingsPtrOutputWithContext(ctx)
}

// ForecastingSettingsPtrInput is an input type that accepts ForecastingSettingsArgs, ForecastingSettingsPtr and ForecastingSettingsPtrOutput values.
// You can construct a concrete instance of `ForecastingSettingsPtrInput` via:
//
//	        ForecastingSettingsArgs{...}
//
//	or:
//
//	        nil
type ForecastingSettingsPtrInput interface {
	pulumi.Input

	ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput
	ToForecastingSettingsPtrOutputWithContext(context.Context) ForecastingSettingsPtrOutput
}

type forecastingSettingsPtrType ForecastingSettingsArgs

func ForecastingSettingsPtr(v *ForecastingSettingsArgs) ForecastingSettingsPtrInput {
	return (*forecastingSettingsPtrType)(v)
}

func (*forecastingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForecastingSettings) *ForecastingSettings {
		return &v
	}).(ForecastingSettingsPtrOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The feature columns that are available for training but unknown at the time of forecast/inference.
// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
func (o ForecastingSettingsOutput) FeaturesUnknownAtForecastTime() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettings) []string { return v.FeaturesUnknownAtForecastTime }).(pulumi.StringArrayOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettings) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) Elem() ForecastingSettingsOutput {
	return o.ApplyT(func(v *ForecastingSettings) ForecastingSettings {
		if v != nil {
			return *v
		}
		var ret ForecastingSettings
		return ret
	}).(ForecastingSettingsOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsPtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsPtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsPtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The feature columns that are available for training but unknown at the time of forecast/inference.
// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
func (o ForecastingSettingsPtrOutput) FeaturesUnknownAtForecastTime() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettings) []string {
		if v == nil {
			return nil
		}
		return v.FeaturesUnknownAtForecastTime
	}).(pulumi.StringArrayOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsPtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsPtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsPtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsPtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsPtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsPtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsPtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsPtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettings) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsPtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsResponse struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The feature columns that are available for training but unknown at the time of forecast/inference.
	// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
	FeaturesUnknownAtForecastTime []string `pulumi:"featuresUnknownAtForecastTime"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsResponse
func (val *ForecastingSettingsResponse) Defaults() *ForecastingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// Forecasting specific parameters.
type ForecastingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutput() ForecastingSettingsResponseOutput {
	return o
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutputWithContext(ctx context.Context) ForecastingSettingsResponseOutput {
	return o
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponseOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponseOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponseOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The feature columns that are available for training but unknown at the time of forecast/inference.
// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
func (o ForecastingSettingsResponseOutput) FeaturesUnknownAtForecastTime() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) []string { return v.FeaturesUnknownAtForecastTime }).(pulumi.StringArrayOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponseOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponseOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponseOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponseOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponseOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponseOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponseOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponseOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponseOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutput() ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutputWithContext(ctx context.Context) ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) Elem() ForecastingSettingsResponseOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) ForecastingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ForecastingSettingsResponse
		return ret
	}).(ForecastingSettingsResponseOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponsePtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponsePtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponsePtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The feature columns that are available for training but unknown at the time of forecast/inference.
// If features_unknown_at_forecast_time is not set, it is assumed that all the feature columns in the dataset are known at inference time.
func (o ForecastingSettingsResponsePtrOutput) FeaturesUnknownAtForecastTime() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.FeaturesUnknownAtForecastTime
	}).(pulumi.StringArrayOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponsePtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponsePtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponsePtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponsePtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponsePtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponsePtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponsePtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettings struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettings
func (val *ForecastingTrainingSettings) Defaults() *ForecastingTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// ForecastingTrainingSettingsInput is an input type that accepts ForecastingTrainingSettingsArgs and ForecastingTrainingSettingsOutput values.
// You can construct a concrete instance of `ForecastingTrainingSettingsInput` via:
//
//	ForecastingTrainingSettingsArgs{...}
type ForecastingTrainingSettingsInput interface {
	pulumi.Input

	ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput
	ToForecastingTrainingSettingsOutputWithContext(context.Context) ForecastingTrainingSettingsOutput
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsArgs struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode pulumi.StringPtrInput `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettingsArgs
func (val *ForecastingTrainingSettingsArgs) Defaults() *ForecastingTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	if tmp.TrainingMode == nil {
		tmp.TrainingMode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (ForecastingTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettings)(nil)).Elem()
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput {
	return i.ToForecastingTrainingSettingsOutputWithContext(context.Background())
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsOutputWithContext(ctx context.Context) ForecastingTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsOutput)
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return i.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsOutput).ToForecastingTrainingSettingsPtrOutputWithContext(ctx)
}

// ForecastingTrainingSettingsPtrInput is an input type that accepts ForecastingTrainingSettingsArgs, ForecastingTrainingSettingsPtr and ForecastingTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `ForecastingTrainingSettingsPtrInput` via:
//
//	        ForecastingTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type ForecastingTrainingSettingsPtrInput interface {
	pulumi.Input

	ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput
	ToForecastingTrainingSettingsPtrOutputWithContext(context.Context) ForecastingTrainingSettingsPtrOutput
}

type forecastingTrainingSettingsPtrType ForecastingTrainingSettingsArgs

func ForecastingTrainingSettingsPtr(v *ForecastingTrainingSettingsArgs) ForecastingTrainingSettingsPtrInput {
	return (*forecastingTrainingSettingsPtrType)(v)
}

func (*forecastingTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettings)(nil)).Elem()
}

func (i *forecastingTrainingSettingsPtrType) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return i.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *forecastingTrainingSettingsPtrType) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettings)(nil)).Elem()
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput {
	return o
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsOutputWithContext(ctx context.Context) ForecastingTrainingSettingsOutput {
	return o
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return o.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForecastingTrainingSettings) *ForecastingTrainingSettings {
		return &v
	}).(ForecastingTrainingSettingsPtrOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ForecastingTrainingSettingsOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type ForecastingTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettings)(nil)).Elem()
}

func (o ForecastingTrainingSettingsPtrOutput) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return o
}

func (o ForecastingTrainingSettingsPtrOutput) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return o
}

func (o ForecastingTrainingSettingsPtrOutput) Elem() ForecastingTrainingSettingsOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) ForecastingTrainingSettings {
		if v != nil {
			return *v
		}
		var ret ForecastingTrainingSettings
		return ret
	}).(ForecastingTrainingSettingsOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ForecastingTrainingSettingsPtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsResponse struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettingsResponse
func (val *ForecastingTrainingSettingsResponse) Defaults() *ForecastingTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettingsResponse)(nil)).Elem()
}

func (o ForecastingTrainingSettingsResponseOutput) ToForecastingTrainingSettingsResponseOutput() ForecastingTrainingSettingsResponseOutput {
	return o
}

func (o ForecastingTrainingSettingsResponseOutput) ToForecastingTrainingSettingsResponseOutputWithContext(ctx context.Context) ForecastingTrainingSettingsResponseOutput {
	return o
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ForecastingTrainingSettingsResponseOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type ForecastingTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettingsResponse)(nil)).Elem()
}

func (o ForecastingTrainingSettingsResponsePtrOutput) ToForecastingTrainingSettingsResponsePtrOutput() ForecastingTrainingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingTrainingSettingsResponsePtrOutput) ToForecastingTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingTrainingSettingsResponsePtrOutput) Elem() ForecastingTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) ForecastingTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ForecastingTrainingSettingsResponse
		return ret
	}).(ForecastingTrainingSettingsResponseOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o ForecastingTrainingSettingsResponsePtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// FqdnOutboundRuleInput is an input type that accepts FqdnOutboundRuleArgs and FqdnOutboundRuleOutput values.
// You can construct a concrete instance of `FqdnOutboundRuleInput` via:
//
//	FqdnOutboundRuleArgs{...}
type FqdnOutboundRuleInput interface {
	pulumi.Input

	ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput
	ToFqdnOutboundRuleOutputWithContext(context.Context) FqdnOutboundRuleOutput
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    pulumi.StringPtrInput `pulumi:"category"`
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FqdnOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRule)(nil)).Elem()
}

func (i FqdnOutboundRuleArgs) ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput {
	return i.ToFqdnOutboundRuleOutputWithContext(context.Background())
}

func (i FqdnOutboundRuleArgs) ToFqdnOutboundRuleOutputWithContext(ctx context.Context) FqdnOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FqdnOutboundRuleOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleOutput struct{ *pulumi.OutputState }

func (FqdnOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRule)(nil)).Elem()
}

func (o FqdnOutboundRuleOutput) ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput {
	return o
}

func (o FqdnOutboundRuleOutput) ToFqdnOutboundRuleOutputWithContext(ctx context.Context) FqdnOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o FqdnOutboundRuleOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'FQDN'.
func (o FqdnOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FqdnOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (FqdnOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRuleResponse)(nil)).Elem()
}

func (o FqdnOutboundRuleResponseOutput) ToFqdnOutboundRuleResponseOutput() FqdnOutboundRuleResponseOutput {
	return o
}

func (o FqdnOutboundRuleResponseOutput) ToFqdnOutboundRuleResponseOutputWithContext(ctx context.Context) FqdnOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o FqdnOutboundRuleResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'FQDN'.
func (o FqdnOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Generation safety quality metric threshold definition.
type GenerationSafetyQualityMetricThreshold struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// GenerationSafetyQualityMetricThresholdInput is an input type that accepts GenerationSafetyQualityMetricThresholdArgs and GenerationSafetyQualityMetricThresholdOutput values.
// You can construct a concrete instance of `GenerationSafetyQualityMetricThresholdInput` via:
//
//	GenerationSafetyQualityMetricThresholdArgs{...}
type GenerationSafetyQualityMetricThresholdInput interface {
	pulumi.Input

	ToGenerationSafetyQualityMetricThresholdOutput() GenerationSafetyQualityMetricThresholdOutput
	ToGenerationSafetyQualityMetricThresholdOutputWithContext(context.Context) GenerationSafetyQualityMetricThresholdOutput
}

// Generation safety quality metric threshold definition.
type GenerationSafetyQualityMetricThresholdArgs struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (GenerationSafetyQualityMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMetricThreshold)(nil)).Elem()
}

func (i GenerationSafetyQualityMetricThresholdArgs) ToGenerationSafetyQualityMetricThresholdOutput() GenerationSafetyQualityMetricThresholdOutput {
	return i.ToGenerationSafetyQualityMetricThresholdOutputWithContext(context.Background())
}

func (i GenerationSafetyQualityMetricThresholdArgs) ToGenerationSafetyQualityMetricThresholdOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationSafetyQualityMetricThresholdOutput)
}

// GenerationSafetyQualityMetricThresholdArrayInput is an input type that accepts GenerationSafetyQualityMetricThresholdArray and GenerationSafetyQualityMetricThresholdArrayOutput values.
// You can construct a concrete instance of `GenerationSafetyQualityMetricThresholdArrayInput` via:
//
//	GenerationSafetyQualityMetricThresholdArray{ GenerationSafetyQualityMetricThresholdArgs{...} }
type GenerationSafetyQualityMetricThresholdArrayInput interface {
	pulumi.Input

	ToGenerationSafetyQualityMetricThresholdArrayOutput() GenerationSafetyQualityMetricThresholdArrayOutput
	ToGenerationSafetyQualityMetricThresholdArrayOutputWithContext(context.Context) GenerationSafetyQualityMetricThresholdArrayOutput
}

type GenerationSafetyQualityMetricThresholdArray []GenerationSafetyQualityMetricThresholdInput

func (GenerationSafetyQualityMetricThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationSafetyQualityMetricThreshold)(nil)).Elem()
}

func (i GenerationSafetyQualityMetricThresholdArray) ToGenerationSafetyQualityMetricThresholdArrayOutput() GenerationSafetyQualityMetricThresholdArrayOutput {
	return i.ToGenerationSafetyQualityMetricThresholdArrayOutputWithContext(context.Background())
}

func (i GenerationSafetyQualityMetricThresholdArray) ToGenerationSafetyQualityMetricThresholdArrayOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationSafetyQualityMetricThresholdArrayOutput)
}

// Generation safety quality metric threshold definition.
type GenerationSafetyQualityMetricThresholdOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMetricThreshold)(nil)).Elem()
}

func (o GenerationSafetyQualityMetricThresholdOutput) ToGenerationSafetyQualityMetricThresholdOutput() GenerationSafetyQualityMetricThresholdOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdOutput) ToGenerationSafetyQualityMetricThresholdOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdOutput {
	return o
}

// [Required] Gets or sets the feature attribution metric to calculate.
func (o GenerationSafetyQualityMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// Gets or sets the threshold value.
// If null, a default value will be set depending on the selected metric.
func (o GenerationSafetyQualityMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type GenerationSafetyQualityMetricThresholdArrayOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMetricThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationSafetyQualityMetricThreshold)(nil)).Elem()
}

func (o GenerationSafetyQualityMetricThresholdArrayOutput) ToGenerationSafetyQualityMetricThresholdArrayOutput() GenerationSafetyQualityMetricThresholdArrayOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdArrayOutput) ToGenerationSafetyQualityMetricThresholdArrayOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdArrayOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdArrayOutput) Index(i pulumi.IntInput) GenerationSafetyQualityMetricThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GenerationSafetyQualityMetricThreshold {
		return vs[0].([]GenerationSafetyQualityMetricThreshold)[vs[1].(int)]
	}).(GenerationSafetyQualityMetricThresholdOutput)
}

// Generation safety quality metric threshold definition.
type GenerationSafetyQualityMetricThresholdResponse struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

// Generation safety quality metric threshold definition.
type GenerationSafetyQualityMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMetricThresholdResponse)(nil)).Elem()
}

func (o GenerationSafetyQualityMetricThresholdResponseOutput) ToGenerationSafetyQualityMetricThresholdResponseOutput() GenerationSafetyQualityMetricThresholdResponseOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdResponseOutput) ToGenerationSafetyQualityMetricThresholdResponseOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdResponseOutput {
	return o
}

// [Required] Gets or sets the feature attribution metric to calculate.
func (o GenerationSafetyQualityMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// Gets or sets the threshold value.
// If null, a default value will be set depending on the selected metric.
func (o GenerationSafetyQualityMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMetricThresholdResponse) *MonitoringThresholdResponse {
		return v.Threshold
	}).(MonitoringThresholdResponsePtrOutput)
}

type GenerationSafetyQualityMetricThresholdResponseArrayOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMetricThresholdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationSafetyQualityMetricThresholdResponse)(nil)).Elem()
}

func (o GenerationSafetyQualityMetricThresholdResponseArrayOutput) ToGenerationSafetyQualityMetricThresholdResponseArrayOutput() GenerationSafetyQualityMetricThresholdResponseArrayOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdResponseArrayOutput) ToGenerationSafetyQualityMetricThresholdResponseArrayOutputWithContext(ctx context.Context) GenerationSafetyQualityMetricThresholdResponseArrayOutput {
	return o
}

func (o GenerationSafetyQualityMetricThresholdResponseArrayOutput) Index(i pulumi.IntInput) GenerationSafetyQualityMetricThresholdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GenerationSafetyQualityMetricThresholdResponse {
		return vs[0].([]GenerationSafetyQualityMetricThresholdResponse)[vs[1].(int)]
	}).(GenerationSafetyQualityMetricThresholdResponseOutput)
}

// Generation safety quality monitoring signal definition.
type GenerationSafetyQualityMonitoringSignal struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds []GenerationSafetyQualityMetricThreshold `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate float64 `pulumi:"samplingRate"`
	// Expected value is 'GenerationSafetyQuality'.
	SignalType string `pulumi:"signalType"`
	// Gets or sets the workspace connection ID used to connect to the content generation endpoint.
	WorkspaceConnectionId *string `pulumi:"workspaceConnectionId"`
}

// GenerationSafetyQualityMonitoringSignalInput is an input type that accepts GenerationSafetyQualityMonitoringSignalArgs and GenerationSafetyQualityMonitoringSignalOutput values.
// You can construct a concrete instance of `GenerationSafetyQualityMonitoringSignalInput` via:
//
//	GenerationSafetyQualityMonitoringSignalArgs{...}
type GenerationSafetyQualityMonitoringSignalInput interface {
	pulumi.Input

	ToGenerationSafetyQualityMonitoringSignalOutput() GenerationSafetyQualityMonitoringSignalOutput
	ToGenerationSafetyQualityMonitoringSignalOutputWithContext(context.Context) GenerationSafetyQualityMonitoringSignalOutput
}

// Generation safety quality monitoring signal definition.
type GenerationSafetyQualityMonitoringSignalArgs struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds GenerationSafetyQualityMetricThresholdArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData pulumi.ArrayInput `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate pulumi.Float64Input `pulumi:"samplingRate"`
	// Expected value is 'GenerationSafetyQuality'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
	// Gets or sets the workspace connection ID used to connect to the content generation endpoint.
	WorkspaceConnectionId pulumi.StringPtrInput `pulumi:"workspaceConnectionId"`
}

func (GenerationSafetyQualityMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMonitoringSignal)(nil)).Elem()
}

func (i GenerationSafetyQualityMonitoringSignalArgs) ToGenerationSafetyQualityMonitoringSignalOutput() GenerationSafetyQualityMonitoringSignalOutput {
	return i.ToGenerationSafetyQualityMonitoringSignalOutputWithContext(context.Background())
}

func (i GenerationSafetyQualityMonitoringSignalArgs) ToGenerationSafetyQualityMonitoringSignalOutputWithContext(ctx context.Context) GenerationSafetyQualityMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationSafetyQualityMonitoringSignalOutput)
}

// Generation safety quality monitoring signal definition.
type GenerationSafetyQualityMonitoringSignalOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMonitoringSignal)(nil)).Elem()
}

func (o GenerationSafetyQualityMonitoringSignalOutput) ToGenerationSafetyQualityMonitoringSignalOutput() GenerationSafetyQualityMonitoringSignalOutput {
	return o
}

func (o GenerationSafetyQualityMonitoringSignalOutput) ToGenerationSafetyQualityMonitoringSignalOutputWithContext(ctx context.Context) GenerationSafetyQualityMonitoringSignalOutput {
	return o
}

// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
func (o GenerationSafetyQualityMonitoringSignalOutput) MetricThresholds() GenerationSafetyQualityMetricThresholdArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) []GenerationSafetyQualityMetricThreshold {
		return v.MetricThresholds
	}).(GenerationSafetyQualityMetricThresholdArrayOutput)
}

// The current notification mode for this signal.
func (o GenerationSafetyQualityMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Gets or sets the production data for computing metrics.
func (o GenerationSafetyQualityMonitoringSignalOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o GenerationSafetyQualityMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
func (o GenerationSafetyQualityMonitoringSignalOutput) SamplingRate() pulumi.Float64Output {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) float64 { return v.SamplingRate }).(pulumi.Float64Output)
}

// Expected value is 'GenerationSafetyQuality'.
func (o GenerationSafetyQualityMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

// Gets or sets the workspace connection ID used to connect to the content generation endpoint.
func (o GenerationSafetyQualityMonitoringSignalOutput) WorkspaceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignal) *string { return v.WorkspaceConnectionId }).(pulumi.StringPtrOutput)
}

// Generation safety quality monitoring signal definition.
type GenerationSafetyQualityMonitoringSignalResponse struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds []GenerationSafetyQualityMetricThresholdResponse `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate float64 `pulumi:"samplingRate"`
	// Expected value is 'GenerationSafetyQuality'.
	SignalType string `pulumi:"signalType"`
	// Gets or sets the workspace connection ID used to connect to the content generation endpoint.
	WorkspaceConnectionId *string `pulumi:"workspaceConnectionId"`
}

// Generation safety quality monitoring signal definition.
type GenerationSafetyQualityMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (GenerationSafetyQualityMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationSafetyQualityMonitoringSignalResponse)(nil)).Elem()
}

func (o GenerationSafetyQualityMonitoringSignalResponseOutput) ToGenerationSafetyQualityMonitoringSignalResponseOutput() GenerationSafetyQualityMonitoringSignalResponseOutput {
	return o
}

func (o GenerationSafetyQualityMonitoringSignalResponseOutput) ToGenerationSafetyQualityMonitoringSignalResponseOutputWithContext(ctx context.Context) GenerationSafetyQualityMonitoringSignalResponseOutput {
	return o
}

// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) MetricThresholds() GenerationSafetyQualityMetricThresholdResponseArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) []GenerationSafetyQualityMetricThresholdResponse {
		return v.MetricThresholds
	}).(GenerationSafetyQualityMetricThresholdResponseArrayOutput)
}

// The current notification mode for this signal.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Gets or sets the production data for computing metrics.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) SamplingRate() pulumi.Float64Output {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) float64 { return v.SamplingRate }).(pulumi.Float64Output)
}

// Expected value is 'GenerationSafetyQuality'.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

// Gets or sets the workspace connection ID used to connect to the content generation endpoint.
func (o GenerationSafetyQualityMonitoringSignalResponseOutput) WorkspaceConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GenerationSafetyQualityMonitoringSignalResponse) *string { return v.WorkspaceConnectionId }).(pulumi.StringPtrOutput)
}

// Generation token statistics metric threshold definition.
type GenerationTokenUsageMetricThreshold struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// GenerationTokenUsageMetricThresholdInput is an input type that accepts GenerationTokenUsageMetricThresholdArgs and GenerationTokenUsageMetricThresholdOutput values.
// You can construct a concrete instance of `GenerationTokenUsageMetricThresholdInput` via:
//
//	GenerationTokenUsageMetricThresholdArgs{...}
type GenerationTokenUsageMetricThresholdInput interface {
	pulumi.Input

	ToGenerationTokenUsageMetricThresholdOutput() GenerationTokenUsageMetricThresholdOutput
	ToGenerationTokenUsageMetricThresholdOutputWithContext(context.Context) GenerationTokenUsageMetricThresholdOutput
}

// Generation token statistics metric threshold definition.
type GenerationTokenUsageMetricThresholdArgs struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (GenerationTokenUsageMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageMetricThreshold)(nil)).Elem()
}

func (i GenerationTokenUsageMetricThresholdArgs) ToGenerationTokenUsageMetricThresholdOutput() GenerationTokenUsageMetricThresholdOutput {
	return i.ToGenerationTokenUsageMetricThresholdOutputWithContext(context.Background())
}

func (i GenerationTokenUsageMetricThresholdArgs) ToGenerationTokenUsageMetricThresholdOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationTokenUsageMetricThresholdOutput)
}

// GenerationTokenUsageMetricThresholdArrayInput is an input type that accepts GenerationTokenUsageMetricThresholdArray and GenerationTokenUsageMetricThresholdArrayOutput values.
// You can construct a concrete instance of `GenerationTokenUsageMetricThresholdArrayInput` via:
//
//	GenerationTokenUsageMetricThresholdArray{ GenerationTokenUsageMetricThresholdArgs{...} }
type GenerationTokenUsageMetricThresholdArrayInput interface {
	pulumi.Input

	ToGenerationTokenUsageMetricThresholdArrayOutput() GenerationTokenUsageMetricThresholdArrayOutput
	ToGenerationTokenUsageMetricThresholdArrayOutputWithContext(context.Context) GenerationTokenUsageMetricThresholdArrayOutput
}

type GenerationTokenUsageMetricThresholdArray []GenerationTokenUsageMetricThresholdInput

func (GenerationTokenUsageMetricThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationTokenUsageMetricThreshold)(nil)).Elem()
}

func (i GenerationTokenUsageMetricThresholdArray) ToGenerationTokenUsageMetricThresholdArrayOutput() GenerationTokenUsageMetricThresholdArrayOutput {
	return i.ToGenerationTokenUsageMetricThresholdArrayOutputWithContext(context.Background())
}

func (i GenerationTokenUsageMetricThresholdArray) ToGenerationTokenUsageMetricThresholdArrayOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationTokenUsageMetricThresholdArrayOutput)
}

// Generation token statistics metric threshold definition.
type GenerationTokenUsageMetricThresholdOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageMetricThreshold)(nil)).Elem()
}

func (o GenerationTokenUsageMetricThresholdOutput) ToGenerationTokenUsageMetricThresholdOutput() GenerationTokenUsageMetricThresholdOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdOutput) ToGenerationTokenUsageMetricThresholdOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdOutput {
	return o
}

// [Required] Gets or sets the feature attribution metric to calculate.
func (o GenerationTokenUsageMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationTokenUsageMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// Gets or sets the threshold value.
// If null, a default value will be set depending on the selected metric.
func (o GenerationTokenUsageMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v GenerationTokenUsageMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type GenerationTokenUsageMetricThresholdArrayOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageMetricThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationTokenUsageMetricThreshold)(nil)).Elem()
}

func (o GenerationTokenUsageMetricThresholdArrayOutput) ToGenerationTokenUsageMetricThresholdArrayOutput() GenerationTokenUsageMetricThresholdArrayOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdArrayOutput) ToGenerationTokenUsageMetricThresholdArrayOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdArrayOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdArrayOutput) Index(i pulumi.IntInput) GenerationTokenUsageMetricThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GenerationTokenUsageMetricThreshold {
		return vs[0].([]GenerationTokenUsageMetricThreshold)[vs[1].(int)]
	}).(GenerationTokenUsageMetricThresholdOutput)
}

// Generation token statistics metric threshold definition.
type GenerationTokenUsageMetricThresholdResponse struct {
	// [Required] Gets or sets the feature attribution metric to calculate.
	Metric string `pulumi:"metric"`
	// Gets or sets the threshold value.
	// If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

// Generation token statistics metric threshold definition.
type GenerationTokenUsageMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageMetricThresholdResponse)(nil)).Elem()
}

func (o GenerationTokenUsageMetricThresholdResponseOutput) ToGenerationTokenUsageMetricThresholdResponseOutput() GenerationTokenUsageMetricThresholdResponseOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdResponseOutput) ToGenerationTokenUsageMetricThresholdResponseOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdResponseOutput {
	return o
}

// [Required] Gets or sets the feature attribution metric to calculate.
func (o GenerationTokenUsageMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationTokenUsageMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// Gets or sets the threshold value.
// If null, a default value will be set depending on the selected metric.
func (o GenerationTokenUsageMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v GenerationTokenUsageMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type GenerationTokenUsageMetricThresholdResponseArrayOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageMetricThresholdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenerationTokenUsageMetricThresholdResponse)(nil)).Elem()
}

func (o GenerationTokenUsageMetricThresholdResponseArrayOutput) ToGenerationTokenUsageMetricThresholdResponseArrayOutput() GenerationTokenUsageMetricThresholdResponseArrayOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdResponseArrayOutput) ToGenerationTokenUsageMetricThresholdResponseArrayOutputWithContext(ctx context.Context) GenerationTokenUsageMetricThresholdResponseArrayOutput {
	return o
}

func (o GenerationTokenUsageMetricThresholdResponseArrayOutput) Index(i pulumi.IntInput) GenerationTokenUsageMetricThresholdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GenerationTokenUsageMetricThresholdResponse {
		return vs[0].([]GenerationTokenUsageMetricThresholdResponse)[vs[1].(int)]
	}).(GenerationTokenUsageMetricThresholdResponseOutput)
}

// Generation token usage signal definition.
type GenerationTokenUsageSignal struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds []GenerationTokenUsageMetricThreshold `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate float64 `pulumi:"samplingRate"`
	// Expected value is 'GenerationTokenStatistics'.
	SignalType string `pulumi:"signalType"`
}

// GenerationTokenUsageSignalInput is an input type that accepts GenerationTokenUsageSignalArgs and GenerationTokenUsageSignalOutput values.
// You can construct a concrete instance of `GenerationTokenUsageSignalInput` via:
//
//	GenerationTokenUsageSignalArgs{...}
type GenerationTokenUsageSignalInput interface {
	pulumi.Input

	ToGenerationTokenUsageSignalOutput() GenerationTokenUsageSignalOutput
	ToGenerationTokenUsageSignalOutputWithContext(context.Context) GenerationTokenUsageSignalOutput
}

// Generation token usage signal definition.
type GenerationTokenUsageSignalArgs struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds GenerationTokenUsageMetricThresholdArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData pulumi.ArrayInput `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate pulumi.Float64Input `pulumi:"samplingRate"`
	// Expected value is 'GenerationTokenStatistics'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

func (GenerationTokenUsageSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageSignal)(nil)).Elem()
}

func (i GenerationTokenUsageSignalArgs) ToGenerationTokenUsageSignalOutput() GenerationTokenUsageSignalOutput {
	return i.ToGenerationTokenUsageSignalOutputWithContext(context.Background())
}

func (i GenerationTokenUsageSignalArgs) ToGenerationTokenUsageSignalOutputWithContext(ctx context.Context) GenerationTokenUsageSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenerationTokenUsageSignalOutput)
}

// Generation token usage signal definition.
type GenerationTokenUsageSignalOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageSignal)(nil)).Elem()
}

func (o GenerationTokenUsageSignalOutput) ToGenerationTokenUsageSignalOutput() GenerationTokenUsageSignalOutput {
	return o
}

func (o GenerationTokenUsageSignalOutput) ToGenerationTokenUsageSignalOutputWithContext(ctx context.Context) GenerationTokenUsageSignalOutput {
	return o
}

// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
func (o GenerationTokenUsageSignalOutput) MetricThresholds() GenerationTokenUsageMetricThresholdArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignal) []GenerationTokenUsageMetricThreshold { return v.MetricThresholds }).(GenerationTokenUsageMetricThresholdArrayOutput)
}

// The current notification mode for this signal.
func (o GenerationTokenUsageSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Gets or sets the production data for computing metrics.
func (o GenerationTokenUsageSignalOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignal) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o GenerationTokenUsageSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
func (o GenerationTokenUsageSignalOutput) SamplingRate() pulumi.Float64Output {
	return o.ApplyT(func(v GenerationTokenUsageSignal) float64 { return v.SamplingRate }).(pulumi.Float64Output)
}

// Expected value is 'GenerationTokenStatistics'.
func (o GenerationTokenUsageSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

// Generation token usage signal definition.
type GenerationTokenUsageSignalResponse struct {
	// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
	MetricThresholds []GenerationTokenUsageMetricThresholdResponse `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// Gets or sets the production data for computing metrics.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
	SamplingRate float64 `pulumi:"samplingRate"`
	// Expected value is 'GenerationTokenStatistics'.
	SignalType string `pulumi:"signalType"`
}

// Generation token usage signal definition.
type GenerationTokenUsageSignalResponseOutput struct{ *pulumi.OutputState }

func (GenerationTokenUsageSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenerationTokenUsageSignalResponse)(nil)).Elem()
}

func (o GenerationTokenUsageSignalResponseOutput) ToGenerationTokenUsageSignalResponseOutput() GenerationTokenUsageSignalResponseOutput {
	return o
}

func (o GenerationTokenUsageSignalResponseOutput) ToGenerationTokenUsageSignalResponseOutputWithContext(ctx context.Context) GenerationTokenUsageSignalResponseOutput {
	return o
}

// [Required] Gets or sets the metrics to calculate and the corresponding thresholds.
func (o GenerationTokenUsageSignalResponseOutput) MetricThresholds() GenerationTokenUsageMetricThresholdResponseArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) []GenerationTokenUsageMetricThresholdResponse {
		return v.MetricThresholds
	}).(GenerationTokenUsageMetricThresholdResponseArrayOutput)
}

// The current notification mode for this signal.
func (o GenerationTokenUsageSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// Gets or sets the production data for computing metrics.
func (o GenerationTokenUsageSignalResponseOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o GenerationTokenUsageSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The sample rate of the production data, should be greater than 0 and at most 1.
func (o GenerationTokenUsageSignalResponseOutput) SamplingRate() pulumi.Float64Output {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) float64 { return v.SamplingRate }).(pulumi.Float64Output)
}

// Expected value is 'GenerationTokenStatistics'.
func (o GenerationTokenUsageSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v GenerationTokenUsageSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithm struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// GridSamplingAlgorithmInput is an input type that accepts GridSamplingAlgorithmArgs and GridSamplingAlgorithmOutput values.
// You can construct a concrete instance of `GridSamplingAlgorithmInput` via:
//
//	GridSamplingAlgorithmArgs{...}
type GridSamplingAlgorithmInput interface {
	pulumi.Input

	ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput
	ToGridSamplingAlgorithmOutputWithContext(context.Context) GridSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmArgs struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (GridSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return i.ToGridSamplingAlgorithmOutputWithContext(context.Background())
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return o
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponse struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithmResponse)(nil)).Elem()
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutput() GridSamplingAlgorithmResponseOutput {
	return o
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutputWithContext(ctx context.Context) GridSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// A HDInsight compute.
type HDInsight struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// HDInsight compute properties
	Properties *HDInsightProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// HDInsightInput is an input type that accepts HDInsightArgs and HDInsightOutput values.
// You can construct a concrete instance of `HDInsightInput` via:
//
//	HDInsightArgs{...}
type HDInsightInput interface {
	pulumi.Input

	ToHDInsightOutput() HDInsightOutput
	ToHDInsightOutputWithContext(context.Context) HDInsightOutput
}

// A HDInsight compute.
type HDInsightArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// HDInsight compute properties
	Properties HDInsightPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HDInsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsight)(nil)).Elem()
}

func (i HDInsightArgs) ToHDInsightOutput() HDInsightOutput {
	return i.ToHDInsightOutputWithContext(context.Background())
}

func (i HDInsightArgs) ToHDInsightOutputWithContext(ctx context.Context) HDInsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOutput)
}

func (i HDInsightArgs) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return i.ToHDInsightPtrOutputWithContext(context.Background())
}

func (i HDInsightArgs) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOutput).ToHDInsightPtrOutputWithContext(ctx)
}

// HDInsightPtrInput is an input type that accepts HDInsightArgs, HDInsightPtr and HDInsightPtrOutput values.
// You can construct a concrete instance of `HDInsightPtrInput` via:
//
//	        HDInsightArgs{...}
//
//	or:
//
//	        nil
type HDInsightPtrInput interface {
	pulumi.Input

	ToHDInsightPtrOutput() HDInsightPtrOutput
	ToHDInsightPtrOutputWithContext(context.Context) HDInsightPtrOutput
}

type hdinsightPtrType HDInsightArgs

func HDInsightPtr(v *HDInsightArgs) HDInsightPtrInput {
	return (*hdinsightPtrType)(v)
}

func (*hdinsightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsight)(nil)).Elem()
}

func (i *hdinsightPtrType) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return i.ToHDInsightPtrOutputWithContext(context.Background())
}

func (i *hdinsightPtrType) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPtrOutput)
}

// A HDInsight compute.
type HDInsightOutput struct{ *pulumi.OutputState }

func (HDInsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsight)(nil)).Elem()
}

func (o HDInsightOutput) ToHDInsightOutput() HDInsightOutput {
	return o
}

func (o HDInsightOutput) ToHDInsightOutputWithContext(ctx context.Context) HDInsightOutput {
	return o
}

func (o HDInsightOutput) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return o.ToHDInsightPtrOutputWithContext(context.Background())
}

func (o HDInsightOutput) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HDInsight) *HDInsight {
		return &v
	}).(HDInsightPtrOutput)
}

// Location for the underlying compute
func (o HDInsightOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsight) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HDInsight) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// HDInsight compute properties
func (o HDInsightOutput) Properties() HDInsightPropertiesPtrOutput {
	return o.ApplyT(func(v HDInsight) *HDInsightProperties { return v.Properties }).(HDInsightPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type HDInsightPtrOutput struct{ *pulumi.OutputState }

func (HDInsightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsight)(nil)).Elem()
}

func (o HDInsightPtrOutput) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return o
}

func (o HDInsightPtrOutput) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return o
}

func (o HDInsightPtrOutput) Elem() HDInsightOutput {
	return o.ApplyT(func(v *HDInsight) HDInsight {
		if v != nil {
			return *v
		}
		var ret HDInsight
		return ret
	}).(HDInsightOutput)
}

// Location for the underlying compute
func (o HDInsightPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HDInsight) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// HDInsight compute properties
func (o HDInsightPtrOutput) Properties() HDInsightPropertiesPtrOutput {
	return o.ApplyT(func(v *HDInsight) *HDInsightProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(HDInsightPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// HDInsight compute properties
type HDInsightProperties struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentials `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// HDInsightPropertiesInput is an input type that accepts HDInsightPropertiesArgs and HDInsightPropertiesOutput values.
// You can construct a concrete instance of `HDInsightPropertiesInput` via:
//
//	HDInsightPropertiesArgs{...}
type HDInsightPropertiesInput interface {
	pulumi.Input

	ToHDInsightPropertiesOutput() HDInsightPropertiesOutput
	ToHDInsightPropertiesOutputWithContext(context.Context) HDInsightPropertiesOutput
}

// HDInsight compute properties
type HDInsightPropertiesArgs struct {
	// Public IP address of the master node of the cluster.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount VirtualMachineSshCredentialsPtrInput `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort pulumi.IntPtrInput `pulumi:"sshPort"`
}

func (HDInsightPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightProperties)(nil)).Elem()
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesOutput() HDInsightPropertiesOutput {
	return i.ToHDInsightPropertiesOutputWithContext(context.Background())
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesOutputWithContext(ctx context.Context) HDInsightPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesOutput)
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return i.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesOutput).ToHDInsightPropertiesPtrOutputWithContext(ctx)
}

// HDInsightPropertiesPtrInput is an input type that accepts HDInsightPropertiesArgs, HDInsightPropertiesPtr and HDInsightPropertiesPtrOutput values.
// You can construct a concrete instance of `HDInsightPropertiesPtrInput` via:
//
//	        HDInsightPropertiesArgs{...}
//
//	or:
//
//	        nil
type HDInsightPropertiesPtrInput interface {
	pulumi.Input

	ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput
	ToHDInsightPropertiesPtrOutputWithContext(context.Context) HDInsightPropertiesPtrOutput
}

type hdinsightPropertiesPtrType HDInsightPropertiesArgs

func HDInsightPropertiesPtr(v *HDInsightPropertiesArgs) HDInsightPropertiesPtrInput {
	return (*hdinsightPropertiesPtrType)(v)
}

func (*hdinsightPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightProperties)(nil)).Elem()
}

func (i *hdinsightPropertiesPtrType) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return i.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (i *hdinsightPropertiesPtrType) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesPtrOutput)
}

// HDInsight compute properties
type HDInsightPropertiesOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightProperties)(nil)).Elem()
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesOutput() HDInsightPropertiesOutput {
	return o
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesOutputWithContext(ctx context.Context) HDInsightPropertiesOutput {
	return o
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return o.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HDInsightProperties) *HDInsightProperties {
		return &v
	}).(HDInsightPropertiesPtrOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *VirtualMachineSshCredentials { return v.AdministratorAccount }).(VirtualMachineSshCredentialsPtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

type HDInsightPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightProperties)(nil)).Elem()
}

func (o HDInsightPropertiesPtrOutput) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return o
}

func (o HDInsightPropertiesPtrOutput) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return o
}

func (o HDInsightPropertiesPtrOutput) Elem() HDInsightPropertiesOutput {
	return o.ApplyT(func(v *HDInsightProperties) HDInsightProperties {
		if v != nil {
			return *v
		}
		var ret HDInsightProperties
		return ret
	}).(HDInsightPropertiesOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesPtrOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *VirtualMachineSshCredentials {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsPtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesPtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// HDInsight compute properties
type HDInsightPropertiesResponse struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentialsResponse `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// HDInsight compute properties
type HDInsightPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightPropertiesResponse)(nil)).Elem()
}

func (o HDInsightPropertiesResponseOutput) ToHDInsightPropertiesResponseOutput() HDInsightPropertiesResponseOutput {
	return o
}

func (o HDInsightPropertiesResponseOutput) ToHDInsightPropertiesResponseOutputWithContext(ctx context.Context) HDInsightPropertiesResponseOutput {
	return o
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesResponseOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *VirtualMachineSshCredentialsResponse {
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesResponseOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

type HDInsightPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightPropertiesResponse)(nil)).Elem()
}

func (o HDInsightPropertiesResponsePtrOutput) ToHDInsightPropertiesResponsePtrOutput() HDInsightPropertiesResponsePtrOutput {
	return o
}

func (o HDInsightPropertiesResponsePtrOutput) ToHDInsightPropertiesResponsePtrOutputWithContext(ctx context.Context) HDInsightPropertiesResponsePtrOutput {
	return o
}

func (o HDInsightPropertiesResponsePtrOutput) Elem() HDInsightPropertiesResponseOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) HDInsightPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret HDInsightPropertiesResponse
		return ret
	}).(HDInsightPropertiesResponseOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesResponsePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesResponsePtrOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *VirtualMachineSshCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesResponsePtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// A HDInsight compute.
type HDInsightResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// HDInsight compute properties
	Properties *HDInsightPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A HDInsight compute.
type HDInsightResponseOutput struct{ *pulumi.OutputState }

func (HDInsightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightResponse)(nil)).Elem()
}

func (o HDInsightResponseOutput) ToHDInsightResponseOutput() HDInsightResponseOutput {
	return o
}

func (o HDInsightResponseOutput) ToHDInsightResponseOutputWithContext(ctx context.Context) HDInsightResponseOutput {
	return o
}

// Location for the underlying compute
func (o HDInsightResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o HDInsightResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o HDInsightResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v HDInsightResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o HDInsightResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// HDInsight compute properties
func (o HDInsightResponseOutput) Properties() HDInsightPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *HDInsightPropertiesResponse { return v.Properties }).(HDInsightPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o HDInsightResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v HDInsightResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o HDInsightResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type HdfsDatastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate *string `pulumi:"hdfsServerCertificate"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress string `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol *string `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastore
func (val *HdfsDatastore) Defaults() *HdfsDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.Protocol == nil {
		protocol_ := "http"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// HdfsDatastoreInput is an input type that accepts HdfsDatastoreArgs and HdfsDatastoreOutput values.
// You can construct a concrete instance of `HdfsDatastoreInput` via:
//
//	HdfsDatastoreArgs{...}
type HdfsDatastoreInput interface {
	pulumi.Input

	ToHdfsDatastoreOutput() HdfsDatastoreOutput
	ToHdfsDatastoreOutputWithContext(context.Context) HdfsDatastoreOutput
}

type HdfsDatastoreArgs struct {
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate pulumi.StringPtrInput `pulumi:"hdfsServerCertificate"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress pulumi.StringInput `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastoreArgs
func (val *HdfsDatastoreArgs) Defaults() *HdfsDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("http")
	}
	return &tmp
}
func (HdfsDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastore)(nil)).Elem()
}

func (i HdfsDatastoreArgs) ToHdfsDatastoreOutput() HdfsDatastoreOutput {
	return i.ToHdfsDatastoreOutputWithContext(context.Background())
}

func (i HdfsDatastoreArgs) ToHdfsDatastoreOutputWithContext(ctx context.Context) HdfsDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsDatastoreOutput)
}

type HdfsDatastoreOutput struct{ *pulumi.OutputState }

func (HdfsDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastore)(nil)).Elem()
}

func (o HdfsDatastoreOutput) ToHdfsDatastoreOutput() HdfsDatastoreOutput {
	return o
}

func (o HdfsDatastoreOutput) ToHdfsDatastoreOutputWithContext(ctx context.Context) HdfsDatastoreOutput {
	return o
}

// [Required] Account credentials.
func (o HdfsDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'Hdfs'.
func (o HdfsDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o HdfsDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
func (o HdfsDatastoreOutput) HdfsServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.HdfsServerCertificate }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o HdfsDatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// [Required] IP Address or DNS HostName.
func (o HdfsDatastoreOutput) NameNodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastore) string { return v.NameNodeAddress }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o HdfsDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account (Https/Http).
func (o HdfsDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o HdfsDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type HdfsDatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate *string `pulumi:"hdfsServerCertificate"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress string `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol *string `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastoreResponse
func (val *HdfsDatastoreResponse) Defaults() *HdfsDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.Protocol == nil {
		protocol_ := "http"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

type HdfsDatastoreResponseOutput struct{ *pulumi.OutputState }

func (HdfsDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastoreResponse)(nil)).Elem()
}

func (o HdfsDatastoreResponseOutput) ToHdfsDatastoreResponseOutput() HdfsDatastoreResponseOutput {
	return o
}

func (o HdfsDatastoreResponseOutput) ToHdfsDatastoreResponseOutputWithContext(ctx context.Context) HdfsDatastoreResponseOutput {
	return o
}

// [Required] Account credentials.
func (o HdfsDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'Hdfs'.
func (o HdfsDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o HdfsDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
func (o HdfsDatastoreResponseOutput) HdfsServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.HdfsServerCertificate }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o HdfsDatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o HdfsDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// [Required] IP Address or DNS HostName.
func (o HdfsDatastoreResponseOutput) NameNodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) string { return v.NameNodeAddress }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o HdfsDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account (Https/Http).
func (o HdfsDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o HdfsDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReference struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// IdAssetReferenceInput is an input type that accepts IdAssetReferenceArgs and IdAssetReferenceOutput values.
// You can construct a concrete instance of `IdAssetReferenceInput` via:
//
//	IdAssetReferenceArgs{...}
type IdAssetReferenceInput interface {
	pulumi.Input

	ToIdAssetReferenceOutput() IdAssetReferenceOutput
	ToIdAssetReferenceOutputWithContext(context.Context) IdAssetReferenceOutput
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceArgs struct {
	// [Required] ARM resource ID of the asset.
	AssetId pulumi.StringInput `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (IdAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return i.ToIdAssetReferenceOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput)
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput).ToIdAssetReferencePtrOutputWithContext(ctx)
}

// IdAssetReferencePtrInput is an input type that accepts IdAssetReferenceArgs, IdAssetReferencePtr and IdAssetReferencePtrOutput values.
// You can construct a concrete instance of `IdAssetReferencePtrInput` via:
//
//	        IdAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type IdAssetReferencePtrInput interface {
	pulumi.Input

	ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput
	ToIdAssetReferencePtrOutputWithContext(context.Context) IdAssetReferencePtrOutput
}

type idAssetReferencePtrType IdAssetReferenceArgs

func IdAssetReferencePtr(v *IdAssetReferenceArgs) IdAssetReferencePtrInput {
	return (*idAssetReferencePtrType)(v)
}

func (*idAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferencePtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdAssetReference) *IdAssetReference {
		return &v
	}).(IdAssetReferencePtrOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) Elem() IdAssetReferenceOutput {
	return o.ApplyT(func(v *IdAssetReference) IdAssetReference {
		if v != nil {
			return *v
		}
		var ret IdAssetReference
		return ret
	}).(IdAssetReferenceOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferencePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponse struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutput() IdAssetReferenceResponseOutput {
	return o
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutputWithContext(ctx context.Context) IdAssetReferenceResponseOutput {
	return o
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutput() IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutputWithContext(ctx context.Context) IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) Elem() IdAssetReferenceResponseOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) IdAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret IdAssetReferenceResponse
		return ret
	}).(IdAssetReferenceResponseOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponsePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Identity object used for encryption.
type IdentityForCmk struct {
	// UserAssignedIdentity to be used to fetch the encryption key from keyVault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// IdentityForCmkInput is an input type that accepts IdentityForCmkArgs and IdentityForCmkOutput values.
// You can construct a concrete instance of `IdentityForCmkInput` via:
//
//	IdentityForCmkArgs{...}
type IdentityForCmkInput interface {
	pulumi.Input

	ToIdentityForCmkOutput() IdentityForCmkOutput
	ToIdentityForCmkOutputWithContext(context.Context) IdentityForCmkOutput
}

// Identity object used for encryption.
type IdentityForCmkArgs struct {
	// UserAssignedIdentity to be used to fetch the encryption key from keyVault
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (IdentityForCmkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return i.ToIdentityForCmkOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput)
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput).ToIdentityForCmkPtrOutputWithContext(ctx)
}

// IdentityForCmkPtrInput is an input type that accepts IdentityForCmkArgs, IdentityForCmkPtr and IdentityForCmkPtrOutput values.
// You can construct a concrete instance of `IdentityForCmkPtrInput` via:
//
//	        IdentityForCmkArgs{...}
//
//	or:
//
//	        nil
type IdentityForCmkPtrInput interface {
	pulumi.Input

	ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput
	ToIdentityForCmkPtrOutputWithContext(context.Context) IdentityForCmkPtrOutput
}

type identityForCmkPtrType IdentityForCmkArgs

func IdentityForCmkPtr(v *IdentityForCmkArgs) IdentityForCmkPtrInput {
	return (*identityForCmkPtrType)(v)
}

func (*identityForCmkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkPtrOutput)
}

// Identity object used for encryption.
type IdentityForCmkOutput struct{ *pulumi.OutputState }

func (IdentityForCmkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityForCmk) *IdentityForCmk {
		return &v
	}).(IdentityForCmkPtrOutput)
}

// UserAssignedIdentity to be used to fetch the encryption key from keyVault
func (o IdentityForCmkOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmk) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkPtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) Elem() IdentityForCmkOutput {
	return o.ApplyT(func(v *IdentityForCmk) IdentityForCmk {
		if v != nil {
			return *v
		}
		var ret IdentityForCmk
		return ret
	}).(IdentityForCmkOutput)
}

// UserAssignedIdentity to be used to fetch the encryption key from keyVault
func (o IdentityForCmkPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmk) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity object used for encryption.
type IdentityForCmkResponse struct {
	// UserAssignedIdentity to be used to fetch the encryption key from keyVault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Identity object used for encryption.
type IdentityForCmkResponseOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutput() IdentityForCmkResponseOutput {
	return o
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutputWithContext(ctx context.Context) IdentityForCmkResponseOutput {
	return o
}

// UserAssignedIdentity to be used to fetch the encryption key from keyVault
func (o IdentityForCmkResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmkResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutput() IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutputWithContext(ctx context.Context) IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) Elem() IdentityForCmkResponseOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) IdentityForCmkResponse {
		if v != nil {
			return *v
		}
		var ret IdentityForCmkResponse
		return ret
	}).(IdentityForCmkResponseOutput)
}

// UserAssignedIdentity to be used to fetch the encryption key from keyVault
func (o IdentityForCmkResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

type Image struct {
	// Image reference URL if type is docker. Environment name if type is azureml
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
	Type *string `pulumi:"type"`
	// Version of image being used. If latest then skip this field
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for Image
func (val *Image) Defaults() *Image {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

// ImageInput is an input type that accepts ImageArgs and ImageOutput values.
// You can construct a concrete instance of `ImageInput` via:
//
//	ImageArgs{...}
type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(context.Context) ImageOutput
}

type ImageArgs struct {
	// Image reference URL if type is docker. Environment name if type is azureml
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Version of image being used. If latest then skip this field
	Version pulumi.StringPtrInput `pulumi:"version"`
}

// Defaults sets the appropriate defaults for ImageArgs
func (val *ImageArgs) Defaults() *ImageArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("docker")
	}
	return &tmp
}
func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (i ImageArgs) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i ImageArgs) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i ImageArgs) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i ImageArgs) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput).ToImagePtrOutputWithContext(ctx)
}

// ImagePtrInput is an input type that accepts ImageArgs, ImagePtr and ImagePtrOutput values.
// You can construct a concrete instance of `ImagePtrInput` via:
//
//	        ImageArgs{...}
//
//	or:
//
//	        nil
type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func ImagePtr(v *ImageArgs) ImagePtrInput {
	return (*imagePtrType)(v)
}

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

// Image reference URL if type is docker. Environment name if type is azureml
func (o ImageOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
func (o ImageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Version of image being used. If latest then skip this field
func (o ImageOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// Image reference URL if type is docker. Environment name if type is azureml
func (o ImagePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
func (o ImagePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Version of image being used. If latest then skip this field
func (o ImagePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassification struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassification
func (val *ImageClassification) Defaults() *ImageClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageClassificationInput is an input type that accepts ImageClassificationArgs and ImageClassificationOutput values.
// You can construct a concrete instance of `ImageClassificationInput` via:
//
//	ImageClassificationArgs{...}
type ImageClassificationInput interface {
	pulumi.Input

	ToImageClassificationOutput() ImageClassificationOutput
	ToImageClassificationOutputWithContext(context.Context) ImageClassificationOutput
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationArgs
func (val *ImageClassificationArgs) Defaults() *ImageClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}

	return &tmp
}
func (ImageClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (i ImageClassificationArgs) ToImageClassificationOutput() ImageClassificationOutput {
	return i.ToImageClassificationOutputWithContext(context.Background())
}

func (i ImageClassificationArgs) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationOutput struct{ *pulumi.OutputState }

func (ImageClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (o ImageClassificationOutput) ToImageClassificationOutput() ImageClassificationOutput {
	return o
}

func (o ImageClassificationOutput) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassification) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassification) []ImageModelDistributionSettingsClassification { return v.SearchSpace }).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageClassification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageClassification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassification) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabel struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabel
func (val *ImageClassificationMultilabel) Defaults() *ImageClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageClassificationMultilabelInput is an input type that accepts ImageClassificationMultilabelArgs and ImageClassificationMultilabelOutput values.
// You can construct a concrete instance of `ImageClassificationMultilabelInput` via:
//
//	ImageClassificationMultilabelArgs{...}
type ImageClassificationMultilabelInput interface {
	pulumi.Input

	ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput
	ToImageClassificationMultilabelOutputWithContext(context.Context) ImageClassificationMultilabelOutput
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelArgs
func (val *ImageClassificationMultilabelArgs) Defaults() *ImageClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("IOU")
	}

	return &tmp
}
func (ImageClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return i.ToImageClassificationMultilabelOutputWithContext(context.Background())
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationMultilabelOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return o
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) []ImageModelDistributionSettingsClassification {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationMultilabelOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationMultilabelOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageClassificationMultilabelOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationMultilabelOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelResponse
func (val *ImageClassificationMultilabelResponse) Defaults() *ImageClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabelResponse)(nil)).Elem()
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutput() ImageClassificationMultilabelResponseOutput {
	return o
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutputWithContext(ctx context.Context) ImageClassificationMultilabelResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageModelSettingsClassificationResponse {
		return v.ModelSettings
	}).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationMultilabelResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationMultilabelResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageClassificationMultilabelResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationMultilabelResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationResponse
func (val *ImageClassificationResponse) Defaults() *ImageClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationResponse)(nil)).Elem()
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutput() ImageClassificationResponseOutput {
	return o
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutputWithContext(ctx context.Context) ImageClassificationResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageModelSettingsClassificationResponse { return v.ModelSettings }).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentation struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentation
func (val *ImageInstanceSegmentation) Defaults() *ImageInstanceSegmentation {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageInstanceSegmentationInput is an input type that accepts ImageInstanceSegmentationArgs and ImageInstanceSegmentationOutput values.
// You can construct a concrete instance of `ImageInstanceSegmentationInput` via:
//
//	ImageInstanceSegmentationArgs{...}
type ImageInstanceSegmentationInput interface {
	pulumi.Input

	ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput
	ToImageInstanceSegmentationOutputWithContext(context.Context) ImageInstanceSegmentationOutput
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationArgs
func (val *ImageInstanceSegmentationArgs) Defaults() *ImageInstanceSegmentationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}

	return &tmp
}
func (ImageInstanceSegmentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return i.ToImageInstanceSegmentationOutputWithContext(context.Background())
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageInstanceSegmentationOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return o
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) []ImageModelDistributionSettingsObjectDetection {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageInstanceSegmentationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageInstanceSegmentationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageInstanceSegmentationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageInstanceSegmentationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationResponse
func (val *ImageInstanceSegmentationResponse) Defaults() *ImageInstanceSegmentationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponseOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentationResponse)(nil)).Elem()
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutput() ImageInstanceSegmentationResponseOutput {
	return o
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutputWithContext(ctx context.Context) ImageInstanceSegmentationResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageInstanceSegmentationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageInstanceSegmentationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageInstanceSegmentationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageInstanceSegmentationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettings struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettings
func (val *ImageLimitSettings) Defaults() *ImageLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// ImageLimitSettingsInput is an input type that accepts ImageLimitSettingsArgs and ImageLimitSettingsOutput values.
// You can construct a concrete instance of `ImageLimitSettingsInput` via:
//
//	ImageLimitSettingsArgs{...}
type ImageLimitSettingsInput interface {
	pulumi.Input

	ToImageLimitSettingsOutput() ImageLimitSettingsOutput
	ToImageLimitSettingsOutputWithContext(context.Context) ImageLimitSettingsOutput
}

// Limit settings for the AutoML job.
type ImageLimitSettingsArgs struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsArgs
func (val *ImageLimitSettingsArgs) Defaults() *ImageLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("P7D")
	}
	return &tmp
}
func (ImageLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return i.ToImageLimitSettingsOutputWithContext(context.Background())
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLimitSettingsOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return o
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponse struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsResponse
func (val *ImageLimitSettingsResponse) Defaults() *ImageLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettingsResponse)(nil)).Elem()
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutput() ImageLimitSettingsResponseOutput {
	return o
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutputWithContext(ctx context.Context) ImageLimitSettingsResponseOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Returns metadata about the operating system image for this compute instance.
type ImageMetadataResponse struct {
	// Specifies the current operating system image version this compute instance is running on.
	CurrentImageVersion *string `pulumi:"currentImageVersion"`
	// Specifies whether this compute instance is running on the latest operating system image.
	IsLatestOsImageVersion *bool `pulumi:"isLatestOsImageVersion"`
	// Specifies the latest available operating system image version.
	LatestImageVersion *string `pulumi:"latestImageVersion"`
	// Metadata about the os patching.
	OsPatchingStatus OsPatchingStatusResponse `pulumi:"osPatchingStatus"`
}

// Returns metadata about the operating system image for this compute instance.
type ImageMetadataResponseOutput struct{ *pulumi.OutputState }

func (ImageMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageMetadataResponse)(nil)).Elem()
}

func (o ImageMetadataResponseOutput) ToImageMetadataResponseOutput() ImageMetadataResponseOutput {
	return o
}

func (o ImageMetadataResponseOutput) ToImageMetadataResponseOutputWithContext(ctx context.Context) ImageMetadataResponseOutput {
	return o
}

// Specifies the current operating system image version this compute instance is running on.
func (o ImageMetadataResponseOutput) CurrentImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *string { return v.CurrentImageVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is running on the latest operating system image.
func (o ImageMetadataResponseOutput) IsLatestOsImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *bool { return v.IsLatestOsImageVersion }).(pulumi.BoolPtrOutput)
}

// Specifies the latest available operating system image version.
func (o ImageMetadataResponseOutput) LatestImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *string { return v.LatestImageVersion }).(pulumi.StringPtrOutput)
}

// Metadata about the os patching.
func (o ImageMetadataResponseOutput) OsPatchingStatus() OsPatchingStatusResponseOutput {
	return o.ApplyT(func(v ImageMetadataResponse) OsPatchingStatusResponse { return v.OsPatchingStatus }).(OsPatchingStatusResponseOutput)
}

type ImageMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageMetadataResponse)(nil)).Elem()
}

func (o ImageMetadataResponsePtrOutput) ToImageMetadataResponsePtrOutput() ImageMetadataResponsePtrOutput {
	return o
}

func (o ImageMetadataResponsePtrOutput) ToImageMetadataResponsePtrOutputWithContext(ctx context.Context) ImageMetadataResponsePtrOutput {
	return o
}

func (o ImageMetadataResponsePtrOutput) Elem() ImageMetadataResponseOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) ImageMetadataResponse {
		if v != nil {
			return *v
		}
		var ret ImageMetadataResponse
		return ret
	}).(ImageMetadataResponseOutput)
}

// Specifies the current operating system image version this compute instance is running on.
func (o ImageMetadataResponsePtrOutput) CurrentImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CurrentImageVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is running on the latest operating system image.
func (o ImageMetadataResponsePtrOutput) IsLatestOsImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatestOsImageVersion
	}).(pulumi.BoolPtrOutput)
}

// Specifies the latest available operating system image version.
func (o ImageMetadataResponsePtrOutput) LatestImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LatestImageVersion
	}).(pulumi.StringPtrOutput)
}

// Metadata about the os patching.
func (o ImageMetadataResponsePtrOutput) OsPatchingStatus() OsPatchingStatusResponsePtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *OsPatchingStatusResponse {
		if v == nil {
			return nil
		}
		return &v.OsPatchingStatus
	}).(OsPatchingStatusResponsePtrOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassification struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// ImageModelDistributionSettingsClassificationInput is an input type that accepts ImageModelDistributionSettingsClassificationArgs and ImageModelDistributionSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationInput` via:
//
//	ImageModelDistributionSettingsClassificationArgs{...}
type ImageModelDistributionSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput
	ToImageModelDistributionSettingsClassificationOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.StringPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.StringPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.StringPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.StringPtrInput `pulumi:"weightedLoss"`
}

func (ImageModelDistributionSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return i.ToImageModelDistributionSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationOutput)
}

// ImageModelDistributionSettingsClassificationArrayInput is an input type that accepts ImageModelDistributionSettingsClassificationArray and ImageModelDistributionSettingsClassificationArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationArrayInput` via:
//
//	ImageModelDistributionSettingsClassificationArray{ ImageModelDistributionSettingsClassificationArgs{...} }
type ImageModelDistributionSettingsClassificationArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput
	ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationArrayOutput
}

type ImageModelDistributionSettingsClassificationArray []ImageModelDistributionSettingsClassificationInput

func (ImageModelDistributionSettingsClassificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return i.ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassification {
		return vs[0].([]ImageModelDistributionSettingsClassification)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutput() ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutput() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassificationResponse {
		return vs[0].([]ImageModelDistributionSettingsClassificationResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationResponseOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetection struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// ImageModelDistributionSettingsObjectDetectionInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArgs and ImageModelDistributionSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArgs{...}
type ImageModelDistributionSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput
	ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.StringPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.StringPtrInput `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.StringPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.StringPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.StringPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.StringPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold pulumi.StringPtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.StringPtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold pulumi.StringPtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.StringPtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
}

func (ImageModelDistributionSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// ImageModelDistributionSettingsObjectDetectionArrayInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArray and ImageModelDistributionSettingsObjectDetectionArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionArrayInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArray{ ImageModelDistributionSettingsObjectDetectionArgs{...} }
type ImageModelDistributionSettingsObjectDetectionArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput
	ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput
}

type ImageModelDistributionSettingsObjectDetectionArray []ImageModelDistributionSettingsObjectDetectionInput

func (ImageModelDistributionSettingsObjectDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TilePredictionsNmsThreshold }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetection {
		return vs[0].([]ImageModelDistributionSettingsObjectDetection)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutput() ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.EnableOnnxNormalization
	}).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.TilePredictionsNmsThreshold
	}).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutput() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetectionResponse {
		return vs[0].([]ImageModelDistributionSettingsObjectDetectionResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionResponseOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassification struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassification
func (val *ImageModelSettingsClassification) Defaults() *ImageModelSettingsClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// ImageModelSettingsClassificationInput is an input type that accepts ImageModelSettingsClassificationArgs and ImageModelSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationInput` via:
//
//	ImageModelSettingsClassificationArgs{...}
type ImageModelSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput
	ToImageModelSettingsClassificationOutputWithContext(context.Context) ImageModelSettingsClassificationOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel MLFlowModelJobInputPtrInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.IntPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.IntPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.IntPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.IntPtrInput `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationArgs
func (val *ImageModelSettingsClassificationArgs) Defaults() *ImageModelSettingsClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return i.ToImageModelSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput)
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput).ToImageModelSettingsClassificationPtrOutputWithContext(ctx)
}

// ImageModelSettingsClassificationPtrInput is an input type that accepts ImageModelSettingsClassificationArgs, ImageModelSettingsClassificationPtr and ImageModelSettingsClassificationPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationPtrInput` via:
//
//	        ImageModelSettingsClassificationArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsClassificationPtrInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput
	ToImageModelSettingsClassificationPtrOutputWithContext(context.Context) ImageModelSettingsClassificationPtrOutput
}

type imageModelSettingsClassificationPtrType ImageModelSettingsClassificationArgs

func ImageModelSettingsClassificationPtr(v *ImageModelSettingsClassificationArgs) ImageModelSettingsClassificationPtrInput {
	return (*imageModelSettingsClassificationPtrType)(v)
}

func (*imageModelSettingsClassificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsClassification) *ImageModelSettingsClassification {
		return &v
	}).(ImageModelSettingsClassificationPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *MLFlowModelJobInput { return v.CheckpointModel }).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) Elem() ImageModelSettingsClassificationOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) ImageModelSettingsClassification {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassification
		return ret
	}).(ImageModelSettingsClassificationOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *MLFlowModelJobInput {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationPtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationResponse
func (val *ImageModelSettingsClassificationResponse) Defaults() *ImageModelSettingsClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutput() ImageModelSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *MLFlowModelJobInputResponse {
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponseOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutput() ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) Elem() ImageModelSettingsClassificationResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) ImageModelSettingsClassificationResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassificationResponse
		return ret
	}).(ImageModelSettingsClassificationResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *MLFlowModelJobInputResponse {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetection struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Enable computing and logging training metrics.
	LogTrainingMetrics *string `pulumi:"logTrainingMetrics"`
	// Enable computing and logging validation loss.
	LogValidationLoss *string `pulumi:"logValidationLoss"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetection
func (val *ImageModelSettingsObjectDetection) Defaults() *ImageModelSettingsObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.LogTrainingMetrics == nil {
		logTrainingMetrics_ := "Enable"
		tmp.LogTrainingMetrics = &logTrainingMetrics_
	}
	if tmp.LogValidationLoss == nil {
		logValidationLoss_ := "Disable"
		tmp.LogValidationLoss = &logValidationLoss_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// ImageModelSettingsObjectDetectionInput is an input type that accepts ImageModelSettingsObjectDetectionArgs and ImageModelSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionInput` via:
//
//	ImageModelSettingsObjectDetectionArgs{...}
type ImageModelSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput
	ToImageModelSettingsObjectDetectionOutputWithContext(context.Context) ImageModelSettingsObjectDetectionOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.IntPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.Float64PtrInput `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel MLFlowModelJobInputPtrInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.IntPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Enable computing and logging training metrics.
	LogTrainingMetrics pulumi.StringPtrInput `pulumi:"logTrainingMetrics"`
	// Enable computing and logging validation loss.
	LogValidationLoss pulumi.StringPtrInput `pulumi:"logValidationLoss"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.IntPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.IntPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.BoolPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold pulumi.Float64PtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.Float64PtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold pulumi.Float64PtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.Float64PtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionArgs
func (val *ImageModelSettingsObjectDetectionArgs) Defaults() *ImageModelSettingsObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.LogTrainingMetrics == nil {
		tmp.LogTrainingMetrics = pulumi.StringPtr("Enable")
	}
	if tmp.LogValidationLoss == nil {
		tmp.LogValidationLoss = pulumi.StringPtr("Disable")
	}
	if tmp.ModelSize == nil {
		tmp.ModelSize = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	if tmp.ValidationMetricType == nil {
		tmp.ValidationMetricType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return i.ToImageModelSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput)
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput).ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx)
}

// ImageModelSettingsObjectDetectionPtrInput is an input type that accepts ImageModelSettingsObjectDetectionArgs, ImageModelSettingsObjectDetectionPtr and ImageModelSettingsObjectDetectionPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionPtrInput` via:
//
//	        ImageModelSettingsObjectDetectionArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsObjectDetectionPtrInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput
	ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Context) ImageModelSettingsObjectDetectionPtrOutput
}

type imageModelSettingsObjectDetectionPtrType ImageModelSettingsObjectDetectionArgs

func ImageModelSettingsObjectDetectionPtr(v *ImageModelSettingsObjectDetectionArgs) ImageModelSettingsObjectDetectionPtrInput {
	return (*imageModelSettingsObjectDetectionPtrType)(v)
}

func (*imageModelSettingsObjectDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsObjectDetection) *ImageModelSettingsObjectDetection {
		return &v
	}).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *MLFlowModelJobInput { return v.CheckpointModel }).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Enable computing and logging training metrics.
func (o ImageModelSettingsObjectDetectionOutput) LogTrainingMetrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.LogTrainingMetrics }).(pulumi.StringPtrOutput)
}

// Enable computing and logging validation loss.
func (o ImageModelSettingsObjectDetectionOutput) LogValidationLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.LogValidationLoss }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) Elem() ImageModelSettingsObjectDetectionOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) ImageModelSettingsObjectDetection {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetection
		return ret
	}).(ImageModelSettingsObjectDetectionOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *MLFlowModelJobInput {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Enable computing and logging training metrics.
func (o ImageModelSettingsObjectDetectionPtrOutput) LogTrainingMetrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.LogTrainingMetrics
	}).(pulumi.StringPtrOutput)
}

// Enable computing and logging validation loss.
func (o ImageModelSettingsObjectDetectionPtrOutput) LogValidationLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.LogValidationLoss
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Enable computing and logging training metrics.
	LogTrainingMetrics *string `pulumi:"logTrainingMetrics"`
	// Enable computing and logging validation loss.
	LogValidationLoss *string `pulumi:"logValidationLoss"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionResponse
func (val *ImageModelSettingsObjectDetectionResponse) Defaults() *ImageModelSettingsObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.LogTrainingMetrics == nil {
		logTrainingMetrics_ := "Enable"
		tmp.LogTrainingMetrics = &logTrainingMetrics_
	}
	if tmp.LogValidationLoss == nil {
		logValidationLoss_ := "Disable"
		tmp.LogValidationLoss = &logValidationLoss_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutput() ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *MLFlowModelJobInputResponse {
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Enable computing and logging training metrics.
func (o ImageModelSettingsObjectDetectionResponseOutput) LogTrainingMetrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.LogTrainingMetrics }).(pulumi.StringPtrOutput)
}

// Enable computing and logging validation loss.
func (o ImageModelSettingsObjectDetectionResponseOutput) LogValidationLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.LogValidationLoss }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutput() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Elem() ImageModelSettingsObjectDetectionResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) ImageModelSettingsObjectDetectionResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetectionResponse
		return ret
	}).(ImageModelSettingsObjectDetectionResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *MLFlowModelJobInputResponse {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Enable computing and logging training metrics.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LogTrainingMetrics() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogTrainingMetrics
	}).(pulumi.StringPtrOutput)
}

// Enable computing and logging validation loss.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LogValidationLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LogValidationLoss
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetection struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetection
func (val *ImageObjectDetection) Defaults() *ImageObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageObjectDetectionInput is an input type that accepts ImageObjectDetectionArgs and ImageObjectDetectionOutput values.
// You can construct a concrete instance of `ImageObjectDetectionInput` via:
//
//	ImageObjectDetectionArgs{...}
type ImageObjectDetectionInput interface {
	pulumi.Input

	ToImageObjectDetectionOutput() ImageObjectDetectionOutput
	ToImageObjectDetectionOutputWithContext(context.Context) ImageObjectDetectionOutput
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionArgs
func (val *ImageObjectDetectionArgs) Defaults() *ImageObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}

	return &tmp
}
func (ImageObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return i.ToImageObjectDetectionOutputWithContext(context.Background())
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageObjectDetectionOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return o
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageObjectDetection) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageObjectDetection) []ImageModelDistributionSettingsObjectDetection { return v.SearchSpace }).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageObjectDetectionOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetection) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageObjectDetectionOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageObjectDetection) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageObjectDetectionOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageObjectDetectionOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionResponse
func (val *ImageObjectDetectionResponse) Defaults() *ImageObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetectionResponse)(nil)).Elem()
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutput() ImageObjectDetectionResponseOutput {
	return o
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutputWithContext(ctx context.Context) ImageObjectDetectionResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageObjectDetectionResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageObjectDetectionResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageObjectDetectionResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageObjectDetectionResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type ImageResponse struct {
	// Image reference URL if type is docker. Environment name if type is azureml
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
	Type *string `pulumi:"type"`
	// Version of image being used. If latest then skip this field
	Version *string `pulumi:"version"`
}

// Defaults sets the appropriate defaults for ImageResponse
func (val *ImageResponse) Defaults() *ImageResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

type ImageResponseOutput struct{ *pulumi.OutputState }

func (ImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (o ImageResponseOutput) ToImageResponseOutput() ImageResponseOutput {
	return o
}

func (o ImageResponseOutput) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return o
}

// Image reference URL if type is docker. Environment name if type is azureml
func (o ImageResponseOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageResponse) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
func (o ImageResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Version of image being used. If latest then skip this field
func (o ImageResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ImageResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageResponse)(nil)).Elem()
}

func (o ImageResponsePtrOutput) ToImageResponsePtrOutput() ImageResponsePtrOutput {
	return o
}

func (o ImageResponsePtrOutput) ToImageResponsePtrOutputWithContext(ctx context.Context) ImageResponsePtrOutput {
	return o
}

func (o ImageResponsePtrOutput) Elem() ImageResponseOutput {
	return o.ApplyT(func(v *ImageResponse) ImageResponse {
		if v != nil {
			return *v
		}
		var ret ImageResponse
		return ret
	}).(ImageResponseOutput)
}

// Image reference URL if type is docker. Environment name if type is azureml
func (o ImageResponsePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML Environment images (custom and curated)
func (o ImageResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Version of image being used. If latest then skip this field
func (o ImageResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettings struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// ImageSweepSettingsInput is an input type that accepts ImageSweepSettingsArgs and ImageSweepSettingsOutput values.
// You can construct a concrete instance of `ImageSweepSettingsInput` via:
//
//	ImageSweepSettingsArgs{...}
type ImageSweepSettingsInput interface {
	pulumi.Input

	ToImageSweepSettingsOutput() ImageSweepSettingsOutput
	ToImageSweepSettingsOutputWithContext(context.Context) ImageSweepSettingsOutput
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsArgs struct {
	// Type of early termination policy.
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm pulumi.StringInput `pulumi:"samplingAlgorithm"`
}

func (ImageSweepSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return i.ToImageSweepSettingsOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput)
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput).ToImageSweepSettingsPtrOutputWithContext(ctx)
}

// ImageSweepSettingsPtrInput is an input type that accepts ImageSweepSettingsArgs, ImageSweepSettingsPtr and ImageSweepSettingsPtrOutput values.
// You can construct a concrete instance of `ImageSweepSettingsPtrInput` via:
//
//	        ImageSweepSettingsArgs{...}
//
//	or:
//
//	        nil
type ImageSweepSettingsPtrInput interface {
	pulumi.Input

	ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput
	ToImageSweepSettingsPtrOutputWithContext(context.Context) ImageSweepSettingsPtrOutput
}

type imageSweepSettingsPtrType ImageSweepSettingsArgs

func ImageSweepSettingsPtr(v *ImageSweepSettingsArgs) ImageSweepSettingsPtrInput {
	return (*imageSweepSettingsPtrType)(v)
}

func (*imageSweepSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageSweepSettings) *ImageSweepSettings {
		return &v
	}).(ImageSweepSettingsPtrOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettings) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettings) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsPtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) Elem() ImageSweepSettingsOutput {
	return o.ApplyT(func(v *ImageSweepSettings) ImageSweepSettings {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettings
		return ret
	}).(ImageSweepSettingsOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsPtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsPtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponse struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutput() ImageSweepSettingsResponseOutput {
	return o
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutputWithContext(ctx context.Context) ImageSweepSettingsResponseOutput {
	return o
}

// Type of early termination policy.
func (o ImageSweepSettingsResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponseOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutput() ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutputWithContext(ctx context.Context) ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) Elem() ImageSweepSettingsResponseOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) ImageSweepSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettingsResponse
		return ret
	}).(ImageSweepSettingsResponseOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsResponsePtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponsePtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

type ImportDataAction struct {
	// Expected value is 'ImportData'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	DataImportDefinition DataImport `pulumi:"dataImportDefinition"`
}

// Defaults sets the appropriate defaults for ImportDataAction
func (val *ImportDataAction) Defaults() *ImportDataAction {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataImportDefinition = *tmp.DataImportDefinition.Defaults()

	return &tmp
}

// ImportDataActionInput is an input type that accepts ImportDataActionArgs and ImportDataActionOutput values.
// You can construct a concrete instance of `ImportDataActionInput` via:
//
//	ImportDataActionArgs{...}
type ImportDataActionInput interface {
	pulumi.Input

	ToImportDataActionOutput() ImportDataActionOutput
	ToImportDataActionOutputWithContext(context.Context) ImportDataActionOutput
}

type ImportDataActionArgs struct {
	// Expected value is 'ImportData'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	DataImportDefinition DataImportInput `pulumi:"dataImportDefinition"`
}

// Defaults sets the appropriate defaults for ImportDataActionArgs
func (val *ImportDataActionArgs) Defaults() *ImportDataActionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ImportDataActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportDataAction)(nil)).Elem()
}

func (i ImportDataActionArgs) ToImportDataActionOutput() ImportDataActionOutput {
	return i.ToImportDataActionOutputWithContext(context.Background())
}

func (i ImportDataActionArgs) ToImportDataActionOutputWithContext(ctx context.Context) ImportDataActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportDataActionOutput)
}

type ImportDataActionOutput struct{ *pulumi.OutputState }

func (ImportDataActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportDataAction)(nil)).Elem()
}

func (o ImportDataActionOutput) ToImportDataActionOutput() ImportDataActionOutput {
	return o
}

func (o ImportDataActionOutput) ToImportDataActionOutputWithContext(ctx context.Context) ImportDataActionOutput {
	return o
}

// Expected value is 'ImportData'.
func (o ImportDataActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ImportDataAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o ImportDataActionOutput) DataImportDefinition() DataImportOutput {
	return o.ApplyT(func(v ImportDataAction) DataImport { return v.DataImportDefinition }).(DataImportOutput)
}

type ImportDataActionResponse struct {
	// Expected value is 'ImportData'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	DataImportDefinition DataImportResponse `pulumi:"dataImportDefinition"`
}

// Defaults sets the appropriate defaults for ImportDataActionResponse
func (val *ImportDataActionResponse) Defaults() *ImportDataActionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataImportDefinition = *tmp.DataImportDefinition.Defaults()

	return &tmp
}

type ImportDataActionResponseOutput struct{ *pulumi.OutputState }

func (ImportDataActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportDataActionResponse)(nil)).Elem()
}

func (o ImportDataActionResponseOutput) ToImportDataActionResponseOutput() ImportDataActionResponseOutput {
	return o
}

func (o ImportDataActionResponseOutput) ToImportDataActionResponseOutputWithContext(ctx context.Context) ImportDataActionResponseOutput {
	return o
}

// Expected value is 'ImportData'.
func (o ImportDataActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v ImportDataActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o ImportDataActionResponseOutput) DataImportDefinition() DataImportResponseOutput {
	return o.ApplyT(func(v ImportDataActionResponse) DataImportResponse { return v.DataImportDefinition }).(DataImportResponseOutput)
}

// Dto object representing index column
type IndexColumn struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumn
func (val *IndexColumn) Defaults() *IndexColumn {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// IndexColumnInput is an input type that accepts IndexColumnArgs and IndexColumnOutput values.
// You can construct a concrete instance of `IndexColumnInput` via:
//
//	IndexColumnArgs{...}
type IndexColumnInput interface {
	pulumi.Input

	ToIndexColumnOutput() IndexColumnOutput
	ToIndexColumnOutputWithContext(context.Context) IndexColumnOutput
}

// Dto object representing index column
type IndexColumnArgs struct {
	// Specifies the column name
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// Specifies the data type
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnArgs
func (val *IndexColumnArgs) Defaults() *IndexColumnArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		tmp.DataType = pulumi.StringPtr("String")
	}
	return &tmp
}
func (IndexColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (i IndexColumnArgs) ToIndexColumnOutput() IndexColumnOutput {
	return i.ToIndexColumnOutputWithContext(context.Background())
}

func (i IndexColumnArgs) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnOutput)
}

// IndexColumnArrayInput is an input type that accepts IndexColumnArray and IndexColumnArrayOutput values.
// You can construct a concrete instance of `IndexColumnArrayInput` via:
//
//	IndexColumnArray{ IndexColumnArgs{...} }
type IndexColumnArrayInput interface {
	pulumi.Input

	ToIndexColumnArrayOutput() IndexColumnArrayOutput
	ToIndexColumnArrayOutputWithContext(context.Context) IndexColumnArrayOutput
}

type IndexColumnArray []IndexColumnInput

func (IndexColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (i IndexColumnArray) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return i.ToIndexColumnArrayOutputWithContext(context.Background())
}

func (i IndexColumnArray) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnArrayOutput)
}

// Dto object representing index column
type IndexColumnOutput struct{ *pulumi.OutputState }

func (IndexColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (o IndexColumnOutput) ToIndexColumnOutput() IndexColumnOutput {
	return o
}

func (o IndexColumnOutput) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return o
}

// Specifies the column name
func (o IndexColumnOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) Index(i pulumi.IntInput) IndexColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumn {
		return vs[0].([]IndexColumn)[vs[1].(int)]
	}).(IndexColumnOutput)
}

// Dto object representing index column
type IndexColumnResponse struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnResponse
func (val *IndexColumnResponse) Defaults() *IndexColumnResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing index column
type IndexColumnResponseOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutput() IndexColumnResponseOutput {
	return o
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutputWithContext(ctx context.Context) IndexColumnResponseOutput {
	return o
}

// Specifies the column name
func (o IndexColumnResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutput() IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutputWithContext(ctx context.Context) IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) Index(i pulumi.IntInput) IndexColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumnResponse {
		return vs[0].([]IndexColumnResponse)[vs[1].(int)]
	}).(IndexColumnResponseOutput)
}

type InferenceContainerProperties struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *Route `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *Route `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *Route `pulumi:"scoringRoute"`
}

// InferenceContainerPropertiesInput is an input type that accepts InferenceContainerPropertiesArgs and InferenceContainerPropertiesOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesInput` via:
//
//	InferenceContainerPropertiesArgs{...}
type InferenceContainerPropertiesInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput
	ToInferenceContainerPropertiesOutputWithContext(context.Context) InferenceContainerPropertiesOutput
}

type InferenceContainerPropertiesArgs struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute RoutePtrInput `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute RoutePtrInput `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute RoutePtrInput `pulumi:"scoringRoute"`
}

func (InferenceContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return i.ToInferenceContainerPropertiesOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput)
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput).ToInferenceContainerPropertiesPtrOutputWithContext(ctx)
}

// InferenceContainerPropertiesPtrInput is an input type that accepts InferenceContainerPropertiesArgs, InferenceContainerPropertiesPtr and InferenceContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesPtrInput` via:
//
//	        InferenceContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type InferenceContainerPropertiesPtrInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput
	ToInferenceContainerPropertiesPtrOutputWithContext(context.Context) InferenceContainerPropertiesPtrOutput
}

type inferenceContainerPropertiesPtrType InferenceContainerPropertiesArgs

func InferenceContainerPropertiesPtr(v *InferenceContainerPropertiesArgs) InferenceContainerPropertiesPtrInput {
	return (*inferenceContainerPropertiesPtrType)(v)
}

func (*inferenceContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesPtrOutput)
}

type InferenceContainerPropertiesOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceContainerProperties) *InferenceContainerProperties {
		return &v
	}).(InferenceContainerPropertiesPtrOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.LivenessRoute }).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ReadinessRoute }).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ScoringRoute }).(RoutePtrOutput)
}

type InferenceContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) Elem() InferenceContainerPropertiesOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) InferenceContainerProperties {
		if v != nil {
			return *v
		}
		var ret InferenceContainerProperties
		return ret
	}).(InferenceContainerPropertiesOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RoutePtrOutput)
}

type InferenceContainerPropertiesResponse struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *RouteResponse `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *RouteResponse `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *RouteResponse `pulumi:"scoringRoute"`
}

type InferenceContainerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutput() InferenceContainerPropertiesResponseOutput {
	return o
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponseOutput {
	return o
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.LivenessRoute }).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ReadinessRoute }).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ScoringRoute }).(RouteResponsePtrOutput)
}

type InferenceContainerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutput() InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) Elem() InferenceContainerPropertiesResponseOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) InferenceContainerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret InferenceContainerPropertiesResponse
		return ret
	}).(InferenceContainerPropertiesResponseOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RouteResponsePtrOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointType struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode string `pulumi:"authMode"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId string `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// InferenceEndpointTypeInput is an input type that accepts InferenceEndpointTypeArgs and InferenceEndpointTypeOutput values.
// You can construct a concrete instance of `InferenceEndpointTypeInput` via:
//
//	InferenceEndpointTypeArgs{...}
type InferenceEndpointTypeInput interface {
	pulumi.Input

	ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput
	ToInferenceEndpointTypeOutputWithContext(context.Context) InferenceEndpointTypeOutput
}

// InferenceEndpoint configuration
type InferenceEndpointTypeArgs struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (InferenceEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointType)(nil)).Elem()
}

func (i InferenceEndpointTypeArgs) ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput {
	return i.ToInferenceEndpointTypeOutputWithContext(context.Background())
}

func (i InferenceEndpointTypeArgs) ToInferenceEndpointTypeOutputWithContext(ctx context.Context) InferenceEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceEndpointTypeOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointTypeOutput struct{ *pulumi.OutputState }

func (InferenceEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointType)(nil)).Elem()
}

func (o InferenceEndpointTypeOutput) ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput {
	return o
}

func (o InferenceEndpointTypeOutput) ToInferenceEndpointTypeOutputWithContext(ctx context.Context) InferenceEndpointTypeOutput {
	return o
}

// [Required] Authentication mode for the endpoint.
func (o InferenceEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Description of the resource.
func (o InferenceEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Required] Group within the same pool with which this endpoint needs to be associated with.
func (o InferenceEndpointTypeOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointType) string { return v.GroupId }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointResponse struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode string `pulumi:"authMode"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Endpoint URI for the inference endpoint.
	EndpointUri string `pulumi:"endpointUri"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId string `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
}

// InferenceEndpoint configuration
type InferenceEndpointResponseOutput struct{ *pulumi.OutputState }

func (InferenceEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointResponse)(nil)).Elem()
}

func (o InferenceEndpointResponseOutput) ToInferenceEndpointResponseOutput() InferenceEndpointResponseOutput {
	return o
}

func (o InferenceEndpointResponseOutput) ToInferenceEndpointResponseOutputWithContext(ctx context.Context) InferenceEndpointResponseOutput {
	return o
}

// [Required] Authentication mode for the endpoint.
func (o InferenceEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Description of the resource.
func (o InferenceEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint URI for the inference endpoint.
func (o InferenceEndpointResponseOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// [Required] Group within the same pool with which this endpoint needs to be associated with.
func (o InferenceEndpointResponseOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.GroupId }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o InferenceEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Inference group configuration
type InferenceGroupType struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity *int `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Metadata for the inference group.
	Metadata *string `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20240101Preview.Pools.InferencePools.
	Priority *int `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for InferenceGroupType
func (val *InferenceGroupType) Defaults() *InferenceGroupType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		bonusExtraCapacity_ := 0
		tmp.BonusExtraCapacity = &bonusExtraCapacity_
	}
	if tmp.Priority == nil {
		priority_ := 0
		tmp.Priority = &priority_
	}
	return &tmp
}

// InferenceGroupTypeInput is an input type that accepts InferenceGroupTypeArgs and InferenceGroupTypeOutput values.
// You can construct a concrete instance of `InferenceGroupTypeInput` via:
//
//	InferenceGroupTypeArgs{...}
type InferenceGroupTypeInput interface {
	pulumi.Input

	ToInferenceGroupTypeOutput() InferenceGroupTypeOutput
	ToInferenceGroupTypeOutputWithContext(context.Context) InferenceGroupTypeOutput
}

// Inference group configuration
type InferenceGroupTypeArgs struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity pulumi.IntPtrInput `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Metadata for the inference group.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20240101Preview.Pools.InferencePools.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for InferenceGroupTypeArgs
func (val *InferenceGroupTypeArgs) Defaults() *InferenceGroupTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		tmp.BonusExtraCapacity = pulumi.IntPtr(0)
	}
	if tmp.Priority == nil {
		tmp.Priority = pulumi.IntPtr(0)
	}
	return &tmp
}
func (InferenceGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupType)(nil)).Elem()
}

func (i InferenceGroupTypeArgs) ToInferenceGroupTypeOutput() InferenceGroupTypeOutput {
	return i.ToInferenceGroupTypeOutputWithContext(context.Background())
}

func (i InferenceGroupTypeArgs) ToInferenceGroupTypeOutputWithContext(ctx context.Context) InferenceGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceGroupTypeOutput)
}

// Inference group configuration
type InferenceGroupTypeOutput struct{ *pulumi.OutputState }

func (InferenceGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupType)(nil)).Elem()
}

func (o InferenceGroupTypeOutput) ToInferenceGroupTypeOutput() InferenceGroupTypeOutput {
	return o
}

func (o InferenceGroupTypeOutput) ToInferenceGroupTypeOutputWithContext(ctx context.Context) InferenceGroupTypeOutput {
	return o
}

// Capacity to be used from the pool's reserved capacity.
// optional
func (o InferenceGroupTypeOutput) BonusExtraCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *int { return v.BonusExtraCapacity }).(pulumi.IntPtrOutput)
}

// Description of the resource.
func (o InferenceGroupTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata for the inference group.
func (o InferenceGroupTypeOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20240101Preview.Pools.InferencePools.
func (o InferenceGroupTypeOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceGroupTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceGroupType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Inference group configuration
type InferenceGroupResponse struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity *int `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Metadata for the inference group.
	Metadata *string `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20240101Preview.Pools.InferencePools.
	Priority *int `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the inference group.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for InferenceGroupResponse
func (val *InferenceGroupResponse) Defaults() *InferenceGroupResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		bonusExtraCapacity_ := 0
		tmp.BonusExtraCapacity = &bonusExtraCapacity_
	}
	if tmp.Priority == nil {
		priority_ := 0
		tmp.Priority = &priority_
	}
	return &tmp
}

// Inference group configuration
type InferenceGroupResponseOutput struct{ *pulumi.OutputState }

func (InferenceGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupResponse)(nil)).Elem()
}

func (o InferenceGroupResponseOutput) ToInferenceGroupResponseOutput() InferenceGroupResponseOutput {
	return o
}

func (o InferenceGroupResponseOutput) ToInferenceGroupResponseOutputWithContext(ctx context.Context) InferenceGroupResponseOutput {
	return o
}

// Capacity to be used from the pool's reserved capacity.
// optional
func (o InferenceGroupResponseOutput) BonusExtraCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *int { return v.BonusExtraCapacity }).(pulumi.IntPtrOutput)
}

// Description of the resource.
func (o InferenceGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata for the inference group.
func (o InferenceGroupResponseOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20240101Preview.Pools.InferencePools.
func (o InferenceGroupResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceGroupResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceGroupResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the inference group.
func (o InferenceGroupResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceGroupResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Inference pool configuration
type InferencePoolType struct {
	// Code configuration for the inference pool.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration *PoolEnvironmentConfiguration `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration *PoolModelConfiguration `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType string `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Request configuration for the inference pool.
	RequestConfiguration *RequestConfiguration `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolType
func (val *InferencePoolType) Defaults() *InferencePoolType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EnvironmentConfiguration = tmp.EnvironmentConfiguration.Defaults()

	tmp.RequestConfiguration = tmp.RequestConfiguration.Defaults()

	return &tmp
}

// InferencePoolTypeInput is an input type that accepts InferencePoolTypeArgs and InferencePoolTypeOutput values.
// You can construct a concrete instance of `InferencePoolTypeInput` via:
//
//	InferencePoolTypeArgs{...}
type InferencePoolTypeInput interface {
	pulumi.Input

	ToInferencePoolTypeOutput() InferencePoolTypeOutput
	ToInferencePoolTypeOutputWithContext(context.Context) InferencePoolTypeOutput
}

// Inference pool configuration
type InferencePoolTypeArgs struct {
	// Code configuration for the inference pool.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration PoolEnvironmentConfigurationPtrInput `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration PoolModelConfigurationPtrInput `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType pulumi.StringInput `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Request configuration for the inference pool.
	RequestConfiguration RequestConfigurationPtrInput `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolTypeArgs
func (val *InferencePoolTypeArgs) Defaults() *InferencePoolTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (InferencePoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolType)(nil)).Elem()
}

func (i InferencePoolTypeArgs) ToInferencePoolTypeOutput() InferencePoolTypeOutput {
	return i.ToInferencePoolTypeOutputWithContext(context.Background())
}

func (i InferencePoolTypeArgs) ToInferencePoolTypeOutputWithContext(ctx context.Context) InferencePoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferencePoolTypeOutput)
}

// Inference pool configuration
type InferencePoolTypeOutput struct{ *pulumi.OutputState }

func (InferencePoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolType)(nil)).Elem()
}

func (o InferencePoolTypeOutput) ToInferencePoolTypeOutput() InferencePoolTypeOutput {
	return o
}

func (o InferencePoolTypeOutput) ToInferencePoolTypeOutputWithContext(ctx context.Context) InferencePoolTypeOutput {
	return o
}

// Code configuration for the inference pool.
func (o InferencePoolTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Description of the resource.
func (o InferencePoolTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EnvironmentConfiguration for the inference pool.
func (o InferencePoolTypeOutput) EnvironmentConfiguration() PoolEnvironmentConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *PoolEnvironmentConfiguration { return v.EnvironmentConfiguration }).(PoolEnvironmentConfigurationPtrOutput)
}

// ModelConfiguration for the inference pool.
func (o InferencePoolTypeOutput) ModelConfiguration() PoolModelConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *PoolModelConfiguration { return v.ModelConfiguration }).(PoolModelConfigurationPtrOutput)
}

// [Required] Compute instance type.
func (o InferencePoolTypeOutput) NodeSkuType() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolType) string { return v.NodeSkuType }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferencePoolTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferencePoolType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Request configuration for the inference pool.
func (o InferencePoolTypeOutput) RequestConfiguration() RequestConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *RequestConfiguration { return v.RequestConfiguration }).(RequestConfigurationPtrOutput)
}

// Inference pool configuration
type InferencePoolResponse struct {
	// Code configuration for the inference pool.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration *PoolEnvironmentConfigurationResponse `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration *PoolModelConfigurationResponse `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType string `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the pool.
	ProvisioningState string `pulumi:"provisioningState"`
	// Request configuration for the inference pool.
	RequestConfiguration *RequestConfigurationResponse `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolResponse
func (val *InferencePoolResponse) Defaults() *InferencePoolResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EnvironmentConfiguration = tmp.EnvironmentConfiguration.Defaults()

	tmp.RequestConfiguration = tmp.RequestConfiguration.Defaults()

	return &tmp
}

// Inference pool configuration
type InferencePoolResponseOutput struct{ *pulumi.OutputState }

func (InferencePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolResponse)(nil)).Elem()
}

func (o InferencePoolResponseOutput) ToInferencePoolResponseOutput() InferencePoolResponseOutput {
	return o
}

func (o InferencePoolResponseOutput) ToInferencePoolResponseOutputWithContext(ctx context.Context) InferencePoolResponseOutput {
	return o
}

// Code configuration for the inference pool.
func (o InferencePoolResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Description of the resource.
func (o InferencePoolResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EnvironmentConfiguration for the inference pool.
func (o InferencePoolResponseOutput) EnvironmentConfiguration() PoolEnvironmentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *PoolEnvironmentConfigurationResponse { return v.EnvironmentConfiguration }).(PoolEnvironmentConfigurationResponsePtrOutput)
}

// ModelConfiguration for the inference pool.
func (o InferencePoolResponseOutput) ModelConfiguration() PoolModelConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *PoolModelConfigurationResponse { return v.ModelConfiguration }).(PoolModelConfigurationResponsePtrOutput)
}

// [Required] Compute instance type.
func (o InferencePoolResponseOutput) NodeSkuType() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolResponse) string { return v.NodeSkuType }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferencePoolResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferencePoolResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the pool.
func (o InferencePoolResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Request configuration for the inference pool.
func (o InferencePoolResponseOutput) RequestConfiguration() RequestConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *RequestConfigurationResponse { return v.RequestConfiguration }).(RequestConfigurationResponsePtrOutput)
}

// Instance type schema.
type InstanceTypeSchema struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResources `pulumi:"resources"`
}

// InstanceTypeSchemaInput is an input type that accepts InstanceTypeSchemaArgs and InstanceTypeSchemaOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaInput` via:
//
//	InstanceTypeSchemaArgs{...}
type InstanceTypeSchemaInput interface {
	pulumi.Input

	ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput
	ToInstanceTypeSchemaOutputWithContext(context.Context) InstanceTypeSchemaOutput
}

// Instance type schema.
type InstanceTypeSchemaArgs struct {
	// Node Selector
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources InstanceTypeSchemaResourcesPtrInput `pulumi:"resources"`
}

func (InstanceTypeSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchema)(nil)).Elem()
}

func (i InstanceTypeSchemaArgs) ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput {
	return i.ToInstanceTypeSchemaOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaArgs) ToInstanceTypeSchemaOutputWithContext(ctx context.Context) InstanceTypeSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaOutput)
}

// InstanceTypeSchemaMapInput is an input type that accepts InstanceTypeSchemaMap and InstanceTypeSchemaMapOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaMapInput` via:
//
//	InstanceTypeSchemaMap{ "key": InstanceTypeSchemaArgs{...} }
type InstanceTypeSchemaMapInput interface {
	pulumi.Input

	ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput
	ToInstanceTypeSchemaMapOutputWithContext(context.Context) InstanceTypeSchemaMapOutput
}

type InstanceTypeSchemaMap map[string]InstanceTypeSchemaInput

func (InstanceTypeSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchema)(nil)).Elem()
}

func (i InstanceTypeSchemaMap) ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput {
	return i.ToInstanceTypeSchemaMapOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaMap) ToInstanceTypeSchemaMapOutputWithContext(ctx context.Context) InstanceTypeSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaMapOutput)
}

// Instance type schema.
type InstanceTypeSchemaOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchema)(nil)).Elem()
}

func (o InstanceTypeSchemaOutput) ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput {
	return o
}

func (o InstanceTypeSchemaOutput) ToInstanceTypeSchemaOutputWithContext(ctx context.Context) InstanceTypeSchemaOutput {
	return o
}

// Node Selector
func (o InstanceTypeSchemaOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchema) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Resource requests/limits for this instance type
func (o InstanceTypeSchemaOutput) Resources() InstanceTypeSchemaResourcesPtrOutput {
	return o.ApplyT(func(v InstanceTypeSchema) *InstanceTypeSchemaResources { return v.Resources }).(InstanceTypeSchemaResourcesPtrOutput)
}

type InstanceTypeSchemaMapOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchema)(nil)).Elem()
}

func (o InstanceTypeSchemaMapOutput) ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput {
	return o
}

func (o InstanceTypeSchemaMapOutput) ToInstanceTypeSchemaMapOutputWithContext(ctx context.Context) InstanceTypeSchemaMapOutput {
	return o
}

func (o InstanceTypeSchemaMapOutput) MapIndex(k pulumi.StringInput) InstanceTypeSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceTypeSchema {
		return vs[0].(map[string]InstanceTypeSchema)[vs[1].(string)]
	}).(InstanceTypeSchemaOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

// InstanceTypeSchemaResourcesInput is an input type that accepts InstanceTypeSchemaResourcesArgs and InstanceTypeSchemaResourcesOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaResourcesInput` via:
//
//	InstanceTypeSchemaResourcesArgs{...}
type InstanceTypeSchemaResourcesInput interface {
	pulumi.Input

	ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput
	ToInstanceTypeSchemaResourcesOutputWithContext(context.Context) InstanceTypeSchemaResourcesOutput
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResourcesArgs struct {
	// Resource limits for this instance type
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Resource requests for this instance type
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (InstanceTypeSchemaResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResources)(nil)).Elem()
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput {
	return i.ToInstanceTypeSchemaResourcesOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesOutput)
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return i.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesOutput).ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx)
}

// InstanceTypeSchemaResourcesPtrInput is an input type that accepts InstanceTypeSchemaResourcesArgs, InstanceTypeSchemaResourcesPtr and InstanceTypeSchemaResourcesPtrOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaResourcesPtrInput` via:
//
//	        InstanceTypeSchemaResourcesArgs{...}
//
//	or:
//
//	        nil
type InstanceTypeSchemaResourcesPtrInput interface {
	pulumi.Input

	ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput
	ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Context) InstanceTypeSchemaResourcesPtrOutput
}

type instanceTypeSchemaResourcesPtrType InstanceTypeSchemaResourcesArgs

func InstanceTypeSchemaResourcesPtr(v *InstanceTypeSchemaResourcesArgs) InstanceTypeSchemaResourcesPtrInput {
	return (*instanceTypeSchemaResourcesPtrType)(v)
}

func (*instanceTypeSchemaResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResources)(nil)).Elem()
}

func (i *instanceTypeSchemaResourcesPtrType) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return i.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (i *instanceTypeSchemaResourcesPtrType) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesPtrOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResourcesOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return o.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTypeSchemaResources) *InstanceTypeSchemaResources {
		return &v
	}).(InstanceTypeSchemaResourcesPtrOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type InstanceTypeSchemaResourcesPtrOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResourcesPtrOutput) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResourcesPtrOutput) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResourcesPtrOutput) Elem() InstanceTypeSchemaResourcesOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) InstanceTypeSchemaResources {
		if v != nil {
			return *v
		}
		var ret InstanceTypeSchemaResources
		return ret
	}).(InstanceTypeSchemaResourcesOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Instance type schema.
type InstanceTypeSchemaResponse struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResponseResources `pulumi:"resources"`
}

// Instance type schema.
type InstanceTypeSchemaResponseOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResponse)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseOutput) ToInstanceTypeSchemaResponseOutput() InstanceTypeSchemaResponseOutput {
	return o
}

func (o InstanceTypeSchemaResponseOutput) ToInstanceTypeSchemaResponseOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseOutput {
	return o
}

// Node Selector
func (o InstanceTypeSchemaResponseOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponse) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Resource requests/limits for this instance type
func (o InstanceTypeSchemaResponseOutput) Resources() InstanceTypeSchemaResponseResourcesPtrOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponse) *InstanceTypeSchemaResponseResources { return v.Resources }).(InstanceTypeSchemaResponseResourcesPtrOutput)
}

type InstanceTypeSchemaResponseMapOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchemaResponse)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseMapOutput) ToInstanceTypeSchemaResponseMapOutput() InstanceTypeSchemaResponseMapOutput {
	return o
}

func (o InstanceTypeSchemaResponseMapOutput) ToInstanceTypeSchemaResponseMapOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseMapOutput {
	return o
}

func (o InstanceTypeSchemaResponseMapOutput) MapIndex(k pulumi.StringInput) InstanceTypeSchemaResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceTypeSchemaResponse {
		return vs[0].(map[string]InstanceTypeSchemaResponse)[vs[1].(string)]
	}).(InstanceTypeSchemaResponseOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResponseResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResponseResourcesOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResponseResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseResourcesOutput) ToInstanceTypeSchemaResponseResourcesOutput() InstanceTypeSchemaResponseResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesOutput) ToInstanceTypeSchemaResponseResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseResourcesOutput {
	return o
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResponseResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponseResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResponseResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponseResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type InstanceTypeSchemaResponseResourcesPtrOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResponseResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) ToInstanceTypeSchemaResponseResourcesPtrOutput() InstanceTypeSchemaResponseResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) ToInstanceTypeSchemaResponseResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) Elem() InstanceTypeSchemaResponseResourcesOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) InstanceTypeSchemaResponseResources {
		if v != nil {
			return *v
		}
		var ret InstanceTypeSchemaResponseResources
		return ret
	}).(InstanceTypeSchemaResponseResourcesOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResponseResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResponseResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Intellectual Property details for a resource.
type IntellectualProperty struct {
	// Protection level of the Intellectual Property.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
	Publisher string `pulumi:"publisher"`
}

// Defaults sets the appropriate defaults for IntellectualProperty
func (val *IntellectualProperty) Defaults() *IntellectualProperty {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ProtectionLevel == nil {
		protectionLevel_ := "All"
		tmp.ProtectionLevel = &protectionLevel_
	}
	return &tmp
}

// IntellectualPropertyInput is an input type that accepts IntellectualPropertyArgs and IntellectualPropertyOutput values.
// You can construct a concrete instance of `IntellectualPropertyInput` via:
//
//	IntellectualPropertyArgs{...}
type IntellectualPropertyInput interface {
	pulumi.Input

	ToIntellectualPropertyOutput() IntellectualPropertyOutput
	ToIntellectualPropertyOutputWithContext(context.Context) IntellectualPropertyOutput
}

// Intellectual Property details for a resource.
type IntellectualPropertyArgs struct {
	// Protection level of the Intellectual Property.
	ProtectionLevel pulumi.StringPtrInput `pulumi:"protectionLevel"`
	// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

// Defaults sets the appropriate defaults for IntellectualPropertyArgs
func (val *IntellectualPropertyArgs) Defaults() *IntellectualPropertyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ProtectionLevel == nil {
		tmp.ProtectionLevel = pulumi.StringPtr("All")
	}
	return &tmp
}
func (IntellectualPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntellectualProperty)(nil)).Elem()
}

func (i IntellectualPropertyArgs) ToIntellectualPropertyOutput() IntellectualPropertyOutput {
	return i.ToIntellectualPropertyOutputWithContext(context.Background())
}

func (i IntellectualPropertyArgs) ToIntellectualPropertyOutputWithContext(ctx context.Context) IntellectualPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntellectualPropertyOutput)
}

func (i IntellectualPropertyArgs) ToIntellectualPropertyPtrOutput() IntellectualPropertyPtrOutput {
	return i.ToIntellectualPropertyPtrOutputWithContext(context.Background())
}

func (i IntellectualPropertyArgs) ToIntellectualPropertyPtrOutputWithContext(ctx context.Context) IntellectualPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntellectualPropertyOutput).ToIntellectualPropertyPtrOutputWithContext(ctx)
}

// IntellectualPropertyPtrInput is an input type that accepts IntellectualPropertyArgs, IntellectualPropertyPtr and IntellectualPropertyPtrOutput values.
// You can construct a concrete instance of `IntellectualPropertyPtrInput` via:
//
//	        IntellectualPropertyArgs{...}
//
//	or:
//
//	        nil
type IntellectualPropertyPtrInput interface {
	pulumi.Input

	ToIntellectualPropertyPtrOutput() IntellectualPropertyPtrOutput
	ToIntellectualPropertyPtrOutputWithContext(context.Context) IntellectualPropertyPtrOutput
}

type intellectualPropertyPtrType IntellectualPropertyArgs

func IntellectualPropertyPtr(v *IntellectualPropertyArgs) IntellectualPropertyPtrInput {
	return (*intellectualPropertyPtrType)(v)
}

func (*intellectualPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IntellectualProperty)(nil)).Elem()
}

func (i *intellectualPropertyPtrType) ToIntellectualPropertyPtrOutput() IntellectualPropertyPtrOutput {
	return i.ToIntellectualPropertyPtrOutputWithContext(context.Background())
}

func (i *intellectualPropertyPtrType) ToIntellectualPropertyPtrOutputWithContext(ctx context.Context) IntellectualPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntellectualPropertyPtrOutput)
}

// Intellectual Property details for a resource.
type IntellectualPropertyOutput struct{ *pulumi.OutputState }

func (IntellectualPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntellectualProperty)(nil)).Elem()
}

func (o IntellectualPropertyOutput) ToIntellectualPropertyOutput() IntellectualPropertyOutput {
	return o
}

func (o IntellectualPropertyOutput) ToIntellectualPropertyOutputWithContext(ctx context.Context) IntellectualPropertyOutput {
	return o
}

func (o IntellectualPropertyOutput) ToIntellectualPropertyPtrOutput() IntellectualPropertyPtrOutput {
	return o.ToIntellectualPropertyPtrOutputWithContext(context.Background())
}

func (o IntellectualPropertyOutput) ToIntellectualPropertyPtrOutputWithContext(ctx context.Context) IntellectualPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IntellectualProperty) *IntellectualProperty {
		return &v
	}).(IntellectualPropertyPtrOutput)
}

// Protection level of the Intellectual Property.
func (o IntellectualPropertyOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntellectualProperty) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
func (o IntellectualPropertyOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v IntellectualProperty) string { return v.Publisher }).(pulumi.StringOutput)
}

type IntellectualPropertyPtrOutput struct{ *pulumi.OutputState }

func (IntellectualPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntellectualProperty)(nil)).Elem()
}

func (o IntellectualPropertyPtrOutput) ToIntellectualPropertyPtrOutput() IntellectualPropertyPtrOutput {
	return o
}

func (o IntellectualPropertyPtrOutput) ToIntellectualPropertyPtrOutputWithContext(ctx context.Context) IntellectualPropertyPtrOutput {
	return o
}

func (o IntellectualPropertyPtrOutput) Elem() IntellectualPropertyOutput {
	return o.ApplyT(func(v *IntellectualProperty) IntellectualProperty {
		if v != nil {
			return *v
		}
		var ret IntellectualProperty
		return ret
	}).(IntellectualPropertyOutput)
}

// Protection level of the Intellectual Property.
func (o IntellectualPropertyPtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntellectualProperty) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
func (o IntellectualPropertyPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntellectualProperty) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

// Intellectual Property details for a resource.
type IntellectualPropertyResponse struct {
	// Protection level of the Intellectual Property.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
	Publisher string `pulumi:"publisher"`
}

// Defaults sets the appropriate defaults for IntellectualPropertyResponse
func (val *IntellectualPropertyResponse) Defaults() *IntellectualPropertyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ProtectionLevel == nil {
		protectionLevel_ := "All"
		tmp.ProtectionLevel = &protectionLevel_
	}
	return &tmp
}

// Intellectual Property details for a resource.
type IntellectualPropertyResponseOutput struct{ *pulumi.OutputState }

func (IntellectualPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntellectualPropertyResponse)(nil)).Elem()
}

func (o IntellectualPropertyResponseOutput) ToIntellectualPropertyResponseOutput() IntellectualPropertyResponseOutput {
	return o
}

func (o IntellectualPropertyResponseOutput) ToIntellectualPropertyResponseOutputWithContext(ctx context.Context) IntellectualPropertyResponseOutput {
	return o
}

// Protection level of the Intellectual Property.
func (o IntellectualPropertyResponseOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntellectualPropertyResponse) *string { return v.ProtectionLevel }).(pulumi.StringPtrOutput)
}

// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
func (o IntellectualPropertyResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v IntellectualPropertyResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

type IntellectualPropertyResponsePtrOutput struct{ *pulumi.OutputState }

func (IntellectualPropertyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntellectualPropertyResponse)(nil)).Elem()
}

func (o IntellectualPropertyResponsePtrOutput) ToIntellectualPropertyResponsePtrOutput() IntellectualPropertyResponsePtrOutput {
	return o
}

func (o IntellectualPropertyResponsePtrOutput) ToIntellectualPropertyResponsePtrOutputWithContext(ctx context.Context) IntellectualPropertyResponsePtrOutput {
	return o
}

func (o IntellectualPropertyResponsePtrOutput) Elem() IntellectualPropertyResponseOutput {
	return o.ApplyT(func(v *IntellectualPropertyResponse) IntellectualPropertyResponse {
		if v != nil {
			return *v
		}
		var ret IntellectualPropertyResponse
		return ret
	}).(IntellectualPropertyResponseOutput)
}

// Protection level of the Intellectual Property.
func (o IntellectualPropertyResponsePtrOutput) ProtectionLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntellectualPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionLevel
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher of the Intellectual Property. Must be the same as Registry publisher name.
func (o IntellectualPropertyResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IntellectualPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type JobResourceConfiguration struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations []string `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfiguration
func (val *JobResourceConfiguration) Defaults() *JobResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

// JobResourceConfigurationInput is an input type that accepts JobResourceConfigurationArgs and JobResourceConfigurationOutput values.
// You can construct a concrete instance of `JobResourceConfigurationInput` via:
//
//	JobResourceConfigurationArgs{...}
type JobResourceConfigurationInput interface {
	pulumi.Input

	ToJobResourceConfigurationOutput() JobResourceConfigurationOutput
	ToJobResourceConfigurationOutputWithContext(context.Context) JobResourceConfigurationOutput
}

type JobResourceConfigurationArgs struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs pulumi.StringPtrInput `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations pulumi.StringArrayInput `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount pulumi.IntPtrInput `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize pulumi.StringPtrInput `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfigurationArgs
func (val *JobResourceConfigurationArgs) Defaults() *JobResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	if tmp.ShmSize == nil {
		tmp.ShmSize = pulumi.StringPtr("2g")
	}
	return &tmp
}
func (JobResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfiguration)(nil)).Elem()
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationOutput() JobResourceConfigurationOutput {
	return i.ToJobResourceConfigurationOutputWithContext(context.Background())
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationOutputWithContext(ctx context.Context) JobResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationOutput)
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return i.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationOutput).ToJobResourceConfigurationPtrOutputWithContext(ctx)
}

// JobResourceConfigurationPtrInput is an input type that accepts JobResourceConfigurationArgs, JobResourceConfigurationPtr and JobResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `JobResourceConfigurationPtrInput` via:
//
//	        JobResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobResourceConfigurationPtrInput interface {
	pulumi.Input

	ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput
	ToJobResourceConfigurationPtrOutputWithContext(context.Context) JobResourceConfigurationPtrOutput
}

type jobResourceConfigurationPtrType JobResourceConfigurationArgs

func JobResourceConfigurationPtr(v *JobResourceConfigurationArgs) JobResourceConfigurationPtrInput {
	return (*jobResourceConfigurationPtrType)(v)
}

func (*jobResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfiguration)(nil)).Elem()
}

func (i *jobResourceConfigurationPtrType) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return i.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobResourceConfigurationPtrType) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationPtrOutput)
}

type JobResourceConfigurationOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfiguration)(nil)).Elem()
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationOutput() JobResourceConfigurationOutput {
	return o
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationOutputWithContext(ctx context.Context) JobResourceConfigurationOutput {
	return o
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return o.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobResourceConfiguration) *JobResourceConfiguration {
		return &v
	}).(JobResourceConfigurationPtrOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.DockerArgs }).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o JobResourceConfigurationOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobResourceConfiguration) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o JobResourceConfigurationOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v JobResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfiguration)(nil)).Elem()
}

func (o JobResourceConfigurationPtrOutput) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return o
}

func (o JobResourceConfigurationPtrOutput) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return o
}

func (o JobResourceConfigurationPtrOutput) Elem() JobResourceConfigurationOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) JobResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret JobResourceConfiguration
		return ret
	}).(JobResourceConfigurationOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationPtrOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DockerArgs
	}).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o JobResourceConfigurationPtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o JobResourceConfigurationPtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationPtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationResponse struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Locations where the job can run.
	Locations []string `pulumi:"locations"`
	// Optional max allowed number of instances or nodes to be used by the compute target.
	// For use with elastic training, currently supported by PyTorch distribution type only.
	MaxInstanceCount *int `pulumi:"maxInstanceCount"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfigurationResponse
func (val *JobResourceConfigurationResponse) Defaults() *JobResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

type JobResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfigurationResponse)(nil)).Elem()
}

func (o JobResourceConfigurationResponseOutput) ToJobResourceConfigurationResponseOutput() JobResourceConfigurationResponseOutput {
	return o
}

func (o JobResourceConfigurationResponseOutput) ToJobResourceConfigurationResponseOutputWithContext(ctx context.Context) JobResourceConfigurationResponseOutput {
	return o
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationResponseOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.DockerArgs }).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o JobResourceConfigurationResponseOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o JobResourceConfigurationResponseOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *int { return v.MaxInstanceCount }).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationResponseOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfigurationResponse)(nil)).Elem()
}

func (o JobResourceConfigurationResponsePtrOutput) ToJobResourceConfigurationResponsePtrOutput() JobResourceConfigurationResponsePtrOutput {
	return o
}

func (o JobResourceConfigurationResponsePtrOutput) ToJobResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) JobResourceConfigurationResponsePtrOutput {
	return o
}

func (o JobResourceConfigurationResponsePtrOutput) Elem() JobResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) JobResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret JobResourceConfigurationResponse
		return ret
	}).(JobResourceConfigurationResponseOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationResponsePtrOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerArgs
	}).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Locations where the job can run.
func (o JobResourceConfigurationResponsePtrOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) []string {
		if v == nil {
			return nil
		}
		return v.Locations
	}).(pulumi.StringArrayOutput)
}

// Optional max allowed number of instances or nodes to be used by the compute target.
// For use with elastic training, currently supported by PyTorch distribution type only.
func (o JobResourceConfigurationResponsePtrOutput) MaxInstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstanceCount
	}).(pulumi.IntPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationResponsePtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

type JobScheduleAction struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

// JobScheduleActionInput is an input type that accepts JobScheduleActionArgs and JobScheduleActionOutput values.
// You can construct a concrete instance of `JobScheduleActionInput` via:
//
//	JobScheduleActionArgs{...}
type JobScheduleActionInput interface {
	pulumi.Input

	ToJobScheduleActionOutput() JobScheduleActionOutput
	ToJobScheduleActionOutputWithContext(context.Context) JobScheduleActionOutput
}

type JobScheduleActionArgs struct {
	// Expected value is 'CreateJob'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties pulumi.Input `pulumi:"jobBaseProperties"`
}

func (JobScheduleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleAction)(nil)).Elem()
}

func (i JobScheduleActionArgs) ToJobScheduleActionOutput() JobScheduleActionOutput {
	return i.ToJobScheduleActionOutputWithContext(context.Background())
}

func (i JobScheduleActionArgs) ToJobScheduleActionOutputWithContext(ctx context.Context) JobScheduleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScheduleActionOutput)
}

type JobScheduleActionOutput struct{ *pulumi.OutputState }

func (JobScheduleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleAction)(nil)).Elem()
}

func (o JobScheduleActionOutput) ToJobScheduleActionOutput() JobScheduleActionOutput {
	return o
}

func (o JobScheduleActionOutput) ToJobScheduleActionOutputWithContext(ctx context.Context) JobScheduleActionOutput {
	return o
}

// Expected value is 'CreateJob'.
func (o JobScheduleActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v JobScheduleAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o JobScheduleActionOutput) JobBaseProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScheduleAction) interface{} { return v.JobBaseProperties }).(pulumi.AnyOutput)
}

type JobScheduleActionResponse struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

type JobScheduleActionResponseOutput struct{ *pulumi.OutputState }

func (JobScheduleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleActionResponse)(nil)).Elem()
}

func (o JobScheduleActionResponseOutput) ToJobScheduleActionResponseOutput() JobScheduleActionResponseOutput {
	return o
}

func (o JobScheduleActionResponseOutput) ToJobScheduleActionResponseOutputWithContext(ctx context.Context) JobScheduleActionResponseOutput {
	return o
}

// Expected value is 'CreateJob'.
func (o JobScheduleActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v JobScheduleActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o JobScheduleActionResponseOutput) JobBaseProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScheduleActionResponse) interface{} { return v.JobBaseProperties }).(pulumi.AnyOutput)
}

// Job endpoint definition
type JobService struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodes `pulumi:"nodes"`
	// Port for endpoint set by user.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
}

// JobServiceInput is an input type that accepts JobServiceArgs and JobServiceOutput values.
// You can construct a concrete instance of `JobServiceInput` via:
//
//	JobServiceArgs{...}
type JobServiceInput interface {
	pulumi.Input

	ToJobServiceOutput() JobServiceOutput
	ToJobServiceOutputWithContext(context.Context) JobServiceOutput
}

// Job endpoint definition
type JobServiceArgs struct {
	// Url for endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType pulumi.StringPtrInput `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes AllNodesPtrInput `pulumi:"nodes"`
	// Port for endpoint set by user.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (JobServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (i JobServiceArgs) ToJobServiceOutput() JobServiceOutput {
	return i.ToJobServiceOutputWithContext(context.Background())
}

func (i JobServiceArgs) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceOutput)
}

// JobServiceMapInput is an input type that accepts JobServiceMap and JobServiceMapOutput values.
// You can construct a concrete instance of `JobServiceMapInput` via:
//
//	JobServiceMap{ "key": JobServiceArgs{...} }
type JobServiceMapInput interface {
	pulumi.Input

	ToJobServiceMapOutput() JobServiceMapOutput
	ToJobServiceMapOutputWithContext(context.Context) JobServiceMapOutput
}

type JobServiceMap map[string]JobServiceInput

func (JobServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (i JobServiceMap) ToJobServiceMapOutput() JobServiceMapOutput {
	return i.ToJobServiceMapOutputWithContext(context.Background())
}

func (i JobServiceMap) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceMapOutput)
}

// Job endpoint definition
type JobServiceOutput struct{ *pulumi.OutputState }

func (JobServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (o JobServiceOutput) ToJobServiceOutput() JobServiceOutput {
	return o
}

func (o JobServiceOutput) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return o
}

// Url for endpoint.
func (o JobServiceOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Endpoint type.
func (o JobServiceOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceOutput) Nodes() AllNodesPtrOutput {
	return o.ApplyT(func(v JobService) *AllNodes { return v.Nodes }).(AllNodesPtrOutput)
}

// Port for endpoint set by user.
func (o JobServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobService) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type JobServiceMapOutput struct{ *pulumi.OutputState }

func (JobServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (o JobServiceMapOutput) ToJobServiceMapOutput() JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) MapIndex(k pulumi.StringInput) JobServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobService {
		return vs[0].(map[string]JobService)[vs[1].(string)]
	}).(JobServiceOutput)
}

// Job endpoint definition
type JobServiceResponse struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Any error in the service.
	ErrorMessage string `pulumi:"errorMessage"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodesResponse `pulumi:"nodes"`
	// Port for endpoint set by user.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
	// Status of endpoint.
	Status string `pulumi:"status"`
}

// Job endpoint definition
type JobServiceResponseOutput struct{ *pulumi.OutputState }

func (JobServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutput() JobServiceResponseOutput {
	return o
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutputWithContext(ctx context.Context) JobServiceResponseOutput {
	return o
}

// Url for endpoint.
func (o JobServiceResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Any error in the service.
func (o JobServiceResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Endpoint type.
func (o JobServiceResponseOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceResponseOutput) Nodes() AllNodesResponsePtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *AllNodesResponse { return v.Nodes }).(AllNodesResponsePtrOutput)
}

// Port for endpoint set by user.
func (o JobServiceResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobServiceResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Status of endpoint.
func (o JobServiceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.Status }).(pulumi.StringOutput)
}

type JobServiceResponseMapOutput struct{ *pulumi.OutputState }

func (JobServiceResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutput() JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutputWithContext(ctx context.Context) JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) MapIndex(k pulumi.StringInput) JobServiceResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobServiceResponse {
		return vs[0].(map[string]JobServiceResponse)[vs[1].(string)]
	}).(JobServiceResponseOutput)
}

// Jupyter kernel configuration.
type JupyterKernelConfig struct {
	// Argument to the the runtime
	Argv []string `pulumi:"argv"`
	// Display name of the kernel
	DisplayName *string `pulumi:"displayName"`
	// Language of the kernel [Example value: python]
	Language *string `pulumi:"language"`
}

// JupyterKernelConfigInput is an input type that accepts JupyterKernelConfigArgs and JupyterKernelConfigOutput values.
// You can construct a concrete instance of `JupyterKernelConfigInput` via:
//
//	JupyterKernelConfigArgs{...}
type JupyterKernelConfigInput interface {
	pulumi.Input

	ToJupyterKernelConfigOutput() JupyterKernelConfigOutput
	ToJupyterKernelConfigOutputWithContext(context.Context) JupyterKernelConfigOutput
}

// Jupyter kernel configuration.
type JupyterKernelConfigArgs struct {
	// Argument to the the runtime
	Argv pulumi.StringArrayInput `pulumi:"argv"`
	// Display name of the kernel
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Language of the kernel [Example value: python]
	Language pulumi.StringPtrInput `pulumi:"language"`
}

func (JupyterKernelConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterKernelConfig)(nil)).Elem()
}

func (i JupyterKernelConfigArgs) ToJupyterKernelConfigOutput() JupyterKernelConfigOutput {
	return i.ToJupyterKernelConfigOutputWithContext(context.Background())
}

func (i JupyterKernelConfigArgs) ToJupyterKernelConfigOutputWithContext(ctx context.Context) JupyterKernelConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterKernelConfigOutput)
}

func (i JupyterKernelConfigArgs) ToJupyterKernelConfigPtrOutput() JupyterKernelConfigPtrOutput {
	return i.ToJupyterKernelConfigPtrOutputWithContext(context.Background())
}

func (i JupyterKernelConfigArgs) ToJupyterKernelConfigPtrOutputWithContext(ctx context.Context) JupyterKernelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterKernelConfigOutput).ToJupyterKernelConfigPtrOutputWithContext(ctx)
}

// JupyterKernelConfigPtrInput is an input type that accepts JupyterKernelConfigArgs, JupyterKernelConfigPtr and JupyterKernelConfigPtrOutput values.
// You can construct a concrete instance of `JupyterKernelConfigPtrInput` via:
//
//	        JupyterKernelConfigArgs{...}
//
//	or:
//
//	        nil
type JupyterKernelConfigPtrInput interface {
	pulumi.Input

	ToJupyterKernelConfigPtrOutput() JupyterKernelConfigPtrOutput
	ToJupyterKernelConfigPtrOutputWithContext(context.Context) JupyterKernelConfigPtrOutput
}

type jupyterKernelConfigPtrType JupyterKernelConfigArgs

func JupyterKernelConfigPtr(v *JupyterKernelConfigArgs) JupyterKernelConfigPtrInput {
	return (*jupyterKernelConfigPtrType)(v)
}

func (*jupyterKernelConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterKernelConfig)(nil)).Elem()
}

func (i *jupyterKernelConfigPtrType) ToJupyterKernelConfigPtrOutput() JupyterKernelConfigPtrOutput {
	return i.ToJupyterKernelConfigPtrOutputWithContext(context.Background())
}

func (i *jupyterKernelConfigPtrType) ToJupyterKernelConfigPtrOutputWithContext(ctx context.Context) JupyterKernelConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JupyterKernelConfigPtrOutput)
}

// Jupyter kernel configuration.
type JupyterKernelConfigOutput struct{ *pulumi.OutputState }

func (JupyterKernelConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterKernelConfig)(nil)).Elem()
}

func (o JupyterKernelConfigOutput) ToJupyterKernelConfigOutput() JupyterKernelConfigOutput {
	return o
}

func (o JupyterKernelConfigOutput) ToJupyterKernelConfigOutputWithContext(ctx context.Context) JupyterKernelConfigOutput {
	return o
}

func (o JupyterKernelConfigOutput) ToJupyterKernelConfigPtrOutput() JupyterKernelConfigPtrOutput {
	return o.ToJupyterKernelConfigPtrOutputWithContext(context.Background())
}

func (o JupyterKernelConfigOutput) ToJupyterKernelConfigPtrOutputWithContext(ctx context.Context) JupyterKernelConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JupyterKernelConfig) *JupyterKernelConfig {
		return &v
	}).(JupyterKernelConfigPtrOutput)
}

// Argument to the the runtime
func (o JupyterKernelConfigOutput) Argv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JupyterKernelConfig) []string { return v.Argv }).(pulumi.StringArrayOutput)
}

// Display name of the kernel
func (o JupyterKernelConfigOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterKernelConfig) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Language of the kernel [Example value: python]
func (o JupyterKernelConfigOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterKernelConfig) *string { return v.Language }).(pulumi.StringPtrOutput)
}

type JupyterKernelConfigPtrOutput struct{ *pulumi.OutputState }

func (JupyterKernelConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterKernelConfig)(nil)).Elem()
}

func (o JupyterKernelConfigPtrOutput) ToJupyterKernelConfigPtrOutput() JupyterKernelConfigPtrOutput {
	return o
}

func (o JupyterKernelConfigPtrOutput) ToJupyterKernelConfigPtrOutputWithContext(ctx context.Context) JupyterKernelConfigPtrOutput {
	return o
}

func (o JupyterKernelConfigPtrOutput) Elem() JupyterKernelConfigOutput {
	return o.ApplyT(func(v *JupyterKernelConfig) JupyterKernelConfig {
		if v != nil {
			return *v
		}
		var ret JupyterKernelConfig
		return ret
	}).(JupyterKernelConfigOutput)
}

// Argument to the the runtime
func (o JupyterKernelConfigPtrOutput) Argv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JupyterKernelConfig) []string {
		if v == nil {
			return nil
		}
		return v.Argv
	}).(pulumi.StringArrayOutput)
}

// Display name of the kernel
func (o JupyterKernelConfigPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JupyterKernelConfig) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Language of the kernel [Example value: python]
func (o JupyterKernelConfigPtrOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JupyterKernelConfig) *string {
		if v == nil {
			return nil
		}
		return v.Language
	}).(pulumi.StringPtrOutput)
}

// Jupyter kernel configuration.
type JupyterKernelConfigResponse struct {
	// Argument to the the runtime
	Argv []string `pulumi:"argv"`
	// Display name of the kernel
	DisplayName *string `pulumi:"displayName"`
	// Language of the kernel [Example value: python]
	Language *string `pulumi:"language"`
}

// Jupyter kernel configuration.
type JupyterKernelConfigResponseOutput struct{ *pulumi.OutputState }

func (JupyterKernelConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JupyterKernelConfigResponse)(nil)).Elem()
}

func (o JupyterKernelConfigResponseOutput) ToJupyterKernelConfigResponseOutput() JupyterKernelConfigResponseOutput {
	return o
}

func (o JupyterKernelConfigResponseOutput) ToJupyterKernelConfigResponseOutputWithContext(ctx context.Context) JupyterKernelConfigResponseOutput {
	return o
}

// Argument to the the runtime
func (o JupyterKernelConfigResponseOutput) Argv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JupyterKernelConfigResponse) []string { return v.Argv }).(pulumi.StringArrayOutput)
}

// Display name of the kernel
func (o JupyterKernelConfigResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterKernelConfigResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Language of the kernel [Example value: python]
func (o JupyterKernelConfigResponseOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JupyterKernelConfigResponse) *string { return v.Language }).(pulumi.StringPtrOutput)
}

type JupyterKernelConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (JupyterKernelConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JupyterKernelConfigResponse)(nil)).Elem()
}

func (o JupyterKernelConfigResponsePtrOutput) ToJupyterKernelConfigResponsePtrOutput() JupyterKernelConfigResponsePtrOutput {
	return o
}

func (o JupyterKernelConfigResponsePtrOutput) ToJupyterKernelConfigResponsePtrOutputWithContext(ctx context.Context) JupyterKernelConfigResponsePtrOutput {
	return o
}

func (o JupyterKernelConfigResponsePtrOutput) Elem() JupyterKernelConfigResponseOutput {
	return o.ApplyT(func(v *JupyterKernelConfigResponse) JupyterKernelConfigResponse {
		if v != nil {
			return *v
		}
		var ret JupyterKernelConfigResponse
		return ret
	}).(JupyterKernelConfigResponseOutput)
}

// Argument to the the runtime
func (o JupyterKernelConfigResponsePtrOutput) Argv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JupyterKernelConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.Argv
	}).(pulumi.StringArrayOutput)
}

// Display name of the kernel
func (o JupyterKernelConfigResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JupyterKernelConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Language of the kernel [Example value: python]
func (o JupyterKernelConfigResponsePtrOutput) Language() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JupyterKernelConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.Language
	}).(pulumi.StringPtrOutput)
}

type KerberosKeytabCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
	// [Required] Keytab secrets.
	Secrets KerberosKeytabSecrets `pulumi:"secrets"`
}

// KerberosKeytabCredentialsInput is an input type that accepts KerberosKeytabCredentialsArgs and KerberosKeytabCredentialsOutput values.
// You can construct a concrete instance of `KerberosKeytabCredentialsInput` via:
//
//	KerberosKeytabCredentialsArgs{...}
type KerberosKeytabCredentialsInput interface {
	pulumi.Input

	ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput
	ToKerberosKeytabCredentialsOutputWithContext(context.Context) KerberosKeytabCredentialsOutput
}

type KerberosKeytabCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress pulumi.StringInput `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal pulumi.StringInput `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm pulumi.StringInput `pulumi:"kerberosRealm"`
	// [Required] Keytab secrets.
	Secrets KerberosKeytabSecretsInput `pulumi:"secrets"`
}

func (KerberosKeytabCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentials)(nil)).Elem()
}

func (i KerberosKeytabCredentialsArgs) ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput {
	return i.ToKerberosKeytabCredentialsOutputWithContext(context.Background())
}

func (i KerberosKeytabCredentialsArgs) ToKerberosKeytabCredentialsOutputWithContext(ctx context.Context) KerberosKeytabCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosKeytabCredentialsOutput)
}

type KerberosKeytabCredentialsOutput struct{ *pulumi.OutputState }

func (KerberosKeytabCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentials)(nil)).Elem()
}

func (o KerberosKeytabCredentialsOutput) ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput {
	return o
}

func (o KerberosKeytabCredentialsOutput) ToKerberosKeytabCredentialsOutputWithContext(ctx context.Context) KerberosKeytabCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosKeytabCredentialsOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosKeytabCredentialsOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosKeytabCredentialsOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

// [Required] Keytab secrets.
func (o KerberosKeytabCredentialsOutput) Secrets() KerberosKeytabSecretsOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) KerberosKeytabSecrets { return v.Secrets }).(KerberosKeytabSecretsOutput)
}

type KerberosKeytabCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
}

type KerberosKeytabCredentialsResponseOutput struct{ *pulumi.OutputState }

func (KerberosKeytabCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentialsResponse)(nil)).Elem()
}

func (o KerberosKeytabCredentialsResponseOutput) ToKerberosKeytabCredentialsResponseOutput() KerberosKeytabCredentialsResponseOutput {
	return o
}

func (o KerberosKeytabCredentialsResponseOutput) ToKerberosKeytabCredentialsResponseOutputWithContext(ctx context.Context) KerberosKeytabCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosKeytabCredentialsResponseOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosKeytabCredentialsResponseOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosKeytabCredentialsResponseOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

type KerberosKeytabSecrets struct {
	// Kerberos keytab secret.
	KerberosKeytab *string `pulumi:"kerberosKeytab"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosKeytab'.
	SecretsType string `pulumi:"secretsType"`
}

// KerberosKeytabSecretsInput is an input type that accepts KerberosKeytabSecretsArgs and KerberosKeytabSecretsOutput values.
// You can construct a concrete instance of `KerberosKeytabSecretsInput` via:
//
//	KerberosKeytabSecretsArgs{...}
type KerberosKeytabSecretsInput interface {
	pulumi.Input

	ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput
	ToKerberosKeytabSecretsOutputWithContext(context.Context) KerberosKeytabSecretsOutput
}

type KerberosKeytabSecretsArgs struct {
	// Kerberos keytab secret.
	KerberosKeytab pulumi.StringPtrInput `pulumi:"kerberosKeytab"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosKeytab'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (KerberosKeytabSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabSecrets)(nil)).Elem()
}

func (i KerberosKeytabSecretsArgs) ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput {
	return i.ToKerberosKeytabSecretsOutputWithContext(context.Background())
}

func (i KerberosKeytabSecretsArgs) ToKerberosKeytabSecretsOutputWithContext(ctx context.Context) KerberosKeytabSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosKeytabSecretsOutput)
}

type KerberosKeytabSecretsOutput struct{ *pulumi.OutputState }

func (KerberosKeytabSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabSecrets)(nil)).Elem()
}

func (o KerberosKeytabSecretsOutput) ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput {
	return o
}

func (o KerberosKeytabSecretsOutput) ToKerberosKeytabSecretsOutputWithContext(ctx context.Context) KerberosKeytabSecretsOutput {
	return o
}

// Kerberos keytab secret.
func (o KerberosKeytabSecretsOutput) KerberosKeytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosKeytabSecrets) *string { return v.KerberosKeytab }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

type KerberosPasswordCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
	// [Required] Kerberos password secrets.
	Secrets KerberosPasswordSecrets `pulumi:"secrets"`
}

// KerberosPasswordCredentialsInput is an input type that accepts KerberosPasswordCredentialsArgs and KerberosPasswordCredentialsOutput values.
// You can construct a concrete instance of `KerberosPasswordCredentialsInput` via:
//
//	KerberosPasswordCredentialsArgs{...}
type KerberosPasswordCredentialsInput interface {
	pulumi.Input

	ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput
	ToKerberosPasswordCredentialsOutputWithContext(context.Context) KerberosPasswordCredentialsOutput
}

type KerberosPasswordCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress pulumi.StringInput `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal pulumi.StringInput `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm pulumi.StringInput `pulumi:"kerberosRealm"`
	// [Required] Kerberos password secrets.
	Secrets KerberosPasswordSecretsInput `pulumi:"secrets"`
}

func (KerberosPasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentials)(nil)).Elem()
}

func (i KerberosPasswordCredentialsArgs) ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput {
	return i.ToKerberosPasswordCredentialsOutputWithContext(context.Background())
}

func (i KerberosPasswordCredentialsArgs) ToKerberosPasswordCredentialsOutputWithContext(ctx context.Context) KerberosPasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosPasswordCredentialsOutput)
}

type KerberosPasswordCredentialsOutput struct{ *pulumi.OutputState }

func (KerberosPasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentials)(nil)).Elem()
}

func (o KerberosPasswordCredentialsOutput) ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput {
	return o
}

func (o KerberosPasswordCredentialsOutput) ToKerberosPasswordCredentialsOutputWithContext(ctx context.Context) KerberosPasswordCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosPasswordCredentialsOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosPasswordCredentialsOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosPasswordCredentialsOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

// [Required] Kerberos password secrets.
func (o KerberosPasswordCredentialsOutput) Secrets() KerberosPasswordSecretsOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) KerberosPasswordSecrets { return v.Secrets }).(KerberosPasswordSecretsOutput)
}

type KerberosPasswordCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
}

type KerberosPasswordCredentialsResponseOutput struct{ *pulumi.OutputState }

func (KerberosPasswordCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentialsResponse)(nil)).Elem()
}

func (o KerberosPasswordCredentialsResponseOutput) ToKerberosPasswordCredentialsResponseOutput() KerberosPasswordCredentialsResponseOutput {
	return o
}

func (o KerberosPasswordCredentialsResponseOutput) ToKerberosPasswordCredentialsResponseOutputWithContext(ctx context.Context) KerberosPasswordCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosPasswordCredentialsResponseOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosPasswordCredentialsResponseOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosPasswordCredentialsResponseOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

type KerberosPasswordSecrets struct {
	// Kerberos password secret.
	KerberosPassword *string `pulumi:"kerberosPassword"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosPassword'.
	SecretsType string `pulumi:"secretsType"`
}

// KerberosPasswordSecretsInput is an input type that accepts KerberosPasswordSecretsArgs and KerberosPasswordSecretsOutput values.
// You can construct a concrete instance of `KerberosPasswordSecretsInput` via:
//
//	KerberosPasswordSecretsArgs{...}
type KerberosPasswordSecretsInput interface {
	pulumi.Input

	ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput
	ToKerberosPasswordSecretsOutputWithContext(context.Context) KerberosPasswordSecretsOutput
}

type KerberosPasswordSecretsArgs struct {
	// Kerberos password secret.
	KerberosPassword pulumi.StringPtrInput `pulumi:"kerberosPassword"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosPassword'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (KerberosPasswordSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordSecrets)(nil)).Elem()
}

func (i KerberosPasswordSecretsArgs) ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput {
	return i.ToKerberosPasswordSecretsOutputWithContext(context.Background())
}

func (i KerberosPasswordSecretsArgs) ToKerberosPasswordSecretsOutputWithContext(ctx context.Context) KerberosPasswordSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosPasswordSecretsOutput)
}

type KerberosPasswordSecretsOutput struct{ *pulumi.OutputState }

func (KerberosPasswordSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordSecrets)(nil)).Elem()
}

func (o KerberosPasswordSecretsOutput) ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput {
	return o
}

func (o KerberosPasswordSecretsOutput) ToKerberosPasswordSecretsOutputWithContext(ctx context.Context) KerberosPasswordSecretsOutput {
	return o
}

// Kerberos password secret.
func (o KerberosPasswordSecretsOutput) KerberosPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosPasswordSecrets) *string { return v.KerberosPassword }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Customer Key vault properties.
type KeyVaultProperties struct {
	// Currently, we support only SystemAssigned MSI.
	// We need this when we support UserAssignedIdentities
	IdentityClientId *string `pulumi:"identityClientId"`
	// KeyVault key identifier to encrypt the data
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// KeyVault Arm Id that contains the data encryption key
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

// KeyVaultPropertiesInput is an input type that accepts KeyVaultPropertiesArgs and KeyVaultPropertiesOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesInput` via:
//
//	KeyVaultPropertiesArgs{...}
type KeyVaultPropertiesInput interface {
	pulumi.Input

	ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput
	ToKeyVaultPropertiesOutputWithContext(context.Context) KeyVaultPropertiesOutput
}

// Customer Key vault properties.
type KeyVaultPropertiesArgs struct {
	// Currently, we support only SystemAssigned MSI.
	// We need this when we support UserAssignedIdentities
	IdentityClientId pulumi.StringPtrInput `pulumi:"identityClientId"`
	// KeyVault key identifier to encrypt the data
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// KeyVault Arm Id that contains the data encryption key
	KeyVaultArmId pulumi.StringInput `pulumi:"keyVaultArmId"`
}

func (KeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return i.ToKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput)
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i KeyVaultPropertiesArgs) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesOutput).ToKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// KeyVaultPropertiesPtrInput is an input type that accepts KeyVaultPropertiesArgs, KeyVaultPropertiesPtr and KeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `KeyVaultPropertiesPtrInput` via:
//
//	        KeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type KeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput
	ToKeyVaultPropertiesPtrOutputWithContext(context.Context) KeyVaultPropertiesPtrOutput
}

type keyVaultPropertiesPtrType KeyVaultPropertiesArgs

func KeyVaultPropertiesPtr(v *KeyVaultPropertiesArgs) KeyVaultPropertiesPtrInput {
	return (*keyVaultPropertiesPtrType)(v)
}

func (*keyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return i.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *keyVaultPropertiesPtrType) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultPropertiesPtrOutput)
}

// Customer Key vault properties.
type KeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutput() KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesOutputWithContext(ctx context.Context) KeyVaultPropertiesOutput {
	return o
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o.ToKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o KeyVaultPropertiesOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultProperties) *KeyVaultProperties {
		return &v
	}).(KeyVaultPropertiesPtrOutput)
}

// Currently, we support only SystemAssigned MSI.
// We need this when we support UserAssignedIdentities
func (o KeyVaultPropertiesOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultProperties) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// KeyVault key identifier to encrypt the data
func (o KeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultProperties) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// KeyVault Arm Id that contains the data encryption key
func (o KeyVaultPropertiesOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultProperties) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type KeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultProperties)(nil)).Elem()
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutput() KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) ToKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) KeyVaultPropertiesPtrOutput {
	return o
}

func (o KeyVaultPropertiesPtrOutput) Elem() KeyVaultPropertiesOutput {
	return o.ApplyT(func(v *KeyVaultProperties) KeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret KeyVaultProperties
		return ret
	}).(KeyVaultPropertiesOutput)
}

// Currently, we support only SystemAssigned MSI.
// We need this when we support UserAssignedIdentities
func (o KeyVaultPropertiesPtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// KeyVault key identifier to encrypt the data
func (o KeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// KeyVault Arm Id that contains the data encryption key
func (o KeyVaultPropertiesPtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

// Customer Key vault properties.
type KeyVaultPropertiesResponse struct {
	// Currently, we support only SystemAssigned MSI.
	// We need this when we support UserAssignedIdentities
	IdentityClientId *string `pulumi:"identityClientId"`
	// KeyVault key identifier to encrypt the data
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// KeyVault Arm Id that contains the data encryption key
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

// Customer Key vault properties.
type KeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutput() KeyVaultPropertiesResponseOutput {
	return o
}

func (o KeyVaultPropertiesResponseOutput) ToKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) KeyVaultPropertiesResponseOutput {
	return o
}

// Currently, we support only SystemAssigned MSI.
// We need this when we support UserAssignedIdentities
func (o KeyVaultPropertiesResponseOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// KeyVault key identifier to encrypt the data
func (o KeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// KeyVault Arm Id that contains the data encryption key
func (o KeyVaultPropertiesResponseOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultPropertiesResponse) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type KeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultPropertiesResponse)(nil)).Elem()
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutput() KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) ToKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) KeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o KeyVaultPropertiesResponsePtrOutput) Elem() KeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) KeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KeyVaultPropertiesResponse
		return ret
	}).(KeyVaultPropertiesResponseOutput)
}

// Currently, we support only SystemAssigned MSI.
// We need this when we support UserAssignedIdentities
func (o KeyVaultPropertiesResponsePtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// KeyVault key identifier to encrypt the data
func (o KeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// KeyVault Arm Id that contains the data encryption key
func (o KeyVaultPropertiesResponsePtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type Kubernetes struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Kubernetes
	Properties *KubernetesProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for Kubernetes
func (val *Kubernetes) Defaults() *Kubernetes {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// KubernetesInput is an input type that accepts KubernetesArgs and KubernetesOutput values.
// You can construct a concrete instance of `KubernetesInput` via:
//
//	KubernetesArgs{...}
type KubernetesInput interface {
	pulumi.Input

	ToKubernetesOutput() KubernetesOutput
	ToKubernetesOutputWithContext(context.Context) KubernetesOutput
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of Kubernetes
	Properties KubernetesPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for KubernetesArgs
func (val *KubernetesArgs) Defaults() *KubernetesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (KubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (i KubernetesArgs) ToKubernetesOutput() KubernetesOutput {
	return i.ToKubernetesOutputWithContext(context.Background())
}

func (i KubernetesArgs) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput)
}

func (i KubernetesArgs) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return i.ToKubernetesPtrOutputWithContext(context.Background())
}

func (i KubernetesArgs) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput).ToKubernetesPtrOutputWithContext(ctx)
}

// KubernetesPtrInput is an input type that accepts KubernetesArgs, KubernetesPtr and KubernetesPtrOutput values.
// You can construct a concrete instance of `KubernetesPtrInput` via:
//
//	        KubernetesArgs{...}
//
//	or:
//
//	        nil
type KubernetesPtrInput interface {
	pulumi.Input

	ToKubernetesPtrOutput() KubernetesPtrOutput
	ToKubernetesPtrOutputWithContext(context.Context) KubernetesPtrOutput
}

type kubernetesPtrType KubernetesArgs

func KubernetesPtr(v *KubernetesArgs) KubernetesPtrInput {
	return (*kubernetesPtrType)(v)
}

func (*kubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (i *kubernetesPtrType) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return i.ToKubernetesPtrOutputWithContext(context.Background())
}

func (i *kubernetesPtrType) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPtrOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesOutput struct{ *pulumi.OutputState }

func (KubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (o KubernetesOutput) ToKubernetesOutput() KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return o.ToKubernetesPtrOutputWithContext(context.Background())
}

func (o KubernetesOutput) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Kubernetes) *Kubernetes {
		return &v
	}).(KubernetesPtrOutput)
}

// Location for the underlying compute
func (o KubernetesOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v Kubernetes) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Kubernetes) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of Kubernetes
func (o KubernetesOutput) Properties() KubernetesPropertiesPtrOutput {
	return o.ApplyT(func(v Kubernetes) *KubernetesProperties { return v.Properties }).(KubernetesPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type KubernetesPtrOutput struct{ *pulumi.OutputState }

func (KubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (o KubernetesPtrOutput) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return o
}

func (o KubernetesPtrOutput) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return o
}

func (o KubernetesPtrOutput) Elem() KubernetesOutput {
	return o.ApplyT(func(v *Kubernetes) Kubernetes {
		if v != nil {
			return *v
		}
		var ret Kubernetes
		return ret
	}).(KubernetesOutput)
}

// Location for the underlying compute
func (o KubernetesPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of Kubernetes
func (o KubernetesPtrOutput) Properties() KubernetesPropertiesPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *KubernetesProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(KubernetesPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirements `pulumi:"containerResourceRequirements"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector *DataCollector `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeployment
func (val *KubernetesOnlineDeployment) Defaults() *KubernetesOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	tmp.DataCollector = tmp.DataCollector.Defaults()

	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// KubernetesOnlineDeploymentInput is an input type that accepts KubernetesOnlineDeploymentArgs and KubernetesOnlineDeploymentOutput values.
// You can construct a concrete instance of `KubernetesOnlineDeploymentInput` via:
//
//	KubernetesOnlineDeploymentArgs{...}
type KubernetesOnlineDeploymentInput interface {
	pulumi.Input

	ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput
	ToKubernetesOnlineDeploymentOutputWithContext(context.Context) KubernetesOnlineDeploymentOutput
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements ContainerResourceRequirementsPtrInput `pulumi:"containerResourceRequirements"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector DataCollectorPtrInput `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentArgs
func (val *KubernetesOnlineDeploymentArgs) Defaults() *KubernetesOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}

	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	return &tmp
}
func (KubernetesOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return i.ToKubernetesOnlineDeploymentOutputWithContext(context.Background())
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOnlineDeploymentOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return o
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentOutput) ContainerResourceRequirements() ContainerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ContainerResourceRequirements {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsPtrOutput)
}

// The mdc configuration, we disable mdc when it's null.
func (o KubernetesOnlineDeploymentOutput) DataCollector() DataCollectorPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *DataCollector { return v.DataCollector }).(DataCollectorPtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirementsResponse `pulumi:"containerResourceRequirements"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector *DataCollectorResponse `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentResponse
func (val *KubernetesOnlineDeploymentResponse) Defaults() *KubernetesOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	tmp.DataCollector = tmp.DataCollector.Defaults()

	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeploymentResponse)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutput() KubernetesOnlineDeploymentResponseOutput {
	return o
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentResponseOutput) ContainerResourceRequirements() ContainerResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ContainerResourceRequirementsResponse {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsResponsePtrOutput)
}

// The mdc configuration, we disable mdc when it's null.
func (o KubernetesOnlineDeploymentResponseOutput) DataCollector() DataCollectorResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *DataCollectorResponse { return v.DataCollector }).(DataCollectorResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Kubernetes properties
type KubernetesProperties struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchema `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesProperties
func (val *KubernetesProperties) Defaults() *KubernetesProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// KubernetesPropertiesInput is an input type that accepts KubernetesPropertiesArgs and KubernetesPropertiesOutput values.
// You can construct a concrete instance of `KubernetesPropertiesInput` via:
//
//	KubernetesPropertiesArgs{...}
type KubernetesPropertiesInput interface {
	pulumi.Input

	ToKubernetesPropertiesOutput() KubernetesPropertiesOutput
	ToKubernetesPropertiesOutputWithContext(context.Context) KubernetesPropertiesOutput
}

// Kubernetes properties
type KubernetesPropertiesArgs struct {
	// Default instance type
	DefaultInstanceType pulumi.StringPtrInput `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain pulumi.StringPtrInput `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId pulumi.StringPtrInput `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes InstanceTypeSchemaMapInput `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString pulumi.StringPtrInput `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString pulumi.StringPtrInput `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName pulumi.StringPtrInput `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesPropertiesArgs
func (val *KubernetesPropertiesArgs) Defaults() *KubernetesPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		tmp.Namespace = pulumi.StringPtr("default")
	}
	return &tmp
}
func (KubernetesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesProperties)(nil)).Elem()
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesOutput() KubernetesPropertiesOutput {
	return i.ToKubernetesPropertiesOutputWithContext(context.Background())
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesOutputWithContext(ctx context.Context) KubernetesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesOutput)
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return i.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesOutput).ToKubernetesPropertiesPtrOutputWithContext(ctx)
}

// KubernetesPropertiesPtrInput is an input type that accepts KubernetesPropertiesArgs, KubernetesPropertiesPtr and KubernetesPropertiesPtrOutput values.
// You can construct a concrete instance of `KubernetesPropertiesPtrInput` via:
//
//	        KubernetesPropertiesArgs{...}
//
//	or:
//
//	        nil
type KubernetesPropertiesPtrInput interface {
	pulumi.Input

	ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput
	ToKubernetesPropertiesPtrOutputWithContext(context.Context) KubernetesPropertiesPtrOutput
}

type kubernetesPropertiesPtrType KubernetesPropertiesArgs

func KubernetesPropertiesPtr(v *KubernetesPropertiesArgs) KubernetesPropertiesPtrInput {
	return (*kubernetesPropertiesPtrType)(v)
}

func (*kubernetesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesProperties)(nil)).Elem()
}

func (i *kubernetesPropertiesPtrType) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return i.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (i *kubernetesPropertiesPtrType) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesPtrOutput)
}

// Kubernetes properties
type KubernetesPropertiesOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesProperties)(nil)).Elem()
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesOutput() KubernetesPropertiesOutput {
	return o
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesOutputWithContext(ctx context.Context) KubernetesPropertiesOutput {
	return o
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return o.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesProperties) *KubernetesProperties {
		return &v
	}).(KubernetesPropertiesPtrOutput)
}

// Default instance type
func (o KubernetesPropertiesOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.DefaultInstanceType }).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ExtensionInstanceReleaseTrain }).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ExtensionPrincipalId }).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesOutput) InstanceTypes() InstanceTypeSchemaMapOutput {
	return o.ApplyT(func(v KubernetesProperties) map[string]InstanceTypeSchema { return v.InstanceTypes }).(InstanceTypeSchemaMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.RelayConnectionString }).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ServiceBusConnectionString }).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.VcName }).(pulumi.StringPtrOutput)
}

type KubernetesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesProperties)(nil)).Elem()
}

func (o KubernetesPropertiesPtrOutput) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return o
}

func (o KubernetesPropertiesPtrOutput) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return o
}

func (o KubernetesPropertiesPtrOutput) Elem() KubernetesPropertiesOutput {
	return o.ApplyT(func(v *KubernetesProperties) KubernetesProperties {
		if v != nil {
			return *v
		}
		var ret KubernetesProperties
		return ret
	}).(KubernetesPropertiesOutput)
}

// Default instance type
func (o KubernetesPropertiesPtrOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultInstanceType
	}).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesPtrOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionInstanceReleaseTrain
	}).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesPtrOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionPrincipalId
	}).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesPtrOutput) InstanceTypes() InstanceTypeSchemaMapOutput {
	return o.ApplyT(func(v *KubernetesProperties) map[string]InstanceTypeSchema {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(InstanceTypeSchemaMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesPtrOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayConnectionString
	}).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesPtrOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusConnectionString
	}).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesPtrOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.VcName
	}).(pulumi.StringPtrOutput)
}

// Kubernetes properties
type KubernetesPropertiesResponse struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchemaResponse `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesPropertiesResponse
func (val *KubernetesPropertiesResponse) Defaults() *KubernetesPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// Kubernetes properties
type KubernetesPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesPropertiesResponse)(nil)).Elem()
}

func (o KubernetesPropertiesResponseOutput) ToKubernetesPropertiesResponseOutput() KubernetesPropertiesResponseOutput {
	return o
}

func (o KubernetesPropertiesResponseOutput) ToKubernetesPropertiesResponseOutputWithContext(ctx context.Context) KubernetesPropertiesResponseOutput {
	return o
}

// Default instance type
func (o KubernetesPropertiesResponseOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.DefaultInstanceType }).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesResponseOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ExtensionInstanceReleaseTrain }).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesResponseOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ExtensionPrincipalId }).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesResponseOutput) InstanceTypes() InstanceTypeSchemaResponseMapOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) map[string]InstanceTypeSchemaResponse { return v.InstanceTypes }).(InstanceTypeSchemaResponseMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesResponseOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.RelayConnectionString }).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesResponseOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ServiceBusConnectionString }).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesResponseOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.VcName }).(pulumi.StringPtrOutput)
}

type KubernetesPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesPropertiesResponse)(nil)).Elem()
}

func (o KubernetesPropertiesResponsePtrOutput) ToKubernetesPropertiesResponsePtrOutput() KubernetesPropertiesResponsePtrOutput {
	return o
}

func (o KubernetesPropertiesResponsePtrOutput) ToKubernetesPropertiesResponsePtrOutputWithContext(ctx context.Context) KubernetesPropertiesResponsePtrOutput {
	return o
}

func (o KubernetesPropertiesResponsePtrOutput) Elem() KubernetesPropertiesResponseOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) KubernetesPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KubernetesPropertiesResponse
		return ret
	}).(KubernetesPropertiesResponseOutput)
}

// Default instance type
func (o KubernetesPropertiesResponsePtrOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultInstanceType
	}).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesResponsePtrOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionInstanceReleaseTrain
	}).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesResponsePtrOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionPrincipalId
	}).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesResponsePtrOutput) InstanceTypes() InstanceTypeSchemaResponseMapOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) map[string]InstanceTypeSchemaResponse {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(InstanceTypeSchemaResponseMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesResponsePtrOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelayConnectionString
	}).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesResponsePtrOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusConnectionString
	}).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesResponsePtrOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VcName
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Kubernetes
	Properties *KubernetesPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for KubernetesResponse
func (val *KubernetesResponse) Defaults() *KubernetesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesResponseOutput struct{ *pulumi.OutputState }

func (KubernetesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesResponse)(nil)).Elem()
}

func (o KubernetesResponseOutput) ToKubernetesResponseOutput() KubernetesResponseOutput {
	return o
}

func (o KubernetesResponseOutput) ToKubernetesResponseOutputWithContext(ctx context.Context) KubernetesResponseOutput {
	return o
}

// Location for the underlying compute
func (o KubernetesResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o KubernetesResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o KubernetesResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v KubernetesResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o KubernetesResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of Kubernetes
func (o KubernetesResponseOutput) Properties() KubernetesPropertiesResponsePtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *KubernetesPropertiesResponse { return v.Properties }).(KubernetesPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o KubernetesResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v KubernetesResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o KubernetesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Label category definition
type LabelCategory struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClass `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategory
func (val *LabelCategory) Defaults() *LabelCategory {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// LabelCategoryInput is an input type that accepts LabelCategoryArgs and LabelCategoryOutput values.
// You can construct a concrete instance of `LabelCategoryInput` via:
//
//	LabelCategoryArgs{...}
type LabelCategoryInput interface {
	pulumi.Input

	ToLabelCategoryOutput() LabelCategoryOutput
	ToLabelCategoryOutputWithContext(context.Context) LabelCategoryOutput
}

// Label category definition
type LabelCategoryArgs struct {
	// Dictionary of label classes in this category.
	Classes LabelClassMapInput `pulumi:"classes"`
	// Display name of the label category.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect pulumi.StringPtrInput `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryArgs
func (val *LabelCategoryArgs) Defaults() *LabelCategoryArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		tmp.MultiSelect = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (i LabelCategoryArgs) ToLabelCategoryOutput() LabelCategoryOutput {
	return i.ToLabelCategoryOutputWithContext(context.Background())
}

func (i LabelCategoryArgs) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryOutput)
}

// LabelCategoryMapInput is an input type that accepts LabelCategoryMap and LabelCategoryMapOutput values.
// You can construct a concrete instance of `LabelCategoryMapInput` via:
//
//	LabelCategoryMap{ "key": LabelCategoryArgs{...} }
type LabelCategoryMapInput interface {
	pulumi.Input

	ToLabelCategoryMapOutput() LabelCategoryMapOutput
	ToLabelCategoryMapOutputWithContext(context.Context) LabelCategoryMapOutput
}

type LabelCategoryMap map[string]LabelCategoryInput

func (LabelCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (i LabelCategoryMap) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return i.ToLabelCategoryMapOutputWithContext(context.Background())
}

func (i LabelCategoryMap) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryMapOutput)
}

// Label category definition
type LabelCategoryOutput struct{ *pulumi.OutputState }

func (LabelCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (o LabelCategoryOutput) ToLabelCategoryOutput() LabelCategoryOutput {
	return o
}

func (o LabelCategoryOutput) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryOutput) Classes() LabelClassMapOutput {
	return o.ApplyT(func(v LabelCategory) map[string]LabelClass { return v.Classes }).(LabelClassMapOutput)
}

// Display name of the label category.
func (o LabelCategoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategory {
		return vs[0].(map[string]LabelCategory)[vs[1].(string)]
	}).(LabelCategoryOutput)
}

// Label category definition
type LabelCategoryResponse struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClassResponse `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryResponse
func (val *LabelCategoryResponse) Defaults() *LabelCategoryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// Label category definition
type LabelCategoryResponseOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutput() LabelCategoryResponseOutput {
	return o
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutputWithContext(ctx context.Context) LabelCategoryResponseOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryResponseOutput) Classes() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelCategoryResponse) map[string]LabelClassResponse { return v.Classes }).(LabelClassResponseMapOutput)
}

// Display name of the label category.
func (o LabelCategoryResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryResponseOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryResponseMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutput() LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutputWithContext(ctx context.Context) LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategoryResponse {
		return vs[0].(map[string]LabelCategoryResponse)[vs[1].(string)]
	}).(LabelCategoryResponseOutput)
}

// Label class definition
type LabelClass struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClass `pulumi:"subclasses"`
}

// LabelClassInput is an input type that accepts LabelClassArgs and LabelClassOutput values.
// You can construct a concrete instance of `LabelClassInput` via:
//
//	LabelClassArgs{...}
type LabelClassInput interface {
	pulumi.Input

	ToLabelClassOutput() LabelClassOutput
	ToLabelClassOutputWithContext(context.Context) LabelClassOutput
}

// Label class definition
type LabelClassArgs struct {
	// Display name of the label class.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses LabelClassMapInput `pulumi:"subclasses"`
}

func (LabelClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (i LabelClassArgs) ToLabelClassOutput() LabelClassOutput {
	return i.ToLabelClassOutputWithContext(context.Background())
}

func (i LabelClassArgs) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassOutput)
}

// LabelClassMapInput is an input type that accepts LabelClassMap and LabelClassMapOutput values.
// You can construct a concrete instance of `LabelClassMapInput` via:
//
//	LabelClassMap{ "key": LabelClassArgs{...} }
type LabelClassMapInput interface {
	pulumi.Input

	ToLabelClassMapOutput() LabelClassMapOutput
	ToLabelClassMapOutputWithContext(context.Context) LabelClassMapOutput
}

type LabelClassMap map[string]LabelClassInput

func (LabelClassMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (i LabelClassMap) ToLabelClassMapOutput() LabelClassMapOutput {
	return i.ToLabelClassMapOutputWithContext(context.Background())
}

func (i LabelClassMap) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassMapOutput)
}

// Label class definition
type LabelClassOutput struct{ *pulumi.OutputState }

func (LabelClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (o LabelClassOutput) ToLabelClassOutput() LabelClassOutput {
	return o
}

func (o LabelClassOutput) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return o
}

// Display name of the label class.
func (o LabelClassOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClass) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassOutput) Subclasses() LabelClassMapOutput {
	return o.ApplyT(func(v LabelClass) map[string]LabelClass { return v.Subclasses }).(LabelClassMapOutput)
}

type LabelClassMapOutput struct{ *pulumi.OutputState }

func (LabelClassMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (o LabelClassMapOutput) ToLabelClassMapOutput() LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) MapIndex(k pulumi.StringInput) LabelClassOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClass {
		return vs[0].(map[string]LabelClass)[vs[1].(string)]
	}).(LabelClassOutput)
}

// Label class definition
type LabelClassResponse struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClassResponse `pulumi:"subclasses"`
}

// Label class definition
type LabelClassResponseOutput struct{ *pulumi.OutputState }

func (LabelClassResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutput() LabelClassResponseOutput {
	return o
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutputWithContext(ctx context.Context) LabelClassResponseOutput {
	return o
}

// Display name of the label class.
func (o LabelClassResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClassResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassResponseOutput) Subclasses() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelClassResponse) map[string]LabelClassResponse { return v.Subclasses }).(LabelClassResponseMapOutput)
}

type LabelClassResponseMapOutput struct{ *pulumi.OutputState }

func (LabelClassResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutput() LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutputWithContext(ctx context.Context) LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) MapIndex(k pulumi.StringInput) LabelClassResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClassResponse {
		return vs[0].(map[string]LabelClassResponse)[vs[1].(string)]
	}).(LabelClassResponseOutput)
}

// Labeling data configuration definition
type LabelingDataConfiguration struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfiguration
func (val *LabelingDataConfiguration) Defaults() *LabelingDataConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// LabelingDataConfigurationInput is an input type that accepts LabelingDataConfigurationArgs and LabelingDataConfigurationOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationInput` via:
//
//	LabelingDataConfigurationArgs{...}
type LabelingDataConfigurationInput interface {
	pulumi.Input

	ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput
	ToLabelingDataConfigurationOutputWithContext(context.Context) LabelingDataConfigurationOutput
}

// Labeling data configuration definition
type LabelingDataConfigurationArgs struct {
	// Resource Id of the data asset to perform labeling.
	DataId pulumi.StringPtrInput `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh pulumi.StringPtrInput `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationArgs
func (val *LabelingDataConfigurationArgs) Defaults() *LabelingDataConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		tmp.IncrementalDataRefresh = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelingDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return i.ToLabelingDataConfigurationOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput)
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput).ToLabelingDataConfigurationPtrOutputWithContext(ctx)
}

// LabelingDataConfigurationPtrInput is an input type that accepts LabelingDataConfigurationArgs, LabelingDataConfigurationPtr and LabelingDataConfigurationPtrOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationPtrInput` via:
//
//	        LabelingDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type LabelingDataConfigurationPtrInput interface {
	pulumi.Input

	ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput
	ToLabelingDataConfigurationPtrOutputWithContext(context.Context) LabelingDataConfigurationPtrOutput
}

type labelingDataConfigurationPtrType LabelingDataConfigurationArgs

func LabelingDataConfigurationPtr(v *LabelingDataConfigurationArgs) LabelingDataConfigurationPtrInput {
	return (*labelingDataConfigurationPtrType)(v)
}

func (*labelingDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingDataConfiguration) *LabelingDataConfiguration {
		return &v
	}).(LabelingDataConfigurationPtrOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) Elem() LabelingDataConfigurationOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) LabelingDataConfiguration {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfiguration
		return ret
	}).(LabelingDataConfigurationOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationPtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationPtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationResponse struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationResponse
func (val *LabelingDataConfigurationResponse) Defaults() *LabelingDataConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// Labeling data configuration definition
type LabelingDataConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutput() LabelingDataConfigurationResponseOutput {
	return o
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutputWithContext(ctx context.Context) LabelingDataConfigurationResponseOutput {
	return o
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponseOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponseOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutput() LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutputWithContext(ctx context.Context) LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) Elem() LabelingDataConfigurationResponseOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) LabelingDataConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfigurationResponse
		return ret
	}).(LabelingDataConfigurationResponseOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponsePtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponsePtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobType struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfiguration `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructions `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategory `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobType
func (val *LabelingJobType) Defaults() *LabelingJobType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// LabelingJobTypeInput is an input type that accepts LabelingJobTypeArgs and LabelingJobTypeOutput values.
// You can construct a concrete instance of `LabelingJobTypeInput` via:
//
//	LabelingJobTypeArgs{...}
type LabelingJobTypeInput interface {
	pulumi.Input

	ToLabelingJobTypeOutput() LabelingJobTypeOutput
	ToLabelingJobTypeOutputWithContext(context.Context) LabelingJobTypeOutput
}

// Labeling job definition
type LabelingJobTypeArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration LabelingDataConfigurationPtrInput `pulumi:"dataConfiguration"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions LabelingJobInstructionsPtrInput `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories LabelCategoryMapInput `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties pulumi.Input `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration pulumi.Input `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobTypeArgs
func (val *LabelingJobTypeArgs) Defaults() *LabelingJobTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (LabelingJobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return i.ToLabelingJobTypeOutputWithContext(context.Background())
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTypeOutput)
}

// Labeling job definition
type LabelingJobTypeOutput struct{ *pulumi.OutputState }

func (LabelingJobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return o
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobTypeOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobTypeOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Configuration of data used in the job.
func (o LabelingJobTypeOutput) DataConfiguration() LabelingDataConfigurationPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingDataConfiguration { return v.DataConfiguration }).(LabelingDataConfigurationPtrOutput)
}

// The asset description text.
func (o LabelingJobTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobTypeOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobTypeOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobTypeOutput) JobInstructions() LabelingJobInstructionsPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingJobInstructions { return v.JobInstructions }).(LabelingJobInstructionsPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobTypeOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobType) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobTypeOutput) LabelCategories() LabelCategoryMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]LabelCategory { return v.LabelCategories }).(LabelCategoryMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobTypeOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobTypeOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobTypeOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// The asset property dictionary.
func (o LabelingJobTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobTypeOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobTypeOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for image data
type LabelingJobImageProperties struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImageProperties
func (val *LabelingJobImageProperties) Defaults() *LabelingJobImageProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// LabelingJobImagePropertiesInput is an input type that accepts LabelingJobImagePropertiesArgs and LabelingJobImagePropertiesOutput values.
// You can construct a concrete instance of `LabelingJobImagePropertiesInput` via:
//
//	LabelingJobImagePropertiesArgs{...}
type LabelingJobImagePropertiesInput interface {
	pulumi.Input

	ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput
	ToLabelingJobImagePropertiesOutputWithContext(context.Context) LabelingJobImagePropertiesOutput
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesArgs struct {
	// Annotation type of image labeling job.
	AnnotationType pulumi.StringPtrInput `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType pulumi.StringInput `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImagePropertiesArgs
func (val *LabelingJobImagePropertiesArgs) Defaults() *LabelingJobImagePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		tmp.AnnotationType = pulumi.StringPtr("Classification")
	}
	return &tmp
}
func (LabelingJobImagePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImageProperties)(nil)).Elem()
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput {
	return i.ToLabelingJobImagePropertiesOutputWithContext(context.Background())
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesOutputWithContext(ctx context.Context) LabelingJobImagePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesOutput)
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return i.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesOutput).ToLabelingJobImagePropertiesPtrOutputWithContext(ctx)
}

// LabelingJobImagePropertiesPtrInput is an input type that accepts LabelingJobImagePropertiesArgs, LabelingJobImagePropertiesPtr and LabelingJobImagePropertiesPtrOutput values.
// You can construct a concrete instance of `LabelingJobImagePropertiesPtrInput` via:
//
//	        LabelingJobImagePropertiesArgs{...}
//
//	or:
//
//	        nil
type LabelingJobImagePropertiesPtrInput interface {
	pulumi.Input

	ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput
	ToLabelingJobImagePropertiesPtrOutputWithContext(context.Context) LabelingJobImagePropertiesPtrOutput
}

type labelingJobImagePropertiesPtrType LabelingJobImagePropertiesArgs

func LabelingJobImagePropertiesPtr(v *LabelingJobImagePropertiesArgs) LabelingJobImagePropertiesPtrInput {
	return (*labelingJobImagePropertiesPtrType)(v)
}

func (*labelingJobImagePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImageProperties)(nil)).Elem()
}

func (i *labelingJobImagePropertiesPtrType) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return i.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (i *labelingJobImagePropertiesPtrType) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesPtrOutput)
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImageProperties)(nil)).Elem()
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput {
	return o
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesOutputWithContext(ctx context.Context) LabelingJobImagePropertiesOutput {
	return o
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return o.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobImageProperties) *LabelingJobImageProperties {
		return &v
	}).(LabelingJobImagePropertiesPtrOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobImageProperties) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobImageProperties) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobImagePropertiesPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImageProperties)(nil)).Elem()
}

func (o LabelingJobImagePropertiesPtrOutput) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return o
}

func (o LabelingJobImagePropertiesPtrOutput) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return o
}

func (o LabelingJobImagePropertiesPtrOutput) Elem() LabelingJobImagePropertiesOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) LabelingJobImageProperties {
		if v != nil {
			return *v
		}
		var ret LabelingJobImageProperties
		return ret
	}).(LabelingJobImagePropertiesOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesPtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesResponse struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImagePropertiesResponse
func (val *LabelingJobImagePropertiesResponse) Defaults() *LabelingJobImagePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImagePropertiesResponse)(nil)).Elem()
}

func (o LabelingJobImagePropertiesResponseOutput) ToLabelingJobImagePropertiesResponseOutput() LabelingJobImagePropertiesResponseOutput {
	return o
}

func (o LabelingJobImagePropertiesResponseOutput) ToLabelingJobImagePropertiesResponseOutputWithContext(ctx context.Context) LabelingJobImagePropertiesResponseOutput {
	return o
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesResponseOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobImagePropertiesResponse) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobImagePropertiesResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobImagePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImagePropertiesResponse)(nil)).Elem()
}

func (o LabelingJobImagePropertiesResponsePtrOutput) ToLabelingJobImagePropertiesResponsePtrOutput() LabelingJobImagePropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobImagePropertiesResponsePtrOutput) ToLabelingJobImagePropertiesResponsePtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobImagePropertiesResponsePtrOutput) Elem() LabelingJobImagePropertiesResponseOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) LabelingJobImagePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobImagePropertiesResponse
		return ret
	}).(LabelingJobImagePropertiesResponseOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesResponsePtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructions struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// LabelingJobInstructionsInput is an input type that accepts LabelingJobInstructionsArgs and LabelingJobInstructionsOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsInput` via:
//
//	LabelingJobInstructionsArgs{...}
type LabelingJobInstructionsInput interface {
	pulumi.Input

	ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput
	ToLabelingJobInstructionsOutputWithContext(context.Context) LabelingJobInstructionsOutput
}

// Instructions for labeling job
type LabelingJobInstructionsArgs struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (LabelingJobInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return i.ToLabelingJobInstructionsOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput)
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput).ToLabelingJobInstructionsPtrOutputWithContext(ctx)
}

// LabelingJobInstructionsPtrInput is an input type that accepts LabelingJobInstructionsArgs, LabelingJobInstructionsPtr and LabelingJobInstructionsPtrOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsPtrInput` via:
//
//	        LabelingJobInstructionsArgs{...}
//
//	or:
//
//	        nil
type LabelingJobInstructionsPtrInput interface {
	pulumi.Input

	ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput
	ToLabelingJobInstructionsPtrOutputWithContext(context.Context) LabelingJobInstructionsPtrOutput
}

type labelingJobInstructionsPtrType LabelingJobInstructionsArgs

func LabelingJobInstructionsPtr(v *LabelingJobInstructionsArgs) LabelingJobInstructionsPtrInput {
	return (*labelingJobInstructionsPtrType)(v)
}

func (*labelingJobInstructionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobInstructions) *LabelingJobInstructions {
		return &v
	}).(LabelingJobInstructionsPtrOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructions) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) Elem() LabelingJobInstructionsOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) LabelingJobInstructions {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructions
		return ret
	}).(LabelingJobInstructionsOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsResponse struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// Instructions for labeling job
type LabelingJobInstructionsResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutput() LabelingJobInstructionsResponseOutput {
	return o
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutputWithContext(ctx context.Context) LabelingJobInstructionsResponseOutput {
	return o
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructionsResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutput() LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutputWithContext(ctx context.Context) LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) Elem() LabelingJobInstructionsResponseOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) LabelingJobInstructionsResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructionsResponse
		return ret
	}).(LabelingJobInstructionsResponseOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Created time of the job in UTC timezone.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfigurationResponse `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructionsResponse `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategoryResponse `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Progress metrics of the job.
	ProgressMetrics ProgressMetricsResponse `pulumi:"progressMetrics"`
	// Internal id of the job(Previously called project).
	ProjectId string `pulumi:"projectId"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the labeling job provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Status messages of the job.
	StatusMessages []StatusMessageResponse `pulumi:"statusMessages"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobResponse
func (val *LabelingJobResponse) Defaults() *LabelingJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Labeling job definition
type LabelingJobResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobResponse)(nil)).Elem()
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutput() LabelingJobResponseOutput {
	return o
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutputWithContext(ctx context.Context) LabelingJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Created time of the job in UTC timezone.
func (o LabelingJobResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Configuration of data used in the job.
func (o LabelingJobResponseOutput) DataConfiguration() LabelingDataConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingDataConfigurationResponse { return v.DataConfiguration }).(LabelingDataConfigurationResponsePtrOutput)
}

// The asset description text.
func (o LabelingJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobResponseOutput) JobInstructions() LabelingJobInstructionsResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingJobInstructionsResponse { return v.JobInstructions }).(LabelingJobInstructionsResponsePtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobResponseOutput) LabelCategories() LabelCategoryResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]LabelCategoryResponse { return v.LabelCategories }).(LabelCategoryResponseMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobResponseOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobResponseOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Progress metrics of the job.
func (o LabelingJobResponseOutput) ProgressMetrics() ProgressMetricsResponseOutput {
	return o.ApplyT(func(v LabelingJobResponse) ProgressMetricsResponse { return v.ProgressMetrics }).(ProgressMetricsResponseOutput)
}

// Internal id of the job(Previously called project).
func (o LabelingJobResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o LabelingJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the labeling job provisioning state.
func (o LabelingJobResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o LabelingJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Status messages of the job.
func (o LabelingJobResponseOutput) StatusMessages() StatusMessageResponseArrayOutput {
	return o.ApplyT(func(v LabelingJobResponse) []StatusMessageResponse { return v.StatusMessages }).(StatusMessageResponseArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextProperties struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextProperties
func (val *LabelingJobTextProperties) Defaults() *LabelingJobTextProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// LabelingJobTextPropertiesInput is an input type that accepts LabelingJobTextPropertiesArgs and LabelingJobTextPropertiesOutput values.
// You can construct a concrete instance of `LabelingJobTextPropertiesInput` via:
//
//	LabelingJobTextPropertiesArgs{...}
type LabelingJobTextPropertiesInput interface {
	pulumi.Input

	ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput
	ToLabelingJobTextPropertiesOutputWithContext(context.Context) LabelingJobTextPropertiesOutput
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesArgs struct {
	// Annotation type of text labeling job.
	AnnotationType pulumi.StringPtrInput `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType pulumi.StringInput `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextPropertiesArgs
func (val *LabelingJobTextPropertiesArgs) Defaults() *LabelingJobTextPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		tmp.AnnotationType = pulumi.StringPtr("Classification")
	}
	return &tmp
}
func (LabelingJobTextPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextProperties)(nil)).Elem()
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput {
	return i.ToLabelingJobTextPropertiesOutputWithContext(context.Background())
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesOutputWithContext(ctx context.Context) LabelingJobTextPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesOutput)
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return i.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesOutput).ToLabelingJobTextPropertiesPtrOutputWithContext(ctx)
}

// LabelingJobTextPropertiesPtrInput is an input type that accepts LabelingJobTextPropertiesArgs, LabelingJobTextPropertiesPtr and LabelingJobTextPropertiesPtrOutput values.
// You can construct a concrete instance of `LabelingJobTextPropertiesPtrInput` via:
//
//	        LabelingJobTextPropertiesArgs{...}
//
//	or:
//
//	        nil
type LabelingJobTextPropertiesPtrInput interface {
	pulumi.Input

	ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput
	ToLabelingJobTextPropertiesPtrOutputWithContext(context.Context) LabelingJobTextPropertiesPtrOutput
}

type labelingJobTextPropertiesPtrType LabelingJobTextPropertiesArgs

func LabelingJobTextPropertiesPtr(v *LabelingJobTextPropertiesArgs) LabelingJobTextPropertiesPtrInput {
	return (*labelingJobTextPropertiesPtrType)(v)
}

func (*labelingJobTextPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextProperties)(nil)).Elem()
}

func (i *labelingJobTextPropertiesPtrType) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return i.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (i *labelingJobTextPropertiesPtrType) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesPtrOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextProperties)(nil)).Elem()
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput {
	return o
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesOutputWithContext(ctx context.Context) LabelingJobTextPropertiesOutput {
	return o
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return o.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobTextProperties) *LabelingJobTextProperties {
		return &v
	}).(LabelingJobTextPropertiesPtrOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobTextProperties) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobTextProperties) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobTextPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextProperties)(nil)).Elem()
}

func (o LabelingJobTextPropertiesPtrOutput) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return o
}

func (o LabelingJobTextPropertiesPtrOutput) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return o
}

func (o LabelingJobTextPropertiesPtrOutput) Elem() LabelingJobTextPropertiesOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) LabelingJobTextProperties {
		if v != nil {
			return *v
		}
		var ret LabelingJobTextProperties
		return ret
	}).(LabelingJobTextPropertiesOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesPtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesResponse struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextPropertiesResponse
func (val *LabelingJobTextPropertiesResponse) Defaults() *LabelingJobTextPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextPropertiesResponse)(nil)).Elem()
}

func (o LabelingJobTextPropertiesResponseOutput) ToLabelingJobTextPropertiesResponseOutput() LabelingJobTextPropertiesResponseOutput {
	return o
}

func (o LabelingJobTextPropertiesResponseOutput) ToLabelingJobTextPropertiesResponseOutputWithContext(ctx context.Context) LabelingJobTextPropertiesResponseOutput {
	return o
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesResponseOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobTextPropertiesResponse) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobTextPropertiesResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobTextPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextPropertiesResponse)(nil)).Elem()
}

func (o LabelingJobTextPropertiesResponsePtrOutput) ToLabelingJobTextPropertiesResponsePtrOutput() LabelingJobTextPropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobTextPropertiesResponsePtrOutput) ToLabelingJobTextPropertiesResponsePtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobTextPropertiesResponsePtrOutput) Elem() LabelingJobTextPropertiesResponseOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) LabelingJobTextPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobTextPropertiesResponse
		return ret
	}).(LabelingJobTextPropertiesResponseOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesResponsePtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

type LakeHouseArtifact struct {
	// [Required] OneLake artifact name
	ArtifactName string `pulumi:"artifactName"`
	// Enum to determine OneLake artifact type.
	// Expected value is 'LakeHouse'.
	ArtifactType string `pulumi:"artifactType"`
}

// LakeHouseArtifactInput is an input type that accepts LakeHouseArtifactArgs and LakeHouseArtifactOutput values.
// You can construct a concrete instance of `LakeHouseArtifactInput` via:
//
//	LakeHouseArtifactArgs{...}
type LakeHouseArtifactInput interface {
	pulumi.Input

	ToLakeHouseArtifactOutput() LakeHouseArtifactOutput
	ToLakeHouseArtifactOutputWithContext(context.Context) LakeHouseArtifactOutput
}

type LakeHouseArtifactArgs struct {
	// [Required] OneLake artifact name
	ArtifactName pulumi.StringInput `pulumi:"artifactName"`
	// Enum to determine OneLake artifact type.
	// Expected value is 'LakeHouse'.
	ArtifactType pulumi.StringInput `pulumi:"artifactType"`
}

func (LakeHouseArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseArtifact)(nil)).Elem()
}

func (i LakeHouseArtifactArgs) ToLakeHouseArtifactOutput() LakeHouseArtifactOutput {
	return i.ToLakeHouseArtifactOutputWithContext(context.Background())
}

func (i LakeHouseArtifactArgs) ToLakeHouseArtifactOutputWithContext(ctx context.Context) LakeHouseArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LakeHouseArtifactOutput)
}

type LakeHouseArtifactOutput struct{ *pulumi.OutputState }

func (LakeHouseArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseArtifact)(nil)).Elem()
}

func (o LakeHouseArtifactOutput) ToLakeHouseArtifactOutput() LakeHouseArtifactOutput {
	return o
}

func (o LakeHouseArtifactOutput) ToLakeHouseArtifactOutputWithContext(ctx context.Context) LakeHouseArtifactOutput {
	return o
}

// [Required] OneLake artifact name
func (o LakeHouseArtifactOutput) ArtifactName() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseArtifact) string { return v.ArtifactName }).(pulumi.StringOutput)
}

// Enum to determine OneLake artifact type.
// Expected value is 'LakeHouse'.
func (o LakeHouseArtifactOutput) ArtifactType() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseArtifact) string { return v.ArtifactType }).(pulumi.StringOutput)
}

type LakeHouseArtifactResponse struct {
	// [Required] OneLake artifact name
	ArtifactName string `pulumi:"artifactName"`
	// Enum to determine OneLake artifact type.
	// Expected value is 'LakeHouse'.
	ArtifactType string `pulumi:"artifactType"`
}

type LakeHouseArtifactResponseOutput struct{ *pulumi.OutputState }

func (LakeHouseArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LakeHouseArtifactResponse)(nil)).Elem()
}

func (o LakeHouseArtifactResponseOutput) ToLakeHouseArtifactResponseOutput() LakeHouseArtifactResponseOutput {
	return o
}

func (o LakeHouseArtifactResponseOutput) ToLakeHouseArtifactResponseOutputWithContext(ctx context.Context) LakeHouseArtifactResponseOutput {
	return o
}

// [Required] OneLake artifact name
func (o LakeHouseArtifactResponseOutput) ArtifactName() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseArtifactResponse) string { return v.ArtifactName }).(pulumi.StringOutput)
}

// Enum to determine OneLake artifact type.
// Expected value is 'LakeHouse'.
func (o LakeHouseArtifactResponseOutput) ArtifactType() pulumi.StringOutput {
	return o.ApplyT(func(v LakeHouseArtifactResponse) string { return v.ArtifactType }).(pulumi.StringOutput)
}

type ListNotebookKeysResultResponse struct {
	// The primary access key of the Notebook
	PrimaryAccessKey string `pulumi:"primaryAccessKey"`
	// The secondary access key of the Notebook
	SecondaryAccessKey string `pulumi:"secondaryAccessKey"`
}

type ListNotebookKeysResultResponseOutput struct{ *pulumi.OutputState }

func (ListNotebookKeysResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListNotebookKeysResultResponse)(nil)).Elem()
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutput() ListNotebookKeysResultResponseOutput {
	return o
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutputWithContext(ctx context.Context) ListNotebookKeysResultResponseOutput {
	return o
}

// The primary access key of the Notebook
func (o ListNotebookKeysResultResponseOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

// The secondary access key of the Notebook
func (o ListNotebookKeysResultResponseOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

type ListNotebookKeysResultResponsePtrOutput struct{ *pulumi.OutputState }

func (ListNotebookKeysResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListNotebookKeysResultResponse)(nil)).Elem()
}

func (o ListNotebookKeysResultResponsePtrOutput) ToListNotebookKeysResultResponsePtrOutput() ListNotebookKeysResultResponsePtrOutput {
	return o
}

func (o ListNotebookKeysResultResponsePtrOutput) ToListNotebookKeysResultResponsePtrOutputWithContext(ctx context.Context) ListNotebookKeysResultResponsePtrOutput {
	return o
}

func (o ListNotebookKeysResultResponsePtrOutput) Elem() ListNotebookKeysResultResponseOutput {
	return o.ApplyT(func(v *ListNotebookKeysResultResponse) ListNotebookKeysResultResponse {
		if v != nil {
			return *v
		}
		var ret ListNotebookKeysResultResponse
		return ret
	}).(ListNotebookKeysResultResponseOutput)
}

// The primary access key of the Notebook
func (o ListNotebookKeysResultResponsePtrOutput) PrimaryAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListNotebookKeysResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrimaryAccessKey
	}).(pulumi.StringPtrOutput)
}

// The secondary access key of the Notebook
func (o ListNotebookKeysResultResponsePtrOutput) SecondaryAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListNotebookKeysResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SecondaryAccessKey
	}).(pulumi.StringPtrOutput)
}

// Literal input type.
type LiteralJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// LiteralJobInputInput is an input type that accepts LiteralJobInputArgs and LiteralJobInputOutput values.
// You can construct a concrete instance of `LiteralJobInputInput` via:
//
//	LiteralJobInputArgs{...}
type LiteralJobInputInput interface {
	pulumi.Input

	ToLiteralJobInputOutput() LiteralJobInputOutput
	ToLiteralJobInputOutputWithContext(context.Context) LiteralJobInputOutput
}

// Literal input type.
type LiteralJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LiteralJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return i.ToLiteralJobInputOutputWithContext(context.Background())
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteralJobInputOutput)
}

func (i LiteralJobInputArgs) ToLiteralJobInputPtrOutput() LiteralJobInputPtrOutput {
	return i.ToLiteralJobInputPtrOutputWithContext(context.Background())
}

func (i LiteralJobInputArgs) ToLiteralJobInputPtrOutputWithContext(ctx context.Context) LiteralJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteralJobInputOutput).ToLiteralJobInputPtrOutputWithContext(ctx)
}

// LiteralJobInputPtrInput is an input type that accepts LiteralJobInputArgs, LiteralJobInputPtr and LiteralJobInputPtrOutput values.
// You can construct a concrete instance of `LiteralJobInputPtrInput` via:
//
//	        LiteralJobInputArgs{...}
//
//	or:
//
//	        nil
type LiteralJobInputPtrInput interface {
	pulumi.Input

	ToLiteralJobInputPtrOutput() LiteralJobInputPtrOutput
	ToLiteralJobInputPtrOutputWithContext(context.Context) LiteralJobInputPtrOutput
}

type literalJobInputPtrType LiteralJobInputArgs

func LiteralJobInputPtr(v *LiteralJobInputArgs) LiteralJobInputPtrInput {
	return (*literalJobInputPtrType)(v)
}

func (*literalJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteralJobInput)(nil)).Elem()
}

func (i *literalJobInputPtrType) ToLiteralJobInputPtrOutput() LiteralJobInputPtrOutput {
	return i.ToLiteralJobInputPtrOutputWithContext(context.Background())
}

func (i *literalJobInputPtrType) ToLiteralJobInputPtrOutputWithContext(ctx context.Context) LiteralJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteralJobInputPtrOutput)
}

// Literal input type.
type LiteralJobInputOutput struct{ *pulumi.OutputState }

func (LiteralJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return o
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return o
}

func (o LiteralJobInputOutput) ToLiteralJobInputPtrOutput() LiteralJobInputPtrOutput {
	return o.ToLiteralJobInputPtrOutputWithContext(context.Background())
}

func (o LiteralJobInputOutput) ToLiteralJobInputPtrOutputWithContext(ctx context.Context) LiteralJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LiteralJobInput) *LiteralJobInput {
		return &v
	}).(LiteralJobInputPtrOutput)
}

// Description for the input.
func (o LiteralJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.Value }).(pulumi.StringOutput)
}

type LiteralJobInputPtrOutput struct{ *pulumi.OutputState }

func (LiteralJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteralJobInput)(nil)).Elem()
}

func (o LiteralJobInputPtrOutput) ToLiteralJobInputPtrOutput() LiteralJobInputPtrOutput {
	return o
}

func (o LiteralJobInputPtrOutput) ToLiteralJobInputPtrOutputWithContext(ctx context.Context) LiteralJobInputPtrOutput {
	return o
}

func (o LiteralJobInputPtrOutput) Elem() LiteralJobInputOutput {
	return o.ApplyT(func(v *LiteralJobInput) LiteralJobInput {
		if v != nil {
			return *v
		}
		var ret LiteralJobInput
		return ret
	}).(LiteralJobInputOutput)
}

// Description for the input.
func (o LiteralJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Literal input type.
type LiteralJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// Literal input type.
type LiteralJobInputResponseOutput struct{ *pulumi.OutputState }

func (LiteralJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInputResponse)(nil)).Elem()
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutput() LiteralJobInputResponseOutput {
	return o
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutputWithContext(ctx context.Context) LiteralJobInputResponseOutput {
	return o
}

// Description for the input.
func (o LiteralJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.Value }).(pulumi.StringOutput)
}

type LiteralJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (LiteralJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiteralJobInputResponse)(nil)).Elem()
}

func (o LiteralJobInputResponsePtrOutput) ToLiteralJobInputResponsePtrOutput() LiteralJobInputResponsePtrOutput {
	return o
}

func (o LiteralJobInputResponsePtrOutput) ToLiteralJobInputResponsePtrOutputWithContext(ctx context.Context) LiteralJobInputResponsePtrOutput {
	return o
}

func (o LiteralJobInputResponsePtrOutput) Elem() LiteralJobInputResponseOutput {
	return o.ApplyT(func(v *LiteralJobInputResponse) LiteralJobInputResponse {
		if v != nil {
			return *v
		}
		var ret LiteralJobInputResponse
		return ret
	}).(LiteralJobInputResponseOutput)
}

// Description for the input.
func (o LiteralJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiteralJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabled struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// MLAssistConfigurationDisabledInput is an input type that accepts MLAssistConfigurationDisabledArgs and MLAssistConfigurationDisabledOutput values.
// You can construct a concrete instance of `MLAssistConfigurationDisabledInput` via:
//
//	MLAssistConfigurationDisabledArgs{...}
type MLAssistConfigurationDisabledInput interface {
	pulumi.Input

	ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput
	ToMLAssistConfigurationDisabledOutputWithContext(context.Context) MLAssistConfigurationDisabledOutput
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledArgs struct {
	// Expected value is 'Disabled'.
	MlAssist pulumi.StringInput `pulumi:"mlAssist"`
}

func (MLAssistConfigurationDisabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabled)(nil)).Elem()
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput {
	return i.ToMLAssistConfigurationDisabledOutputWithContext(context.Background())
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledOutput)
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return i.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledOutput).ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx)
}

// MLAssistConfigurationDisabledPtrInput is an input type that accepts MLAssistConfigurationDisabledArgs, MLAssistConfigurationDisabledPtr and MLAssistConfigurationDisabledPtrOutput values.
// You can construct a concrete instance of `MLAssistConfigurationDisabledPtrInput` via:
//
//	        MLAssistConfigurationDisabledArgs{...}
//
//	or:
//
//	        nil
type MLAssistConfigurationDisabledPtrInput interface {
	pulumi.Input

	ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput
	ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Context) MLAssistConfigurationDisabledPtrOutput
}

type mlassistConfigurationDisabledPtrType MLAssistConfigurationDisabledArgs

func MLAssistConfigurationDisabledPtr(v *MLAssistConfigurationDisabledArgs) MLAssistConfigurationDisabledPtrInput {
	return (*mlassistConfigurationDisabledPtrType)(v)
}

func (*mlassistConfigurationDisabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabled)(nil)).Elem()
}

func (i *mlassistConfigurationDisabledPtrType) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return i.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (i *mlassistConfigurationDisabledPtrType) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabled)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput {
	return o
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledOutput {
	return o
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return o.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLAssistConfigurationDisabled) *MLAssistConfigurationDisabled {
		return &v
	}).(MLAssistConfigurationDisabledPtrOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationDisabled) string { return v.MlAssist }).(pulumi.StringOutput)
}

type MLAssistConfigurationDisabledPtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabled)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledPtrOutput) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledPtrOutput) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledPtrOutput) Elem() MLAssistConfigurationDisabledOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabled) MLAssistConfigurationDisabled {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationDisabled
		return ret
	}).(MLAssistConfigurationDisabledOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledPtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabled) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledResponse struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledResponseOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledResponseOutput) ToMLAssistConfigurationDisabledResponseOutput() MLAssistConfigurationDisabledResponseOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponseOutput) ToMLAssistConfigurationDisabledResponseOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledResponseOutput {
	return o
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledResponseOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationDisabledResponse) string { return v.MlAssist }).(pulumi.StringOutput)
}

type MLAssistConfigurationDisabledResponsePtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) ToMLAssistConfigurationDisabledResponsePtrOutput() MLAssistConfigurationDisabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) ToMLAssistConfigurationDisabledResponsePtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) Elem() MLAssistConfigurationDisabledResponseOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabledResponse) MLAssistConfigurationDisabledResponse {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationDisabledResponse
		return ret
	}).(MLAssistConfigurationDisabledResponseOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledResponsePtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabled struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

// MLAssistConfigurationEnabledInput is an input type that accepts MLAssistConfigurationEnabledArgs and MLAssistConfigurationEnabledOutput values.
// You can construct a concrete instance of `MLAssistConfigurationEnabledInput` via:
//
//	MLAssistConfigurationEnabledArgs{...}
type MLAssistConfigurationEnabledInput interface {
	pulumi.Input

	ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput
	ToMLAssistConfigurationEnabledOutputWithContext(context.Context) MLAssistConfigurationEnabledOutput
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledArgs struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding pulumi.StringInput `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist pulumi.StringInput `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding pulumi.StringInput `pulumi:"trainingComputeBinding"`
}

func (MLAssistConfigurationEnabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabled)(nil)).Elem()
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput {
	return i.ToMLAssistConfigurationEnabledOutputWithContext(context.Background())
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledOutput)
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return i.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledOutput).ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx)
}

// MLAssistConfigurationEnabledPtrInput is an input type that accepts MLAssistConfigurationEnabledArgs, MLAssistConfigurationEnabledPtr and MLAssistConfigurationEnabledPtrOutput values.
// You can construct a concrete instance of `MLAssistConfigurationEnabledPtrInput` via:
//
//	        MLAssistConfigurationEnabledArgs{...}
//
//	or:
//
//	        nil
type MLAssistConfigurationEnabledPtrInput interface {
	pulumi.Input

	ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput
	ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Context) MLAssistConfigurationEnabledPtrOutput
}

type mlassistConfigurationEnabledPtrType MLAssistConfigurationEnabledArgs

func MLAssistConfigurationEnabledPtr(v *MLAssistConfigurationEnabledArgs) MLAssistConfigurationEnabledPtrInput {
	return (*mlassistConfigurationEnabledPtrType)(v)
}

func (*mlassistConfigurationEnabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabled)(nil)).Elem()
}

func (i *mlassistConfigurationEnabledPtrType) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return i.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (i *mlassistConfigurationEnabledPtrType) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabled)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput {
	return o
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledOutput {
	return o
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return o.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLAssistConfigurationEnabled) *MLAssistConfigurationEnabled {
		return &v
	}).(MLAssistConfigurationEnabledPtrOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledOutput) InferencingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.InferencingComputeBinding }).(pulumi.StringOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.MlAssist }).(pulumi.StringOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledOutput) TrainingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.TrainingComputeBinding }).(pulumi.StringOutput)
}

type MLAssistConfigurationEnabledPtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabled)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledPtrOutput) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledPtrOutput) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledPtrOutput) Elem() MLAssistConfigurationEnabledOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) MLAssistConfigurationEnabled {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationEnabled
		return ret
	}).(MLAssistConfigurationEnabledOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledPtrOutput) InferencingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.InferencingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledPtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledPtrOutput) TrainingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.TrainingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledResponse struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledResponseOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledResponseOutput) ToMLAssistConfigurationEnabledResponseOutput() MLAssistConfigurationEnabledResponseOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponseOutput) ToMLAssistConfigurationEnabledResponseOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledResponseOutput {
	return o
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledResponseOutput) InferencingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.InferencingComputeBinding }).(pulumi.StringOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledResponseOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.MlAssist }).(pulumi.StringOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledResponseOutput) TrainingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.TrainingComputeBinding }).(pulumi.StringOutput)
}

type MLAssistConfigurationEnabledResponsePtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) ToMLAssistConfigurationEnabledResponsePtrOutput() MLAssistConfigurationEnabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) ToMLAssistConfigurationEnabledResponsePtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) Elem() MLAssistConfigurationEnabledResponseOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) MLAssistConfigurationEnabledResponse {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationEnabledResponse
		return ret
	}).(MLAssistConfigurationEnabledResponseOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledResponsePtrOutput) InferencingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InferencingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledResponsePtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledResponsePtrOutput) TrainingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrainingComputeBinding
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInput
func (val *MLFlowModelJobInput) Defaults() *MLFlowModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobInputInput is an input type that accepts MLFlowModelJobInputArgs and MLFlowModelJobInputOutput values.
// You can construct a concrete instance of `MLFlowModelJobInputInput` via:
//
//	MLFlowModelJobInputArgs{...}
type MLFlowModelJobInputInput interface {
	pulumi.Input

	ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput
	ToMLFlowModelJobInputOutputWithContext(context.Context) MLFlowModelJobInputOutput
}

type MLFlowModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputArgs
func (val *MLFlowModelJobInputArgs) Defaults() *MLFlowModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLFlowModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return i.ToMLFlowModelJobInputOutputWithContext(context.Background())
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputOutput)
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return i.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputOutput).ToMLFlowModelJobInputPtrOutputWithContext(ctx)
}

// MLFlowModelJobInputPtrInput is an input type that accepts MLFlowModelJobInputArgs, MLFlowModelJobInputPtr and MLFlowModelJobInputPtrOutput values.
// You can construct a concrete instance of `MLFlowModelJobInputPtrInput` via:
//
//	        MLFlowModelJobInputArgs{...}
//
//	or:
//
//	        nil
type MLFlowModelJobInputPtrInput interface {
	pulumi.Input

	ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput
	ToMLFlowModelJobInputPtrOutputWithContext(context.Context) MLFlowModelJobInputPtrOutput
}

type mlflowModelJobInputPtrType MLFlowModelJobInputArgs

func MLFlowModelJobInputPtr(v *MLFlowModelJobInputArgs) MLFlowModelJobInputPtrInput {
	return (*mlflowModelJobInputPtrType)(v)
}

func (*mlflowModelJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInput)(nil)).Elem()
}

func (i *mlflowModelJobInputPtrType) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return i.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (i *mlflowModelJobInputPtrType) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputPtrOutput)
}

type MLFlowModelJobInputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return o
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return o
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return o.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLFlowModelJobInput) *MLFlowModelJobInput {
		return &v
	}).(MLFlowModelJobInputPtrOutput)
}

// Description for the input.
func (o MLFlowModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLFlowModelJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobInputPtrOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInput)(nil)).Elem()
}

func (o MLFlowModelJobInputPtrOutput) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return o
}

func (o MLFlowModelJobInputPtrOutput) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return o
}

func (o MLFlowModelJobInputPtrOutput) Elem() MLFlowModelJobInputOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) MLFlowModelJobInput {
		if v != nil {
			return *v
		}
		var ret MLFlowModelJobInput
		return ret
	}).(MLFlowModelJobInputOutput)
}

// Description for the input.
func (o MLFlowModelJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLFlowModelJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputResponse
func (val *MLFlowModelJobInputResponse) Defaults() *MLFlowModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInputResponse)(nil)).Elem()
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutput() MLFlowModelJobInputResponseOutput {
	return o
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutputWithContext(ctx context.Context) MLFlowModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLFlowModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLFlowModelJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInputResponse)(nil)).Elem()
}

func (o MLFlowModelJobInputResponsePtrOutput) ToMLFlowModelJobInputResponsePtrOutput() MLFlowModelJobInputResponsePtrOutput {
	return o
}

func (o MLFlowModelJobInputResponsePtrOutput) ToMLFlowModelJobInputResponsePtrOutputWithContext(ctx context.Context) MLFlowModelJobInputResponsePtrOutput {
	return o
}

func (o MLFlowModelJobInputResponsePtrOutput) Elem() MLFlowModelJobInputResponseOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) MLFlowModelJobInputResponse {
		if v != nil {
			return *v
		}
		var ret MLFlowModelJobInputResponse
		return ret
	}).(MLFlowModelJobInputResponseOutput)
}

// Description for the input.
func (o MLFlowModelJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLFlowModelJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutput
func (val *MLFlowModelJobOutput) Defaults() *MLFlowModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobOutputInput is an input type that accepts MLFlowModelJobOutputArgs and MLFlowModelJobOutputOutput values.
// You can construct a concrete instance of `MLFlowModelJobOutputInput` via:
//
//	MLFlowModelJobOutputArgs{...}
type MLFlowModelJobOutputInput interface {
	pulumi.Input

	ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput
	ToMLFlowModelJobOutputOutputWithContext(context.Context) MLFlowModelJobOutputOutput
}

type MLFlowModelJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputArgs
func (val *MLFlowModelJobOutputArgs) Defaults() *MLFlowModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLFlowModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return i.ToMLFlowModelJobOutputOutputWithContext(context.Background())
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobOutputOutput)
}

type MLFlowModelJobOutputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return o
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return o
}

// Output Asset Name.
func (o MLFlowModelJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o MLFlowModelJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o MLFlowModelJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o MLFlowModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o MLFlowModelJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLFlowModelJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputResponse
func (val *MLFlowModelJobOutputResponse) Defaults() *MLFlowModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutputResponse)(nil)).Elem()
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutput() MLFlowModelJobOutputResponseOutput {
	return o
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutputWithContext(ctx context.Context) MLFlowModelJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o MLFlowModelJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o MLFlowModelJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o MLFlowModelJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o MLFlowModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o MLFlowModelJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// MLTable data definition
type MLTableData struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableData
func (val *MLTableData) Defaults() *MLTableData {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTableDataInput is an input type that accepts MLTableDataArgs and MLTableDataOutput values.
// You can construct a concrete instance of `MLTableDataInput` via:
//
//	MLTableDataArgs{...}
type MLTableDataInput interface {
	pulumi.Input

	ToMLTableDataOutput() MLTableDataOutput
	ToMLTableDataOutputWithContext(context.Context) MLTableDataOutput
}

// MLTable data definition
type MLTableDataArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris pulumi.StringArrayInput `pulumi:"referencedUris"`
	// Stage in the data lifecycle assigned to this data asset
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataArgs
func (val *MLTableDataArgs) Defaults() *MLTableDataArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (MLTableDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (i MLTableDataArgs) ToMLTableDataOutput() MLTableDataOutput {
	return i.ToMLTableDataOutputWithContext(context.Background())
}

func (i MLTableDataArgs) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableDataOutput)
}

// MLTable data definition
type MLTableDataOutput struct{ *pulumi.OutputState }

func (MLTableDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (o MLTableDataOutput) ToMLTableDataOutput() MLTableDataOutput {
	return o
}

func (o MLTableDataOutput) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o MLTableDataOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v MLTableData) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'mltable'.
func (o MLTableDataOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o MLTableDataOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableData) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o MLTableDataOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v MLTableData) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o MLTableDataOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o MLTableDataOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableData) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o MLTableDataOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableData) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MLTable data definition
type MLTableDataResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataResponse
func (val *MLTableDataResponse) Defaults() *MLTableDataResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTable data definition
type MLTableDataResponseOutput struct{ *pulumi.OutputState }

func (MLTableDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableDataResponse)(nil)).Elem()
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutput() MLTableDataResponseOutput {
	return o
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutputWithContext(ctx context.Context) MLTableDataResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o MLTableDataResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'mltable'.
func (o MLTableDataResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o MLTableDataResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o MLTableDataResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o MLTableDataResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o MLTableDataResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataResponseOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableDataResponse) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o MLTableDataResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type MLTableJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInput
func (val *MLTableJobInput) Defaults() *MLTableJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobInputInput is an input type that accepts MLTableJobInputArgs and MLTableJobInputOutput values.
// You can construct a concrete instance of `MLTableJobInputInput` via:
//
//	MLTableJobInputArgs{...}
type MLTableJobInputInput interface {
	pulumi.Input

	ToMLTableJobInputOutput() MLTableJobInputOutput
	ToMLTableJobInputOutputWithContext(context.Context) MLTableJobInputOutput
}

type MLTableJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputArgs
func (val *MLTableJobInputArgs) Defaults() *MLTableJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLTableJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return i.ToMLTableJobInputOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput)
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput).ToMLTableJobInputPtrOutputWithContext(ctx)
}

// MLTableJobInputPtrInput is an input type that accepts MLTableJobInputArgs, MLTableJobInputPtr and MLTableJobInputPtrOutput values.
// You can construct a concrete instance of `MLTableJobInputPtrInput` via:
//
//	        MLTableJobInputArgs{...}
//
//	or:
//
//	        nil
type MLTableJobInputPtrInput interface {
	pulumi.Input

	ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput
	ToMLTableJobInputPtrOutputWithContext(context.Context) MLTableJobInputPtrOutput
}

type mltableJobInputPtrType MLTableJobInputArgs

func MLTableJobInputPtr(v *MLTableJobInputArgs) MLTableJobInputPtrInput {
	return (*mltableJobInputPtrType)(v)
}

func (*mltableJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputPtrOutput)
}

type MLTableJobInputOutput struct{ *pulumi.OutputState }

func (MLTableJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLTableJobInput) *MLTableJobInput {
		return &v
	}).(MLTableJobInputPtrOutput)
}

// Description for the input.
func (o MLTableJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLTableJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputPtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) Elem() MLTableJobInputOutput {
	return o.ApplyT(func(v *MLTableJobInput) MLTableJobInput {
		if v != nil {
			return *v
		}
		var ret MLTableJobInput
		return ret
	}).(MLTableJobInputOutput)
}

// Description for the input.
func (o MLTableJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLTableJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputResponse
func (val *MLTableJobInputResponse) Defaults() *MLTableJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutput() MLTableJobInputResponseOutput {
	return o
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutputWithContext(ctx context.Context) MLTableJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLTableJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLTableJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutput() MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutputWithContext(ctx context.Context) MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) Elem() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) MLTableJobInputResponse {
		if v != nil {
			return *v
		}
		var ret MLTableJobInputResponse
		return ret
	}).(MLTableJobInputResponseOutput)
}

// Description for the input.
func (o MLTableJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o MLTableJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutput
func (val *MLTableJobOutput) Defaults() *MLTableJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobOutputInput is an input type that accepts MLTableJobOutputArgs and MLTableJobOutputOutput values.
// You can construct a concrete instance of `MLTableJobOutputInput` via:
//
//	MLTableJobOutputArgs{...}
type MLTableJobOutputInput interface {
	pulumi.Input

	ToMLTableJobOutputOutput() MLTableJobOutputOutput
	ToMLTableJobOutputOutputWithContext(context.Context) MLTableJobOutputOutput
}

type MLTableJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputArgs
func (val *MLTableJobOutputArgs) Defaults() *MLTableJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLTableJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return i.ToMLTableJobOutputOutputWithContext(context.Background())
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobOutputOutput)
}

type MLTableJobOutputOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return o
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return o
}

// Output Asset Name.
func (o MLTableJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o MLTableJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o MLTableJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o MLTableJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mltable'.
func (o MLTableJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o MLTableJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLTableJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputResponse
func (val *MLTableJobOutputResponse) Defaults() *MLTableJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutputResponse)(nil)).Elem()
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutput() MLTableJobOutputResponseOutput {
	return o
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutputWithContext(ctx context.Context) MLTableJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o MLTableJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o MLTableJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o MLTableJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o MLTableJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mltable'.
func (o MLTableJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o MLTableJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Managed compute identity definition.
type ManagedComputeIdentity struct {
	// Monitor compute identity type enum.
	// Expected value is 'ManagedIdentity'.
	ComputeIdentityType string `pulumi:"computeIdentityType"`
	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentity `pulumi:"identity"`
}

// ManagedComputeIdentityInput is an input type that accepts ManagedComputeIdentityArgs and ManagedComputeIdentityOutput values.
// You can construct a concrete instance of `ManagedComputeIdentityInput` via:
//
//	ManagedComputeIdentityArgs{...}
type ManagedComputeIdentityInput interface {
	pulumi.Input

	ToManagedComputeIdentityOutput() ManagedComputeIdentityOutput
	ToManagedComputeIdentityOutputWithContext(context.Context) ManagedComputeIdentityOutput
}

// Managed compute identity definition.
type ManagedComputeIdentityArgs struct {
	// Monitor compute identity type enum.
	// Expected value is 'ManagedIdentity'.
	ComputeIdentityType pulumi.StringInput `pulumi:"computeIdentityType"`
	// Managed service identity (system assigned and/or user assigned identities)
	Identity ManagedServiceIdentityPtrInput `pulumi:"identity"`
}

func (ManagedComputeIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedComputeIdentity)(nil)).Elem()
}

func (i ManagedComputeIdentityArgs) ToManagedComputeIdentityOutput() ManagedComputeIdentityOutput {
	return i.ToManagedComputeIdentityOutputWithContext(context.Background())
}

func (i ManagedComputeIdentityArgs) ToManagedComputeIdentityOutputWithContext(ctx context.Context) ManagedComputeIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedComputeIdentityOutput)
}

// Managed compute identity definition.
type ManagedComputeIdentityOutput struct{ *pulumi.OutputState }

func (ManagedComputeIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedComputeIdentity)(nil)).Elem()
}

func (o ManagedComputeIdentityOutput) ToManagedComputeIdentityOutput() ManagedComputeIdentityOutput {
	return o
}

func (o ManagedComputeIdentityOutput) ToManagedComputeIdentityOutputWithContext(ctx context.Context) ManagedComputeIdentityOutput {
	return o
}

// Monitor compute identity type enum.
// Expected value is 'ManagedIdentity'.
func (o ManagedComputeIdentityOutput) ComputeIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedComputeIdentity) string { return v.ComputeIdentityType }).(pulumi.StringOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
func (o ManagedComputeIdentityOutput) Identity() ManagedServiceIdentityPtrOutput {
	return o.ApplyT(func(v ManagedComputeIdentity) *ManagedServiceIdentity { return v.Identity }).(ManagedServiceIdentityPtrOutput)
}

// Managed compute identity definition.
type ManagedComputeIdentityResponse struct {
	// Monitor compute identity type enum.
	// Expected value is 'ManagedIdentity'.
	ComputeIdentityType string `pulumi:"computeIdentityType"`
	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
}

// Managed compute identity definition.
type ManagedComputeIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedComputeIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedComputeIdentityResponse)(nil)).Elem()
}

func (o ManagedComputeIdentityResponseOutput) ToManagedComputeIdentityResponseOutput() ManagedComputeIdentityResponseOutput {
	return o
}

func (o ManagedComputeIdentityResponseOutput) ToManagedComputeIdentityResponseOutputWithContext(ctx context.Context) ManagedComputeIdentityResponseOutput {
	return o
}

// Monitor compute identity type enum.
// Expected value is 'ManagedIdentity'.
func (o ManagedComputeIdentityResponseOutput) ComputeIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedComputeIdentityResponse) string { return v.ComputeIdentityType }).(pulumi.StringOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
func (o ManagedComputeIdentityResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v ManagedComputeIdentityResponse) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// Managed identity configuration.
type ManagedIdentity struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//	ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// Managed identity configuration.
type ManagedIdentityArgs struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//	        ManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentity) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedIdentity
		return ret
	}).(ManagedIdentityOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string                             `pulumi:"category"`
	Credentials    *WorkspaceConnectionManagedIdentity `pulumi:"credentials"`
	ExpiryTime     *string                             `pulumi:"expiryTime"`
	IsSharedToAll  *bool                               `pulumi:"isSharedToAll"`
	Metadata       interface{}                         `pulumi:"metadata"`
	SharedUserList []string                            `pulumi:"sharedUserList"`
	Target         *string                             `pulumi:"target"`
}

// ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs and ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs{...}
type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput
	ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput                      `pulumi:"category"`
	Credentials    WorkspaceConnectionManagedIdentityPtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput                      `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput                        `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                               `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput                    `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput                      `pulumi:"target"`
}

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionManagedIdentityPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionManagedIdentity {
		return v.Credentials
	}).(WorkspaceConnectionManagedIdentityPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                     `pulumi:"category"`
	CreatedByWorkspaceArmId string                                      `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionManagedIdentityResponse `pulumi:"credentials"`
	ExpiryTime              *string                                     `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) string {
		return v.CreatedByWorkspaceArmId
	}).(pulumi.StringOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionManagedIdentityResponse {
		return v.Credentials
	}).(WorkspaceConnectionManagedIdentityResponsePtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityResponse struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// Managed identity configuration.
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityResponse
		return ret
	}).(ManagedIdentityResponseOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatus struct {
	SparkReady *bool `pulumi:"sparkReady"`
	// Status for the managed network of a machine learning workspace.
	Status *string `pulumi:"status"`
}

// ManagedNetworkProvisionStatusInput is an input type that accepts ManagedNetworkProvisionStatusArgs and ManagedNetworkProvisionStatusOutput values.
// You can construct a concrete instance of `ManagedNetworkProvisionStatusInput` via:
//
//	ManagedNetworkProvisionStatusArgs{...}
type ManagedNetworkProvisionStatusInput interface {
	pulumi.Input

	ToManagedNetworkProvisionStatusOutput() ManagedNetworkProvisionStatusOutput
	ToManagedNetworkProvisionStatusOutputWithContext(context.Context) ManagedNetworkProvisionStatusOutput
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatusArgs struct {
	SparkReady pulumi.BoolPtrInput `pulumi:"sparkReady"`
	// Status for the managed network of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ManagedNetworkProvisionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkProvisionStatus)(nil)).Elem()
}

func (i ManagedNetworkProvisionStatusArgs) ToManagedNetworkProvisionStatusOutput() ManagedNetworkProvisionStatusOutput {
	return i.ToManagedNetworkProvisionStatusOutputWithContext(context.Background())
}

func (i ManagedNetworkProvisionStatusArgs) ToManagedNetworkProvisionStatusOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkProvisionStatusOutput)
}

func (i ManagedNetworkProvisionStatusArgs) ToManagedNetworkProvisionStatusPtrOutput() ManagedNetworkProvisionStatusPtrOutput {
	return i.ToManagedNetworkProvisionStatusPtrOutputWithContext(context.Background())
}

func (i ManagedNetworkProvisionStatusArgs) ToManagedNetworkProvisionStatusPtrOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkProvisionStatusOutput).ToManagedNetworkProvisionStatusPtrOutputWithContext(ctx)
}

// ManagedNetworkProvisionStatusPtrInput is an input type that accepts ManagedNetworkProvisionStatusArgs, ManagedNetworkProvisionStatusPtr and ManagedNetworkProvisionStatusPtrOutput values.
// You can construct a concrete instance of `ManagedNetworkProvisionStatusPtrInput` via:
//
//	        ManagedNetworkProvisionStatusArgs{...}
//
//	or:
//
//	        nil
type ManagedNetworkProvisionStatusPtrInput interface {
	pulumi.Input

	ToManagedNetworkProvisionStatusPtrOutput() ManagedNetworkProvisionStatusPtrOutput
	ToManagedNetworkProvisionStatusPtrOutputWithContext(context.Context) ManagedNetworkProvisionStatusPtrOutput
}

type managedNetworkProvisionStatusPtrType ManagedNetworkProvisionStatusArgs

func ManagedNetworkProvisionStatusPtr(v *ManagedNetworkProvisionStatusArgs) ManagedNetworkProvisionStatusPtrInput {
	return (*managedNetworkProvisionStatusPtrType)(v)
}

func (*managedNetworkProvisionStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkProvisionStatus)(nil)).Elem()
}

func (i *managedNetworkProvisionStatusPtrType) ToManagedNetworkProvisionStatusPtrOutput() ManagedNetworkProvisionStatusPtrOutput {
	return i.ToManagedNetworkProvisionStatusPtrOutputWithContext(context.Background())
}

func (i *managedNetworkProvisionStatusPtrType) ToManagedNetworkProvisionStatusPtrOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkProvisionStatusPtrOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatusOutput struct{ *pulumi.OutputState }

func (ManagedNetworkProvisionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkProvisionStatus)(nil)).Elem()
}

func (o ManagedNetworkProvisionStatusOutput) ToManagedNetworkProvisionStatusOutput() ManagedNetworkProvisionStatusOutput {
	return o
}

func (o ManagedNetworkProvisionStatusOutput) ToManagedNetworkProvisionStatusOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusOutput {
	return o
}

func (o ManagedNetworkProvisionStatusOutput) ToManagedNetworkProvisionStatusPtrOutput() ManagedNetworkProvisionStatusPtrOutput {
	return o.ToManagedNetworkProvisionStatusPtrOutputWithContext(context.Background())
}

func (o ManagedNetworkProvisionStatusOutput) ToManagedNetworkProvisionStatusPtrOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedNetworkProvisionStatus) *ManagedNetworkProvisionStatus {
		return &v
	}).(ManagedNetworkProvisionStatusPtrOutput)
}

func (o ManagedNetworkProvisionStatusOutput) SparkReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedNetworkProvisionStatus) *bool { return v.SparkReady }).(pulumi.BoolPtrOutput)
}

// Status for the managed network of a machine learning workspace.
func (o ManagedNetworkProvisionStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedNetworkProvisionStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedNetworkProvisionStatusPtrOutput struct{ *pulumi.OutputState }

func (ManagedNetworkProvisionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkProvisionStatus)(nil)).Elem()
}

func (o ManagedNetworkProvisionStatusPtrOutput) ToManagedNetworkProvisionStatusPtrOutput() ManagedNetworkProvisionStatusPtrOutput {
	return o
}

func (o ManagedNetworkProvisionStatusPtrOutput) ToManagedNetworkProvisionStatusPtrOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusPtrOutput {
	return o
}

func (o ManagedNetworkProvisionStatusPtrOutput) Elem() ManagedNetworkProvisionStatusOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatus) ManagedNetworkProvisionStatus {
		if v != nil {
			return *v
		}
		var ret ManagedNetworkProvisionStatus
		return ret
	}).(ManagedNetworkProvisionStatusOutput)
}

func (o ManagedNetworkProvisionStatusPtrOutput) SparkReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatus) *bool {
		if v == nil {
			return nil
		}
		return v.SparkReady
	}).(pulumi.BoolPtrOutput)
}

// Status for the managed network of a machine learning workspace.
func (o ManagedNetworkProvisionStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatusResponse struct {
	SparkReady *bool `pulumi:"sparkReady"`
	// Status for the managed network of a machine learning workspace.
	Status *string `pulumi:"status"`
}

// Status of the Provisioning for the managed network of a machine learning workspace.
type ManagedNetworkProvisionStatusResponseOutput struct{ *pulumi.OutputState }

func (ManagedNetworkProvisionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkProvisionStatusResponse)(nil)).Elem()
}

func (o ManagedNetworkProvisionStatusResponseOutput) ToManagedNetworkProvisionStatusResponseOutput() ManagedNetworkProvisionStatusResponseOutput {
	return o
}

func (o ManagedNetworkProvisionStatusResponseOutput) ToManagedNetworkProvisionStatusResponseOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusResponseOutput {
	return o
}

func (o ManagedNetworkProvisionStatusResponseOutput) SparkReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedNetworkProvisionStatusResponse) *bool { return v.SparkReady }).(pulumi.BoolPtrOutput)
}

// Status for the managed network of a machine learning workspace.
func (o ManagedNetworkProvisionStatusResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedNetworkProvisionStatusResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ManagedNetworkProvisionStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedNetworkProvisionStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkProvisionStatusResponse)(nil)).Elem()
}

func (o ManagedNetworkProvisionStatusResponsePtrOutput) ToManagedNetworkProvisionStatusResponsePtrOutput() ManagedNetworkProvisionStatusResponsePtrOutput {
	return o
}

func (o ManagedNetworkProvisionStatusResponsePtrOutput) ToManagedNetworkProvisionStatusResponsePtrOutputWithContext(ctx context.Context) ManagedNetworkProvisionStatusResponsePtrOutput {
	return o
}

func (o ManagedNetworkProvisionStatusResponsePtrOutput) Elem() ManagedNetworkProvisionStatusResponseOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatusResponse) ManagedNetworkProvisionStatusResponse {
		if v != nil {
			return *v
		}
		var ret ManagedNetworkProvisionStatusResponse
		return ret
	}).(ManagedNetworkProvisionStatusResponseOutput)
}

func (o ManagedNetworkProvisionStatusResponsePtrOutput) SparkReady() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SparkReady
	}).(pulumi.BoolPtrOutput)
}

// Status for the managed network of a machine learning workspace.
func (o ManagedNetworkProvisionStatusResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkProvisionStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettings struct {
	// Isolation mode for the managed network of a machine learning workspace.
	IsolationMode *string                `pulumi:"isolationMode"`
	OutboundRules map[string]interface{} `pulumi:"outboundRules"`
	// Status of the Provisioning for the managed network of a machine learning workspace.
	Status *ManagedNetworkProvisionStatus `pulumi:"status"`
}

// ManagedNetworkSettingsInput is an input type that accepts ManagedNetworkSettingsArgs and ManagedNetworkSettingsOutput values.
// You can construct a concrete instance of `ManagedNetworkSettingsInput` via:
//
//	ManagedNetworkSettingsArgs{...}
type ManagedNetworkSettingsInput interface {
	pulumi.Input

	ToManagedNetworkSettingsOutput() ManagedNetworkSettingsOutput
	ToManagedNetworkSettingsOutputWithContext(context.Context) ManagedNetworkSettingsOutput
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettingsArgs struct {
	// Isolation mode for the managed network of a machine learning workspace.
	IsolationMode pulumi.StringPtrInput `pulumi:"isolationMode"`
	OutboundRules pulumi.MapInput       `pulumi:"outboundRules"`
	// Status of the Provisioning for the managed network of a machine learning workspace.
	Status ManagedNetworkProvisionStatusPtrInput `pulumi:"status"`
}

func (ManagedNetworkSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkSettings)(nil)).Elem()
}

func (i ManagedNetworkSettingsArgs) ToManagedNetworkSettingsOutput() ManagedNetworkSettingsOutput {
	return i.ToManagedNetworkSettingsOutputWithContext(context.Background())
}

func (i ManagedNetworkSettingsArgs) ToManagedNetworkSettingsOutputWithContext(ctx context.Context) ManagedNetworkSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkSettingsOutput)
}

func (i ManagedNetworkSettingsArgs) ToManagedNetworkSettingsPtrOutput() ManagedNetworkSettingsPtrOutput {
	return i.ToManagedNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i ManagedNetworkSettingsArgs) ToManagedNetworkSettingsPtrOutputWithContext(ctx context.Context) ManagedNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkSettingsOutput).ToManagedNetworkSettingsPtrOutputWithContext(ctx)
}

// ManagedNetworkSettingsPtrInput is an input type that accepts ManagedNetworkSettingsArgs, ManagedNetworkSettingsPtr and ManagedNetworkSettingsPtrOutput values.
// You can construct a concrete instance of `ManagedNetworkSettingsPtrInput` via:
//
//	        ManagedNetworkSettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedNetworkSettingsPtrInput interface {
	pulumi.Input

	ToManagedNetworkSettingsPtrOutput() ManagedNetworkSettingsPtrOutput
	ToManagedNetworkSettingsPtrOutputWithContext(context.Context) ManagedNetworkSettingsPtrOutput
}

type managedNetworkSettingsPtrType ManagedNetworkSettingsArgs

func ManagedNetworkSettingsPtr(v *ManagedNetworkSettingsArgs) ManagedNetworkSettingsPtrInput {
	return (*managedNetworkSettingsPtrType)(v)
}

func (*managedNetworkSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkSettings)(nil)).Elem()
}

func (i *managedNetworkSettingsPtrType) ToManagedNetworkSettingsPtrOutput() ManagedNetworkSettingsPtrOutput {
	return i.ToManagedNetworkSettingsPtrOutputWithContext(context.Background())
}

func (i *managedNetworkSettingsPtrType) ToManagedNetworkSettingsPtrOutputWithContext(ctx context.Context) ManagedNetworkSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedNetworkSettingsPtrOutput)
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettingsOutput struct{ *pulumi.OutputState }

func (ManagedNetworkSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkSettings)(nil)).Elem()
}

func (o ManagedNetworkSettingsOutput) ToManagedNetworkSettingsOutput() ManagedNetworkSettingsOutput {
	return o
}

func (o ManagedNetworkSettingsOutput) ToManagedNetworkSettingsOutputWithContext(ctx context.Context) ManagedNetworkSettingsOutput {
	return o
}

func (o ManagedNetworkSettingsOutput) ToManagedNetworkSettingsPtrOutput() ManagedNetworkSettingsPtrOutput {
	return o.ToManagedNetworkSettingsPtrOutputWithContext(context.Background())
}

func (o ManagedNetworkSettingsOutput) ToManagedNetworkSettingsPtrOutputWithContext(ctx context.Context) ManagedNetworkSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedNetworkSettings) *ManagedNetworkSettings {
		return &v
	}).(ManagedNetworkSettingsPtrOutput)
}

// Isolation mode for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedNetworkSettings) *string { return v.IsolationMode }).(pulumi.StringPtrOutput)
}

func (o ManagedNetworkSettingsOutput) OutboundRules() pulumi.MapOutput {
	return o.ApplyT(func(v ManagedNetworkSettings) map[string]interface{} { return v.OutboundRules }).(pulumi.MapOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsOutput) Status() ManagedNetworkProvisionStatusPtrOutput {
	return o.ApplyT(func(v ManagedNetworkSettings) *ManagedNetworkProvisionStatus { return v.Status }).(ManagedNetworkProvisionStatusPtrOutput)
}

type ManagedNetworkSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedNetworkSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkSettings)(nil)).Elem()
}

func (o ManagedNetworkSettingsPtrOutput) ToManagedNetworkSettingsPtrOutput() ManagedNetworkSettingsPtrOutput {
	return o
}

func (o ManagedNetworkSettingsPtrOutput) ToManagedNetworkSettingsPtrOutputWithContext(ctx context.Context) ManagedNetworkSettingsPtrOutput {
	return o
}

func (o ManagedNetworkSettingsPtrOutput) Elem() ManagedNetworkSettingsOutput {
	return o.ApplyT(func(v *ManagedNetworkSettings) ManagedNetworkSettings {
		if v != nil {
			return *v
		}
		var ret ManagedNetworkSettings
		return ret
	}).(ManagedNetworkSettingsOutput)
}

// Isolation mode for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsPtrOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkSettings) *string {
		if v == nil {
			return nil
		}
		return v.IsolationMode
	}).(pulumi.StringPtrOutput)
}

func (o ManagedNetworkSettingsPtrOutput) OutboundRules() pulumi.MapOutput {
	return o.ApplyT(func(v *ManagedNetworkSettings) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.OutboundRules
	}).(pulumi.MapOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsPtrOutput) Status() ManagedNetworkProvisionStatusPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkSettings) *ManagedNetworkProvisionStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ManagedNetworkProvisionStatusPtrOutput)
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettingsResponse struct {
	ChangeableIsolationModes []string `pulumi:"changeableIsolationModes"`
	// Isolation mode for the managed network of a machine learning workspace.
	IsolationMode *string                `pulumi:"isolationMode"`
	NetworkId     string                 `pulumi:"networkId"`
	OutboundRules map[string]interface{} `pulumi:"outboundRules"`
	// Status of the Provisioning for the managed network of a machine learning workspace.
	Status *ManagedNetworkProvisionStatusResponse `pulumi:"status"`
}

// Managed Network settings for a machine learning workspace.
type ManagedNetworkSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagedNetworkSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedNetworkSettingsResponse)(nil)).Elem()
}

func (o ManagedNetworkSettingsResponseOutput) ToManagedNetworkSettingsResponseOutput() ManagedNetworkSettingsResponseOutput {
	return o
}

func (o ManagedNetworkSettingsResponseOutput) ToManagedNetworkSettingsResponseOutputWithContext(ctx context.Context) ManagedNetworkSettingsResponseOutput {
	return o
}

func (o ManagedNetworkSettingsResponseOutput) ChangeableIsolationModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedNetworkSettingsResponse) []string { return v.ChangeableIsolationModes }).(pulumi.StringArrayOutput)
}

// Isolation mode for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsResponseOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedNetworkSettingsResponse) *string { return v.IsolationMode }).(pulumi.StringPtrOutput)
}

func (o ManagedNetworkSettingsResponseOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedNetworkSettingsResponse) string { return v.NetworkId }).(pulumi.StringOutput)
}

func (o ManagedNetworkSettingsResponseOutput) OutboundRules() pulumi.MapOutput {
	return o.ApplyT(func(v ManagedNetworkSettingsResponse) map[string]interface{} { return v.OutboundRules }).(pulumi.MapOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsResponseOutput) Status() ManagedNetworkProvisionStatusResponsePtrOutput {
	return o.ApplyT(func(v ManagedNetworkSettingsResponse) *ManagedNetworkProvisionStatusResponse { return v.Status }).(ManagedNetworkProvisionStatusResponsePtrOutput)
}

type ManagedNetworkSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedNetworkSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedNetworkSettingsResponse)(nil)).Elem()
}

func (o ManagedNetworkSettingsResponsePtrOutput) ToManagedNetworkSettingsResponsePtrOutput() ManagedNetworkSettingsResponsePtrOutput {
	return o
}

func (o ManagedNetworkSettingsResponsePtrOutput) ToManagedNetworkSettingsResponsePtrOutputWithContext(ctx context.Context) ManagedNetworkSettingsResponsePtrOutput {
	return o
}

func (o ManagedNetworkSettingsResponsePtrOutput) Elem() ManagedNetworkSettingsResponseOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) ManagedNetworkSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedNetworkSettingsResponse
		return ret
	}).(ManagedNetworkSettingsResponseOutput)
}

func (o ManagedNetworkSettingsResponsePtrOutput) ChangeableIsolationModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.ChangeableIsolationModes
	}).(pulumi.StringArrayOutput)
}

// Isolation mode for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsResponsePtrOutput) IsolationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.IsolationMode
	}).(pulumi.StringPtrOutput)
}

func (o ManagedNetworkSettingsResponsePtrOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkId
	}).(pulumi.StringPtrOutput)
}

func (o ManagedNetworkSettingsResponsePtrOutput) OutboundRules() pulumi.MapOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.OutboundRules
	}).(pulumi.MapOutput)
}

// Status of the Provisioning for the managed network of a machine learning workspace.
func (o ManagedNetworkSettingsResponsePtrOutput) Status() ManagedNetworkProvisionStatusResponsePtrOutput {
	return o.ApplyT(func(v *ManagedNetworkSettingsResponse) *ManagedNetworkProvisionStatusResponse {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ManagedNetworkProvisionStatusResponsePtrOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector *DataCollector `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeployment
func (val *ManagedOnlineDeployment) Defaults() *ManagedOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	tmp.DataCollector = tmp.DataCollector.Defaults()

	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// ManagedOnlineDeploymentInput is an input type that accepts ManagedOnlineDeploymentArgs and ManagedOnlineDeploymentOutput values.
// You can construct a concrete instance of `ManagedOnlineDeploymentInput` via:
//
//	ManagedOnlineDeploymentArgs{...}
type ManagedOnlineDeploymentInput interface {
	pulumi.Input

	ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput
	ToManagedOnlineDeploymentOutputWithContext(context.Context) ManagedOnlineDeploymentOutput
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector DataCollectorPtrInput `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentArgs
func (val *ManagedOnlineDeploymentArgs) Defaults() *ManagedOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}

	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	return &tmp
}
func (ManagedOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return i.ToManagedOnlineDeploymentOutputWithContext(context.Background())
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedOnlineDeploymentOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return o
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// The mdc configuration, we disable mdc when it's null.
func (o ManagedOnlineDeploymentOutput) DataCollector() DataCollectorPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *DataCollector { return v.DataCollector }).(DataCollectorPtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// The mdc configuration, we disable mdc when it's null.
	DataCollector *DataCollectorResponse `pulumi:"dataCollector"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentResponse
func (val *ManagedOnlineDeploymentResponse) Defaults() *ManagedOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	tmp.DataCollector = tmp.DataCollector.Defaults()

	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeploymentResponse)(nil)).Elem()
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutput() ManagedOnlineDeploymentResponseOutput {
	return o
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutputWithContext(ctx context.Context) ManagedOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// The mdc configuration, we disable mdc when it's null.
func (o ManagedOnlineDeploymentResponseOutput) DataCollector() DataCollectorResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *DataCollectorResponse { return v.DataCollector }).(DataCollectorResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

type ManagedOnlineEndpointDeploymentResourceProperties struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Kind of the deployment.
	// Expected value is 'managedOnlineEndpoint'.
	Type string `pulumi:"type"`
}

// ManagedOnlineEndpointDeploymentResourcePropertiesInput is an input type that accepts ManagedOnlineEndpointDeploymentResourcePropertiesArgs and ManagedOnlineEndpointDeploymentResourcePropertiesOutput values.
// You can construct a concrete instance of `ManagedOnlineEndpointDeploymentResourcePropertiesInput` via:
//
//	ManagedOnlineEndpointDeploymentResourcePropertiesArgs{...}
type ManagedOnlineEndpointDeploymentResourcePropertiesInput interface {
	pulumi.Input

	ToManagedOnlineEndpointDeploymentResourcePropertiesOutput() ManagedOnlineEndpointDeploymentResourcePropertiesOutput
	ToManagedOnlineEndpointDeploymentResourcePropertiesOutputWithContext(context.Context) ManagedOnlineEndpointDeploymentResourcePropertiesOutput
}

type ManagedOnlineEndpointDeploymentResourcePropertiesArgs struct {
	// The failure reason if the creation failed.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// Kind of the deployment.
	// Expected value is 'managedOnlineEndpoint'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManagedOnlineEndpointDeploymentResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (i ManagedOnlineEndpointDeploymentResourcePropertiesArgs) ToManagedOnlineEndpointDeploymentResourcePropertiesOutput() ManagedOnlineEndpointDeploymentResourcePropertiesOutput {
	return i.ToManagedOnlineEndpointDeploymentResourcePropertiesOutputWithContext(context.Background())
}

func (i ManagedOnlineEndpointDeploymentResourcePropertiesArgs) ToManagedOnlineEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) ManagedOnlineEndpointDeploymentResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedOnlineEndpointDeploymentResourcePropertiesOutput)
}

type ManagedOnlineEndpointDeploymentResourcePropertiesOutput struct{ *pulumi.OutputState }

func (ManagedOnlineEndpointDeploymentResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (o ManagedOnlineEndpointDeploymentResourcePropertiesOutput) ToManagedOnlineEndpointDeploymentResourcePropertiesOutput() ManagedOnlineEndpointDeploymentResourcePropertiesOutput {
	return o
}

func (o ManagedOnlineEndpointDeploymentResourcePropertiesOutput) ToManagedOnlineEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) ManagedOnlineEndpointDeploymentResourcePropertiesOutput {
	return o
}

// The failure reason if the creation failed.
func (o ManagedOnlineEndpointDeploymentResourcePropertiesOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineEndpointDeploymentResourceProperties) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Kind of the deployment.
// Expected value is 'managedOnlineEndpoint'.
func (o ManagedOnlineEndpointDeploymentResourcePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineEndpointDeploymentResourceProperties) string { return v.Type }).(pulumi.StringOutput)
}

type ManagedOnlineEndpointDeploymentResourcePropertiesResponse struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Read-only provision state status property.
	ProvisioningState string `pulumi:"provisioningState"`
	// Kind of the deployment.
	// Expected value is 'managedOnlineEndpoint'.
	Type string `pulumi:"type"`
}

type ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineEndpointDeploymentResourcePropertiesResponse)(nil)).Elem()
}

func (o ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) ToManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput() ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

func (o ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) ToManagedOnlineEndpointDeploymentResourcePropertiesResponseOutputWithContext(ctx context.Context) ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

// The failure reason if the creation failed.
func (o ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineEndpointDeploymentResourcePropertiesResponse) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Read-only provision state status property.
func (o ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineEndpointDeploymentResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Kind of the deployment.
// Expected value is 'managedOnlineEndpoint'.
func (o ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineEndpointDeploymentResourcePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Details for managed resource group assigned identities.
type ManagedResourceGroupAssignedIdentities struct {
	// Identity principal Id
	PrincipalId *string `pulumi:"principalId"`
}

// ManagedResourceGroupAssignedIdentitiesInput is an input type that accepts ManagedResourceGroupAssignedIdentitiesArgs and ManagedResourceGroupAssignedIdentitiesOutput values.
// You can construct a concrete instance of `ManagedResourceGroupAssignedIdentitiesInput` via:
//
//	ManagedResourceGroupAssignedIdentitiesArgs{...}
type ManagedResourceGroupAssignedIdentitiesInput interface {
	pulumi.Input

	ToManagedResourceGroupAssignedIdentitiesOutput() ManagedResourceGroupAssignedIdentitiesOutput
	ToManagedResourceGroupAssignedIdentitiesOutputWithContext(context.Context) ManagedResourceGroupAssignedIdentitiesOutput
}

// Details for managed resource group assigned identities.
type ManagedResourceGroupAssignedIdentitiesArgs struct {
	// Identity principal Id
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
}

func (ManagedResourceGroupAssignedIdentitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupAssignedIdentities)(nil)).Elem()
}

func (i ManagedResourceGroupAssignedIdentitiesArgs) ToManagedResourceGroupAssignedIdentitiesOutput() ManagedResourceGroupAssignedIdentitiesOutput {
	return i.ToManagedResourceGroupAssignedIdentitiesOutputWithContext(context.Background())
}

func (i ManagedResourceGroupAssignedIdentitiesArgs) ToManagedResourceGroupAssignedIdentitiesOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupAssignedIdentitiesOutput)
}

// ManagedResourceGroupAssignedIdentitiesArrayInput is an input type that accepts ManagedResourceGroupAssignedIdentitiesArray and ManagedResourceGroupAssignedIdentitiesArrayOutput values.
// You can construct a concrete instance of `ManagedResourceGroupAssignedIdentitiesArrayInput` via:
//
//	ManagedResourceGroupAssignedIdentitiesArray{ ManagedResourceGroupAssignedIdentitiesArgs{...} }
type ManagedResourceGroupAssignedIdentitiesArrayInput interface {
	pulumi.Input

	ToManagedResourceGroupAssignedIdentitiesArrayOutput() ManagedResourceGroupAssignedIdentitiesArrayOutput
	ToManagedResourceGroupAssignedIdentitiesArrayOutputWithContext(context.Context) ManagedResourceGroupAssignedIdentitiesArrayOutput
}

type ManagedResourceGroupAssignedIdentitiesArray []ManagedResourceGroupAssignedIdentitiesInput

func (ManagedResourceGroupAssignedIdentitiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedResourceGroupAssignedIdentities)(nil)).Elem()
}

func (i ManagedResourceGroupAssignedIdentitiesArray) ToManagedResourceGroupAssignedIdentitiesArrayOutput() ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return i.ToManagedResourceGroupAssignedIdentitiesArrayOutputWithContext(context.Background())
}

func (i ManagedResourceGroupAssignedIdentitiesArray) ToManagedResourceGroupAssignedIdentitiesArrayOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupAssignedIdentitiesArrayOutput)
}

// Details for managed resource group assigned identities.
type ManagedResourceGroupAssignedIdentitiesOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupAssignedIdentitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupAssignedIdentities)(nil)).Elem()
}

func (o ManagedResourceGroupAssignedIdentitiesOutput) ToManagedResourceGroupAssignedIdentitiesOutput() ManagedResourceGroupAssignedIdentitiesOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesOutput) ToManagedResourceGroupAssignedIdentitiesOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesOutput {
	return o
}

// Identity principal Id
func (o ManagedResourceGroupAssignedIdentitiesOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupAssignedIdentities) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupAssignedIdentitiesArrayOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupAssignedIdentitiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedResourceGroupAssignedIdentities)(nil)).Elem()
}

func (o ManagedResourceGroupAssignedIdentitiesArrayOutput) ToManagedResourceGroupAssignedIdentitiesArrayOutput() ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesArrayOutput) ToManagedResourceGroupAssignedIdentitiesArrayOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesArrayOutput) Index(i pulumi.IntInput) ManagedResourceGroupAssignedIdentitiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedResourceGroupAssignedIdentities {
		return vs[0].([]ManagedResourceGroupAssignedIdentities)[vs[1].(int)]
	}).(ManagedResourceGroupAssignedIdentitiesOutput)
}

// Details for managed resource group assigned identities.
type ManagedResourceGroupAssignedIdentitiesResponse struct {
	// Identity principal Id
	PrincipalId *string `pulumi:"principalId"`
}

// Details for managed resource group assigned identities.
type ManagedResourceGroupAssignedIdentitiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupAssignedIdentitiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupAssignedIdentitiesResponse)(nil)).Elem()
}

func (o ManagedResourceGroupAssignedIdentitiesResponseOutput) ToManagedResourceGroupAssignedIdentitiesResponseOutput() ManagedResourceGroupAssignedIdentitiesResponseOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesResponseOutput) ToManagedResourceGroupAssignedIdentitiesResponseOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesResponseOutput {
	return o
}

// Identity principal Id
func (o ManagedResourceGroupAssignedIdentitiesResponseOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedResourceGroupAssignedIdentitiesResponse) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

type ManagedResourceGroupAssignedIdentitiesResponseArrayOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupAssignedIdentitiesResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedResourceGroupAssignedIdentitiesResponse)(nil)).Elem()
}

func (o ManagedResourceGroupAssignedIdentitiesResponseArrayOutput) ToManagedResourceGroupAssignedIdentitiesResponseArrayOutput() ManagedResourceGroupAssignedIdentitiesResponseArrayOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesResponseArrayOutput) ToManagedResourceGroupAssignedIdentitiesResponseArrayOutputWithContext(ctx context.Context) ManagedResourceGroupAssignedIdentitiesResponseArrayOutput {
	return o
}

func (o ManagedResourceGroupAssignedIdentitiesResponseArrayOutput) Index(i pulumi.IntInput) ManagedResourceGroupAssignedIdentitiesResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedResourceGroupAssignedIdentitiesResponse {
		return vs[0].([]ManagedResourceGroupAssignedIdentitiesResponse)[vs[1].(int)]
	}).(ManagedResourceGroupAssignedIdentitiesResponseOutput)
}

// Managed resource group settings
type ManagedResourceGroupSettings struct {
	// List of assigned identities for the managed resource group
	AssignedIdentities []ManagedResourceGroupAssignedIdentities `pulumi:"assignedIdentities"`
}

// ManagedResourceGroupSettingsInput is an input type that accepts ManagedResourceGroupSettingsArgs and ManagedResourceGroupSettingsOutput values.
// You can construct a concrete instance of `ManagedResourceGroupSettingsInput` via:
//
//	ManagedResourceGroupSettingsArgs{...}
type ManagedResourceGroupSettingsInput interface {
	pulumi.Input

	ToManagedResourceGroupSettingsOutput() ManagedResourceGroupSettingsOutput
	ToManagedResourceGroupSettingsOutputWithContext(context.Context) ManagedResourceGroupSettingsOutput
}

// Managed resource group settings
type ManagedResourceGroupSettingsArgs struct {
	// List of assigned identities for the managed resource group
	AssignedIdentities ManagedResourceGroupAssignedIdentitiesArrayInput `pulumi:"assignedIdentities"`
}

func (ManagedResourceGroupSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupSettings)(nil)).Elem()
}

func (i ManagedResourceGroupSettingsArgs) ToManagedResourceGroupSettingsOutput() ManagedResourceGroupSettingsOutput {
	return i.ToManagedResourceGroupSettingsOutputWithContext(context.Background())
}

func (i ManagedResourceGroupSettingsArgs) ToManagedResourceGroupSettingsOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupSettingsOutput)
}

func (i ManagedResourceGroupSettingsArgs) ToManagedResourceGroupSettingsPtrOutput() ManagedResourceGroupSettingsPtrOutput {
	return i.ToManagedResourceGroupSettingsPtrOutputWithContext(context.Background())
}

func (i ManagedResourceGroupSettingsArgs) ToManagedResourceGroupSettingsPtrOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupSettingsOutput).ToManagedResourceGroupSettingsPtrOutputWithContext(ctx)
}

// ManagedResourceGroupSettingsPtrInput is an input type that accepts ManagedResourceGroupSettingsArgs, ManagedResourceGroupSettingsPtr and ManagedResourceGroupSettingsPtrOutput values.
// You can construct a concrete instance of `ManagedResourceGroupSettingsPtrInput` via:
//
//	        ManagedResourceGroupSettingsArgs{...}
//
//	or:
//
//	        nil
type ManagedResourceGroupSettingsPtrInput interface {
	pulumi.Input

	ToManagedResourceGroupSettingsPtrOutput() ManagedResourceGroupSettingsPtrOutput
	ToManagedResourceGroupSettingsPtrOutputWithContext(context.Context) ManagedResourceGroupSettingsPtrOutput
}

type managedResourceGroupSettingsPtrType ManagedResourceGroupSettingsArgs

func ManagedResourceGroupSettingsPtr(v *ManagedResourceGroupSettingsArgs) ManagedResourceGroupSettingsPtrInput {
	return (*managedResourceGroupSettingsPtrType)(v)
}

func (*managedResourceGroupSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupSettings)(nil)).Elem()
}

func (i *managedResourceGroupSettingsPtrType) ToManagedResourceGroupSettingsPtrOutput() ManagedResourceGroupSettingsPtrOutput {
	return i.ToManagedResourceGroupSettingsPtrOutputWithContext(context.Background())
}

func (i *managedResourceGroupSettingsPtrType) ToManagedResourceGroupSettingsPtrOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedResourceGroupSettingsPtrOutput)
}

// Managed resource group settings
type ManagedResourceGroupSettingsOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupSettings)(nil)).Elem()
}

func (o ManagedResourceGroupSettingsOutput) ToManagedResourceGroupSettingsOutput() ManagedResourceGroupSettingsOutput {
	return o
}

func (o ManagedResourceGroupSettingsOutput) ToManagedResourceGroupSettingsOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsOutput {
	return o
}

func (o ManagedResourceGroupSettingsOutput) ToManagedResourceGroupSettingsPtrOutput() ManagedResourceGroupSettingsPtrOutput {
	return o.ToManagedResourceGroupSettingsPtrOutputWithContext(context.Background())
}

func (o ManagedResourceGroupSettingsOutput) ToManagedResourceGroupSettingsPtrOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedResourceGroupSettings) *ManagedResourceGroupSettings {
		return &v
	}).(ManagedResourceGroupSettingsPtrOutput)
}

// List of assigned identities for the managed resource group
func (o ManagedResourceGroupSettingsOutput) AssignedIdentities() ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return o.ApplyT(func(v ManagedResourceGroupSettings) []ManagedResourceGroupAssignedIdentities {
		return v.AssignedIdentities
	}).(ManagedResourceGroupAssignedIdentitiesArrayOutput)
}

type ManagedResourceGroupSettingsPtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupSettings)(nil)).Elem()
}

func (o ManagedResourceGroupSettingsPtrOutput) ToManagedResourceGroupSettingsPtrOutput() ManagedResourceGroupSettingsPtrOutput {
	return o
}

func (o ManagedResourceGroupSettingsPtrOutput) ToManagedResourceGroupSettingsPtrOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsPtrOutput {
	return o
}

func (o ManagedResourceGroupSettingsPtrOutput) Elem() ManagedResourceGroupSettingsOutput {
	return o.ApplyT(func(v *ManagedResourceGroupSettings) ManagedResourceGroupSettings {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupSettings
		return ret
	}).(ManagedResourceGroupSettingsOutput)
}

// List of assigned identities for the managed resource group
func (o ManagedResourceGroupSettingsPtrOutput) AssignedIdentities() ManagedResourceGroupAssignedIdentitiesArrayOutput {
	return o.ApplyT(func(v *ManagedResourceGroupSettings) []ManagedResourceGroupAssignedIdentities {
		if v == nil {
			return nil
		}
		return v.AssignedIdentities
	}).(ManagedResourceGroupAssignedIdentitiesArrayOutput)
}

// Managed resource group settings
type ManagedResourceGroupSettingsResponse struct {
	// List of assigned identities for the managed resource group
	AssignedIdentities []ManagedResourceGroupAssignedIdentitiesResponse `pulumi:"assignedIdentities"`
}

// Managed resource group settings
type ManagedResourceGroupSettingsResponseOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedResourceGroupSettingsResponse)(nil)).Elem()
}

func (o ManagedResourceGroupSettingsResponseOutput) ToManagedResourceGroupSettingsResponseOutput() ManagedResourceGroupSettingsResponseOutput {
	return o
}

func (o ManagedResourceGroupSettingsResponseOutput) ToManagedResourceGroupSettingsResponseOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsResponseOutput {
	return o
}

// List of assigned identities for the managed resource group
func (o ManagedResourceGroupSettingsResponseOutput) AssignedIdentities() ManagedResourceGroupAssignedIdentitiesResponseArrayOutput {
	return o.ApplyT(func(v ManagedResourceGroupSettingsResponse) []ManagedResourceGroupAssignedIdentitiesResponse {
		return v.AssignedIdentities
	}).(ManagedResourceGroupAssignedIdentitiesResponseArrayOutput)
}

type ManagedResourceGroupSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedResourceGroupSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedResourceGroupSettingsResponse)(nil)).Elem()
}

func (o ManagedResourceGroupSettingsResponsePtrOutput) ToManagedResourceGroupSettingsResponsePtrOutput() ManagedResourceGroupSettingsResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupSettingsResponsePtrOutput) ToManagedResourceGroupSettingsResponsePtrOutputWithContext(ctx context.Context) ManagedResourceGroupSettingsResponsePtrOutput {
	return o
}

func (o ManagedResourceGroupSettingsResponsePtrOutput) Elem() ManagedResourceGroupSettingsResponseOutput {
	return o.ApplyT(func(v *ManagedResourceGroupSettingsResponse) ManagedResourceGroupSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ManagedResourceGroupSettingsResponse
		return ret
	}).(ManagedResourceGroupSettingsResponseOutput)
}

// List of assigned identities for the managed resource group
func (o ManagedResourceGroupSettingsResponsePtrOutput) AssignedIdentities() ManagedResourceGroupAssignedIdentitiesResponseArrayOutput {
	return o.ApplyT(func(v *ManagedResourceGroupSettingsResponse) []ManagedResourceGroupAssignedIdentitiesResponse {
		if v == nil {
			return nil
		}
		return v.AssignedIdentities
	}).(ManagedResourceGroupAssignedIdentitiesResponseArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type MarketplacePlanResponse struct {
	// The Offer ID of the Marketplace Plan.
	OfferId string `pulumi:"offerId"`
	// The Plan ID of the Marketplace Plan.
	PlanId string `pulumi:"planId"`
	// The Publisher ID of the Marketplace Plan.
	PublisherId string `pulumi:"publisherId"`
}

type MarketplacePlanResponseOutput struct{ *pulumi.OutputState }

func (MarketplacePlanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplacePlanResponse)(nil)).Elem()
}

func (o MarketplacePlanResponseOutput) ToMarketplacePlanResponseOutput() MarketplacePlanResponseOutput {
	return o
}

func (o MarketplacePlanResponseOutput) ToMarketplacePlanResponseOutputWithContext(ctx context.Context) MarketplacePlanResponseOutput {
	return o
}

// The Offer ID of the Marketplace Plan.
func (o MarketplacePlanResponseOutput) OfferId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplacePlanResponse) string { return v.OfferId }).(pulumi.StringOutput)
}

// The Plan ID of the Marketplace Plan.
func (o MarketplacePlanResponseOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplacePlanResponse) string { return v.PlanId }).(pulumi.StringOutput)
}

// The Publisher ID of the Marketplace Plan.
func (o MarketplacePlanResponseOutput) PublisherId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplacePlanResponse) string { return v.PublisherId }).(pulumi.StringOutput)
}

type MarketplaceSubscriptionType struct {
	// [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
	ModelId string `pulumi:"modelId"`
}

// MarketplaceSubscriptionTypeInput is an input type that accepts MarketplaceSubscriptionTypeArgs and MarketplaceSubscriptionTypeOutput values.
// You can construct a concrete instance of `MarketplaceSubscriptionTypeInput` via:
//
//	MarketplaceSubscriptionTypeArgs{...}
type MarketplaceSubscriptionTypeInput interface {
	pulumi.Input

	ToMarketplaceSubscriptionTypeOutput() MarketplaceSubscriptionTypeOutput
	ToMarketplaceSubscriptionTypeOutputWithContext(context.Context) MarketplaceSubscriptionTypeOutput
}

type MarketplaceSubscriptionTypeArgs struct {
	// [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
	ModelId pulumi.StringInput `pulumi:"modelId"`
}

func (MarketplaceSubscriptionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplaceSubscriptionType)(nil)).Elem()
}

func (i MarketplaceSubscriptionTypeArgs) ToMarketplaceSubscriptionTypeOutput() MarketplaceSubscriptionTypeOutput {
	return i.ToMarketplaceSubscriptionTypeOutputWithContext(context.Background())
}

func (i MarketplaceSubscriptionTypeArgs) ToMarketplaceSubscriptionTypeOutputWithContext(ctx context.Context) MarketplaceSubscriptionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceSubscriptionTypeOutput)
}

type MarketplaceSubscriptionTypeOutput struct{ *pulumi.OutputState }

func (MarketplaceSubscriptionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplaceSubscriptionType)(nil)).Elem()
}

func (o MarketplaceSubscriptionTypeOutput) ToMarketplaceSubscriptionTypeOutput() MarketplaceSubscriptionTypeOutput {
	return o
}

func (o MarketplaceSubscriptionTypeOutput) ToMarketplaceSubscriptionTypeOutputWithContext(ctx context.Context) MarketplaceSubscriptionTypeOutput {
	return o
}

// [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
func (o MarketplaceSubscriptionTypeOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplaceSubscriptionType) string { return v.ModelId }).(pulumi.StringOutput)
}

type MarketplaceSubscriptionResponse struct {
	// Marketplace Plan associated with the Marketplace Subscription.
	MarketplacePlan MarketplacePlanResponse `pulumi:"marketplacePlan"`
	// Current status of the Marketplace Subscription.
	MarketplaceSubscriptionStatus string `pulumi:"marketplaceSubscriptionStatus"`
	// [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
	ModelId string `pulumi:"modelId"`
	// Provisioning State of the Marketplace Subscription.
	ProvisioningState string `pulumi:"provisioningState"`
}

type MarketplaceSubscriptionResponseOutput struct{ *pulumi.OutputState }

func (MarketplaceSubscriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplaceSubscriptionResponse)(nil)).Elem()
}

func (o MarketplaceSubscriptionResponseOutput) ToMarketplaceSubscriptionResponseOutput() MarketplaceSubscriptionResponseOutput {
	return o
}

func (o MarketplaceSubscriptionResponseOutput) ToMarketplaceSubscriptionResponseOutputWithContext(ctx context.Context) MarketplaceSubscriptionResponseOutput {
	return o
}

// Marketplace Plan associated with the Marketplace Subscription.
func (o MarketplaceSubscriptionResponseOutput) MarketplacePlan() MarketplacePlanResponseOutput {
	return o.ApplyT(func(v MarketplaceSubscriptionResponse) MarketplacePlanResponse { return v.MarketplacePlan }).(MarketplacePlanResponseOutput)
}

// Current status of the Marketplace Subscription.
func (o MarketplaceSubscriptionResponseOutput) MarketplaceSubscriptionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplaceSubscriptionResponse) string { return v.MarketplaceSubscriptionStatus }).(pulumi.StringOutput)
}

// [Required] Target Marketplace Model ID to create a Marketplace Subscription for.
func (o MarketplaceSubscriptionResponseOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplaceSubscriptionResponse) string { return v.ModelId }).(pulumi.StringOutput)
}

// Provisioning State of the Marketplace Subscription.
func (o MarketplaceSubscriptionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v MarketplaceSubscriptionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Dto object representing compute resource
type MaterializationComputeResource struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// MaterializationComputeResourceInput is an input type that accepts MaterializationComputeResourceArgs and MaterializationComputeResourceOutput values.
// You can construct a concrete instance of `MaterializationComputeResourceInput` via:
//
//	MaterializationComputeResourceArgs{...}
type MaterializationComputeResourceInput interface {
	pulumi.Input

	ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput
	ToMaterializationComputeResourceOutputWithContext(context.Context) MaterializationComputeResourceOutput
}

// Dto object representing compute resource
type MaterializationComputeResourceArgs struct {
	// Specifies the instance type
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
}

func (MaterializationComputeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return i.ToMaterializationComputeResourceOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput)
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput).ToMaterializationComputeResourcePtrOutputWithContext(ctx)
}

// MaterializationComputeResourcePtrInput is an input type that accepts MaterializationComputeResourceArgs, MaterializationComputeResourcePtr and MaterializationComputeResourcePtrOutput values.
// You can construct a concrete instance of `MaterializationComputeResourcePtrInput` via:
//
//	        MaterializationComputeResourceArgs{...}
//
//	or:
//
//	        nil
type MaterializationComputeResourcePtrInput interface {
	pulumi.Input

	ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput
	ToMaterializationComputeResourcePtrOutputWithContext(context.Context) MaterializationComputeResourcePtrOutput
}

type materializationComputeResourcePtrType MaterializationComputeResourceArgs

func MaterializationComputeResourcePtr(v *MaterializationComputeResourceArgs) MaterializationComputeResourcePtrInput {
	return (*materializationComputeResourcePtrType)(v)
}

func (*materializationComputeResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourcePtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationComputeResource) *MaterializationComputeResource {
		return &v
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResource) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourcePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) Elem() MaterializationComputeResourceOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) MaterializationComputeResource {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResource
		return ret
	}).(MaterializationComputeResourceOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourcePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceResponse struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// Dto object representing compute resource
type MaterializationComputeResourceResponseOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutput() MaterializationComputeResourceResponseOutput {
	return o
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutputWithContext(ctx context.Context) MaterializationComputeResourceResponseOutput {
	return o
}

// Specifies the instance type
func (o MaterializationComputeResourceResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResourceResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutput() MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutputWithContext(ctx context.Context) MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) Elem() MaterializationComputeResourceResponseOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) MaterializationComputeResourceResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResourceResponse
		return ret
	}).(MaterializationComputeResourceResponseOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettings struct {
	// Specifies the notification details
	Notification *NotificationSetting `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResource `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTrigger `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettings
func (val *MaterializationSettings) Defaults() *MaterializationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

// MaterializationSettingsInput is an input type that accepts MaterializationSettingsArgs and MaterializationSettingsOutput values.
// You can construct a concrete instance of `MaterializationSettingsInput` via:
//
//	MaterializationSettingsArgs{...}
type MaterializationSettingsInput interface {
	pulumi.Input

	ToMaterializationSettingsOutput() MaterializationSettingsOutput
	ToMaterializationSettingsOutputWithContext(context.Context) MaterializationSettingsOutput
}

type MaterializationSettingsArgs struct {
	// Specifies the notification details
	Notification NotificationSettingPtrInput `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource MaterializationComputeResourcePtrInput `pulumi:"resource"`
	// Specifies the schedule details
	Schedule RecurrenceTriggerPtrInput `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration pulumi.StringMapInput `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType pulumi.StringPtrInput `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsArgs
func (val *MaterializationSettingsArgs) Defaults() *MaterializationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.StoreType == nil {
		tmp.StoreType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (MaterializationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return i.ToMaterializationSettingsOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput)
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput).ToMaterializationSettingsPtrOutputWithContext(ctx)
}

// MaterializationSettingsPtrInput is an input type that accepts MaterializationSettingsArgs, MaterializationSettingsPtr and MaterializationSettingsPtrOutput values.
// You can construct a concrete instance of `MaterializationSettingsPtrInput` via:
//
//	        MaterializationSettingsArgs{...}
//
//	or:
//
//	        nil
type MaterializationSettingsPtrInput interface {
	pulumi.Input

	ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput
	ToMaterializationSettingsPtrOutputWithContext(context.Context) MaterializationSettingsPtrOutput
}

type materializationSettingsPtrType MaterializationSettingsArgs

func MaterializationSettingsPtr(v *MaterializationSettingsArgs) MaterializationSettingsPtrInput {
	return (*materializationSettingsPtrType)(v)
}

func (*materializationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsPtrOutput)
}

type MaterializationSettingsOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationSettings) *MaterializationSettings {
		return &v
	}).(MaterializationSettingsPtrOutput)
}

// Specifies the notification details
func (o MaterializationSettingsOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *NotificationSetting { return v.Notification }).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *MaterializationComputeResource { return v.Resource }).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *RecurrenceTrigger { return v.Schedule }).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettings) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) Elem() MaterializationSettingsOutput {
	return o.ApplyT(func(v *MaterializationSettings) MaterializationSettings {
		if v != nil {
			return *v
		}
		var ret MaterializationSettings
		return ret
	}).(MaterializationSettingsOutput)
}

// Specifies the notification details
func (o MaterializationSettingsPtrOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *NotificationSetting {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsPtrOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *MaterializationComputeResource {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsPtrOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *RecurrenceTrigger {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsPtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsPtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponse struct {
	// Specifies the notification details
	Notification *NotificationSettingResponse `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResourceResponse `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTriggerResponse `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsResponse
func (val *MaterializationSettingsResponse) Defaults() *MaterializationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

type MaterializationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutput() MaterializationSettingsResponseOutput {
	return o
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutputWithContext(ctx context.Context) MaterializationSettingsResponseOutput {
	return o
}

// Specifies the notification details
func (o MaterializationSettingsResponseOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *NotificationSettingResponse { return v.Notification }).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponseOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *MaterializationComputeResourceResponse { return v.Resource }).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponseOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *RecurrenceTriggerResponse { return v.Schedule }).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponseOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponseOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutput() MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutputWithContext(ctx context.Context) MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) Elem() MaterializationSettingsResponseOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) MaterializationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationSettingsResponse
		return ret
	}).(MaterializationSettingsResponseOutput)
}

// Specifies the notification details
func (o MaterializationSettingsResponsePtrOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *NotificationSettingResponse {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponsePtrOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *MaterializationComputeResourceResponse {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponsePtrOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *RecurrenceTriggerResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponsePtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponsePtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicy
func (val *MedianStoppingPolicy) Defaults() *MedianStoppingPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// MedianStoppingPolicyInput is an input type that accepts MedianStoppingPolicyArgs and MedianStoppingPolicyOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyInput` via:
//
//	MedianStoppingPolicyArgs{...}
type MedianStoppingPolicyInput interface {
	pulumi.Input

	ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput
	ToMedianStoppingPolicyOutputWithContext(context.Context) MedianStoppingPolicyOutput
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyArgs
func (val *MedianStoppingPolicyArgs) Defaults() *MedianStoppingPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	return &tmp
}
func (MedianStoppingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return i.ToMedianStoppingPolicyOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput)
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput).ToMedianStoppingPolicyPtrOutputWithContext(ctx)
}

// MedianStoppingPolicyPtrInput is an input type that accepts MedianStoppingPolicyArgs, MedianStoppingPolicyPtr and MedianStoppingPolicyPtrOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyPtrInput` via:
//
//	        MedianStoppingPolicyArgs{...}
//
//	or:
//
//	        nil
type MedianStoppingPolicyPtrInput interface {
	pulumi.Input

	ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput
	ToMedianStoppingPolicyPtrOutputWithContext(context.Context) MedianStoppingPolicyPtrOutput
}

type medianStoppingPolicyPtrType MedianStoppingPolicyArgs

func MedianStoppingPolicyPtr(v *MedianStoppingPolicyArgs) MedianStoppingPolicyPtrInput {
	return (*medianStoppingPolicyPtrType)(v)
}

func (*medianStoppingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MedianStoppingPolicy) *MedianStoppingPolicy {
		return &v
	}).(MedianStoppingPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyPtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) Elem() MedianStoppingPolicyOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) MedianStoppingPolicy {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicy
		return ret
	}).(MedianStoppingPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyResponse
func (val *MedianStoppingPolicyResponse) Defaults() *MedianStoppingPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponseOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutput() MedianStoppingPolicyResponseOutput {
	return o
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutputWithContext(ctx context.Context) MedianStoppingPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutput() MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutputWithContext(ctx context.Context) MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) Elem() MedianStoppingPolicyResponseOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) MedianStoppingPolicyResponse {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicyResponse
		return ret
	}).(MedianStoppingPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

type ModelContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerType
func (val *ModelContainerType) Defaults() *ModelContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelContainerTypeInput is an input type that accepts ModelContainerTypeArgs and ModelContainerTypeOutput values.
// You can construct a concrete instance of `ModelContainerTypeInput` via:
//
//	ModelContainerTypeArgs{...}
type ModelContainerTypeInput interface {
	pulumi.Input

	ToModelContainerTypeOutput() ModelContainerTypeOutput
	ToModelContainerTypeOutputWithContext(context.Context) ModelContainerTypeOutput
}

type ModelContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerTypeArgs
func (val *ModelContainerTypeArgs) Defaults() *ModelContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return i.ToModelContainerTypeOutputWithContext(context.Background())
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerTypeOutput)
}

type ModelContainerTypeOutput struct{ *pulumi.OutputState }

func (ModelContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return o
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return o
}

// The asset description text.
func (o ModelContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ModelContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ModelContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerResponse
func (val *ModelContainerResponse) Defaults() *ModelContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type ModelContainerResponseOutput struct{ *pulumi.OutputState }

func (ModelContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerResponse)(nil)).Elem()
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutput() ModelContainerResponseOutput {
	return o
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutputWithContext(ctx context.Context) ModelContainerResponseOutput {
	return o
}

// The asset description text.
func (o ModelContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ModelContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ModelContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ModelContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model container.
func (o ModelContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model performance signal definition.
type ModelPerformanceSignal struct {
	// The data segment.
	DataSegment *MonitoringDataSegment `pulumi:"dataSegment"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold interface{} `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which performance will be calculated for.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The reference data used as the basis to calculate model performance.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'ModelPerformance'.
	SignalType string `pulumi:"signalType"`
}

// ModelPerformanceSignalInput is an input type that accepts ModelPerformanceSignalArgs and ModelPerformanceSignalOutput values.
// You can construct a concrete instance of `ModelPerformanceSignalInput` via:
//
//	ModelPerformanceSignalArgs{...}
type ModelPerformanceSignalInput interface {
	pulumi.Input

	ToModelPerformanceSignalOutput() ModelPerformanceSignalOutput
	ToModelPerformanceSignalOutputWithContext(context.Context) ModelPerformanceSignalOutput
}

// Model performance signal definition.
type ModelPerformanceSignalArgs struct {
	// The data segment.
	DataSegment MonitoringDataSegmentPtrInput `pulumi:"dataSegment"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold pulumi.Input `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which performance will be calculated for.
	ProductionData pulumi.ArrayInput `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The reference data used as the basis to calculate model performance.
	ReferenceData pulumi.Input `pulumi:"referenceData"`
	// Expected value is 'ModelPerformance'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

func (ModelPerformanceSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPerformanceSignal)(nil)).Elem()
}

func (i ModelPerformanceSignalArgs) ToModelPerformanceSignalOutput() ModelPerformanceSignalOutput {
	return i.ToModelPerformanceSignalOutputWithContext(context.Background())
}

func (i ModelPerformanceSignalArgs) ToModelPerformanceSignalOutputWithContext(ctx context.Context) ModelPerformanceSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelPerformanceSignalOutput)
}

// Model performance signal definition.
type ModelPerformanceSignalOutput struct{ *pulumi.OutputState }

func (ModelPerformanceSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPerformanceSignal)(nil)).Elem()
}

func (o ModelPerformanceSignalOutput) ToModelPerformanceSignalOutput() ModelPerformanceSignalOutput {
	return o
}

func (o ModelPerformanceSignalOutput) ToModelPerformanceSignalOutputWithContext(ctx context.Context) ModelPerformanceSignalOutput {
	return o
}

// The data segment.
func (o ModelPerformanceSignalOutput) DataSegment() MonitoringDataSegmentPtrOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) *MonitoringDataSegment { return v.DataSegment }).(MonitoringDataSegmentPtrOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o ModelPerformanceSignalOutput) MetricThreshold() pulumi.AnyOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) interface{} { return v.MetricThreshold }).(pulumi.AnyOutput)
}

// The current notification mode for this signal.
func (o ModelPerformanceSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data produced by the production service which performance will be calculated for.
func (o ModelPerformanceSignalOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ModelPerformanceSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The reference data used as the basis to calculate model performance.
func (o ModelPerformanceSignalOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'ModelPerformance'.
func (o ModelPerformanceSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelPerformanceSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

// Model performance signal definition.
type ModelPerformanceSignalResponse struct {
	// The data segment.
	DataSegment *MonitoringDataSegmentResponse `pulumi:"dataSegment"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThreshold interface{} `pulumi:"metricThreshold"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data produced by the production service which performance will be calculated for.
	ProductionData []interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The reference data used as the basis to calculate model performance.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'ModelPerformance'.
	SignalType string `pulumi:"signalType"`
}

// Model performance signal definition.
type ModelPerformanceSignalResponseOutput struct{ *pulumi.OutputState }

func (ModelPerformanceSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelPerformanceSignalResponse)(nil)).Elem()
}

func (o ModelPerformanceSignalResponseOutput) ToModelPerformanceSignalResponseOutput() ModelPerformanceSignalResponseOutput {
	return o
}

func (o ModelPerformanceSignalResponseOutput) ToModelPerformanceSignalResponseOutputWithContext(ctx context.Context) ModelPerformanceSignalResponseOutput {
	return o
}

// The data segment.
func (o ModelPerformanceSignalResponseOutput) DataSegment() MonitoringDataSegmentResponsePtrOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) *MonitoringDataSegmentResponse { return v.DataSegment }).(MonitoringDataSegmentResponsePtrOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o ModelPerformanceSignalResponseOutput) MetricThreshold() pulumi.AnyOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) interface{} { return v.MetricThreshold }).(pulumi.AnyOutput)
}

// The current notification mode for this signal.
func (o ModelPerformanceSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data produced by the production service which performance will be calculated for.
func (o ModelPerformanceSignalResponseOutput) ProductionData() pulumi.ArrayOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) []interface{} { return v.ProductionData }).(pulumi.ArrayOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ModelPerformanceSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The reference data used as the basis to calculate model performance.
func (o ModelPerformanceSignalResponseOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'ModelPerformance'.
func (o ModelPerformanceSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelPerformanceSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

type ModelSettings struct {
	// [Required]
	ModelId string `pulumi:"modelId"`
}

// ModelSettingsInput is an input type that accepts ModelSettingsArgs and ModelSettingsOutput values.
// You can construct a concrete instance of `ModelSettingsInput` via:
//
//	ModelSettingsArgs{...}
type ModelSettingsInput interface {
	pulumi.Input

	ToModelSettingsOutput() ModelSettingsOutput
	ToModelSettingsOutputWithContext(context.Context) ModelSettingsOutput
}

type ModelSettingsArgs struct {
	// [Required]
	ModelId pulumi.StringInput `pulumi:"modelId"`
}

func (ModelSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelSettings)(nil)).Elem()
}

func (i ModelSettingsArgs) ToModelSettingsOutput() ModelSettingsOutput {
	return i.ToModelSettingsOutputWithContext(context.Background())
}

func (i ModelSettingsArgs) ToModelSettingsOutputWithContext(ctx context.Context) ModelSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelSettingsOutput)
}

func (i ModelSettingsArgs) ToModelSettingsPtrOutput() ModelSettingsPtrOutput {
	return i.ToModelSettingsPtrOutputWithContext(context.Background())
}

func (i ModelSettingsArgs) ToModelSettingsPtrOutputWithContext(ctx context.Context) ModelSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelSettingsOutput).ToModelSettingsPtrOutputWithContext(ctx)
}

// ModelSettingsPtrInput is an input type that accepts ModelSettingsArgs, ModelSettingsPtr and ModelSettingsPtrOutput values.
// You can construct a concrete instance of `ModelSettingsPtrInput` via:
//
//	        ModelSettingsArgs{...}
//
//	or:
//
//	        nil
type ModelSettingsPtrInput interface {
	pulumi.Input

	ToModelSettingsPtrOutput() ModelSettingsPtrOutput
	ToModelSettingsPtrOutputWithContext(context.Context) ModelSettingsPtrOutput
}

type modelSettingsPtrType ModelSettingsArgs

func ModelSettingsPtr(v *ModelSettingsArgs) ModelSettingsPtrInput {
	return (*modelSettingsPtrType)(v)
}

func (*modelSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelSettings)(nil)).Elem()
}

func (i *modelSettingsPtrType) ToModelSettingsPtrOutput() ModelSettingsPtrOutput {
	return i.ToModelSettingsPtrOutputWithContext(context.Background())
}

func (i *modelSettingsPtrType) ToModelSettingsPtrOutputWithContext(ctx context.Context) ModelSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelSettingsPtrOutput)
}

type ModelSettingsOutput struct{ *pulumi.OutputState }

func (ModelSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelSettings)(nil)).Elem()
}

func (o ModelSettingsOutput) ToModelSettingsOutput() ModelSettingsOutput {
	return o
}

func (o ModelSettingsOutput) ToModelSettingsOutputWithContext(ctx context.Context) ModelSettingsOutput {
	return o
}

func (o ModelSettingsOutput) ToModelSettingsPtrOutput() ModelSettingsPtrOutput {
	return o.ToModelSettingsPtrOutputWithContext(context.Background())
}

func (o ModelSettingsOutput) ToModelSettingsPtrOutputWithContext(ctx context.Context) ModelSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelSettings) *ModelSettings {
		return &v
	}).(ModelSettingsPtrOutput)
}

// [Required]
func (o ModelSettingsOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelSettings) string { return v.ModelId }).(pulumi.StringOutput)
}

type ModelSettingsPtrOutput struct{ *pulumi.OutputState }

func (ModelSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelSettings)(nil)).Elem()
}

func (o ModelSettingsPtrOutput) ToModelSettingsPtrOutput() ModelSettingsPtrOutput {
	return o
}

func (o ModelSettingsPtrOutput) ToModelSettingsPtrOutputWithContext(ctx context.Context) ModelSettingsPtrOutput {
	return o
}

func (o ModelSettingsPtrOutput) Elem() ModelSettingsOutput {
	return o.ApplyT(func(v *ModelSettings) ModelSettings {
		if v != nil {
			return *v
		}
		var ret ModelSettings
		return ret
	}).(ModelSettingsOutput)
}

// [Required]
func (o ModelSettingsPtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ModelId
	}).(pulumi.StringPtrOutput)
}

type ModelSettingsResponse struct {
	// [Required]
	ModelId string `pulumi:"modelId"`
}

type ModelSettingsResponseOutput struct{ *pulumi.OutputState }

func (ModelSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelSettingsResponse)(nil)).Elem()
}

func (o ModelSettingsResponseOutput) ToModelSettingsResponseOutput() ModelSettingsResponseOutput {
	return o
}

func (o ModelSettingsResponseOutput) ToModelSettingsResponseOutputWithContext(ctx context.Context) ModelSettingsResponseOutput {
	return o
}

// [Required]
func (o ModelSettingsResponseOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelSettingsResponse) string { return v.ModelId }).(pulumi.StringOutput)
}

type ModelSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ModelSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelSettingsResponse)(nil)).Elem()
}

func (o ModelSettingsResponsePtrOutput) ToModelSettingsResponsePtrOutput() ModelSettingsResponsePtrOutput {
	return o
}

func (o ModelSettingsResponsePtrOutput) ToModelSettingsResponsePtrOutputWithContext(ctx context.Context) ModelSettingsResponsePtrOutput {
	return o
}

func (o ModelSettingsResponsePtrOutput) Elem() ModelSettingsResponseOutput {
	return o.ApplyT(func(v *ModelSettingsResponse) ModelSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ModelSettingsResponse
		return ret
	}).(ModelSettingsResponseOutput)
}

// [Required]
func (o ModelSettingsResponsePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ModelId
	}).(pulumi.StringPtrOutput)
}

// Model asset version details.
type ModelVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorData `pulumi:"flavors"`
	// Intellectual Property details. Used if model is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionType
func (val *ModelVersionType) Defaults() *ModelVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelVersionTypeInput is an input type that accepts ModelVersionTypeArgs and ModelVersionTypeOutput values.
// You can construct a concrete instance of `ModelVersionTypeInput` via:
//
//	ModelVersionTypeArgs{...}
type ModelVersionTypeInput interface {
	pulumi.Input

	ToModelVersionTypeOutput() ModelVersionTypeOutput
	ToModelVersionTypeOutputWithContext(context.Context) ModelVersionTypeOutput
}

// Model asset version details.
type ModelVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors FlavorDataMapInput `pulumi:"flavors"`
	// Intellectual Property details. Used if model is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri pulumi.StringPtrInput `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionTypeArgs
func (val *ModelVersionTypeArgs) Defaults() *ModelVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return i.ToModelVersionTypeOutputWithContext(context.Background())
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelVersionTypeOutput)
}

// Model asset version details.
type ModelVersionTypeOutput struct{ *pulumi.OutputState }

func (ModelVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return o
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o ModelVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o ModelVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionTypeOutput) Flavors() FlavorDataMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]FlavorData { return v.Flavors }).(FlavorDataMapOutput)
}

// Intellectual Property details. Used if model is an Intellectual Property.
func (o ModelVersionTypeOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o ModelVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o ModelVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionTypeOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionTypeOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionTypeOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorDataResponse `pulumi:"flavors"`
	// Intellectual Property details. Used if model is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionResponse
func (val *ModelVersionResponse) Defaults() *ModelVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Model asset version details.
type ModelVersionResponseOutput struct{ *pulumi.OutputState }

func (ModelVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionResponse)(nil)).Elem()
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutput() ModelVersionResponseOutput {
	return o
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutputWithContext(ctx context.Context) ModelVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o ModelVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o ModelVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionResponseOutput) Flavors() FlavorDataResponseMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]FlavorDataResponse { return v.Flavors }).(FlavorDataResponseMapOutput)
}

// Intellectual Property details. Used if model is an Intellectual Property.
func (o ModelVersionResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o ModelVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o ModelVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionResponseOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionResponseOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionResponseOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model version.
func (o ModelVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type MonitorDefinition struct {
	// The monitor's notification settings.
	AlertNotificationSettings *MonitorNotificationSettings `pulumi:"alertNotificationSettings"`
	// [Required] The ARM resource ID of the compute resource to run the monitoring job on.
	ComputeConfiguration MonitorServerlessSparkCompute `pulumi:"computeConfiguration"`
	// The ARM resource ID of either the model or deployment targeted by this monitor.
	MonitoringTarget *MonitoringTarget `pulumi:"monitoringTarget"`
	// [Required] The signals to monitor.
	Signals map[string]interface{} `pulumi:"signals"`
}

// MonitorDefinitionInput is an input type that accepts MonitorDefinitionArgs and MonitorDefinitionOutput values.
// You can construct a concrete instance of `MonitorDefinitionInput` via:
//
//	MonitorDefinitionArgs{...}
type MonitorDefinitionInput interface {
	pulumi.Input

	ToMonitorDefinitionOutput() MonitorDefinitionOutput
	ToMonitorDefinitionOutputWithContext(context.Context) MonitorDefinitionOutput
}

type MonitorDefinitionArgs struct {
	// The monitor's notification settings.
	AlertNotificationSettings MonitorNotificationSettingsPtrInput `pulumi:"alertNotificationSettings"`
	// [Required] The ARM resource ID of the compute resource to run the monitoring job on.
	ComputeConfiguration MonitorServerlessSparkComputeInput `pulumi:"computeConfiguration"`
	// The ARM resource ID of either the model or deployment targeted by this monitor.
	MonitoringTarget MonitoringTargetPtrInput `pulumi:"monitoringTarget"`
	// [Required] The signals to monitor.
	Signals pulumi.MapInput `pulumi:"signals"`
}

func (MonitorDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDefinition)(nil)).Elem()
}

func (i MonitorDefinitionArgs) ToMonitorDefinitionOutput() MonitorDefinitionOutput {
	return i.ToMonitorDefinitionOutputWithContext(context.Background())
}

func (i MonitorDefinitionArgs) ToMonitorDefinitionOutputWithContext(ctx context.Context) MonitorDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorDefinitionOutput)
}

type MonitorDefinitionOutput struct{ *pulumi.OutputState }

func (MonitorDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDefinition)(nil)).Elem()
}

func (o MonitorDefinitionOutput) ToMonitorDefinitionOutput() MonitorDefinitionOutput {
	return o
}

func (o MonitorDefinitionOutput) ToMonitorDefinitionOutputWithContext(ctx context.Context) MonitorDefinitionOutput {
	return o
}

// The monitor's notification settings.
func (o MonitorDefinitionOutput) AlertNotificationSettings() MonitorNotificationSettingsPtrOutput {
	return o.ApplyT(func(v MonitorDefinition) *MonitorNotificationSettings { return v.AlertNotificationSettings }).(MonitorNotificationSettingsPtrOutput)
}

// [Required] The ARM resource ID of the compute resource to run the monitoring job on.
func (o MonitorDefinitionOutput) ComputeConfiguration() MonitorServerlessSparkComputeOutput {
	return o.ApplyT(func(v MonitorDefinition) MonitorServerlessSparkCompute { return v.ComputeConfiguration }).(MonitorServerlessSparkComputeOutput)
}

// The ARM resource ID of either the model or deployment targeted by this monitor.
func (o MonitorDefinitionOutput) MonitoringTarget() MonitoringTargetPtrOutput {
	return o.ApplyT(func(v MonitorDefinition) *MonitoringTarget { return v.MonitoringTarget }).(MonitoringTargetPtrOutput)
}

// [Required] The signals to monitor.
func (o MonitorDefinitionOutput) Signals() pulumi.MapOutput {
	return o.ApplyT(func(v MonitorDefinition) map[string]interface{} { return v.Signals }).(pulumi.MapOutput)
}

type MonitorDefinitionResponse struct {
	// The monitor's notification settings.
	AlertNotificationSettings *MonitorNotificationSettingsResponse `pulumi:"alertNotificationSettings"`
	// [Required] The ARM resource ID of the compute resource to run the monitoring job on.
	ComputeConfiguration MonitorServerlessSparkComputeResponse `pulumi:"computeConfiguration"`
	// The ARM resource ID of either the model or deployment targeted by this monitor.
	MonitoringTarget *MonitoringTargetResponse `pulumi:"monitoringTarget"`
	// [Required] The signals to monitor.
	Signals map[string]interface{} `pulumi:"signals"`
}

type MonitorDefinitionResponseOutput struct{ *pulumi.OutputState }

func (MonitorDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorDefinitionResponse)(nil)).Elem()
}

func (o MonitorDefinitionResponseOutput) ToMonitorDefinitionResponseOutput() MonitorDefinitionResponseOutput {
	return o
}

func (o MonitorDefinitionResponseOutput) ToMonitorDefinitionResponseOutputWithContext(ctx context.Context) MonitorDefinitionResponseOutput {
	return o
}

// The monitor's notification settings.
func (o MonitorDefinitionResponseOutput) AlertNotificationSettings() MonitorNotificationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MonitorDefinitionResponse) *MonitorNotificationSettingsResponse {
		return v.AlertNotificationSettings
	}).(MonitorNotificationSettingsResponsePtrOutput)
}

// [Required] The ARM resource ID of the compute resource to run the monitoring job on.
func (o MonitorDefinitionResponseOutput) ComputeConfiguration() MonitorServerlessSparkComputeResponseOutput {
	return o.ApplyT(func(v MonitorDefinitionResponse) MonitorServerlessSparkComputeResponse { return v.ComputeConfiguration }).(MonitorServerlessSparkComputeResponseOutput)
}

// The ARM resource ID of either the model or deployment targeted by this monitor.
func (o MonitorDefinitionResponseOutput) MonitoringTarget() MonitoringTargetResponsePtrOutput {
	return o.ApplyT(func(v MonitorDefinitionResponse) *MonitoringTargetResponse { return v.MonitoringTarget }).(MonitoringTargetResponsePtrOutput)
}

// [Required] The signals to monitor.
func (o MonitorDefinitionResponseOutput) Signals() pulumi.MapOutput {
	return o.ApplyT(func(v MonitorDefinitionResponse) map[string]interface{} { return v.Signals }).(pulumi.MapOutput)
}

type MonitorEmailNotificationSettings struct {
	// This is the email recipient list which has a limitation of 499 characters in total.
	Emails []string `pulumi:"emails"`
}

// MonitorEmailNotificationSettingsInput is an input type that accepts MonitorEmailNotificationSettingsArgs and MonitorEmailNotificationSettingsOutput values.
// You can construct a concrete instance of `MonitorEmailNotificationSettingsInput` via:
//
//	MonitorEmailNotificationSettingsArgs{...}
type MonitorEmailNotificationSettingsInput interface {
	pulumi.Input

	ToMonitorEmailNotificationSettingsOutput() MonitorEmailNotificationSettingsOutput
	ToMonitorEmailNotificationSettingsOutputWithContext(context.Context) MonitorEmailNotificationSettingsOutput
}

type MonitorEmailNotificationSettingsArgs struct {
	// This is the email recipient list which has a limitation of 499 characters in total.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
}

func (MonitorEmailNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorEmailNotificationSettings)(nil)).Elem()
}

func (i MonitorEmailNotificationSettingsArgs) ToMonitorEmailNotificationSettingsOutput() MonitorEmailNotificationSettingsOutput {
	return i.ToMonitorEmailNotificationSettingsOutputWithContext(context.Background())
}

func (i MonitorEmailNotificationSettingsArgs) ToMonitorEmailNotificationSettingsOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorEmailNotificationSettingsOutput)
}

func (i MonitorEmailNotificationSettingsArgs) ToMonitorEmailNotificationSettingsPtrOutput() MonitorEmailNotificationSettingsPtrOutput {
	return i.ToMonitorEmailNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i MonitorEmailNotificationSettingsArgs) ToMonitorEmailNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorEmailNotificationSettingsOutput).ToMonitorEmailNotificationSettingsPtrOutputWithContext(ctx)
}

// MonitorEmailNotificationSettingsPtrInput is an input type that accepts MonitorEmailNotificationSettingsArgs, MonitorEmailNotificationSettingsPtr and MonitorEmailNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `MonitorEmailNotificationSettingsPtrInput` via:
//
//	        MonitorEmailNotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type MonitorEmailNotificationSettingsPtrInput interface {
	pulumi.Input

	ToMonitorEmailNotificationSettingsPtrOutput() MonitorEmailNotificationSettingsPtrOutput
	ToMonitorEmailNotificationSettingsPtrOutputWithContext(context.Context) MonitorEmailNotificationSettingsPtrOutput
}

type monitorEmailNotificationSettingsPtrType MonitorEmailNotificationSettingsArgs

func MonitorEmailNotificationSettingsPtr(v *MonitorEmailNotificationSettingsArgs) MonitorEmailNotificationSettingsPtrInput {
	return (*monitorEmailNotificationSettingsPtrType)(v)
}

func (*monitorEmailNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorEmailNotificationSettings)(nil)).Elem()
}

func (i *monitorEmailNotificationSettingsPtrType) ToMonitorEmailNotificationSettingsPtrOutput() MonitorEmailNotificationSettingsPtrOutput {
	return i.ToMonitorEmailNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *monitorEmailNotificationSettingsPtrType) ToMonitorEmailNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorEmailNotificationSettingsPtrOutput)
}

type MonitorEmailNotificationSettingsOutput struct{ *pulumi.OutputState }

func (MonitorEmailNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorEmailNotificationSettings)(nil)).Elem()
}

func (o MonitorEmailNotificationSettingsOutput) ToMonitorEmailNotificationSettingsOutput() MonitorEmailNotificationSettingsOutput {
	return o
}

func (o MonitorEmailNotificationSettingsOutput) ToMonitorEmailNotificationSettingsOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsOutput {
	return o
}

func (o MonitorEmailNotificationSettingsOutput) ToMonitorEmailNotificationSettingsPtrOutput() MonitorEmailNotificationSettingsPtrOutput {
	return o.ToMonitorEmailNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o MonitorEmailNotificationSettingsOutput) ToMonitorEmailNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorEmailNotificationSettings) *MonitorEmailNotificationSettings {
		return &v
	}).(MonitorEmailNotificationSettingsPtrOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total.
func (o MonitorEmailNotificationSettingsOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorEmailNotificationSettings) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

type MonitorEmailNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MonitorEmailNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorEmailNotificationSettings)(nil)).Elem()
}

func (o MonitorEmailNotificationSettingsPtrOutput) ToMonitorEmailNotificationSettingsPtrOutput() MonitorEmailNotificationSettingsPtrOutput {
	return o
}

func (o MonitorEmailNotificationSettingsPtrOutput) ToMonitorEmailNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsPtrOutput {
	return o
}

func (o MonitorEmailNotificationSettingsPtrOutput) Elem() MonitorEmailNotificationSettingsOutput {
	return o.ApplyT(func(v *MonitorEmailNotificationSettings) MonitorEmailNotificationSettings {
		if v != nil {
			return *v
		}
		var ret MonitorEmailNotificationSettings
		return ret
	}).(MonitorEmailNotificationSettingsOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total.
func (o MonitorEmailNotificationSettingsPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitorEmailNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

type MonitorEmailNotificationSettingsResponse struct {
	// This is the email recipient list which has a limitation of 499 characters in total.
	Emails []string `pulumi:"emails"`
}

type MonitorEmailNotificationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MonitorEmailNotificationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorEmailNotificationSettingsResponse)(nil)).Elem()
}

func (o MonitorEmailNotificationSettingsResponseOutput) ToMonitorEmailNotificationSettingsResponseOutput() MonitorEmailNotificationSettingsResponseOutput {
	return o
}

func (o MonitorEmailNotificationSettingsResponseOutput) ToMonitorEmailNotificationSettingsResponseOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsResponseOutput {
	return o
}

// This is the email recipient list which has a limitation of 499 characters in total.
func (o MonitorEmailNotificationSettingsResponseOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitorEmailNotificationSettingsResponse) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

type MonitorEmailNotificationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitorEmailNotificationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorEmailNotificationSettingsResponse)(nil)).Elem()
}

func (o MonitorEmailNotificationSettingsResponsePtrOutput) ToMonitorEmailNotificationSettingsResponsePtrOutput() MonitorEmailNotificationSettingsResponsePtrOutput {
	return o
}

func (o MonitorEmailNotificationSettingsResponsePtrOutput) ToMonitorEmailNotificationSettingsResponsePtrOutputWithContext(ctx context.Context) MonitorEmailNotificationSettingsResponsePtrOutput {
	return o
}

func (o MonitorEmailNotificationSettingsResponsePtrOutput) Elem() MonitorEmailNotificationSettingsResponseOutput {
	return o.ApplyT(func(v *MonitorEmailNotificationSettingsResponse) MonitorEmailNotificationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MonitorEmailNotificationSettingsResponse
		return ret
	}).(MonitorEmailNotificationSettingsResponseOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total.
func (o MonitorEmailNotificationSettingsResponsePtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitorEmailNotificationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

type MonitorNotificationSettings struct {
	// The AML notification email settings.
	EmailNotificationSettings *MonitorEmailNotificationSettings `pulumi:"emailNotificationSettings"`
}

// MonitorNotificationSettingsInput is an input type that accepts MonitorNotificationSettingsArgs and MonitorNotificationSettingsOutput values.
// You can construct a concrete instance of `MonitorNotificationSettingsInput` via:
//
//	MonitorNotificationSettingsArgs{...}
type MonitorNotificationSettingsInput interface {
	pulumi.Input

	ToMonitorNotificationSettingsOutput() MonitorNotificationSettingsOutput
	ToMonitorNotificationSettingsOutputWithContext(context.Context) MonitorNotificationSettingsOutput
}

type MonitorNotificationSettingsArgs struct {
	// The AML notification email settings.
	EmailNotificationSettings MonitorEmailNotificationSettingsPtrInput `pulumi:"emailNotificationSettings"`
}

func (MonitorNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotificationSettings)(nil)).Elem()
}

func (i MonitorNotificationSettingsArgs) ToMonitorNotificationSettingsOutput() MonitorNotificationSettingsOutput {
	return i.ToMonitorNotificationSettingsOutputWithContext(context.Background())
}

func (i MonitorNotificationSettingsArgs) ToMonitorNotificationSettingsOutputWithContext(ctx context.Context) MonitorNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationSettingsOutput)
}

func (i MonitorNotificationSettingsArgs) ToMonitorNotificationSettingsPtrOutput() MonitorNotificationSettingsPtrOutput {
	return i.ToMonitorNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i MonitorNotificationSettingsArgs) ToMonitorNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationSettingsOutput).ToMonitorNotificationSettingsPtrOutputWithContext(ctx)
}

// MonitorNotificationSettingsPtrInput is an input type that accepts MonitorNotificationSettingsArgs, MonitorNotificationSettingsPtr and MonitorNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `MonitorNotificationSettingsPtrInput` via:
//
//	        MonitorNotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type MonitorNotificationSettingsPtrInput interface {
	pulumi.Input

	ToMonitorNotificationSettingsPtrOutput() MonitorNotificationSettingsPtrOutput
	ToMonitorNotificationSettingsPtrOutputWithContext(context.Context) MonitorNotificationSettingsPtrOutput
}

type monitorNotificationSettingsPtrType MonitorNotificationSettingsArgs

func MonitorNotificationSettingsPtr(v *MonitorNotificationSettingsArgs) MonitorNotificationSettingsPtrInput {
	return (*monitorNotificationSettingsPtrType)(v)
}

func (*monitorNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorNotificationSettings)(nil)).Elem()
}

func (i *monitorNotificationSettingsPtrType) ToMonitorNotificationSettingsPtrOutput() MonitorNotificationSettingsPtrOutput {
	return i.ToMonitorNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *monitorNotificationSettingsPtrType) ToMonitorNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorNotificationSettingsPtrOutput)
}

type MonitorNotificationSettingsOutput struct{ *pulumi.OutputState }

func (MonitorNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotificationSettings)(nil)).Elem()
}

func (o MonitorNotificationSettingsOutput) ToMonitorNotificationSettingsOutput() MonitorNotificationSettingsOutput {
	return o
}

func (o MonitorNotificationSettingsOutput) ToMonitorNotificationSettingsOutputWithContext(ctx context.Context) MonitorNotificationSettingsOutput {
	return o
}

func (o MonitorNotificationSettingsOutput) ToMonitorNotificationSettingsPtrOutput() MonitorNotificationSettingsPtrOutput {
	return o.ToMonitorNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o MonitorNotificationSettingsOutput) ToMonitorNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorNotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitorNotificationSettings) *MonitorNotificationSettings {
		return &v
	}).(MonitorNotificationSettingsPtrOutput)
}

// The AML notification email settings.
func (o MonitorNotificationSettingsOutput) EmailNotificationSettings() MonitorEmailNotificationSettingsPtrOutput {
	return o.ApplyT(func(v MonitorNotificationSettings) *MonitorEmailNotificationSettings {
		return v.EmailNotificationSettings
	}).(MonitorEmailNotificationSettingsPtrOutput)
}

type MonitorNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MonitorNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorNotificationSettings)(nil)).Elem()
}

func (o MonitorNotificationSettingsPtrOutput) ToMonitorNotificationSettingsPtrOutput() MonitorNotificationSettingsPtrOutput {
	return o
}

func (o MonitorNotificationSettingsPtrOutput) ToMonitorNotificationSettingsPtrOutputWithContext(ctx context.Context) MonitorNotificationSettingsPtrOutput {
	return o
}

func (o MonitorNotificationSettingsPtrOutput) Elem() MonitorNotificationSettingsOutput {
	return o.ApplyT(func(v *MonitorNotificationSettings) MonitorNotificationSettings {
		if v != nil {
			return *v
		}
		var ret MonitorNotificationSettings
		return ret
	}).(MonitorNotificationSettingsOutput)
}

// The AML notification email settings.
func (o MonitorNotificationSettingsPtrOutput) EmailNotificationSettings() MonitorEmailNotificationSettingsPtrOutput {
	return o.ApplyT(func(v *MonitorNotificationSettings) *MonitorEmailNotificationSettings {
		if v == nil {
			return nil
		}
		return v.EmailNotificationSettings
	}).(MonitorEmailNotificationSettingsPtrOutput)
}

type MonitorNotificationSettingsResponse struct {
	// The AML notification email settings.
	EmailNotificationSettings *MonitorEmailNotificationSettingsResponse `pulumi:"emailNotificationSettings"`
}

type MonitorNotificationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MonitorNotificationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorNotificationSettingsResponse)(nil)).Elem()
}

func (o MonitorNotificationSettingsResponseOutput) ToMonitorNotificationSettingsResponseOutput() MonitorNotificationSettingsResponseOutput {
	return o
}

func (o MonitorNotificationSettingsResponseOutput) ToMonitorNotificationSettingsResponseOutputWithContext(ctx context.Context) MonitorNotificationSettingsResponseOutput {
	return o
}

// The AML notification email settings.
func (o MonitorNotificationSettingsResponseOutput) EmailNotificationSettings() MonitorEmailNotificationSettingsResponsePtrOutput {
	return o.ApplyT(func(v MonitorNotificationSettingsResponse) *MonitorEmailNotificationSettingsResponse {
		return v.EmailNotificationSettings
	}).(MonitorEmailNotificationSettingsResponsePtrOutput)
}

type MonitorNotificationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitorNotificationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitorNotificationSettingsResponse)(nil)).Elem()
}

func (o MonitorNotificationSettingsResponsePtrOutput) ToMonitorNotificationSettingsResponsePtrOutput() MonitorNotificationSettingsResponsePtrOutput {
	return o
}

func (o MonitorNotificationSettingsResponsePtrOutput) ToMonitorNotificationSettingsResponsePtrOutputWithContext(ctx context.Context) MonitorNotificationSettingsResponsePtrOutput {
	return o
}

func (o MonitorNotificationSettingsResponsePtrOutput) Elem() MonitorNotificationSettingsResponseOutput {
	return o.ApplyT(func(v *MonitorNotificationSettingsResponse) MonitorNotificationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MonitorNotificationSettingsResponse
		return ret
	}).(MonitorNotificationSettingsResponseOutput)
}

// The AML notification email settings.
func (o MonitorNotificationSettingsResponsePtrOutput) EmailNotificationSettings() MonitorEmailNotificationSettingsResponsePtrOutput {
	return o.ApplyT(func(v *MonitorNotificationSettingsResponse) *MonitorEmailNotificationSettingsResponse {
		if v == nil {
			return nil
		}
		return v.EmailNotificationSettings
	}).(MonitorEmailNotificationSettingsResponsePtrOutput)
}

// Monitor serverless spark compute definition.
type MonitorServerlessSparkCompute struct {
	// [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
	ComputeIdentity interface{} `pulumi:"computeIdentity"`
	// Monitor compute type enum.
	// Expected value is 'ServerlessSpark'.
	ComputeType string `pulumi:"computeType"`
	// [Required] The instance type running the Spark job.
	InstanceType string `pulumi:"instanceType"`
	// [Required] The Spark runtime version.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// MonitorServerlessSparkComputeInput is an input type that accepts MonitorServerlessSparkComputeArgs and MonitorServerlessSparkComputeOutput values.
// You can construct a concrete instance of `MonitorServerlessSparkComputeInput` via:
//
//	MonitorServerlessSparkComputeArgs{...}
type MonitorServerlessSparkComputeInput interface {
	pulumi.Input

	ToMonitorServerlessSparkComputeOutput() MonitorServerlessSparkComputeOutput
	ToMonitorServerlessSparkComputeOutputWithContext(context.Context) MonitorServerlessSparkComputeOutput
}

// Monitor serverless spark compute definition.
type MonitorServerlessSparkComputeArgs struct {
	// [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
	ComputeIdentity pulumi.Input `pulumi:"computeIdentity"`
	// Monitor compute type enum.
	// Expected value is 'ServerlessSpark'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// [Required] The instance type running the Spark job.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// [Required] The Spark runtime version.
	RuntimeVersion pulumi.StringInput `pulumi:"runtimeVersion"`
}

func (MonitorServerlessSparkComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorServerlessSparkCompute)(nil)).Elem()
}

func (i MonitorServerlessSparkComputeArgs) ToMonitorServerlessSparkComputeOutput() MonitorServerlessSparkComputeOutput {
	return i.ToMonitorServerlessSparkComputeOutputWithContext(context.Background())
}

func (i MonitorServerlessSparkComputeArgs) ToMonitorServerlessSparkComputeOutputWithContext(ctx context.Context) MonitorServerlessSparkComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorServerlessSparkComputeOutput)
}

// Monitor serverless spark compute definition.
type MonitorServerlessSparkComputeOutput struct{ *pulumi.OutputState }

func (MonitorServerlessSparkComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorServerlessSparkCompute)(nil)).Elem()
}

func (o MonitorServerlessSparkComputeOutput) ToMonitorServerlessSparkComputeOutput() MonitorServerlessSparkComputeOutput {
	return o
}

func (o MonitorServerlessSparkComputeOutput) ToMonitorServerlessSparkComputeOutputWithContext(ctx context.Context) MonitorServerlessSparkComputeOutput {
	return o
}

// [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
func (o MonitorServerlessSparkComputeOutput) ComputeIdentity() pulumi.AnyOutput {
	return o.ApplyT(func(v MonitorServerlessSparkCompute) interface{} { return v.ComputeIdentity }).(pulumi.AnyOutput)
}

// Monitor compute type enum.
// Expected value is 'ServerlessSpark'.
func (o MonitorServerlessSparkComputeOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkCompute) string { return v.ComputeType }).(pulumi.StringOutput)
}

// [Required] The instance type running the Spark job.
func (o MonitorServerlessSparkComputeOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkCompute) string { return v.InstanceType }).(pulumi.StringOutput)
}

// [Required] The Spark runtime version.
func (o MonitorServerlessSparkComputeOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkCompute) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// Monitor serverless spark compute definition.
type MonitorServerlessSparkComputeResponse struct {
	// [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
	ComputeIdentity interface{} `pulumi:"computeIdentity"`
	// Monitor compute type enum.
	// Expected value is 'ServerlessSpark'.
	ComputeType string `pulumi:"computeType"`
	// [Required] The instance type running the Spark job.
	InstanceType string `pulumi:"instanceType"`
	// [Required] The Spark runtime version.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// Monitor serverless spark compute definition.
type MonitorServerlessSparkComputeResponseOutput struct{ *pulumi.OutputState }

func (MonitorServerlessSparkComputeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitorServerlessSparkComputeResponse)(nil)).Elem()
}

func (o MonitorServerlessSparkComputeResponseOutput) ToMonitorServerlessSparkComputeResponseOutput() MonitorServerlessSparkComputeResponseOutput {
	return o
}

func (o MonitorServerlessSparkComputeResponseOutput) ToMonitorServerlessSparkComputeResponseOutputWithContext(ctx context.Context) MonitorServerlessSparkComputeResponseOutput {
	return o
}

// [Required] The identity scheme leveraged to by the spark jobs running on serverless Spark.
func (o MonitorServerlessSparkComputeResponseOutput) ComputeIdentity() pulumi.AnyOutput {
	return o.ApplyT(func(v MonitorServerlessSparkComputeResponse) interface{} { return v.ComputeIdentity }).(pulumi.AnyOutput)
}

// Monitor compute type enum.
// Expected value is 'ServerlessSpark'.
func (o MonitorServerlessSparkComputeResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkComputeResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// [Required] The instance type running the Spark job.
func (o MonitorServerlessSparkComputeResponseOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkComputeResponse) string { return v.InstanceType }).(pulumi.StringOutput)
}

// [Required] The Spark runtime version.
func (o MonitorServerlessSparkComputeResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v MonitorServerlessSparkComputeResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

type MonitoringDataSegment struct {
	// The feature to segment the data on.
	Feature *string `pulumi:"feature"`
	// Filters for only the specified values of the given segmented feature.
	Values []string `pulumi:"values"`
}

// MonitoringDataSegmentInput is an input type that accepts MonitoringDataSegmentArgs and MonitoringDataSegmentOutput values.
// You can construct a concrete instance of `MonitoringDataSegmentInput` via:
//
//	MonitoringDataSegmentArgs{...}
type MonitoringDataSegmentInput interface {
	pulumi.Input

	ToMonitoringDataSegmentOutput() MonitoringDataSegmentOutput
	ToMonitoringDataSegmentOutputWithContext(context.Context) MonitoringDataSegmentOutput
}

type MonitoringDataSegmentArgs struct {
	// The feature to segment the data on.
	Feature pulumi.StringPtrInput `pulumi:"feature"`
	// Filters for only the specified values of the given segmented feature.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (MonitoringDataSegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringDataSegment)(nil)).Elem()
}

func (i MonitoringDataSegmentArgs) ToMonitoringDataSegmentOutput() MonitoringDataSegmentOutput {
	return i.ToMonitoringDataSegmentOutputWithContext(context.Background())
}

func (i MonitoringDataSegmentArgs) ToMonitoringDataSegmentOutputWithContext(ctx context.Context) MonitoringDataSegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDataSegmentOutput)
}

func (i MonitoringDataSegmentArgs) ToMonitoringDataSegmentPtrOutput() MonitoringDataSegmentPtrOutput {
	return i.ToMonitoringDataSegmentPtrOutputWithContext(context.Background())
}

func (i MonitoringDataSegmentArgs) ToMonitoringDataSegmentPtrOutputWithContext(ctx context.Context) MonitoringDataSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDataSegmentOutput).ToMonitoringDataSegmentPtrOutputWithContext(ctx)
}

// MonitoringDataSegmentPtrInput is an input type that accepts MonitoringDataSegmentArgs, MonitoringDataSegmentPtr and MonitoringDataSegmentPtrOutput values.
// You can construct a concrete instance of `MonitoringDataSegmentPtrInput` via:
//
//	        MonitoringDataSegmentArgs{...}
//
//	or:
//
//	        nil
type MonitoringDataSegmentPtrInput interface {
	pulumi.Input

	ToMonitoringDataSegmentPtrOutput() MonitoringDataSegmentPtrOutput
	ToMonitoringDataSegmentPtrOutputWithContext(context.Context) MonitoringDataSegmentPtrOutput
}

type monitoringDataSegmentPtrType MonitoringDataSegmentArgs

func MonitoringDataSegmentPtr(v *MonitoringDataSegmentArgs) MonitoringDataSegmentPtrInput {
	return (*monitoringDataSegmentPtrType)(v)
}

func (*monitoringDataSegmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringDataSegment)(nil)).Elem()
}

func (i *monitoringDataSegmentPtrType) ToMonitoringDataSegmentPtrOutput() MonitoringDataSegmentPtrOutput {
	return i.ToMonitoringDataSegmentPtrOutputWithContext(context.Background())
}

func (i *monitoringDataSegmentPtrType) ToMonitoringDataSegmentPtrOutputWithContext(ctx context.Context) MonitoringDataSegmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringDataSegmentPtrOutput)
}

type MonitoringDataSegmentOutput struct{ *pulumi.OutputState }

func (MonitoringDataSegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringDataSegment)(nil)).Elem()
}

func (o MonitoringDataSegmentOutput) ToMonitoringDataSegmentOutput() MonitoringDataSegmentOutput {
	return o
}

func (o MonitoringDataSegmentOutput) ToMonitoringDataSegmentOutputWithContext(ctx context.Context) MonitoringDataSegmentOutput {
	return o
}

func (o MonitoringDataSegmentOutput) ToMonitoringDataSegmentPtrOutput() MonitoringDataSegmentPtrOutput {
	return o.ToMonitoringDataSegmentPtrOutputWithContext(context.Background())
}

func (o MonitoringDataSegmentOutput) ToMonitoringDataSegmentPtrOutputWithContext(ctx context.Context) MonitoringDataSegmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringDataSegment) *MonitoringDataSegment {
		return &v
	}).(MonitoringDataSegmentPtrOutput)
}

// The feature to segment the data on.
func (o MonitoringDataSegmentOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringDataSegment) *string { return v.Feature }).(pulumi.StringPtrOutput)
}

// Filters for only the specified values of the given segmented feature.
func (o MonitoringDataSegmentOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitoringDataSegment) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MonitoringDataSegmentPtrOutput struct{ *pulumi.OutputState }

func (MonitoringDataSegmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringDataSegment)(nil)).Elem()
}

func (o MonitoringDataSegmentPtrOutput) ToMonitoringDataSegmentPtrOutput() MonitoringDataSegmentPtrOutput {
	return o
}

func (o MonitoringDataSegmentPtrOutput) ToMonitoringDataSegmentPtrOutputWithContext(ctx context.Context) MonitoringDataSegmentPtrOutput {
	return o
}

func (o MonitoringDataSegmentPtrOutput) Elem() MonitoringDataSegmentOutput {
	return o.ApplyT(func(v *MonitoringDataSegment) MonitoringDataSegment {
		if v != nil {
			return *v
		}
		var ret MonitoringDataSegment
		return ret
	}).(MonitoringDataSegmentOutput)
}

// The feature to segment the data on.
func (o MonitoringDataSegmentPtrOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringDataSegment) *string {
		if v == nil {
			return nil
		}
		return v.Feature
	}).(pulumi.StringPtrOutput)
}

// Filters for only the specified values of the given segmented feature.
func (o MonitoringDataSegmentPtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitoringDataSegment) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type MonitoringDataSegmentResponse struct {
	// The feature to segment the data on.
	Feature *string `pulumi:"feature"`
	// Filters for only the specified values of the given segmented feature.
	Values []string `pulumi:"values"`
}

type MonitoringDataSegmentResponseOutput struct{ *pulumi.OutputState }

func (MonitoringDataSegmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringDataSegmentResponse)(nil)).Elem()
}

func (o MonitoringDataSegmentResponseOutput) ToMonitoringDataSegmentResponseOutput() MonitoringDataSegmentResponseOutput {
	return o
}

func (o MonitoringDataSegmentResponseOutput) ToMonitoringDataSegmentResponseOutputWithContext(ctx context.Context) MonitoringDataSegmentResponseOutput {
	return o
}

// The feature to segment the data on.
func (o MonitoringDataSegmentResponseOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringDataSegmentResponse) *string { return v.Feature }).(pulumi.StringPtrOutput)
}

// Filters for only the specified values of the given segmented feature.
func (o MonitoringDataSegmentResponseOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MonitoringDataSegmentResponse) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type MonitoringDataSegmentResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitoringDataSegmentResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringDataSegmentResponse)(nil)).Elem()
}

func (o MonitoringDataSegmentResponsePtrOutput) ToMonitoringDataSegmentResponsePtrOutput() MonitoringDataSegmentResponsePtrOutput {
	return o
}

func (o MonitoringDataSegmentResponsePtrOutput) ToMonitoringDataSegmentResponsePtrOutputWithContext(ctx context.Context) MonitoringDataSegmentResponsePtrOutput {
	return o
}

func (o MonitoringDataSegmentResponsePtrOutput) Elem() MonitoringDataSegmentResponseOutput {
	return o.ApplyT(func(v *MonitoringDataSegmentResponse) MonitoringDataSegmentResponse {
		if v != nil {
			return *v
		}
		var ret MonitoringDataSegmentResponse
		return ret
	}).(MonitoringDataSegmentResponseOutput)
}

// The feature to segment the data on.
func (o MonitoringDataSegmentResponsePtrOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringDataSegmentResponse) *string {
		if v == nil {
			return nil
		}
		return v.Feature
	}).(pulumi.StringPtrOutput)
}

// Filters for only the specified values of the given segmented feature.
func (o MonitoringDataSegmentResponsePtrOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MonitoringDataSegmentResponse) []string {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.StringArrayOutput)
}

// Monitoring target definition.
type MonitoringTarget struct {
	// The ARM resource ID of either the deployment targeted by this monitor.
	DeploymentId *string `pulumi:"deploymentId"`
	// The ARM resource ID of either the model targeted by this monitor.
	ModelId *string `pulumi:"modelId"`
	// [Required] The machine learning task type of the model.
	TaskType string `pulumi:"taskType"`
}

// MonitoringTargetInput is an input type that accepts MonitoringTargetArgs and MonitoringTargetOutput values.
// You can construct a concrete instance of `MonitoringTargetInput` via:
//
//	MonitoringTargetArgs{...}
type MonitoringTargetInput interface {
	pulumi.Input

	ToMonitoringTargetOutput() MonitoringTargetOutput
	ToMonitoringTargetOutputWithContext(context.Context) MonitoringTargetOutput
}

// Monitoring target definition.
type MonitoringTargetArgs struct {
	// The ARM resource ID of either the deployment targeted by this monitor.
	DeploymentId pulumi.StringPtrInput `pulumi:"deploymentId"`
	// The ARM resource ID of either the model targeted by this monitor.
	ModelId pulumi.StringPtrInput `pulumi:"modelId"`
	// [Required] The machine learning task type of the model.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

func (MonitoringTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTarget)(nil)).Elem()
}

func (i MonitoringTargetArgs) ToMonitoringTargetOutput() MonitoringTargetOutput {
	return i.ToMonitoringTargetOutputWithContext(context.Background())
}

func (i MonitoringTargetArgs) ToMonitoringTargetOutputWithContext(ctx context.Context) MonitoringTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTargetOutput)
}

func (i MonitoringTargetArgs) ToMonitoringTargetPtrOutput() MonitoringTargetPtrOutput {
	return i.ToMonitoringTargetPtrOutputWithContext(context.Background())
}

func (i MonitoringTargetArgs) ToMonitoringTargetPtrOutputWithContext(ctx context.Context) MonitoringTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTargetOutput).ToMonitoringTargetPtrOutputWithContext(ctx)
}

// MonitoringTargetPtrInput is an input type that accepts MonitoringTargetArgs, MonitoringTargetPtr and MonitoringTargetPtrOutput values.
// You can construct a concrete instance of `MonitoringTargetPtrInput` via:
//
//	        MonitoringTargetArgs{...}
//
//	or:
//
//	        nil
type MonitoringTargetPtrInput interface {
	pulumi.Input

	ToMonitoringTargetPtrOutput() MonitoringTargetPtrOutput
	ToMonitoringTargetPtrOutputWithContext(context.Context) MonitoringTargetPtrOutput
}

type monitoringTargetPtrType MonitoringTargetArgs

func MonitoringTargetPtr(v *MonitoringTargetArgs) MonitoringTargetPtrInput {
	return (*monitoringTargetPtrType)(v)
}

func (*monitoringTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTarget)(nil)).Elem()
}

func (i *monitoringTargetPtrType) ToMonitoringTargetPtrOutput() MonitoringTargetPtrOutput {
	return i.ToMonitoringTargetPtrOutputWithContext(context.Background())
}

func (i *monitoringTargetPtrType) ToMonitoringTargetPtrOutputWithContext(ctx context.Context) MonitoringTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringTargetPtrOutput)
}

// Monitoring target definition.
type MonitoringTargetOutput struct{ *pulumi.OutputState }

func (MonitoringTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTarget)(nil)).Elem()
}

func (o MonitoringTargetOutput) ToMonitoringTargetOutput() MonitoringTargetOutput {
	return o
}

func (o MonitoringTargetOutput) ToMonitoringTargetOutputWithContext(ctx context.Context) MonitoringTargetOutput {
	return o
}

func (o MonitoringTargetOutput) ToMonitoringTargetPtrOutput() MonitoringTargetPtrOutput {
	return o.ToMonitoringTargetPtrOutputWithContext(context.Background())
}

func (o MonitoringTargetOutput) ToMonitoringTargetPtrOutputWithContext(ctx context.Context) MonitoringTargetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringTarget) *MonitoringTarget {
		return &v
	}).(MonitoringTargetPtrOutput)
}

// The ARM resource ID of either the deployment targeted by this monitor.
func (o MonitoringTargetOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringTarget) *string { return v.DeploymentId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of either the model targeted by this monitor.
func (o MonitoringTargetOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringTarget) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

// [Required] The machine learning task type of the model.
func (o MonitoringTargetOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringTarget) string { return v.TaskType }).(pulumi.StringOutput)
}

type MonitoringTargetPtrOutput struct{ *pulumi.OutputState }

func (MonitoringTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTarget)(nil)).Elem()
}

func (o MonitoringTargetPtrOutput) ToMonitoringTargetPtrOutput() MonitoringTargetPtrOutput {
	return o
}

func (o MonitoringTargetPtrOutput) ToMonitoringTargetPtrOutputWithContext(ctx context.Context) MonitoringTargetPtrOutput {
	return o
}

func (o MonitoringTargetPtrOutput) Elem() MonitoringTargetOutput {
	return o.ApplyT(func(v *MonitoringTarget) MonitoringTarget {
		if v != nil {
			return *v
		}
		var ret MonitoringTarget
		return ret
	}).(MonitoringTargetOutput)
}

// The ARM resource ID of either the deployment targeted by this monitor.
func (o MonitoringTargetPtrOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTarget) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentId
	}).(pulumi.StringPtrOutput)
}

// The ARM resource ID of either the model targeted by this monitor.
func (o MonitoringTargetPtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTarget) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// [Required] The machine learning task type of the model.
func (o MonitoringTargetPtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTarget) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

// Monitoring target definition.
type MonitoringTargetResponse struct {
	// The ARM resource ID of either the deployment targeted by this monitor.
	DeploymentId *string `pulumi:"deploymentId"`
	// The ARM resource ID of either the model targeted by this monitor.
	ModelId *string `pulumi:"modelId"`
	// [Required] The machine learning task type of the model.
	TaskType string `pulumi:"taskType"`
}

// Monitoring target definition.
type MonitoringTargetResponseOutput struct{ *pulumi.OutputState }

func (MonitoringTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringTargetResponse)(nil)).Elem()
}

func (o MonitoringTargetResponseOutput) ToMonitoringTargetResponseOutput() MonitoringTargetResponseOutput {
	return o
}

func (o MonitoringTargetResponseOutput) ToMonitoringTargetResponseOutputWithContext(ctx context.Context) MonitoringTargetResponseOutput {
	return o
}

// The ARM resource ID of either the deployment targeted by this monitor.
func (o MonitoringTargetResponseOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringTargetResponse) *string { return v.DeploymentId }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of either the model targeted by this monitor.
func (o MonitoringTargetResponseOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringTargetResponse) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

// [Required] The machine learning task type of the model.
func (o MonitoringTargetResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringTargetResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

type MonitoringTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitoringTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringTargetResponse)(nil)).Elem()
}

func (o MonitoringTargetResponsePtrOutput) ToMonitoringTargetResponsePtrOutput() MonitoringTargetResponsePtrOutput {
	return o
}

func (o MonitoringTargetResponsePtrOutput) ToMonitoringTargetResponsePtrOutputWithContext(ctx context.Context) MonitoringTargetResponsePtrOutput {
	return o
}

func (o MonitoringTargetResponsePtrOutput) Elem() MonitoringTargetResponseOutput {
	return o.ApplyT(func(v *MonitoringTargetResponse) MonitoringTargetResponse {
		if v != nil {
			return *v
		}
		var ret MonitoringTargetResponse
		return ret
	}).(MonitoringTargetResponseOutput)
}

// The ARM resource ID of either the deployment targeted by this monitor.
func (o MonitoringTargetResponsePtrOutput) DeploymentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentId
	}).(pulumi.StringPtrOutput)
}

// The ARM resource ID of either the model targeted by this monitor.
func (o MonitoringTargetResponsePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTargetResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// [Required] The machine learning task type of the model.
func (o MonitoringTargetResponsePtrOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TaskType
	}).(pulumi.StringPtrOutput)
}

type MonitoringThreshold struct {
	// The threshold value. If null, the set default is dependent on the metric type.
	Value *float64 `pulumi:"value"`
}

// MonitoringThresholdInput is an input type that accepts MonitoringThresholdArgs and MonitoringThresholdOutput values.
// You can construct a concrete instance of `MonitoringThresholdInput` via:
//
//	MonitoringThresholdArgs{...}
type MonitoringThresholdInput interface {
	pulumi.Input

	ToMonitoringThresholdOutput() MonitoringThresholdOutput
	ToMonitoringThresholdOutputWithContext(context.Context) MonitoringThresholdOutput
}

type MonitoringThresholdArgs struct {
	// The threshold value. If null, the set default is dependent on the metric type.
	Value pulumi.Float64PtrInput `pulumi:"value"`
}

func (MonitoringThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringThreshold)(nil)).Elem()
}

func (i MonitoringThresholdArgs) ToMonitoringThresholdOutput() MonitoringThresholdOutput {
	return i.ToMonitoringThresholdOutputWithContext(context.Background())
}

func (i MonitoringThresholdArgs) ToMonitoringThresholdOutputWithContext(ctx context.Context) MonitoringThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringThresholdOutput)
}

func (i MonitoringThresholdArgs) ToMonitoringThresholdPtrOutput() MonitoringThresholdPtrOutput {
	return i.ToMonitoringThresholdPtrOutputWithContext(context.Background())
}

func (i MonitoringThresholdArgs) ToMonitoringThresholdPtrOutputWithContext(ctx context.Context) MonitoringThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringThresholdOutput).ToMonitoringThresholdPtrOutputWithContext(ctx)
}

// MonitoringThresholdPtrInput is an input type that accepts MonitoringThresholdArgs, MonitoringThresholdPtr and MonitoringThresholdPtrOutput values.
// You can construct a concrete instance of `MonitoringThresholdPtrInput` via:
//
//	        MonitoringThresholdArgs{...}
//
//	or:
//
//	        nil
type MonitoringThresholdPtrInput interface {
	pulumi.Input

	ToMonitoringThresholdPtrOutput() MonitoringThresholdPtrOutput
	ToMonitoringThresholdPtrOutputWithContext(context.Context) MonitoringThresholdPtrOutput
}

type monitoringThresholdPtrType MonitoringThresholdArgs

func MonitoringThresholdPtr(v *MonitoringThresholdArgs) MonitoringThresholdPtrInput {
	return (*monitoringThresholdPtrType)(v)
}

func (*monitoringThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringThreshold)(nil)).Elem()
}

func (i *monitoringThresholdPtrType) ToMonitoringThresholdPtrOutput() MonitoringThresholdPtrOutput {
	return i.ToMonitoringThresholdPtrOutputWithContext(context.Background())
}

func (i *monitoringThresholdPtrType) ToMonitoringThresholdPtrOutputWithContext(ctx context.Context) MonitoringThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringThresholdPtrOutput)
}

type MonitoringThresholdOutput struct{ *pulumi.OutputState }

func (MonitoringThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringThreshold)(nil)).Elem()
}

func (o MonitoringThresholdOutput) ToMonitoringThresholdOutput() MonitoringThresholdOutput {
	return o
}

func (o MonitoringThresholdOutput) ToMonitoringThresholdOutputWithContext(ctx context.Context) MonitoringThresholdOutput {
	return o
}

func (o MonitoringThresholdOutput) ToMonitoringThresholdPtrOutput() MonitoringThresholdPtrOutput {
	return o.ToMonitoringThresholdPtrOutputWithContext(context.Background())
}

func (o MonitoringThresholdOutput) ToMonitoringThresholdPtrOutputWithContext(ctx context.Context) MonitoringThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringThreshold) *MonitoringThreshold {
		return &v
	}).(MonitoringThresholdPtrOutput)
}

// The threshold value. If null, the set default is dependent on the metric type.
func (o MonitoringThresholdOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitoringThreshold) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type MonitoringThresholdPtrOutput struct{ *pulumi.OutputState }

func (MonitoringThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringThreshold)(nil)).Elem()
}

func (o MonitoringThresholdPtrOutput) ToMonitoringThresholdPtrOutput() MonitoringThresholdPtrOutput {
	return o
}

func (o MonitoringThresholdPtrOutput) ToMonitoringThresholdPtrOutputWithContext(ctx context.Context) MonitoringThresholdPtrOutput {
	return o
}

func (o MonitoringThresholdPtrOutput) Elem() MonitoringThresholdOutput {
	return o.ApplyT(func(v *MonitoringThreshold) MonitoringThreshold {
		if v != nil {
			return *v
		}
		var ret MonitoringThreshold
		return ret
	}).(MonitoringThresholdOutput)
}

// The threshold value. If null, the set default is dependent on the metric type.
func (o MonitoringThresholdPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitoringThreshold) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

type MonitoringThresholdResponse struct {
	// The threshold value. If null, the set default is dependent on the metric type.
	Value *float64 `pulumi:"value"`
}

type MonitoringThresholdResponseOutput struct{ *pulumi.OutputState }

func (MonitoringThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringThresholdResponse)(nil)).Elem()
}

func (o MonitoringThresholdResponseOutput) ToMonitoringThresholdResponseOutput() MonitoringThresholdResponseOutput {
	return o
}

func (o MonitoringThresholdResponseOutput) ToMonitoringThresholdResponseOutputWithContext(ctx context.Context) MonitoringThresholdResponseOutput {
	return o
}

// The threshold value. If null, the set default is dependent on the metric type.
func (o MonitoringThresholdResponseOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v MonitoringThresholdResponse) *float64 { return v.Value }).(pulumi.Float64PtrOutput)
}

type MonitoringThresholdResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitoringThresholdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringThresholdResponse)(nil)).Elem()
}

func (o MonitoringThresholdResponsePtrOutput) ToMonitoringThresholdResponsePtrOutput() MonitoringThresholdResponsePtrOutput {
	return o
}

func (o MonitoringThresholdResponsePtrOutput) ToMonitoringThresholdResponsePtrOutputWithContext(ctx context.Context) MonitoringThresholdResponsePtrOutput {
	return o
}

func (o MonitoringThresholdResponsePtrOutput) Elem() MonitoringThresholdResponseOutput {
	return o.ApplyT(func(v *MonitoringThresholdResponse) MonitoringThresholdResponse {
		if v != nil {
			return *v
		}
		var ret MonitoringThresholdResponse
		return ret
	}).(MonitoringThresholdResponseOutput)
}

// The threshold value. If null, the set default is dependent on the metric type.
func (o MonitoringThresholdResponsePtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MonitoringThresholdResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.Float64PtrOutput)
}

// Monitoring workspace connection definition.
type MonitoringWorkspaceConnection struct {
	// The properties of a workspace service connection to store as environment variables in the submitted jobs.
	// Key is workspace connection property path, name is environment variable key.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The properties of a workspace service connection to store as secrets in the submitted jobs.
	// Key is workspace connection property path, name is secret key.
	Secrets map[string]string `pulumi:"secrets"`
}

// MonitoringWorkspaceConnectionInput is an input type that accepts MonitoringWorkspaceConnectionArgs and MonitoringWorkspaceConnectionOutput values.
// You can construct a concrete instance of `MonitoringWorkspaceConnectionInput` via:
//
//	MonitoringWorkspaceConnectionArgs{...}
type MonitoringWorkspaceConnectionInput interface {
	pulumi.Input

	ToMonitoringWorkspaceConnectionOutput() MonitoringWorkspaceConnectionOutput
	ToMonitoringWorkspaceConnectionOutputWithContext(context.Context) MonitoringWorkspaceConnectionOutput
}

// Monitoring workspace connection definition.
type MonitoringWorkspaceConnectionArgs struct {
	// The properties of a workspace service connection to store as environment variables in the submitted jobs.
	// Key is workspace connection property path, name is environment variable key.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The properties of a workspace service connection to store as secrets in the submitted jobs.
	// Key is workspace connection property path, name is secret key.
	Secrets pulumi.StringMapInput `pulumi:"secrets"`
}

func (MonitoringWorkspaceConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringWorkspaceConnection)(nil)).Elem()
}

func (i MonitoringWorkspaceConnectionArgs) ToMonitoringWorkspaceConnectionOutput() MonitoringWorkspaceConnectionOutput {
	return i.ToMonitoringWorkspaceConnectionOutputWithContext(context.Background())
}

func (i MonitoringWorkspaceConnectionArgs) ToMonitoringWorkspaceConnectionOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringWorkspaceConnectionOutput)
}

func (i MonitoringWorkspaceConnectionArgs) ToMonitoringWorkspaceConnectionPtrOutput() MonitoringWorkspaceConnectionPtrOutput {
	return i.ToMonitoringWorkspaceConnectionPtrOutputWithContext(context.Background())
}

func (i MonitoringWorkspaceConnectionArgs) ToMonitoringWorkspaceConnectionPtrOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringWorkspaceConnectionOutput).ToMonitoringWorkspaceConnectionPtrOutputWithContext(ctx)
}

// MonitoringWorkspaceConnectionPtrInput is an input type that accepts MonitoringWorkspaceConnectionArgs, MonitoringWorkspaceConnectionPtr and MonitoringWorkspaceConnectionPtrOutput values.
// You can construct a concrete instance of `MonitoringWorkspaceConnectionPtrInput` via:
//
//	        MonitoringWorkspaceConnectionArgs{...}
//
//	or:
//
//	        nil
type MonitoringWorkspaceConnectionPtrInput interface {
	pulumi.Input

	ToMonitoringWorkspaceConnectionPtrOutput() MonitoringWorkspaceConnectionPtrOutput
	ToMonitoringWorkspaceConnectionPtrOutputWithContext(context.Context) MonitoringWorkspaceConnectionPtrOutput
}

type monitoringWorkspaceConnectionPtrType MonitoringWorkspaceConnectionArgs

func MonitoringWorkspaceConnectionPtr(v *MonitoringWorkspaceConnectionArgs) MonitoringWorkspaceConnectionPtrInput {
	return (*monitoringWorkspaceConnectionPtrType)(v)
}

func (*monitoringWorkspaceConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringWorkspaceConnection)(nil)).Elem()
}

func (i *monitoringWorkspaceConnectionPtrType) ToMonitoringWorkspaceConnectionPtrOutput() MonitoringWorkspaceConnectionPtrOutput {
	return i.ToMonitoringWorkspaceConnectionPtrOutputWithContext(context.Background())
}

func (i *monitoringWorkspaceConnectionPtrType) ToMonitoringWorkspaceConnectionPtrOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringWorkspaceConnectionPtrOutput)
}

// Monitoring workspace connection definition.
type MonitoringWorkspaceConnectionOutput struct{ *pulumi.OutputState }

func (MonitoringWorkspaceConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringWorkspaceConnection)(nil)).Elem()
}

func (o MonitoringWorkspaceConnectionOutput) ToMonitoringWorkspaceConnectionOutput() MonitoringWorkspaceConnectionOutput {
	return o
}

func (o MonitoringWorkspaceConnectionOutput) ToMonitoringWorkspaceConnectionOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionOutput {
	return o
}

func (o MonitoringWorkspaceConnectionOutput) ToMonitoringWorkspaceConnectionPtrOutput() MonitoringWorkspaceConnectionPtrOutput {
	return o.ToMonitoringWorkspaceConnectionPtrOutputWithContext(context.Background())
}

func (o MonitoringWorkspaceConnectionOutput) ToMonitoringWorkspaceConnectionPtrOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringWorkspaceConnection) *MonitoringWorkspaceConnection {
		return &v
	}).(MonitoringWorkspaceConnectionPtrOutput)
}

// The properties of a workspace service connection to store as environment variables in the submitted jobs.
// Key is workspace connection property path, name is environment variable key.
func (o MonitoringWorkspaceConnectionOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v MonitoringWorkspaceConnection) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The properties of a workspace service connection to store as secrets in the submitted jobs.
// Key is workspace connection property path, name is secret key.
func (o MonitoringWorkspaceConnectionOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v MonitoringWorkspaceConnection) map[string]string { return v.Secrets }).(pulumi.StringMapOutput)
}

type MonitoringWorkspaceConnectionPtrOutput struct{ *pulumi.OutputState }

func (MonitoringWorkspaceConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringWorkspaceConnection)(nil)).Elem()
}

func (o MonitoringWorkspaceConnectionPtrOutput) ToMonitoringWorkspaceConnectionPtrOutput() MonitoringWorkspaceConnectionPtrOutput {
	return o
}

func (o MonitoringWorkspaceConnectionPtrOutput) ToMonitoringWorkspaceConnectionPtrOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionPtrOutput {
	return o
}

func (o MonitoringWorkspaceConnectionPtrOutput) Elem() MonitoringWorkspaceConnectionOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnection) MonitoringWorkspaceConnection {
		if v != nil {
			return *v
		}
		var ret MonitoringWorkspaceConnection
		return ret
	}).(MonitoringWorkspaceConnectionOutput)
}

// The properties of a workspace service connection to store as environment variables in the submitted jobs.
// Key is workspace connection property path, name is environment variable key.
func (o MonitoringWorkspaceConnectionPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnection) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// The properties of a workspace service connection to store as secrets in the submitted jobs.
// Key is workspace connection property path, name is secret key.
func (o MonitoringWorkspaceConnectionPtrOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnection) map[string]string {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(pulumi.StringMapOutput)
}

// Monitoring workspace connection definition.
type MonitoringWorkspaceConnectionResponse struct {
	// The properties of a workspace service connection to store as environment variables in the submitted jobs.
	// Key is workspace connection property path, name is environment variable key.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The properties of a workspace service connection to store as secrets in the submitted jobs.
	// Key is workspace connection property path, name is secret key.
	Secrets map[string]string `pulumi:"secrets"`
}

// Monitoring workspace connection definition.
type MonitoringWorkspaceConnectionResponseOutput struct{ *pulumi.OutputState }

func (MonitoringWorkspaceConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringWorkspaceConnectionResponse)(nil)).Elem()
}

func (o MonitoringWorkspaceConnectionResponseOutput) ToMonitoringWorkspaceConnectionResponseOutput() MonitoringWorkspaceConnectionResponseOutput {
	return o
}

func (o MonitoringWorkspaceConnectionResponseOutput) ToMonitoringWorkspaceConnectionResponseOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionResponseOutput {
	return o
}

// The properties of a workspace service connection to store as environment variables in the submitted jobs.
// Key is workspace connection property path, name is environment variable key.
func (o MonitoringWorkspaceConnectionResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v MonitoringWorkspaceConnectionResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The properties of a workspace service connection to store as secrets in the submitted jobs.
// Key is workspace connection property path, name is secret key.
func (o MonitoringWorkspaceConnectionResponseOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v MonitoringWorkspaceConnectionResponse) map[string]string { return v.Secrets }).(pulumi.StringMapOutput)
}

type MonitoringWorkspaceConnectionResponsePtrOutput struct{ *pulumi.OutputState }

func (MonitoringWorkspaceConnectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringWorkspaceConnectionResponse)(nil)).Elem()
}

func (o MonitoringWorkspaceConnectionResponsePtrOutput) ToMonitoringWorkspaceConnectionResponsePtrOutput() MonitoringWorkspaceConnectionResponsePtrOutput {
	return o
}

func (o MonitoringWorkspaceConnectionResponsePtrOutput) ToMonitoringWorkspaceConnectionResponsePtrOutputWithContext(ctx context.Context) MonitoringWorkspaceConnectionResponsePtrOutput {
	return o
}

func (o MonitoringWorkspaceConnectionResponsePtrOutput) Elem() MonitoringWorkspaceConnectionResponseOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnectionResponse) MonitoringWorkspaceConnectionResponse {
		if v != nil {
			return *v
		}
		var ret MonitoringWorkspaceConnectionResponse
		return ret
	}).(MonitoringWorkspaceConnectionResponseOutput)
}

// The properties of a workspace service connection to store as environment variables in the submitted jobs.
// Key is workspace connection property path, name is environment variable key.
func (o MonitoringWorkspaceConnectionResponsePtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnectionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// The properties of a workspace service connection to store as secrets in the submitted jobs.
// Key is workspace connection property path, name is secret key.
func (o MonitoringWorkspaceConnectionResponsePtrOutput) Secrets() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MonitoringWorkspaceConnectionResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(pulumi.StringMapOutput)
}

// MPI distribution configuration.
type Mpi struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MpiInput is an input type that accepts MpiArgs and MpiOutput values.
// You can construct a concrete instance of `MpiInput` via:
//
//	MpiArgs{...}
type MpiInput interface {
	pulumi.Input

	ToMpiOutput() MpiOutput
	ToMpiOutputWithContext(context.Context) MpiOutput
}

// MPI distribution configuration.
type MpiArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (MpiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (i MpiArgs) ToMpiOutput() MpiOutput {
	return i.ToMpiOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput)
}

func (i MpiArgs) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput).ToMpiPtrOutputWithContext(ctx)
}

// MpiPtrInput is an input type that accepts MpiArgs, MpiPtr and MpiPtrOutput values.
// You can construct a concrete instance of `MpiPtrInput` via:
//
//	        MpiArgs{...}
//
//	or:
//
//	        nil
type MpiPtrInput interface {
	pulumi.Input

	ToMpiPtrOutput() MpiPtrOutput
	ToMpiPtrOutputWithContext(context.Context) MpiPtrOutput
}

type mpiPtrType MpiArgs

func MpiPtr(v *MpiArgs) MpiPtrInput {
	return (*mpiPtrType)(v)
}

func (*mpiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (i *mpiPtrType) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i *mpiPtrType) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiPtrOutput)
}

// MPI distribution configuration.
type MpiOutput struct{ *pulumi.OutputState }

func (MpiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (o MpiOutput) ToMpiOutput() MpiOutput {
	return o
}

func (o MpiOutput) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return o
}

func (o MpiOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o.ToMpiPtrOutputWithContext(context.Background())
}

func (o MpiOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mpi) *Mpi {
		return &v
	}).(MpiPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v Mpi) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mpi) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiPtrOutput struct{ *pulumi.OutputState }

func (MpiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (o MpiPtrOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) Elem() MpiOutput {
	return o.ApplyT(func(v *Mpi) Mpi {
		if v != nil {
			return *v
		}
		var ret Mpi
		return ret
	}).(MpiOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mpi) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mpi) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// MPI distribution configuration.
type MpiResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MPI distribution configuration.
type MpiResponseOutput struct{ *pulumi.OutputState }

func (MpiResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpiResponse)(nil)).Elem()
}

func (o MpiResponseOutput) ToMpiResponseOutput() MpiResponseOutput {
	return o
}

func (o MpiResponseOutput) ToMpiResponseOutputWithContext(ctx context.Context) MpiResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v MpiResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MpiResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiResponsePtrOutput struct{ *pulumi.OutputState }

func (MpiResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MpiResponse)(nil)).Elem()
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutput() MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutputWithContext(ctx context.Context) MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) Elem() MpiResponseOutput {
	return o.ApplyT(func(v *MpiResponse) MpiResponse {
		if v != nil {
			return *v
		}
		var ret MpiResponse
		return ret
	}).(MpiResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// Fixed training parameters that won't be swept over during AutoML NLP training.
type NlpFixedParameters struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps *int `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate *float64 `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio *float64 `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for NlpFixedParameters
func (val *NlpFixedParameters) Defaults() *NlpFixedParameters {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	return &tmp
}

// NlpFixedParametersInput is an input type that accepts NlpFixedParametersArgs and NlpFixedParametersOutput values.
// You can construct a concrete instance of `NlpFixedParametersInput` via:
//
//	NlpFixedParametersArgs{...}
type NlpFixedParametersInput interface {
	pulumi.Input

	ToNlpFixedParametersOutput() NlpFixedParametersOutput
	ToNlpFixedParametersOutputWithContext(context.Context) NlpFixedParametersOutput
}

// Fixed training parameters that won't be swept over during AutoML NLP training.
type NlpFixedParametersArgs struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps pulumi.IntPtrInput `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio pulumi.Float64PtrInput `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for NlpFixedParametersArgs
func (val *NlpFixedParametersArgs) Defaults() *NlpFixedParametersArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	return &tmp
}
func (NlpFixedParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpFixedParameters)(nil)).Elem()
}

func (i NlpFixedParametersArgs) ToNlpFixedParametersOutput() NlpFixedParametersOutput {
	return i.ToNlpFixedParametersOutputWithContext(context.Background())
}

func (i NlpFixedParametersArgs) ToNlpFixedParametersOutputWithContext(ctx context.Context) NlpFixedParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpFixedParametersOutput)
}

func (i NlpFixedParametersArgs) ToNlpFixedParametersPtrOutput() NlpFixedParametersPtrOutput {
	return i.ToNlpFixedParametersPtrOutputWithContext(context.Background())
}

func (i NlpFixedParametersArgs) ToNlpFixedParametersPtrOutputWithContext(ctx context.Context) NlpFixedParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpFixedParametersOutput).ToNlpFixedParametersPtrOutputWithContext(ctx)
}

// NlpFixedParametersPtrInput is an input type that accepts NlpFixedParametersArgs, NlpFixedParametersPtr and NlpFixedParametersPtrOutput values.
// You can construct a concrete instance of `NlpFixedParametersPtrInput` via:
//
//	        NlpFixedParametersArgs{...}
//
//	or:
//
//	        nil
type NlpFixedParametersPtrInput interface {
	pulumi.Input

	ToNlpFixedParametersPtrOutput() NlpFixedParametersPtrOutput
	ToNlpFixedParametersPtrOutputWithContext(context.Context) NlpFixedParametersPtrOutput
}

type nlpFixedParametersPtrType NlpFixedParametersArgs

func NlpFixedParametersPtr(v *NlpFixedParametersArgs) NlpFixedParametersPtrInput {
	return (*nlpFixedParametersPtrType)(v)
}

func (*nlpFixedParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpFixedParameters)(nil)).Elem()
}

func (i *nlpFixedParametersPtrType) ToNlpFixedParametersPtrOutput() NlpFixedParametersPtrOutput {
	return i.ToNlpFixedParametersPtrOutputWithContext(context.Background())
}

func (i *nlpFixedParametersPtrType) ToNlpFixedParametersPtrOutputWithContext(ctx context.Context) NlpFixedParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpFixedParametersPtrOutput)
}

// Fixed training parameters that won't be swept over during AutoML NLP training.
type NlpFixedParametersOutput struct{ *pulumi.OutputState }

func (NlpFixedParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpFixedParameters)(nil)).Elem()
}

func (o NlpFixedParametersOutput) ToNlpFixedParametersOutput() NlpFixedParametersOutput {
	return o
}

func (o NlpFixedParametersOutput) ToNlpFixedParametersOutputWithContext(ctx context.Context) NlpFixedParametersOutput {
	return o
}

func (o NlpFixedParametersOutput) ToNlpFixedParametersPtrOutput() NlpFixedParametersPtrOutput {
	return o.ToNlpFixedParametersPtrOutputWithContext(context.Background())
}

func (o NlpFixedParametersOutput) ToNlpFixedParametersPtrOutputWithContext(ctx context.Context) NlpFixedParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpFixedParameters) *NlpFixedParameters {
		return &v
	}).(NlpFixedParametersPtrOutput)
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpFixedParametersOutput) GradientAccumulationSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *int { return v.GradientAccumulationSteps }).(pulumi.IntPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpFixedParametersOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpFixedParametersOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpFixedParametersOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpFixedParametersOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// The batch size for the training procedure.
func (o NlpFixedParametersOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpFixedParametersOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpFixedParametersOutput) WarmupRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *float64 { return v.WarmupRatio }).(pulumi.Float64PtrOutput)
}

// The weight decay for the training procedure.
func (o NlpFixedParametersOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParameters) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type NlpFixedParametersPtrOutput struct{ *pulumi.OutputState }

func (NlpFixedParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpFixedParameters)(nil)).Elem()
}

func (o NlpFixedParametersPtrOutput) ToNlpFixedParametersPtrOutput() NlpFixedParametersPtrOutput {
	return o
}

func (o NlpFixedParametersPtrOutput) ToNlpFixedParametersPtrOutputWithContext(ctx context.Context) NlpFixedParametersPtrOutput {
	return o
}

func (o NlpFixedParametersPtrOutput) Elem() NlpFixedParametersOutput {
	return o.ApplyT(func(v *NlpFixedParameters) NlpFixedParameters {
		if v != nil {
			return *v
		}
		var ret NlpFixedParameters
		return ret
	}).(NlpFixedParametersOutput)
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpFixedParametersPtrOutput) GradientAccumulationSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationSteps
	}).(pulumi.IntPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpFixedParametersPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpFixedParametersPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpFixedParametersPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpFixedParametersPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// The batch size for the training procedure.
func (o NlpFixedParametersPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpFixedParametersPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpFixedParametersPtrOutput) WarmupRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupRatio
	}).(pulumi.Float64PtrOutput)
}

// The weight decay for the training procedure.
func (o NlpFixedParametersPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Fixed training parameters that won't be swept over during AutoML NLP training.
type NlpFixedParametersResponse struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps *int `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate *float64 `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio *float64 `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for NlpFixedParametersResponse
func (val *NlpFixedParametersResponse) Defaults() *NlpFixedParametersResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	return &tmp
}

// Fixed training parameters that won't be swept over during AutoML NLP training.
type NlpFixedParametersResponseOutput struct{ *pulumi.OutputState }

func (NlpFixedParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpFixedParametersResponse)(nil)).Elem()
}

func (o NlpFixedParametersResponseOutput) ToNlpFixedParametersResponseOutput() NlpFixedParametersResponseOutput {
	return o
}

func (o NlpFixedParametersResponseOutput) ToNlpFixedParametersResponseOutputWithContext(ctx context.Context) NlpFixedParametersResponseOutput {
	return o
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpFixedParametersResponseOutput) GradientAccumulationSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *int { return v.GradientAccumulationSteps }).(pulumi.IntPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpFixedParametersResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpFixedParametersResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpFixedParametersResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpFixedParametersResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// The batch size for the training procedure.
func (o NlpFixedParametersResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpFixedParametersResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpFixedParametersResponseOutput) WarmupRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *float64 { return v.WarmupRatio }).(pulumi.Float64PtrOutput)
}

// The weight decay for the training procedure.
func (o NlpFixedParametersResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpFixedParametersResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type NlpFixedParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpFixedParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpFixedParametersResponse)(nil)).Elem()
}

func (o NlpFixedParametersResponsePtrOutput) ToNlpFixedParametersResponsePtrOutput() NlpFixedParametersResponsePtrOutput {
	return o
}

func (o NlpFixedParametersResponsePtrOutput) ToNlpFixedParametersResponsePtrOutputWithContext(ctx context.Context) NlpFixedParametersResponsePtrOutput {
	return o
}

func (o NlpFixedParametersResponsePtrOutput) Elem() NlpFixedParametersResponseOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) NlpFixedParametersResponse {
		if v != nil {
			return *v
		}
		var ret NlpFixedParametersResponse
		return ret
	}).(NlpFixedParametersResponseOutput)
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpFixedParametersResponsePtrOutput) GradientAccumulationSteps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationSteps
	}).(pulumi.IntPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpFixedParametersResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpFixedParametersResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpFixedParametersResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpFixedParametersResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// The batch size for the training procedure.
func (o NlpFixedParametersResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpFixedParametersResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpFixedParametersResponsePtrOutput) WarmupRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupRatio
	}).(pulumi.Float64PtrOutput)
}

// The weight decay for the training procedure.
func (o NlpFixedParametersResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Stringified search spaces for each parameter. See below examples.
type NlpParameterSubspace struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps *string `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate *string `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio *string `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay *string `pulumi:"weightDecay"`
}

// NlpParameterSubspaceInput is an input type that accepts NlpParameterSubspaceArgs and NlpParameterSubspaceOutput values.
// You can construct a concrete instance of `NlpParameterSubspaceInput` via:
//
//	NlpParameterSubspaceArgs{...}
type NlpParameterSubspaceInput interface {
	pulumi.Input

	ToNlpParameterSubspaceOutput() NlpParameterSubspaceOutput
	ToNlpParameterSubspaceOutputWithContext(context.Context) NlpParameterSubspaceOutput
}

// Stringified search spaces for each parameter. See below examples.
type NlpParameterSubspaceArgs struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps pulumi.StringPtrInput `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio pulumi.StringPtrInput `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
}

func (NlpParameterSubspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpParameterSubspace)(nil)).Elem()
}

func (i NlpParameterSubspaceArgs) ToNlpParameterSubspaceOutput() NlpParameterSubspaceOutput {
	return i.ToNlpParameterSubspaceOutputWithContext(context.Background())
}

func (i NlpParameterSubspaceArgs) ToNlpParameterSubspaceOutputWithContext(ctx context.Context) NlpParameterSubspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpParameterSubspaceOutput)
}

// NlpParameterSubspaceArrayInput is an input type that accepts NlpParameterSubspaceArray and NlpParameterSubspaceArrayOutput values.
// You can construct a concrete instance of `NlpParameterSubspaceArrayInput` via:
//
//	NlpParameterSubspaceArray{ NlpParameterSubspaceArgs{...} }
type NlpParameterSubspaceArrayInput interface {
	pulumi.Input

	ToNlpParameterSubspaceArrayOutput() NlpParameterSubspaceArrayOutput
	ToNlpParameterSubspaceArrayOutputWithContext(context.Context) NlpParameterSubspaceArrayOutput
}

type NlpParameterSubspaceArray []NlpParameterSubspaceInput

func (NlpParameterSubspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlpParameterSubspace)(nil)).Elem()
}

func (i NlpParameterSubspaceArray) ToNlpParameterSubspaceArrayOutput() NlpParameterSubspaceArrayOutput {
	return i.ToNlpParameterSubspaceArrayOutputWithContext(context.Background())
}

func (i NlpParameterSubspaceArray) ToNlpParameterSubspaceArrayOutputWithContext(ctx context.Context) NlpParameterSubspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpParameterSubspaceArrayOutput)
}

// Stringified search spaces for each parameter. See below examples.
type NlpParameterSubspaceOutput struct{ *pulumi.OutputState }

func (NlpParameterSubspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpParameterSubspace)(nil)).Elem()
}

func (o NlpParameterSubspaceOutput) ToNlpParameterSubspaceOutput() NlpParameterSubspaceOutput {
	return o
}

func (o NlpParameterSubspaceOutput) ToNlpParameterSubspaceOutputWithContext(ctx context.Context) NlpParameterSubspaceOutput {
	return o
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpParameterSubspaceOutput) GradientAccumulationSteps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.GradientAccumulationSteps }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpParameterSubspaceOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpParameterSubspaceOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpParameterSubspaceOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpParameterSubspaceOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// The batch size for the training procedure.
func (o NlpParameterSubspaceOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpParameterSubspaceOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpParameterSubspaceOutput) WarmupRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.WarmupRatio }).(pulumi.StringPtrOutput)
}

// The weight decay for the training procedure.
func (o NlpParameterSubspaceOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspace) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type NlpParameterSubspaceArrayOutput struct{ *pulumi.OutputState }

func (NlpParameterSubspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlpParameterSubspace)(nil)).Elem()
}

func (o NlpParameterSubspaceArrayOutput) ToNlpParameterSubspaceArrayOutput() NlpParameterSubspaceArrayOutput {
	return o
}

func (o NlpParameterSubspaceArrayOutput) ToNlpParameterSubspaceArrayOutputWithContext(ctx context.Context) NlpParameterSubspaceArrayOutput {
	return o
}

func (o NlpParameterSubspaceArrayOutput) Index(i pulumi.IntInput) NlpParameterSubspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlpParameterSubspace {
		return vs[0].([]NlpParameterSubspace)[vs[1].(int)]
	}).(NlpParameterSubspaceOutput)
}

// Stringified search spaces for each parameter. See below examples.
type NlpParameterSubspaceResponse struct {
	// Number of steps to accumulate gradients over before running a backward pass.
	GradientAccumulationSteps *string `pulumi:"gradientAccumulationSteps"`
	// The learning rate for the training procedure.
	LearningRate *string `pulumi:"learningRate"`
	// The type of learning rate schedule to use during the training procedure.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Number of training epochs.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// The batch size for the training procedure.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// The batch size to be used during evaluation.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// The warmup ratio, used alongside LrSchedulerType.
	WarmupRatio *string `pulumi:"warmupRatio"`
	// The weight decay for the training procedure.
	WeightDecay *string `pulumi:"weightDecay"`
}

// Stringified search spaces for each parameter. See below examples.
type NlpParameterSubspaceResponseOutput struct{ *pulumi.OutputState }

func (NlpParameterSubspaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpParameterSubspaceResponse)(nil)).Elem()
}

func (o NlpParameterSubspaceResponseOutput) ToNlpParameterSubspaceResponseOutput() NlpParameterSubspaceResponseOutput {
	return o
}

func (o NlpParameterSubspaceResponseOutput) ToNlpParameterSubspaceResponseOutputWithContext(ctx context.Context) NlpParameterSubspaceResponseOutput {
	return o
}

// Number of steps to accumulate gradients over before running a backward pass.
func (o NlpParameterSubspaceResponseOutput) GradientAccumulationSteps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.GradientAccumulationSteps }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o NlpParameterSubspaceResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// The type of learning rate schedule to use during the training procedure.
func (o NlpParameterSubspaceResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o NlpParameterSubspaceResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Number of training epochs.
func (o NlpParameterSubspaceResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// The batch size for the training procedure.
func (o NlpParameterSubspaceResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// The batch size to be used during evaluation.
func (o NlpParameterSubspaceResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// The warmup ratio, used alongside LrSchedulerType.
func (o NlpParameterSubspaceResponseOutput) WarmupRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.WarmupRatio }).(pulumi.StringPtrOutput)
}

// The weight decay for the training procedure.
func (o NlpParameterSubspaceResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpParameterSubspaceResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type NlpParameterSubspaceResponseArrayOutput struct{ *pulumi.OutputState }

func (NlpParameterSubspaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlpParameterSubspaceResponse)(nil)).Elem()
}

func (o NlpParameterSubspaceResponseArrayOutput) ToNlpParameterSubspaceResponseArrayOutput() NlpParameterSubspaceResponseArrayOutput {
	return o
}

func (o NlpParameterSubspaceResponseArrayOutput) ToNlpParameterSubspaceResponseArrayOutputWithContext(ctx context.Context) NlpParameterSubspaceResponseArrayOutput {
	return o
}

func (o NlpParameterSubspaceResponseArrayOutput) Index(i pulumi.IntInput) NlpParameterSubspaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlpParameterSubspaceResponse {
		return vs[0].([]NlpParameterSubspaceResponse)[vs[1].(int)]
	}).(NlpParameterSubspaceResponseOutput)
}

// Model sweeping and hyperparameter tuning related settings.
type NlpSweepSettings struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// NlpSweepSettingsInput is an input type that accepts NlpSweepSettingsArgs and NlpSweepSettingsOutput values.
// You can construct a concrete instance of `NlpSweepSettingsInput` via:
//
//	NlpSweepSettingsArgs{...}
type NlpSweepSettingsInput interface {
	pulumi.Input

	ToNlpSweepSettingsOutput() NlpSweepSettingsOutput
	ToNlpSweepSettingsOutputWithContext(context.Context) NlpSweepSettingsOutput
}

// Model sweeping and hyperparameter tuning related settings.
type NlpSweepSettingsArgs struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm pulumi.StringInput `pulumi:"samplingAlgorithm"`
}

func (NlpSweepSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpSweepSettings)(nil)).Elem()
}

func (i NlpSweepSettingsArgs) ToNlpSweepSettingsOutput() NlpSweepSettingsOutput {
	return i.ToNlpSweepSettingsOutputWithContext(context.Background())
}

func (i NlpSweepSettingsArgs) ToNlpSweepSettingsOutputWithContext(ctx context.Context) NlpSweepSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpSweepSettingsOutput)
}

func (i NlpSweepSettingsArgs) ToNlpSweepSettingsPtrOutput() NlpSweepSettingsPtrOutput {
	return i.ToNlpSweepSettingsPtrOutputWithContext(context.Background())
}

func (i NlpSweepSettingsArgs) ToNlpSweepSettingsPtrOutputWithContext(ctx context.Context) NlpSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpSweepSettingsOutput).ToNlpSweepSettingsPtrOutputWithContext(ctx)
}

// NlpSweepSettingsPtrInput is an input type that accepts NlpSweepSettingsArgs, NlpSweepSettingsPtr and NlpSweepSettingsPtrOutput values.
// You can construct a concrete instance of `NlpSweepSettingsPtrInput` via:
//
//	        NlpSweepSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpSweepSettingsPtrInput interface {
	pulumi.Input

	ToNlpSweepSettingsPtrOutput() NlpSweepSettingsPtrOutput
	ToNlpSweepSettingsPtrOutputWithContext(context.Context) NlpSweepSettingsPtrOutput
}

type nlpSweepSettingsPtrType NlpSweepSettingsArgs

func NlpSweepSettingsPtr(v *NlpSweepSettingsArgs) NlpSweepSettingsPtrInput {
	return (*nlpSweepSettingsPtrType)(v)
}

func (*nlpSweepSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpSweepSettings)(nil)).Elem()
}

func (i *nlpSweepSettingsPtrType) ToNlpSweepSettingsPtrOutput() NlpSweepSettingsPtrOutput {
	return i.ToNlpSweepSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpSweepSettingsPtrType) ToNlpSweepSettingsPtrOutputWithContext(ctx context.Context) NlpSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpSweepSettingsPtrOutput)
}

// Model sweeping and hyperparameter tuning related settings.
type NlpSweepSettingsOutput struct{ *pulumi.OutputState }

func (NlpSweepSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpSweepSettings)(nil)).Elem()
}

func (o NlpSweepSettingsOutput) ToNlpSweepSettingsOutput() NlpSweepSettingsOutput {
	return o
}

func (o NlpSweepSettingsOutput) ToNlpSweepSettingsOutputWithContext(ctx context.Context) NlpSweepSettingsOutput {
	return o
}

func (o NlpSweepSettingsOutput) ToNlpSweepSettingsPtrOutput() NlpSweepSettingsPtrOutput {
	return o.ToNlpSweepSettingsPtrOutputWithContext(context.Background())
}

func (o NlpSweepSettingsOutput) ToNlpSweepSettingsPtrOutputWithContext(ctx context.Context) NlpSweepSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpSweepSettings) *NlpSweepSettings {
		return &v
	}).(NlpSweepSettingsPtrOutput)
}

// Type of early termination policy for the sweeping job.
func (o NlpSweepSettingsOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v NlpSweepSettings) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o NlpSweepSettingsOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v NlpSweepSettings) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type NlpSweepSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpSweepSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpSweepSettings)(nil)).Elem()
}

func (o NlpSweepSettingsPtrOutput) ToNlpSweepSettingsPtrOutput() NlpSweepSettingsPtrOutput {
	return o
}

func (o NlpSweepSettingsPtrOutput) ToNlpSweepSettingsPtrOutputWithContext(ctx context.Context) NlpSweepSettingsPtrOutput {
	return o
}

func (o NlpSweepSettingsPtrOutput) Elem() NlpSweepSettingsOutput {
	return o.ApplyT(func(v *NlpSweepSettings) NlpSweepSettings {
		if v != nil {
			return *v
		}
		var ret NlpSweepSettings
		return ret
	}).(NlpSweepSettingsOutput)
}

// Type of early termination policy for the sweeping job.
func (o NlpSweepSettingsPtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *NlpSweepSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o NlpSweepSettingsPtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpSweepSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter tuning related settings.
type NlpSweepSettingsResponse struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Model sweeping and hyperparameter tuning related settings.
type NlpSweepSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpSweepSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpSweepSettingsResponse)(nil)).Elem()
}

func (o NlpSweepSettingsResponseOutput) ToNlpSweepSettingsResponseOutput() NlpSweepSettingsResponseOutput {
	return o
}

func (o NlpSweepSettingsResponseOutput) ToNlpSweepSettingsResponseOutputWithContext(ctx context.Context) NlpSweepSettingsResponseOutput {
	return o
}

// Type of early termination policy for the sweeping job.
func (o NlpSweepSettingsResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v NlpSweepSettingsResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o NlpSweepSettingsResponseOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v NlpSweepSettingsResponse) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type NlpSweepSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpSweepSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpSweepSettingsResponse)(nil)).Elem()
}

func (o NlpSweepSettingsResponsePtrOutput) ToNlpSweepSettingsResponsePtrOutput() NlpSweepSettingsResponsePtrOutput {
	return o
}

func (o NlpSweepSettingsResponsePtrOutput) ToNlpSweepSettingsResponsePtrOutputWithContext(ctx context.Context) NlpSweepSettingsResponsePtrOutput {
	return o
}

func (o NlpSweepSettingsResponsePtrOutput) Elem() NlpSweepSettingsResponseOutput {
	return o.ApplyT(func(v *NlpSweepSettingsResponse) NlpSweepSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpSweepSettingsResponse
		return ret
	}).(NlpSweepSettingsResponseOutput)
}

// Type of early termination policy for the sweeping job.
func (o NlpSweepSettingsResponsePtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *NlpSweepSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o NlpSweepSettingsResponsePtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpSweepSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettings struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

// NlpVerticalFeaturizationSettingsInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs and NlpVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsInput` via:
//
//	NlpVerticalFeaturizationSettingsArgs{...}
type NlpVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput
	ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsOutput
}

type NlpVerticalFeaturizationSettingsArgs struct {
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
}

func (NlpVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return i.ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput)
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput).ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalFeaturizationSettingsPtrInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs, NlpVerticalFeaturizationSettingsPtr and NlpVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsPtrInput` via:
//
//	        NlpVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput
	ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsPtrOutput
}

type nlpVerticalFeaturizationSettingsPtrType NlpVerticalFeaturizationSettingsArgs

func NlpVerticalFeaturizationSettingsPtr(v *NlpVerticalFeaturizationSettingsArgs) NlpVerticalFeaturizationSettingsPtrInput {
	return (*nlpVerticalFeaturizationSettingsPtrType)(v)
}

func (*nlpVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsPtrOutput)
}

type NlpVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalFeaturizationSettings) *NlpVerticalFeaturizationSettings {
		return &v
	}).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) Elem() NlpVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) NlpVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettings
		return ret
	}).(NlpVerticalFeaturizationSettingsOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponse struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

type NlpVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutput() NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutput() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) Elem() NlpVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) NlpVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettingsResponse
		return ret
	}).(NlpVerticalFeaturizationSettingsResponseOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettings struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum nodes to use for the experiment.
	MaxNodes *int `pulumi:"maxNodes"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Timeout for individual HD trials.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettings
func (val *NlpVerticalLimitSettings) Defaults() *NlpVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxNodes == nil {
		maxNodes_ := 1
		tmp.MaxNodes = &maxNodes_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// NlpVerticalLimitSettingsInput is an input type that accepts NlpVerticalLimitSettingsArgs and NlpVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsInput` via:
//
//	NlpVerticalLimitSettingsArgs{...}
type NlpVerticalLimitSettingsInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput
	ToNlpVerticalLimitSettingsOutputWithContext(context.Context) NlpVerticalLimitSettingsOutput
}

// Job execution constraints.
type NlpVerticalLimitSettingsArgs struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Maximum nodes to use for the experiment.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// Number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Timeout for individual HD trials.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsArgs
func (val *NlpVerticalLimitSettingsArgs) Defaults() *NlpVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxNodes == nil {
		tmp.MaxNodes = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("P7D")
	}
	return &tmp
}
func (NlpVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return i.ToNlpVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput)
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput).ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalLimitSettingsPtrInput is an input type that accepts NlpVerticalLimitSettingsArgs, NlpVerticalLimitSettingsPtr and NlpVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsPtrInput` via:
//
//	        NlpVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput
	ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Context) NlpVerticalLimitSettingsPtrOutput
}

type nlpVerticalLimitSettingsPtrType NlpVerticalLimitSettingsArgs

func NlpVerticalLimitSettingsPtr(v *NlpVerticalLimitSettingsArgs) NlpVerticalLimitSettingsPtrInput {
	return (*nlpVerticalLimitSettingsPtrType)(v)
}

func (*nlpVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalLimitSettings) *NlpVerticalLimitSettings {
		return &v
	}).(NlpVerticalLimitSettingsPtrOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o NlpVerticalLimitSettingsOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Timeout for individual HD trials.
func (o NlpVerticalLimitSettingsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) Elem() NlpVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) NlpVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettings
		return ret
	}).(NlpVerticalLimitSettingsOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o NlpVerticalLimitSettingsPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Timeout for individual HD trials.
func (o NlpVerticalLimitSettingsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponse struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum nodes to use for the experiment.
	MaxNodes *int `pulumi:"maxNodes"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Timeout for individual HD trials.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsResponse
func (val *NlpVerticalLimitSettingsResponse) Defaults() *NlpVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxNodes == nil {
		maxNodes_ := 1
		tmp.MaxNodes = &maxNodes_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutput() NlpVerticalLimitSettingsResponseOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponseOutput {
	return o
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o NlpVerticalLimitSettingsResponseOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Timeout for individual HD trials.
func (o NlpVerticalLimitSettingsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutput() NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) Elem() NlpVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) NlpVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettingsResponse
		return ret
	}).(NlpVerticalLimitSettingsResponseOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Timeout for individual HD trials.
func (o NlpVerticalLimitSettingsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Counts of various compute node states on the amlCompute.
type NodeStateCountsResponse struct {
	// Number of compute nodes in idle state.
	IdleNodeCount int `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the amlCompute.
	LeavingNodeCount int `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are in preempted state.
	PreemptedNodeCount int `pulumi:"preemptedNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount int `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount int `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount int `pulumi:"unusableNodeCount"`
}

// Counts of various compute node states on the amlCompute.
type NodeStateCountsResponseOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutput() NodeStateCountsResponseOutput {
	return o
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutputWithContext(ctx context.Context) NodeStateCountsResponseOutput {
	return o
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponseOutput) IdleNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.IdleNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are leaving the amlCompute.
func (o NodeStateCountsResponseOutput) LeavingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.LeavingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in preempted state.
func (o NodeStateCountsResponseOutput) PreemptedNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.PreemptedNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponseOutput) PreparingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.PreparingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponseOutput) RunningNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.RunningNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponseOutput) UnusableNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.UnusableNodeCount }).(pulumi.IntOutput)
}

type NodeStateCountsResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) Elem() NodeStateCountsResponseOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) NodeStateCountsResponse {
		if v != nil {
			return *v
		}
		var ret NodeStateCountsResponse
		return ret
	}).(NodeStateCountsResponseOutput)
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponsePtrOutput) IdleNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IdleNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are leaving the amlCompute.
func (o NodeStateCountsResponsePtrOutput) LeavingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.LeavingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are in preempted state.
func (o NodeStateCountsResponsePtrOutput) PreemptedNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PreemptedNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponsePtrOutput) PreparingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PreparingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponsePtrOutput) RunningNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RunningNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponsePtrOutput) UnusableNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.UnusableNodeCount
	}).(pulumi.IntPtrOutput)
}

type NoneAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string     `pulumi:"category"`
	ExpiryTime     *string     `pulumi:"expiryTime"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

// NoneAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts NoneAuthTypeWorkspaceConnectionPropertiesArgs and NoneAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `NoneAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	NoneAuthTypeWorkspaceConnectionPropertiesArgs{...}
type NoneAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput
	ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput
}

type NoneAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput   `pulumi:"category"`
	ExpiryTime     pulumi.StringPtrInput   `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput     `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input            `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (NoneAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i NoneAuthTypeWorkspaceConnectionPropertiesArgs) ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i NoneAuthTypeWorkspaceConnectionPropertiesArgs) ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoneAuthTypeWorkspaceConnectionPropertiesOutput)
}

type NoneAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (NoneAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'None'.
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type NoneAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string `pulumi:"category"`
	CreatedByWorkspaceArmId string  `pulumi:"createdByWorkspaceArmId"`
	ExpiryTime              *string `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

type NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesResponseOutput() NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'None'.
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// NoneDatastoreCredentialsInput is an input type that accepts NoneDatastoreCredentialsArgs and NoneDatastoreCredentialsOutput values.
// You can construct a concrete instance of `NoneDatastoreCredentialsInput` via:
//
//	NoneDatastoreCredentialsArgs{...}
type NoneDatastoreCredentialsInput interface {
	pulumi.Input

	ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput
	ToNoneDatastoreCredentialsOutputWithContext(context.Context) NoneDatastoreCredentialsOutput
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
}

func (NoneDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return i.ToNoneDatastoreCredentialsOutputWithContext(context.Background())
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoneDatastoreCredentialsOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return o
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentialsResponse)(nil)).Elem()
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutput() NoneDatastoreCredentialsResponseOutput {
	return o
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutputWithContext(ctx context.Context) NoneDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

type NotebookPreparationErrorResponse struct {
	ErrorMessage *string `pulumi:"errorMessage"`
	StatusCode   *int    `pulumi:"statusCode"`
}

type NotebookPreparationErrorResponseOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutput() NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutputWithContext(ctx context.Context) NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponseOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type NotebookPreparationErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutput() NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutputWithContext(ctx context.Context) NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) Elem() NotebookPreparationErrorResponseOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) NotebookPreparationErrorResponse {
		if v != nil {
			return *v
		}
		var ret NotebookPreparationErrorResponse
		return ret
	}).(NotebookPreparationErrorResponseOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *int {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type NotebookResourceInfoResponse struct {
	Fqdn                 *string `pulumi:"fqdn"`
	IsPrivateLinkEnabled *bool   `pulumi:"isPrivateLinkEnabled"`
	// The error that occurs when preparing notebook.
	NotebookPreparationError *NotebookPreparationErrorResponse `pulumi:"notebookPreparationError"`
	// the data plane resourceId that used to initialize notebook component
	ResourceId *string `pulumi:"resourceId"`
}

type NotebookResourceInfoResponseOutput struct{ *pulumi.OutputState }

func (NotebookResourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookResourceInfoResponse)(nil)).Elem()
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutput() NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutputWithContext(ctx context.Context) NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

func (o NotebookResourceInfoResponseOutput) IsPrivateLinkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *bool { return v.IsPrivateLinkEnabled }).(pulumi.BoolPtrOutput)
}

// The error that occurs when preparing notebook.
func (o NotebookResourceInfoResponseOutput) NotebookPreparationError() NotebookPreparationErrorResponsePtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *NotebookPreparationErrorResponse {
		return v.NotebookPreparationError
	}).(NotebookPreparationErrorResponsePtrOutput)
}

// the data plane resourceId that used to initialize notebook component
func (o NotebookResourceInfoResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Configuration for notification.
type NotificationSetting struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhook `pulumi:"webhooks"`
}

// NotificationSettingInput is an input type that accepts NotificationSettingArgs and NotificationSettingOutput values.
// You can construct a concrete instance of `NotificationSettingInput` via:
//
//	NotificationSettingArgs{...}
type NotificationSettingInput interface {
	pulumi.Input

	ToNotificationSettingOutput() NotificationSettingOutput
	ToNotificationSettingOutputWithContext(context.Context) NotificationSettingOutput
}

// Configuration for notification.
type NotificationSettingArgs struct {
	// Send email notification to user on specified notification type
	EmailOn pulumi.StringArrayInput `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks AzureDevOpsWebhookMapInput `pulumi:"webhooks"`
}

func (NotificationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (i NotificationSettingArgs) ToNotificationSettingOutput() NotificationSettingOutput {
	return i.ToNotificationSettingOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput)
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput).ToNotificationSettingPtrOutputWithContext(ctx)
}

// NotificationSettingPtrInput is an input type that accepts NotificationSettingArgs, NotificationSettingPtr and NotificationSettingPtrOutput values.
// You can construct a concrete instance of `NotificationSettingPtrInput` via:
//
//	        NotificationSettingArgs{...}
//
//	or:
//
//	        nil
type NotificationSettingPtrInput interface {
	pulumi.Input

	ToNotificationSettingPtrOutput() NotificationSettingPtrOutput
	ToNotificationSettingPtrOutputWithContext(context.Context) NotificationSettingPtrOutput
}

type notificationSettingPtrType NotificationSettingArgs

func NotificationSettingPtr(v *NotificationSettingArgs) NotificationSettingPtrInput {
	return (*notificationSettingPtrType)(v)
}

func (*notificationSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingPtrOutput)
}

// Configuration for notification.
type NotificationSettingOutput struct{ *pulumi.OutputState }

func (NotificationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingOutput) ToNotificationSettingOutput() NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationSetting) *NotificationSetting {
		return &v
	}).(NotificationSettingPtrOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v NotificationSetting) map[string]AzureDevOpsWebhook { return v.Webhooks }).(AzureDevOpsWebhookMapOutput)
}

type NotificationSettingPtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) Elem() NotificationSettingOutput {
	return o.ApplyT(func(v *NotificationSetting) NotificationSetting {
		if v != nil {
			return *v
		}
		var ret NotificationSetting
		return ret
	}).(NotificationSettingOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingPtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingPtrOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v *NotificationSetting) map[string]AzureDevOpsWebhook {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookMapOutput)
}

// Configuration for notification.
type NotificationSettingResponse struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhookResponse `pulumi:"webhooks"`
}

// Configuration for notification.
type NotificationSettingResponseOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutput() NotificationSettingResponseOutput {
	return o
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutputWithContext(ctx context.Context) NotificationSettingResponseOutput {
	return o
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponseOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponseOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponseOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse { return v.Webhooks }).(AzureDevOpsWebhookResponseMapOutput)
}

type NotificationSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutput() NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutputWithContext(ctx context.Context) NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) Elem() NotificationSettingResponseOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) NotificationSettingResponse {
		if v != nil {
			return *v
		}
		var ret NotificationSettingResponse
		return ret
	}).(NotificationSettingResponseOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponsePtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponsePtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponsePtrOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookResponseMapOutput)
}

type NumericalDataDriftMetricThreshold struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical data drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// NumericalDataDriftMetricThresholdInput is an input type that accepts NumericalDataDriftMetricThresholdArgs and NumericalDataDriftMetricThresholdOutput values.
// You can construct a concrete instance of `NumericalDataDriftMetricThresholdInput` via:
//
//	NumericalDataDriftMetricThresholdArgs{...}
type NumericalDataDriftMetricThresholdInput interface {
	pulumi.Input

	ToNumericalDataDriftMetricThresholdOutput() NumericalDataDriftMetricThresholdOutput
	ToNumericalDataDriftMetricThresholdOutputWithContext(context.Context) NumericalDataDriftMetricThresholdOutput
}

type NumericalDataDriftMetricThresholdArgs struct {
	// Expected value is 'Numerical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The numerical data drift metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (NumericalDataDriftMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataDriftMetricThreshold)(nil)).Elem()
}

func (i NumericalDataDriftMetricThresholdArgs) ToNumericalDataDriftMetricThresholdOutput() NumericalDataDriftMetricThresholdOutput {
	return i.ToNumericalDataDriftMetricThresholdOutputWithContext(context.Background())
}

func (i NumericalDataDriftMetricThresholdArgs) ToNumericalDataDriftMetricThresholdOutputWithContext(ctx context.Context) NumericalDataDriftMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumericalDataDriftMetricThresholdOutput)
}

type NumericalDataDriftMetricThresholdOutput struct{ *pulumi.OutputState }

func (NumericalDataDriftMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataDriftMetricThreshold)(nil)).Elem()
}

func (o NumericalDataDriftMetricThresholdOutput) ToNumericalDataDriftMetricThresholdOutput() NumericalDataDriftMetricThresholdOutput {
	return o
}

func (o NumericalDataDriftMetricThresholdOutput) ToNumericalDataDriftMetricThresholdOutputWithContext(ctx context.Context) NumericalDataDriftMetricThresholdOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalDataDriftMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical data drift metric to calculate.
func (o NumericalDataDriftMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalDataDriftMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type NumericalDataDriftMetricThresholdResponse struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical data drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type NumericalDataDriftMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (NumericalDataDriftMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataDriftMetricThresholdResponse)(nil)).Elem()
}

func (o NumericalDataDriftMetricThresholdResponseOutput) ToNumericalDataDriftMetricThresholdResponseOutput() NumericalDataDriftMetricThresholdResponseOutput {
	return o
}

func (o NumericalDataDriftMetricThresholdResponseOutput) ToNumericalDataDriftMetricThresholdResponseOutputWithContext(ctx context.Context) NumericalDataDriftMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalDataDriftMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical data drift metric to calculate.
func (o NumericalDataDriftMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalDataDriftMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v NumericalDataDriftMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type NumericalDataQualityMetricThreshold struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical data quality metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// NumericalDataQualityMetricThresholdInput is an input type that accepts NumericalDataQualityMetricThresholdArgs and NumericalDataQualityMetricThresholdOutput values.
// You can construct a concrete instance of `NumericalDataQualityMetricThresholdInput` via:
//
//	NumericalDataQualityMetricThresholdArgs{...}
type NumericalDataQualityMetricThresholdInput interface {
	pulumi.Input

	ToNumericalDataQualityMetricThresholdOutput() NumericalDataQualityMetricThresholdOutput
	ToNumericalDataQualityMetricThresholdOutputWithContext(context.Context) NumericalDataQualityMetricThresholdOutput
}

type NumericalDataQualityMetricThresholdArgs struct {
	// Expected value is 'Numerical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The numerical data quality metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (NumericalDataQualityMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataQualityMetricThreshold)(nil)).Elem()
}

func (i NumericalDataQualityMetricThresholdArgs) ToNumericalDataQualityMetricThresholdOutput() NumericalDataQualityMetricThresholdOutput {
	return i.ToNumericalDataQualityMetricThresholdOutputWithContext(context.Background())
}

func (i NumericalDataQualityMetricThresholdArgs) ToNumericalDataQualityMetricThresholdOutputWithContext(ctx context.Context) NumericalDataQualityMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumericalDataQualityMetricThresholdOutput)
}

type NumericalDataQualityMetricThresholdOutput struct{ *pulumi.OutputState }

func (NumericalDataQualityMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataQualityMetricThreshold)(nil)).Elem()
}

func (o NumericalDataQualityMetricThresholdOutput) ToNumericalDataQualityMetricThresholdOutput() NumericalDataQualityMetricThresholdOutput {
	return o
}

func (o NumericalDataQualityMetricThresholdOutput) ToNumericalDataQualityMetricThresholdOutputWithContext(ctx context.Context) NumericalDataQualityMetricThresholdOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalDataQualityMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical data quality metric to calculate.
func (o NumericalDataQualityMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalDataQualityMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type NumericalDataQualityMetricThresholdResponse struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical data quality metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type NumericalDataQualityMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (NumericalDataQualityMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalDataQualityMetricThresholdResponse)(nil)).Elem()
}

func (o NumericalDataQualityMetricThresholdResponseOutput) ToNumericalDataQualityMetricThresholdResponseOutput() NumericalDataQualityMetricThresholdResponseOutput {
	return o
}

func (o NumericalDataQualityMetricThresholdResponseOutput) ToNumericalDataQualityMetricThresholdResponseOutputWithContext(ctx context.Context) NumericalDataQualityMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalDataQualityMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical data quality metric to calculate.
func (o NumericalDataQualityMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalDataQualityMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v NumericalDataQualityMetricThresholdResponse) *MonitoringThresholdResponse { return v.Threshold }).(MonitoringThresholdResponsePtrOutput)
}

type NumericalPredictionDriftMetricThreshold struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical prediction drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// NumericalPredictionDriftMetricThresholdInput is an input type that accepts NumericalPredictionDriftMetricThresholdArgs and NumericalPredictionDriftMetricThresholdOutput values.
// You can construct a concrete instance of `NumericalPredictionDriftMetricThresholdInput` via:
//
//	NumericalPredictionDriftMetricThresholdArgs{...}
type NumericalPredictionDriftMetricThresholdInput interface {
	pulumi.Input

	ToNumericalPredictionDriftMetricThresholdOutput() NumericalPredictionDriftMetricThresholdOutput
	ToNumericalPredictionDriftMetricThresholdOutputWithContext(context.Context) NumericalPredictionDriftMetricThresholdOutput
}

type NumericalPredictionDriftMetricThresholdArgs struct {
	// Expected value is 'Numerical'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] The numerical prediction drift metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (NumericalPredictionDriftMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalPredictionDriftMetricThreshold)(nil)).Elem()
}

func (i NumericalPredictionDriftMetricThresholdArgs) ToNumericalPredictionDriftMetricThresholdOutput() NumericalPredictionDriftMetricThresholdOutput {
	return i.ToNumericalPredictionDriftMetricThresholdOutputWithContext(context.Background())
}

func (i NumericalPredictionDriftMetricThresholdArgs) ToNumericalPredictionDriftMetricThresholdOutputWithContext(ctx context.Context) NumericalPredictionDriftMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NumericalPredictionDriftMetricThresholdOutput)
}

type NumericalPredictionDriftMetricThresholdOutput struct{ *pulumi.OutputState }

func (NumericalPredictionDriftMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalPredictionDriftMetricThreshold)(nil)).Elem()
}

func (o NumericalPredictionDriftMetricThresholdOutput) ToNumericalPredictionDriftMetricThresholdOutput() NumericalPredictionDriftMetricThresholdOutput {
	return o
}

func (o NumericalPredictionDriftMetricThresholdOutput) ToNumericalPredictionDriftMetricThresholdOutputWithContext(ctx context.Context) NumericalPredictionDriftMetricThresholdOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalPredictionDriftMetricThresholdOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThreshold) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical prediction drift metric to calculate.
func (o NumericalPredictionDriftMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalPredictionDriftMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type NumericalPredictionDriftMetricThresholdResponse struct {
	// Expected value is 'Numerical'.
	DataType string `pulumi:"dataType"`
	// [Required] The numerical prediction drift metric to calculate.
	Metric string `pulumi:"metric"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type NumericalPredictionDriftMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (NumericalPredictionDriftMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NumericalPredictionDriftMetricThresholdResponse)(nil)).Elem()
}

func (o NumericalPredictionDriftMetricThresholdResponseOutput) ToNumericalPredictionDriftMetricThresholdResponseOutput() NumericalPredictionDriftMetricThresholdResponseOutput {
	return o
}

func (o NumericalPredictionDriftMetricThresholdResponseOutput) ToNumericalPredictionDriftMetricThresholdResponseOutputWithContext(ctx context.Context) NumericalPredictionDriftMetricThresholdResponseOutput {
	return o
}

// Expected value is 'Numerical'.
func (o NumericalPredictionDriftMetricThresholdResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThresholdResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] The numerical prediction drift metric to calculate.
func (o NumericalPredictionDriftMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o NumericalPredictionDriftMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v NumericalPredictionDriftMetricThresholdResponse) *MonitoringThresholdResponse {
		return v.Threshold
	}).(MonitoringThresholdResponsePtrOutput)
}

type OAuth2AuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'OAuth2'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// ClientId and ClientSecret are required. Other properties are optional
	// depending on each OAuth2 provider's implementation.
	Credentials    *WorkspaceConnectionOAuth2 `pulumi:"credentials"`
	ExpiryTime     *string                    `pulumi:"expiryTime"`
	IsSharedToAll  *bool                      `pulumi:"isSharedToAll"`
	Metadata       interface{}                `pulumi:"metadata"`
	SharedUserList []string                   `pulumi:"sharedUserList"`
	Target         *string                    `pulumi:"target"`
}

// OAuth2AuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts OAuth2AuthTypeWorkspaceConnectionPropertiesArgs and OAuth2AuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `OAuth2AuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	OAuth2AuthTypeWorkspaceConnectionPropertiesArgs{...}
type OAuth2AuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutput() OAuth2AuthTypeWorkspaceConnectionPropertiesOutput
	ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) OAuth2AuthTypeWorkspaceConnectionPropertiesOutput
}

type OAuth2AuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'OAuth2'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category pulumi.StringPtrInput `pulumi:"category"`
	// ClientId and ClientSecret are required. Other properties are optional
	// depending on each OAuth2 provider's implementation.
	Credentials    WorkspaceConnectionOAuth2PtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput             `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput               `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                      `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput           `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput             `pulumi:"target"`
}

func (OAuth2AuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuth2AuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i OAuth2AuthTypeWorkspaceConnectionPropertiesArgs) ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutput() OAuth2AuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i OAuth2AuthTypeWorkspaceConnectionPropertiesArgs) ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) OAuth2AuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuth2AuthTypeWorkspaceConnectionPropertiesOutput)
}

type OAuth2AuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuth2AuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutput() OAuth2AuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) ToOAuth2AuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) OAuth2AuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'OAuth2'.
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionOAuth2PtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionOAuth2 { return v.Credentials }).(WorkspaceConnectionOAuth2PtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type OAuth2AuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'OAuth2'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string `pulumi:"category"`
	CreatedByWorkspaceArmId string  `pulumi:"createdByWorkspaceArmId"`
	// ClientId and ClientSecret are required. Other properties are optional
	// depending on each OAuth2 provider's implementation.
	Credentials *WorkspaceConnectionOAuth2Response `pulumi:"credentials"`
	ExpiryTime  *string                            `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

type OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuth2AuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) ToOAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput() OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) ToOAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'OAuth2'.
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionOAuth2ResponsePtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionOAuth2Response {
		return v.Credentials
	}).(WorkspaceConnectionOAuth2ResponsePtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuth2AuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Optimization objective.
type Objective struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// ObjectiveInput is an input type that accepts ObjectiveArgs and ObjectiveOutput values.
// You can construct a concrete instance of `ObjectiveInput` via:
//
//	ObjectiveArgs{...}
type ObjectiveInput interface {
	pulumi.Input

	ToObjectiveOutput() ObjectiveOutput
	ToObjectiveOutputWithContext(context.Context) ObjectiveOutput
}

// Optimization objective.
type ObjectiveArgs struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal pulumi.StringInput `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric pulumi.StringInput `pulumi:"primaryMetric"`
}

func (ObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (i ObjectiveArgs) ToObjectiveOutput() ObjectiveOutput {
	return i.ToObjectiveOutputWithContext(context.Background())
}

func (i ObjectiveArgs) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectiveOutput)
}

// Optimization objective.
type ObjectiveOutput struct{ *pulumi.OutputState }

func (ObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (o ObjectiveOutput) ToObjectiveOutput() ObjectiveOutput {
	return o
}

func (o ObjectiveOutput) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Optimization objective.
type ObjectiveResponse struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// Optimization objective.
type ObjectiveResponseOutput struct{ *pulumi.OutputState }

func (ObjectiveResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectiveResponse)(nil)).Elem()
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutput() ObjectiveResponseOutput {
	return o
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutputWithContext(ctx context.Context) ObjectiveResponseOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveResponseOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// OneLake (Trident) datastore configuration.
type OneLakeDatastore struct {
	// [Required] OneLake artifact backing the datastore.
	Artifact LakeHouseArtifact `pulumi:"artifact"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'OneLake'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// OneLake endpoint to use for the datastore.
	Endpoint *string `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// [Required] OneLake workspace name.
	OneLakeWorkspaceName string `pulumi:"oneLakeWorkspaceName"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for OneLakeDatastore
func (val *OneLakeDatastore) Defaults() *OneLakeDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// OneLakeDatastoreInput is an input type that accepts OneLakeDatastoreArgs and OneLakeDatastoreOutput values.
// You can construct a concrete instance of `OneLakeDatastoreInput` via:
//
//	OneLakeDatastoreArgs{...}
type OneLakeDatastoreInput interface {
	pulumi.Input

	ToOneLakeDatastoreOutput() OneLakeDatastoreOutput
	ToOneLakeDatastoreOutputWithContext(context.Context) OneLakeDatastoreOutput
}

// OneLake (Trident) datastore configuration.
type OneLakeDatastoreArgs struct {
	// [Required] OneLake artifact backing the datastore.
	Artifact LakeHouseArtifactInput `pulumi:"artifact"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'OneLake'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// OneLake endpoint to use for the datastore.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// [Required] OneLake workspace name.
	OneLakeWorkspaceName pulumi.StringInput `pulumi:"oneLakeWorkspaceName"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for OneLakeDatastoreArgs
func (val *OneLakeDatastoreArgs) Defaults() *OneLakeDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (OneLakeDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OneLakeDatastore)(nil)).Elem()
}

func (i OneLakeDatastoreArgs) ToOneLakeDatastoreOutput() OneLakeDatastoreOutput {
	return i.ToOneLakeDatastoreOutputWithContext(context.Background())
}

func (i OneLakeDatastoreArgs) ToOneLakeDatastoreOutputWithContext(ctx context.Context) OneLakeDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OneLakeDatastoreOutput)
}

// OneLake (Trident) datastore configuration.
type OneLakeDatastoreOutput struct{ *pulumi.OutputState }

func (OneLakeDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneLakeDatastore)(nil)).Elem()
}

func (o OneLakeDatastoreOutput) ToOneLakeDatastoreOutput() OneLakeDatastoreOutput {
	return o
}

func (o OneLakeDatastoreOutput) ToOneLakeDatastoreOutputWithContext(ctx context.Context) OneLakeDatastoreOutput {
	return o
}

// [Required] OneLake artifact backing the datastore.
func (o OneLakeDatastoreOutput) Artifact() LakeHouseArtifactOutput {
	return o.ApplyT(func(v OneLakeDatastore) LakeHouseArtifact { return v.Artifact }).(LakeHouseArtifactOutput)
}

// [Required] Account credentials.
func (o OneLakeDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v OneLakeDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'OneLake'.
func (o OneLakeDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v OneLakeDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o OneLakeDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// OneLake endpoint to use for the datastore.
func (o OneLakeDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o OneLakeDatastoreOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v OneLakeDatastore) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// [Required] OneLake workspace name.
func (o OneLakeDatastoreOutput) OneLakeWorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v OneLakeDatastore) string { return v.OneLakeWorkspaceName }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o OneLakeDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OneLakeDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o OneLakeDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o OneLakeDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v OneLakeDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// OneLake (Trident) datastore configuration.
type OneLakeDatastoreResponse struct {
	// [Required] OneLake artifact backing the datastore.
	Artifact LakeHouseArtifactResponse `pulumi:"artifact"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'OneLake'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// OneLake endpoint to use for the datastore.
	Endpoint *string `pulumi:"endpoint"`
	// Intellectual Property details.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// [Required] OneLake workspace name.
	OneLakeWorkspaceName string `pulumi:"oneLakeWorkspaceName"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for OneLakeDatastoreResponse
func (val *OneLakeDatastoreResponse) Defaults() *OneLakeDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// OneLake (Trident) datastore configuration.
type OneLakeDatastoreResponseOutput struct{ *pulumi.OutputState }

func (OneLakeDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OneLakeDatastoreResponse)(nil)).Elem()
}

func (o OneLakeDatastoreResponseOutput) ToOneLakeDatastoreResponseOutput() OneLakeDatastoreResponseOutput {
	return o
}

func (o OneLakeDatastoreResponseOutput) ToOneLakeDatastoreResponseOutputWithContext(ctx context.Context) OneLakeDatastoreResponseOutput {
	return o
}

// [Required] OneLake artifact backing the datastore.
func (o OneLakeDatastoreResponseOutput) Artifact() LakeHouseArtifactResponseOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) LakeHouseArtifactResponse { return v.Artifact }).(LakeHouseArtifactResponseOutput)
}

// [Required] Account credentials.
func (o OneLakeDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'OneLake'.
func (o OneLakeDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o OneLakeDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// OneLake endpoint to use for the datastore.
func (o OneLakeDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Intellectual Property details.
func (o OneLakeDatastoreResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o OneLakeDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// [Required] OneLake workspace name.
func (o OneLakeDatastoreResponseOutput) OneLakeWorkspaceName() pulumi.StringOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) string { return v.OneLakeWorkspaceName }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o OneLakeDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o OneLakeDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o OneLakeDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v OneLakeDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Online endpoint configuration
type OnlineEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointType
func (val *OnlineEndpointType) Defaults() *OnlineEndpointType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// OnlineEndpointTypeInput is an input type that accepts OnlineEndpointTypeArgs and OnlineEndpointTypeOutput values.
// You can construct a concrete instance of `OnlineEndpointTypeInput` via:
//
//	OnlineEndpointTypeArgs{...}
type OnlineEndpointTypeInput interface {
	pulumi.Input

	ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput
	ToOnlineEndpointTypeOutputWithContext(context.Context) OnlineEndpointTypeOutput
}

// Online endpoint configuration
type OnlineEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic pulumi.IntMapInput `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic pulumi.IntMapInput `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointTypeArgs
func (val *OnlineEndpointTypeArgs) Defaults() *OnlineEndpointTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		tmp.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (OnlineEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return i.ToOnlineEndpointTypeOutputWithContext(context.Background())
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineEndpointTypeOutput)
}

// Online endpoint configuration
type OnlineEndpointTypeOutput struct{ *pulumi.OutputState }

func (OnlineEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return o
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o OnlineEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointTypeOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointTypeOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online endpoint configuration
type OnlineEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointResponse
func (val *OnlineEndpointResponse) Defaults() *OnlineEndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// Online endpoint configuration
type OnlineEndpointResponseOutput struct{ *pulumi.OutputState }

func (OnlineEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointResponse)(nil)).Elem()
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutput() OnlineEndpointResponseOutput {
	return o
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutputWithContext(ctx context.Context) OnlineEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointResponseOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o OnlineEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Endpoint URI.
func (o OnlineEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o OnlineEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointResponseOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettings struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	// (Now increase `request_timeout_ms` to account for any networking/queue delays)
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettings
func (val *OnlineRequestSettings) Defaults() *OnlineRequestSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// OnlineRequestSettingsInput is an input type that accepts OnlineRequestSettingsArgs and OnlineRequestSettingsOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsInput` via:
//
//	OnlineRequestSettingsArgs{...}
type OnlineRequestSettingsInput interface {
	pulumi.Input

	ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput
	ToOnlineRequestSettingsOutputWithContext(context.Context) OnlineRequestSettingsOutput
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsArgs struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrentRequestsPerInstance"`
	// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	// (Now increase `request_timeout_ms` to account for any networking/queue delays)
	MaxQueueWait pulumi.StringPtrInput `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout pulumi.StringPtrInput `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsArgs
func (val *OnlineRequestSettingsArgs) Defaults() *OnlineRequestSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		tmp.MaxConcurrentRequestsPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MaxQueueWait == nil {
		tmp.MaxQueueWait = pulumi.StringPtr("PT0.5S")
	}
	if tmp.RequestTimeout == nil {
		tmp.RequestTimeout = pulumi.StringPtr("PT5S")
	}
	return &tmp
}
func (OnlineRequestSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return i.ToOnlineRequestSettingsOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput)
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput).ToOnlineRequestSettingsPtrOutputWithContext(ctx)
}

// OnlineRequestSettingsPtrInput is an input type that accepts OnlineRequestSettingsArgs, OnlineRequestSettingsPtr and OnlineRequestSettingsPtrOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsPtrInput` via:
//
//	        OnlineRequestSettingsArgs{...}
//
//	or:
//
//	        nil
type OnlineRequestSettingsPtrInput interface {
	pulumi.Input

	ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput
	ToOnlineRequestSettingsPtrOutputWithContext(context.Context) OnlineRequestSettingsPtrOutput
}

type onlineRequestSettingsPtrType OnlineRequestSettingsArgs

func OnlineRequestSettingsPtr(v *OnlineRequestSettingsArgs) OnlineRequestSettingsPtrInput {
	return (*onlineRequestSettingsPtrType)(v)
}

func (*onlineRequestSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnlineRequestSettings) *OnlineRequestSettings {
		return &v
	}).(OnlineRequestSettingsPtrOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
// (Now increase `request_timeout_ms` to account for any networking/queue delays)
func (o OnlineRequestSettingsOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsPtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) Elem() OnlineRequestSettingsOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) OnlineRequestSettings {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettings
		return ret
	}).(OnlineRequestSettingsOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsPtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
// (Now increase `request_timeout_ms` to account for any networking/queue delays)
func (o OnlineRequestSettingsPtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsPtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	// (Now increase `request_timeout_ms` to account for any networking/queue delays)
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsResponse
func (val *OnlineRequestSettingsResponse) Defaults() *OnlineRequestSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponseOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutput() OnlineRequestSettingsResponseOutput {
	return o
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutputWithContext(ctx context.Context) OnlineRequestSettingsResponseOutput {
	return o
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponseOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
// (Now increase `request_timeout_ms` to account for any networking/queue delays)
func (o OnlineRequestSettingsResponseOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponseOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutput() OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutputWithContext(ctx context.Context) OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) Elem() OnlineRequestSettingsResponseOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) OnlineRequestSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettingsResponse
		return ret
	}).(OnlineRequestSettingsResponseOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponsePtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// (Deprecated for Managed Online Endpoints) The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
// (Now increase `request_timeout_ms` to account for any networking/queue delays)
func (o OnlineRequestSettingsResponsePtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponsePtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

type OpenAIEndpointDeploymentResourceProperties struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModel `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName *string               `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSku `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.OpenAI'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

// OpenAIEndpointDeploymentResourcePropertiesInput is an input type that accepts OpenAIEndpointDeploymentResourcePropertiesArgs and OpenAIEndpointDeploymentResourcePropertiesOutput values.
// You can construct a concrete instance of `OpenAIEndpointDeploymentResourcePropertiesInput` via:
//
//	OpenAIEndpointDeploymentResourcePropertiesArgs{...}
type OpenAIEndpointDeploymentResourcePropertiesInput interface {
	pulumi.Input

	ToOpenAIEndpointDeploymentResourcePropertiesOutput() OpenAIEndpointDeploymentResourcePropertiesOutput
	ToOpenAIEndpointDeploymentResourcePropertiesOutputWithContext(context.Context) OpenAIEndpointDeploymentResourcePropertiesOutput
}

type OpenAIEndpointDeploymentResourcePropertiesArgs struct {
	// The failure reason if the creation failed.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelInput `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName pulumi.StringPtrInput        `pulumi:"raiPolicyName"`
	Sku           CognitiveServicesSkuPtrInput `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.OpenAI'.
	Type pulumi.StringInput `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption pulumi.StringPtrInput `pulumi:"versionUpgradeOption"`
}

func (OpenAIEndpointDeploymentResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenAIEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (i OpenAIEndpointDeploymentResourcePropertiesArgs) ToOpenAIEndpointDeploymentResourcePropertiesOutput() OpenAIEndpointDeploymentResourcePropertiesOutput {
	return i.ToOpenAIEndpointDeploymentResourcePropertiesOutputWithContext(context.Background())
}

func (i OpenAIEndpointDeploymentResourcePropertiesArgs) ToOpenAIEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) OpenAIEndpointDeploymentResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OpenAIEndpointDeploymentResourcePropertiesOutput)
}

type OpenAIEndpointDeploymentResourcePropertiesOutput struct{ *pulumi.OutputState }

func (OpenAIEndpointDeploymentResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenAIEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (o OpenAIEndpointDeploymentResourcePropertiesOutput) ToOpenAIEndpointDeploymentResourcePropertiesOutput() OpenAIEndpointDeploymentResourcePropertiesOutput {
	return o
}

func (o OpenAIEndpointDeploymentResourcePropertiesOutput) ToOpenAIEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) OpenAIEndpointDeploymentResourcePropertiesOutput {
	return o
}

// The failure reason if the creation failed.
func (o OpenAIEndpointDeploymentResourcePropertiesOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o OpenAIEndpointDeploymentResourcePropertiesOutput) Model() EndpointDeploymentModelOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) EndpointDeploymentModel { return v.Model }).(EndpointDeploymentModelOutput)
}

// The name of RAI policy.
func (o OpenAIEndpointDeploymentResourcePropertiesOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o OpenAIEndpointDeploymentResourcePropertiesOutput) Sku() CognitiveServicesSkuPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) *CognitiveServicesSku { return v.Sku }).(CognitiveServicesSkuPtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.OpenAI'.
func (o OpenAIEndpointDeploymentResourcePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o OpenAIEndpointDeploymentResourcePropertiesOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourceProperties) *string { return v.VersionUpgradeOption }).(pulumi.StringPtrOutput)
}

type OpenAIEndpointDeploymentResourcePropertiesResponse struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelResponse `pulumi:"model"`
	// Read-only provision state status property.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of RAI policy.
	RaiPolicyName *string                       `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSkuResponse `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.OpenAI'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

type OpenAIEndpointDeploymentResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (OpenAIEndpointDeploymentResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OpenAIEndpointDeploymentResourcePropertiesResponse)(nil)).Elem()
}

func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) ToOpenAIEndpointDeploymentResourcePropertiesResponseOutput() OpenAIEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) ToOpenAIEndpointDeploymentResourcePropertiesResponseOutputWithContext(ctx context.Context) OpenAIEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

// The failure reason if the creation failed.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) Model() EndpointDeploymentModelResponseOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) EndpointDeploymentModelResponse {
		return v.Model
	}).(EndpointDeploymentModelResponseOutput)
}

// Read-only provision state status property.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of RAI policy.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) Sku() CognitiveServicesSkuResponsePtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) *CognitiveServicesSkuResponse { return v.Sku }).(CognitiveServicesSkuResponsePtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.OpenAI'.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o OpenAIEndpointDeploymentResourcePropertiesResponseOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OpenAIEndpointDeploymentResourcePropertiesResponse) *string { return v.VersionUpgradeOption }).(pulumi.StringPtrOutput)
}

// Returns metadata about the os patching.
type OsPatchingStatusResponse struct {
	// Time of the latest os patching.
	LatestPatchTime *string `pulumi:"latestPatchTime"`
	// The os patching status.
	PatchStatus *string `pulumi:"patchStatus"`
	// Specifies whether this compute instance is pending for reboot to finish os patching.
	RebootPending *bool `pulumi:"rebootPending"`
	// Time of scheduled reboot.
	ScheduledRebootTime *string `pulumi:"scheduledRebootTime"`
}

// Returns metadata about the os patching.
type OsPatchingStatusResponseOutput struct{ *pulumi.OutputState }

func (OsPatchingStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsPatchingStatusResponse)(nil)).Elem()
}

func (o OsPatchingStatusResponseOutput) ToOsPatchingStatusResponseOutput() OsPatchingStatusResponseOutput {
	return o
}

func (o OsPatchingStatusResponseOutput) ToOsPatchingStatusResponseOutputWithContext(ctx context.Context) OsPatchingStatusResponseOutput {
	return o
}

// Time of the latest os patching.
func (o OsPatchingStatusResponseOutput) LatestPatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsPatchingStatusResponse) *string { return v.LatestPatchTime }).(pulumi.StringPtrOutput)
}

// The os patching status.
func (o OsPatchingStatusResponseOutput) PatchStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsPatchingStatusResponse) *string { return v.PatchStatus }).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is pending for reboot to finish os patching.
func (o OsPatchingStatusResponseOutput) RebootPending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OsPatchingStatusResponse) *bool { return v.RebootPending }).(pulumi.BoolPtrOutput)
}

// Time of scheduled reboot.
func (o OsPatchingStatusResponseOutput) ScheduledRebootTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OsPatchingStatusResponse) *string { return v.ScheduledRebootTime }).(pulumi.StringPtrOutput)
}

type OsPatchingStatusResponsePtrOutput struct{ *pulumi.OutputState }

func (OsPatchingStatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsPatchingStatusResponse)(nil)).Elem()
}

func (o OsPatchingStatusResponsePtrOutput) ToOsPatchingStatusResponsePtrOutput() OsPatchingStatusResponsePtrOutput {
	return o
}

func (o OsPatchingStatusResponsePtrOutput) ToOsPatchingStatusResponsePtrOutputWithContext(ctx context.Context) OsPatchingStatusResponsePtrOutput {
	return o
}

func (o OsPatchingStatusResponsePtrOutput) Elem() OsPatchingStatusResponseOutput {
	return o.ApplyT(func(v *OsPatchingStatusResponse) OsPatchingStatusResponse {
		if v != nil {
			return *v
		}
		var ret OsPatchingStatusResponse
		return ret
	}).(OsPatchingStatusResponseOutput)
}

// Time of the latest os patching.
func (o OsPatchingStatusResponsePtrOutput) LatestPatchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsPatchingStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.LatestPatchTime
	}).(pulumi.StringPtrOutput)
}

// The os patching status.
func (o OsPatchingStatusResponsePtrOutput) PatchStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsPatchingStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.PatchStatus
	}).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is pending for reboot to finish os patching.
func (o OsPatchingStatusResponsePtrOutput) RebootPending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OsPatchingStatusResponse) *bool {
		if v == nil {
			return nil
		}
		return v.RebootPending
	}).(pulumi.BoolPtrOutput)
}

// Time of scheduled reboot.
func (o OsPatchingStatusResponsePtrOutput) ScheduledRebootTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OsPatchingStatusResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduledRebootTime
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReference struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// OutputPathAssetReferenceInput is an input type that accepts OutputPathAssetReferenceArgs and OutputPathAssetReferenceOutput values.
// You can construct a concrete instance of `OutputPathAssetReferenceInput` via:
//
//	OutputPathAssetReferenceArgs{...}
type OutputPathAssetReferenceInput interface {
	pulumi.Input

	ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput
	ToOutputPathAssetReferenceOutputWithContext(context.Context) OutputPathAssetReferenceOutput
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceArgs struct {
	// ARM resource ID of the job.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (OutputPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return i.ToOutputPathAssetReferenceOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput)
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput).ToOutputPathAssetReferencePtrOutputWithContext(ctx)
}

// OutputPathAssetReferencePtrInput is an input type that accepts OutputPathAssetReferenceArgs, OutputPathAssetReferencePtr and OutputPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `OutputPathAssetReferencePtrInput` via:
//
//	        OutputPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type OutputPathAssetReferencePtrInput interface {
	pulumi.Input

	ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput
	ToOutputPathAssetReferencePtrOutputWithContext(context.Context) OutputPathAssetReferencePtrOutput
}

type outputPathAssetReferencePtrType OutputPathAssetReferenceArgs

func OutputPathAssetReferencePtr(v *OutputPathAssetReferenceArgs) OutputPathAssetReferencePtrInput {
	return (*outputPathAssetReferencePtrType)(v)
}

func (*outputPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputPathAssetReference) *OutputPathAssetReference {
		return &v
	}).(OutputPathAssetReferencePtrOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) Elem() OutputPathAssetReferenceOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) OutputPathAssetReference {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReference
		return ret
	}).(OutputPathAssetReferenceOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponse struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutput() OutputPathAssetReferenceResponseOutput {
	return o
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponseOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutput() OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) Elem() OutputPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) OutputPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReferenceResponse
		return ret
	}).(OutputPathAssetReferenceResponseOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponsePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

type PATAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category       *string                                 `pulumi:"category"`
	Credentials    *WorkspaceConnectionPersonalAccessToken `pulumi:"credentials"`
	ExpiryTime     *string                                 `pulumi:"expiryTime"`
	IsSharedToAll  *bool                                   `pulumi:"isSharedToAll"`
	Metadata       interface{}                             `pulumi:"metadata"`
	SharedUserList []string                                `pulumi:"sharedUserList"`
	Target         *string                                 `pulumi:"target"`
}

// PATAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts PATAuthTypeWorkspaceConnectionPropertiesArgs and PATAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `PATAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	PATAuthTypeWorkspaceConnectionPropertiesArgs{...}
type PATAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput
	ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput
}

type PATAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category       pulumi.StringPtrInput                          `pulumi:"category"`
	Credentials    WorkspaceConnectionPersonalAccessTokenPtrInput `pulumi:"credentials"`
	ExpiryTime     pulumi.StringPtrInput                          `pulumi:"expiryTime"`
	IsSharedToAll  pulumi.BoolPtrInput                            `pulumi:"isSharedToAll"`
	Metadata       pulumi.Input                                   `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput                        `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput                          `pulumi:"target"`
}

func (PATAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i PATAuthTypeWorkspaceConnectionPropertiesArgs) ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i PATAuthTypeWorkspaceConnectionPropertiesArgs) ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PATAuthTypeWorkspaceConnectionPropertiesOutput)
}

type PATAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (PATAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'PAT'.
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionPersonalAccessToken {
		return v.Credentials
	}).(WorkspaceConnectionPersonalAccessTokenPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type PATAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                         `pulumi:"category"`
	CreatedByWorkspaceArmId string                                          `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionPersonalAccessTokenResponse `pulumi:"credentials"`
	ExpiryTime              *string                                         `pulumi:"expiryTime"`
	// Group based on connection category
	Group          string      `pulumi:"group"`
	IsSharedToAll  *bool       `pulumi:"isSharedToAll"`
	Metadata       interface{} `pulumi:"metadata"`
	SharedUserList []string    `pulumi:"sharedUserList"`
	Target         *string     `pulumi:"target"`
}

type PATAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToPATAuthTypeWorkspaceConnectionPropertiesResponseOutput() PATAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToPATAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'PAT'.
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionPersonalAccessTokenResponsePtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionPersonalAccessTokenResponse {
		return v.Credentials
	}).(WorkspaceConnectionPersonalAccessTokenResponsePtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type PasswordResponse struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

type PasswordResponseOutput struct{ *pulumi.OutputState }

func (PasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseOutput) ToPasswordResponseOutput() PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) ToPasswordResponseOutputWithContext(ctx context.Context) PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o PasswordResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PasswordResponseArrayOutput struct{ *pulumi.OutputState }

func (PasswordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutput() PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutputWithContext(ctx context.Context) PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) Index(i pulumi.IntInput) PasswordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PasswordResponse {
		return vs[0].([]PasswordResponse)[vs[1].(int)]
	}).(PasswordResponseOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettings struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUser `pulumi:"assignedUser"`
}

// PersonalComputeInstanceSettingsInput is an input type that accepts PersonalComputeInstanceSettingsArgs and PersonalComputeInstanceSettingsOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsInput` via:
//
//	PersonalComputeInstanceSettingsArgs{...}
type PersonalComputeInstanceSettingsInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput
	ToPersonalComputeInstanceSettingsOutputWithContext(context.Context) PersonalComputeInstanceSettingsOutput
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsArgs struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser AssignedUserPtrInput `pulumi:"assignedUser"`
}

func (PersonalComputeInstanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return i.ToPersonalComputeInstanceSettingsOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput)
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput).ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx)
}

// PersonalComputeInstanceSettingsPtrInput is an input type that accepts PersonalComputeInstanceSettingsArgs, PersonalComputeInstanceSettingsPtr and PersonalComputeInstanceSettingsPtrOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsPtrInput` via:
//
//	        PersonalComputeInstanceSettingsArgs{...}
//
//	or:
//
//	        nil
type PersonalComputeInstanceSettingsPtrInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput
	ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Context) PersonalComputeInstanceSettingsPtrOutput
}

type personalComputeInstanceSettingsPtrType PersonalComputeInstanceSettingsArgs

func PersonalComputeInstanceSettingsPtr(v *PersonalComputeInstanceSettingsArgs) PersonalComputeInstanceSettingsPtrInput {
	return (*personalComputeInstanceSettingsPtrType)(v)
}

func (*personalComputeInstanceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersonalComputeInstanceSettings) *PersonalComputeInstanceSettings {
		return &v
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettings) *AssignedUser { return v.AssignedUser }).(AssignedUserPtrOutput)
}

type PersonalComputeInstanceSettingsPtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) Elem() PersonalComputeInstanceSettingsOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) PersonalComputeInstanceSettings {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettings
		return ret
	}).(PersonalComputeInstanceSettingsOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsPtrOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) *AssignedUser {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponse struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUserResponse `pulumi:"assignedUser"`
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponseOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutput() PersonalComputeInstanceSettingsResponseOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponseOutput {
	return o
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponseOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettingsResponse) *AssignedUserResponse { return v.AssignedUser }).(AssignedUserResponsePtrOutput)
}

type PersonalComputeInstanceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutput() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) Elem() PersonalComputeInstanceSettingsResponseOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) PersonalComputeInstanceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettingsResponse
		return ret
	}).(PersonalComputeInstanceSettingsResponseOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponsePtrOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) *AssignedUserResponse {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserResponsePtrOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJob
func (val *PipelineJob) Defaults() *PipelineJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// PipelineJobInput is an input type that accepts PipelineJobArgs and PipelineJobOutput values.
// You can construct a concrete instance of `PipelineJobInput` via:
//
//	PipelineJobArgs{...}
type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(context.Context) PipelineJobOutput
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs pulumi.MapInput `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings pulumi.Input `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId pulumi.StringPtrInput `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobArgs
func (val *PipelineJobArgs) Defaults() *PipelineJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (i PipelineJobArgs) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i PipelineJobArgs) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Notification setting for the job
func (o PipelineJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v PipelineJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// Outputs for the pipeline job
func (o PipelineJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o PipelineJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobResponse
func (val *PipelineJobResponse) Defaults() *PipelineJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponseOutput struct{ *pulumi.OutputState }

func (PipelineJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJobResponse)(nil)).Elem()
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutput() PipelineJobResponseOutput {
	return o
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutputWithContext(ctx context.Context) PipelineJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobResponseOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Notification setting for the job
func (o PipelineJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Outputs for the pipeline job
func (o PipelineJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o PipelineJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobResponseOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Status of the job.
func (o PipelineJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment configuration options.
type PoolEnvironmentConfiguration struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettings `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfiguration
func (val *PoolEnvironmentConfiguration) Defaults() *PoolEnvironmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// PoolEnvironmentConfigurationInput is an input type that accepts PoolEnvironmentConfigurationArgs and PoolEnvironmentConfigurationOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationInput` via:
//
//	PoolEnvironmentConfigurationArgs{...}
type PoolEnvironmentConfigurationInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput
	ToPoolEnvironmentConfigurationOutputWithContext(context.Context) PoolEnvironmentConfigurationOutput
}

// Environment configuration options.
type PoolEnvironmentConfigurationArgs struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe ProbeSettingsPtrInput `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationArgs
func (val *PoolEnvironmentConfigurationArgs) Defaults() *PoolEnvironmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PoolEnvironmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return i.ToPoolEnvironmentConfigurationOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput)
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput).ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx)
}

// PoolEnvironmentConfigurationPtrInput is an input type that accepts PoolEnvironmentConfigurationArgs, PoolEnvironmentConfigurationPtr and PoolEnvironmentConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationPtrInput` via:
//
//	        PoolEnvironmentConfigurationArgs{...}
//
//	or:
//
//	        nil
type PoolEnvironmentConfigurationPtrInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput
	ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Context) PoolEnvironmentConfigurationPtrOutput
}

type poolEnvironmentConfigurationPtrType PoolEnvironmentConfigurationArgs

func PoolEnvironmentConfigurationPtr(v *PoolEnvironmentConfigurationArgs) PoolEnvironmentConfigurationPtrInput {
	return (*poolEnvironmentConfigurationPtrType)(v)
}

func (*poolEnvironmentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolEnvironmentConfiguration) *PoolEnvironmentConfiguration {
		return &v
	}).(PoolEnvironmentConfigurationPtrOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.StartupProbe }).(ProbeSettingsPtrOutput)
}

type PoolEnvironmentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) Elem() PoolEnvironmentConfigurationOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) PoolEnvironmentConfiguration {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfiguration
		return ret
	}).(PoolEnvironmentConfigurationOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationPtrOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationPtrOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationPtrOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponse struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettingsResponse `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationResponse
func (val *PoolEnvironmentConfigurationResponse) Defaults() *PoolEnvironmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutput() PoolEnvironmentConfigurationResponseOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponseOutput {
	return o
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponseOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.StartupProbe }).(ProbeSettingsResponsePtrOutput)
}

type PoolEnvironmentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutput() PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) Elem() PoolEnvironmentConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) PoolEnvironmentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfigurationResponse
		return ret
	}).(PoolEnvironmentConfigurationResponseOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponsePtrOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponsePtrOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponsePtrOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsResponsePtrOutput)
}

type ColumnTransformerArrayMap map[string]ColumnTransformerArrayInput

func (ColumnTransformerArrayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return i.ToColumnTransformerArrayMapOutputWithContext(context.Background())
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayMapOutput)
}

// ColumnTransformerArrayMapInput is an input type that accepts ColumnTransformerArrayMap and ColumnTransformerArrayMapOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayMapInput` via:
//
//	ColumnTransformerArrayMap{ "key": ColumnTransformerArray{ ColumnTransformerArgs{...} } }
type ColumnTransformerArrayMapInput interface {
	pulumi.Input

	ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput
	ToColumnTransformerArrayMapOutputWithContext(context.Context) ColumnTransformerArrayMapOutput
}

type ColumnTransformerArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformer {
		return vs[0].(map[string][]ColumnTransformer)[vs[1].(string)]
	}).(ColumnTransformerArrayOutput)
}

type ColumnTransformerResponseArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutput() ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerResponseArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformerResponse {
		return vs[0].(map[string][]ColumnTransformerResponse)[vs[1].(string)]
	}).(ColumnTransformerResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AADAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(AADAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AKSOutput{})
	pulumi.RegisterOutputType(AKSPtrOutput{})
	pulumi.RegisterOutputType(AKSResponseOutput{})
	pulumi.RegisterOutputType(AKSSchemaPropertiesOutput{})
	pulumi.RegisterOutputType(AKSSchemaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AKSSchemaResponsePropertiesOutput{})
	pulumi.RegisterOutputType(AKSSchemaResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AccessKeyAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AccountApiKeysResponseOutput{})
	pulumi.RegisterOutputType(AccountApiKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(AccountKeyAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(AccountKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(AcrDetailsOutput{})
	pulumi.RegisterOutputType(AcrDetailsArrayOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(ActualCapacityInfoResponseOutput{})
	pulumi.RegisterOutputType(ActualCapacityInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AllFeaturesOutput{})
	pulumi.RegisterOutputType(AllFeaturesPtrOutput{})
	pulumi.RegisterOutputType(AllFeaturesResponseOutput{})
	pulumi.RegisterOutputType(AllFeaturesResponsePtrOutput{})
	pulumi.RegisterOutputType(AllNodesOutput{})
	pulumi.RegisterOutputType(AllNodesPtrOutput{})
	pulumi.RegisterOutputType(AllNodesResponseOutput{})
	pulumi.RegisterOutputType(AllNodesResponsePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeOutput{})
	pulumi.RegisterOutputType(AmlComputePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenOutput{})
	pulumi.RegisterOutputType(AmlTokenPtrOutput{})
	pulumi.RegisterOutputType(AmlTokenComputeIdentityOutput{})
	pulumi.RegisterOutputType(AmlTokenComputeIdentityResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(ApiKeyAuthWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ArmResourceIdOutput{})
	pulumi.RegisterOutputType(ArmResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignedUserOutput{})
	pulumi.RegisterOutputType(AssignedUserPtrOutput{})
	pulumi.RegisterOutputType(AssignedUserResponseOutput{})
	pulumi.RegisterOutputType(AssignedUserResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingPtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponseOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoMLJobOutput{})
	pulumi.RegisterOutputType(AutoMLJobResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(AutologgerSettingsOutput{})
	pulumi.RegisterOutputType(AutologgerSettingsPtrOutput{})
	pulumi.RegisterOutputType(AutologgerSettingsResponseOutput{})
	pulumi.RegisterOutputType(AutologgerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookMapOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseMapOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureOpenAiFineTuningOutput{})
	pulumi.RegisterOutputType(AzureOpenAiFineTuningResponseOutput{})
	pulumi.RegisterOutputType(AzureOpenAiHyperParametersOutput{})
	pulumi.RegisterOutputType(AzureOpenAiHyperParametersPtrOutput{})
	pulumi.RegisterOutputType(AzureOpenAiHyperParametersResponseOutput{})
	pulumi.RegisterOutputType(AzureOpenAiHyperParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(BanditPolicyOutput{})
	pulumi.RegisterOutputType(BanditPolicyPtrOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponseOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchDeploymentTypeOutput{})
	pulumi.RegisterOutputType(BatchDeploymentResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointTypeOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointResponseOutput{})
	pulumi.RegisterOutputType(BatchPipelineComponentDeploymentConfigurationOutput{})
	pulumi.RegisterOutputType(BatchPipelineComponentDeploymentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BatchPipelineComponentDeploymentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BatchPipelineComponentDeploymentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsPtrOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(BindOptionsOutput{})
	pulumi.RegisterOutputType(BindOptionsPtrOutput{})
	pulumi.RegisterOutputType(BindOptionsResponseOutput{})
	pulumi.RegisterOutputType(BindOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildContextOutput{})
	pulumi.RegisterOutputType(BuildContextPtrOutput{})
	pulumi.RegisterOutputType(BuildContextResponseOutput{})
	pulumi.RegisterOutputType(BuildContextResponsePtrOutput{})
	pulumi.RegisterOutputType(CapacityReservationGroupTypeOutput{})
	pulumi.RegisterOutputType(CapacityReservationGroupResponseOutput{})
	pulumi.RegisterOutputType(CategoricalDataDriftMetricThresholdOutput{})
	pulumi.RegisterOutputType(CategoricalDataDriftMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(CategoricalDataQualityMetricThresholdOutput{})
	pulumi.RegisterOutputType(CategoricalDataQualityMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(CategoricalPredictionDriftMetricThresholdOutput{})
	pulumi.RegisterOutputType(CategoricalPredictionDriftMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ClassificationOutput{})
	pulumi.RegisterOutputType(ClassificationModelPerformanceMetricThresholdOutput{})
	pulumi.RegisterOutputType(ClassificationModelPerformanceMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(ClassificationResponseOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationOutput{})
	pulumi.RegisterOutputType(CodeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeContainerTypeOutput{})
	pulumi.RegisterOutputType(CodeContainerResponseOutput{})
	pulumi.RegisterOutputType(CodeVersionTypeOutput{})
	pulumi.RegisterOutputType(CodeVersionResponseOutput{})
	pulumi.RegisterOutputType(CognitiveServicesSkuOutput{})
	pulumi.RegisterOutputType(CognitiveServicesSkuPtrOutput{})
	pulumi.RegisterOutputType(CognitiveServicesSkuResponseOutput{})
	pulumi.RegisterOutputType(CognitiveServicesSkuResponsePtrOutput{})
	pulumi.RegisterOutputType(CollectionOutput{})
	pulumi.RegisterOutputType(CollectionMapOutput{})
	pulumi.RegisterOutputType(CollectionResponseOutput{})
	pulumi.RegisterOutputType(CollectionResponseMapOutput{})
	pulumi.RegisterOutputType(ColumnTransformerOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayOutput{})
	pulumi.RegisterOutputType(CommandJobOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(CommandJobResponseOutput{})
	pulumi.RegisterOutputType(ComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ComponentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ComponentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ComponentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ComponentContainerTypeOutput{})
	pulumi.RegisterOutputType(ComponentContainerResponseOutput{})
	pulumi.RegisterOutputType(ComponentVersionTypeOutput{})
	pulumi.RegisterOutputType(ComponentVersionResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceOutput{})
	pulumi.RegisterOutputType(ComputeInstancePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceApplicationResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceApplicationResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAutologgerSettingsOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAutologgerSettingsPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAutologgerSettingsResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceAutologgerSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceConnectivityEndpointsResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceConnectivityEndpointsResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceContainerResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceCreatedByResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceCreatedByResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataDiskResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataMountResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataMountResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceEnvironmentInfoResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceEnvironmentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceLastOperationResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceLastOperationResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceVersionResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceVersionResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeRecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(ComputeRecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(ComputeRecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(ComputeRecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeRuntimeDtoOutput{})
	pulumi.RegisterOutputType(ComputeRuntimeDtoPtrOutput{})
	pulumi.RegisterOutputType(ComputeRuntimeDtoResponseOutput{})
	pulumi.RegisterOutputType(ComputeRuntimeDtoResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesPtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesResponseOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleArrayOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleResponseOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContentSafetyEndpointDeploymentResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ContentSafetyEndpointDeploymentResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsPtrOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CreateMonitorActionOutput{})
	pulumi.RegisterOutputType(CreateMonitorActionResponseOutput{})
	pulumi.RegisterOutputType(CronOutput{})
	pulumi.RegisterOutputType(CronPtrOutput{})
	pulumi.RegisterOutputType(CronResponseOutput{})
	pulumi.RegisterOutputType(CronResponsePtrOutput{})
	pulumi.RegisterOutputType(CronTriggerOutput{})
	pulumi.RegisterOutputType(CronTriggerResponseOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomKeysOutput{})
	pulumi.RegisterOutputType(CustomKeysPtrOutput{})
	pulumi.RegisterOutputType(CustomKeysResponseOutput{})
	pulumi.RegisterOutputType(CustomKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomKeysWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(CustomKeysWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CustomMetricThresholdOutput{})
	pulumi.RegisterOutputType(CustomMetricThresholdArrayOutput{})
	pulumi.RegisterOutputType(CustomMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(CustomMetricThresholdResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomModelFineTuningOutput{})
	pulumi.RegisterOutputType(CustomModelFineTuningResponseOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputPtrOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(CustomMonitoringSignalOutput{})
	pulumi.RegisterOutputType(CustomMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomServiceOutput{})
	pulumi.RegisterOutputType(CustomServiceArrayOutput{})
	pulumi.RegisterOutputType(CustomServiceResponseOutput{})
	pulumi.RegisterOutputType(CustomServiceResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(DataCollectorOutput{})
	pulumi.RegisterOutputType(DataCollectorPtrOutput{})
	pulumi.RegisterOutputType(DataCollectorResponseOutput{})
	pulumi.RegisterOutputType(DataCollectorResponsePtrOutput{})
	pulumi.RegisterOutputType(DataContainerTypeOutput{})
	pulumi.RegisterOutputType(DataContainerResponseOutput{})
	pulumi.RegisterOutputType(DataDriftMonitoringSignalOutput{})
	pulumi.RegisterOutputType(DataDriftMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(DataFactoryOutput{})
	pulumi.RegisterOutputType(DataFactoryPtrOutput{})
	pulumi.RegisterOutputType(DataFactoryResponseOutput{})
	pulumi.RegisterOutputType(DataImportOutput{})
	pulumi.RegisterOutputType(DataImportResponseOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsResponseOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaPropertiesOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaResponsePropertiesOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DataQualityMonitoringSignalOutput{})
	pulumi.RegisterOutputType(DataQualityMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSourceOutput{})
	pulumi.RegisterOutputType(DatabaseSourcePtrOutput{})
	pulumi.RegisterOutputType(DatabaseSourceResponseOutput{})
	pulumi.RegisterOutputType(DatabaseSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabricksOutput{})
	pulumi.RegisterOutputType(DatabricksPtrOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabricksResponseOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerOutput{})
	pulumi.RegisterOutputType(DockerPtrOutput{})
	pulumi.RegisterOutputType(DockerResponseOutput{})
	pulumi.RegisterOutputType(DockerResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyPtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponseOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysPtrOutput{})
	pulumi.RegisterOutputType(EndpointDeploymentModelOutput{})
	pulumi.RegisterOutputType(EndpointDeploymentModelResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointScheduleActionOutput{})
	pulumi.RegisterOutputType(EndpointScheduleActionResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableMapOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseMapOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseArrayOutput{})
	pulumi.RegisterOutputType(EstimatedVMPriceResponseOutput{})
	pulumi.RegisterOutputType(EstimatedVMPriceResponseArrayOutput{})
	pulumi.RegisterOutputType(EstimatedVMPricesResponseOutput{})
	pulumi.RegisterOutputType(EstimatedVMPricesResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureAttributionDriftMonitoringSignalOutput{})
	pulumi.RegisterOutputType(FeatureAttributionDriftMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(FeatureAttributionMetricThresholdOutput{})
	pulumi.RegisterOutputType(FeatureAttributionMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(FeatureImportanceSettingsOutput{})
	pulumi.RegisterOutputType(FeatureImportanceSettingsPtrOutput{})
	pulumi.RegisterOutputType(FeatureImportanceSettingsResponseOutput{})
	pulumi.RegisterOutputType(FeatureImportanceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureStoreSettingsOutput{})
	pulumi.RegisterOutputType(FeatureStoreSettingsPtrOutput{})
	pulumi.RegisterOutputType(FeatureStoreSettingsResponseOutput{})
	pulumi.RegisterOutputType(FeatureStoreSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureSubsetOutput{})
	pulumi.RegisterOutputType(FeatureSubsetPtrOutput{})
	pulumi.RegisterOutputType(FeatureSubsetResponseOutput{})
	pulumi.RegisterOutputType(FeatureSubsetResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationPtrOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionResponseOutput{})
	pulumi.RegisterOutputType(FileSystemSourceOutput{})
	pulumi.RegisterOutputType(FileSystemSourcePtrOutput{})
	pulumi.RegisterOutputType(FileSystemSourceResponseOutput{})
	pulumi.RegisterOutputType(FileSystemSourceResponsePtrOutput{})
	pulumi.RegisterOutputType(FineTuningJobOutput{})
	pulumi.RegisterOutputType(FineTuningJobResponseOutput{})
	pulumi.RegisterOutputType(FixedInputDataOutput{})
	pulumi.RegisterOutputType(FixedInputDataResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataOutput{})
	pulumi.RegisterOutputType(FlavorDataMapOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseMapOutput{})
	pulumi.RegisterOutputType(ForecastingOutput{})
	pulumi.RegisterOutputType(ForecastingResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FqdnOutboundRuleOutput{})
	pulumi.RegisterOutputType(FqdnOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMetricThresholdOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMetricThresholdArrayOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMetricThresholdResponseArrayOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMonitoringSignalOutput{})
	pulumi.RegisterOutputType(GenerationSafetyQualityMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageMetricThresholdOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageMetricThresholdArrayOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageMetricThresholdResponseArrayOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageSignalOutput{})
	pulumi.RegisterOutputType(GenerationTokenUsageSignalResponseOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(HDInsightOutput{})
	pulumi.RegisterOutputType(HDInsightPtrOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HDInsightResponseOutput{})
	pulumi.RegisterOutputType(HdfsDatastoreOutput{})
	pulumi.RegisterOutputType(HdfsDatastoreResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceOutput{})
	pulumi.RegisterOutputType(IdAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkOutput{})
	pulumi.RegisterOutputType(IdentityForCmkPtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponseOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageClassificationOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(ImageClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationResponseOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageMetadataResponseOutput{})
	pulumi.RegisterOutputType(ImageMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageResponseOutput{})
	pulumi.RegisterOutputType(ImageResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsPtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImportDataActionOutput{})
	pulumi.RegisterOutputType(ImportDataActionResponseOutput{})
	pulumi.RegisterOutputType(IndexColumnOutput{})
	pulumi.RegisterOutputType(IndexColumnArrayOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(InferenceEndpointTypeOutput{})
	pulumi.RegisterOutputType(InferenceEndpointResponseOutput{})
	pulumi.RegisterOutputType(InferenceGroupTypeOutput{})
	pulumi.RegisterOutputType(InferenceGroupResponseOutput{})
	pulumi.RegisterOutputType(InferencePoolTypeOutput{})
	pulumi.RegisterOutputType(InferencePoolResponseOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaMapOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResourcesOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResourcesPtrOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseMapOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseResourcesOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseResourcesPtrOutput{})
	pulumi.RegisterOutputType(IntellectualPropertyOutput{})
	pulumi.RegisterOutputType(IntellectualPropertyPtrOutput{})
	pulumi.RegisterOutputType(IntellectualPropertyResponseOutput{})
	pulumi.RegisterOutputType(IntellectualPropertyResponsePtrOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(JobScheduleActionOutput{})
	pulumi.RegisterOutputType(JobScheduleActionResponseOutput{})
	pulumi.RegisterOutputType(JobServiceOutput{})
	pulumi.RegisterOutputType(JobServiceMapOutput{})
	pulumi.RegisterOutputType(JobServiceResponseOutput{})
	pulumi.RegisterOutputType(JobServiceResponseMapOutput{})
	pulumi.RegisterOutputType(JupyterKernelConfigOutput{})
	pulumi.RegisterOutputType(JupyterKernelConfigPtrOutput{})
	pulumi.RegisterOutputType(JupyterKernelConfigResponseOutput{})
	pulumi.RegisterOutputType(JupyterKernelConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(KerberosKeytabCredentialsOutput{})
	pulumi.RegisterOutputType(KerberosKeytabCredentialsResponseOutput{})
	pulumi.RegisterOutputType(KerberosKeytabSecretsOutput{})
	pulumi.RegisterOutputType(KerberosPasswordCredentialsOutput{})
	pulumi.RegisterOutputType(KerberosPasswordCredentialsResponseOutput{})
	pulumi.RegisterOutputType(KerberosPasswordSecretsOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KubernetesOutput{})
	pulumi.RegisterOutputType(KubernetesPtrOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KubernetesResponseOutput{})
	pulumi.RegisterOutputType(LabelCategoryOutput{})
	pulumi.RegisterOutputType(LabelCategoryMapOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseMapOutput{})
	pulumi.RegisterOutputType(LabelClassOutput{})
	pulumi.RegisterOutputType(LabelClassMapOutput{})
	pulumi.RegisterOutputType(LabelClassResponseOutput{})
	pulumi.RegisterOutputType(LabelClassResponseMapOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobTypeOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LakeHouseArtifactOutput{})
	pulumi.RegisterOutputType(LakeHouseArtifactResponseOutput{})
	pulumi.RegisterOutputType(ListNotebookKeysResultResponseOutput{})
	pulumi.RegisterOutputType(ListNotebookKeysResultResponsePtrOutput{})
	pulumi.RegisterOutputType(LiteralJobInputOutput{})
	pulumi.RegisterOutputType(LiteralJobInputPtrOutput{})
	pulumi.RegisterOutputType(LiteralJobInputResponseOutput{})
	pulumi.RegisterOutputType(LiteralJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledPtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledResponseOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledResponsePtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledPtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledResponseOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledResponsePtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputPtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(MLTableDataOutput{})
	pulumi.RegisterOutputType(MLTableDataResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputOutput{})
	pulumi.RegisterOutputType(MLTableJobInputPtrOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputResponseOutput{})
	pulumi.RegisterOutputType(ManagedComputeIdentityOutput{})
	pulumi.RegisterOutputType(ManagedComputeIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedNetworkProvisionStatusOutput{})
	pulumi.RegisterOutputType(ManagedNetworkProvisionStatusPtrOutput{})
	pulumi.RegisterOutputType(ManagedNetworkProvisionStatusResponseOutput{})
	pulumi.RegisterOutputType(ManagedNetworkProvisionStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedNetworkSettingsOutput{})
	pulumi.RegisterOutputType(ManagedNetworkSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedNetworkSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagedNetworkSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(ManagedOnlineEndpointDeploymentResourcePropertiesOutput{})
	pulumi.RegisterOutputType(ManagedOnlineEndpointDeploymentResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupAssignedIdentitiesOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupAssignedIdentitiesArrayOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupAssignedIdentitiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupAssignedIdentitiesResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupSettingsOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupSettingsPtrOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupSettingsResponseOutput{})
	pulumi.RegisterOutputType(ManagedResourceGroupSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MarketplacePlanResponseOutput{})
	pulumi.RegisterOutputType(MarketplaceSubscriptionTypeOutput{})
	pulumi.RegisterOutputType(MarketplaceSubscriptionResponseOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourcePtrOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponseOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyPtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponseOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ModelContainerTypeOutput{})
	pulumi.RegisterOutputType(ModelContainerResponseOutput{})
	pulumi.RegisterOutputType(ModelPerformanceSignalOutput{})
	pulumi.RegisterOutputType(ModelPerformanceSignalResponseOutput{})
	pulumi.RegisterOutputType(ModelSettingsOutput{})
	pulumi.RegisterOutputType(ModelSettingsPtrOutput{})
	pulumi.RegisterOutputType(ModelSettingsResponseOutput{})
	pulumi.RegisterOutputType(ModelSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ModelVersionTypeOutput{})
	pulumi.RegisterOutputType(ModelVersionResponseOutput{})
	pulumi.RegisterOutputType(MonitorDefinitionOutput{})
	pulumi.RegisterOutputType(MonitorDefinitionResponseOutput{})
	pulumi.RegisterOutputType(MonitorEmailNotificationSettingsOutput{})
	pulumi.RegisterOutputType(MonitorEmailNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MonitorEmailNotificationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MonitorEmailNotificationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorNotificationSettingsOutput{})
	pulumi.RegisterOutputType(MonitorNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MonitorNotificationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MonitorNotificationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitorServerlessSparkComputeOutput{})
	pulumi.RegisterOutputType(MonitorServerlessSparkComputeResponseOutput{})
	pulumi.RegisterOutputType(MonitoringDataSegmentOutput{})
	pulumi.RegisterOutputType(MonitoringDataSegmentPtrOutput{})
	pulumi.RegisterOutputType(MonitoringDataSegmentResponseOutput{})
	pulumi.RegisterOutputType(MonitoringDataSegmentResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitoringTargetOutput{})
	pulumi.RegisterOutputType(MonitoringTargetPtrOutput{})
	pulumi.RegisterOutputType(MonitoringTargetResponseOutput{})
	pulumi.RegisterOutputType(MonitoringTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitoringThresholdOutput{})
	pulumi.RegisterOutputType(MonitoringThresholdPtrOutput{})
	pulumi.RegisterOutputType(MonitoringThresholdResponseOutput{})
	pulumi.RegisterOutputType(MonitoringThresholdResponsePtrOutput{})
	pulumi.RegisterOutputType(MonitoringWorkspaceConnectionOutput{})
	pulumi.RegisterOutputType(MonitoringWorkspaceConnectionPtrOutput{})
	pulumi.RegisterOutputType(MonitoringWorkspaceConnectionResponseOutput{})
	pulumi.RegisterOutputType(MonitoringWorkspaceConnectionResponsePtrOutput{})
	pulumi.RegisterOutputType(MpiOutput{})
	pulumi.RegisterOutputType(MpiPtrOutput{})
	pulumi.RegisterOutputType(MpiResponseOutput{})
	pulumi.RegisterOutputType(MpiResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpFixedParametersOutput{})
	pulumi.RegisterOutputType(NlpFixedParametersPtrOutput{})
	pulumi.RegisterOutputType(NlpFixedParametersResponseOutput{})
	pulumi.RegisterOutputType(NlpFixedParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpParameterSubspaceOutput{})
	pulumi.RegisterOutputType(NlpParameterSubspaceArrayOutput{})
	pulumi.RegisterOutputType(NlpParameterSubspaceResponseOutput{})
	pulumi.RegisterOutputType(NlpParameterSubspaceResponseArrayOutput{})
	pulumi.RegisterOutputType(NlpSweepSettingsOutput{})
	pulumi.RegisterOutputType(NlpSweepSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpSweepSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpSweepSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponseOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponsePtrOutput{})
	pulumi.RegisterOutputType(NoneAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(NotebookResourceInfoResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingOutput{})
	pulumi.RegisterOutputType(NotificationSettingPtrOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(NumericalDataDriftMetricThresholdOutput{})
	pulumi.RegisterOutputType(NumericalDataDriftMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(NumericalDataQualityMetricThresholdOutput{})
	pulumi.RegisterOutputType(NumericalDataQualityMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(NumericalPredictionDriftMetricThresholdOutput{})
	pulumi.RegisterOutputType(NumericalPredictionDriftMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(OAuth2AuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(OAuth2AuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ObjectiveOutput{})
	pulumi.RegisterOutputType(ObjectiveResponseOutput{})
	pulumi.RegisterOutputType(OneLakeDatastoreOutput{})
	pulumi.RegisterOutputType(OneLakeDatastoreResponseOutput{})
	pulumi.RegisterOutputType(OnlineEndpointTypeOutput{})
	pulumi.RegisterOutputType(OnlineEndpointResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsPtrOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OpenAIEndpointDeploymentResourcePropertiesOutput{})
	pulumi.RegisterOutputType(OpenAIEndpointDeploymentResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(OsPatchingStatusResponseOutput{})
	pulumi.RegisterOutputType(OsPatchingStatusResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PATAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(PATAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseArrayOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsPtrOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponseOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
	pulumi.RegisterOutputType(PipelineJobResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayMapOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayMapOutput{})
}
