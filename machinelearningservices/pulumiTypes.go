// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearningservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Machine Learning compute based on AKS.
type AKS struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// AKS properties
	Properties *AKSSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKS
func (val *AKS) Defaults() *AKS {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A Machine Learning compute based on AKS.
type AKSResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// AKS properties
	Properties *AKSSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKSResponse
func (val *AKSResponse) Defaults() *AKSResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AKS properties
type AKSSchemaProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfiguration `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfiguration `pulumi:"sslConfiguration"`
}

// Defaults sets the appropriate defaults for AKSSchemaProperties
func (val *AKSSchemaProperties) Defaults() *AKSSchemaProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

// AKS properties
type AKSSchemaResponseProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfigurationResponse `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfigurationResponse `pulumi:"sslConfiguration"`
	// System services
	SystemServices []SystemServiceResponse `pulumi:"systemServices"`
}

// Defaults sets the appropriate defaults for AKSSchemaResponseProperties
func (val *AKSSchemaResponseProperties) Defaults() *AKSSchemaResponseProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'AccessKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                               `pulumi:"category"`
	Credentials *WorkspaceConnectionAccessKeyResponse `pulumi:"credentials"`
	ExpiryTime  *string                               `pulumi:"expiryTime"`
	Metadata    interface{}                           `pulumi:"metadata"`
	Target      *string                               `pulumi:"target"`
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecrets `pulumi:"secrets"`
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Datastore account key secrets.
type AccountKeyDatastoreSecrets struct {
	// Storage account key.
	Key *string `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType string `pulumi:"secretsType"`
}

// Details of ACR account to be used for the Registry
type AcrDetails struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccount `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccount `pulumi:"userCreatedAcrAccount"`
}

// AcrDetailsInput is an input type that accepts AcrDetailsArgs and AcrDetailsOutput values.
// You can construct a concrete instance of `AcrDetailsInput` via:
//
//	AcrDetailsArgs{...}
type AcrDetailsInput interface {
	pulumi.Input

	ToAcrDetailsOutput() AcrDetailsOutput
	ToAcrDetailsOutputWithContext(context.Context) AcrDetailsOutput
}

// Details of ACR account to be used for the Registry
type AcrDetailsArgs struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount SystemCreatedAcrAccountPtrInput `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount UserCreatedAcrAccountPtrInput `pulumi:"userCreatedAcrAccount"`
}

func (AcrDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArgs) ToAcrDetailsOutput() AcrDetailsOutput {
	return i.ToAcrDetailsOutputWithContext(context.Background())
}

func (i AcrDetailsArgs) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsOutput)
}

// AcrDetailsArrayInput is an input type that accepts AcrDetailsArray and AcrDetailsArrayOutput values.
// You can construct a concrete instance of `AcrDetailsArrayInput` via:
//
//	AcrDetailsArray{ AcrDetailsArgs{...} }
type AcrDetailsArrayInput interface {
	pulumi.Input

	ToAcrDetailsArrayOutput() AcrDetailsArrayOutput
	ToAcrDetailsArrayOutputWithContext(context.Context) AcrDetailsArrayOutput
}

type AcrDetailsArray []AcrDetailsInput

func (AcrDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return i.ToAcrDetailsArrayOutputWithContext(context.Background())
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsArrayOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsOutput struct{ *pulumi.OutputState }

func (AcrDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (o AcrDetailsOutput) ToAcrDetailsOutput() AcrDetailsOutput {
	return o
}

func (o AcrDetailsOutput) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *SystemCreatedAcrAccount { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountPtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsOutput) UserCreatedAcrAccount() UserCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *UserCreatedAcrAccount { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountPtrOutput)
}

type AcrDetailsArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) Index(i pulumi.IntInput) AcrDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetails {
		return vs[0].([]AcrDetails)[vs[1].(int)]
	}).(AcrDetailsOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponse struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccountResponse `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccountResponse `pulumi:"userCreatedAcrAccount"`
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponseOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutput() AcrDetailsResponseOutput {
	return o
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutputWithContext(ctx context.Context) AcrDetailsResponseOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *SystemCreatedAcrAccountResponse { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountResponsePtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) UserCreatedAcrAccount() UserCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *UserCreatedAcrAccountResponse { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountResponsePtrOutput)
}

type AcrDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutput() AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutputWithContext(ctx context.Context) AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) Index(i pulumi.IntInput) AcrDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetailsResponse {
		return vs[0].([]AcrDetailsResponse)[vs[1].(int)]
	}).(AcrDetailsResponseOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfiguration struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationResponse struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodes struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// AllNodesInput is an input type that accepts AllNodesArgs and AllNodesOutput values.
// You can construct a concrete instance of `AllNodesInput` via:
//
//	AllNodesArgs{...}
type AllNodesInput interface {
	pulumi.Input

	ToAllNodesOutput() AllNodesOutput
	ToAllNodesOutputWithContext(context.Context) AllNodesOutput
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesArgs struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType pulumi.StringInput `pulumi:"nodesValueType"`
}

func (AllNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (i AllNodesArgs) ToAllNodesOutput() AllNodesOutput {
	return i.ToAllNodesOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput)
}

func (i AllNodesArgs) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput).ToAllNodesPtrOutputWithContext(ctx)
}

// AllNodesPtrInput is an input type that accepts AllNodesArgs, AllNodesPtr and AllNodesPtrOutput values.
// You can construct a concrete instance of `AllNodesPtrInput` via:
//
//	        AllNodesArgs{...}
//
//	or:
//
//	        nil
type AllNodesPtrInput interface {
	pulumi.Input

	ToAllNodesPtrOutput() AllNodesPtrOutput
	ToAllNodesPtrOutputWithContext(context.Context) AllNodesPtrOutput
}

type allNodesPtrType AllNodesArgs

func AllNodesPtr(v *AllNodesArgs) AllNodesPtrInput {
	return (*allNodesPtrType)(v)
}

func (*allNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (i *allNodesPtrType) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i *allNodesPtrType) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesOutput struct{ *pulumi.OutputState }

func (AllNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (o AllNodesOutput) ToAllNodesOutput() AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o.ToAllNodesPtrOutputWithContext(context.Background())
}

func (o AllNodesOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllNodes) *AllNodes {
		return &v
	}).(AllNodesPtrOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodes) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesPtrOutput struct{ *pulumi.OutputState }

func (AllNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) Elem() AllNodesOutput {
	return o.ApplyT(func(v *AllNodes) AllNodes {
		if v != nil {
			return *v
		}
		var ret AllNodes
		return ret
	}).(AllNodesOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesPtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodes) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponse struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponseOutput struct{ *pulumi.OutputState }

func (AllNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutput() AllNodesResponseOutput {
	return o
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutputWithContext(ctx context.Context) AllNodesResponseOutput {
	return o
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponseOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodesResponse) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesResponsePtrOutput struct{ *pulumi.OutputState }

func (AllNodesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutput() AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutputWithContext(ctx context.Context) AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) Elem() AllNodesResponseOutput {
	return o.ApplyT(func(v *AllNodesResponse) AllNodesResponse {
		if v != nil {
			return *v
		}
		var ret AllNodesResponse
		return ret
	}).(AllNodesResponseOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponsePtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute.
type AmlCompute struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of AmlCompute
	Properties *AmlComputeProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlCompute
func (val *AmlCompute) Defaults() *AmlCompute {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponse struct {
	// ID of the compute node.
	NodeId string `pulumi:"nodeId"`
	// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
	NodeState string `pulumi:"nodeState"`
	// SSH port number of the node.
	Port float64 `pulumi:"port"`
	// Private IP address of the compute node.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP address of the compute node.
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// ID of the Experiment running on the node, if any else null.
	RunId string `pulumi:"runId"`
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponseOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutput() AmlComputeNodeInformationResponseOutput {
	return o
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseOutput {
	return o
}

// ID of the compute node.
func (o AmlComputeNodeInformationResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
func (o AmlComputeNodeInformationResponseOutput) NodeState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeState }).(pulumi.StringOutput)
}

// SSH port number of the node.
func (o AmlComputeNodeInformationResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

// Private IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Public IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// ID of the Experiment running on the node, if any else null.
func (o AmlComputeNodeInformationResponseOutput) RunId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.RunId }).(pulumi.StringOutput)
}

type AmlComputeNodeInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutput() AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) Index(i pulumi.IntInput) AmlComputeNodeInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AmlComputeNodeInformationResponse {
		return vs[0].([]AmlComputeNodeInformationResponse)[vs[1].(int)]
	}).(AmlComputeNodeInformationResponseOutput)
}

// AML Compute properties
type AmlComputeProperties struct {
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettings `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentials `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImage `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputeProperties
func (val *AmlComputeProperties) Defaults() *AmlComputeProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// AML Compute properties
type AmlComputePropertiesResponse struct {
	// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
	AllocationState string `pulumi:"allocationState"`
	// The time at which the compute entered its current allocation state.
	AllocationStateTransitionTime string `pulumi:"allocationStateTransitionTime"`
	// The number of compute nodes currently assigned to the compute.
	CurrentNodeCount int `pulumi:"currentNodeCount"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Collection of errors encountered by various compute nodes during node setup.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Counts of various node states on the compute.
	NodeStateCounts NodeStateCountsResponse `pulumi:"nodeStateCounts"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettingsResponse `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
	TargetNodeCount int `pulumi:"targetNodeCount"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentialsResponse `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImageResponse `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputePropertiesResponse
func (val *AmlComputePropertiesResponse) Defaults() *AmlComputePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// An Azure Machine Learning compute.
type AmlComputeResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of AmlCompute
	Properties *AmlComputePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlComputeResponse
func (val *AmlComputeResponse) Defaults() *AmlComputeResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AML Token identity configuration.
type AmlToken struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AML Token identity configuration.
type AmlTokenResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ApiKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Api key object for workspace connection credential.
	Credentials *WorkspaceConnectionApiKeyResponse `pulumi:"credentials"`
	ExpiryTime  *string                            `pulumi:"expiryTime"`
	Metadata    interface{}                        `pulumi:"metadata"`
	Target      *string                            `pulumi:"target"`
}

// ARM ResourceId of a resource
type ArmResourceId struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ArmResourceIdInput is an input type that accepts ArmResourceIdArgs and ArmResourceIdOutput values.
// You can construct a concrete instance of `ArmResourceIdInput` via:
//
//	ArmResourceIdArgs{...}
type ArmResourceIdInput interface {
	pulumi.Input

	ToArmResourceIdOutput() ArmResourceIdOutput
	ToArmResourceIdOutputWithContext(context.Context) ArmResourceIdOutput
}

// ARM ResourceId of a resource
type ArmResourceIdArgs struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ArmResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (i ArmResourceIdArgs) ToArmResourceIdOutput() ArmResourceIdOutput {
	return i.ToArmResourceIdOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput)
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput).ToArmResourceIdPtrOutputWithContext(ctx)
}

// ArmResourceIdPtrInput is an input type that accepts ArmResourceIdArgs, ArmResourceIdPtr and ArmResourceIdPtrOutput values.
// You can construct a concrete instance of `ArmResourceIdPtrInput` via:
//
//	        ArmResourceIdArgs{...}
//
//	or:
//
//	        nil
type ArmResourceIdPtrInput interface {
	pulumi.Input

	ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput
	ToArmResourceIdPtrOutputWithContext(context.Context) ArmResourceIdPtrOutput
}

type armResourceIdPtrType ArmResourceIdArgs

func ArmResourceIdPtr(v *ArmResourceIdArgs) ArmResourceIdPtrInput {
	return (*armResourceIdPtrType)(v)
}

func (*armResourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdOutput struct{ *pulumi.OutputState }

func (ArmResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdOutput) ToArmResourceIdOutput() ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmResourceId) *ArmResourceId {
		return &v
	}).(ArmResourceIdPtrOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceId) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) Elem() ArmResourceIdOutput {
	return o.ApplyT(func(v *ArmResourceId) ArmResourceId {
		if v != nil {
			return *v
		}
		var ret ArmResourceId
		return ret
	}).(ArmResourceIdOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceId) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdResponse struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ARM ResourceId of a resource
type ArmResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutput() ArmResourceIdResponseOutput {
	return o
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutputWithContext(ctx context.Context) ArmResourceIdResponseOutput {
	return o
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceIdResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutput() ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutputWithContext(ctx context.Context) ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) Elem() ArmResourceIdResponseOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) ArmResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ArmResourceIdResponse
		return ret
	}).(ArmResourceIdResponseOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUser struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

// A user that can be assigned to a compute instance.
type AssignedUserResponse struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

type AutoDeleteSetting struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSetting
func (val *AutoDeleteSetting) Defaults() *AutoDeleteSetting {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

// AutoDeleteSettingInput is an input type that accepts AutoDeleteSettingArgs and AutoDeleteSettingOutput values.
// You can construct a concrete instance of `AutoDeleteSettingInput` via:
//
//	AutoDeleteSettingArgs{...}
type AutoDeleteSettingInput interface {
	pulumi.Input

	ToAutoDeleteSettingOutput() AutoDeleteSettingOutput
	ToAutoDeleteSettingOutputWithContext(context.Context) AutoDeleteSettingOutput
}

type AutoDeleteSettingArgs struct {
	// When to check if an asset is expired
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Expiration condition value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingArgs
func (val *AutoDeleteSettingArgs) Defaults() *AutoDeleteSettingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		tmp.Condition = pulumi.StringPtr("CreatedGreaterThan")
	}
	return &tmp
}
func (AutoDeleteSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return i.ToAutoDeleteSettingOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput)
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput).ToAutoDeleteSettingPtrOutputWithContext(ctx)
}

// AutoDeleteSettingPtrInput is an input type that accepts AutoDeleteSettingArgs, AutoDeleteSettingPtr and AutoDeleteSettingPtrOutput values.
// You can construct a concrete instance of `AutoDeleteSettingPtrInput` via:
//
//	        AutoDeleteSettingArgs{...}
//
//	or:
//
//	        nil
type AutoDeleteSettingPtrInput interface {
	pulumi.Input

	ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput
	ToAutoDeleteSettingPtrOutputWithContext(context.Context) AutoDeleteSettingPtrOutput
}

type autoDeleteSettingPtrType AutoDeleteSettingArgs

func AutoDeleteSettingPtr(v *AutoDeleteSettingArgs) AutoDeleteSettingPtrInput {
	return (*autoDeleteSettingPtrType)(v)
}

func (*autoDeleteSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingPtrOutput)
}

type AutoDeleteSettingOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoDeleteSetting) *AutoDeleteSetting {
		return &v
	}).(AutoDeleteSettingPtrOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingPtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) Elem() AutoDeleteSettingOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) AutoDeleteSetting {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSetting
		return ret
	}).(AutoDeleteSettingOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponse struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingResponse
func (val *AutoDeleteSettingResponse) Defaults() *AutoDeleteSettingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

type AutoDeleteSettingResponseOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutput() AutoDeleteSettingResponseOutput {
	return o
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutputWithContext(ctx context.Context) AutoDeleteSettingResponseOutput {
	return o
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponseOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutput() AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutputWithContext(ctx context.Context) AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) Elem() AutoDeleteSettingResponseOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) AutoDeleteSettingResponse {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSettingResponse
		return ret
	}).(AutoDeleteSettingResponseOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponsePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJob
func (val *AutoMLJob) Defaults() *AutoMLJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobResponse
func (val *AutoMLJobResponse) Defaults() *AutoMLJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// N-Cross validations determined automatically.
type AutoNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Auto pause properties
type AutoPauseProperties struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// Auto pause properties
type AutoPausePropertiesResponse struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// Auto scale properties
type AutoScaleProperties struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

// Auto scale properties
type AutoScalePropertiesResponse struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

type AutoSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Azure Blob datastore configuration.
type AzureBlobDatastore struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastore
func (val *AzureBlobDatastore) Defaults() *AzureBlobDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponse struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreResponse
func (val *AzureBlobDatastoreResponse) Defaults() *AzureBlobDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1Datastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1Datastore
func (val *AzureDataLakeGen1Datastore) Defaults() *AzureDataLakeGen1Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreResponse
func (val *AzureDataLakeGen1DatastoreResponse) Defaults() *AzureDataLakeGen1DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2Datastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2Datastore
func (val *AzureDataLakeGen2Datastore) Defaults() *AzureDataLakeGen2Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreResponse
func (val *AzureDataLakeGen2DatastoreResponse) Defaults() *AzureDataLakeGen2DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

type AzureDataLakeSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Azure Data Lake credential type.
	CredentialType *string `pulumi:"credentialType"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// The Azure Data Lake store name.
	StoreName *string `pulumi:"storeName"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
}

type AzureDataLakeSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeSectionResponse)(nil)).Elem()
}

func (o AzureDataLakeSectionResponseOutput) ToAzureDataLakeSectionResponseOutput() AzureDataLakeSectionResponseOutput {
	return o
}

func (o AzureDataLakeSectionResponseOutput) ToAzureDataLakeSectionResponseOutputWithContext(ctx context.Context) AzureDataLakeSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureDataLakeSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureDataLakeSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureDataLakeSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureDataLakeSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The Azure Data Lake credential type.
func (o AzureDataLakeSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureDataLakeSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o AzureDataLakeSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureDataLakeSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// The Azure Data Lake store name.
func (o AzureDataLakeSectionResponseOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.StoreName }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureDataLakeSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureDataLakeSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureDataLakeSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type AzureDataLakeSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeSectionResponse)(nil)).Elem()
}

func (o AzureDataLakeSectionResponsePtrOutput) ToAzureDataLakeSectionResponsePtrOutput() AzureDataLakeSectionResponsePtrOutput {
	return o
}

func (o AzureDataLakeSectionResponsePtrOutput) ToAzureDataLakeSectionResponsePtrOutputWithContext(ctx context.Context) AzureDataLakeSectionResponsePtrOutput {
	return o
}

func (o AzureDataLakeSectionResponsePtrOutput) Elem() AzureDataLakeSectionResponseOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) AzureDataLakeSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeSectionResponse
		return ret
	}).(AzureDataLakeSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureDataLakeSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureDataLakeSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureDataLakeSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureDataLakeSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Lake credential type.
func (o AzureDataLakeSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureDataLakeSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o AzureDataLakeSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureDataLakeSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Lake store name.
func (o AzureDataLakeSectionResponsePtrOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoreName
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureDataLakeSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureDataLakeSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureDataLakeSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhook struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// AzureDevOpsWebhookInput is an input type that accepts AzureDevOpsWebhookArgs and AzureDevOpsWebhookOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookInput` via:
//
//	AzureDevOpsWebhookArgs{...}
type AzureDevOpsWebhookInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput
	ToAzureDevOpsWebhookOutputWithContext(context.Context) AzureDevOpsWebhookOutput
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookArgs struct {
	// Send callback on a specified notification event
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType pulumi.StringInput `pulumi:"webhookType"`
}

func (AzureDevOpsWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return i.ToAzureDevOpsWebhookOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookOutput)
}

// AzureDevOpsWebhookMapInput is an input type that accepts AzureDevOpsWebhookMap and AzureDevOpsWebhookMapOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookMapInput` via:
//
//	AzureDevOpsWebhookMap{ "key": AzureDevOpsWebhookArgs{...} }
type AzureDevOpsWebhookMapInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput
	ToAzureDevOpsWebhookMapOutputWithContext(context.Context) AzureDevOpsWebhookMapOutput
}

type AzureDevOpsWebhookMap map[string]AzureDevOpsWebhookInput

func (AzureDevOpsWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return i.ToAzureDevOpsWebhookMapOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookMapOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return o
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhook {
		return vs[0].(map[string]AzureDevOpsWebhook)[vs[1].(string)]
	}).(AzureDevOpsWebhookOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponse struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponseOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutput() AzureDevOpsWebhookResponseOutput {
	return o
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookResponseOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookResponseMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutput() AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhookResponse {
		return vs[0].(map[string]AzureDevOpsWebhookResponse)[vs[1].(string)]
	}).(AzureDevOpsWebhookResponseOutput)
}

// Azure File datastore configuration.
type AzureFileDatastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastore
func (val *AzureFileDatastore) Defaults() *AzureFileDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure File datastore configuration.
type AzureFileDatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreResponse
func (val *AzureFileDatastoreResponse) Defaults() *AzureFileDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

type AzureMySqlSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzureMySqlSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSectionResponse)(nil)).Elem()
}

func (o AzureMySqlSectionResponseOutput) ToAzureMySqlSectionResponseOutput() AzureMySqlSectionResponseOutput {
	return o
}

func (o AzureMySqlSectionResponseOutput) ToAzureMySqlSectionResponseOutputWithContext(ctx context.Context) AzureMySqlSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureMySqlSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureMySqlSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureMySqlSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureMySqlSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureMySqlSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureMySqlSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureMySqlSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureMySqlSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureMySqlSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureMySqlSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureMySqlSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureMySqlSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureMySqlSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureMySqlSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureMySqlSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureMySqlSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureMySqlSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureMySqlSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzureMySqlSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMySqlSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMySqlSectionResponse)(nil)).Elem()
}

func (o AzureMySqlSectionResponsePtrOutput) ToAzureMySqlSectionResponsePtrOutput() AzureMySqlSectionResponsePtrOutput {
	return o
}

func (o AzureMySqlSectionResponsePtrOutput) ToAzureMySqlSectionResponsePtrOutputWithContext(ctx context.Context) AzureMySqlSectionResponsePtrOutput {
	return o
}

func (o AzureMySqlSectionResponsePtrOutput) Elem() AzureMySqlSectionResponseOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) AzureMySqlSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureMySqlSectionResponse
		return ret
	}).(AzureMySqlSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureMySqlSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureMySqlSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureMySqlSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureMySqlSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureMySqlSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureMySqlSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureMySqlSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureMySqlSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureMySqlSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureMySqlSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureMySqlSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureMySqlSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureMySqlSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureMySqlSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureMySqlSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureMySqlSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureMySqlSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureMySqlSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzurePostgreSqlSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Indicates SSL requirement of Azure Postgresql server.
	EnableSsl *bool `pulumi:"enableSsl"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzurePostgreSqlSectionResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSectionResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSectionResponseOutput) ToAzurePostgreSqlSectionResponseOutput() AzurePostgreSqlSectionResponseOutput {
	return o
}

func (o AzurePostgreSqlSectionResponseOutput) ToAzurePostgreSqlSectionResponseOutputWithContext(ctx context.Context) AzurePostgreSqlSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzurePostgreSqlSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzurePostgreSqlSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzurePostgreSqlSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzurePostgreSqlSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzurePostgreSqlSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzurePostgreSqlSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Indicates SSL requirement of Azure Postgresql server.
func (o AzurePostgreSqlSectionResponseOutput) EnableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *bool { return v.EnableSsl }).(pulumi.BoolPtrOutput)
}

// The server host endpoint.
func (o AzurePostgreSqlSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzurePostgreSqlSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzurePostgreSqlSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzurePostgreSqlSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzurePostgreSqlSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzurePostgreSqlSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzurePostgreSqlSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzurePostgreSqlSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzurePostgreSqlSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzurePostgreSqlSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzurePostgreSqlSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzurePostgreSqlSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzurePostgreSqlSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePostgreSqlSectionResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSectionResponsePtrOutput) ToAzurePostgreSqlSectionResponsePtrOutput() AzurePostgreSqlSectionResponsePtrOutput {
	return o
}

func (o AzurePostgreSqlSectionResponsePtrOutput) ToAzurePostgreSqlSectionResponsePtrOutputWithContext(ctx context.Context) AzurePostgreSqlSectionResponsePtrOutput {
	return o
}

func (o AzurePostgreSqlSectionResponsePtrOutput) Elem() AzurePostgreSqlSectionResponseOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) AzurePostgreSqlSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzurePostgreSqlSectionResponse
		return ret
	}).(AzurePostgreSqlSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzurePostgreSqlSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzurePostgreSqlSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzurePostgreSqlSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzurePostgreSqlSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzurePostgreSqlSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzurePostgreSqlSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Indicates SSL requirement of Azure Postgresql server.
func (o AzurePostgreSqlSectionResponsePtrOutput) EnableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSsl
	}).(pulumi.BoolPtrOutput)
}

// The server host endpoint.
func (o AzurePostgreSqlSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzurePostgreSqlSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzurePostgreSqlSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzurePostgreSqlSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzurePostgreSqlSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzurePostgreSqlSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzurePostgreSqlSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzurePostgreSqlSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzurePostgreSqlSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzurePostgreSqlSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzurePostgreSqlSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzurePostgreSqlSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzureSqlDatabaseSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseSectionResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseSectionResponseOutput) ToAzureSqlDatabaseSectionResponseOutput() AzureSqlDatabaseSectionResponseOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponseOutput) ToAzureSqlDatabaseSectionResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureSqlDatabaseSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureSqlDatabaseSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureSqlDatabaseSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureSqlDatabaseSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureSqlDatabaseSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureSqlDatabaseSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureSqlDatabaseSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureSqlDatabaseSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureSqlDatabaseSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureSqlDatabaseSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureSqlDatabaseSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureSqlDatabaseSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureSqlDatabaseSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureSqlDatabaseSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureSqlDatabaseSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureSqlDatabaseSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureSqlDatabaseSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureSqlDatabaseSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlDatabaseSectionResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) ToAzureSqlDatabaseSectionResponsePtrOutput() AzureSqlDatabaseSectionResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) ToAzureSqlDatabaseSectionResponsePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseSectionResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) Elem() AzureSqlDatabaseSectionResponseOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) AzureSqlDatabaseSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureSqlDatabaseSectionResponse
		return ret
	}).(AzureSqlDatabaseSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureSqlDatabaseSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureSqlDatabaseSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureSqlDatabaseSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureSqlDatabaseSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureSqlDatabaseSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureSqlDatabaseSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureSqlDatabaseSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureSqlDatabaseSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureSqlDatabaseSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureSqlDatabaseSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzureStorageSectionResponse struct {
	//  Storage Account Key (Deprecated).
	AccountKey *string `pulumi:"accountKey"`
	// Storage Account Name.
	AccountName *string `pulumi:"accountName"`
	// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
	AreWorkspaceManagedIdentitiesAllowed *bool `pulumi:"areWorkspaceManagedIdentitiesAllowed"`
	//  If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
	BlobCacheTimeout  *int                       `pulumi:"blobCacheTimeout"`
	ClientCredentials *ClientCredentialsResponse `pulumi:"clientCredentials"`
	// The storage container name.
	ContainerName *string `pulumi:"containerName"`
	// The credential.
	Credential *string `pulumi:"credential"`
	//  The credential type.
	CredentialType *string `pulumi:"credentialType"`
	// The host of the container.
	Endpoint *string `pulumi:"endpoint"`
	// Indicate if we are using SAS token or Account Key (Deprecated).
	IsSas *bool `pulumi:"isSas"`
	// The protocol to use. Defaults to https.
	Protocol *string `pulumi:"protocol"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	//  SAS Token for the container (Deprecated).
	SasToken *string `pulumi:"sasToken"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type AzureStorageSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageSectionResponse)(nil)).Elem()
}

func (o AzureStorageSectionResponseOutput) ToAzureStorageSectionResponseOutput() AzureStorageSectionResponseOutput {
	return o
}

func (o AzureStorageSectionResponseOutput) ToAzureStorageSectionResponseOutputWithContext(ctx context.Context) AzureStorageSectionResponseOutput {
	return o
}

// Storage Account Key (Deprecated).
func (o AzureStorageSectionResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Storage Account Name.
func (o AzureStorageSectionResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
func (o AzureStorageSectionResponseOutput) AreWorkspaceManagedIdentitiesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *bool { return v.AreWorkspaceManagedIdentitiesAllowed }).(pulumi.BoolPtrOutput)
}

// If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
func (o AzureStorageSectionResponseOutput) BlobCacheTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *int { return v.BlobCacheTimeout }).(pulumi.IntPtrOutput)
}

func (o AzureStorageSectionResponseOutput) ClientCredentials() ClientCredentialsResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *ClientCredentialsResponse { return v.ClientCredentials }).(ClientCredentialsResponsePtrOutput)
}

// The storage container name.
func (o AzureStorageSectionResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The credential.
func (o AzureStorageSectionResponseOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Credential }).(pulumi.StringPtrOutput)
}

// The credential type.
func (o AzureStorageSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The host of the container.
func (o AzureStorageSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Indicate if we are using SAS token or Account Key (Deprecated).
func (o AzureStorageSectionResponseOutput) IsSas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *bool { return v.IsSas }).(pulumi.BoolPtrOutput)
}

// The protocol to use. Defaults to https.
func (o AzureStorageSectionResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureStorageSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// SAS Token for the container (Deprecated).
func (o AzureStorageSectionResponseOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureStorageSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureStorageSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

type AzureStorageSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStorageSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageSectionResponse)(nil)).Elem()
}

func (o AzureStorageSectionResponsePtrOutput) ToAzureStorageSectionResponsePtrOutput() AzureStorageSectionResponsePtrOutput {
	return o
}

func (o AzureStorageSectionResponsePtrOutput) ToAzureStorageSectionResponsePtrOutputWithContext(ctx context.Context) AzureStorageSectionResponsePtrOutput {
	return o
}

func (o AzureStorageSectionResponsePtrOutput) Elem() AzureStorageSectionResponseOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) AzureStorageSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureStorageSectionResponse
		return ret
	}).(AzureStorageSectionResponseOutput)
}

// Storage Account Key (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Storage Account Name.
func (o AzureStorageSectionResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) AreWorkspaceManagedIdentitiesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AreWorkspaceManagedIdentitiesAllowed
	}).(pulumi.BoolPtrOutput)
}

// If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
func (o AzureStorageSectionResponsePtrOutput) BlobCacheTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.BlobCacheTimeout
	}).(pulumi.IntPtrOutput)
}

func (o AzureStorageSectionResponsePtrOutput) ClientCredentials() ClientCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *ClientCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.ClientCredentials
	}).(ClientCredentialsResponsePtrOutput)
}

// The storage container name.
func (o AzureStorageSectionResponsePtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// The credential.
func (o AzureStorageSectionResponsePtrOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(pulumi.StringPtrOutput)
}

// The credential type.
func (o AzureStorageSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The host of the container.
func (o AzureStorageSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Indicate if we are using SAS token or Account Key (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) IsSas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSas
	}).(pulumi.BoolPtrOutput)
}

// The protocol to use. Defaults to https.
func (o AzureStorageSectionResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureStorageSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// SAS Token for the container (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureStorageSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureStorageSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicy
func (val *BanditPolicy) Defaults() *BanditPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyResponse
func (val *BanditPolicyResponse) Defaults() *BanditPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// Batch inference settings per deployment.
type BatchDeploymentType struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfiguration `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettings `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentType
func (val *BatchDeploymentType) Defaults() *BatchDeploymentType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// BatchDeploymentTypeInput is an input type that accepts BatchDeploymentTypeArgs and BatchDeploymentTypeOutput values.
// You can construct a concrete instance of `BatchDeploymentTypeInput` via:
//
//	BatchDeploymentTypeArgs{...}
type BatchDeploymentTypeInput interface {
	pulumi.Input

	ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput
	ToBatchDeploymentTypeOutputWithContext(context.Context) BatchDeploymentTypeOutput
}

// Batch inference settings per deployment.
type BatchDeploymentTypeArgs struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel pulumi.StringPtrInput `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize pulumi.Float64PtrInput `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model pulumi.Input `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction pulumi.StringPtrInput `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName pulumi.StringPtrInput `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources DeploymentResourceConfigurationPtrInput `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings BatchRetrySettingsPtrInput `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentTypeArgs
func (val *BatchDeploymentTypeArgs) Defaults() *BatchDeploymentTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		tmp.ErrorThreshold = pulumi.IntPtr(-1)
	}
	if tmp.LoggingLevel == nil {
		tmp.LoggingLevel = pulumi.StringPtr("Info")
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		tmp.MaxConcurrencyPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MiniBatchSize == nil {
		tmp.MiniBatchSize = pulumi.Float64Ptr(10.0)
	}
	if tmp.OutputAction == nil {
		tmp.OutputAction = pulumi.StringPtr("AppendRow")
	}
	if tmp.OutputFileName == nil {
		tmp.OutputFileName = pulumi.StringPtr("predictions.csv")
	}

	return &tmp
}
func (BatchDeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return i.ToBatchDeploymentTypeOutputWithContext(context.Background())
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchDeploymentTypeOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentTypeOutput struct{ *pulumi.OutputState }

func (BatchDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return o
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o BatchDeploymentTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentTypeOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentTypeOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentTypeOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentTypeOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentTypeOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentTypeOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentType) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentTypeOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentTypeOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentTypeOutput) Resources() DeploymentResourceConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *DeploymentResourceConfiguration { return v.Resources }).(DeploymentResourceConfigurationPtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentTypeOutput) RetrySettings() BatchRetrySettingsPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *BatchRetrySettings { return v.RetrySettings }).(BatchRetrySettingsPtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentResponse struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfigurationResponse `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettingsResponse `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentResponse
func (val *BatchDeploymentResponse) Defaults() *BatchDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// Batch inference settings per deployment.
type BatchDeploymentResponseOutput struct{ *pulumi.OutputState }

func (BatchDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentResponse)(nil)).Elem()
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutput() BatchDeploymentResponseOutput {
	return o
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutputWithContext(ctx context.Context) BatchDeploymentResponseOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o BatchDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentResponseOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentResponseOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentResponseOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentResponseOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentResponseOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentResponseOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentResponseOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o BatchDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentResponseOutput) Resources() DeploymentResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *DeploymentResourceConfigurationResponse { return v.Resources }).(DeploymentResourceConfigurationResponsePtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentResponseOutput) RetrySettings() BatchRetrySettingsResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *BatchRetrySettingsResponse { return v.RetrySettings }).(BatchRetrySettingsResponsePtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaults `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// BatchEndpointTypeInput is an input type that accepts BatchEndpointTypeArgs and BatchEndpointTypeOutput values.
// You can construct a concrete instance of `BatchEndpointTypeInput` via:
//
//	BatchEndpointTypeArgs{...}
type BatchEndpointTypeInput interface {
	pulumi.Input

	ToBatchEndpointTypeOutput() BatchEndpointTypeOutput
	ToBatchEndpointTypeOutputWithContext(context.Context) BatchEndpointTypeOutput
}

// Batch endpoint configuration.
type BatchEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults BatchEndpointDefaultsPtrInput `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (BatchEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return i.ToBatchEndpointTypeOutputWithContext(context.Background())
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointTypeOutput)
}

// Batch endpoint configuration.
type BatchEndpointTypeOutput struct{ *pulumi.OutputState }

func (BatchEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return o
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointTypeOutput) Defaults() BatchEndpointDefaultsPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *BatchEndpointDefaults { return v.Defaults }).(BatchEndpointDefaultsPtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o BatchEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Batch endpoint default values
type BatchEndpointDefaults struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// BatchEndpointDefaultsInput is an input type that accepts BatchEndpointDefaultsArgs and BatchEndpointDefaultsOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsInput` via:
//
//	BatchEndpointDefaultsArgs{...}
type BatchEndpointDefaultsInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput
	ToBatchEndpointDefaultsOutputWithContext(context.Context) BatchEndpointDefaultsOutput
}

// Batch endpoint default values
type BatchEndpointDefaultsArgs struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName pulumi.StringPtrInput `pulumi:"deploymentName"`
}

func (BatchEndpointDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return i.ToBatchEndpointDefaultsOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput)
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput).ToBatchEndpointDefaultsPtrOutputWithContext(ctx)
}

// BatchEndpointDefaultsPtrInput is an input type that accepts BatchEndpointDefaultsArgs, BatchEndpointDefaultsPtr and BatchEndpointDefaultsPtrOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsPtrInput` via:
//
//	        BatchEndpointDefaultsArgs{...}
//
//	or:
//
//	        nil
type BatchEndpointDefaultsPtrInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput
	ToBatchEndpointDefaultsPtrOutputWithContext(context.Context) BatchEndpointDefaultsPtrOutput
}

type batchEndpointDefaultsPtrType BatchEndpointDefaultsArgs

func BatchEndpointDefaultsPtr(v *BatchEndpointDefaultsArgs) BatchEndpointDefaultsPtrInput {
	return (*batchEndpointDefaultsPtrType)(v)
}

func (*batchEndpointDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchEndpointDefaults) *BatchEndpointDefaults {
		return &v
	}).(BatchEndpointDefaultsPtrOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaults) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsPtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) Elem() BatchEndpointDefaultsOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) BatchEndpointDefaults {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaults
		return ret
	}).(BatchEndpointDefaultsOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsResponse struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// Batch endpoint default values
type BatchEndpointDefaultsResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutput() BatchEndpointDefaultsResponseOutput {
	return o
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponseOutput {
	return o
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponseOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaultsResponse) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutput() BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) Elem() BatchEndpointDefaultsResponseOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) BatchEndpointDefaultsResponse {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaultsResponse
		return ret
	}).(BatchEndpointDefaultsResponseOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponsePtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaultsResponse `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
}

// Batch endpoint configuration.
type BatchEndpointResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointResponse)(nil)).Elem()
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutput() BatchEndpointResponseOutput {
	return o
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutputWithContext(ctx context.Context) BatchEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointResponseOutput) Defaults() BatchEndpointDefaultsResponsePtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *BatchEndpointDefaultsResponse { return v.Defaults }).(BatchEndpointDefaultsResponsePtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o BatchEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint URI.
func (o BatchEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o BatchEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettings struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettings
func (val *BatchRetrySettings) Defaults() *BatchRetrySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchRetrySettingsInput is an input type that accepts BatchRetrySettingsArgs and BatchRetrySettingsOutput values.
// You can construct a concrete instance of `BatchRetrySettingsInput` via:
//
//	BatchRetrySettingsArgs{...}
type BatchRetrySettingsInput interface {
	pulumi.Input

	ToBatchRetrySettingsOutput() BatchRetrySettingsOutput
	ToBatchRetrySettingsOutputWithContext(context.Context) BatchRetrySettingsOutput
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsArgs struct {
	// Maximum retry count for a mini-batch
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsArgs
func (val *BatchRetrySettingsArgs) Defaults() *BatchRetrySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		tmp.MaxRetries = pulumi.IntPtr(3)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT30S")
	}
	return &tmp
}
func (BatchRetrySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return i.ToBatchRetrySettingsOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput)
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput).ToBatchRetrySettingsPtrOutputWithContext(ctx)
}

// BatchRetrySettingsPtrInput is an input type that accepts BatchRetrySettingsArgs, BatchRetrySettingsPtr and BatchRetrySettingsPtrOutput values.
// You can construct a concrete instance of `BatchRetrySettingsPtrInput` via:
//
//	        BatchRetrySettingsArgs{...}
//
//	or:
//
//	        nil
type BatchRetrySettingsPtrInput interface {
	pulumi.Input

	ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput
	ToBatchRetrySettingsPtrOutputWithContext(context.Context) BatchRetrySettingsPtrOutput
}

type batchRetrySettingsPtrType BatchRetrySettingsArgs

func BatchRetrySettingsPtr(v *BatchRetrySettingsArgs) BatchRetrySettingsPtrInput {
	return (*batchRetrySettingsPtrType)(v)
}

func (*batchRetrySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchRetrySettings) *BatchRetrySettings {
		return &v
	}).(BatchRetrySettingsPtrOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsPtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) Elem() BatchRetrySettingsOutput {
	return o.ApplyT(func(v *BatchRetrySettings) BatchRetrySettings {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettings
		return ret
	}).(BatchRetrySettingsOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponse struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsResponse
func (val *BatchRetrySettingsResponse) Defaults() *BatchRetrySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponseOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutput() BatchRetrySettingsResponseOutput {
	return o
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutputWithContext(ctx context.Context) BatchRetrySettingsResponseOutput {
	return o
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponseOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutput() BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutputWithContext(ctx context.Context) BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) Elem() BatchRetrySettingsResponseOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) BatchRetrySettingsResponse {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettingsResponse
		return ret
	}).(BatchRetrySettingsResponseOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponsePtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithm struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponse struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Describes the bind options for the container
type BindOptions struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

// Describes the bind options for the container
type BindOptionsResponse struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

// Configuration settings for Docker build context
type BuildContext struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContext
func (val *BuildContext) Defaults() *BuildContext {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// BuildContextInput is an input type that accepts BuildContextArgs and BuildContextOutput values.
// You can construct a concrete instance of `BuildContextInput` via:
//
//	BuildContextArgs{...}
type BuildContextInput interface {
	pulumi.Input

	ToBuildContextOutput() BuildContextOutput
	ToBuildContextOutputWithContext(context.Context) BuildContextOutput
}

// Configuration settings for Docker build context
type BuildContextArgs struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri pulumi.StringInput `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextArgs
func (val *BuildContextArgs) Defaults() *BuildContextArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		tmp.DockerfilePath = pulumi.StringPtr("Dockerfile")
	}
	return &tmp
}
func (BuildContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (i BuildContextArgs) ToBuildContextOutput() BuildContextOutput {
	return i.ToBuildContextOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput)
}

func (i BuildContextArgs) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput).ToBuildContextPtrOutputWithContext(ctx)
}

// BuildContextPtrInput is an input type that accepts BuildContextArgs, BuildContextPtr and BuildContextPtrOutput values.
// You can construct a concrete instance of `BuildContextPtrInput` via:
//
//	        BuildContextArgs{...}
//
//	or:
//
//	        nil
type BuildContextPtrInput interface {
	pulumi.Input

	ToBuildContextPtrOutput() BuildContextPtrOutput
	ToBuildContextPtrOutputWithContext(context.Context) BuildContextPtrOutput
}

type buildContextPtrType BuildContextArgs

func BuildContextPtr(v *BuildContextArgs) BuildContextPtrInput {
	return (*buildContextPtrType)(v)
}

func (*buildContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (i *buildContextPtrType) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i *buildContextPtrType) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextOutput struct{ *pulumi.OutputState }

func (BuildContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (o BuildContextOutput) ToBuildContextOutput() BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o.ToBuildContextPtrOutputWithContext(context.Background())
}

func (o BuildContextOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildContext) *BuildContext {
		return &v
	}).(BuildContextPtrOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContext) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContext) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextPtrOutput struct{ *pulumi.OutputState }

func (BuildContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) Elem() BuildContextOutput {
	return o.ApplyT(func(v *BuildContext) BuildContext {
		if v != nil {
			return *v
		}
		var ret BuildContext
		return ret
	}).(BuildContextOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextPtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextPtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextResponse struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextResponse
func (val *BuildContextResponse) Defaults() *BuildContextResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// Configuration settings for Docker build context
type BuildContextResponseOutput struct{ *pulumi.OutputState }

func (BuildContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutput() BuildContextResponseOutput {
	return o
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutputWithContext(ctx context.Context) BuildContextResponseOutput {
	return o
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponseOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContextResponse) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponseOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContextResponse) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildContextResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutput() BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutputWithContext(ctx context.Context) BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) Elem() BuildContextResponseOutput {
	return o.ApplyT(func(v *BuildContextResponse) BuildContextResponse {
		if v != nil {
			return *v
		}
		var ret BuildContextResponse
		return ret
	}).(BuildContextResponseOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponsePtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponsePtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// Datastore certificate secrets.
type CertificateDatastoreSecrets struct {
	// Service principal certificate.
	Certificate *string `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType string `pulumi:"secretsType"`
}

// Classification task in AutoML Table vertical.
type Classification struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Classification
func (val *Classification) Defaults() *Classification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Classification task in AutoML Table vertical.
type ClassificationResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ClassificationResponse
func (val *ClassificationResponse) Defaults() *ClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Classification Training related configuration.
type ClassificationTrainingSettings struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettings
func (val *ClassificationTrainingSettings) Defaults() *ClassificationTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Classification Training related configuration.
type ClassificationTrainingSettingsResponse struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettingsResponse
func (val *ClassificationTrainingSettingsResponse) Defaults() *ClassificationTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

type ClientCredentialsResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
}

type ClientCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ClientCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCredentialsResponse)(nil)).Elem()
}

func (o ClientCredentialsResponseOutput) ToClientCredentialsResponseOutput() ClientCredentialsResponseOutput {
	return o
}

func (o ClientCredentialsResponseOutput) ToClientCredentialsResponseOutputWithContext(ctx context.Context) ClientCredentialsResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o ClientCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o ClientCredentialsResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o ClientCredentialsResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o ClientCredentialsResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o ClientCredentialsResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o ClientCredentialsResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o ClientCredentialsResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o ClientCredentialsResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o ClientCredentialsResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o ClientCredentialsResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o ClientCredentialsResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type ClientCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCredentialsResponse)(nil)).Elem()
}

func (o ClientCredentialsResponsePtrOutput) ToClientCredentialsResponsePtrOutput() ClientCredentialsResponsePtrOutput {
	return o
}

func (o ClientCredentialsResponsePtrOutput) ToClientCredentialsResponsePtrOutputWithContext(ctx context.Context) ClientCredentialsResponsePtrOutput {
	return o
}

func (o ClientCredentialsResponsePtrOutput) Elem() ClientCredentialsResponseOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) ClientCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret ClientCredentialsResponse
		return ret
	}).(ClientCredentialsResponseOutput)
}

// The authority URL used for authentication.
func (o ClientCredentialsResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o ClientCredentialsResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o ClientCredentialsResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o ClientCredentialsResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o ClientCredentialsResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o ClientCredentialsResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o ClientCredentialsResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o ClientCredentialsResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o ClientCredentialsResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o ClientCredentialsResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o ClientCredentialsResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfiguration struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// CodeConfigurationInput is an input type that accepts CodeConfigurationArgs and CodeConfigurationOutput values.
// You can construct a concrete instance of `CodeConfigurationInput` via:
//
//	CodeConfigurationArgs{...}
type CodeConfigurationInput interface {
	pulumi.Input

	ToCodeConfigurationOutput() CodeConfigurationOutput
	ToCodeConfigurationOutputWithContext(context.Context) CodeConfigurationOutput
}

// Configuration for a scoring code asset.
type CodeConfigurationArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript pulumi.StringInput `pulumi:"scoringScript"`
}

func (CodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return i.ToCodeConfigurationOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput)
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput).ToCodeConfigurationPtrOutputWithContext(ctx)
}

// CodeConfigurationPtrInput is an input type that accepts CodeConfigurationArgs, CodeConfigurationPtr and CodeConfigurationPtrOutput values.
// You can construct a concrete instance of `CodeConfigurationPtrInput` via:
//
//	        CodeConfigurationArgs{...}
//
//	or:
//
//	        nil
type CodeConfigurationPtrInput interface {
	pulumi.Input

	ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput
	ToCodeConfigurationPtrOutputWithContext(context.Context) CodeConfigurationPtrOutput
}

type codeConfigurationPtrType CodeConfigurationArgs

func CodeConfigurationPtr(v *CodeConfigurationArgs) CodeConfigurationPtrInput {
	return (*codeConfigurationPtrType)(v)
}

func (*codeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationOutput struct{ *pulumi.OutputState }

func (CodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeConfiguration) *CodeConfiguration {
		return &v
	}).(CodeConfigurationPtrOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfiguration) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfiguration) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) Elem() CodeConfigurationOutput {
	return o.ApplyT(func(v *CodeConfiguration) CodeConfiguration {
		if v != nil {
			return *v
		}
		var ret CodeConfiguration
		return ret
	}).(CodeConfigurationOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationPtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationPtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// Configuration for a scoring code asset.
type CodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutput() CodeConfigurationResponseOutput {
	return o
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutputWithContext(ctx context.Context) CodeConfigurationResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponseOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutput() CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutputWithContext(ctx context.Context) CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) Elem() CodeConfigurationResponseOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) CodeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CodeConfigurationResponse
		return ret
	}).(CodeConfigurationResponseOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponsePtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponsePtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Container for code asset versions.
type CodeContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerType
func (val *CodeContainerType) Defaults() *CodeContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeContainerTypeInput is an input type that accepts CodeContainerTypeArgs and CodeContainerTypeOutput values.
// You can construct a concrete instance of `CodeContainerTypeInput` via:
//
//	CodeContainerTypeArgs{...}
type CodeContainerTypeInput interface {
	pulumi.Input

	ToCodeContainerTypeOutput() CodeContainerTypeOutput
	ToCodeContainerTypeOutputWithContext(context.Context) CodeContainerTypeOutput
}

// Container for code asset versions.
type CodeContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerTypeArgs
func (val *CodeContainerTypeArgs) Defaults() *CodeContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return i.ToCodeContainerTypeOutputWithContext(context.Background())
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeContainerTypeOutput)
}

// Container for code asset versions.
type CodeContainerTypeOutput struct{ *pulumi.OutputState }

func (CodeContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return o
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return o
}

// The asset description text.
func (o CodeContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for code asset versions.
type CodeContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerResponse
func (val *CodeContainerResponse) Defaults() *CodeContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for code asset versions.
type CodeContainerResponseOutput struct{ *pulumi.OutputState }

func (CodeContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerResponse)(nil)).Elem()
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutput() CodeContainerResponseOutput {
	return o
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutputWithContext(ctx context.Context) CodeContainerResponseOutput {
	return o
}

// The asset description text.
func (o CodeContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o CodeContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o CodeContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o CodeContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code container.
func (o CodeContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionType struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionType
func (val *CodeVersionType) Defaults() *CodeVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeVersionTypeInput is an input type that accepts CodeVersionTypeArgs and CodeVersionTypeOutput values.
// You can construct a concrete instance of `CodeVersionTypeInput` via:
//
//	CodeVersionTypeArgs{...}
type CodeVersionTypeInput interface {
	pulumi.Input

	ToCodeVersionTypeOutput() CodeVersionTypeOutput
	ToCodeVersionTypeOutputWithContext(context.Context) CodeVersionTypeOutput
}

// Code asset version details.
type CodeVersionTypeArgs struct {
	// Uri where code is located
	CodeUri pulumi.StringPtrInput `pulumi:"codeUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionTypeArgs
func (val *CodeVersionTypeArgs) Defaults() *CodeVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return i.ToCodeVersionTypeOutputWithContext(context.Background())
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeVersionTypeOutput)
}

// Code asset version details.
type CodeVersionTypeOutput struct{ *pulumi.OutputState }

func (CodeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return o
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return o
}

// Uri where code is located
func (o CodeVersionTypeOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionResponse struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionResponse
func (val *CodeVersionResponse) Defaults() *CodeVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Code asset version details.
type CodeVersionResponseOutput struct{ *pulumi.OutputState }

func (CodeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionResponse)(nil)).Elem()
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutput() CodeVersionResponseOutput {
	return o
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutputWithContext(ctx context.Context) CodeVersionResponseOutput {
	return o
}

// Uri where code is located
func (o CodeVersionResponseOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code version.
func (o CodeVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Column transformer parameters.
type ColumnTransformer struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// Column transformer parameters.
type ColumnTransformerResponse struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// Command job definition.
type CommandJob struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimits `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJob
func (val *CommandJob) Defaults() *CommandJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Command Job limit class.
type CommandJobLimits struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// Command Job limit class.
type CommandJobLimitsResponse struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// Command job definition.
type CommandJobResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimitsResponse `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// Input parameters.
	Parameters interface{} `pulumi:"parameters"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobResponse
func (val *CommandJobResponse) Defaults() *CommandJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerType
func (val *ComponentContainerType) Defaults() *ComponentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentContainerTypeInput is an input type that accepts ComponentContainerTypeArgs and ComponentContainerTypeOutput values.
// You can construct a concrete instance of `ComponentContainerTypeInput` via:
//
//	ComponentContainerTypeArgs{...}
type ComponentContainerTypeInput interface {
	pulumi.Input

	ToComponentContainerTypeOutput() ComponentContainerTypeOutput
	ToComponentContainerTypeOutputWithContext(context.Context) ComponentContainerTypeOutput
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerTypeArgs
func (val *ComponentContainerTypeArgs) Defaults() *ComponentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return i.ToComponentContainerTypeOutputWithContext(context.Background())
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentContainerTypeOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeOutput struct{ *pulumi.OutputState }

func (ComponentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return o
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return o
}

// The asset description text.
func (o ComponentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerResponse
func (val *ComponentContainerResponse) Defaults() *ComponentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponseOutput struct{ *pulumi.OutputState }

func (ComponentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerResponse)(nil)).Elem()
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutput() ComponentContainerResponseOutput {
	return o
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutputWithContext(ctx context.Context) ComponentContainerResponseOutput {
	return o
}

// The asset description text.
func (o ComponentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ComponentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ComponentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ComponentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component container.
func (o ComponentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionType struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionType
func (val *ComponentVersionType) Defaults() *ComponentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentVersionTypeInput is an input type that accepts ComponentVersionTypeArgs and ComponentVersionTypeOutput values.
// You can construct a concrete instance of `ComponentVersionTypeInput` via:
//
//	ComponentVersionTypeArgs{...}
type ComponentVersionTypeInput interface {
	pulumi.Input

	ToComponentVersionTypeOutput() ComponentVersionTypeOutput
	ToComponentVersionTypeOutputWithContext(context.Context) ComponentVersionTypeOutput
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeArgs struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec pulumi.Input `pulumi:"componentSpec"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionTypeArgs
func (val *ComponentVersionTypeArgs) Defaults() *ComponentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return i.ToComponentVersionTypeOutputWithContext(context.Background())
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVersionTypeOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeOutput struct{ *pulumi.OutputState }

func (ComponentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return o
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionTypeOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionType) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponse struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionResponse
func (val *ComponentVersionResponse) Defaults() *ComponentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponseOutput struct{ *pulumi.OutputState }

func (ComponentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionResponse)(nil)).Elem()
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutput() ComponentVersionResponseOutput {
	return o
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutputWithContext(ctx context.Context) ComponentVersionResponseOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionResponseOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionResponse) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component version.
func (o ComponentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstance struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of ComputeInstance
	Properties *ComputeInstanceProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstance
func (val *ComputeInstance) Defaults() *ComputeInstance {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Defines an Aml Instance application and its connectivity endpoint URI.
type ComputeInstanceApplicationResponse struct {
	// Name of the ComputeInstance application.
	DisplayName *string `pulumi:"displayName"`
	// Application' endpoint URI.
	EndpointUri *string `pulumi:"endpointUri"`
}

// Defines all connectivity endpoints and properties for an ComputeInstance.
type ComputeInstanceConnectivityEndpointsResponse struct {
	// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP Address of this ComputeInstance.
	PublicIpAddress string `pulumi:"publicIpAddress"`
}

// Defines an Aml Instance container.
type ComputeInstanceContainerResponse struct {
	// Auto save settings.
	Autosave *string `pulumi:"autosave"`
	// Environment information of this container.
	Environment *ComputeInstanceEnvironmentInfoResponse `pulumi:"environment"`
	// Information of GPU.
	Gpu *string `pulumi:"gpu"`
	// Name of the ComputeInstance container.
	Name *string `pulumi:"name"`
	// network of this container.
	Network *string `pulumi:"network"`
	// services of this containers.
	Services []interface{} `pulumi:"services"`
}

// Describes information on user who created this ComputeInstance.
type ComputeInstanceCreatedByResponse struct {
	// Uniquely identifies the user within his/her organization.
	UserId string `pulumi:"userId"`
	// Name of the user.
	UserName string `pulumi:"userName"`
	// Uniquely identifies user' Azure Active Directory organization.
	UserOrgId string `pulumi:"userOrgId"`
}

// Defines an Aml Instance DataDisk.
type ComputeInstanceDataDiskResponse struct {
	// Caching type of Data Disk.
	Caching *string `pulumi:"caching"`
	// The initial disk size in gigabytes.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun *int `pulumi:"lun"`
	// type of this storage account.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Defaults sets the appropriate defaults for ComputeInstanceDataDiskResponse
func (val *ComputeInstanceDataDiskResponse) Defaults() *ComputeInstanceDataDiskResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StorageAccountType == nil {
		storageAccountType_ := "Standard_LRS"
		tmp.StorageAccountType = &storageAccountType_
	}
	return &tmp
}

// Defines an Aml Instance DataMount.
type ComputeInstanceDataMountResponse struct {
	// who this data mount created by.
	CreatedBy *string `pulumi:"createdBy"`
	// Error of this data mount.
	Error *string `pulumi:"error"`
	// Mount Action.
	MountAction *string `pulumi:"mountAction"`
	// name of the ComputeInstance data mount.
	MountName *string `pulumi:"mountName"`
	// Path of this data mount.
	MountPath *string `pulumi:"mountPath"`
	// Mount state.
	MountState *string `pulumi:"mountState"`
	// The time when the disk mounted.
	MountedOn *string `pulumi:"mountedOn"`
	// Source of the ComputeInstance data mount.
	Source *string `pulumi:"source"`
	// Data source type.
	SourceType *string `pulumi:"sourceType"`
}

// Environment information
type ComputeInstanceEnvironmentInfoResponse struct {
	// name of environment.
	Name *string `pulumi:"name"`
	// version of environment.
	Version *string `pulumi:"version"`
}

// The last operation on ComputeInstance.
type ComputeInstanceLastOperationResponse struct {
	// Name of the last operation.
	OperationName *string `pulumi:"operationName"`
	// Operation status.
	OperationStatus *string `pulumi:"operationStatus"`
	// Time of the last operation.
	OperationTime *string `pulumi:"operationTime"`
	// Trigger of operation.
	OperationTrigger *string `pulumi:"operationTrigger"`
}

// Compute Instance properties
type ComputeInstanceProperties struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// List of Custom Services added to the compute.
	CustomServices []CustomService `pulumi:"customServices"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettings `pulumi:"personalComputeInstanceSettings"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedules `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScripts `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettings `pulumi:"sshSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstanceProperties
func (val *ComputeInstanceProperties) Defaults() *ComputeInstanceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// Compute Instance properties
type ComputeInstancePropertiesResponse struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// Describes available applications and their endpoints on this ComputeInstance.
	Applications []ComputeInstanceApplicationResponse `pulumi:"applications"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// Describes all connectivity endpoints available for this ComputeInstance.
	ConnectivityEndpoints ComputeInstanceConnectivityEndpointsResponse `pulumi:"connectivityEndpoints"`
	// Describes informations of containers on this ComputeInstance.
	Containers []ComputeInstanceContainerResponse `pulumi:"containers"`
	// Describes information on user who created this ComputeInstance.
	CreatedBy ComputeInstanceCreatedByResponse `pulumi:"createdBy"`
	// List of Custom Services added to the compute.
	CustomServices []CustomServiceResponse `pulumi:"customServices"`
	// Describes informations of dataDisks on this ComputeInstance.
	DataDisks []ComputeInstanceDataDiskResponse `pulumi:"dataDisks"`
	// Describes informations of dataMounts on this ComputeInstance.
	DataMounts []ComputeInstanceDataMountResponse `pulumi:"dataMounts"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Collection of errors encountered on this ComputeInstance.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// The last operation on ComputeInstance.
	LastOperation ComputeInstanceLastOperationResponse `pulumi:"lastOperation"`
	// Returns metadata about the operating system image for this compute instance.
	OsImageMetadata ImageMetadataResponse `pulumi:"osImageMetadata"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettingsResponse `pulumi:"personalComputeInstanceSettings"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedulesResponse `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScriptsResponse `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettingsResponse `pulumi:"sshSettings"`
	// The current state of this ComputeInstance.
	State string `pulumi:"state"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// ComputeInstance version.
	Versions ComputeInstanceVersionResponse `pulumi:"versions"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstancePropertiesResponse
func (val *ComputeInstancePropertiesResponse) Defaults() *ComputeInstancePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// An Azure Machine Learning compute instance.
type ComputeInstanceResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of ComputeInstance
	Properties *ComputeInstancePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstanceResponse
func (val *ComputeInstanceResponse) Defaults() *ComputeInstanceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettings struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettings
func (val *ComputeInstanceSshSettings) Defaults() *ComputeInstanceSshSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsResponse struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// Describes the admin user name.
	AdminUserName string `pulumi:"adminUserName"`
	// Describes the port for connecting through SSH.
	SshPort int `pulumi:"sshPort"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettingsResponse
func (val *ComputeInstanceSshSettingsResponse) Defaults() *ComputeInstanceSshSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// Version of computeInstance.
type ComputeInstanceVersionResponse struct {
	// Runtime of compute instance.
	Runtime *string `pulumi:"runtime"`
}

// The list of schedules to be applied on the computes
type ComputeSchedules struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopSchedule `pulumi:"computeStartStop"`
}

// The list of schedules to be applied on the computes
type ComputeSchedulesResponse struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopScheduleResponse `pulumi:"computeStartStop"`
}

// Compute start stop schedule properties
type ComputeStartStopSchedule struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *Cron `pulumi:"cron"`
	// Required if triggerType is Recurrence.
	Recurrence *Recurrence `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBase `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopSchedule
func (val *ComputeStartStopSchedule) Defaults() *ComputeStartStopSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// Compute start stop schedule properties
type ComputeStartStopScheduleResponse struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *CronResponse `pulumi:"cron"`
	// A system assigned id for the schedule.
	Id string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus string `pulumi:"provisioningStatus"`
	// Required if triggerType is Recurrence.
	Recurrence *RecurrenceResponse `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBaseResponse `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopScheduleResponse
func (val *ComputeStartStopScheduleResponse) Defaults() *ComputeStartStopScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirements struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettings `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettings `pulumi:"containerResourceRequests"`
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponse struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettingsResponse `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettingsResponse `pulumi:"containerResourceRequests"`
}

type ContainerResourceSettings struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

type ContainerResourceSettingsResponse struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

type CosmosDbSettings struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

// CosmosDbSettingsInput is an input type that accepts CosmosDbSettingsArgs and CosmosDbSettingsOutput values.
// You can construct a concrete instance of `CosmosDbSettingsInput` via:
//
//	CosmosDbSettingsArgs{...}
type CosmosDbSettingsInput interface {
	pulumi.Input

	ToCosmosDbSettingsOutput() CosmosDbSettingsOutput
	ToCosmosDbSettingsOutputWithContext(context.Context) CosmosDbSettingsOutput
}

type CosmosDbSettingsArgs struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput pulumi.IntPtrInput `pulumi:"collectionsThroughput"`
}

func (CosmosDbSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return i.ToCosmosDbSettingsOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput)
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput).ToCosmosDbSettingsPtrOutputWithContext(ctx)
}

// CosmosDbSettingsPtrInput is an input type that accepts CosmosDbSettingsArgs, CosmosDbSettingsPtr and CosmosDbSettingsPtrOutput values.
// You can construct a concrete instance of `CosmosDbSettingsPtrInput` via:
//
//	        CosmosDbSettingsArgs{...}
//
//	or:
//
//	        nil
type CosmosDbSettingsPtrInput interface {
	pulumi.Input

	ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput
	ToCosmosDbSettingsPtrOutputWithContext(context.Context) CosmosDbSettingsPtrOutput
}

type cosmosDbSettingsPtrType CosmosDbSettingsArgs

func CosmosDbSettingsPtr(v *CosmosDbSettingsArgs) CosmosDbSettingsPtrInput {
	return (*cosmosDbSettingsPtrType)(v)
}

func (*cosmosDbSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsPtrOutput)
}

type CosmosDbSettingsOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosmosDbSettings) *CosmosDbSettings {
		return &v
	}).(CosmosDbSettingsPtrOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettings) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsPtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) Elem() CosmosDbSettingsOutput {
	return o.ApplyT(func(v *CosmosDbSettings) CosmosDbSettings {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettings
		return ret
	}).(CosmosDbSettingsOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsPtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettings) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponse struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

type CosmosDbSettingsResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutput() CosmosDbSettingsResponseOutput {
	return o
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutputWithContext(ctx context.Context) CosmosDbSettingsResponseOutput {
	return o
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsResponseOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettingsResponse) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutput() CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutputWithContext(ctx context.Context) CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) Elem() CosmosDbSettingsResponseOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) CosmosDbSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettingsResponse
		return ret
	}).(CosmosDbSettingsResponseOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsResponsePtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type Cron struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Cron
func (val *Cron) Defaults() *Cron {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronResponse struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronResponse
func (val *CronResponse) Defaults() *CronResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type CronTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTrigger
func (val *CronTrigger) Defaults() *CronTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type CronTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTriggerResponse
func (val *CronTriggerResponse) Defaults() *CronTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// Custom Keys credential object
type CustomKeysResponse struct {
	Keys map[string]string `pulumi:"keys"`
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'CustomKeys'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Custom Keys credential object
	Credentials *CustomKeysResponse `pulumi:"credentials"`
	ExpiryTime  *string             `pulumi:"expiryTime"`
	Metadata    interface{}         `pulumi:"metadata"`
	Target      *string             `pulumi:"target"`
}

type CustomModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInput
func (val *CustomModelJobInput) Defaults() *CustomModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputResponse
func (val *CustomModelJobInputResponse) Defaults() *CustomModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutput
func (val *CustomModelJobOutput) Defaults() *CustomModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputResponse
func (val *CustomModelJobOutputResponse) Defaults() *CustomModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// N-Cross validations are specified by user.
type CustomNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

type CustomSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

type CustomSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

// Specifies the custom service configuration
type CustomService struct {
	// Describes the docker settings for the image
	Docker *Docker `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []Endpoint `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariable `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *Image `pulumi:"image"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinition `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomService
func (val *CustomService) Defaults() *CustomService {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

// Specifies the custom service configuration
type CustomServiceResponse struct {
	// Describes the docker settings for the image
	Docker *DockerResponse `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *ImageResponse `pulumi:"image"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinitionResponse `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomServiceResponse
func (val *CustomServiceResponse) Defaults() *CustomServiceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

type CustomTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

type CustomTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

type CustomTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

type CustomTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

// Container for data asset versions.
type DataContainerType struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerType
func (val *DataContainerType) Defaults() *DataContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// DataContainerTypeInput is an input type that accepts DataContainerTypeArgs and DataContainerTypeOutput values.
// You can construct a concrete instance of `DataContainerTypeInput` via:
//
//	DataContainerTypeArgs{...}
type DataContainerTypeInput interface {
	pulumi.Input

	ToDataContainerTypeOutput() DataContainerTypeOutput
	ToDataContainerTypeOutputWithContext(context.Context) DataContainerTypeOutput
}

// Container for data asset versions.
type DataContainerTypeArgs struct {
	// [Required] Specifies the type of data.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerTypeArgs
func (val *DataContainerTypeArgs) Defaults() *DataContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DataContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return i.ToDataContainerTypeOutputWithContext(context.Background())
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataContainerTypeOutput)
}

// Container for data asset versions.
type DataContainerTypeOutput struct{ *pulumi.OutputState }

func (DataContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return o
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerTypeOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerType) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for data asset versions.
type DataContainerResponse struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerResponse
func (val *DataContainerResponse) Defaults() *DataContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for data asset versions.
type DataContainerResponseOutput struct{ *pulumi.OutputState }

func (DataContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerResponse)(nil)).Elem()
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutput() DataContainerResponseOutput {
	return o
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutputWithContext(ctx context.Context) DataContainerResponseOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o DataContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o DataContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o DataContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A DataFactory compute.
type DataFactory struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataFactory compute.
type DataFactoryResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataLakeAnalytics compute.
type DataLakeAnalytics struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                              `pulumi:"disableLocalAuth"`
	Properties       *DataLakeAnalyticsSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                                     `pulumi:"modifiedOn"`
	Properties *DataLakeAnalyticsSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

type DataLakeAnalyticsSchemaProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

type DataLakeAnalyticsSchemaResponseProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReference struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponse struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// A DataFactory compute.
type Databricks struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Databricks
	Properties *DatabricksProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Properties of Databricks
type DatabricksProperties struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// Properties of Databricks
type DatabricksPropertiesResponse struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// A DataFactory compute.
type DatabricksResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Databricks
	Properties *DatabricksPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

type DatasetCreateRequestDataPath struct {
	// The datastore name.
	DatastoreName *string `pulumi:"datastoreName"`
	// Path within the datastore.
	RelativePath *string `pulumi:"relativePath"`
}

// DatasetCreateRequestDataPathInput is an input type that accepts DatasetCreateRequestDataPathArgs and DatasetCreateRequestDataPathOutput values.
// You can construct a concrete instance of `DatasetCreateRequestDataPathInput` via:
//
//	DatasetCreateRequestDataPathArgs{...}
type DatasetCreateRequestDataPathInput interface {
	pulumi.Input

	ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput
	ToDatasetCreateRequestDataPathOutputWithContext(context.Context) DatasetCreateRequestDataPathOutput
}

type DatasetCreateRequestDataPathArgs struct {
	// The datastore name.
	DatastoreName pulumi.StringPtrInput `pulumi:"datastoreName"`
	// Path within the datastore.
	RelativePath pulumi.StringPtrInput `pulumi:"relativePath"`
}

func (DatasetCreateRequestDataPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestDataPath)(nil)).Elem()
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput {
	return i.ToDatasetCreateRequestDataPathOutputWithContext(context.Background())
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathOutput)
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return i.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathOutput).ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx)
}

// DatasetCreateRequestDataPathPtrInput is an input type that accepts DatasetCreateRequestDataPathArgs, DatasetCreateRequestDataPathPtr and DatasetCreateRequestDataPathPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestDataPathPtrInput` via:
//
//	        DatasetCreateRequestDataPathArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestDataPathPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput
	ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Context) DatasetCreateRequestDataPathPtrOutput
}

type datasetCreateRequestDataPathPtrType DatasetCreateRequestDataPathArgs

func DatasetCreateRequestDataPathPtr(v *DatasetCreateRequestDataPathArgs) DatasetCreateRequestDataPathPtrInput {
	return (*datasetCreateRequestDataPathPtrType)(v)
}

func (*datasetCreateRequestDataPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestDataPath)(nil)).Elem()
}

func (i *datasetCreateRequestDataPathPtrType) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return i.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestDataPathPtrType) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathPtrOutput)
}

type DatasetCreateRequestDataPathOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestDataPath)(nil)).Elem()
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput {
	return o
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathOutput {
	return o
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return o.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestDataPath) *DatasetCreateRequestDataPath {
		return &v
	}).(DatasetCreateRequestDataPathPtrOutput)
}

// The datastore name.
func (o DatasetCreateRequestDataPathOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestDataPath) *string { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// Path within the datastore.
func (o DatasetCreateRequestDataPathOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestDataPath) *string { return v.RelativePath }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestDataPath)(nil)).Elem()
}

func (o DatasetCreateRequestDataPathPtrOutput) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return o
}

func (o DatasetCreateRequestDataPathPtrOutput) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return o
}

func (o DatasetCreateRequestDataPathPtrOutput) Elem() DatasetCreateRequestDataPathOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) DatasetCreateRequestDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestDataPath
		return ret
	}).(DatasetCreateRequestDataPathOutput)
}

// The datastore name.
func (o DatasetCreateRequestDataPathPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// Path within the datastore.
func (o DatasetCreateRequestDataPathPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) *string {
		if v == nil {
			return nil
		}
		return v.RelativePath
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestParameters struct {
	// Header type.
	Header *string `pulumi:"header"`
	// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
	IncludePath *bool `pulumi:"includePath"`
	// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
	PartitionFormat *string                    `pulumi:"partitionFormat"`
	Path            *DatasetCreateRequestPath  `pulumi:"path"`
	Query           *DatasetCreateRequestQuery `pulumi:"query"`
	// The separator used to split columns for 'delimited_files' sourceType.
	Separator *string `pulumi:"separator"`
	// Data source type.
	SourceType *string `pulumi:"sourceType"`
}

// Defaults sets the appropriate defaults for DatasetCreateRequestParameters
func (val *DatasetCreateRequestParameters) Defaults() *DatasetCreateRequestParameters {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncludePath == nil {
		includePath_ := false
		tmp.IncludePath = &includePath_
	}
	return &tmp
}

// DatasetCreateRequestParametersInput is an input type that accepts DatasetCreateRequestParametersArgs and DatasetCreateRequestParametersOutput values.
// You can construct a concrete instance of `DatasetCreateRequestParametersInput` via:
//
//	DatasetCreateRequestParametersArgs{...}
type DatasetCreateRequestParametersInput interface {
	pulumi.Input

	ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput
	ToDatasetCreateRequestParametersOutputWithContext(context.Context) DatasetCreateRequestParametersOutput
}

type DatasetCreateRequestParametersArgs struct {
	// Header type.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
	IncludePath pulumi.BoolPtrInput `pulumi:"includePath"`
	// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
	PartitionFormat pulumi.StringPtrInput             `pulumi:"partitionFormat"`
	Path            DatasetCreateRequestPathPtrInput  `pulumi:"path"`
	Query           DatasetCreateRequestQueryPtrInput `pulumi:"query"`
	// The separator used to split columns for 'delimited_files' sourceType.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
	// Data source type.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
}

// Defaults sets the appropriate defaults for DatasetCreateRequestParametersArgs
func (val *DatasetCreateRequestParametersArgs) Defaults() *DatasetCreateRequestParametersArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncludePath == nil {
		tmp.IncludePath = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DatasetCreateRequestParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestParameters)(nil)).Elem()
}

func (i DatasetCreateRequestParametersArgs) ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput {
	return i.ToDatasetCreateRequestParametersOutputWithContext(context.Background())
}

func (i DatasetCreateRequestParametersArgs) ToDatasetCreateRequestParametersOutputWithContext(ctx context.Context) DatasetCreateRequestParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestParametersOutput)
}

type DatasetCreateRequestParametersOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestParameters)(nil)).Elem()
}

func (o DatasetCreateRequestParametersOutput) ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput {
	return o
}

func (o DatasetCreateRequestParametersOutput) ToDatasetCreateRequestParametersOutputWithContext(ctx context.Context) DatasetCreateRequestParametersOutput {
	return o
}

// Header type.
func (o DatasetCreateRequestParametersOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
func (o DatasetCreateRequestParametersOutput) IncludePath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *bool { return v.IncludePath }).(pulumi.BoolPtrOutput)
}

// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
func (o DatasetCreateRequestParametersOutput) PartitionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.PartitionFormat }).(pulumi.StringPtrOutput)
}

func (o DatasetCreateRequestParametersOutput) Path() DatasetCreateRequestPathPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *DatasetCreateRequestPath { return v.Path }).(DatasetCreateRequestPathPtrOutput)
}

func (o DatasetCreateRequestParametersOutput) Query() DatasetCreateRequestQueryPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *DatasetCreateRequestQuery { return v.Query }).(DatasetCreateRequestQueryPtrOutput)
}

// The separator used to split columns for 'delimited_files' sourceType.
func (o DatasetCreateRequestParametersOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

// Data source type.
func (o DatasetCreateRequestParametersOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestPath struct {
	DataPath *DatasetCreateRequestDataPath `pulumi:"dataPath"`
	// The Http URL.
	HttpUrl *string `pulumi:"httpUrl"`
}

// DatasetCreateRequestPathInput is an input type that accepts DatasetCreateRequestPathArgs and DatasetCreateRequestPathOutput values.
// You can construct a concrete instance of `DatasetCreateRequestPathInput` via:
//
//	DatasetCreateRequestPathArgs{...}
type DatasetCreateRequestPathInput interface {
	pulumi.Input

	ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput
	ToDatasetCreateRequestPathOutputWithContext(context.Context) DatasetCreateRequestPathOutput
}

type DatasetCreateRequestPathArgs struct {
	DataPath DatasetCreateRequestDataPathPtrInput `pulumi:"dataPath"`
	// The Http URL.
	HttpUrl pulumi.StringPtrInput `pulumi:"httpUrl"`
}

func (DatasetCreateRequestPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestPath)(nil)).Elem()
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput {
	return i.ToDatasetCreateRequestPathOutputWithContext(context.Background())
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathOutputWithContext(ctx context.Context) DatasetCreateRequestPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathOutput)
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return i.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathOutput).ToDatasetCreateRequestPathPtrOutputWithContext(ctx)
}

// DatasetCreateRequestPathPtrInput is an input type that accepts DatasetCreateRequestPathArgs, DatasetCreateRequestPathPtr and DatasetCreateRequestPathPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestPathPtrInput` via:
//
//	        DatasetCreateRequestPathArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestPathPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput
	ToDatasetCreateRequestPathPtrOutputWithContext(context.Context) DatasetCreateRequestPathPtrOutput
}

type datasetCreateRequestPathPtrType DatasetCreateRequestPathArgs

func DatasetCreateRequestPathPtr(v *DatasetCreateRequestPathArgs) DatasetCreateRequestPathPtrInput {
	return (*datasetCreateRequestPathPtrType)(v)
}

func (*datasetCreateRequestPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestPath)(nil)).Elem()
}

func (i *datasetCreateRequestPathPtrType) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return i.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestPathPtrType) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathPtrOutput)
}

type DatasetCreateRequestPathOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestPath)(nil)).Elem()
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput {
	return o
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathOutputWithContext(ctx context.Context) DatasetCreateRequestPathOutput {
	return o
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return o.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestPath) *DatasetCreateRequestPath {
		return &v
	}).(DatasetCreateRequestPathPtrOutput)
}

func (o DatasetCreateRequestPathOutput) DataPath() DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestPath) *DatasetCreateRequestDataPath { return v.DataPath }).(DatasetCreateRequestDataPathPtrOutput)
}

// The Http URL.
func (o DatasetCreateRequestPathOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestPath) *string { return v.HttpUrl }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestPath)(nil)).Elem()
}

func (o DatasetCreateRequestPathPtrOutput) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return o
}

func (o DatasetCreateRequestPathPtrOutput) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return o
}

func (o DatasetCreateRequestPathPtrOutput) Elem() DatasetCreateRequestPathOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) DatasetCreateRequestPath {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestPath
		return ret
	}).(DatasetCreateRequestPathOutput)
}

func (o DatasetCreateRequestPathPtrOutput) DataPath() DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) *DatasetCreateRequestDataPath {
		if v == nil {
			return nil
		}
		return v.DataPath
	}).(DatasetCreateRequestDataPathPtrOutput)
}

// The Http URL.
func (o DatasetCreateRequestPathPtrOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) *string {
		if v == nil {
			return nil
		}
		return v.HttpUrl
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestQuery struct {
	// The SQL/PostgreSQL/MySQL datastore name.
	DatastoreName *string `pulumi:"datastoreName"`
	// SQL Quey.
	Query *string `pulumi:"query"`
}

// DatasetCreateRequestQueryInput is an input type that accepts DatasetCreateRequestQueryArgs and DatasetCreateRequestQueryOutput values.
// You can construct a concrete instance of `DatasetCreateRequestQueryInput` via:
//
//	DatasetCreateRequestQueryArgs{...}
type DatasetCreateRequestQueryInput interface {
	pulumi.Input

	ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput
	ToDatasetCreateRequestQueryOutputWithContext(context.Context) DatasetCreateRequestQueryOutput
}

type DatasetCreateRequestQueryArgs struct {
	// The SQL/PostgreSQL/MySQL datastore name.
	DatastoreName pulumi.StringPtrInput `pulumi:"datastoreName"`
	// SQL Quey.
	Query pulumi.StringPtrInput `pulumi:"query"`
}

func (DatasetCreateRequestQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestQuery)(nil)).Elem()
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput {
	return i.ToDatasetCreateRequestQueryOutputWithContext(context.Background())
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryOutputWithContext(ctx context.Context) DatasetCreateRequestQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryOutput)
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return i.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryOutput).ToDatasetCreateRequestQueryPtrOutputWithContext(ctx)
}

// DatasetCreateRequestQueryPtrInput is an input type that accepts DatasetCreateRequestQueryArgs, DatasetCreateRequestQueryPtr and DatasetCreateRequestQueryPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestQueryPtrInput` via:
//
//	        DatasetCreateRequestQueryArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestQueryPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput
	ToDatasetCreateRequestQueryPtrOutputWithContext(context.Context) DatasetCreateRequestQueryPtrOutput
}

type datasetCreateRequestQueryPtrType DatasetCreateRequestQueryArgs

func DatasetCreateRequestQueryPtr(v *DatasetCreateRequestQueryArgs) DatasetCreateRequestQueryPtrInput {
	return (*datasetCreateRequestQueryPtrType)(v)
}

func (*datasetCreateRequestQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestQuery)(nil)).Elem()
}

func (i *datasetCreateRequestQueryPtrType) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return i.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestQueryPtrType) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryPtrOutput)
}

type DatasetCreateRequestQueryOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestQuery)(nil)).Elem()
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput {
	return o
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryOutputWithContext(ctx context.Context) DatasetCreateRequestQueryOutput {
	return o
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return o.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestQuery) *DatasetCreateRequestQuery {
		return &v
	}).(DatasetCreateRequestQueryPtrOutput)
}

// The SQL/PostgreSQL/MySQL datastore name.
func (o DatasetCreateRequestQueryOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestQuery) *string { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// SQL Quey.
func (o DatasetCreateRequestQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestQueryPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestQuery)(nil)).Elem()
}

func (o DatasetCreateRequestQueryPtrOutput) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return o
}

func (o DatasetCreateRequestQueryPtrOutput) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return o
}

func (o DatasetCreateRequestQueryPtrOutput) Elem() DatasetCreateRequestQueryOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) DatasetCreateRequestQuery {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestQuery
		return ret
	}).(DatasetCreateRequestQueryOutput)
}

// The SQL/PostgreSQL/MySQL datastore name.
func (o DatasetCreateRequestQueryPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// SQL Quey.
func (o DatasetCreateRequestQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestRegistration struct {
	// The description for the dataset.
	Description *string `pulumi:"description"`
	// The name of the dataset.
	Name *string `pulumi:"name"`
	// Tags associated with the dataset.
	Tags map[string]string `pulumi:"tags"`
}

// DatasetCreateRequestRegistrationInput is an input type that accepts DatasetCreateRequestRegistrationArgs and DatasetCreateRequestRegistrationOutput values.
// You can construct a concrete instance of `DatasetCreateRequestRegistrationInput` via:
//
//	DatasetCreateRequestRegistrationArgs{...}
type DatasetCreateRequestRegistrationInput interface {
	pulumi.Input

	ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput
	ToDatasetCreateRequestRegistrationOutputWithContext(context.Context) DatasetCreateRequestRegistrationOutput
}

type DatasetCreateRequestRegistrationArgs struct {
	// The description for the dataset.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the dataset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with the dataset.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (DatasetCreateRequestRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestRegistration)(nil)).Elem()
}

func (i DatasetCreateRequestRegistrationArgs) ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput {
	return i.ToDatasetCreateRequestRegistrationOutputWithContext(context.Background())
}

func (i DatasetCreateRequestRegistrationArgs) ToDatasetCreateRequestRegistrationOutputWithContext(ctx context.Context) DatasetCreateRequestRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestRegistrationOutput)
}

type DatasetCreateRequestRegistrationOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestRegistration)(nil)).Elem()
}

func (o DatasetCreateRequestRegistrationOutput) ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput {
	return o
}

func (o DatasetCreateRequestRegistrationOutput) ToDatasetCreateRequestRegistrationOutputWithContext(ctx context.Context) DatasetCreateRequestRegistrationOutput {
	return o
}

// The description for the dataset.
func (o DatasetCreateRequestRegistrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the dataset.
func (o DatasetCreateRequestRegistrationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with the dataset.
func (o DatasetCreateRequestRegistrationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DatasetCreateRequestTimeSeries struct {
	// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
	CoarseGrainTimestamp *string `pulumi:"coarseGrainTimestamp"`
	//  Column name to be used as FineGrainTimestamp
	FineGrainTimestamp *string `pulumi:"fineGrainTimestamp"`
}

// DatasetCreateRequestTimeSeriesInput is an input type that accepts DatasetCreateRequestTimeSeriesArgs and DatasetCreateRequestTimeSeriesOutput values.
// You can construct a concrete instance of `DatasetCreateRequestTimeSeriesInput` via:
//
//	DatasetCreateRequestTimeSeriesArgs{...}
type DatasetCreateRequestTimeSeriesInput interface {
	pulumi.Input

	ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput
	ToDatasetCreateRequestTimeSeriesOutputWithContext(context.Context) DatasetCreateRequestTimeSeriesOutput
}

type DatasetCreateRequestTimeSeriesArgs struct {
	// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
	CoarseGrainTimestamp pulumi.StringPtrInput `pulumi:"coarseGrainTimestamp"`
	//  Column name to be used as FineGrainTimestamp
	FineGrainTimestamp pulumi.StringPtrInput `pulumi:"fineGrainTimestamp"`
}

func (DatasetCreateRequestTimeSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput {
	return i.ToDatasetCreateRequestTimeSeriesOutputWithContext(context.Background())
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesOutput)
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return i.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesOutput).ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx)
}

// DatasetCreateRequestTimeSeriesPtrInput is an input type that accepts DatasetCreateRequestTimeSeriesArgs, DatasetCreateRequestTimeSeriesPtr and DatasetCreateRequestTimeSeriesPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestTimeSeriesPtrInput` via:
//
//	        DatasetCreateRequestTimeSeriesArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestTimeSeriesPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput
	ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Context) DatasetCreateRequestTimeSeriesPtrOutput
}

type datasetCreateRequestTimeSeriesPtrType DatasetCreateRequestTimeSeriesArgs

func DatasetCreateRequestTimeSeriesPtr(v *DatasetCreateRequestTimeSeriesArgs) DatasetCreateRequestTimeSeriesPtrInput {
	return (*datasetCreateRequestTimeSeriesPtrType)(v)
}

func (*datasetCreateRequestTimeSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (i *datasetCreateRequestTimeSeriesPtrType) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return i.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestTimeSeriesPtrType) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesPtrOutput)
}

type DatasetCreateRequestTimeSeriesOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestTimeSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return o.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestTimeSeries) *DatasetCreateRequestTimeSeries {
		return &v
	}).(DatasetCreateRequestTimeSeriesPtrOutput)
}

// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
func (o DatasetCreateRequestTimeSeriesOutput) CoarseGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestTimeSeries) *string { return v.CoarseGrainTimestamp }).(pulumi.StringPtrOutput)
}

// Column name to be used as FineGrainTimestamp
func (o DatasetCreateRequestTimeSeriesOutput) FineGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestTimeSeries) *string { return v.FineGrainTimestamp }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestTimeSeriesPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestTimeSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) Elem() DatasetCreateRequestTimeSeriesOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) DatasetCreateRequestTimeSeries {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestTimeSeries
		return ret
	}).(DatasetCreateRequestTimeSeriesOutput)
}

// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
func (o DatasetCreateRequestTimeSeriesPtrOutput) CoarseGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) *string {
		if v == nil {
			return nil
		}
		return v.CoarseGrainTimestamp
	}).(pulumi.StringPtrOutput)
}

// Column name to be used as FineGrainTimestamp
func (o DatasetCreateRequestTimeSeriesPtrOutput) FineGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) *string {
		if v == nil {
			return nil
		}
		return v.FineGrainTimestamp
	}).(pulumi.StringPtrOutput)
}

// Machine Learning dataset object.
type DatasetResponse struct {
	// The dataset creation time (UTC).
	CreatedTime string `pulumi:"createdTime"`
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Dataset state
	DatasetState *DatasetStateResponse `pulumi:"datasetState"`
	// Dataset Type.
	DatasetType string `pulumi:"datasetType"`
	// Name of the default compute to be used for any Dataset actions (such as Profile, Write).
	DefaultCompute string `pulumi:"defaultCompute"`
	// Description about this dataset version.
	Description string `pulumi:"description"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Flag to hide Dataset in UI
	IsVisible bool `pulumi:"isVisible"`
	// Last created Dataset definition.
	Latest *DatasetResponseLatest `pulumi:"latest"`
	// The dataset last modified time (UTC).
	ModifiedTime string `pulumi:"modifiedTime"`
	// Unique dataset name
	Name string `pulumi:"name"`
	// Tags for this dataset version.
	Tags map[string]string `pulumi:"tags"`
}

// Machine Learning dataset object.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

// The dataset creation time (UTC).
func (o DatasetResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetResponseOutput) DatasetState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetStateResponse { return v.DatasetState }).(DatasetStateResponsePtrOutput)
}

// Dataset Type.
func (o DatasetResponseOutput) DatasetType() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DatasetType }).(pulumi.StringOutput)
}

// Name of the default compute to be used for any Dataset actions (such as Profile, Write).
func (o DatasetResponseOutput) DefaultCompute() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DefaultCompute }).(pulumi.StringOutput)
}

// Description about this dataset version.
func (o DatasetResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Description }).(pulumi.StringOutput)
}

// eTag description
func (o DatasetResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Flag to hide Dataset in UI
func (o DatasetResponseOutput) IsVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponse) bool { return v.IsVisible }).(pulumi.BoolOutput)
}

// Last created Dataset definition.
func (o DatasetResponseOutput) Latest() DatasetResponseLatestPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponseLatest { return v.Latest }).(DatasetResponseLatestPtrOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Unique dataset name
func (o DatasetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Tags for this dataset version.
func (o DatasetResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
type DatasetResponseDataPath struct {
	// Additional Properties.
	AdditionalProperties map[string]interface{} `pulumi:"additionalProperties"`
	// Azure path for Azure Blob or File
	AzureFilePath string `pulumi:"azureFilePath"`
	// Data store Name
	DatastoreName string `pulumi:"datastoreName"`
	// HTTP URL.
	HttpUrl string `pulumi:"httpUrl"`
	// Specify the partition format of path. Defaults to None.
	PartitionFormat string `pulumi:"partitionFormat"`
	// Whether or not to ignore unmatched path.
	PartitionFormatIgnoreError bool `pulumi:"partitionFormatIgnoreError"`
	// List of files expanded from a file GLOB specified
	Paths []string `pulumi:"paths"`
	// Relative path in the data store
	RelativePath string `pulumi:"relativePath"`
	// Sql Query/Table/Stored Procedure details.
	SqlDataPath *DatasetResponseSqlDataPath `pulumi:"sqlDataPath"`
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
type DatasetResponseDataPathOutput struct{ *pulumi.OutputState }

func (DatasetResponseDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseDataPath)(nil)).Elem()
}

func (o DatasetResponseDataPathOutput) ToDatasetResponseDataPathOutput() DatasetResponseDataPathOutput {
	return o
}

func (o DatasetResponseDataPathOutput) ToDatasetResponseDataPathOutputWithContext(ctx context.Context) DatasetResponseDataPathOutput {
	return o
}

// Additional Properties.
func (o DatasetResponseDataPathOutput) AdditionalProperties() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) map[string]interface{} { return v.AdditionalProperties }).(pulumi.MapOutput)
}

// Azure path for Azure Blob or File
func (o DatasetResponseDataPathOutput) AzureFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.AzureFilePath }).(pulumi.StringOutput)
}

// Data store Name
func (o DatasetResponseDataPathOutput) DatastoreName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.DatastoreName }).(pulumi.StringOutput)
}

// HTTP URL.
func (o DatasetResponseDataPathOutput) HttpUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.HttpUrl }).(pulumi.StringOutput)
}

// Specify the partition format of path. Defaults to None.
func (o DatasetResponseDataPathOutput) PartitionFormat() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.PartitionFormat }).(pulumi.StringOutput)
}

// Whether or not to ignore unmatched path.
func (o DatasetResponseDataPathOutput) PartitionFormatIgnoreError() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) bool { return v.PartitionFormatIgnoreError }).(pulumi.BoolOutput)
}

// List of files expanded from a file GLOB specified
func (o DatasetResponseDataPathOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Relative path in the data store
func (o DatasetResponseDataPathOutput) RelativePath() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.RelativePath }).(pulumi.StringOutput)
}

// Sql Query/Table/Stored Procedure details.
func (o DatasetResponseDataPathOutput) SqlDataPath() DatasetResponseSqlDataPathPtrOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) *DatasetResponseSqlDataPath { return v.SqlDataPath }).(DatasetResponseSqlDataPathPtrOutput)
}

type DatasetResponseDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseDataPath)(nil)).Elem()
}

func (o DatasetResponseDataPathPtrOutput) ToDatasetResponseDataPathPtrOutput() DatasetResponseDataPathPtrOutput {
	return o
}

func (o DatasetResponseDataPathPtrOutput) ToDatasetResponseDataPathPtrOutputWithContext(ctx context.Context) DatasetResponseDataPathPtrOutput {
	return o
}

func (o DatasetResponseDataPathPtrOutput) Elem() DatasetResponseDataPathOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) DatasetResponseDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetResponseDataPath
		return ret
	}).(DatasetResponseDataPathOutput)
}

// Additional Properties.
func (o DatasetResponseDataPathPtrOutput) AdditionalProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalProperties
	}).(pulumi.MapOutput)
}

// Azure path for Azure Blob or File
func (o DatasetResponseDataPathPtrOutput) AzureFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.AzureFilePath
	}).(pulumi.StringPtrOutput)
}

// Data store Name
func (o DatasetResponseDataPathPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// HTTP URL.
func (o DatasetResponseDataPathPtrOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.HttpUrl
	}).(pulumi.StringPtrOutput)
}

// Specify the partition format of path. Defaults to None.
func (o DatasetResponseDataPathPtrOutput) PartitionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionFormat
	}).(pulumi.StringPtrOutput)
}

// Whether or not to ignore unmatched path.
func (o DatasetResponseDataPathPtrOutput) PartitionFormatIgnoreError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *bool {
		if v == nil {
			return nil
		}
		return &v.PartitionFormatIgnoreError
	}).(pulumi.BoolPtrOutput)
}

// List of files expanded from a file GLOB specified
func (o DatasetResponseDataPathPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Relative path in the data store
func (o DatasetResponseDataPathPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.RelativePath
	}).(pulumi.StringPtrOutput)
}

// Sql Query/Table/Stored Procedure details.
func (o DatasetResponseDataPathPtrOutput) SqlDataPath() DatasetResponseSqlDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *DatasetResponseSqlDataPath {
		if v == nil {
			return nil
		}
		return v.SqlDataPath
	}).(DatasetResponseSqlDataPathPtrOutput)
}

// Last created Dataset definition.
type DatasetResponseLatest struct {
	// User who created.
	CreatedBy *UserInfoResponse `pulumi:"createdBy"`
	// The dataset creation time (UTC).
	CreatedTime string `pulumi:"createdTime"`
	//  Datastore and reference to location of data such as relativePath, Sql Query and etc.
	DataPath *DatasetResponseDataPath `pulumi:"dataPath"`
	// Dataflow Json
	Dataflow string `pulumi:"dataflow"`
	// Dataset state
	DatasetDefinitionState *DatasetStateResponse `pulumi:"datasetDefinitionState"`
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Description about the dataset.
	Description string `pulumi:"description"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Dataset FileType, specified by user.
	FileType string `pulumi:"fileType"`
	// The dataset last modified time (UTC).
	ModifiedTime string `pulumi:"modifiedTime"`
	// Summary of Definition changes.
	Notes string `pulumi:"notes"`
	// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
	PartitionFormatInPath bool `pulumi:"partitionFormatInPath"`
	// Properties stores information like name of time series column for time series dataset.
	Properties map[string]interface{} `pulumi:"properties"`
	// Indicates the saved dataset this definition is mapping to, populated on Get.
	SavedDatasetId string `pulumi:"savedDatasetId"`
	// Tags associated with the dataset.
	Tags map[string]string `pulumi:"tags"`
	//  Telemetry information about the dataset including information like which service the dataset was created from.
	TelemetryInfo map[string]string `pulumi:"telemetryInfo"`
	//  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
	UseDescriptionTagsFromDefinition bool `pulumi:"useDescriptionTagsFromDefinition"`
	// An identifier uniquely identifies a definition change.
	VersionId string `pulumi:"versionId"`
}

// Last created Dataset definition.
type DatasetResponseLatestOutput struct{ *pulumi.OutputState }

func (DatasetResponseLatestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseLatest)(nil)).Elem()
}

func (o DatasetResponseLatestOutput) ToDatasetResponseLatestOutput() DatasetResponseLatestOutput {
	return o
}

func (o DatasetResponseLatestOutput) ToDatasetResponseLatestOutputWithContext(ctx context.Context) DatasetResponseLatestOutput {
	return o
}

// User who created.
func (o DatasetResponseLatestOutput) CreatedBy() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *UserInfoResponse { return v.CreatedBy }).(UserInfoResponsePtrOutput)
}

// The dataset creation time (UTC).
func (o DatasetResponseLatestOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
func (o DatasetResponseLatestOutput) DataPath() DatasetResponseDataPathPtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *DatasetResponseDataPath { return v.DataPath }).(DatasetResponseDataPathPtrOutput)
}

// Dataflow Json
func (o DatasetResponseLatestOutput) Dataflow() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Dataflow }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetResponseLatestOutput) DatasetDefinitionState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *DatasetStateResponse { return v.DatasetDefinitionState }).(DatasetStateResponsePtrOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseLatestOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Description about the dataset.
func (o DatasetResponseLatestOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Description }).(pulumi.StringOutput)
}

// eTag description
func (o DatasetResponseLatestOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Etag }).(pulumi.StringOutput)
}

// Dataset FileType, specified by user.
func (o DatasetResponseLatestOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.FileType }).(pulumi.StringOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseLatestOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Summary of Definition changes.
func (o DatasetResponseLatestOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Notes }).(pulumi.StringOutput)
}

// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
func (o DatasetResponseLatestOutput) PartitionFormatInPath() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseLatest) bool { return v.PartitionFormatInPath }).(pulumi.BoolOutput)
}

// Properties stores information like name of time series column for time series dataset.
func (o DatasetResponseLatestOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Indicates the saved dataset this definition is mapping to, populated on Get.
func (o DatasetResponseLatestOutput) SavedDatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.SavedDatasetId }).(pulumi.StringOutput)
}

// Tags associated with the dataset.
func (o DatasetResponseLatestOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Telemetry information about the dataset including information like which service the dataset was created from.
func (o DatasetResponseLatestOutput) TelemetryInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]string { return v.TelemetryInfo }).(pulumi.StringMapOutput)
}

// Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
func (o DatasetResponseLatestOutput) UseDescriptionTagsFromDefinition() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseLatest) bool { return v.UseDescriptionTagsFromDefinition }).(pulumi.BoolOutput)
}

// An identifier uniquely identifies a definition change.
func (o DatasetResponseLatestOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.VersionId }).(pulumi.StringOutput)
}

type DatasetResponseLatestPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseLatestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseLatest)(nil)).Elem()
}

func (o DatasetResponseLatestPtrOutput) ToDatasetResponseLatestPtrOutput() DatasetResponseLatestPtrOutput {
	return o
}

func (o DatasetResponseLatestPtrOutput) ToDatasetResponseLatestPtrOutputWithContext(ctx context.Context) DatasetResponseLatestPtrOutput {
	return o
}

func (o DatasetResponseLatestPtrOutput) Elem() DatasetResponseLatestOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) DatasetResponseLatest {
		if v != nil {
			return *v
		}
		var ret DatasetResponseLatest
		return ret
	}).(DatasetResponseLatestOutput)
}

// User who created.
func (o DatasetResponseLatestPtrOutput) CreatedBy() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *UserInfoResponse {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(UserInfoResponsePtrOutput)
}

// The dataset creation time (UTC).
func (o DatasetResponseLatestPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
func (o DatasetResponseLatestPtrOutput) DataPath() DatasetResponseDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *DatasetResponseDataPath {
		if v == nil {
			return nil
		}
		return v.DataPath
	}).(DatasetResponseDataPathPtrOutput)
}

// Dataflow Json
func (o DatasetResponseLatestPtrOutput) Dataflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Dataflow
	}).(pulumi.StringPtrOutput)
}

// Dataset state
func (o DatasetResponseLatestPtrOutput) DatasetDefinitionState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *DatasetStateResponse {
		if v == nil {
			return nil
		}
		return v.DatasetDefinitionState
	}).(DatasetStateResponsePtrOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseLatestPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Description about the dataset.
func (o DatasetResponseLatestPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// eTag description
func (o DatasetResponseLatestPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Dataset FileType, specified by user.
func (o DatasetResponseLatestPtrOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.FileType
	}).(pulumi.StringPtrOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseLatestPtrOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.ModifiedTime
	}).(pulumi.StringPtrOutput)
}

// Summary of Definition changes.
func (o DatasetResponseLatestPtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Notes
	}).(pulumi.StringPtrOutput)
}

// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
func (o DatasetResponseLatestPtrOutput) PartitionFormatInPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *bool {
		if v == nil {
			return nil
		}
		return &v.PartitionFormatInPath
	}).(pulumi.BoolPtrOutput)
}

// Properties stores information like name of time series column for time series dataset.
func (o DatasetResponseLatestPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Indicates the saved dataset this definition is mapping to, populated on Get.
func (o DatasetResponseLatestPtrOutput) SavedDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.SavedDatasetId
	}).(pulumi.StringPtrOutput)
}

// Tags associated with the dataset.
func (o DatasetResponseLatestPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Telemetry information about the dataset including information like which service the dataset was created from.
func (o DatasetResponseLatestPtrOutput) TelemetryInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]string {
		if v == nil {
			return nil
		}
		return v.TelemetryInfo
	}).(pulumi.StringMapOutput)
}

// Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
func (o DatasetResponseLatestPtrOutput) UseDescriptionTagsFromDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDescriptionTagsFromDefinition
	}).(pulumi.BoolPtrOutput)
}

// An identifier uniquely identifies a definition change.
func (o DatasetResponseLatestPtrOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.VersionId
	}).(pulumi.StringPtrOutput)
}

// Sql Query/Table/Stored Procedure details.
type DatasetResponseSqlDataPath struct {
	// SQL query timeout. Unit in seconds.
	QueryTimeout float64 `pulumi:"queryTimeout"`
	// SQL query
	SqlQuery string `pulumi:"sqlQuery"`
	// SQL storedProcedure name
	SqlStoredProcedureName string `pulumi:"sqlStoredProcedureName"`
	// SQL table name
	SqlTableName string `pulumi:"sqlTableName"`
}

// Sql Query/Table/Stored Procedure details.
type DatasetResponseSqlDataPathOutput struct{ *pulumi.OutputState }

func (DatasetResponseSqlDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseSqlDataPath)(nil)).Elem()
}

func (o DatasetResponseSqlDataPathOutput) ToDatasetResponseSqlDataPathOutput() DatasetResponseSqlDataPathOutput {
	return o
}

func (o DatasetResponseSqlDataPathOutput) ToDatasetResponseSqlDataPathOutputWithContext(ctx context.Context) DatasetResponseSqlDataPathOutput {
	return o
}

// SQL query timeout. Unit in seconds.
func (o DatasetResponseSqlDataPathOutput) QueryTimeout() pulumi.Float64Output {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) float64 { return v.QueryTimeout }).(pulumi.Float64Output)
}

// SQL query
func (o DatasetResponseSqlDataPathOutput) SqlQuery() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlQuery }).(pulumi.StringOutput)
}

// SQL storedProcedure name
func (o DatasetResponseSqlDataPathOutput) SqlStoredProcedureName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlStoredProcedureName }).(pulumi.StringOutput)
}

// SQL table name
func (o DatasetResponseSqlDataPathOutput) SqlTableName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlTableName }).(pulumi.StringOutput)
}

type DatasetResponseSqlDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseSqlDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseSqlDataPath)(nil)).Elem()
}

func (o DatasetResponseSqlDataPathPtrOutput) ToDatasetResponseSqlDataPathPtrOutput() DatasetResponseSqlDataPathPtrOutput {
	return o
}

func (o DatasetResponseSqlDataPathPtrOutput) ToDatasetResponseSqlDataPathPtrOutputWithContext(ctx context.Context) DatasetResponseSqlDataPathPtrOutput {
	return o
}

func (o DatasetResponseSqlDataPathPtrOutput) Elem() DatasetResponseSqlDataPathOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) DatasetResponseSqlDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetResponseSqlDataPath
		return ret
	}).(DatasetResponseSqlDataPathOutput)
}

// SQL query timeout. Unit in seconds.
func (o DatasetResponseSqlDataPathPtrOutput) QueryTimeout() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *float64 {
		if v == nil {
			return nil
		}
		return &v.QueryTimeout
	}).(pulumi.Float64PtrOutput)
}

// SQL query
func (o DatasetResponseSqlDataPathPtrOutput) SqlQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlQuery
	}).(pulumi.StringPtrOutput)
}

// SQL storedProcedure name
func (o DatasetResponseSqlDataPathPtrOutput) SqlStoredProcedureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlStoredProcedureName
	}).(pulumi.StringPtrOutput)
}

// SQL table name
func (o DatasetResponseSqlDataPathPtrOutput) SqlTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlTableName
	}).(pulumi.StringPtrOutput)
}

// Dataset state
type DatasetStateResponse struct {
	// Reference to better Dataset or a Definition
	DeprecatedBy *DatasetStateResponseDeprecatedBy `pulumi:"deprecatedBy"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Dataset state
	State *string `pulumi:"state"`
}

// Dataset state
type DatasetStateResponseOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetStateResponse)(nil)).Elem()
}

func (o DatasetStateResponseOutput) ToDatasetStateResponseOutput() DatasetStateResponseOutput {
	return o
}

func (o DatasetStateResponseOutput) ToDatasetStateResponseOutputWithContext(ctx context.Context) DatasetStateResponseOutput {
	return o
}

// Reference to better Dataset or a Definition
func (o DatasetStateResponseOutput) DeprecatedBy() DatasetStateResponseDeprecatedByPtrOutput {
	return o.ApplyT(func(v DatasetStateResponse) *DatasetStateResponseDeprecatedBy { return v.DeprecatedBy }).(DatasetStateResponseDeprecatedByPtrOutput)
}

// eTag description
func (o DatasetStateResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetStateResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetStateResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetStateResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DatasetStateResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetStateResponse)(nil)).Elem()
}

func (o DatasetStateResponsePtrOutput) ToDatasetStateResponsePtrOutput() DatasetStateResponsePtrOutput {
	return o
}

func (o DatasetStateResponsePtrOutput) ToDatasetStateResponsePtrOutputWithContext(ctx context.Context) DatasetStateResponsePtrOutput {
	return o
}

func (o DatasetStateResponsePtrOutput) Elem() DatasetStateResponseOutput {
	return o.ApplyT(func(v *DatasetStateResponse) DatasetStateResponse {
		if v != nil {
			return *v
		}
		var ret DatasetStateResponse
		return ret
	}).(DatasetStateResponseOutput)
}

// Reference to better Dataset or a Definition
func (o DatasetStateResponsePtrOutput) DeprecatedBy() DatasetStateResponseDeprecatedByPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *DatasetStateResponseDeprecatedBy {
		if v == nil {
			return nil
		}
		return v.DeprecatedBy
	}).(DatasetStateResponseDeprecatedByPtrOutput)
}

// eTag description
func (o DatasetStateResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Dataset state
func (o DatasetStateResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Reference to better Dataset or a Definition
type DatasetStateResponseDeprecatedBy struct {
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Definition Version
	DefinitionVersion *string `pulumi:"definitionVersion"`
}

// Reference to better Dataset or a Definition
type DatasetStateResponseDeprecatedByOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseDeprecatedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetStateResponseDeprecatedBy)(nil)).Elem()
}

func (o DatasetStateResponseDeprecatedByOutput) ToDatasetStateResponseDeprecatedByOutput() DatasetStateResponseDeprecatedByOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByOutput) ToDatasetStateResponseDeprecatedByOutputWithContext(ctx context.Context) DatasetStateResponseDeprecatedByOutput {
	return o
}

// Unique Dataset identifier.
func (o DatasetStateResponseDeprecatedByOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetStateResponseDeprecatedBy) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Definition Version
func (o DatasetStateResponseDeprecatedByOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetStateResponseDeprecatedBy) *string { return v.DefinitionVersion }).(pulumi.StringPtrOutput)
}

type DatasetStateResponseDeprecatedByPtrOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseDeprecatedByPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetStateResponseDeprecatedBy)(nil)).Elem()
}

func (o DatasetStateResponseDeprecatedByPtrOutput) ToDatasetStateResponseDeprecatedByPtrOutput() DatasetStateResponseDeprecatedByPtrOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByPtrOutput) ToDatasetStateResponseDeprecatedByPtrOutputWithContext(ctx context.Context) DatasetStateResponseDeprecatedByPtrOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByPtrOutput) Elem() DatasetStateResponseDeprecatedByOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) DatasetStateResponseDeprecatedBy {
		if v != nil {
			return *v
		}
		var ret DatasetStateResponseDeprecatedBy
		return ret
	}).(DatasetStateResponseDeprecatedByOutput)
}

// Unique Dataset identifier.
func (o DatasetStateResponseDeprecatedByPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Definition Version
func (o DatasetStateResponseDeprecatedByPtrOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) *string {
		if v == nil {
			return nil
		}
		return v.DefinitionVersion
	}).(pulumi.StringPtrOutput)
}

// Machine Learning datastore object.
type DatastoreResponse struct {
	AzureDataLakeSection    *AzureDataLakeSectionResponse    `pulumi:"azureDataLakeSection"`
	AzureMySqlSection       *AzureMySqlSectionResponse       `pulumi:"azureMySqlSection"`
	AzurePostgreSqlSection  *AzurePostgreSqlSectionResponse  `pulumi:"azurePostgreSqlSection"`
	AzureSqlDatabaseSection *AzureSqlDatabaseSectionResponse `pulumi:"azureSqlDatabaseSection"`
	AzureStorageSection     *AzureStorageSectionResponse     `pulumi:"azureStorageSection"`
	// The User who created the datastore.
	CreatedBy UserInfoResponse `pulumi:"createdBy"`
	// The date and time when the datastore was created.
	CreatedTime string `pulumi:"createdTime"`
	// The datastore type.
	DataStoreType *string `pulumi:"dataStoreType"`
	// Description of the datastore.
	Description *string `pulumi:"description"`
	// Data specific to GlusterFS.
	GlusterFsSection *GlusterFsSectionResponse `pulumi:"glusterFsSection"`
	// A read only property that denotes whether the service datastore has been validated with credentials.
	HasBeenValidated *bool `pulumi:"hasBeenValidated"`
	// Info about origin if it is linked.
	LinkedInfo *LinkedInfoResponse `pulumi:"linkedInfo"`
	// The User who modified the datastore.
	ModifiedBy UserInfoResponse `pulumi:"modifiedBy"`
	// The date and time when the datastore was last modified.
	ModifiedTime string `pulumi:"modifiedTime"`
	// Name of the datastore.
	Name *string `pulumi:"name"`
	// Tags for this datastore.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DatastoreResponse
func (val *DatastoreResponse) Defaults() *DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HasBeenValidated == nil {
		hasBeenValidated_ := false
		tmp.HasBeenValidated = &hasBeenValidated_
	}
	return &tmp
}

// Machine Learning datastore object.
type DatastoreResponseOutput struct{ *pulumi.OutputState }

func (DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreResponse)(nil)).Elem()
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutput() DatastoreResponseOutput {
	return o
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutputWithContext(ctx context.Context) DatastoreResponseOutput {
	return o
}

func (o DatastoreResponseOutput) AzureDataLakeSection() AzureDataLakeSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureDataLakeSectionResponse { return v.AzureDataLakeSection }).(AzureDataLakeSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureMySqlSection() AzureMySqlSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureMySqlSectionResponse { return v.AzureMySqlSection }).(AzureMySqlSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzurePostgreSqlSection() AzurePostgreSqlSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzurePostgreSqlSectionResponse { return v.AzurePostgreSqlSection }).(AzurePostgreSqlSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureSqlDatabaseSection() AzureSqlDatabaseSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureSqlDatabaseSectionResponse { return v.AzureSqlDatabaseSection }).(AzureSqlDatabaseSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureStorageSection() AzureStorageSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureStorageSectionResponse { return v.AzureStorageSection }).(AzureStorageSectionResponsePtrOutput)
}

// The User who created the datastore.
func (o DatastoreResponseOutput) CreatedBy() UserInfoResponseOutput {
	return o.ApplyT(func(v DatastoreResponse) UserInfoResponse { return v.CreatedBy }).(UserInfoResponseOutput)
}

// The date and time when the datastore was created.
func (o DatastoreResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The datastore type.
func (o DatastoreResponseOutput) DataStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.DataStoreType }).(pulumi.StringPtrOutput)
}

// Description of the datastore.
func (o DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Data specific to GlusterFS.
func (o DatastoreResponseOutput) GlusterFsSection() GlusterFsSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *GlusterFsSectionResponse { return v.GlusterFsSection }).(GlusterFsSectionResponsePtrOutput)
}

// A read only property that denotes whether the service datastore has been validated with credentials.
func (o DatastoreResponseOutput) HasBeenValidated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *bool { return v.HasBeenValidated }).(pulumi.BoolPtrOutput)
}

// Info about origin if it is linked.
func (o DatastoreResponseOutput) LinkedInfo() LinkedInfoResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *LinkedInfoResponse { return v.LinkedInfo }).(LinkedInfoResponsePtrOutput)
}

// The User who modified the datastore.
func (o DatastoreResponseOutput) ModifiedBy() UserInfoResponseOutput {
	return o.ApplyT(func(v DatastoreResponse) UserInfoResponse { return v.ModifiedBy }).(UserInfoResponseOutput)
}

// The date and time when the datastore was last modified.
func (o DatastoreResponseOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Name of the datastore.
func (o DatastoreResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags for this datastore.
func (o DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DefaultScaleSettings struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

type DefaultScaleSettingsResponse struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

type DeploymentResourceConfiguration struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfiguration
func (val *DeploymentResourceConfiguration) Defaults() *DeploymentResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

// DeploymentResourceConfigurationInput is an input type that accepts DeploymentResourceConfigurationArgs and DeploymentResourceConfigurationOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationInput` via:
//
//	DeploymentResourceConfigurationArgs{...}
type DeploymentResourceConfigurationInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput
	ToDeploymentResourceConfigurationOutputWithContext(context.Context) DeploymentResourceConfigurationOutput
}

type DeploymentResourceConfigurationArgs struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationArgs
func (val *DeploymentResourceConfigurationArgs) Defaults() *DeploymentResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	return &tmp
}
func (DeploymentResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return i.ToDeploymentResourceConfigurationOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput)
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput).ToDeploymentResourceConfigurationPtrOutputWithContext(ctx)
}

// DeploymentResourceConfigurationPtrInput is an input type that accepts DeploymentResourceConfigurationArgs, DeploymentResourceConfigurationPtr and DeploymentResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationPtrInput` via:
//
//	        DeploymentResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeploymentResourceConfigurationPtrInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput
	ToDeploymentResourceConfigurationPtrOutputWithContext(context.Context) DeploymentResourceConfigurationPtrOutput
}

type deploymentResourceConfigurationPtrType DeploymentResourceConfigurationArgs

func DeploymentResourceConfigurationPtr(v *DeploymentResourceConfigurationArgs) DeploymentResourceConfigurationPtrInput {
	return (*deploymentResourceConfigurationPtrType)(v)
}

func (*deploymentResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationPtrOutput)
}

type DeploymentResourceConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentResourceConfiguration) *DeploymentResourceConfiguration {
		return &v
	}).(DeploymentResourceConfigurationPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) Elem() DeploymentResourceConfigurationOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) DeploymentResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfiguration
		return ret
	}).(DeploymentResourceConfigurationOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponse struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationResponse
func (val *DeploymentResourceConfigurationResponse) Defaults() *DeploymentResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

type DeploymentResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutput() DeploymentResourceConfigurationResponseOutput {
	return o
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponseOutput {
	return o
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutput() DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) Elem() DeploymentResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) DeploymentResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfigurationResponse
		return ret
	}).(DeploymentResourceConfigurationResponseOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Docker container configuration
type Docker struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

// Class to represent configuration settings for Docker Build
type DockerBuild struct {
	// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
	// The path is relative to the asset path which must contain a single Blob URI value.
	// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
	Context *string `pulumi:"context"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Build'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// [Required] Docker command line instructions to assemble an image.
	// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
	Dockerfile string `pulumi:"dockerfile"`
	// The platform information of the docker image.
	Platform *DockerImagePlatform `pulumi:"platform"`
}

// Class to represent configuration settings for Docker Build
type DockerBuildResponse struct {
	// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
	// The path is relative to the asset path which must contain a single Blob URI value.
	// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
	Context *string `pulumi:"context"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Build'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// [Required] Docker command line instructions to assemble an image.
	// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
	Dockerfile string `pulumi:"dockerfile"`
	// The platform information of the docker image.
	Platform *DockerImagePlatformResponse `pulumi:"platform"`
}

// Class to represent configuration settings for Docker Build
type DockerImage struct {
	// [Required] Image name of a custom base image.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	DockerImageUri string `pulumi:"dockerImageUri"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Image'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// The platform information of the docker image.
	Platform *DockerImagePlatform `pulumi:"platform"`
}

type DockerImagePlatform struct {
	// The OS type the Environment.
	OperatingSystemType *string `pulumi:"operatingSystemType"`
}

type DockerImagePlatformResponse struct {
	// The OS type the Environment.
	OperatingSystemType *string `pulumi:"operatingSystemType"`
}

// Class to represent configuration settings for Docker Build
type DockerImageResponse struct {
	// [Required] Image name of a custom base image.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	DockerImageUri string `pulumi:"dockerImageUri"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Image'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// The platform information of the docker image.
	Platform *DockerImagePlatformResponse `pulumi:"platform"`
}

// Docker container configuration
type DockerResponse struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

type EncryptionKeyVaultProperties struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId *string `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

// EncryptionKeyVaultPropertiesInput is an input type that accepts EncryptionKeyVaultPropertiesArgs and EncryptionKeyVaultPropertiesOutput values.
// You can construct a concrete instance of `EncryptionKeyVaultPropertiesInput` via:
//
//	EncryptionKeyVaultPropertiesArgs{...}
type EncryptionKeyVaultPropertiesInput interface {
	pulumi.Input

	ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput
	ToEncryptionKeyVaultPropertiesOutputWithContext(context.Context) EncryptionKeyVaultPropertiesOutput
}

type EncryptionKeyVaultPropertiesArgs struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId pulumi.StringPtrInput `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId pulumi.StringInput `pulumi:"keyVaultArmId"`
}

func (EncryptionKeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultProperties)(nil)).Elem()
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput {
	return i.ToEncryptionKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesOutput)
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return i.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesOutput).ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// EncryptionKeyVaultPropertiesPtrInput is an input type that accepts EncryptionKeyVaultPropertiesArgs, EncryptionKeyVaultPropertiesPtr and EncryptionKeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `EncryptionKeyVaultPropertiesPtrInput` via:
//
//	        EncryptionKeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type EncryptionKeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput
	ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Context) EncryptionKeyVaultPropertiesPtrOutput
}

type encryptionKeyVaultPropertiesPtrType EncryptionKeyVaultPropertiesArgs

func EncryptionKeyVaultPropertiesPtr(v *EncryptionKeyVaultPropertiesArgs) EncryptionKeyVaultPropertiesPtrInput {
	return (*encryptionKeyVaultPropertiesPtrType)(v)
}

func (*encryptionKeyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultProperties)(nil)).Elem()
}

func (i *encryptionKeyVaultPropertiesPtrType) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return i.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *encryptionKeyVaultPropertiesPtrType) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesPtrOutput)
}

type EncryptionKeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultProperties)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return o.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionKeyVaultProperties) *EncryptionKeyVaultProperties {
		return &v
	}).(EncryptionKeyVaultPropertiesPtrOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type EncryptionKeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultProperties)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesPtrOutput) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesPtrOutput) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesPtrOutput) Elem() EncryptionKeyVaultPropertiesOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) EncryptionKeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyVaultProperties
		return ret
	}).(EncryptionKeyVaultPropertiesOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesPtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesPtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

type EncryptionKeyVaultPropertiesResponse struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId *string `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

type EncryptionKeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesResponseOutput) ToEncryptionKeyVaultPropertiesResponseOutput() EncryptionKeyVaultPropertiesResponseOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponseOutput) ToEncryptionKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesResponseOutput {
	return o
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesResponseOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesResponseOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type EncryptionKeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) ToEncryptionKeyVaultPropertiesResponsePtrOutput() EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) ToEncryptionKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) Elem() EncryptionKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) EncryptionKeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyVaultPropertiesResponse
		return ret
	}).(EncryptionKeyVaultPropertiesResponseOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

type EncryptionProperty struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity *IdentityForCmk `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultProperties `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
}

// EncryptionPropertyInput is an input type that accepts EncryptionPropertyArgs and EncryptionPropertyOutput values.
// You can construct a concrete instance of `EncryptionPropertyInput` via:
//
//	EncryptionPropertyArgs{...}
type EncryptionPropertyInput interface {
	pulumi.Input

	ToEncryptionPropertyOutput() EncryptionPropertyOutput
	ToEncryptionPropertyOutputWithContext(context.Context) EncryptionPropertyOutput
}

type EncryptionPropertyArgs struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity IdentityForCmkPtrInput `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultPropertiesInput `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EncryptionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return i.ToEncryptionPropertyOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput)
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput).ToEncryptionPropertyPtrOutputWithContext(ctx)
}

// EncryptionPropertyPtrInput is an input type that accepts EncryptionPropertyArgs, EncryptionPropertyPtr and EncryptionPropertyPtrOutput values.
// You can construct a concrete instance of `EncryptionPropertyPtrInput` via:
//
//	        EncryptionPropertyArgs{...}
//
//	or:
//
//	        nil
type EncryptionPropertyPtrInput interface {
	pulumi.Input

	ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput
	ToEncryptionPropertyPtrOutputWithContext(context.Context) EncryptionPropertyPtrOutput
}

type encryptionPropertyPtrType EncryptionPropertyArgs

func EncryptionPropertyPtr(v *EncryptionPropertyArgs) EncryptionPropertyPtrInput {
	return (*encryptionPropertyPtrType)(v)
}

func (*encryptionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyPtrOutput)
}

type EncryptionPropertyOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionProperty) *EncryptionProperty {
		return &v
	}).(EncryptionPropertyPtrOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *IdentityForCmk { return v.Identity }).(IdentityForCmkPtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesOutput {
	return o.ApplyT(func(v EncryptionProperty) EncryptionKeyVaultProperties { return v.KeyVaultProperties }).(EncryptionKeyVaultPropertiesOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperty) string { return v.Status }).(pulumi.StringOutput)
}

type EncryptionPropertyPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) Elem() EncryptionPropertyOutput {
	return o.ApplyT(func(v *EncryptionProperty) EncryptionProperty {
		if v != nil {
			return *v
		}
		var ret EncryptionProperty
		return ret
	}).(EncryptionPropertyOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyPtrOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *IdentityForCmk {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkPtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyPtrOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *EncryptionKeyVaultProperties {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(EncryptionKeyVaultPropertiesPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type EncryptionPropertyResponse struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity *IdentityForCmkResponse `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
}

type EncryptionPropertyResponseOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutput() EncryptionPropertyResponseOutput {
	return o
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutputWithContext(ctx context.Context) EncryptionPropertyResponseOutput {
	return o
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyResponseOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *IdentityForCmkResponse { return v.Identity }).(IdentityForCmkResponsePtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyResponseOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) EncryptionKeyVaultPropertiesResponse { return v.KeyVaultProperties }).(EncryptionKeyVaultPropertiesResponseOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) string { return v.Status }).(pulumi.StringOutput)
}

type EncryptionPropertyResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutput() EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) Elem() EncryptionPropertyResponseOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) EncryptionPropertyResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionPropertyResponse
		return ret
	}).(EncryptionPropertyResponseOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyResponsePtrOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *IdentityForCmkResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkResponsePtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyResponsePtrOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *EncryptionKeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(EncryptionKeyVaultPropertiesResponsePtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Describes the endpoint configuration for the container
type Endpoint struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for Endpoint
func (val *Endpoint) Defaults() *Endpoint {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// Keys for endpoint authentication.
type EndpointAuthKeys struct {
	// The primary key.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// EndpointAuthKeysInput is an input type that accepts EndpointAuthKeysArgs and EndpointAuthKeysOutput values.
// You can construct a concrete instance of `EndpointAuthKeysInput` via:
//
//	EndpointAuthKeysArgs{...}
type EndpointAuthKeysInput interface {
	pulumi.Input

	ToEndpointAuthKeysOutput() EndpointAuthKeysOutput
	ToEndpointAuthKeysOutputWithContext(context.Context) EndpointAuthKeysOutput
}

// Keys for endpoint authentication.
type EndpointAuthKeysArgs struct {
	// The primary key.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (EndpointAuthKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return i.ToEndpointAuthKeysOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput)
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput).ToEndpointAuthKeysPtrOutputWithContext(ctx)
}

// EndpointAuthKeysPtrInput is an input type that accepts EndpointAuthKeysArgs, EndpointAuthKeysPtr and EndpointAuthKeysPtrOutput values.
// You can construct a concrete instance of `EndpointAuthKeysPtrInput` via:
//
//	        EndpointAuthKeysArgs{...}
//
//	or:
//
//	        nil
type EndpointAuthKeysPtrInput interface {
	pulumi.Input

	ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput
	ToEndpointAuthKeysPtrOutputWithContext(context.Context) EndpointAuthKeysPtrOutput
}

type endpointAuthKeysPtrType EndpointAuthKeysArgs

func EndpointAuthKeysPtr(v *EndpointAuthKeysArgs) EndpointAuthKeysPtrInput {
	return (*endpointAuthKeysPtrType)(v)
}

func (*endpointAuthKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysPtrOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeysOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointAuthKeys) *EndpointAuthKeys {
		return &v
	}).(EndpointAuthKeysPtrOutput)
}

// The primary key.
func (o EndpointAuthKeysOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type EndpointAuthKeysPtrOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) Elem() EndpointAuthKeysOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) EndpointAuthKeys {
		if v != nil {
			return *v
		}
		var ret EndpointAuthKeys
		return ret
	}).(EndpointAuthKeysOutput)
}

// The primary key.
func (o EndpointAuthKeysPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysPtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// Describes the endpoint configuration for the container
type EndpointResponse struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for EndpointResponse
func (val *EndpointResponse) Defaults() *EndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

type EndpointScheduleAction struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

type EndpointScheduleActionResponse struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

// Container for environment specification versions.
type EnvironmentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerType
func (val *EnvironmentContainerType) Defaults() *EnvironmentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// EnvironmentContainerTypeInput is an input type that accepts EnvironmentContainerTypeArgs and EnvironmentContainerTypeOutput values.
// You can construct a concrete instance of `EnvironmentContainerTypeInput` via:
//
//	EnvironmentContainerTypeArgs{...}
type EnvironmentContainerTypeInput interface {
	pulumi.Input

	ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput
	ToEnvironmentContainerTypeOutputWithContext(context.Context) EnvironmentContainerTypeOutput
}

// Container for environment specification versions.
type EnvironmentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerTypeArgs
func (val *EnvironmentContainerTypeArgs) Defaults() *EnvironmentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EnvironmentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return i.ToEnvironmentContainerTypeOutputWithContext(context.Background())
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentContainerTypeOutput)
}

// Container for environment specification versions.
type EnvironmentContainerTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return o
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for environment specification versions.
type EnvironmentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerResponse
func (val *EnvironmentContainerResponse) Defaults() *EnvironmentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for environment specification versions.
type EnvironmentContainerResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerResponse)(nil)).Elem()
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutput() EnvironmentContainerResponseOutput {
	return o
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutputWithContext(ctx context.Context) EnvironmentContainerResponseOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o EnvironmentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o EnvironmentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment container.
func (o EnvironmentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionType struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Configuration settings for Docker.
	Docker interface{} `pulumi:"docker"`
	// Defines configuration specific to inference.
	InferenceContainerProperties *InferenceContainerProperties `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// EnvironmentSpecificationVersionTypeInput is an input type that accepts EnvironmentSpecificationVersionTypeArgs and EnvironmentSpecificationVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentSpecificationVersionTypeInput` via:
//
//	EnvironmentSpecificationVersionTypeArgs{...}
type EnvironmentSpecificationVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput
	ToEnvironmentSpecificationVersionTypeOutputWithContext(context.Context) EnvironmentSpecificationVersionTypeOutput
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionTypeArgs struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Configuration settings for Docker.
	Docker pulumi.Input `pulumi:"docker"`
	// Defines configuration specific to inference.
	InferenceContainerProperties InferenceContainerPropertiesPtrInput `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (EnvironmentSpecificationVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionType)(nil)).Elem()
}

func (i EnvironmentSpecificationVersionTypeArgs) ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput {
	return i.ToEnvironmentSpecificationVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentSpecificationVersionTypeArgs) ToEnvironmentSpecificationVersionTypeOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSpecificationVersionTypeOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentSpecificationVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionType)(nil)).Elem()
}

func (o EnvironmentSpecificationVersionTypeOutput) ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput {
	return o
}

func (o EnvironmentSpecificationVersionTypeOutput) ToEnvironmentSpecificationVersionTypeOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionTypeOutput {
	return o
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentSpecificationVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentSpecificationVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker.
func (o EnvironmentSpecificationVersionTypeOutput) Docker() pulumi.AnyOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) interface{} { return v.Docker }).(pulumi.AnyOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentSpecificationVersionTypeOutput) InferenceContainerProperties() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *InferenceContainerProperties {
		return v.InferenceContainerProperties
	}).(InferenceContainerPropertiesPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentSpecificationVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentSpecificationVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentSpecificationVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionResponse struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Configuration settings for Docker.
	Docker interface{} `pulumi:"docker"`
	// Environment specification is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentSpecificationType string `pulumi:"environmentSpecificationType"`
	// Defines configuration specific to inference.
	InferenceContainerProperties *InferenceContainerPropertiesResponse `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentSpecificationVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionResponse)(nil)).Elem()
}

func (o EnvironmentSpecificationVersionResponseOutput) ToEnvironmentSpecificationVersionResponseOutput() EnvironmentSpecificationVersionResponseOutput {
	return o
}

func (o EnvironmentSpecificationVersionResponseOutput) ToEnvironmentSpecificationVersionResponseOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionResponseOutput {
	return o
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentSpecificationVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentSpecificationVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker.
func (o EnvironmentSpecificationVersionResponseOutput) Docker() pulumi.AnyOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) interface{} { return v.Docker }).(pulumi.AnyOutput)
}

// Environment specification is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentSpecificationVersionResponseOutput) EnvironmentSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) string { return v.EnvironmentSpecificationType }).(pulumi.StringOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentSpecificationVersionResponseOutput) InferenceContainerProperties() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *InferenceContainerPropertiesResponse {
		return v.InferenceContainerProperties
	}).(InferenceContainerPropertiesResponsePtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentSpecificationVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentSpecificationVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentSpecificationVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment Variables for the container
type EnvironmentVariable struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariable
func (val *EnvironmentVariable) Defaults() *EnvironmentVariable {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

// Environment Variables for the container
type EnvironmentVariableResponse struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariableResponse
func (val *EnvironmentVariableResponse) Defaults() *EnvironmentVariableResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

// Environment version details.
type EnvironmentVersionType struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContext `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerProperties `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionType
func (val *EnvironmentVersionType) Defaults() *EnvironmentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// EnvironmentVersionTypeInput is an input type that accepts EnvironmentVersionTypeArgs and EnvironmentVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentVersionTypeInput` via:
//
//	EnvironmentVersionTypeArgs{...}
type EnvironmentVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput
	ToEnvironmentVersionTypeOutputWithContext(context.Context) EnvironmentVersionTypeOutput
}

// Environment version details.
type EnvironmentVersionTypeArgs struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild pulumi.StringPtrInput `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build BuildContextPtrInput `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig InferenceContainerPropertiesPtrInput `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionTypeArgs
func (val *EnvironmentVersionTypeArgs) Defaults() *EnvironmentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		tmp.AutoRebuild = pulumi.StringPtr("Disabled")
	}

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (EnvironmentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return i.ToEnvironmentVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTypeOutput)
}

// Environment version details.
type EnvironmentVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return o
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return o
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionTypeOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionTypeOutput) Build() BuildContextPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *BuildContext { return v.Build }).(BuildContextPtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionTypeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionTypeOutput) InferenceConfig() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *InferenceContainerProperties { return v.InferenceConfig }).(InferenceContainerPropertiesPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionTypeOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment version details.
type EnvironmentVersionResponse struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContextResponse `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Environment type is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentType string `pulumi:"environmentType"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerPropertiesResponse `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionResponse
func (val *EnvironmentVersionResponse) Defaults() *EnvironmentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// Environment version details.
type EnvironmentVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionResponse)(nil)).Elem()
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutput() EnvironmentVersionResponseOutput {
	return o
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutputWithContext(ctx context.Context) EnvironmentVersionResponseOutput {
	return o
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionResponseOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionResponseOutput) Build() BuildContextResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *BuildContextResponse { return v.Build }).(BuildContextResponsePtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment type is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentVersionResponseOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.EnvironmentType }).(pulumi.StringOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionResponseOutput) InferenceConfig() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *InferenceContainerPropertiesResponse { return v.InferenceConfig }).(InferenceContainerPropertiesResponsePtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment version.
func (o EnvironmentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponse struct {
	// The error object.
	Error *ErrorDetailResponse `pulumi:"error"`
}

// Dto object representing feature
type FeatureResponse struct {
	// Specifies type
	DataType *string `pulumi:"dataType"`
	// Specifies description
	Description *string `pulumi:"description"`
	// Specifies name
	FeatureName *string `pulumi:"featureName"`
	// Specifies tags
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeatureResponse
func (val *FeatureResponse) Defaults() *FeatureResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing feature
type FeatureResponseOutput struct{ *pulumi.OutputState }

func (FeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseOutput) ToFeatureResponseOutput() FeatureResponseOutput {
	return o
}

func (o FeatureResponseOutput) ToFeatureResponseOutputWithContext(ctx context.Context) FeatureResponseOutput {
	return o
}

// Specifies type
func (o FeatureResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Specifies description
func (o FeatureResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies name
func (o FeatureResponseOutput) FeatureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.FeatureName }).(pulumi.StringPtrOutput)
}

// Specifies tags
func (o FeatureResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (FeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutput() FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutputWithContext(ctx context.Context) FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) Index(i pulumi.IntInput) FeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureResponse {
		return vs[0].([]FeatureResponse)[vs[1].(int)]
	}).(FeatureResponseOutput)
}

// Specifies the feature window
type FeatureWindowResponse struct {
	// Specifies the feature window end time
	FeatureWindowEnd *string `pulumi:"featureWindowEnd"`
	// Specifies the feature window start time
	FeatureWindowStart *string `pulumi:"featureWindowStart"`
}

// Specifies the feature window
type FeatureWindowResponseOutput struct{ *pulumi.OutputState }

func (FeatureWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureWindowResponse)(nil)).Elem()
}

func (o FeatureWindowResponseOutput) ToFeatureWindowResponseOutput() FeatureWindowResponseOutput {
	return o
}

func (o FeatureWindowResponseOutput) ToFeatureWindowResponseOutputWithContext(ctx context.Context) FeatureWindowResponseOutput {
	return o
}

// Specifies the feature window end time
func (o FeatureWindowResponseOutput) FeatureWindowEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureWindowResponse) *string { return v.FeatureWindowEnd }).(pulumi.StringPtrOutput)
}

// Specifies the feature window start time
func (o FeatureWindowResponseOutput) FeatureWindowStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureWindowResponse) *string { return v.FeatureWindowStart }).(pulumi.StringPtrOutput)
}

type FeatureWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureWindowResponse)(nil)).Elem()
}

func (o FeatureWindowResponsePtrOutput) ToFeatureWindowResponsePtrOutput() FeatureWindowResponsePtrOutput {
	return o
}

func (o FeatureWindowResponsePtrOutput) ToFeatureWindowResponsePtrOutputWithContext(ctx context.Context) FeatureWindowResponsePtrOutput {
	return o
}

func (o FeatureWindowResponsePtrOutput) Elem() FeatureWindowResponseOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) FeatureWindowResponse {
		if v != nil {
			return *v
		}
		var ret FeatureWindowResponse
		return ret
	}).(FeatureWindowResponseOutput)
}

// Specifies the feature window end time
func (o FeatureWindowResponsePtrOutput) FeatureWindowEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureWindowEnd
	}).(pulumi.StringPtrOutput)
}

// Specifies the feature window start time
func (o FeatureWindowResponsePtrOutput) FeatureWindowStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureWindowStart
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set
type FeaturesetContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainer
func (val *FeaturesetContainer) Defaults() *FeaturesetContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturesetContainerInput is an input type that accepts FeaturesetContainerArgs and FeaturesetContainerOutput values.
// You can construct a concrete instance of `FeaturesetContainerInput` via:
//
//	FeaturesetContainerArgs{...}
type FeaturesetContainerInput interface {
	pulumi.Input

	ToFeaturesetContainerOutput() FeaturesetContainerOutput
	ToFeaturesetContainerOutputWithContext(context.Context) FeaturesetContainerOutput
}

// Dto object representing feature set
type FeaturesetContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerArgs
func (val *FeaturesetContainerArgs) Defaults() *FeaturesetContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturesetContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return i.ToFeaturesetContainerOutputWithContext(context.Background())
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetContainerOutput)
}

// Dto object representing feature set
type FeaturesetContainerOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return o
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set
type FeaturesetContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerResponse
func (val *FeaturesetContainerResponse) Defaults() *FeaturesetContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature set
type FeaturesetContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainerResponse)(nil)).Elem()
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutput() FeaturesetContainerResponseOutput {
	return o
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutputWithContext(ctx context.Context) FeaturesetContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturesetContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturesetContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset container.
func (o FeaturesetContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing the feature set job
type FeaturesetJobResponse struct {
	// Specifies the created date
	CreatedDate *string `pulumi:"createdDate"`
	// Specifies the display name
	DisplayName *string `pulumi:"displayName"`
	// Specifies the duration
	Duration *string `pulumi:"duration"`
	// Specifies the experiment id
	ExperimentId *string `pulumi:"experimentId"`
	// Specifies the backfill feature window to be materialized
	FeatureWindow *FeatureWindowResponse `pulumi:"featureWindow"`
	// Specifies the job id
	JobId *string `pulumi:"jobId"`
	// Specifies the job status
	Status *string `pulumi:"status"`
	// Specifies the tags if any
	Tags map[string]string `pulumi:"tags"`
	// Specifies the feature store job type
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for FeaturesetJobResponse
func (val *FeaturesetJobResponse) Defaults() *FeaturesetJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Unknown"
		tmp.Status = &status_
	}
	if tmp.Type == nil {
		type_ := "RecurrentMaterialization"
		tmp.Type = &type_
	}
	return &tmp
}

// Dto object representing the feature set job
type FeaturesetJobResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetJobResponse)(nil)).Elem()
}

func (o FeaturesetJobResponseOutput) ToFeaturesetJobResponseOutput() FeaturesetJobResponseOutput {
	return o
}

func (o FeaturesetJobResponseOutput) ToFeaturesetJobResponseOutputWithContext(ctx context.Context) FeaturesetJobResponseOutput {
	return o
}

// Specifies the created date
func (o FeaturesetJobResponseOutput) CreatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.CreatedDate }).(pulumi.StringPtrOutput)
}

// Specifies the display name
func (o FeaturesetJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the duration
func (o FeaturesetJobResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Specifies the experiment id
func (o FeaturesetJobResponseOutput) ExperimentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.ExperimentId }).(pulumi.StringPtrOutput)
}

// Specifies the backfill feature window to be materialized
func (o FeaturesetJobResponseOutput) FeatureWindow() FeatureWindowResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *FeatureWindowResponse { return v.FeatureWindow }).(FeatureWindowResponsePtrOutput)
}

// Specifies the job id
func (o FeaturesetJobResponseOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// Specifies the job status
func (o FeaturesetJobResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the tags if any
func (o FeaturesetJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the feature store job type
func (o FeaturesetJobResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FeaturesetJobResponseArrayOutput struct{ *pulumi.OutputState }

func (FeaturesetJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeaturesetJobResponse)(nil)).Elem()
}

func (o FeaturesetJobResponseArrayOutput) ToFeaturesetJobResponseArrayOutput() FeaturesetJobResponseArrayOutput {
	return o
}

func (o FeaturesetJobResponseArrayOutput) ToFeaturesetJobResponseArrayOutputWithContext(ctx context.Context) FeaturesetJobResponseArrayOutput {
	return o
}

func (o FeaturesetJobResponseArrayOutput) Index(i pulumi.IntInput) FeaturesetJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeaturesetJobResponse {
		return vs[0].([]FeaturesetJobResponse)[vs[1].(int)]
	}).(FeaturesetJobResponseOutput)
}

// Dto object representing specification
type FeaturesetSpecification struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// FeaturesetSpecificationInput is an input type that accepts FeaturesetSpecificationArgs and FeaturesetSpecificationOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationInput` via:
//
//	FeaturesetSpecificationArgs{...}
type FeaturesetSpecificationInput interface {
	pulumi.Input

	ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput
	ToFeaturesetSpecificationOutputWithContext(context.Context) FeaturesetSpecificationOutput
}

// Dto object representing specification
type FeaturesetSpecificationArgs struct {
	// Specifies the spec path
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (FeaturesetSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return i.ToFeaturesetSpecificationOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput)
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput).ToFeaturesetSpecificationPtrOutputWithContext(ctx)
}

// FeaturesetSpecificationPtrInput is an input type that accepts FeaturesetSpecificationArgs, FeaturesetSpecificationPtr and FeaturesetSpecificationPtrOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationPtrInput` via:
//
//	        FeaturesetSpecificationArgs{...}
//
//	or:
//
//	        nil
type FeaturesetSpecificationPtrInput interface {
	pulumi.Input

	ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput
	ToFeaturesetSpecificationPtrOutputWithContext(context.Context) FeaturesetSpecificationPtrOutput
}

type featuresetSpecificationPtrType FeaturesetSpecificationArgs

func FeaturesetSpecificationPtr(v *FeaturesetSpecificationArgs) FeaturesetSpecificationPtrInput {
	return (*featuresetSpecificationPtrType)(v)
}

func (*featuresetSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeaturesetSpecification) *FeaturesetSpecification {
		return &v
	}).(FeaturesetSpecificationPtrOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecification) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationPtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) Elem() FeaturesetSpecificationOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) FeaturesetSpecification {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecification
		return ret
	}).(FeaturesetSpecificationOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationResponse struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// Dto object representing specification
type FeaturesetSpecificationResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutput() FeaturesetSpecificationResponseOutput {
	return o
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutputWithContext(ctx context.Context) FeaturesetSpecificationResponseOutput {
	return o
}

// Specifies the spec path
func (o FeaturesetSpecificationResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecificationResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutput() FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutputWithContext(ctx context.Context) FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) Elem() FeaturesetSpecificationResponseOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) FeaturesetSpecificationResponse {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecificationResponse
		return ret
	}).(FeaturesetSpecificationResponseOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set version
type FeaturesetVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettings `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecification `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionType
func (val *FeaturesetVersionType) Defaults() *FeaturesetVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// FeaturesetVersionTypeInput is an input type that accepts FeaturesetVersionTypeArgs and FeaturesetVersionTypeOutput values.
// You can construct a concrete instance of `FeaturesetVersionTypeInput` via:
//
//	FeaturesetVersionTypeArgs{...}
type FeaturesetVersionTypeInput interface {
	pulumi.Input

	ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput
	ToFeaturesetVersionTypeOutputWithContext(context.Context) FeaturesetVersionTypeOutput
}

// Dto object representing feature set version
type FeaturesetVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies list of entities
	Entities pulumi.StringArrayInput `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings MaterializationSettingsPtrInput `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the feature spec details
	Specification FeaturesetSpecificationPtrInput `pulumi:"specification"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionTypeArgs
func (val *FeaturesetVersionTypeArgs) Defaults() *FeaturesetVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (FeaturesetVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return i.ToFeaturesetVersionTypeOutputWithContext(context.Background())
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetVersionTypeOutput)
}

// Dto object representing feature set version
type FeaturesetVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return o
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturesetVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionTypeOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionType) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionTypeOutput) MaterializationSettings() MaterializationSettingsPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *MaterializationSettings { return v.MaterializationSettings }).(MaterializationSettingsPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionTypeOutput) Specification() FeaturesetSpecificationPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *FeaturesetSpecification { return v.Specification }).(FeaturesetSpecificationPtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set version
type FeaturesetVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettingsResponse `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset version container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecificationResponse `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionResponse
func (val *FeaturesetVersionResponse) Defaults() *FeaturesetVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// Dto object representing feature set version
type FeaturesetVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionResponse)(nil)).Elem()
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutput() FeaturesetVersionResponseOutput {
	return o
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutputWithContext(ctx context.Context) FeaturesetVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturesetVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionResponseOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionResponseOutput) MaterializationSettings() MaterializationSettingsResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *MaterializationSettingsResponse { return v.MaterializationSettings }).(MaterializationSettingsResponsePtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset version container.
func (o FeaturesetVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionResponseOutput) Specification() FeaturesetSpecificationResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *FeaturesetSpecificationResponse { return v.Specification }).(FeaturesetSpecificationResponsePtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainer
func (val *FeaturestoreEntityContainer) Defaults() *FeaturestoreEntityContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityContainerInput is an input type that accepts FeaturestoreEntityContainerArgs and FeaturestoreEntityContainerOutput values.
// You can construct a concrete instance of `FeaturestoreEntityContainerInput` via:
//
//	FeaturestoreEntityContainerArgs{...}
type FeaturestoreEntityContainerInput interface {
	pulumi.Input

	ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput
	ToFeaturestoreEntityContainerOutputWithContext(context.Context) FeaturestoreEntityContainerOutput
}

// Dto object representing feature entity
type FeaturestoreEntityContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerArgs
func (val *FeaturestoreEntityContainerArgs) Defaults() *FeaturestoreEntityContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return i.ToFeaturestoreEntityContainerOutputWithContext(context.Background())
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityContainerOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return o
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerResponse
func (val *FeaturestoreEntityContainerResponse) Defaults() *FeaturestoreEntityContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainerResponse)(nil)).Elem()
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutput() FeaturestoreEntityContainerResponseOutput {
	return o
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutputWithContext(ctx context.Context) FeaturestoreEntityContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturestoreEntityContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturestoreEntityContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity container.
func (o FeaturestoreEntityContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumn `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionType
func (val *FeaturestoreEntityVersionType) Defaults() *FeaturestoreEntityVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityVersionTypeInput is an input type that accepts FeaturestoreEntityVersionTypeArgs and FeaturestoreEntityVersionTypeOutput values.
// You can construct a concrete instance of `FeaturestoreEntityVersionTypeInput` via:
//
//	FeaturestoreEntityVersionTypeArgs{...}
type FeaturestoreEntityVersionTypeInput interface {
	pulumi.Input

	ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput
	ToFeaturestoreEntityVersionTypeOutputWithContext(context.Context) FeaturestoreEntityVersionTypeOutput
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies index columns
	IndexColumns IndexColumnArrayInput `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionTypeArgs
func (val *FeaturestoreEntityVersionTypeArgs) Defaults() *FeaturestoreEntityVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return i.ToFeaturestoreEntityVersionTypeOutputWithContext(context.Background())
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityVersionTypeOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return o
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionTypeOutput) IndexColumns() IndexColumnArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) []IndexColumn { return v.IndexColumns }).(IndexColumnArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumnResponse `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionResponse
func (val *FeaturestoreEntityVersionResponse) Defaults() *FeaturestoreEntityVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionResponse)(nil)).Elem()
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutput() FeaturestoreEntityVersionResponseOutput {
	return o
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutputWithContext(ctx context.Context) FeaturestoreEntityVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionResponseOutput) IndexColumns() IndexColumnResponseArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) []IndexColumnResponse { return v.IndexColumns }).(IndexColumnResponseArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity version.
func (o FeaturestoreEntityVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FlavorData struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

// FlavorDataInput is an input type that accepts FlavorDataArgs and FlavorDataOutput values.
// You can construct a concrete instance of `FlavorDataInput` via:
//
//	FlavorDataArgs{...}
type FlavorDataInput interface {
	pulumi.Input

	ToFlavorDataOutput() FlavorDataOutput
	ToFlavorDataOutputWithContext(context.Context) FlavorDataOutput
}

type FlavorDataArgs struct {
	// Model flavor-specific data.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FlavorDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (i FlavorDataArgs) ToFlavorDataOutput() FlavorDataOutput {
	return i.ToFlavorDataOutputWithContext(context.Background())
}

func (i FlavorDataArgs) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataOutput)
}

// FlavorDataMapInput is an input type that accepts FlavorDataMap and FlavorDataMapOutput values.
// You can construct a concrete instance of `FlavorDataMapInput` via:
//
//	FlavorDataMap{ "key": FlavorDataArgs{...} }
type FlavorDataMapInput interface {
	pulumi.Input

	ToFlavorDataMapOutput() FlavorDataMapOutput
	ToFlavorDataMapOutputWithContext(context.Context) FlavorDataMapOutput
}

type FlavorDataMap map[string]FlavorDataInput

func (FlavorDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (i FlavorDataMap) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return i.ToFlavorDataMapOutputWithContext(context.Background())
}

func (i FlavorDataMap) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataMapOutput)
}

type FlavorDataOutput struct{ *pulumi.OutputState }

func (FlavorDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (o FlavorDataOutput) ToFlavorDataOutput() FlavorDataOutput {
	return o
}

func (o FlavorDataOutput) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorData) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataMapOutput struct{ *pulumi.OutputState }

func (FlavorDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) MapIndex(k pulumi.StringInput) FlavorDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorData {
		return vs[0].(map[string]FlavorData)[vs[1].(string)]
	}).(FlavorDataOutput)
}

type FlavorDataResponse struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

type FlavorDataResponseOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutput() FlavorDataResponseOutput {
	return o
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutputWithContext(ctx context.Context) FlavorDataResponseOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataResponseOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorDataResponse) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataResponseMapOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutput() FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutputWithContext(ctx context.Context) FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) MapIndex(k pulumi.StringInput) FlavorDataResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorDataResponse {
		return vs[0].(map[string]FlavorDataResponse)[vs[1].(string)]
	}).(FlavorDataResponseOutput)
}

// Forecasting task in AutoML Table vertical.
type Forecasting struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettings `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Forecasting
func (val *Forecasting) Defaults() *Forecasting {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettingsResponse `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ForecastingResponse
func (val *ForecastingResponse) Defaults() *ForecastingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Forecasting specific parameters.
type ForecastingSettings struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettings
func (val *ForecastingSettings) Defaults() *ForecastingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// Forecasting specific parameters.
type ForecastingSettingsResponse struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsResponse
func (val *ForecastingSettingsResponse) Defaults() *ForecastingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// Forecasting Training related configuration.
type ForecastingTrainingSettings struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettings
func (val *ForecastingTrainingSettings) Defaults() *ForecastingTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsResponse struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettingsResponse
func (val *ForecastingTrainingSettingsResponse) Defaults() *ForecastingTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// Data specific to GlusterFS.
type GlusterFsSectionResponse struct {
	// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
	ServerAddress string `pulumi:"serverAddress"`
	// The name of the created GlusterFS volume.
	VolumeName string `pulumi:"volumeName"`
}

// Data specific to GlusterFS.
type GlusterFsSectionResponseOutput struct{ *pulumi.OutputState }

func (GlusterFsSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterFsSectionResponse)(nil)).Elem()
}

func (o GlusterFsSectionResponseOutput) ToGlusterFsSectionResponseOutput() GlusterFsSectionResponseOutput {
	return o
}

func (o GlusterFsSectionResponseOutput) ToGlusterFsSectionResponseOutputWithContext(ctx context.Context) GlusterFsSectionResponseOutput {
	return o
}

// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
func (o GlusterFsSectionResponseOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterFsSectionResponse) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The name of the created GlusterFS volume.
func (o GlusterFsSectionResponseOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterFsSectionResponse) string { return v.VolumeName }).(pulumi.StringOutput)
}

type GlusterFsSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (GlusterFsSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterFsSectionResponse)(nil)).Elem()
}

func (o GlusterFsSectionResponsePtrOutput) ToGlusterFsSectionResponsePtrOutput() GlusterFsSectionResponsePtrOutput {
	return o
}

func (o GlusterFsSectionResponsePtrOutput) ToGlusterFsSectionResponsePtrOutputWithContext(ctx context.Context) GlusterFsSectionResponsePtrOutput {
	return o
}

func (o GlusterFsSectionResponsePtrOutput) Elem() GlusterFsSectionResponseOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) GlusterFsSectionResponse {
		if v != nil {
			return *v
		}
		var ret GlusterFsSectionResponse
		return ret
	}).(GlusterFsSectionResponseOutput)
}

// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
func (o GlusterFsSectionResponsePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The name of the created GlusterFS volume.
func (o GlusterFsSectionResponsePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithm struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponse struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// A HDInsight compute.
type HDInsight struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// HDInsight compute properties
	Properties *HDInsightProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// HDInsight compute properties
type HDInsightProperties struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentials `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// HDInsight compute properties
type HDInsightPropertiesResponse struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentialsResponse `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// A HDInsight compute.
type HDInsightResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// HDInsight compute properties
	Properties *HDInsightPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Reference to an asset via its ARM resource ID.
type IdAssetReference struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponse struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmk struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// IdentityForCmkInput is an input type that accepts IdentityForCmkArgs and IdentityForCmkOutput values.
// You can construct a concrete instance of `IdentityForCmkInput` via:
//
//	IdentityForCmkArgs{...}
type IdentityForCmkInput interface {
	pulumi.Input

	ToIdentityForCmkOutput() IdentityForCmkOutput
	ToIdentityForCmkOutputWithContext(context.Context) IdentityForCmkOutput
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkArgs struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (IdentityForCmkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return i.ToIdentityForCmkOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput)
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput).ToIdentityForCmkPtrOutputWithContext(ctx)
}

// IdentityForCmkPtrInput is an input type that accepts IdentityForCmkArgs, IdentityForCmkPtr and IdentityForCmkPtrOutput values.
// You can construct a concrete instance of `IdentityForCmkPtrInput` via:
//
//	        IdentityForCmkArgs{...}
//
//	or:
//
//	        nil
type IdentityForCmkPtrInput interface {
	pulumi.Input

	ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput
	ToIdentityForCmkPtrOutputWithContext(context.Context) IdentityForCmkPtrOutput
}

type identityForCmkPtrType IdentityForCmkArgs

func IdentityForCmkPtr(v *IdentityForCmkArgs) IdentityForCmkPtrInput {
	return (*identityForCmkPtrType)(v)
}

func (*identityForCmkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkPtrOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkOutput struct{ *pulumi.OutputState }

func (IdentityForCmkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityForCmk) *IdentityForCmk {
		return &v
	}).(IdentityForCmkPtrOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmk) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkPtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) Elem() IdentityForCmkOutput {
	return o.ApplyT(func(v *IdentityForCmk) IdentityForCmk {
		if v != nil {
			return *v
		}
		var ret IdentityForCmk
		return ret
	}).(IdentityForCmkOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmk) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkResponse struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkResponseOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutput() IdentityForCmkResponseOutput {
	return o
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutputWithContext(ctx context.Context) IdentityForCmkResponseOutput {
	return o
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmkResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutput() IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutputWithContext(ctx context.Context) IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) Elem() IdentityForCmkResponseOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) IdentityForCmkResponse {
		if v != nil {
			return *v
		}
		var ret IdentityForCmkResponse
		return ret
	}).(IdentityForCmkResponseOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]UserAssignedIdentityResponse { return v.UserAssignedIdentities }).(UserAssignedIdentityResponseMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Describes the Image Specifications
type Image struct {
	// Image reference
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Image
func (val *Image) Defaults() *Image {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassification struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassification
func (val *ImageClassification) Defaults() *ImageClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabel struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabel
func (val *ImageClassificationMultilabel) Defaults() *ImageClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelResponse
func (val *ImageClassificationMultilabelResponse) Defaults() *ImageClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationResponse
func (val *ImageClassificationResponse) Defaults() *ImageClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentation struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentation
func (val *ImageInstanceSegmentation) Defaults() *ImageInstanceSegmentation {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationResponse
func (val *ImageInstanceSegmentationResponse) Defaults() *ImageInstanceSegmentationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Limit settings for the AutoML job.
type ImageLimitSettings struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettings
func (val *ImageLimitSettings) Defaults() *ImageLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponse struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsResponse
func (val *ImageLimitSettingsResponse) Defaults() *ImageLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Returns metadata about the operating system image for this compute instance.
type ImageMetadataResponse struct {
	// Specifies the current operating system image version this compute instance is running on.
	CurrentImageVersion *string `pulumi:"currentImageVersion"`
	// Specifies whether this compute instance is running on the latest operating system image.
	IsLatestOsImageVersion *bool `pulumi:"isLatestOsImageVersion"`
	// Specifies the latest available operating system image version.
	LatestImageVersion *string `pulumi:"latestImageVersion"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassification struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetection struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassification struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassification
func (val *ImageModelSettingsClassification) Defaults() *ImageModelSettingsClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationResponse
func (val *ImageModelSettingsClassificationResponse) Defaults() *ImageModelSettingsClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetection struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetection
func (val *ImageModelSettingsObjectDetection) Defaults() *ImageModelSettingsObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionResponse
func (val *ImageModelSettingsObjectDetectionResponse) Defaults() *ImageModelSettingsObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetection struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetection
func (val *ImageObjectDetection) Defaults() *ImageObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionResponse
func (val *ImageObjectDetectionResponse) Defaults() *ImageObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Describes the Image Specifications
type ImageResponse struct {
	// Image reference
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ImageResponse
func (val *ImageResponse) Defaults() *ImageResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettings struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponse struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Dto object representing index column
type IndexColumn struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumn
func (val *IndexColumn) Defaults() *IndexColumn {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// IndexColumnInput is an input type that accepts IndexColumnArgs and IndexColumnOutput values.
// You can construct a concrete instance of `IndexColumnInput` via:
//
//	IndexColumnArgs{...}
type IndexColumnInput interface {
	pulumi.Input

	ToIndexColumnOutput() IndexColumnOutput
	ToIndexColumnOutputWithContext(context.Context) IndexColumnOutput
}

// Dto object representing index column
type IndexColumnArgs struct {
	// Specifies the column name
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// Specifies the data type
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnArgs
func (val *IndexColumnArgs) Defaults() *IndexColumnArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		tmp.DataType = pulumi.StringPtr("String")
	}
	return &tmp
}
func (IndexColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (i IndexColumnArgs) ToIndexColumnOutput() IndexColumnOutput {
	return i.ToIndexColumnOutputWithContext(context.Background())
}

func (i IndexColumnArgs) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnOutput)
}

// IndexColumnArrayInput is an input type that accepts IndexColumnArray and IndexColumnArrayOutput values.
// You can construct a concrete instance of `IndexColumnArrayInput` via:
//
//	IndexColumnArray{ IndexColumnArgs{...} }
type IndexColumnArrayInput interface {
	pulumi.Input

	ToIndexColumnArrayOutput() IndexColumnArrayOutput
	ToIndexColumnArrayOutputWithContext(context.Context) IndexColumnArrayOutput
}

type IndexColumnArray []IndexColumnInput

func (IndexColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (i IndexColumnArray) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return i.ToIndexColumnArrayOutputWithContext(context.Background())
}

func (i IndexColumnArray) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnArrayOutput)
}

// Dto object representing index column
type IndexColumnOutput struct{ *pulumi.OutputState }

func (IndexColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (o IndexColumnOutput) ToIndexColumnOutput() IndexColumnOutput {
	return o
}

func (o IndexColumnOutput) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return o
}

// Specifies the column name
func (o IndexColumnOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) Index(i pulumi.IntInput) IndexColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumn {
		return vs[0].([]IndexColumn)[vs[1].(int)]
	}).(IndexColumnOutput)
}

// Dto object representing index column
type IndexColumnResponse struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnResponse
func (val *IndexColumnResponse) Defaults() *IndexColumnResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing index column
type IndexColumnResponseOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutput() IndexColumnResponseOutput {
	return o
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutputWithContext(ctx context.Context) IndexColumnResponseOutput {
	return o
}

// Specifies the column name
func (o IndexColumnResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutput() IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutputWithContext(ctx context.Context) IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) Index(i pulumi.IntInput) IndexColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumnResponse {
		return vs[0].([]IndexColumnResponse)[vs[1].(int)]
	}).(IndexColumnResponseOutput)
}

type InferenceContainerProperties struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *Route `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *Route `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *Route `pulumi:"scoringRoute"`
}

// InferenceContainerPropertiesInput is an input type that accepts InferenceContainerPropertiesArgs and InferenceContainerPropertiesOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesInput` via:
//
//	InferenceContainerPropertiesArgs{...}
type InferenceContainerPropertiesInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput
	ToInferenceContainerPropertiesOutputWithContext(context.Context) InferenceContainerPropertiesOutput
}

type InferenceContainerPropertiesArgs struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute RoutePtrInput `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute RoutePtrInput `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute RoutePtrInput `pulumi:"scoringRoute"`
}

func (InferenceContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return i.ToInferenceContainerPropertiesOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput)
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput).ToInferenceContainerPropertiesPtrOutputWithContext(ctx)
}

// InferenceContainerPropertiesPtrInput is an input type that accepts InferenceContainerPropertiesArgs, InferenceContainerPropertiesPtr and InferenceContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesPtrInput` via:
//
//	        InferenceContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type InferenceContainerPropertiesPtrInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput
	ToInferenceContainerPropertiesPtrOutputWithContext(context.Context) InferenceContainerPropertiesPtrOutput
}

type inferenceContainerPropertiesPtrType InferenceContainerPropertiesArgs

func InferenceContainerPropertiesPtr(v *InferenceContainerPropertiesArgs) InferenceContainerPropertiesPtrInput {
	return (*inferenceContainerPropertiesPtrType)(v)
}

func (*inferenceContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesPtrOutput)
}

type InferenceContainerPropertiesOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceContainerProperties) *InferenceContainerProperties {
		return &v
	}).(InferenceContainerPropertiesPtrOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.LivenessRoute }).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ReadinessRoute }).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ScoringRoute }).(RoutePtrOutput)
}

type InferenceContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) Elem() InferenceContainerPropertiesOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) InferenceContainerProperties {
		if v != nil {
			return *v
		}
		var ret InferenceContainerProperties
		return ret
	}).(InferenceContainerPropertiesOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RoutePtrOutput)
}

type InferenceContainerPropertiesResponse struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *RouteResponse `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *RouteResponse `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *RouteResponse `pulumi:"scoringRoute"`
}

type InferenceContainerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutput() InferenceContainerPropertiesResponseOutput {
	return o
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponseOutput {
	return o
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.LivenessRoute }).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ReadinessRoute }).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ScoringRoute }).(RouteResponsePtrOutput)
}

type InferenceContainerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutput() InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) Elem() InferenceContainerPropertiesResponseOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) InferenceContainerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret InferenceContainerPropertiesResponse
		return ret
	}).(InferenceContainerPropertiesResponseOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RouteResponsePtrOutput)
}

// Instance type schema.
type InstanceTypeSchema struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResources `pulumi:"resources"`
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

// Instance type schema.
type InstanceTypeSchemaResponse struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResponseResources `pulumi:"resources"`
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResponseResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

type JobResourceConfiguration struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfiguration
func (val *JobResourceConfiguration) Defaults() *JobResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

type JobResourceConfigurationResponse struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfigurationResponse
func (val *JobResourceConfigurationResponse) Defaults() *JobResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

type JobScheduleAction struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

type JobScheduleActionResponse struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

// Job endpoint definition
type JobService struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodes `pulumi:"nodes"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
}

// JobServiceInput is an input type that accepts JobServiceArgs and JobServiceOutput values.
// You can construct a concrete instance of `JobServiceInput` via:
//
//	JobServiceArgs{...}
type JobServiceInput interface {
	pulumi.Input

	ToJobServiceOutput() JobServiceOutput
	ToJobServiceOutputWithContext(context.Context) JobServiceOutput
}

// Job endpoint definition
type JobServiceArgs struct {
	// Url for endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType pulumi.StringPtrInput `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes AllNodesPtrInput `pulumi:"nodes"`
	// Port for endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (JobServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (i JobServiceArgs) ToJobServiceOutput() JobServiceOutput {
	return i.ToJobServiceOutputWithContext(context.Background())
}

func (i JobServiceArgs) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceOutput)
}

// JobServiceMapInput is an input type that accepts JobServiceMap and JobServiceMapOutput values.
// You can construct a concrete instance of `JobServiceMapInput` via:
//
//	JobServiceMap{ "key": JobServiceArgs{...} }
type JobServiceMapInput interface {
	pulumi.Input

	ToJobServiceMapOutput() JobServiceMapOutput
	ToJobServiceMapOutputWithContext(context.Context) JobServiceMapOutput
}

type JobServiceMap map[string]JobServiceInput

func (JobServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (i JobServiceMap) ToJobServiceMapOutput() JobServiceMapOutput {
	return i.ToJobServiceMapOutputWithContext(context.Background())
}

func (i JobServiceMap) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceMapOutput)
}

// Job endpoint definition
type JobServiceOutput struct{ *pulumi.OutputState }

func (JobServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (o JobServiceOutput) ToJobServiceOutput() JobServiceOutput {
	return o
}

func (o JobServiceOutput) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return o
}

// Url for endpoint.
func (o JobServiceOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Endpoint type.
func (o JobServiceOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceOutput) Nodes() AllNodesPtrOutput {
	return o.ApplyT(func(v JobService) *AllNodes { return v.Nodes }).(AllNodesPtrOutput)
}

// Port for endpoint.
func (o JobServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobService) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type JobServiceMapOutput struct{ *pulumi.OutputState }

func (JobServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (o JobServiceMapOutput) ToJobServiceMapOutput() JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) MapIndex(k pulumi.StringInput) JobServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobService {
		return vs[0].(map[string]JobService)[vs[1].(string)]
	}).(JobServiceOutput)
}

// Job endpoint definition
type JobServiceResponse struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Any error in the service.
	ErrorMessage string `pulumi:"errorMessage"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodesResponse `pulumi:"nodes"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
	// Status of endpoint.
	Status string `pulumi:"status"`
}

// Job endpoint definition
type JobServiceResponseOutput struct{ *pulumi.OutputState }

func (JobServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutput() JobServiceResponseOutput {
	return o
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutputWithContext(ctx context.Context) JobServiceResponseOutput {
	return o
}

// Url for endpoint.
func (o JobServiceResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Any error in the service.
func (o JobServiceResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Endpoint type.
func (o JobServiceResponseOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceResponseOutput) Nodes() AllNodesResponsePtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *AllNodesResponse { return v.Nodes }).(AllNodesResponsePtrOutput)
}

// Port for endpoint.
func (o JobServiceResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobServiceResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Status of endpoint.
func (o JobServiceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.Status }).(pulumi.StringOutput)
}

type JobServiceResponseMapOutput struct{ *pulumi.OutputState }

func (JobServiceResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutput() JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutputWithContext(ctx context.Context) JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) MapIndex(k pulumi.StringInput) JobServiceResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobServiceResponse {
		return vs[0].(map[string]JobServiceResponse)[vs[1].(string)]
	}).(JobServiceResponseOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type Kubernetes struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Kubernetes
	Properties *KubernetesProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for Kubernetes
func (val *Kubernetes) Defaults() *Kubernetes {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirements `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeployment
func (val *KubernetesOnlineDeployment) Defaults() *KubernetesOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirementsResponse `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentResponse
func (val *KubernetesOnlineDeploymentResponse) Defaults() *KubernetesOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Kubernetes properties
type KubernetesProperties struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchema `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesProperties
func (val *KubernetesProperties) Defaults() *KubernetesProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// Kubernetes properties
type KubernetesPropertiesResponse struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchemaResponse `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesPropertiesResponse
func (val *KubernetesPropertiesResponse) Defaults() *KubernetesPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Kubernetes
	Properties *KubernetesPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for KubernetesResponse
func (val *KubernetesResponse) Defaults() *KubernetesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// Label category definition
type LabelCategory struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClass `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategory
func (val *LabelCategory) Defaults() *LabelCategory {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// LabelCategoryInput is an input type that accepts LabelCategoryArgs and LabelCategoryOutput values.
// You can construct a concrete instance of `LabelCategoryInput` via:
//
//	LabelCategoryArgs{...}
type LabelCategoryInput interface {
	pulumi.Input

	ToLabelCategoryOutput() LabelCategoryOutput
	ToLabelCategoryOutputWithContext(context.Context) LabelCategoryOutput
}

// Label category definition
type LabelCategoryArgs struct {
	// Dictionary of label classes in this category.
	Classes LabelClassMapInput `pulumi:"classes"`
	// Display name of the label category.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect pulumi.StringPtrInput `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryArgs
func (val *LabelCategoryArgs) Defaults() *LabelCategoryArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		tmp.MultiSelect = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (i LabelCategoryArgs) ToLabelCategoryOutput() LabelCategoryOutput {
	return i.ToLabelCategoryOutputWithContext(context.Background())
}

func (i LabelCategoryArgs) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryOutput)
}

// LabelCategoryMapInput is an input type that accepts LabelCategoryMap and LabelCategoryMapOutput values.
// You can construct a concrete instance of `LabelCategoryMapInput` via:
//
//	LabelCategoryMap{ "key": LabelCategoryArgs{...} }
type LabelCategoryMapInput interface {
	pulumi.Input

	ToLabelCategoryMapOutput() LabelCategoryMapOutput
	ToLabelCategoryMapOutputWithContext(context.Context) LabelCategoryMapOutput
}

type LabelCategoryMap map[string]LabelCategoryInput

func (LabelCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (i LabelCategoryMap) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return i.ToLabelCategoryMapOutputWithContext(context.Background())
}

func (i LabelCategoryMap) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryMapOutput)
}

// Label category definition
type LabelCategoryOutput struct{ *pulumi.OutputState }

func (LabelCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (o LabelCategoryOutput) ToLabelCategoryOutput() LabelCategoryOutput {
	return o
}

func (o LabelCategoryOutput) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryOutput) Classes() LabelClassMapOutput {
	return o.ApplyT(func(v LabelCategory) map[string]LabelClass { return v.Classes }).(LabelClassMapOutput)
}

// Display name of the label category.
func (o LabelCategoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategory {
		return vs[0].(map[string]LabelCategory)[vs[1].(string)]
	}).(LabelCategoryOutput)
}

// Label category definition
type LabelCategoryResponse struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClassResponse `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryResponse
func (val *LabelCategoryResponse) Defaults() *LabelCategoryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// Label category definition
type LabelCategoryResponseOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutput() LabelCategoryResponseOutput {
	return o
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutputWithContext(ctx context.Context) LabelCategoryResponseOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryResponseOutput) Classes() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelCategoryResponse) map[string]LabelClassResponse { return v.Classes }).(LabelClassResponseMapOutput)
}

// Display name of the label category.
func (o LabelCategoryResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryResponseOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryResponseMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutput() LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutputWithContext(ctx context.Context) LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategoryResponse {
		return vs[0].(map[string]LabelCategoryResponse)[vs[1].(string)]
	}).(LabelCategoryResponseOutput)
}

// Label class definition
type LabelClass struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClass `pulumi:"subclasses"`
}

// LabelClassInput is an input type that accepts LabelClassArgs and LabelClassOutput values.
// You can construct a concrete instance of `LabelClassInput` via:
//
//	LabelClassArgs{...}
type LabelClassInput interface {
	pulumi.Input

	ToLabelClassOutput() LabelClassOutput
	ToLabelClassOutputWithContext(context.Context) LabelClassOutput
}

// Label class definition
type LabelClassArgs struct {
	// Display name of the label class.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses LabelClassMapInput `pulumi:"subclasses"`
}

func (LabelClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (i LabelClassArgs) ToLabelClassOutput() LabelClassOutput {
	return i.ToLabelClassOutputWithContext(context.Background())
}

func (i LabelClassArgs) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassOutput)
}

// LabelClassMapInput is an input type that accepts LabelClassMap and LabelClassMapOutput values.
// You can construct a concrete instance of `LabelClassMapInput` via:
//
//	LabelClassMap{ "key": LabelClassArgs{...} }
type LabelClassMapInput interface {
	pulumi.Input

	ToLabelClassMapOutput() LabelClassMapOutput
	ToLabelClassMapOutputWithContext(context.Context) LabelClassMapOutput
}

type LabelClassMap map[string]LabelClassInput

func (LabelClassMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (i LabelClassMap) ToLabelClassMapOutput() LabelClassMapOutput {
	return i.ToLabelClassMapOutputWithContext(context.Background())
}

func (i LabelClassMap) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassMapOutput)
}

// Label class definition
type LabelClassOutput struct{ *pulumi.OutputState }

func (LabelClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (o LabelClassOutput) ToLabelClassOutput() LabelClassOutput {
	return o
}

func (o LabelClassOutput) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return o
}

// Display name of the label class.
func (o LabelClassOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClass) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassOutput) Subclasses() LabelClassMapOutput {
	return o.ApplyT(func(v LabelClass) map[string]LabelClass { return v.Subclasses }).(LabelClassMapOutput)
}

type LabelClassMapOutput struct{ *pulumi.OutputState }

func (LabelClassMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (o LabelClassMapOutput) ToLabelClassMapOutput() LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) MapIndex(k pulumi.StringInput) LabelClassOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClass {
		return vs[0].(map[string]LabelClass)[vs[1].(string)]
	}).(LabelClassOutput)
}

// Label class definition
type LabelClassResponse struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClassResponse `pulumi:"subclasses"`
}

// Label class definition
type LabelClassResponseOutput struct{ *pulumi.OutputState }

func (LabelClassResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutput() LabelClassResponseOutput {
	return o
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutputWithContext(ctx context.Context) LabelClassResponseOutput {
	return o
}

// Display name of the label class.
func (o LabelClassResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClassResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassResponseOutput) Subclasses() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelClassResponse) map[string]LabelClassResponse { return v.Subclasses }).(LabelClassResponseMapOutput)
}

type LabelClassResponseMapOutput struct{ *pulumi.OutputState }

func (LabelClassResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutput() LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutputWithContext(ctx context.Context) LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) MapIndex(k pulumi.StringInput) LabelClassResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClassResponse {
		return vs[0].(map[string]LabelClassResponse)[vs[1].(string)]
	}).(LabelClassResponseOutput)
}

// Labeling data configuration definition
type LabelingDataConfiguration struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfiguration
func (val *LabelingDataConfiguration) Defaults() *LabelingDataConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// LabelingDataConfigurationInput is an input type that accepts LabelingDataConfigurationArgs and LabelingDataConfigurationOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationInput` via:
//
//	LabelingDataConfigurationArgs{...}
type LabelingDataConfigurationInput interface {
	pulumi.Input

	ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput
	ToLabelingDataConfigurationOutputWithContext(context.Context) LabelingDataConfigurationOutput
}

// Labeling data configuration definition
type LabelingDataConfigurationArgs struct {
	// Resource Id of the data asset to perform labeling.
	DataId pulumi.StringPtrInput `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh pulumi.StringPtrInput `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationArgs
func (val *LabelingDataConfigurationArgs) Defaults() *LabelingDataConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		tmp.IncrementalDataRefresh = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelingDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return i.ToLabelingDataConfigurationOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput)
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput).ToLabelingDataConfigurationPtrOutputWithContext(ctx)
}

// LabelingDataConfigurationPtrInput is an input type that accepts LabelingDataConfigurationArgs, LabelingDataConfigurationPtr and LabelingDataConfigurationPtrOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationPtrInput` via:
//
//	        LabelingDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type LabelingDataConfigurationPtrInput interface {
	pulumi.Input

	ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput
	ToLabelingDataConfigurationPtrOutputWithContext(context.Context) LabelingDataConfigurationPtrOutput
}

type labelingDataConfigurationPtrType LabelingDataConfigurationArgs

func LabelingDataConfigurationPtr(v *LabelingDataConfigurationArgs) LabelingDataConfigurationPtrInput {
	return (*labelingDataConfigurationPtrType)(v)
}

func (*labelingDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingDataConfiguration) *LabelingDataConfiguration {
		return &v
	}).(LabelingDataConfigurationPtrOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) Elem() LabelingDataConfigurationOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) LabelingDataConfiguration {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfiguration
		return ret
	}).(LabelingDataConfigurationOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationPtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationPtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationResponse struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationResponse
func (val *LabelingDataConfigurationResponse) Defaults() *LabelingDataConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// Labeling data configuration definition
type LabelingDataConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutput() LabelingDataConfigurationResponseOutput {
	return o
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutputWithContext(ctx context.Context) LabelingDataConfigurationResponseOutput {
	return o
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponseOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponseOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutput() LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutputWithContext(ctx context.Context) LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) Elem() LabelingDataConfigurationResponseOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) LabelingDataConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfigurationResponse
		return ret
	}).(LabelingDataConfigurationResponseOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponsePtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponsePtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobType struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfiguration `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructions `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategory `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobType
func (val *LabelingJobType) Defaults() *LabelingJobType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// LabelingJobTypeInput is an input type that accepts LabelingJobTypeArgs and LabelingJobTypeOutput values.
// You can construct a concrete instance of `LabelingJobTypeInput` via:
//
//	LabelingJobTypeArgs{...}
type LabelingJobTypeInput interface {
	pulumi.Input

	ToLabelingJobTypeOutput() LabelingJobTypeOutput
	ToLabelingJobTypeOutputWithContext(context.Context) LabelingJobTypeOutput
}

// Labeling job definition
type LabelingJobTypeArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration LabelingDataConfigurationPtrInput `pulumi:"dataConfiguration"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions LabelingJobInstructionsPtrInput `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories LabelCategoryMapInput `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties pulumi.Input `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration pulumi.Input `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobTypeArgs
func (val *LabelingJobTypeArgs) Defaults() *LabelingJobTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (LabelingJobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return i.ToLabelingJobTypeOutputWithContext(context.Background())
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTypeOutput)
}

// Labeling job definition
type LabelingJobTypeOutput struct{ *pulumi.OutputState }

func (LabelingJobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return o
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobTypeOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobTypeOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Configuration of data used in the job.
func (o LabelingJobTypeOutput) DataConfiguration() LabelingDataConfigurationPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingDataConfiguration { return v.DataConfiguration }).(LabelingDataConfigurationPtrOutput)
}

// The asset description text.
func (o LabelingJobTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobTypeOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobTypeOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobTypeOutput) JobInstructions() LabelingJobInstructionsPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingJobInstructions { return v.JobInstructions }).(LabelingJobInstructionsPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobTypeOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobType) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobTypeOutput) LabelCategories() LabelCategoryMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]LabelCategory { return v.LabelCategories }).(LabelCategoryMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobTypeOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobTypeOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobTypeOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// The asset property dictionary.
func (o LabelingJobTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobTypeOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobTypeOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for image data
type LabelingJobImageProperties struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImageProperties
func (val *LabelingJobImageProperties) Defaults() *LabelingJobImageProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesResponse struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImagePropertiesResponse
func (val *LabelingJobImagePropertiesResponse) Defaults() *LabelingJobImagePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Instructions for labeling job
type LabelingJobInstructions struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// LabelingJobInstructionsInput is an input type that accepts LabelingJobInstructionsArgs and LabelingJobInstructionsOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsInput` via:
//
//	LabelingJobInstructionsArgs{...}
type LabelingJobInstructionsInput interface {
	pulumi.Input

	ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput
	ToLabelingJobInstructionsOutputWithContext(context.Context) LabelingJobInstructionsOutput
}

// Instructions for labeling job
type LabelingJobInstructionsArgs struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (LabelingJobInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return i.ToLabelingJobInstructionsOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput)
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput).ToLabelingJobInstructionsPtrOutputWithContext(ctx)
}

// LabelingJobInstructionsPtrInput is an input type that accepts LabelingJobInstructionsArgs, LabelingJobInstructionsPtr and LabelingJobInstructionsPtrOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsPtrInput` via:
//
//	        LabelingJobInstructionsArgs{...}
//
//	or:
//
//	        nil
type LabelingJobInstructionsPtrInput interface {
	pulumi.Input

	ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput
	ToLabelingJobInstructionsPtrOutputWithContext(context.Context) LabelingJobInstructionsPtrOutput
}

type labelingJobInstructionsPtrType LabelingJobInstructionsArgs

func LabelingJobInstructionsPtr(v *LabelingJobInstructionsArgs) LabelingJobInstructionsPtrInput {
	return (*labelingJobInstructionsPtrType)(v)
}

func (*labelingJobInstructionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobInstructions) *LabelingJobInstructions {
		return &v
	}).(LabelingJobInstructionsPtrOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructions) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) Elem() LabelingJobInstructionsOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) LabelingJobInstructions {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructions
		return ret
	}).(LabelingJobInstructionsOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsResponse struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// Instructions for labeling job
type LabelingJobInstructionsResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutput() LabelingJobInstructionsResponseOutput {
	return o
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutputWithContext(ctx context.Context) LabelingJobInstructionsResponseOutput {
	return o
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructionsResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutput() LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutputWithContext(ctx context.Context) LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) Elem() LabelingJobInstructionsResponseOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) LabelingJobInstructionsResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructionsResponse
		return ret
	}).(LabelingJobInstructionsResponseOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Created time of the job in UTC timezone.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfigurationResponse `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructionsResponse `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategoryResponse `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Progress metrics of the job.
	ProgressMetrics ProgressMetricsResponse `pulumi:"progressMetrics"`
	// Internal id of the job(Previously called project).
	ProjectId string `pulumi:"projectId"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the labeling job provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Status messages of the job.
	StatusMessages []StatusMessageResponse `pulumi:"statusMessages"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobResponse
func (val *LabelingJobResponse) Defaults() *LabelingJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Labeling job definition
type LabelingJobResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobResponse)(nil)).Elem()
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutput() LabelingJobResponseOutput {
	return o
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutputWithContext(ctx context.Context) LabelingJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Created time of the job in UTC timezone.
func (o LabelingJobResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Configuration of data used in the job.
func (o LabelingJobResponseOutput) DataConfiguration() LabelingDataConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingDataConfigurationResponse { return v.DataConfiguration }).(LabelingDataConfigurationResponsePtrOutput)
}

// The asset description text.
func (o LabelingJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobResponseOutput) JobInstructions() LabelingJobInstructionsResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingJobInstructionsResponse { return v.JobInstructions }).(LabelingJobInstructionsResponsePtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobResponseOutput) LabelCategories() LabelCategoryResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]LabelCategoryResponse { return v.LabelCategories }).(LabelCategoryResponseMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobResponseOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobResponseOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Progress metrics of the job.
func (o LabelingJobResponseOutput) ProgressMetrics() ProgressMetricsResponseOutput {
	return o.ApplyT(func(v LabelingJobResponse) ProgressMetricsResponse { return v.ProgressMetrics }).(ProgressMetricsResponseOutput)
}

// Internal id of the job(Previously called project).
func (o LabelingJobResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o LabelingJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the labeling job provisioning state.
func (o LabelingJobResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o LabelingJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Status messages of the job.
func (o LabelingJobResponseOutput) StatusMessages() StatusMessageResponseArrayOutput {
	return o.ApplyT(func(v LabelingJobResponse) []StatusMessageResponse { return v.StatusMessages }).(StatusMessageResponseArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextProperties struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextProperties
func (val *LabelingJobTextProperties) Defaults() *LabelingJobTextProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesResponse struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextPropertiesResponse
func (val *LabelingJobTextPropertiesResponse) Defaults() *LabelingJobTextPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Info about origin if it is linked.
type LinkedInfoResponse struct {
	// LinkedId id.
	LinkedId *string `pulumi:"linkedId"`
	// Linked resource name.
	LinkedResourceName *string `pulumi:"linkedResourceName"`
	// Datastore origin
	Origin *string `pulumi:"origin"`
}

// Info about origin if it is linked.
type LinkedInfoResponseOutput struct{ *pulumi.OutputState }

func (LinkedInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInfoResponse)(nil)).Elem()
}

func (o LinkedInfoResponseOutput) ToLinkedInfoResponseOutput() LinkedInfoResponseOutput {
	return o
}

func (o LinkedInfoResponseOutput) ToLinkedInfoResponseOutputWithContext(ctx context.Context) LinkedInfoResponseOutput {
	return o
}

// LinkedId id.
func (o LinkedInfoResponseOutput) LinkedId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.LinkedId }).(pulumi.StringPtrOutput)
}

// Linked resource name.
func (o LinkedInfoResponseOutput) LinkedResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.LinkedResourceName }).(pulumi.StringPtrOutput)
}

// Datastore origin
func (o LinkedInfoResponseOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

type LinkedInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInfoResponse)(nil)).Elem()
}

func (o LinkedInfoResponsePtrOutput) ToLinkedInfoResponsePtrOutput() LinkedInfoResponsePtrOutput {
	return o
}

func (o LinkedInfoResponsePtrOutput) ToLinkedInfoResponsePtrOutputWithContext(ctx context.Context) LinkedInfoResponsePtrOutput {
	return o
}

func (o LinkedInfoResponsePtrOutput) Elem() LinkedInfoResponseOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) LinkedInfoResponse {
		if v != nil {
			return *v
		}
		var ret LinkedInfoResponse
		return ret
	}).(LinkedInfoResponseOutput)
}

// LinkedId id.
func (o LinkedInfoResponsePtrOutput) LinkedId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.LinkedId
	}).(pulumi.StringPtrOutput)
}

// Linked resource name.
func (o LinkedInfoResponsePtrOutput) LinkedResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.LinkedResourceName
	}).(pulumi.StringPtrOutput)
}

// Datastore origin
func (o LinkedInfoResponsePtrOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Origin
	}).(pulumi.StringPtrOutput)
}

// LinkedService specific properties.
type LinkedServiceProps struct {
	// The creation time of the linked service.
	CreatedTime *string `pulumi:"createdTime"`
	// Type of the link target.
	LinkType *LinkedServiceLinkType `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId string `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime *string `pulumi:"modifiedTime"`
}

// LinkedServicePropsInput is an input type that accepts LinkedServicePropsArgs and LinkedServicePropsOutput values.
// You can construct a concrete instance of `LinkedServicePropsInput` via:
//
//	LinkedServicePropsArgs{...}
type LinkedServicePropsInput interface {
	pulumi.Input

	ToLinkedServicePropsOutput() LinkedServicePropsOutput
	ToLinkedServicePropsOutputWithContext(context.Context) LinkedServicePropsOutput
}

// LinkedService specific properties.
type LinkedServicePropsArgs struct {
	// The creation time of the linked service.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// Type of the link target.
	LinkType LinkedServiceLinkTypePtrInput `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId pulumi.StringInput `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime pulumi.StringPtrInput `pulumi:"modifiedTime"`
}

func (LinkedServicePropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceProps)(nil)).Elem()
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsOutput() LinkedServicePropsOutput {
	return i.ToLinkedServicePropsOutputWithContext(context.Background())
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsOutputWithContext(ctx context.Context) LinkedServicePropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsOutput)
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return i.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsOutput).ToLinkedServicePropsPtrOutputWithContext(ctx)
}

// LinkedServicePropsPtrInput is an input type that accepts LinkedServicePropsArgs, LinkedServicePropsPtr and LinkedServicePropsPtrOutput values.
// You can construct a concrete instance of `LinkedServicePropsPtrInput` via:
//
//	        LinkedServicePropsArgs{...}
//
//	or:
//
//	        nil
type LinkedServicePropsPtrInput interface {
	pulumi.Input

	ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput
	ToLinkedServicePropsPtrOutputWithContext(context.Context) LinkedServicePropsPtrOutput
}

type linkedServicePropsPtrType LinkedServicePropsArgs

func LinkedServicePropsPtr(v *LinkedServicePropsArgs) LinkedServicePropsPtrInput {
	return (*linkedServicePropsPtrType)(v)
}

func (*linkedServicePropsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceProps)(nil)).Elem()
}

func (i *linkedServicePropsPtrType) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return i.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (i *linkedServicePropsPtrType) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsPtrOutput)
}

// LinkedService specific properties.
type LinkedServicePropsOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceProps)(nil)).Elem()
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsOutput() LinkedServicePropsOutput {
	return o
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsOutputWithContext(ctx context.Context) LinkedServicePropsOutput {
	return o
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return o.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedServiceProps) *LinkedServiceProps {
		return &v
	}).(LinkedServicePropsPtrOutput)
}

// The creation time of the linked service.
func (o LinkedServicePropsOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsOutput) LinkType() LinkedServiceLinkTypePtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *LinkedServiceLinkType { return v.LinkType }).(LinkedServiceLinkTypePtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsOutput) LinkedServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceProps) string { return v.LinkedServiceResourceId }).(pulumi.StringOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *string { return v.ModifiedTime }).(pulumi.StringPtrOutput)
}

type LinkedServicePropsPtrOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceProps)(nil)).Elem()
}

func (o LinkedServicePropsPtrOutput) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return o
}

func (o LinkedServicePropsPtrOutput) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return o
}

func (o LinkedServicePropsPtrOutput) Elem() LinkedServicePropsOutput {
	return o.ApplyT(func(v *LinkedServiceProps) LinkedServiceProps {
		if v != nil {
			return *v
		}
		var ret LinkedServiceProps
		return ret
	}).(LinkedServicePropsOutput)
}

// The creation time of the linked service.
func (o LinkedServicePropsPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsPtrOutput) LinkType() LinkedServiceLinkTypePtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *LinkedServiceLinkType {
		if v == nil {
			return nil
		}
		return v.LinkType
	}).(LinkedServiceLinkTypePtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsPtrOutput) LinkedServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceResourceId
	}).(pulumi.StringPtrOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsPtrOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return v.ModifiedTime
	}).(pulumi.StringPtrOutput)
}

// LinkedService specific properties.
type LinkedServicePropsResponse struct {
	// The creation time of the linked service.
	CreatedTime *string `pulumi:"createdTime"`
	// Type of the link target.
	LinkType *string `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId string `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime *string `pulumi:"modifiedTime"`
}

// LinkedService specific properties.
type LinkedServicePropsResponseOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServicePropsResponse)(nil)).Elem()
}

func (o LinkedServicePropsResponseOutput) ToLinkedServicePropsResponseOutput() LinkedServicePropsResponseOutput {
	return o
}

func (o LinkedServicePropsResponseOutput) ToLinkedServicePropsResponseOutputWithContext(ctx context.Context) LinkedServicePropsResponseOutput {
	return o
}

// The creation time of the linked service.
func (o LinkedServicePropsResponseOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsResponseOutput) LinkedServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) string { return v.LinkedServiceResourceId }).(pulumi.StringOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsResponseOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.ModifiedTime }).(pulumi.StringPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspaceProps struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId *string `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// LinkedWorkspacePropsInput is an input type that accepts LinkedWorkspacePropsArgs and LinkedWorkspacePropsOutput values.
// You can construct a concrete instance of `LinkedWorkspacePropsInput` via:
//
//	LinkedWorkspacePropsArgs{...}
type LinkedWorkspacePropsInput interface {
	pulumi.Input

	ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput
	ToLinkedWorkspacePropsOutputWithContext(context.Context) LinkedWorkspacePropsOutput
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsArgs struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId pulumi.StringPtrInput `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId pulumi.StringPtrInput `pulumi:"userAssignedIdentityResourceId"`
}

func (LinkedWorkspacePropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspaceProps)(nil)).Elem()
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput {
	return i.ToLinkedWorkspacePropsOutputWithContext(context.Background())
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsOutputWithContext(ctx context.Context) LinkedWorkspacePropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsOutput)
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return i.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsOutput).ToLinkedWorkspacePropsPtrOutputWithContext(ctx)
}

// LinkedWorkspacePropsPtrInput is an input type that accepts LinkedWorkspacePropsArgs, LinkedWorkspacePropsPtr and LinkedWorkspacePropsPtrOutput values.
// You can construct a concrete instance of `LinkedWorkspacePropsPtrInput` via:
//
//	        LinkedWorkspacePropsArgs{...}
//
//	or:
//
//	        nil
type LinkedWorkspacePropsPtrInput interface {
	pulumi.Input

	ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput
	ToLinkedWorkspacePropsPtrOutputWithContext(context.Context) LinkedWorkspacePropsPtrOutput
}

type linkedWorkspacePropsPtrType LinkedWorkspacePropsArgs

func LinkedWorkspacePropsPtr(v *LinkedWorkspacePropsArgs) LinkedWorkspacePropsPtrInput {
	return (*linkedWorkspacePropsPtrType)(v)
}

func (*linkedWorkspacePropsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedWorkspaceProps)(nil)).Elem()
}

func (i *linkedWorkspacePropsPtrType) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return i.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (i *linkedWorkspacePropsPtrType) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspaceProps)(nil)).Elem()
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput {
	return o
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsOutputWithContext(ctx context.Context) LinkedWorkspacePropsOutput {
	return o
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return o.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedWorkspaceProps) *LinkedWorkspaceProps {
		return &v
	}).(LinkedWorkspacePropsPtrOutput)
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspaceProps) *string { return v.LinkedWorkspaceResourceId }).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspaceProps) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type LinkedWorkspacePropsPtrOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedWorkspaceProps)(nil)).Elem()
}

func (o LinkedWorkspacePropsPtrOutput) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return o
}

func (o LinkedWorkspacePropsPtrOutput) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return o
}

func (o LinkedWorkspacePropsPtrOutput) Elem() LinkedWorkspacePropsOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) LinkedWorkspaceProps {
		if v != nil {
			return *v
		}
		var ret LinkedWorkspaceProps
		return ret
	}).(LinkedWorkspacePropsOutput)
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsPtrOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) *string {
		if v == nil {
			return nil
		}
		return v.LinkedWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsPtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsResponse struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId *string `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsResponseOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspacePropsResponse)(nil)).Elem()
}

func (o LinkedWorkspacePropsResponseOutput) ToLinkedWorkspacePropsResponseOutput() LinkedWorkspacePropsResponseOutput {
	return o
}

func (o LinkedWorkspacePropsResponseOutput) ToLinkedWorkspacePropsResponseOutputWithContext(ctx context.Context) LinkedWorkspacePropsResponseOutput {
	return o
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsResponseOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspacePropsResponse) *string { return v.LinkedWorkspaceResourceId }).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsResponseOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspacePropsResponse) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type ListNotebookKeysResultResponse struct {
	PrimaryAccessKey   string `pulumi:"primaryAccessKey"`
	SecondaryAccessKey string `pulumi:"secondaryAccessKey"`
}

type ListNotebookKeysResultResponseOutput struct{ *pulumi.OutputState }

func (ListNotebookKeysResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListNotebookKeysResultResponse)(nil)).Elem()
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutput() ListNotebookKeysResultResponseOutput {
	return o
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutputWithContext(ctx context.Context) ListNotebookKeysResultResponseOutput {
	return o
}

func (o ListNotebookKeysResultResponseOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

func (o ListNotebookKeysResultResponseOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

// Literal input type.
type LiteralJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// Literal input type.
type LiteralJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabled struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledResponse struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabled struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledResponse struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

type MLFlowModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInput
func (val *MLFlowModelJobInput) Defaults() *MLFlowModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputResponse
func (val *MLFlowModelJobInputResponse) Defaults() *MLFlowModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutput
func (val *MLFlowModelJobOutput) Defaults() *MLFlowModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputResponse
func (val *MLFlowModelJobOutputResponse) Defaults() *MLFlowModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTable data definition
type MLTableData struct {
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableData
func (val *MLTableData) Defaults() *MLTableData {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTable data definition
type MLTableDataResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataResponse
func (val *MLTableDataResponse) Defaults() *MLTableDataResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type MLTableJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInput
func (val *MLTableJobInput) Defaults() *MLTableJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputResponse
func (val *MLTableJobInputResponse) Defaults() *MLTableJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutput
func (val *MLTableJobOutput) Defaults() *MLTableJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputResponse
func (val *MLTableJobOutputResponse) Defaults() *MLTableJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Managed identity configuration.
type ManagedIdentity struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

type ManagedIdentityAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                             `pulumi:"category"`
	Credentials *WorkspaceConnectionManagedIdentity `pulumi:"credentials"`
	Target      *string                             `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                     `pulumi:"category"`
	Credentials *WorkspaceConnectionManagedIdentityResponse `pulumi:"credentials"`
	ExpiryTime  *string                                     `pulumi:"expiryTime"`
	Metadata    interface{}                                 `pulumi:"metadata"`
	Target      *string                                     `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// Managed identity configuration.
type ManagedIdentityResponse struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeployment
func (val *ManagedOnlineDeployment) Defaults() *ManagedOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentResponse
func (val *ManagedOnlineDeploymentResponse) Defaults() *ManagedOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Dto object representing compute resource
type MaterializationComputeResource struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// MaterializationComputeResourceInput is an input type that accepts MaterializationComputeResourceArgs and MaterializationComputeResourceOutput values.
// You can construct a concrete instance of `MaterializationComputeResourceInput` via:
//
//	MaterializationComputeResourceArgs{...}
type MaterializationComputeResourceInput interface {
	pulumi.Input

	ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput
	ToMaterializationComputeResourceOutputWithContext(context.Context) MaterializationComputeResourceOutput
}

// Dto object representing compute resource
type MaterializationComputeResourceArgs struct {
	// Specifies the instance type
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
}

func (MaterializationComputeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return i.ToMaterializationComputeResourceOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput)
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput).ToMaterializationComputeResourcePtrOutputWithContext(ctx)
}

// MaterializationComputeResourcePtrInput is an input type that accepts MaterializationComputeResourceArgs, MaterializationComputeResourcePtr and MaterializationComputeResourcePtrOutput values.
// You can construct a concrete instance of `MaterializationComputeResourcePtrInput` via:
//
//	        MaterializationComputeResourceArgs{...}
//
//	or:
//
//	        nil
type MaterializationComputeResourcePtrInput interface {
	pulumi.Input

	ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput
	ToMaterializationComputeResourcePtrOutputWithContext(context.Context) MaterializationComputeResourcePtrOutput
}

type materializationComputeResourcePtrType MaterializationComputeResourceArgs

func MaterializationComputeResourcePtr(v *MaterializationComputeResourceArgs) MaterializationComputeResourcePtrInput {
	return (*materializationComputeResourcePtrType)(v)
}

func (*materializationComputeResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourcePtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationComputeResource) *MaterializationComputeResource {
		return &v
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResource) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourcePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) Elem() MaterializationComputeResourceOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) MaterializationComputeResource {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResource
		return ret
	}).(MaterializationComputeResourceOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourcePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceResponse struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// Dto object representing compute resource
type MaterializationComputeResourceResponseOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutput() MaterializationComputeResourceResponseOutput {
	return o
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutputWithContext(ctx context.Context) MaterializationComputeResourceResponseOutput {
	return o
}

// Specifies the instance type
func (o MaterializationComputeResourceResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResourceResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutput() MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutputWithContext(ctx context.Context) MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) Elem() MaterializationComputeResourceResponseOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) MaterializationComputeResourceResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResourceResponse
		return ret
	}).(MaterializationComputeResourceResponseOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettings struct {
	// Specifies the notification details
	Notification *NotificationSetting `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResource `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTrigger `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettings
func (val *MaterializationSettings) Defaults() *MaterializationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

// MaterializationSettingsInput is an input type that accepts MaterializationSettingsArgs and MaterializationSettingsOutput values.
// You can construct a concrete instance of `MaterializationSettingsInput` via:
//
//	MaterializationSettingsArgs{...}
type MaterializationSettingsInput interface {
	pulumi.Input

	ToMaterializationSettingsOutput() MaterializationSettingsOutput
	ToMaterializationSettingsOutputWithContext(context.Context) MaterializationSettingsOutput
}

type MaterializationSettingsArgs struct {
	// Specifies the notification details
	Notification NotificationSettingPtrInput `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource MaterializationComputeResourcePtrInput `pulumi:"resource"`
	// Specifies the schedule details
	Schedule RecurrenceTriggerPtrInput `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration pulumi.StringMapInput `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType pulumi.StringPtrInput `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsArgs
func (val *MaterializationSettingsArgs) Defaults() *MaterializationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.StoreType == nil {
		tmp.StoreType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (MaterializationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return i.ToMaterializationSettingsOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput)
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput).ToMaterializationSettingsPtrOutputWithContext(ctx)
}

// MaterializationSettingsPtrInput is an input type that accepts MaterializationSettingsArgs, MaterializationSettingsPtr and MaterializationSettingsPtrOutput values.
// You can construct a concrete instance of `MaterializationSettingsPtrInput` via:
//
//	        MaterializationSettingsArgs{...}
//
//	or:
//
//	        nil
type MaterializationSettingsPtrInput interface {
	pulumi.Input

	ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput
	ToMaterializationSettingsPtrOutputWithContext(context.Context) MaterializationSettingsPtrOutput
}

type materializationSettingsPtrType MaterializationSettingsArgs

func MaterializationSettingsPtr(v *MaterializationSettingsArgs) MaterializationSettingsPtrInput {
	return (*materializationSettingsPtrType)(v)
}

func (*materializationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsPtrOutput)
}

type MaterializationSettingsOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationSettings) *MaterializationSettings {
		return &v
	}).(MaterializationSettingsPtrOutput)
}

// Specifies the notification details
func (o MaterializationSettingsOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *NotificationSetting { return v.Notification }).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *MaterializationComputeResource { return v.Resource }).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *RecurrenceTrigger { return v.Schedule }).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettings) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) Elem() MaterializationSettingsOutput {
	return o.ApplyT(func(v *MaterializationSettings) MaterializationSettings {
		if v != nil {
			return *v
		}
		var ret MaterializationSettings
		return ret
	}).(MaterializationSettingsOutput)
}

// Specifies the notification details
func (o MaterializationSettingsPtrOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *NotificationSetting {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsPtrOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *MaterializationComputeResource {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsPtrOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *RecurrenceTrigger {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsPtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsPtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponse struct {
	// Specifies the notification details
	Notification *NotificationSettingResponse `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResourceResponse `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTriggerResponse `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsResponse
func (val *MaterializationSettingsResponse) Defaults() *MaterializationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

type MaterializationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutput() MaterializationSettingsResponseOutput {
	return o
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutputWithContext(ctx context.Context) MaterializationSettingsResponseOutput {
	return o
}

// Specifies the notification details
func (o MaterializationSettingsResponseOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *NotificationSettingResponse { return v.Notification }).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponseOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *MaterializationComputeResourceResponse { return v.Resource }).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponseOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *RecurrenceTriggerResponse { return v.Schedule }).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponseOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponseOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutput() MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutputWithContext(ctx context.Context) MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) Elem() MaterializationSettingsResponseOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) MaterializationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationSettingsResponse
		return ret
	}).(MaterializationSettingsResponseOutput)
}

// Specifies the notification details
func (o MaterializationSettingsResponsePtrOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *NotificationSettingResponse {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponsePtrOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *MaterializationComputeResourceResponse {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponsePtrOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *RecurrenceTriggerResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponsePtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponsePtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicy
func (val *MedianStoppingPolicy) Defaults() *MedianStoppingPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyResponse
func (val *MedianStoppingPolicyResponse) Defaults() *MedianStoppingPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

type ModelContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerType
func (val *ModelContainerType) Defaults() *ModelContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelContainerTypeInput is an input type that accepts ModelContainerTypeArgs and ModelContainerTypeOutput values.
// You can construct a concrete instance of `ModelContainerTypeInput` via:
//
//	ModelContainerTypeArgs{...}
type ModelContainerTypeInput interface {
	pulumi.Input

	ToModelContainerTypeOutput() ModelContainerTypeOutput
	ToModelContainerTypeOutputWithContext(context.Context) ModelContainerTypeOutput
}

type ModelContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerTypeArgs
func (val *ModelContainerTypeArgs) Defaults() *ModelContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return i.ToModelContainerTypeOutputWithContext(context.Background())
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerTypeOutput)
}

type ModelContainerTypeOutput struct{ *pulumi.OutputState }

func (ModelContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return o
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return o
}

// The asset description text.
func (o ModelContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ModelContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ModelContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerResponse
func (val *ModelContainerResponse) Defaults() *ModelContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type ModelContainerResponseOutput struct{ *pulumi.OutputState }

func (ModelContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerResponse)(nil)).Elem()
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutput() ModelContainerResponseOutput {
	return o
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutputWithContext(ctx context.Context) ModelContainerResponseOutput {
	return o
}

// The asset description text.
func (o ModelContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ModelContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ModelContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ModelContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model container.
func (o ModelContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorData `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionType
func (val *ModelVersionType) Defaults() *ModelVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelVersionTypeInput is an input type that accepts ModelVersionTypeArgs and ModelVersionTypeOutput values.
// You can construct a concrete instance of `ModelVersionTypeInput` via:
//
//	ModelVersionTypeArgs{...}
type ModelVersionTypeInput interface {
	pulumi.Input

	ToModelVersionTypeOutput() ModelVersionTypeOutput
	ToModelVersionTypeOutputWithContext(context.Context) ModelVersionTypeOutput
}

// Model asset version details.
type ModelVersionTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors FlavorDataMapInput `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri pulumi.StringPtrInput `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionTypeArgs
func (val *ModelVersionTypeArgs) Defaults() *ModelVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return i.ToModelVersionTypeOutputWithContext(context.Background())
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelVersionTypeOutput)
}

// Model asset version details.
type ModelVersionTypeOutput struct{ *pulumi.OutputState }

func (ModelVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return o
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return o
}

// The asset description text.
func (o ModelVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionTypeOutput) Flavors() FlavorDataMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]FlavorData { return v.Flavors }).(FlavorDataMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionTypeOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionTypeOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionTypeOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorDataResponse `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionResponse
func (val *ModelVersionResponse) Defaults() *ModelVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Model asset version details.
type ModelVersionResponseOutput struct{ *pulumi.OutputState }

func (ModelVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionResponse)(nil)).Elem()
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutput() ModelVersionResponseOutput {
	return o
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutputWithContext(ctx context.Context) ModelVersionResponseOutput {
	return o
}

// The asset description text.
func (o ModelVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionResponseOutput) Flavors() FlavorDataResponseMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]FlavorDataResponse { return v.Flavors }).(FlavorDataResponseMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionResponseOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionResponseOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionResponseOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model version.
func (o ModelVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MPI distribution configuration.
type Mpi struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MPI distribution configuration.
type MpiResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

type NlpVerticalFeaturizationSettings struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

type NlpVerticalFeaturizationSettingsResponse struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

// Job execution constraints.
type NlpVerticalLimitSettings struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettings
func (val *NlpVerticalLimitSettings) Defaults() *NlpVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponse struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsResponse
func (val *NlpVerticalLimitSettingsResponse) Defaults() *NlpVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Counts of various compute node states on the amlCompute.
type NodeStateCountsResponse struct {
	// Number of compute nodes in idle state.
	IdleNodeCount int `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the amlCompute.
	LeavingNodeCount int `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are in preempted state.
	PreemptedNodeCount int `pulumi:"preemptedNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount int `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount int `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount int `pulumi:"unusableNodeCount"`
}

type NoneAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	Target   *string `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type NoneAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category   *string     `pulumi:"category"`
	ExpiryTime *string     `pulumi:"expiryTime"`
	Metadata   interface{} `pulumi:"metadata"`
	Target     *string     `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// Empty/none datastore credentials.
type NoneDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

type NotebookPreparationErrorResponse struct {
	ErrorMessage *string `pulumi:"errorMessage"`
	StatusCode   *int    `pulumi:"statusCode"`
}

type NotebookPreparationErrorResponseOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutput() NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutputWithContext(ctx context.Context) NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponseOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type NotebookPreparationErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutput() NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutputWithContext(ctx context.Context) NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) Elem() NotebookPreparationErrorResponseOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) NotebookPreparationErrorResponse {
		if v != nil {
			return *v
		}
		var ret NotebookPreparationErrorResponse
		return ret
	}).(NotebookPreparationErrorResponseOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *int {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type NotebookResourceInfoResponse struct {
	Fqdn *string `pulumi:"fqdn"`
	// The error that occurs when preparing notebook.
	NotebookPreparationError *NotebookPreparationErrorResponse `pulumi:"notebookPreparationError"`
	// the data plane resourceId that used to initialize notebook component
	ResourceId *string `pulumi:"resourceId"`
}

type NotebookResourceInfoResponseOutput struct{ *pulumi.OutputState }

func (NotebookResourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookResourceInfoResponse)(nil)).Elem()
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutput() NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutputWithContext(ctx context.Context) NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// The error that occurs when preparing notebook.
func (o NotebookResourceInfoResponseOutput) NotebookPreparationError() NotebookPreparationErrorResponsePtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *NotebookPreparationErrorResponse {
		return v.NotebookPreparationError
	}).(NotebookPreparationErrorResponsePtrOutput)
}

// the data plane resourceId that used to initialize notebook component
func (o NotebookResourceInfoResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Configuration for notification.
type NotificationSetting struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhook `pulumi:"webhooks"`
}

// NotificationSettingInput is an input type that accepts NotificationSettingArgs and NotificationSettingOutput values.
// You can construct a concrete instance of `NotificationSettingInput` via:
//
//	NotificationSettingArgs{...}
type NotificationSettingInput interface {
	pulumi.Input

	ToNotificationSettingOutput() NotificationSettingOutput
	ToNotificationSettingOutputWithContext(context.Context) NotificationSettingOutput
}

// Configuration for notification.
type NotificationSettingArgs struct {
	// Send email notification to user on specified notification type
	EmailOn pulumi.StringArrayInput `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks AzureDevOpsWebhookMapInput `pulumi:"webhooks"`
}

func (NotificationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (i NotificationSettingArgs) ToNotificationSettingOutput() NotificationSettingOutput {
	return i.ToNotificationSettingOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput)
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput).ToNotificationSettingPtrOutputWithContext(ctx)
}

// NotificationSettingPtrInput is an input type that accepts NotificationSettingArgs, NotificationSettingPtr and NotificationSettingPtrOutput values.
// You can construct a concrete instance of `NotificationSettingPtrInput` via:
//
//	        NotificationSettingArgs{...}
//
//	or:
//
//	        nil
type NotificationSettingPtrInput interface {
	pulumi.Input

	ToNotificationSettingPtrOutput() NotificationSettingPtrOutput
	ToNotificationSettingPtrOutputWithContext(context.Context) NotificationSettingPtrOutput
}

type notificationSettingPtrType NotificationSettingArgs

func NotificationSettingPtr(v *NotificationSettingArgs) NotificationSettingPtrInput {
	return (*notificationSettingPtrType)(v)
}

func (*notificationSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingPtrOutput)
}

// Configuration for notification.
type NotificationSettingOutput struct{ *pulumi.OutputState }

func (NotificationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingOutput) ToNotificationSettingOutput() NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationSetting) *NotificationSetting {
		return &v
	}).(NotificationSettingPtrOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v NotificationSetting) map[string]AzureDevOpsWebhook { return v.Webhooks }).(AzureDevOpsWebhookMapOutput)
}

type NotificationSettingPtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) Elem() NotificationSettingOutput {
	return o.ApplyT(func(v *NotificationSetting) NotificationSetting {
		if v != nil {
			return *v
		}
		var ret NotificationSetting
		return ret
	}).(NotificationSettingOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingPtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingPtrOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v *NotificationSetting) map[string]AzureDevOpsWebhook {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookMapOutput)
}

// Configuration for notification.
type NotificationSettingResponse struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhookResponse `pulumi:"webhooks"`
}

// Configuration for notification.
type NotificationSettingResponseOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutput() NotificationSettingResponseOutput {
	return o
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutputWithContext(ctx context.Context) NotificationSettingResponseOutput {
	return o
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponseOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponseOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponseOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse { return v.Webhooks }).(AzureDevOpsWebhookResponseMapOutput)
}

type NotificationSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutput() NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutputWithContext(ctx context.Context) NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) Elem() NotificationSettingResponseOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) NotificationSettingResponse {
		if v != nil {
			return *v
		}
		var ret NotificationSettingResponse
		return ret
	}).(NotificationSettingResponseOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponsePtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponsePtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponsePtrOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookResponseMapOutput)
}

// Optimization objective.
type Objective struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// Optimization objective.
type ObjectiveResponse struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// Online endpoint configuration
type OnlineEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointType
func (val *OnlineEndpointType) Defaults() *OnlineEndpointType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// OnlineEndpointTypeInput is an input type that accepts OnlineEndpointTypeArgs and OnlineEndpointTypeOutput values.
// You can construct a concrete instance of `OnlineEndpointTypeInput` via:
//
//	OnlineEndpointTypeArgs{...}
type OnlineEndpointTypeInput interface {
	pulumi.Input

	ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput
	ToOnlineEndpointTypeOutputWithContext(context.Context) OnlineEndpointTypeOutput
}

// Online endpoint configuration
type OnlineEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic pulumi.IntMapInput `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic pulumi.IntMapInput `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointTypeArgs
func (val *OnlineEndpointTypeArgs) Defaults() *OnlineEndpointTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		tmp.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (OnlineEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return i.ToOnlineEndpointTypeOutputWithContext(context.Background())
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineEndpointTypeOutput)
}

// Online endpoint configuration
type OnlineEndpointTypeOutput struct{ *pulumi.OutputState }

func (OnlineEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return o
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o OnlineEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointTypeOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointTypeOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online endpoint configuration
type OnlineEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointResponse
func (val *OnlineEndpointResponse) Defaults() *OnlineEndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// Online endpoint configuration
type OnlineEndpointResponseOutput struct{ *pulumi.OutputState }

func (OnlineEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointResponse)(nil)).Elem()
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutput() OnlineEndpointResponseOutput {
	return o
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutputWithContext(ctx context.Context) OnlineEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointResponseOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o OnlineEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Endpoint URI.
func (o OnlineEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o OnlineEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointResponseOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettings struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettings
func (val *OnlineRequestSettings) Defaults() *OnlineRequestSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsResponse
func (val *OnlineRequestSettingsResponse) Defaults() *OnlineRequestSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReference struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponse struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

type PATAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                 `pulumi:"category"`
	Credentials *WorkspaceConnectionPersonalAccessToken `pulumi:"credentials"`
	Target      *string                                 `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type PATAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                         `pulumi:"category"`
	Credentials *WorkspaceConnectionPersonalAccessTokenResponse `pulumi:"credentials"`
	ExpiryTime  *string                                         `pulumi:"expiryTime"`
	Metadata    interface{}                                     `pulumi:"metadata"`
	Target      *string                                         `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type PasswordResponse struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

type PasswordResponseOutput struct{ *pulumi.OutputState }

func (PasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseOutput) ToPasswordResponseOutput() PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) ToPasswordResponseOutputWithContext(ctx context.Context) PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o PasswordResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PasswordResponseArrayOutput struct{ *pulumi.OutputState }

func (PasswordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutput() PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutputWithContext(ctx context.Context) PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) Index(i pulumi.IntInput) PasswordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PasswordResponse {
		return vs[0].([]PasswordResponse)[vs[1].(int)]
	}).(PasswordResponseOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettings struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUser `pulumi:"assignedUser"`
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponse struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUserResponse `pulumi:"assignedUser"`
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJob
func (val *PipelineJob) Defaults() *PipelineJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobResponse
func (val *PipelineJobResponse) Defaults() *PipelineJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The identity of the resource.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The sku of the workspace.
	Sku *SkuResponse `pulumi:"sku"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Contains resource tags defined as key/value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The identity of the resource.
func (o PrivateEndpointConnectionResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// Specifies the location of the resource.
func (o PrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The sku of the workspace.
func (o PrivateEndpointConnectionResponseOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Contains resource tags defined as key/value pairs.
func (o PrivateEndpointConnectionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestination struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationResponse struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestination `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestinationResponse `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResource struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// PrivateEndpointResourceInput is an input type that accepts PrivateEndpointResourceArgs and PrivateEndpointResourceOutput values.
// You can construct a concrete instance of `PrivateEndpointResourceInput` via:
//
//	PrivateEndpointResourceArgs{...}
type PrivateEndpointResourceInput interface {
	pulumi.Input

	ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput
	ToPrivateEndpointResourceOutputWithContext(context.Context) PrivateEndpointResourceOutput
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceArgs struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId pulumi.StringPtrInput `pulumi:"subnetArmId"`
}

func (PrivateEndpointResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return i.ToPrivateEndpointResourceOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput)
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput).ToPrivateEndpointResourcePtrOutputWithContext(ctx)
}

// PrivateEndpointResourcePtrInput is an input type that accepts PrivateEndpointResourceArgs, PrivateEndpointResourcePtr and PrivateEndpointResourcePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResourcePtrInput` via:
//
//	        PrivateEndpointResourceArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointResourcePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput
	ToPrivateEndpointResourcePtrOutputWithContext(context.Context) PrivateEndpointResourcePtrOutput
}

type privateEndpointResourcePtrType PrivateEndpointResourceArgs

func PrivateEndpointResourcePtr(v *PrivateEndpointResourceArgs) PrivateEndpointResourcePtrInput {
	return (*privateEndpointResourcePtrType)(v)
}

func (*privateEndpointResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourcePtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointResource) *PrivateEndpointResource {
		return &v
	}).(PrivateEndpointResourcePtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResource) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourcePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) Elem() PrivateEndpointResourceOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) PrivateEndpointResource {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResource
		return ret
	}).(PrivateEndpointResourceOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourcePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutput() PrivateEndpointResourceResponseOutput {
	return o
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutputWithContext(ctx context.Context) PrivateEndpointResourceResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponseOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutput() PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) Elem() PrivateEndpointResourceResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) PrivateEndpointResourceResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResourceResponse
		return ret
	}).(PrivateEndpointResourceResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponsePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettings struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettings
func (val *ProbeSettings) Defaults() *ProbeSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponse struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsResponse
func (val *ProbeSettingsResponse) Defaults() *ProbeSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Progress metrics definition
type ProgressMetricsResponse struct {
	// The completed datapoint count.
	CompletedDatapointCount float64 `pulumi:"completedDatapointCount"`
	// The time of last successful incremental data refresh in UTC.
	IncrementalDataLastRefreshDateTime string `pulumi:"incrementalDataLastRefreshDateTime"`
	// The skipped datapoint count.
	SkippedDatapointCount float64 `pulumi:"skippedDatapointCount"`
	// The total datapoint count.
	TotalDatapointCount float64 `pulumi:"totalDatapointCount"`
}

// Progress metrics definition
type ProgressMetricsResponseOutput struct{ *pulumi.OutputState }

func (ProgressMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressMetricsResponse)(nil)).Elem()
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutput() ProgressMetricsResponseOutput {
	return o
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutputWithContext(ctx context.Context) ProgressMetricsResponseOutput {
	return o
}

// The completed datapoint count.
func (o ProgressMetricsResponseOutput) CompletedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.CompletedDatapointCount }).(pulumi.Float64Output)
}

// The time of last successful incremental data refresh in UTC.
func (o ProgressMetricsResponseOutput) IncrementalDataLastRefreshDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ProgressMetricsResponse) string { return v.IncrementalDataLastRefreshDateTime }).(pulumi.StringOutput)
}

// The skipped datapoint count.
func (o ProgressMetricsResponseOutput) SkippedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.SkippedDatapointCount }).(pulumi.Float64Output)
}

// The total datapoint count.
func (o ProgressMetricsResponseOutput) TotalDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.TotalDatapointCount }).(pulumi.Float64Output)
}

// PyTorch distribution configuration.
type PyTorch struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorch distribution configuration.
type PyTorchResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithm struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithm
func (val *RandomSamplingAlgorithm) Defaults() *RandomSamplingAlgorithm {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponse struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmResponse
func (val *RandomSamplingAlgorithmResponse) Defaults() *RandomSamplingAlgorithmResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type Recurrence struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Recurrence
func (val *Recurrence) Defaults() *Recurrence {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceResponse struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceResponse
func (val *RecurrenceResponse) Defaults() *RecurrenceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type RecurrenceSchedule struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//	RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

type RecurrenceScheduleArgs struct {
	// [Required] List of hours for the schedule.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//	        RecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrenceSchedule
		return ret
	}).(RecurrenceScheduleOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceSchedulePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponse struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceScheduleResponse
		return ret
	}).(RecurrenceScheduleResponseOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTrigger
func (val *RecurrenceTrigger) Defaults() *RecurrenceTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceTriggerInput is an input type that accepts RecurrenceTriggerArgs and RecurrenceTriggerOutput values.
// You can construct a concrete instance of `RecurrenceTriggerInput` via:
//
//	RecurrenceTriggerArgs{...}
type RecurrenceTriggerInput interface {
	pulumi.Input

	ToRecurrenceTriggerOutput() RecurrenceTriggerOutput
	ToRecurrenceTriggerOutputWithContext(context.Context) RecurrenceTriggerOutput
}

type RecurrenceTriggerArgs struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerArgs
func (val *RecurrenceTriggerArgs) Defaults() *RecurrenceTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return i.ToRecurrenceTriggerOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput)
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput).ToRecurrenceTriggerPtrOutputWithContext(ctx)
}

// RecurrenceTriggerPtrInput is an input type that accepts RecurrenceTriggerArgs, RecurrenceTriggerPtr and RecurrenceTriggerPtrOutput values.
// You can construct a concrete instance of `RecurrenceTriggerPtrInput` via:
//
//	        RecurrenceTriggerArgs{...}
//
//	or:
//
//	        nil
type RecurrenceTriggerPtrInput interface {
	pulumi.Input

	ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput
	ToRecurrenceTriggerPtrOutputWithContext(context.Context) RecurrenceTriggerPtrOutput
}

type recurrenceTriggerPtrType RecurrenceTriggerArgs

func RecurrenceTriggerPtr(v *RecurrenceTriggerArgs) RecurrenceTriggerPtrInput {
	return (*recurrenceTriggerPtrType)(v)
}

func (*recurrenceTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerPtrOutput)
}

type RecurrenceTriggerOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceTrigger) *RecurrenceTrigger {
		return &v
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTrigger) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerPtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) Elem() RecurrenceTriggerOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) RecurrenceTrigger {
		if v != nil {
			return *v
		}
		var ret RecurrenceTrigger
		return ret
	}).(RecurrenceTriggerOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerPtrOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *RecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerPtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerResponse
func (val *RecurrenceTriggerResponse) Defaults() *RecurrenceTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type RecurrenceTriggerResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutput() RecurrenceTriggerResponseOutput {
	return o
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutputWithContext(ctx context.Context) RecurrenceTriggerResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutput() RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutputWithContext(ctx context.Context) RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) Elem() RecurrenceTriggerResponseOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) RecurrenceTriggerResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceTriggerResponse
		return ret
	}).(RecurrenceTriggerResponseOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponsePtrOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *RecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponsePtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// Details of the Registry
type RegistryType struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceId `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections []RegistryPrivateEndpointConnection `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetails `pulumi:"regionDetails"`
}

// RegistryTypeInput is an input type that accepts RegistryTypeArgs and RegistryTypeOutput values.
// You can construct a concrete instance of `RegistryTypeInput` via:
//
//	RegistryTypeArgs{...}
type RegistryTypeInput interface {
	pulumi.Input

	ToRegistryTypeOutput() RegistryTypeOutput
	ToRegistryTypeOutputWithContext(context.Context) RegistryTypeOutput
}

// Details of the Registry
type RegistryTypeArgs struct {
	// Discovery URL for the Registry
	DiscoveryUrl pulumi.StringPtrInput `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher pulumi.StringPtrInput `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup ArmResourceIdPtrInput `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri pulumi.StringPtrInput `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections RegistryPrivateEndpointConnectionArrayInput `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails RegistryRegionArmDetailsArrayInput `pulumi:"regionDetails"`
}

func (RegistryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (i RegistryTypeArgs) ToRegistryTypeOutput() RegistryTypeOutput {
	return i.ToRegistryTypeOutputWithContext(context.Background())
}

func (i RegistryTypeArgs) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTypeOutput)
}

// Details of the Registry
type RegistryTypeOutput struct{ *pulumi.OutputState }

func (RegistryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (o RegistryTypeOutput) ToRegistryTypeOutput() RegistryTypeOutput {
	return o
}

func (o RegistryTypeOutput) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryTypeOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryTypeOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryTypeOutput) ManagedResourceGroup() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v RegistryType) *ArmResourceId { return v.ManagedResourceGroup }).(ArmResourceIdPtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryTypeOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryTypeOutput) PrivateEndpointConnections() RegistryPrivateEndpointConnectionArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryPrivateEndpointConnection { return v.PrivateEndpointConnections }).(RegistryPrivateEndpointConnectionArrayOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryTypeOutput) RegionDetails() RegistryRegionArmDetailsArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryRegionArmDetails { return v.RegionDetails }).(RegistryRegionArmDetailsArrayOutput)
}

type RegistryListCredentialsResultResponse struct {
	Location  string             `pulumi:"location"`
	Passwords []PasswordResponse `pulumi:"passwords"`
	Username  string             `pulumi:"username"`
}

type RegistryListCredentialsResultResponseOutput struct{ *pulumi.OutputState }

func (RegistryListCredentialsResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryListCredentialsResultResponse)(nil)).Elem()
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutput() RegistryListCredentialsResultResponseOutput {
	return o
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutputWithContext(ctx context.Context) RegistryListCredentialsResultResponseOutput {
	return o
}

func (o RegistryListCredentialsResultResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Location }).(pulumi.StringOutput)
}

func (o RegistryListCredentialsResultResponseOutput) Passwords() PasswordResponseArrayOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) []PasswordResponse { return v.Passwords }).(PasswordResponseArrayOutput)
}

func (o RegistryListCredentialsResultResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnection struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionProperties `pulumi:"properties"`
}

// RegistryPrivateEndpointConnectionInput is an input type that accepts RegistryPrivateEndpointConnectionArgs and RegistryPrivateEndpointConnectionOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionInput` via:
//
//	RegistryPrivateEndpointConnectionArgs{...}
type RegistryPrivateEndpointConnectionInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput
	ToRegistryPrivateEndpointConnectionOutputWithContext(context.Context) RegistryPrivateEndpointConnectionOutput
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionArgs struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Same as workspace location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties RegistryPrivateEndpointConnectionPropertiesPtrInput `pulumi:"properties"`
}

func (RegistryPrivateEndpointConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return i.ToRegistryPrivateEndpointConnectionOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionOutput)
}

// RegistryPrivateEndpointConnectionArrayInput is an input type that accepts RegistryPrivateEndpointConnectionArray and RegistryPrivateEndpointConnectionArrayOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionArrayInput` via:
//
//	RegistryPrivateEndpointConnectionArray{ RegistryPrivateEndpointConnectionArgs{...} }
type RegistryPrivateEndpointConnectionArrayInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput
	ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Context) RegistryPrivateEndpointConnectionArrayOutput
}

type RegistryPrivateEndpointConnectionArray []RegistryPrivateEndpointConnectionInput

func (RegistryPrivateEndpointConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return i.ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionArrayOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionOutput) Properties() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *RegistryPrivateEndpointConnectionProperties {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

type RegistryPrivateEndpointConnectionArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnection {
		return vs[0].([]RegistryPrivateEndpointConnection)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionProperties struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResource `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionState `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// RegistryPrivateEndpointConnectionPropertiesInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs and RegistryPrivateEndpointConnectionPropertiesOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesInput` via:
//
//	RegistryPrivateEndpointConnectionPropertiesArgs{...}
type RegistryPrivateEndpointConnectionPropertiesInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput
	ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesOutput
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesArgs struct {
	// The group ids
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint PrivateEndpointResourcePtrInput `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState RegistryPrivateLinkServiceConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (RegistryPrivateEndpointConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput).ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx)
}

// RegistryPrivateEndpointConnectionPropertiesPtrInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs, RegistryPrivateEndpointConnectionPropertiesPtr and RegistryPrivateEndpointConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesPtrInput` via:
//
//	        RegistryPrivateEndpointConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateEndpointConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput
	ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput
}

type registryPrivateEndpointConnectionPropertiesPtrType RegistryPrivateEndpointConnectionPropertiesArgs

func RegistryPrivateEndpointConnectionPropertiesPtr(v *RegistryPrivateEndpointConnectionPropertiesArgs) RegistryPrivateEndpointConnectionPropertiesPtrInput {
	return (*registryPrivateEndpointConnectionPropertiesPtrType)(v)
}

func (*registryPrivateEndpointConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateEndpointConnectionProperties {
		return &v
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource { return v.PrivateEndpoint }).(PrivateEndpointResourcePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) RegistryPrivateEndpointConnectionProperties {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionProperties
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourcePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponse struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResourceResponse `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutput() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutput() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) RegistryPrivateEndpointConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionPropertiesResponse
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesResponseOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponse struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutput() RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionResponseOutput) Properties() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *RegistryPrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput)
}

type RegistryPrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutput() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnectionResponse {
		return vs[0].([]RegistryPrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionResponseOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionState struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// RegistryPrivateLinkServiceConnectionStateInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs and RegistryPrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStateInput` via:
//
//	RegistryPrivateLinkServiceConnectionStateArgs{...}
type RegistryPrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput
	ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStateOutput
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateArgs struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (RegistryPrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput)
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput).ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// RegistryPrivateLinkServiceConnectionStatePtrInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs, RegistryPrivateLinkServiceConnectionStatePtr and RegistryPrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStatePtrInput` via:
//
//	        RegistryPrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput
	ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput
}

type registryPrivateLinkServiceConnectionStatePtrType RegistryPrivateLinkServiceConnectionStateArgs

func RegistryPrivateLinkServiceConnectionStatePtr(v *RegistryPrivateLinkServiceConnectionStateArgs) RegistryPrivateLinkServiceConnectionStatePtrInput {
	return (*registryPrivateLinkServiceConnectionStatePtrType)(v)
}

func (*registryPrivateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateLinkServiceConnectionState) *RegistryPrivateLinkServiceConnectionState {
		return &v
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) RegistryPrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionState
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponse struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutput() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutput() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) RegistryPrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionStateResponse
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateResponseOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetails struct {
	// List of ACR accounts
	AcrDetails []AcrDetails `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetails `pulumi:"storageAccountDetails"`
}

// RegistryRegionArmDetailsInput is an input type that accepts RegistryRegionArmDetailsArgs and RegistryRegionArmDetailsOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsInput` via:
//
//	RegistryRegionArmDetailsArgs{...}
type RegistryRegionArmDetailsInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput
	ToRegistryRegionArmDetailsOutputWithContext(context.Context) RegistryRegionArmDetailsOutput
}

// Details for each region the registry is in
type RegistryRegionArmDetailsArgs struct {
	// List of ACR accounts
	AcrDetails AcrDetailsArrayInput `pulumi:"acrDetails"`
	// The location where the registry exists
	Location pulumi.StringPtrInput `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails StorageAccountDetailsArrayInput `pulumi:"storageAccountDetails"`
}

func (RegistryRegionArmDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return i.ToRegistryRegionArmDetailsOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsOutput)
}

// RegistryRegionArmDetailsArrayInput is an input type that accepts RegistryRegionArmDetailsArray and RegistryRegionArmDetailsArrayOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsArrayInput` via:
//
//	RegistryRegionArmDetailsArray{ RegistryRegionArmDetailsArgs{...} }
type RegistryRegionArmDetailsArrayInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput
	ToRegistryRegionArmDetailsArrayOutputWithContext(context.Context) RegistryRegionArmDetailsArrayOutput
}

type RegistryRegionArmDetailsArray []RegistryRegionArmDetailsInput

func (RegistryRegionArmDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return i.ToRegistryRegionArmDetailsArrayOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsArrayOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return o
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsOutput) AcrDetails() AcrDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []AcrDetails { return v.AcrDetails }).(AcrDetailsArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsOutput) StorageAccountDetails() StorageAccountDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []StorageAccountDetails { return v.StorageAccountDetails }).(StorageAccountDetailsArrayOutput)
}

type RegistryRegionArmDetailsArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetails {
		return vs[0].([]RegistryRegionArmDetails)[vs[1].(int)]
	}).(RegistryRegionArmDetailsOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponse struct {
	// List of ACR accounts
	AcrDetails []AcrDetailsResponse `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetailsResponse `pulumi:"storageAccountDetails"`
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponseOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutput() RegistryRegionArmDetailsResponseOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsResponseOutput) AcrDetails() AcrDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []AcrDetailsResponse { return v.AcrDetails }).(AcrDetailsResponseArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsResponseOutput) StorageAccountDetails() StorageAccountDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []StorageAccountDetailsResponse {
		return v.StorageAccountDetails
	}).(StorageAccountDetailsResponseArrayOutput)
}

type RegistryRegionArmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutput() RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetailsResponse {
		return vs[0].([]RegistryRegionArmDetailsResponse)[vs[1].(int)]
	}).(RegistryRegionArmDetailsResponseOutput)
}

// Details of the Registry
type RegistryResponse struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceIdResponse `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections []RegistryPrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetailsResponse `pulumi:"regionDetails"`
}

// Details of the Registry
type RegistryResponseOutput struct{ *pulumi.OutputState }

func (RegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryResponse)(nil)).Elem()
}

func (o RegistryResponseOutput) ToRegistryResponseOutput() RegistryResponseOutput {
	return o
}

func (o RegistryResponseOutput) ToRegistryResponseOutputWithContext(ctx context.Context) RegistryResponseOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryResponseOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryResponseOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryResponseOutput) ManagedResourceGroup() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v RegistryResponse) *ArmResourceIdResponse { return v.ManagedResourceGroup }).(ArmResourceIdResponsePtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryResponseOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryResponseOutput) PrivateEndpointConnections() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryPrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(RegistryPrivateEndpointConnectionResponseArrayOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryResponseOutput) RegionDetails() RegistryRegionArmDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryRegionArmDetailsResponse { return v.RegionDetails }).(RegistryRegionArmDetailsResponseArrayOutput)
}

// Regression task in AutoML Table vertical.
type Regression struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Regression
func (val *Regression) Defaults() *Regression {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Regression task in AutoML Table vertical.
type RegressionResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for RegressionResponse
func (val *RegressionResponse) Defaults() *RegressionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Regression Training related configuration.
type RegressionTrainingSettings struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettings
func (val *RegressionTrainingSettings) Defaults() *RegressionTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Regression Training related configuration.
type RegressionTrainingSettingsResponse struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettingsResponse
func (val *RegressionTrainingSettingsResponse) Defaults() *RegressionTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceId struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponse struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

type Route struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

// RouteInput is an input type that accepts RouteArgs and RouteOutput values.
// You can construct a concrete instance of `RouteInput` via:
//
//	RouteArgs{...}
type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(context.Context) RouteOutput
}

type RouteArgs struct {
	// [Required] The path for the route.
	Path pulumi.StringInput `pulumi:"path"`
	// [Required] The port for the route.
	Port pulumi.IntInput `pulumi:"port"`
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i RouteArgs) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i RouteArgs) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

func (i RouteArgs) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i RouteArgs) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput).ToRoutePtrOutputWithContext(ctx)
}

// RoutePtrInput is an input type that accepts RouteArgs, RoutePtr and RoutePtrOutput values.
// You can construct a concrete instance of `RoutePtrInput` via:
//
//	        RouteArgs{...}
//
//	or:
//
//	        nil
type RoutePtrInput interface {
	pulumi.Input

	ToRoutePtrOutput() RoutePtrOutput
	ToRoutePtrOutputWithContext(context.Context) RoutePtrOutput
}

type routePtrType RouteArgs

func RoutePtr(v *RouteArgs) RoutePtrInput {
	return (*routePtrType)(v)
}

func (*routePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *routePtrType) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i *routePtrType) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePtrOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o.ToRoutePtrOutputWithContext(context.Background())
}

func (o RouteOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Route) *Route {
		return &v
	}).(RoutePtrOutput)
}

// [Required] The path for the route.
func (o RouteOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Route) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Route) int { return v.Port }).(pulumi.IntOutput)
}

type RoutePtrOutput struct{ *pulumi.OutputState }

func (RoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RoutePtrOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) Elem() RouteOutput {
	return o.ApplyT(func(v *Route) Route {
		if v != nil {
			return *v
		}
		var ret Route
		return ret
	}).(RouteOutput)
}

// [Required] The path for the route.
func (o RoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RoutePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type RouteResponse struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

type RouteResponseOutput struct{ *pulumi.OutputState }

func (RouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponse)(nil)).Elem()
}

func (o RouteResponseOutput) ToRouteResponseOutput() RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return o
}

// [Required] The path for the route.
func (o RouteResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RouteResponse) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RouteResponse) int { return v.Port }).(pulumi.IntOutput)
}

type RouteResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutput() RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutputWithContext(ctx context.Context) RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) Elem() RouteResponseOutput {
	return o.ApplyT(func(v *RouteResponse) RouteResponse {
		if v != nil {
			return *v
		}
		var ret RouteResponse
		return ret
	}).(RouteResponseOutput)
}

// [Required] The path for the route.
func (o RouteResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RouteResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type SASAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                   `pulumi:"category"`
	Credentials *WorkspaceConnectionSharedAccessSignature `pulumi:"credentials"`
	Target      *string                                   `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type SASAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                           `pulumi:"category"`
	Credentials *WorkspaceConnectionSharedAccessSignatureResponse `pulumi:"credentials"`
	ExpiryTime  *string                                           `pulumi:"expiryTime"`
	Metadata    interface{}                                       `pulumi:"metadata"`
	Target      *string                                           `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// SAS datastore credentials configuration.
type SasDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecrets `pulumi:"secrets"`
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Datastore SAS secrets.
type SasDatastoreSecrets struct {
	// Storage container SAS token.
	SasToken *string `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType string `pulumi:"secretsType"`
}

// scale settings for AML Compute
type ScaleSettings struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettings
func (val *ScaleSettings) Defaults() *ScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// scale settings for AML Compute
type ScaleSettingsResponse struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettingsResponse
func (val *ScaleSettingsResponse) Defaults() *ScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// Base definition of a schedule
type ScheduleType struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleType
func (val *ScheduleType) Defaults() *ScheduleType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// ScheduleTypeInput is an input type that accepts ScheduleTypeArgs and ScheduleTypeOutput values.
// You can construct a concrete instance of `ScheduleTypeInput` via:
//
//	ScheduleTypeArgs{...}
type ScheduleTypeInput interface {
	pulumi.Input

	ToScheduleTypeOutput() ScheduleTypeOutput
	ToScheduleTypeOutputWithContext(context.Context) ScheduleTypeOutput
}

// Base definition of a schedule
type ScheduleTypeArgs struct {
	// [Required] Specifies the action of the schedule
	Action pulumi.Input `pulumi:"action"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of schedule.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger pulumi.Input `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleTypeArgs
func (val *ScheduleTypeArgs) Defaults() *ScheduleTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		tmp.IsEnabled = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (ScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (i ScheduleTypeArgs) ToScheduleTypeOutput() ScheduleTypeOutput {
	return i.ToScheduleTypeOutputWithContext(context.Background())
}

func (i ScheduleTypeArgs) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTypeOutput)
}

// Base definition of a schedule
type ScheduleTypeOutput struct{ *pulumi.OutputState }

func (ScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (o ScheduleTypeOutput) ToScheduleTypeOutput() ScheduleTypeOutput {
	return o
}

func (o ScheduleTypeOutput) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleTypeOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleTypeOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleType) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleTypeOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

type ScheduleBase struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

type ScheduleBaseResponse struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

// Base definition of a schedule
type ScheduleResponse struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the schedule.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleResponse
func (val *ScheduleResponse) Defaults() *ScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// Base definition of a schedule
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleResponseOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the schedule.
func (o ScheduleResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleResponseOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

// Script reference
type ScriptReference struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// Script reference
type ScriptReferenceResponse struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// Customized setup scripts
type ScriptsToExecute struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReference `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReference `pulumi:"startupScript"`
}

// Customized setup scripts
type ScriptsToExecuteResponse struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReferenceResponse `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReferenceResponse `pulumi:"startupScript"`
}

// Secret Configuration definition.
type SecretConfiguration struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// SecretConfigurationInput is an input type that accepts SecretConfigurationArgs and SecretConfigurationOutput values.
// You can construct a concrete instance of `SecretConfigurationInput` via:
//
//	SecretConfigurationArgs{...}
type SecretConfigurationInput interface {
	pulumi.Input

	ToSecretConfigurationOutput() SecretConfigurationOutput
	ToSecretConfigurationOutputWithContext(context.Context) SecretConfigurationOutput
}

// Secret Configuration definition.
type SecretConfigurationArgs struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName pulumi.StringPtrInput `pulumi:"workspaceSecretName"`
}

func (SecretConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return i.ToSecretConfigurationOutputWithContext(context.Background())
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationOutput)
}

// SecretConfigurationMapInput is an input type that accepts SecretConfigurationMap and SecretConfigurationMapOutput values.
// You can construct a concrete instance of `SecretConfigurationMapInput` via:
//
//	SecretConfigurationMap{ "key": SecretConfigurationArgs{...} }
type SecretConfigurationMapInput interface {
	pulumi.Input

	ToSecretConfigurationMapOutput() SecretConfigurationMapOutput
	ToSecretConfigurationMapOutputWithContext(context.Context) SecretConfigurationMapOutput
}

type SecretConfigurationMap map[string]SecretConfigurationInput

func (SecretConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return i.ToSecretConfigurationMapOutputWithContext(context.Background())
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationMapOutput)
}

// Secret Configuration definition.
type SecretConfigurationOutput struct{ *pulumi.OutputState }

func (SecretConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return o
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfiguration {
		return vs[0].(map[string]SecretConfiguration)[vs[1].(string)]
	}).(SecretConfigurationOutput)
}

// Secret Configuration definition.
type SecretConfigurationResponse struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// Secret Configuration definition.
type SecretConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutput() SecretConfigurationResponseOutput {
	return o
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutputWithContext(ctx context.Context) SecretConfigurationResponseOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationResponseOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutput() SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutputWithContext(ctx context.Context) SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfigurationResponse {
		return vs[0].(map[string]SecretConfigurationResponse)[vs[1].(string)]
	}).(SecretConfigurationResponseOutput)
}

type ServiceManagedResourcesSettings struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb *CosmosDbSettings `pulumi:"cosmosDb"`
}

// ServiceManagedResourcesSettingsInput is an input type that accepts ServiceManagedResourcesSettingsArgs and ServiceManagedResourcesSettingsOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsInput` via:
//
//	ServiceManagedResourcesSettingsArgs{...}
type ServiceManagedResourcesSettingsInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput
	ToServiceManagedResourcesSettingsOutputWithContext(context.Context) ServiceManagedResourcesSettingsOutput
}

type ServiceManagedResourcesSettingsArgs struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb CosmosDbSettingsPtrInput `pulumi:"cosmosDb"`
}

func (ServiceManagedResourcesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return i.ToServiceManagedResourcesSettingsOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput)
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput).ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx)
}

// ServiceManagedResourcesSettingsPtrInput is an input type that accepts ServiceManagedResourcesSettingsArgs, ServiceManagedResourcesSettingsPtr and ServiceManagedResourcesSettingsPtrOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsPtrInput` via:
//
//	        ServiceManagedResourcesSettingsArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedResourcesSettingsPtrInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput
	ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Context) ServiceManagedResourcesSettingsPtrOutput
}

type serviceManagedResourcesSettingsPtrType ServiceManagedResourcesSettingsArgs

func ServiceManagedResourcesSettingsPtr(v *ServiceManagedResourcesSettingsArgs) ServiceManagedResourcesSettingsPtrInput {
	return (*serviceManagedResourcesSettingsPtrType)(v)
}

func (*serviceManagedResourcesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedResourcesSettings) *ServiceManagedResourcesSettings {
		return &v
	}).(ServiceManagedResourcesSettingsPtrOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettings) *CosmosDbSettings { return v.CosmosDb }).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) Elem() ServiceManagedResourcesSettingsOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) ServiceManagedResourcesSettings {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettings
		return ret
	}).(ServiceManagedResourcesSettingsOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsPtrOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) *CosmosDbSettings {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsResponse struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb *CosmosDbSettingsResponse `pulumi:"cosmosDb"`
}

type ServiceManagedResourcesSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutput() ServiceManagedResourcesSettingsResponseOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponseOutput {
	return o
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsResponseOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse { return v.CosmosDb }).(CosmosDbSettingsResponsePtrOutput)
}

type ServiceManagedResourcesSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutput() ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) Elem() ServiceManagedResourcesSettingsResponseOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) ServiceManagedResourcesSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettingsResponse
		return ret
	}).(ServiceManagedResourcesSettingsResponseOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsResponsePtrOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsResponsePtrOutput)
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ServicePrincipal'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                      `pulumi:"category"`
	Credentials *WorkspaceConnectionServicePrincipalResponse `pulumi:"credentials"`
	ExpiryTime  *string                                      `pulumi:"expiryTime"`
	Metadata    interface{}                                  `pulumi:"metadata"`
	Target      *string                                      `pulumi:"target"`
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecrets struct {
	// Service principal secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType string `pulumi:"secretsType"`
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestination struct {
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	ServiceTag *string `pulumi:"serviceTag"`
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationResponse struct {
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	ServiceTag *string `pulumi:"serviceTag"`
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestination `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestinationResponse `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScripts struct {
	// Customized setup scripts
	Scripts *ScriptsToExecute `pulumi:"scripts"`
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsResponse struct {
	// Customized setup scripts
	Scripts *ScriptsToExecuteResponse `pulumi:"scripts"`
}

type SharedPrivateLinkResource struct {
	// The private link resource group id.
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link.
	Name *string `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage *string `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// SharedPrivateLinkResourceInput is an input type that accepts SharedPrivateLinkResourceArgs and SharedPrivateLinkResourceOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceInput` via:
//
//	SharedPrivateLinkResourceArgs{...}
type SharedPrivateLinkResourceInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput
	ToSharedPrivateLinkResourceOutputWithContext(context.Context) SharedPrivateLinkResourceOutput
}

type SharedPrivateLinkResourceArgs struct {
	// The private link resource group id.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique name of the private link.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage pulumi.StringPtrInput `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SharedPrivateLinkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return i.ToSharedPrivateLinkResourceOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceOutput)
}

// SharedPrivateLinkResourceArrayInput is an input type that accepts SharedPrivateLinkResourceArray and SharedPrivateLinkResourceArrayOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceArrayInput` via:
//
//	SharedPrivateLinkResourceArray{ SharedPrivateLinkResourceArgs{...} }
type SharedPrivateLinkResourceArrayInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput
	ToSharedPrivateLinkResourceArrayOutputWithContext(context.Context) SharedPrivateLinkResourceArrayOutput
}

type SharedPrivateLinkResourceArray []SharedPrivateLinkResourceInput

func (SharedPrivateLinkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return i.ToSharedPrivateLinkResourceArrayOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceArrayOutput)
}

type SharedPrivateLinkResourceOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return o
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return o
}

// The private link resource group id.
func (o SharedPrivateLinkResourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link.
func (o SharedPrivateLinkResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource id that private link links to.
func (o SharedPrivateLinkResourceOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message.
func (o SharedPrivateLinkResourceOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o SharedPrivateLinkResourceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResource {
		return vs[0].([]SharedPrivateLinkResource)[vs[1].(int)]
	}).(SharedPrivateLinkResourceOutput)
}

type SharedPrivateLinkResourceResponse struct {
	// The private link resource group id.
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link.
	Name *string `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage *string `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

type SharedPrivateLinkResourceResponseOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutput() SharedPrivateLinkResourceResponseOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseOutput {
	return o
}

// The private link resource group id.
func (o SharedPrivateLinkResourceResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link.
func (o SharedPrivateLinkResourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource id that private link links to.
func (o SharedPrivateLinkResourceResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message.
func (o SharedPrivateLinkResourceResponseOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o SharedPrivateLinkResourceResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutput() SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResourceResponse {
		return vs[0].([]SharedPrivateLinkResourceResponse)[vs[1].(int)]
	}).(SharedPrivateLinkResourceResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The ssl configuration for scoring
type SslConfiguration struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// The ssl configuration for scoring
type SslConfigurationResponse struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettings struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettings
func (val *StackEnsembleSettings) Defaults() *StackEnsembleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponse struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsResponse
func (val *StackEnsembleSettingsResponse) Defaults() *StackEnsembleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// Active message associated with project
type StatusMessageResponse struct {
	// Service-defined message code.
	Code string `pulumi:"code"`
	// Time in UTC at which the message was created.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Severity level of message.
	Level string `pulumi:"level"`
	// A human-readable representation of the message code.
	Message string `pulumi:"message"`
}

// Active message associated with project
type StatusMessageResponseOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutput() StatusMessageResponseOutput {
	return o
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutputWithContext(ctx context.Context) StatusMessageResponseOutput {
	return o
}

// Service-defined message code.
func (o StatusMessageResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Time in UTC at which the message was created.
func (o StatusMessageResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Severity level of message.
func (o StatusMessageResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Level }).(pulumi.StringOutput)
}

// A human-readable representation of the message code.
func (o StatusMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutput() StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutputWithContext(ctx context.Context) StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) Index(i pulumi.IntInput) StatusMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusMessageResponse {
		return vs[0].([]StatusMessageResponse)[vs[1].(int)]
	}).(StatusMessageResponseOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetails struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccount `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccount `pulumi:"userCreatedStorageAccount"`
}

// StorageAccountDetailsInput is an input type that accepts StorageAccountDetailsArgs and StorageAccountDetailsOutput values.
// You can construct a concrete instance of `StorageAccountDetailsInput` via:
//
//	StorageAccountDetailsArgs{...}
type StorageAccountDetailsInput interface {
	pulumi.Input

	ToStorageAccountDetailsOutput() StorageAccountDetailsOutput
	ToStorageAccountDetailsOutputWithContext(context.Context) StorageAccountDetailsOutput
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsArgs struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount SystemCreatedStorageAccountPtrInput `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount UserCreatedStorageAccountPtrInput `pulumi:"userCreatedStorageAccount"`
}

func (StorageAccountDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return i.ToStorageAccountDetailsOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsOutput)
}

// StorageAccountDetailsArrayInput is an input type that accepts StorageAccountDetailsArray and StorageAccountDetailsArrayOutput values.
// You can construct a concrete instance of `StorageAccountDetailsArrayInput` via:
//
//	StorageAccountDetailsArray{ StorageAccountDetailsArgs{...} }
type StorageAccountDetailsArrayInput interface {
	pulumi.Input

	ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput
	ToStorageAccountDetailsArrayOutputWithContext(context.Context) StorageAccountDetailsArrayOutput
}

type StorageAccountDetailsArray []StorageAccountDetailsInput

func (StorageAccountDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return i.ToStorageAccountDetailsArrayOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsArrayOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return o
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *SystemCreatedStorageAccount { return v.SystemCreatedStorageAccount }).(SystemCreatedStorageAccountPtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsOutput) UserCreatedStorageAccount() UserCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *UserCreatedStorageAccount { return v.UserCreatedStorageAccount }).(UserCreatedStorageAccountPtrOutput)
}

type StorageAccountDetailsArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetails {
		return vs[0].([]StorageAccountDetails)[vs[1].(int)]
	}).(StorageAccountDetailsOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponse struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccountResponse `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccountResponse `pulumi:"userCreatedStorageAccount"`
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutput() StorageAccountDetailsResponseOutput {
	return o
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutputWithContext(ctx context.Context) StorageAccountDetailsResponseOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *SystemCreatedStorageAccountResponse {
		return v.SystemCreatedStorageAccount
	}).(SystemCreatedStorageAccountResponsePtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) UserCreatedStorageAccount() UserCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *UserCreatedStorageAccountResponse {
		return v.UserCreatedStorageAccount
	}).(UserCreatedStorageAccountResponsePtrOutput)
}

type StorageAccountDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutput() StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutputWithContext(ctx context.Context) StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetailsResponse {
		return vs[0].([]StorageAccountDetailsResponse)[vs[1].(int)]
	}).(StorageAccountDetailsResponseOutput)
}

// Sweep job definition.
type SweepJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimits `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective Objective `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponent `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJob
func (val *SweepJob) Defaults() *SweepJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// Sweep Job limit class.
type SweepJobLimits struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Sweep Job limit class.
type SweepJobLimitsResponse struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Sweep job definition.
type SweepJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimitsResponse `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective ObjectiveResponse `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentResponse `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobResponse
func (val *SweepJobResponse) Defaults() *SweepJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// A SynapseSpark compute.
type SynapseSpark struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                   `pulumi:"disableLocalAuth"`
	Properties       *SynapseSparkProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

type SynapseSparkProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPauseProperties `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScaleProperties `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

// A SynapseSpark compute.
type SynapseSparkResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                          `pulumi:"modifiedOn"`
	Properties *SynapseSparkResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

type SynapseSparkResponseProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPausePropertiesResponse `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScalePropertiesResponse `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type SystemCreatedAcrAccount struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
}

// SystemCreatedAcrAccountInput is an input type that accepts SystemCreatedAcrAccountArgs and SystemCreatedAcrAccountOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountInput` via:
//
//	SystemCreatedAcrAccountArgs{...}
type SystemCreatedAcrAccountInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput
	ToSystemCreatedAcrAccountOutputWithContext(context.Context) SystemCreatedAcrAccountOutput
}

type SystemCreatedAcrAccountArgs struct {
	// Name of the ACR account
	AcrAccountName pulumi.StringPtrInput `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku pulumi.StringPtrInput `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
}

func (SystemCreatedAcrAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return i.ToSystemCreatedAcrAccountOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput)
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput).ToSystemCreatedAcrAccountPtrOutputWithContext(ctx)
}

// SystemCreatedAcrAccountPtrInput is an input type that accepts SystemCreatedAcrAccountArgs, SystemCreatedAcrAccountPtr and SystemCreatedAcrAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountPtrInput` via:
//
//	        SystemCreatedAcrAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedAcrAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput
	ToSystemCreatedAcrAccountPtrOutputWithContext(context.Context) SystemCreatedAcrAccountPtrOutput
}

type systemCreatedAcrAccountPtrType SystemCreatedAcrAccountArgs

func SystemCreatedAcrAccountPtr(v *SystemCreatedAcrAccountArgs) SystemCreatedAcrAccountPtrInput {
	return (*systemCreatedAcrAccountPtrType)(v)
}

func (*systemCreatedAcrAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountPtrOutput)
}

type SystemCreatedAcrAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedAcrAccount) *SystemCreatedAcrAccount {
		return &v
	}).(SystemCreatedAcrAccountPtrOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) Elem() SystemCreatedAcrAccountOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) SystemCreatedAcrAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccount
		return ret
	}).(SystemCreatedAcrAccountOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountResponse struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
}

type SystemCreatedAcrAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutput() SystemCreatedAcrAccountResponseOutput {
	return o
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponseOutput {
	return o
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedAcrAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutput() SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) Elem() SystemCreatedAcrAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) SystemCreatedAcrAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccountResponse
		return ret
	}).(SystemCreatedAcrAccountResponseOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedStorageAccount struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// SystemCreatedStorageAccountInput is an input type that accepts SystemCreatedStorageAccountArgs and SystemCreatedStorageAccountOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountInput` via:
//
//	SystemCreatedStorageAccountArgs{...}
type SystemCreatedStorageAccountInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput
	ToSystemCreatedStorageAccountOutputWithContext(context.Context) SystemCreatedStorageAccountOutput
}

type SystemCreatedStorageAccountArgs struct {
	// Public blob access allowed
	AllowBlobPublicAccess pulumi.BoolPtrInput `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled pulumi.BoolPtrInput `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (SystemCreatedStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return i.ToSystemCreatedStorageAccountOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput)
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput).ToSystemCreatedStorageAccountPtrOutputWithContext(ctx)
}

// SystemCreatedStorageAccountPtrInput is an input type that accepts SystemCreatedStorageAccountArgs, SystemCreatedStorageAccountPtr and SystemCreatedStorageAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountPtrInput` via:
//
//	        SystemCreatedStorageAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedStorageAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput
	ToSystemCreatedStorageAccountPtrOutputWithContext(context.Context) SystemCreatedStorageAccountPtrOutput
}

type systemCreatedStorageAccountPtrType SystemCreatedStorageAccountArgs

func SystemCreatedStorageAccountPtr(v *SystemCreatedStorageAccountArgs) SystemCreatedStorageAccountPtrInput {
	return (*systemCreatedStorageAccountPtrType)(v)
}

func (*systemCreatedStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountPtrOutput)
}

type SystemCreatedStorageAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedStorageAccount) *SystemCreatedStorageAccount {
		return &v
	}).(SystemCreatedStorageAccountPtrOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) Elem() SystemCreatedStorageAccountOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) SystemCreatedStorageAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccount
		return ret
	}).(SystemCreatedStorageAccountOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountPtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponse struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

type SystemCreatedStorageAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutput() SystemCreatedStorageAccountResponseOutput {
	return o
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponseOutput {
	return o
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponseOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutput() SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) Elem() SystemCreatedStorageAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) SystemCreatedStorageAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccountResponse
		return ret
	}).(SystemCreatedStorageAccountResponseOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponsePtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// A system service running on a compute.
type SystemServiceResponse struct {
	// Public IP address
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// The type of this system service.
	SystemServiceType string `pulumi:"systemServiceType"`
	// The version for this type.
	Version string `pulumi:"version"`
}

// Featurization Configuration.
type TableVerticalFeaturizationSettings struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformer `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettings
func (val *TableVerticalFeaturizationSettings) Defaults() *TableVerticalFeaturizationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponse struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformerResponse `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsResponse
func (val *TableVerticalFeaturizationSettingsResponse) Defaults() *TableVerticalFeaturizationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Job execution constraints.
type TableVerticalLimitSettings struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettings
func (val *TableVerticalLimitSettings) Defaults() *TableVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// Job execution constraints.
type TableVerticalLimitSettingsResponse struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsResponse
func (val *TableVerticalLimitSettingsResponse) Defaults() *TableVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

type TargetUtilizationScaleSettings struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettings
func (val *TargetUtilizationScaleSettings) Defaults() *TargetUtilizationScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

type TargetUtilizationScaleSettingsResponse struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsResponse
func (val *TargetUtilizationScaleSettingsResponse) Defaults() *TargetUtilizationScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

// TensorFlow distribution configuration.
type TensorFlow struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlow
func (val *TensorFlow) Defaults() *TensorFlow {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlow distribution configuration.
type TensorFlowResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowResponse
func (val *TensorFlowResponse) Defaults() *TensorFlowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassification struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassification
func (val *TextClassification) Defaults() *TextClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabel struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabel
func (val *TextClassificationMultilabel) Defaults() *TextClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification-Multilabel task.
	// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelResponse
func (val *TextClassificationMultilabelResponse) Defaults() *TextClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationResponse
func (val *TextClassificationResponse) Defaults() *TextClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNer struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextNer
func (val *TextNer) Defaults() *TextNer {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-NER task.
	// Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextNerResponse
func (val *TextNerResponse) Defaults() *TextNerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Describes the tmpfs options for the container
type TmpfsOptions struct {
	// Mention the Tmpfs size
	Size *int `pulumi:"size"`
}

// Describes the tmpfs options for the container
type TmpfsOptionsResponse struct {
	// Mention the Tmpfs size
	Size *int `pulumi:"size"`
}

// Trial component definition.
type TrialComponent struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponent
func (val *TrialComponent) Defaults() *TrialComponent {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Trial component definition.
type TrialComponentResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponentResponse
func (val *TrialComponentResponse) Defaults() *TrialComponentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

type TritonModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'triton_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInput
func (val *TritonModelJobInput) Defaults() *TritonModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'triton_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInputResponse
func (val *TritonModelJobInputResponse) Defaults() *TritonModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'triton_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutput
func (val *TritonModelJobOutput) Defaults() *TritonModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'triton_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutputResponse
func (val *TritonModelJobOutputResponse) Defaults() *TritonModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicy
func (val *TruncationSelectionPolicy) Defaults() *TruncationSelectionPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicyResponse
func (val *TruncationSelectionPolicyResponse) Defaults() *TruncationSelectionPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// uri-file data version entity
type UriFileDataVersion struct {
	// Enum to determine the type of data.
	// Expected value is 'uri_file'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersion
func (val *UriFileDataVersion) Defaults() *UriFileDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-file data version entity
type UriFileDataVersionResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'uri_file'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersionResponse
func (val *UriFileDataVersionResponse) Defaults() *UriFileDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type UriFileJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_file'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInput
func (val *UriFileJobInput) Defaults() *UriFileJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_file'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInputResponse
func (val *UriFileJobInputResponse) Defaults() *UriFileJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_file'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutput
func (val *UriFileJobOutput) Defaults() *UriFileJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_file'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutputResponse
func (val *UriFileJobOutputResponse) Defaults() *UriFileJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// uri-folder data version entity
type UriFolderDataVersion struct {
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersion
func (val *UriFolderDataVersion) Defaults() *UriFolderDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-folder data version entity
type UriFolderDataVersionResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersionResponse
func (val *UriFolderDataVersionResponse) Defaults() *UriFolderDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type UriFolderJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_folder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInput
func (val *UriFolderJobInput) Defaults() *UriFolderJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_folder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInputResponse
func (val *UriFolderJobInputResponse) Defaults() *UriFolderJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_folder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutput
func (val *UriFolderJobOutput) Defaults() *UriFolderJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_folder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutputResponse
func (val *UriFolderJobOutputResponse) Defaults() *UriFolderJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}
func init() {
	pulumi.RegisterOutputType(AcrDetailsOutput{})
	pulumi.RegisterOutputType(AcrDetailsArrayOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(AllNodesOutput{})
	pulumi.RegisterOutputType(AllNodesPtrOutput{})
	pulumi.RegisterOutputType(AllNodesResponseOutput{})
	pulumi.RegisterOutputType(AllNodesResponsePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(ArmResourceIdOutput{})
	pulumi.RegisterOutputType(ArmResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingPtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponseOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDataLakeSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookMapOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseMapOutput{})
	pulumi.RegisterOutputType(AzureMySqlSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSectionResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStorageSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchDeploymentTypeOutput{})
	pulumi.RegisterOutputType(BatchDeploymentResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointTypeOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsPtrOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildContextOutput{})
	pulumi.RegisterOutputType(BuildContextPtrOutput{})
	pulumi.RegisterOutputType(BuildContextResponseOutput{})
	pulumi.RegisterOutputType(BuildContextResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ClientCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationOutput{})
	pulumi.RegisterOutputType(CodeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeContainerTypeOutput{})
	pulumi.RegisterOutputType(CodeContainerResponseOutput{})
	pulumi.RegisterOutputType(CodeVersionTypeOutput{})
	pulumi.RegisterOutputType(CodeVersionResponseOutput{})
	pulumi.RegisterOutputType(ComponentContainerTypeOutput{})
	pulumi.RegisterOutputType(ComponentContainerResponseOutput{})
	pulumi.RegisterOutputType(ComponentVersionTypeOutput{})
	pulumi.RegisterOutputType(ComponentVersionResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsPtrOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DataContainerTypeOutput{})
	pulumi.RegisterOutputType(DataContainerResponseOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestDataPathOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestParametersOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestPathOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestQueryOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestQueryPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestRegistrationOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestTimeSeriesOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestTimeSeriesPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponseDataPathOutput{})
	pulumi.RegisterOutputType(DatasetResponseDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseLatestOutput{})
	pulumi.RegisterOutputType(DatasetResponseLatestPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseSqlDataPathOutput{})
	pulumi.RegisterOutputType(DatasetResponseSqlDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseOutput{})
	pulumi.RegisterOutputType(DatasetStateResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseDeprecatedByOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseDeprecatedByPtrOutput{})
	pulumi.RegisterOutputType(DatastoreResponseOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyPtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponseOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentSpecificationVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentSpecificationVersionResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionResponseOutput{})
	pulumi.RegisterOutputType(FeatureResponseOutput{})
	pulumi.RegisterOutputType(FeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(FeatureWindowResponseOutput{})
	pulumi.RegisterOutputType(FeatureWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetJobResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetJobResponseArrayOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationPtrOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataOutput{})
	pulumi.RegisterOutputType(FlavorDataMapOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseMapOutput{})
	pulumi.RegisterOutputType(GlusterFsSectionResponseOutput{})
	pulumi.RegisterOutputType(GlusterFsSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkOutput{})
	pulumi.RegisterOutputType(IdentityForCmkPtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponseOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(IndexColumnOutput{})
	pulumi.RegisterOutputType(IndexColumnArrayOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JobServiceOutput{})
	pulumi.RegisterOutputType(JobServiceMapOutput{})
	pulumi.RegisterOutputType(JobServiceResponseOutput{})
	pulumi.RegisterOutputType(JobServiceResponseMapOutput{})
	pulumi.RegisterOutputType(LabelCategoryOutput{})
	pulumi.RegisterOutputType(LabelCategoryMapOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseMapOutput{})
	pulumi.RegisterOutputType(LabelClassOutput{})
	pulumi.RegisterOutputType(LabelClassMapOutput{})
	pulumi.RegisterOutputType(LabelClassResponseOutput{})
	pulumi.RegisterOutputType(LabelClassResponseMapOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobTypeOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobResponseOutput{})
	pulumi.RegisterOutputType(LinkedInfoResponseOutput{})
	pulumi.RegisterOutputType(LinkedInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsPtrOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsResponseOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsPtrOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsResponseOutput{})
	pulumi.RegisterOutputType(ListNotebookKeysResultResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourcePtrOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponseOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ModelContainerTypeOutput{})
	pulumi.RegisterOutputType(ModelContainerResponseOutput{})
	pulumi.RegisterOutputType(ModelVersionTypeOutput{})
	pulumi.RegisterOutputType(ModelVersionResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(NotebookResourceInfoResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingOutput{})
	pulumi.RegisterOutputType(NotificationSettingPtrOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(OnlineEndpointTypeOutput{})
	pulumi.RegisterOutputType(OnlineEndpointResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourcePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ProgressMetricsResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerPtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryTypeOutput{})
	pulumi.RegisterOutputType(RegistryListCredentialsResultResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsArrayOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryResponseOutput{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RoutePtrOutput{})
	pulumi.RegisterOutputType(RouteResponseOutput{})
	pulumi.RegisterOutputType(RouteResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleTypeOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(SecretConfigurationOutput{})
	pulumi.RegisterOutputType(SecretConfigurationMapOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceArrayOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
}
