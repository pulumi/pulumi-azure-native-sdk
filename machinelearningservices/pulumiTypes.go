// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearningservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// A Machine Learning compute based on AKS.
type AKS struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// AKS properties
	Properties *AKSSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKS
func (val *AKS) Defaults() *AKS {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AKSInput is an input type that accepts AKSArgs and AKSOutput values.
// You can construct a concrete instance of `AKSInput` via:
//
//	AKSArgs{...}
type AKSInput interface {
	pulumi.Input

	ToAKSOutput() AKSOutput
	ToAKSOutputWithContext(context.Context) AKSOutput
}

// A Machine Learning compute based on AKS.
type AKSArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// AKS properties
	Properties AKSSchemaPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKSArgs
func (val *AKSArgs) Defaults() *AKSArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AKSArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AKS)(nil)).Elem()
}

func (i AKSArgs) ToAKSOutput() AKSOutput {
	return i.ToAKSOutputWithContext(context.Background())
}

func (i AKSArgs) ToAKSOutputWithContext(ctx context.Context) AKSOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSOutput)
}

func (i AKSArgs) ToAKSPtrOutput() AKSPtrOutput {
	return i.ToAKSPtrOutputWithContext(context.Background())
}

func (i AKSArgs) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSOutput).ToAKSPtrOutputWithContext(ctx)
}

// AKSPtrInput is an input type that accepts AKSArgs, AKSPtr and AKSPtrOutput values.
// You can construct a concrete instance of `AKSPtrInput` via:
//
//	        AKSArgs{...}
//
//	or:
//
//	        nil
type AKSPtrInput interface {
	pulumi.Input

	ToAKSPtrOutput() AKSPtrOutput
	ToAKSPtrOutputWithContext(context.Context) AKSPtrOutput
}

type aksPtrType AKSArgs

func AKSPtr(v *AKSArgs) AKSPtrInput {
	return (*aksPtrType)(v)
}

func (*aksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AKS)(nil)).Elem()
}

func (i *aksPtrType) ToAKSPtrOutput() AKSPtrOutput {
	return i.ToAKSPtrOutputWithContext(context.Background())
}

func (i *aksPtrType) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSPtrOutput)
}

// A Machine Learning compute based on AKS.
type AKSOutput struct{ *pulumi.OutputState }

func (AKSOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKS)(nil)).Elem()
}

func (o AKSOutput) ToAKSOutput() AKSOutput {
	return o
}

func (o AKSOutput) ToAKSOutputWithContext(ctx context.Context) AKSOutput {
	return o
}

func (o AKSOutput) ToAKSPtrOutput() AKSPtrOutput {
	return o.ToAKSPtrOutputWithContext(context.Background())
}

func (o AKSOutput) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AKS) *AKS {
		return &v
	}).(AKSPtrOutput)
}

// Location for the underlying compute
func (o AKSOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AKS) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AKSOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AKS) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// AKS properties
func (o AKSOutput) Properties() AKSSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v AKS) *AKSSchemaProperties { return v.Properties }).(AKSSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AKSOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKS) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AKSPtrOutput struct{ *pulumi.OutputState }

func (AKSPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKS)(nil)).Elem()
}

func (o AKSPtrOutput) ToAKSPtrOutput() AKSPtrOutput {
	return o
}

func (o AKSPtrOutput) ToAKSPtrOutputWithContext(ctx context.Context) AKSPtrOutput {
	return o
}

func (o AKSPtrOutput) Elem() AKSOutput {
	return o.ApplyT(func(v *AKS) AKS {
		if v != nil {
			return *v
		}
		var ret AKS
		return ret
	}).(AKSOutput)
}

// Location for the underlying compute
func (o AKSPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o AKSPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AKS) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// AKS properties
func (o AKSPtrOutput) Properties() AKSSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v *AKS) *AKSSchemaProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(AKSSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AKSPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKS) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on AKS.
type AKSResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AKS'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// AKS properties
	Properties *AKSSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AKSResponse
func (val *AKSResponse) Defaults() *AKSResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A Machine Learning compute based on AKS.
type AKSResponseOutput struct{ *pulumi.OutputState }

func (AKSResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSResponse)(nil)).Elem()
}

func (o AKSResponseOutput) ToAKSResponseOutput() AKSResponseOutput {
	return o
}

func (o AKSResponseOutput) ToAKSResponseOutputWithContext(ctx context.Context) AKSResponseOutput {
	return o
}

// Location for the underlying compute
func (o AKSResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AKS'.
func (o AKSResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o AKSResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AKSResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AKSResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AKSResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o AKSResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v AKSResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o AKSResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// AKS properties
func (o AKSResponseOutput) Properties() AKSSchemaResponsePropertiesPtrOutput {
	return o.ApplyT(func(v AKSResponse) *AKSSchemaResponseProperties { return v.Properties }).(AKSSchemaResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o AKSResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AKSResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o AKSResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AKSResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o AKSResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// AKS properties
type AKSSchemaProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfiguration `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfiguration `pulumi:"sslConfiguration"`
}

// Defaults sets the appropriate defaults for AKSSchemaProperties
func (val *AKSSchemaProperties) Defaults() *AKSSchemaProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

// AKSSchemaPropertiesInput is an input type that accepts AKSSchemaPropertiesArgs and AKSSchemaPropertiesOutput values.
// You can construct a concrete instance of `AKSSchemaPropertiesInput` via:
//
//	AKSSchemaPropertiesArgs{...}
type AKSSchemaPropertiesInput interface {
	pulumi.Input

	ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput
	ToAKSSchemaPropertiesOutputWithContext(context.Context) AKSSchemaPropertiesOutput
}

// AKS properties
type AKSSchemaPropertiesArgs struct {
	// Number of agents
	AgentCount pulumi.IntPtrInput `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize pulumi.StringPtrInput `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration AksNetworkingConfigurationPtrInput `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn pulumi.StringPtrInput `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose pulumi.StringPtrInput `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet pulumi.StringPtrInput `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType pulumi.StringPtrInput `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration SslConfigurationPtrInput `pulumi:"sslConfiguration"`
}

// Defaults sets the appropriate defaults for AKSSchemaPropertiesArgs
func (val *AKSSchemaPropertiesArgs) Defaults() *AKSSchemaPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		tmp.ClusterPurpose = pulumi.StringPtr("FastProd")
	}
	if tmp.LoadBalancerType == nil {
		tmp.LoadBalancerType = pulumi.StringPtr("PublicIp")
	}
	return &tmp
}
func (AKSSchemaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaProperties)(nil)).Elem()
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput {
	return i.ToAKSSchemaPropertiesOutputWithContext(context.Background())
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesOutputWithContext(ctx context.Context) AKSSchemaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesOutput)
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return i.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i AKSSchemaPropertiesArgs) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesOutput).ToAKSSchemaPropertiesPtrOutputWithContext(ctx)
}

// AKSSchemaPropertiesPtrInput is an input type that accepts AKSSchemaPropertiesArgs, AKSSchemaPropertiesPtr and AKSSchemaPropertiesPtrOutput values.
// You can construct a concrete instance of `AKSSchemaPropertiesPtrInput` via:
//
//	        AKSSchemaPropertiesArgs{...}
//
//	or:
//
//	        nil
type AKSSchemaPropertiesPtrInput interface {
	pulumi.Input

	ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput
	ToAKSSchemaPropertiesPtrOutputWithContext(context.Context) AKSSchemaPropertiesPtrOutput
}

type aksschemaPropertiesPtrType AKSSchemaPropertiesArgs

func AKSSchemaPropertiesPtr(v *AKSSchemaPropertiesArgs) AKSSchemaPropertiesPtrInput {
	return (*aksschemaPropertiesPtrType)(v)
}

func (*aksschemaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaProperties)(nil)).Elem()
}

func (i *aksschemaPropertiesPtrType) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return i.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i *aksschemaPropertiesPtrType) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AKSSchemaPropertiesPtrOutput)
}

// AKS properties
type AKSSchemaPropertiesOutput struct{ *pulumi.OutputState }

func (AKSSchemaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaProperties)(nil)).Elem()
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesOutput() AKSSchemaPropertiesOutput {
	return o
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesOutputWithContext(ctx context.Context) AKSSchemaPropertiesOutput {
	return o
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return o.ToAKSSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (o AKSSchemaPropertiesOutput) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AKSSchemaProperties) *AKSSchemaProperties {
		return &v
	}).(AKSSchemaPropertiesPtrOutput)
}

// Number of agents
func (o AKSSchemaPropertiesOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *int { return v.AgentCount }).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaPropertiesOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.AgentVmSize }).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaPropertiesOutput) AksNetworkingConfiguration() AksNetworkingConfigurationPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *AksNetworkingConfiguration { return v.AksNetworkingConfiguration }).(AksNetworkingConfigurationPtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaPropertiesOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.ClusterFqdn }).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaPropertiesOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.ClusterPurpose }).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaPropertiesOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.LoadBalancerSubnet }).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaPropertiesOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaPropertiesOutput) SslConfiguration() SslConfigurationPtrOutput {
	return o.ApplyT(func(v AKSSchemaProperties) *SslConfiguration { return v.SslConfiguration }).(SslConfigurationPtrOutput)
}

type AKSSchemaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AKSSchemaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaProperties)(nil)).Elem()
}

func (o AKSSchemaPropertiesPtrOutput) ToAKSSchemaPropertiesPtrOutput() AKSSchemaPropertiesPtrOutput {
	return o
}

func (o AKSSchemaPropertiesPtrOutput) ToAKSSchemaPropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaPropertiesPtrOutput {
	return o
}

func (o AKSSchemaPropertiesPtrOutput) Elem() AKSSchemaPropertiesOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) AKSSchemaProperties {
		if v != nil {
			return *v
		}
		var ret AKSSchemaProperties
		return ret
	}).(AKSSchemaPropertiesOutput)
}

// Number of agents
func (o AKSSchemaPropertiesPtrOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *int {
		if v == nil {
			return nil
		}
		return v.AgentCount
	}).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaPropertiesPtrOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.AgentVmSize
	}).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaPropertiesPtrOutput) AksNetworkingConfiguration() AksNetworkingConfigurationPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *AksNetworkingConfiguration {
		if v == nil {
			return nil
		}
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationPtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaPropertiesPtrOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterFqdn
	}).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaPropertiesPtrOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterPurpose
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaPropertiesPtrOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSubnet
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaPropertiesPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaPropertiesPtrOutput) SslConfiguration() SslConfigurationPtrOutput {
	return o.ApplyT(func(v *AKSSchemaProperties) *SslConfiguration {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SslConfigurationPtrOutput)
}

// AKS properties
type AKSSchemaResponseProperties struct {
	// Number of agents
	AgentCount *int `pulumi:"agentCount"`
	// Agent virtual machine size
	AgentVmSize *string `pulumi:"agentVmSize"`
	// AKS networking configuration for vnet
	AksNetworkingConfiguration *AksNetworkingConfigurationResponse `pulumi:"aksNetworkingConfiguration"`
	// Cluster full qualified domain name
	ClusterFqdn *string `pulumi:"clusterFqdn"`
	// Intended usage of the cluster
	ClusterPurpose *string `pulumi:"clusterPurpose"`
	// Load Balancer Subnet
	LoadBalancerSubnet *string `pulumi:"loadBalancerSubnet"`
	// Load Balancer Type
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// SSL configuration
	SslConfiguration *SslConfigurationResponse `pulumi:"sslConfiguration"`
	// System services
	SystemServices []SystemServiceResponse `pulumi:"systemServices"`
}

// Defaults sets the appropriate defaults for AKSSchemaResponseProperties
func (val *AKSSchemaResponseProperties) Defaults() *AKSSchemaResponseProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ClusterPurpose == nil {
		clusterPurpose_ := "FastProd"
		tmp.ClusterPurpose = &clusterPurpose_
	}
	if tmp.LoadBalancerType == nil {
		loadBalancerType_ := "PublicIp"
		tmp.LoadBalancerType = &loadBalancerType_
	}
	return &tmp
}

// AKS properties
type AKSSchemaResponsePropertiesOutput struct{ *pulumi.OutputState }

func (AKSSchemaResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AKSSchemaResponseProperties)(nil)).Elem()
}

func (o AKSSchemaResponsePropertiesOutput) ToAKSSchemaResponsePropertiesOutput() AKSSchemaResponsePropertiesOutput {
	return o
}

func (o AKSSchemaResponsePropertiesOutput) ToAKSSchemaResponsePropertiesOutputWithContext(ctx context.Context) AKSSchemaResponsePropertiesOutput {
	return o
}

// Number of agents
func (o AKSSchemaResponsePropertiesOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *int { return v.AgentCount }).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaResponsePropertiesOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.AgentVmSize }).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaResponsePropertiesOutput) AksNetworkingConfiguration() AksNetworkingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *AksNetworkingConfigurationResponse {
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationResponsePtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaResponsePropertiesOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.ClusterFqdn }).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaResponsePropertiesOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.ClusterPurpose }).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaResponsePropertiesOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.LoadBalancerSubnet }).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaResponsePropertiesOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *string { return v.LoadBalancerType }).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaResponsePropertiesOutput) SslConfiguration() SslConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) *SslConfigurationResponse { return v.SslConfiguration }).(SslConfigurationResponsePtrOutput)
}

// System services
func (o AKSSchemaResponsePropertiesOutput) SystemServices() SystemServiceResponseArrayOutput {
	return o.ApplyT(func(v AKSSchemaResponseProperties) []SystemServiceResponse { return v.SystemServices }).(SystemServiceResponseArrayOutput)
}

type AKSSchemaResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AKSSchemaResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AKSSchemaResponseProperties)(nil)).Elem()
}

func (o AKSSchemaResponsePropertiesPtrOutput) ToAKSSchemaResponsePropertiesPtrOutput() AKSSchemaResponsePropertiesPtrOutput {
	return o
}

func (o AKSSchemaResponsePropertiesPtrOutput) ToAKSSchemaResponsePropertiesPtrOutputWithContext(ctx context.Context) AKSSchemaResponsePropertiesPtrOutput {
	return o
}

func (o AKSSchemaResponsePropertiesPtrOutput) Elem() AKSSchemaResponsePropertiesOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) AKSSchemaResponseProperties {
		if v != nil {
			return *v
		}
		var ret AKSSchemaResponseProperties
		return ret
	}).(AKSSchemaResponsePropertiesOutput)
}

// Number of agents
func (o AKSSchemaResponsePropertiesPtrOutput) AgentCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.AgentCount
	}).(pulumi.IntPtrOutput)
}

// Agent virtual machine size
func (o AKSSchemaResponsePropertiesPtrOutput) AgentVmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.AgentVmSize
	}).(pulumi.StringPtrOutput)
}

// AKS networking configuration for vnet
func (o AKSSchemaResponsePropertiesPtrOutput) AksNetworkingConfiguration() AksNetworkingConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *AksNetworkingConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.AksNetworkingConfiguration
	}).(AksNetworkingConfigurationResponsePtrOutput)
}

// Cluster full qualified domain name
func (o AKSSchemaResponsePropertiesPtrOutput) ClusterFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterFqdn
	}).(pulumi.StringPtrOutput)
}

// Intended usage of the cluster
func (o AKSSchemaResponsePropertiesPtrOutput) ClusterPurpose() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ClusterPurpose
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Subnet
func (o AKSSchemaResponsePropertiesPtrOutput) LoadBalancerSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerSubnet
	}).(pulumi.StringPtrOutput)
}

// Load Balancer Type
func (o AKSSchemaResponsePropertiesPtrOutput) LoadBalancerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.LoadBalancerType
	}).(pulumi.StringPtrOutput)
}

// SSL configuration
func (o AKSSchemaResponsePropertiesPtrOutput) SslConfiguration() SslConfigurationResponsePtrOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) *SslConfigurationResponse {
		if v == nil {
			return nil
		}
		return v.SslConfiguration
	}).(SslConfigurationResponsePtrOutput)
}

// System services
func (o AKSSchemaResponsePropertiesPtrOutput) SystemServices() SystemServiceResponseArrayOutput {
	return o.ApplyT(func(v *AKSSchemaResponseProperties) []SystemServiceResponse {
		if v == nil {
			return nil
		}
		return v.SystemServices
	}).(SystemServiceResponseArrayOutput)
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'AccessKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                               `pulumi:"category"`
	Credentials *WorkspaceConnectionAccessKeyResponse `pulumi:"credentials"`
	ExpiryTime  *string                               `pulumi:"expiryTime"`
	Metadata    interface{}                           `pulumi:"metadata"`
	Target      *string                               `pulumi:"target"`
}

type AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput() AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToAccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'AccessKey'.
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionAccessKeyResponsePtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionAccessKeyResponse {
		return v.Credentials
	}).(WorkspaceConnectionAccessKeyResponsePtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessKeyAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecrets `pulumi:"secrets"`
}

// AccountKeyDatastoreCredentialsInput is an input type that accepts AccountKeyDatastoreCredentialsArgs and AccountKeyDatastoreCredentialsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreCredentialsInput` via:
//
//	AccountKeyDatastoreCredentialsArgs{...}
type AccountKeyDatastoreCredentialsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput
	ToAccountKeyDatastoreCredentialsOutputWithContext(context.Context) AccountKeyDatastoreCredentialsOutput
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecretsInput `pulumi:"secrets"`
}

func (AccountKeyDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return i.ToAccountKeyDatastoreCredentialsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreCredentialsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage account secrets.
func (o AccountKeyDatastoreCredentialsOutput) Secrets() AccountKeyDatastoreSecretsOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) AccountKeyDatastoreSecrets { return v.Secrets }).(AccountKeyDatastoreSecretsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentialsResponse)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutput() AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecrets struct {
	// Storage account key.
	Key *string `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType string `pulumi:"secretsType"`
}

// AccountKeyDatastoreSecretsInput is an input type that accepts AccountKeyDatastoreSecretsArgs and AccountKeyDatastoreSecretsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreSecretsInput` via:
//
//	AccountKeyDatastoreSecretsArgs{...}
type AccountKeyDatastoreSecretsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput
	ToAccountKeyDatastoreSecretsOutputWithContext(context.Context) AccountKeyDatastoreSecretsOutput
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsArgs struct {
	// Storage account key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (AccountKeyDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return i.ToAccountKeyDatastoreSecretsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreSecretsOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return o
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return o
}

// Storage account key.
func (o AccountKeyDatastoreSecretsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetails struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccount `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccount `pulumi:"userCreatedAcrAccount"`
}

// AcrDetailsInput is an input type that accepts AcrDetailsArgs and AcrDetailsOutput values.
// You can construct a concrete instance of `AcrDetailsInput` via:
//
//	AcrDetailsArgs{...}
type AcrDetailsInput interface {
	pulumi.Input

	ToAcrDetailsOutput() AcrDetailsOutput
	ToAcrDetailsOutputWithContext(context.Context) AcrDetailsOutput
}

// Details of ACR account to be used for the Registry
type AcrDetailsArgs struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount SystemCreatedAcrAccountPtrInput `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount UserCreatedAcrAccountPtrInput `pulumi:"userCreatedAcrAccount"`
}

func (AcrDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArgs) ToAcrDetailsOutput() AcrDetailsOutput {
	return i.ToAcrDetailsOutputWithContext(context.Background())
}

func (i AcrDetailsArgs) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsOutput)
}

// AcrDetailsArrayInput is an input type that accepts AcrDetailsArray and AcrDetailsArrayOutput values.
// You can construct a concrete instance of `AcrDetailsArrayInput` via:
//
//	AcrDetailsArray{ AcrDetailsArgs{...} }
type AcrDetailsArrayInput interface {
	pulumi.Input

	ToAcrDetailsArrayOutput() AcrDetailsArrayOutput
	ToAcrDetailsArrayOutputWithContext(context.Context) AcrDetailsArrayOutput
}

type AcrDetailsArray []AcrDetailsInput

func (AcrDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return i.ToAcrDetailsArrayOutputWithContext(context.Background())
}

func (i AcrDetailsArray) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcrDetailsArrayOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsOutput struct{ *pulumi.OutputState }

func (AcrDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetails)(nil)).Elem()
}

func (o AcrDetailsOutput) ToAcrDetailsOutput() AcrDetailsOutput {
	return o
}

func (o AcrDetailsOutput) ToAcrDetailsOutputWithContext(ctx context.Context) AcrDetailsOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *SystemCreatedAcrAccount { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountPtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsOutput) UserCreatedAcrAccount() UserCreatedAcrAccountPtrOutput {
	return o.ApplyT(func(v AcrDetails) *UserCreatedAcrAccount { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountPtrOutput)
}

type AcrDetailsArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetails)(nil)).Elem()
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutput() AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) ToAcrDetailsArrayOutputWithContext(ctx context.Context) AcrDetailsArrayOutput {
	return o
}

func (o AcrDetailsArrayOutput) Index(i pulumi.IntInput) AcrDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetails {
		return vs[0].([]AcrDetails)[vs[1].(int)]
	}).(AcrDetailsOutput)
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponse struct {
	// Details of system created ACR account to be used for the Registry
	SystemCreatedAcrAccount *SystemCreatedAcrAccountResponse `pulumi:"systemCreatedAcrAccount"`
	// Details of user created ACR account to be used for the Registry
	UserCreatedAcrAccount *UserCreatedAcrAccountResponse `pulumi:"userCreatedAcrAccount"`
}

// Details of ACR account to be used for the Registry
type AcrDetailsResponseOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutput() AcrDetailsResponseOutput {
	return o
}

func (o AcrDetailsResponseOutput) ToAcrDetailsResponseOutputWithContext(ctx context.Context) AcrDetailsResponseOutput {
	return o
}

// Details of system created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) SystemCreatedAcrAccount() SystemCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *SystemCreatedAcrAccountResponse { return v.SystemCreatedAcrAccount }).(SystemCreatedAcrAccountResponsePtrOutput)
}

// Details of user created ACR account to be used for the Registry
func (o AcrDetailsResponseOutput) UserCreatedAcrAccount() UserCreatedAcrAccountResponsePtrOutput {
	return o.ApplyT(func(v AcrDetailsResponse) *UserCreatedAcrAccountResponse { return v.UserCreatedAcrAccount }).(UserCreatedAcrAccountResponsePtrOutput)
}

type AcrDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (AcrDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcrDetailsResponse)(nil)).Elem()
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutput() AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) ToAcrDetailsResponseArrayOutputWithContext(ctx context.Context) AcrDetailsResponseArrayOutput {
	return o
}

func (o AcrDetailsResponseArrayOutput) Index(i pulumi.IntInput) AcrDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcrDetailsResponse {
		return vs[0].([]AcrDetailsResponse)[vs[1].(int)]
	}).(AcrDetailsResponseOutput)
}

type ActualCapacityInfoResponse struct {
	// Gets or sets the total number of instances for the group.
	Allocated *int `pulumi:"allocated"`
	// Gets or sets the number of instances which failed to successfully complete assignment.
	AssignmentFailed *int `pulumi:"assignmentFailed"`
	// Gets or sets the number of instances which successfully completed assignment.
	AssignmentSuccess *int `pulumi:"assignmentSuccess"`
}

// Defaults sets the appropriate defaults for ActualCapacityInfoResponse
func (val *ActualCapacityInfoResponse) Defaults() *ActualCapacityInfoResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Allocated == nil {
		allocated_ := 0
		tmp.Allocated = &allocated_
	}
	if tmp.AssignmentFailed == nil {
		assignmentFailed_ := 0
		tmp.AssignmentFailed = &assignmentFailed_
	}
	if tmp.AssignmentSuccess == nil {
		assignmentSuccess_ := 0
		tmp.AssignmentSuccess = &assignmentSuccess_
	}
	return &tmp
}

type ActualCapacityInfoResponseOutput struct{ *pulumi.OutputState }

func (ActualCapacityInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActualCapacityInfoResponse)(nil)).Elem()
}

func (o ActualCapacityInfoResponseOutput) ToActualCapacityInfoResponseOutput() ActualCapacityInfoResponseOutput {
	return o
}

func (o ActualCapacityInfoResponseOutput) ToActualCapacityInfoResponseOutputWithContext(ctx context.Context) ActualCapacityInfoResponseOutput {
	return o
}

// Gets or sets the total number of instances for the group.
func (o ActualCapacityInfoResponseOutput) Allocated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.Allocated }).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which failed to successfully complete assignment.
func (o ActualCapacityInfoResponseOutput) AssignmentFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.AssignmentFailed }).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which successfully completed assignment.
func (o ActualCapacityInfoResponseOutput) AssignmentSuccess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ActualCapacityInfoResponse) *int { return v.AssignmentSuccess }).(pulumi.IntPtrOutput)
}

type ActualCapacityInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ActualCapacityInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActualCapacityInfoResponse)(nil)).Elem()
}

func (o ActualCapacityInfoResponsePtrOutput) ToActualCapacityInfoResponsePtrOutput() ActualCapacityInfoResponsePtrOutput {
	return o
}

func (o ActualCapacityInfoResponsePtrOutput) ToActualCapacityInfoResponsePtrOutputWithContext(ctx context.Context) ActualCapacityInfoResponsePtrOutput {
	return o
}

func (o ActualCapacityInfoResponsePtrOutput) Elem() ActualCapacityInfoResponseOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) ActualCapacityInfoResponse {
		if v != nil {
			return *v
		}
		var ret ActualCapacityInfoResponse
		return ret
	}).(ActualCapacityInfoResponseOutput)
}

// Gets or sets the total number of instances for the group.
func (o ActualCapacityInfoResponsePtrOutput) Allocated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.Allocated
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which failed to successfully complete assignment.
func (o ActualCapacityInfoResponsePtrOutput) AssignmentFailed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.AssignmentFailed
	}).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances which successfully completed assignment.
func (o ActualCapacityInfoResponsePtrOutput) AssignmentSuccess() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ActualCapacityInfoResponse) *int {
		if v == nil {
			return nil
		}
		return v.AssignmentSuccess
	}).(pulumi.IntPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfiguration struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// AksNetworkingConfigurationInput is an input type that accepts AksNetworkingConfigurationArgs and AksNetworkingConfigurationOutput values.
// You can construct a concrete instance of `AksNetworkingConfigurationInput` via:
//
//	AksNetworkingConfigurationArgs{...}
type AksNetworkingConfigurationInput interface {
	pulumi.Input

	ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput
	ToAksNetworkingConfigurationOutputWithContext(context.Context) AksNetworkingConfigurationOutput
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationArgs struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP pulumi.StringPtrInput `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr pulumi.StringPtrInput `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr pulumi.StringPtrInput `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (AksNetworkingConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfiguration)(nil)).Elem()
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput {
	return i.ToAksNetworkingConfigurationOutputWithContext(context.Background())
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationOutputWithContext(ctx context.Context) AksNetworkingConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationOutput)
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return i.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (i AksNetworkingConfigurationArgs) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationOutput).ToAksNetworkingConfigurationPtrOutputWithContext(ctx)
}

// AksNetworkingConfigurationPtrInput is an input type that accepts AksNetworkingConfigurationArgs, AksNetworkingConfigurationPtr and AksNetworkingConfigurationPtrOutput values.
// You can construct a concrete instance of `AksNetworkingConfigurationPtrInput` via:
//
//	        AksNetworkingConfigurationArgs{...}
//
//	or:
//
//	        nil
type AksNetworkingConfigurationPtrInput interface {
	pulumi.Input

	ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput
	ToAksNetworkingConfigurationPtrOutputWithContext(context.Context) AksNetworkingConfigurationPtrOutput
}

type aksNetworkingConfigurationPtrType AksNetworkingConfigurationArgs

func AksNetworkingConfigurationPtr(v *AksNetworkingConfigurationArgs) AksNetworkingConfigurationPtrInput {
	return (*aksNetworkingConfigurationPtrType)(v)
}

func (*aksNetworkingConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfiguration)(nil)).Elem()
}

func (i *aksNetworkingConfigurationPtrType) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return i.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (i *aksNetworkingConfigurationPtrType) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AksNetworkingConfigurationPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfiguration)(nil)).Elem()
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationOutput() AksNetworkingConfigurationOutput {
	return o
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationOutputWithContext(ctx context.Context) AksNetworkingConfigurationOutput {
	return o
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return o.ToAksNetworkingConfigurationPtrOutputWithContext(context.Background())
}

func (o AksNetworkingConfigurationOutput) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AksNetworkingConfiguration) *AksNetworkingConfiguration {
		return &v
	}).(AksNetworkingConfigurationPtrOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfiguration) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AksNetworkingConfigurationPtrOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfiguration)(nil)).Elem()
}

func (o AksNetworkingConfigurationPtrOutput) ToAksNetworkingConfigurationPtrOutput() AksNetworkingConfigurationPtrOutput {
	return o
}

func (o AksNetworkingConfigurationPtrOutput) ToAksNetworkingConfigurationPtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationPtrOutput {
	return o
}

func (o AksNetworkingConfigurationPtrOutput) Elem() AksNetworkingConfigurationOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) AksNetworkingConfiguration {
		if v != nil {
			return *v
		}
		var ret AksNetworkingConfiguration
		return ret
	}).(AksNetworkingConfigurationOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationPtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationPtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationPtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationResponse struct {
	// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
	DnsServiceIP *string `pulumi:"dnsServiceIP"`
	// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
	DockerBridgeCidr *string `pulumi:"dockerBridgeCidr"`
	// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
	ServiceCidr *string `pulumi:"serviceCidr"`
	// Virtual network subnet resource ID the compute nodes belong to
	SubnetId *string `pulumi:"subnetId"`
}

// Advance configuration for AKS networking
type AksNetworkingConfigurationResponseOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AksNetworkingConfigurationResponse)(nil)).Elem()
}

func (o AksNetworkingConfigurationResponseOutput) ToAksNetworkingConfigurationResponseOutput() AksNetworkingConfigurationResponseOutput {
	return o
}

func (o AksNetworkingConfigurationResponseOutput) ToAksNetworkingConfigurationResponseOutputWithContext(ctx context.Context) AksNetworkingConfigurationResponseOutput {
	return o
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationResponseOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.DnsServiceIP }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationResponseOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.DockerBridgeCidr }).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationResponseOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.ServiceCidr }).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationResponseOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AksNetworkingConfigurationResponse) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type AksNetworkingConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (AksNetworkingConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AksNetworkingConfigurationResponse)(nil)).Elem()
}

func (o AksNetworkingConfigurationResponsePtrOutput) ToAksNetworkingConfigurationResponsePtrOutput() AksNetworkingConfigurationResponsePtrOutput {
	return o
}

func (o AksNetworkingConfigurationResponsePtrOutput) ToAksNetworkingConfigurationResponsePtrOutputWithContext(ctx context.Context) AksNetworkingConfigurationResponsePtrOutput {
	return o
}

func (o AksNetworkingConfigurationResponsePtrOutput) Elem() AksNetworkingConfigurationResponseOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) AksNetworkingConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret AksNetworkingConfigurationResponse
		return ret
	}).(AksNetworkingConfigurationResponseOutput)
}

// An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
func (o AksNetworkingConfigurationResponsePtrOutput) DnsServiceIP() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DnsServiceIP
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
func (o AksNetworkingConfigurationResponsePtrOutput) DockerBridgeCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerBridgeCidr
	}).(pulumi.StringPtrOutput)
}

// A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
func (o AksNetworkingConfigurationResponsePtrOutput) ServiceCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceCidr
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to
func (o AksNetworkingConfigurationResponsePtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AksNetworkingConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodes struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// AllNodesInput is an input type that accepts AllNodesArgs and AllNodesOutput values.
// You can construct a concrete instance of `AllNodesInput` via:
//
//	AllNodesArgs{...}
type AllNodesInput interface {
	pulumi.Input

	ToAllNodesOutput() AllNodesOutput
	ToAllNodesOutputWithContext(context.Context) AllNodesOutput
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesArgs struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType pulumi.StringInput `pulumi:"nodesValueType"`
}

func (AllNodesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (i AllNodesArgs) ToAllNodesOutput() AllNodesOutput {
	return i.ToAllNodesOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput)
}

func (i AllNodesArgs) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i AllNodesArgs) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesOutput).ToAllNodesPtrOutputWithContext(ctx)
}

// AllNodesPtrInput is an input type that accepts AllNodesArgs, AllNodesPtr and AllNodesPtrOutput values.
// You can construct a concrete instance of `AllNodesPtrInput` via:
//
//	        AllNodesArgs{...}
//
//	or:
//
//	        nil
type AllNodesPtrInput interface {
	pulumi.Input

	ToAllNodesPtrOutput() AllNodesPtrOutput
	ToAllNodesPtrOutputWithContext(context.Context) AllNodesPtrOutput
}

type allNodesPtrType AllNodesArgs

func AllNodesPtr(v *AllNodesArgs) AllNodesPtrInput {
	return (*allNodesPtrType)(v)
}

func (*allNodesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (i *allNodesPtrType) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return i.ToAllNodesPtrOutputWithContext(context.Background())
}

func (i *allNodesPtrType) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllNodesPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesOutput struct{ *pulumi.OutputState }

func (AllNodesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodes)(nil)).Elem()
}

func (o AllNodesOutput) ToAllNodesOutput() AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesOutputWithContext(ctx context.Context) AllNodesOutput {
	return o
}

func (o AllNodesOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o.ToAllNodesPtrOutputWithContext(context.Background())
}

func (o AllNodesOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AllNodes) *AllNodes {
		return &v
	}).(AllNodesPtrOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodes) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesPtrOutput struct{ *pulumi.OutputState }

func (AllNodesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodes)(nil)).Elem()
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutput() AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) ToAllNodesPtrOutputWithContext(ctx context.Context) AllNodesPtrOutput {
	return o
}

func (o AllNodesPtrOutput) Elem() AllNodesOutput {
	return o.ApplyT(func(v *AllNodes) AllNodes {
		if v != nil {
			return *v
		}
		var ret AllNodes
		return ret
	}).(AllNodesOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesPtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodes) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponse struct {
	// The enumerated types for the nodes value
	// Expected value is 'All'.
	NodesValueType string `pulumi:"nodesValueType"`
}

// All nodes means the service will be running on all of the nodes of the job
type AllNodesResponseOutput struct{ *pulumi.OutputState }

func (AllNodesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutput() AllNodesResponseOutput {
	return o
}

func (o AllNodesResponseOutput) ToAllNodesResponseOutputWithContext(ctx context.Context) AllNodesResponseOutput {
	return o
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponseOutput) NodesValueType() pulumi.StringOutput {
	return o.ApplyT(func(v AllNodesResponse) string { return v.NodesValueType }).(pulumi.StringOutput)
}

type AllNodesResponsePtrOutput struct{ *pulumi.OutputState }

func (AllNodesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllNodesResponse)(nil)).Elem()
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutput() AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) ToAllNodesResponsePtrOutputWithContext(ctx context.Context) AllNodesResponsePtrOutput {
	return o
}

func (o AllNodesResponsePtrOutput) Elem() AllNodesResponseOutput {
	return o.ApplyT(func(v *AllNodesResponse) AllNodesResponse {
		if v != nil {
			return *v
		}
		var ret AllNodesResponse
		return ret
	}).(AllNodesResponseOutput)
}

// The enumerated types for the nodes value
// Expected value is 'All'.
func (o AllNodesResponsePtrOutput) NodesValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllNodesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.NodesValueType
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute.
type AmlCompute struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of AmlCompute
	Properties *AmlComputeProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlCompute
func (val *AmlCompute) Defaults() *AmlCompute {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// AmlComputeInput is an input type that accepts AmlComputeArgs and AmlComputeOutput values.
// You can construct a concrete instance of `AmlComputeInput` via:
//
//	AmlComputeArgs{...}
type AmlComputeInput interface {
	pulumi.Input

	ToAmlComputeOutput() AmlComputeOutput
	ToAmlComputeOutputWithContext(context.Context) AmlComputeOutput
}

// An Azure Machine Learning compute.
type AmlComputeArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of AmlCompute
	Properties AmlComputePropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlComputeArgs
func (val *AmlComputeArgs) Defaults() *AmlComputeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (AmlComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlCompute)(nil)).Elem()
}

func (i AmlComputeArgs) ToAmlComputeOutput() AmlComputeOutput {
	return i.ToAmlComputeOutputWithContext(context.Background())
}

func (i AmlComputeArgs) ToAmlComputeOutputWithContext(ctx context.Context) AmlComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputeOutput)
}

func (i AmlComputeArgs) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return i.ToAmlComputePtrOutputWithContext(context.Background())
}

func (i AmlComputeArgs) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputeOutput).ToAmlComputePtrOutputWithContext(ctx)
}

// AmlComputePtrInput is an input type that accepts AmlComputeArgs, AmlComputePtr and AmlComputePtrOutput values.
// You can construct a concrete instance of `AmlComputePtrInput` via:
//
//	        AmlComputeArgs{...}
//
//	or:
//
//	        nil
type AmlComputePtrInput interface {
	pulumi.Input

	ToAmlComputePtrOutput() AmlComputePtrOutput
	ToAmlComputePtrOutputWithContext(context.Context) AmlComputePtrOutput
}

type amlComputePtrType AmlComputeArgs

func AmlComputePtr(v *AmlComputeArgs) AmlComputePtrInput {
	return (*amlComputePtrType)(v)
}

func (*amlComputePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlCompute)(nil)).Elem()
}

func (i *amlComputePtrType) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return i.ToAmlComputePtrOutputWithContext(context.Background())
}

func (i *amlComputePtrType) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePtrOutput)
}

// An Azure Machine Learning compute.
type AmlComputeOutput struct{ *pulumi.OutputState }

func (AmlComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlCompute)(nil)).Elem()
}

func (o AmlComputeOutput) ToAmlComputeOutput() AmlComputeOutput {
	return o
}

func (o AmlComputeOutput) ToAmlComputeOutputWithContext(ctx context.Context) AmlComputeOutput {
	return o
}

func (o AmlComputeOutput) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return o.ToAmlComputePtrOutputWithContext(context.Background())
}

func (o AmlComputeOutput) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlCompute) *AmlCompute {
		return &v
	}).(AmlComputePtrOutput)
}

// Location for the underlying compute
func (o AmlComputeOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputeOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlCompute) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputeOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlCompute) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of AmlCompute
func (o AmlComputeOutput) Properties() AmlComputePropertiesPtrOutput {
	return o.ApplyT(func(v AmlCompute) *AmlComputeProperties { return v.Properties }).(AmlComputePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputeOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlCompute) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type AmlComputePtrOutput struct{ *pulumi.OutputState }

func (AmlComputePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlCompute)(nil)).Elem()
}

func (o AmlComputePtrOutput) ToAmlComputePtrOutput() AmlComputePtrOutput {
	return o
}

func (o AmlComputePtrOutput) ToAmlComputePtrOutputWithContext(ctx context.Context) AmlComputePtrOutput {
	return o
}

func (o AmlComputePtrOutput) Elem() AmlComputeOutput {
	return o.ApplyT(func(v *AmlCompute) AmlCompute {
		if v != nil {
			return *v
		}
		var ret AmlCompute
		return ret
	}).(AmlComputeOutput)
}

// Location for the underlying compute
func (o AmlComputePtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of AmlCompute
func (o AmlComputePtrOutput) Properties() AmlComputePropertiesPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *AmlComputeProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(AmlComputePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlCompute) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponse struct {
	// ID of the compute node.
	NodeId string `pulumi:"nodeId"`
	// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
	NodeState string `pulumi:"nodeState"`
	// SSH port number of the node.
	Port float64 `pulumi:"port"`
	// Private IP address of the compute node.
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP address of the compute node.
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// ID of the Experiment running on the node, if any else null.
	RunId string `pulumi:"runId"`
}

// Compute node information related to a AmlCompute.
type AmlComputeNodeInformationResponseOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutput() AmlComputeNodeInformationResponseOutput {
	return o
}

func (o AmlComputeNodeInformationResponseOutput) ToAmlComputeNodeInformationResponseOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseOutput {
	return o
}

// ID of the compute node.
func (o AmlComputeNodeInformationResponseOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeId }).(pulumi.StringOutput)
}

// State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
func (o AmlComputeNodeInformationResponseOutput) NodeState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.NodeState }).(pulumi.StringOutput)
}

// SSH port number of the node.
func (o AmlComputeNodeInformationResponseOutput) Port() pulumi.Float64Output {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) float64 { return v.Port }).(pulumi.Float64Output)
}

// Private IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Public IP address of the compute node.
func (o AmlComputeNodeInformationResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// ID of the Experiment running on the node, if any else null.
func (o AmlComputeNodeInformationResponseOutput) RunId() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeNodeInformationResponse) string { return v.RunId }).(pulumi.StringOutput)
}

type AmlComputeNodeInformationResponseArrayOutput struct{ *pulumi.OutputState }

func (AmlComputeNodeInformationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AmlComputeNodeInformationResponse)(nil)).Elem()
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutput() AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) ToAmlComputeNodeInformationResponseArrayOutputWithContext(ctx context.Context) AmlComputeNodeInformationResponseArrayOutput {
	return o
}

func (o AmlComputeNodeInformationResponseArrayOutput) Index(i pulumi.IntInput) AmlComputeNodeInformationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AmlComputeNodeInformationResponse {
		return vs[0].([]AmlComputeNodeInformationResponse)[vs[1].(int)]
	}).(AmlComputeNodeInformationResponseOutput)
}

// AML Compute properties
type AmlComputeProperties struct {
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettings `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentials `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImage `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputeProperties
func (val *AmlComputeProperties) Defaults() *AmlComputeProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// AmlComputePropertiesInput is an input type that accepts AmlComputePropertiesArgs and AmlComputePropertiesOutput values.
// You can construct a concrete instance of `AmlComputePropertiesInput` via:
//
//	AmlComputePropertiesArgs{...}
type AmlComputePropertiesInput interface {
	pulumi.Input

	ToAmlComputePropertiesOutput() AmlComputePropertiesOutput
	ToAmlComputePropertiesOutputWithContext(context.Context) AmlComputePropertiesOutput
}

// AML Compute properties
type AmlComputePropertiesArgs struct {
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp pulumi.BoolPtrInput `pulumi:"enableNodePublicIp"`
	// Network is isolated or not
	IsolatedNetwork pulumi.BoolPtrInput `pulumi:"isolatedNetwork"`
	// Compute OS Type
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag pulumi.Input `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess pulumi.StringPtrInput `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings ScaleSettingsPtrInput `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet ResourceIdPtrInput `pulumi:"subnet"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials UserAccountCredentialsPtrInput `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage VirtualMachineImagePtrInput `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority pulumi.StringPtrInput `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputePropertiesArgs
func (val *AmlComputePropertiesArgs) Defaults() *AmlComputePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		tmp.EnableNodePublicIp = pulumi.BoolPtr(true)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		tmp.RemoteLoginPortPublicAccess = pulumi.StringPtr("NotSpecified")
	}

	return &tmp
}
func (AmlComputePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeProperties)(nil)).Elem()
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesOutput() AmlComputePropertiesOutput {
	return i.ToAmlComputePropertiesOutputWithContext(context.Background())
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesOutputWithContext(ctx context.Context) AmlComputePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesOutput)
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return i.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (i AmlComputePropertiesArgs) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesOutput).ToAmlComputePropertiesPtrOutputWithContext(ctx)
}

// AmlComputePropertiesPtrInput is an input type that accepts AmlComputePropertiesArgs, AmlComputePropertiesPtr and AmlComputePropertiesPtrOutput values.
// You can construct a concrete instance of `AmlComputePropertiesPtrInput` via:
//
//	        AmlComputePropertiesArgs{...}
//
//	or:
//
//	        nil
type AmlComputePropertiesPtrInput interface {
	pulumi.Input

	ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput
	ToAmlComputePropertiesPtrOutputWithContext(context.Context) AmlComputePropertiesPtrOutput
}

type amlComputePropertiesPtrType AmlComputePropertiesArgs

func AmlComputePropertiesPtr(v *AmlComputePropertiesArgs) AmlComputePropertiesPtrInput {
	return (*amlComputePropertiesPtrType)(v)
}

func (*amlComputePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputeProperties)(nil)).Elem()
}

func (i *amlComputePropertiesPtrType) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return i.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (i *amlComputePropertiesPtrType) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlComputePropertiesPtrOutput)
}

// AML Compute properties
type AmlComputePropertiesOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeProperties)(nil)).Elem()
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesOutput() AmlComputePropertiesOutput {
	return o
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesOutputWithContext(ctx context.Context) AmlComputePropertiesOutput {
	return o
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return o.ToAmlComputePropertiesPtrOutputWithContext(context.Background())
}

func (o AmlComputePropertiesOutput) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlComputeProperties) *AmlComputeProperties {
		return &v
	}).(AmlComputePropertiesPtrOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *bool { return v.IsolatedNetwork }).(pulumi.BoolPtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v AmlComputeProperties) interface{} { return v.PropertyBag }).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.RemoteLoginPortPublicAccess }).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesOutput) ScaleSettings() ScaleSettingsPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *ScaleSettings { return v.ScaleSettings }).(ScaleSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *ResourceId { return v.Subnet }).(ResourceIdPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesOutput) UserAccountCredentials() UserAccountCredentialsPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *UserAccountCredentials { return v.UserAccountCredentials }).(UserAccountCredentialsPtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesOutput) VirtualMachineImage() VirtualMachineImagePtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *VirtualMachineImage { return v.VirtualMachineImage }).(VirtualMachineImagePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.VmPriority }).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeProperties) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AmlComputePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputeProperties)(nil)).Elem()
}

func (o AmlComputePropertiesPtrOutput) ToAmlComputePropertiesPtrOutput() AmlComputePropertiesPtrOutput {
	return o
}

func (o AmlComputePropertiesPtrOutput) ToAmlComputePropertiesPtrOutputWithContext(ctx context.Context) AmlComputePropertiesPtrOutput {
	return o
}

func (o AmlComputePropertiesPtrOutput) Elem() AmlComputePropertiesOutput {
	return o.ApplyT(func(v *AmlComputeProperties) AmlComputeProperties {
		if v != nil {
			return *v
		}
		var ret AmlComputeProperties
		return ret
	}).(AmlComputePropertiesOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesPtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesPtrOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsolatedNetwork
	}).(pulumi.BoolPtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesPtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesPtrOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmlComputeProperties) interface{} {
		if v == nil {
			return nil
		}
		return v.PropertyBag
	}).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesPtrOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.RemoteLoginPortPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesPtrOutput) ScaleSettings() ScaleSettingsPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *ScaleSettings {
		if v == nil {
			return nil
		}
		return v.ScaleSettings
	}).(ScaleSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesPtrOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *ResourceId {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesPtrOutput) UserAccountCredentials() UserAccountCredentialsPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *UserAccountCredentials {
		if v == nil {
			return nil
		}
		return v.UserAccountCredentials
	}).(UserAccountCredentialsPtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesPtrOutput) VirtualMachineImage() VirtualMachineImagePtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *VirtualMachineImage {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImage
	}).(VirtualMachineImagePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesPtrOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmPriority
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesPtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputeProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// AML Compute properties
type AmlComputePropertiesResponse struct {
	// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
	AllocationState string `pulumi:"allocationState"`
	// The time at which the compute entered its current allocation state.
	AllocationStateTransitionTime string `pulumi:"allocationStateTransitionTime"`
	// The number of compute nodes currently assigned to the compute.
	CurrentNodeCount int `pulumi:"currentNodeCount"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Collection of errors encountered by various compute nodes during node setup.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// Network is isolated or not
	IsolatedNetwork *bool `pulumi:"isolatedNetwork"`
	// Counts of various node states on the compute.
	NodeStateCounts NodeStateCountsResponse `pulumi:"nodeStateCounts"`
	// Compute OS Type
	OsType *string `pulumi:"osType"`
	// A property bag containing additional properties.
	PropertyBag interface{} `pulumi:"propertyBag"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
	RemoteLoginPortPublicAccess *string `pulumi:"remoteLoginPortPublicAccess"`
	// Scale settings for AML Compute
	ScaleSettings *ScaleSettingsResponse `pulumi:"scaleSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
	TargetNodeCount int `pulumi:"targetNodeCount"`
	// Credentials for an administrator user account that will be created on each compute node.
	UserAccountCredentials *UserAccountCredentialsResponse `pulumi:"userAccountCredentials"`
	// Virtual Machine image for AML Compute - windows only
	VirtualMachineImage *VirtualMachineImageResponse `pulumi:"virtualMachineImage"`
	// Virtual Machine priority
	VmPriority *string `pulumi:"vmPriority"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for AmlComputePropertiesResponse
func (val *AmlComputePropertiesResponse) Defaults() *AmlComputePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableNodePublicIp == nil {
		enableNodePublicIp_ := true
		tmp.EnableNodePublicIp = &enableNodePublicIp_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	if tmp.RemoteLoginPortPublicAccess == nil {
		remoteLoginPortPublicAccess_ := "NotSpecified"
		tmp.RemoteLoginPortPublicAccess = &remoteLoginPortPublicAccess_
	}
	tmp.ScaleSettings = tmp.ScaleSettings.Defaults()

	return &tmp
}

// AML Compute properties
type AmlComputePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputePropertiesResponse)(nil)).Elem()
}

func (o AmlComputePropertiesResponseOutput) ToAmlComputePropertiesResponseOutput() AmlComputePropertiesResponseOutput {
	return o
}

func (o AmlComputePropertiesResponseOutput) ToAmlComputePropertiesResponseOutputWithContext(ctx context.Context) AmlComputePropertiesResponseOutput {
	return o
}

// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
func (o AmlComputePropertiesResponseOutput) AllocationState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) string { return v.AllocationState }).(pulumi.StringOutput)
}

// The time at which the compute entered its current allocation state.
func (o AmlComputePropertiesResponseOutput) AllocationStateTransitionTime() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) string { return v.AllocationStateTransitionTime }).(pulumi.StringOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o AmlComputePropertiesResponseOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) int { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesResponseOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered by various compute nodes during node setup.
func (o AmlComputePropertiesResponseOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) []ErrorResponseResponse { return v.Errors }).(ErrorResponseResponseArrayOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesResponseOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *bool { return v.IsolatedNetwork }).(pulumi.BoolPtrOutput)
}

// Counts of various node states on the compute.
func (o AmlComputePropertiesResponseOutput) NodeStateCounts() NodeStateCountsResponseOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) NodeStateCountsResponse { return v.NodeStateCounts }).(NodeStateCountsResponseOutput)
}

// Compute OS Type
func (o AmlComputePropertiesResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesResponseOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) interface{} { return v.PropertyBag }).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesResponseOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.RemoteLoginPortPublicAccess }).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesResponseOutput) ScaleSettings() ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *ScaleSettingsResponse { return v.ScaleSettings }).(ScaleSettingsResponsePtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesResponseOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *ResourceIdResponse { return v.Subnet }).(ResourceIdResponsePtrOutput)
}

// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
func (o AmlComputePropertiesResponseOutput) TargetNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) int { return v.TargetNodeCount }).(pulumi.IntOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesResponseOutput) UserAccountCredentials() UserAccountCredentialsResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *UserAccountCredentialsResponse { return v.UserAccountCredentials }).(UserAccountCredentialsResponsePtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesResponseOutput) VirtualMachineImage() VirtualMachineImageResponsePtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *VirtualMachineImageResponse { return v.VirtualMachineImage }).(VirtualMachineImageResponsePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesResponseOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.VmPriority }).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputePropertiesResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type AmlComputePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AmlComputePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlComputePropertiesResponse)(nil)).Elem()
}

func (o AmlComputePropertiesResponsePtrOutput) ToAmlComputePropertiesResponsePtrOutput() AmlComputePropertiesResponsePtrOutput {
	return o
}

func (o AmlComputePropertiesResponsePtrOutput) ToAmlComputePropertiesResponsePtrOutputWithContext(ctx context.Context) AmlComputePropertiesResponsePtrOutput {
	return o
}

func (o AmlComputePropertiesResponsePtrOutput) Elem() AmlComputePropertiesResponseOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) AmlComputePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AmlComputePropertiesResponse
		return ret
	}).(AmlComputePropertiesResponseOutput)
}

// Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
func (o AmlComputePropertiesResponsePtrOutput) AllocationState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AllocationState
	}).(pulumi.StringPtrOutput)
}

// The time at which the compute entered its current allocation state.
func (o AmlComputePropertiesResponsePtrOutput) AllocationStateTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AllocationStateTransitionTime
	}).(pulumi.StringPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o AmlComputePropertiesResponsePtrOutput) CurrentNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.CurrentNodeCount
	}).(pulumi.IntPtrOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o AmlComputePropertiesResponsePtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered by various compute nodes during node setup.
func (o AmlComputePropertiesResponsePtrOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) []ErrorResponseResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorResponseResponseArrayOutput)
}

// Network is isolated or not
func (o AmlComputePropertiesResponsePtrOutput) IsolatedNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsolatedNetwork
	}).(pulumi.BoolPtrOutput)
}

// Counts of various node states on the compute.
func (o AmlComputePropertiesResponsePtrOutput) NodeStateCounts() NodeStateCountsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *NodeStateCountsResponse {
		if v == nil {
			return nil
		}
		return &v.NodeStateCounts
	}).(NodeStateCountsResponsePtrOutput)
}

// Compute OS Type
func (o AmlComputePropertiesResponsePtrOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.OsType
	}).(pulumi.StringPtrOutput)
}

// A property bag containing additional properties.
func (o AmlComputePropertiesResponsePtrOutput) PropertyBag() pulumi.AnyOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.PropertyBag
	}).(pulumi.AnyOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
func (o AmlComputePropertiesResponsePtrOutput) RemoteLoginPortPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RemoteLoginPortPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Scale settings for AML Compute
func (o AmlComputePropertiesResponsePtrOutput) ScaleSettings() ScaleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *ScaleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ScaleSettings
	}).(ScaleSettingsResponsePtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o AmlComputePropertiesResponsePtrOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdResponsePtrOutput)
}

// The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
func (o AmlComputePropertiesResponsePtrOutput) TargetNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return &v.TargetNodeCount
	}).(pulumi.IntPtrOutput)
}

// Credentials for an administrator user account that will be created on each compute node.
func (o AmlComputePropertiesResponsePtrOutput) UserAccountCredentials() UserAccountCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *UserAccountCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.UserAccountCredentials
	}).(UserAccountCredentialsResponsePtrOutput)
}

// Virtual Machine image for AML Compute - windows only
func (o AmlComputePropertiesResponsePtrOutput) VirtualMachineImage() VirtualMachineImageResponsePtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *VirtualMachineImageResponse {
		if v == nil {
			return nil
		}
		return v.VirtualMachineImage
	}).(VirtualMachineImageResponsePtrOutput)
}

// Virtual Machine priority
func (o AmlComputePropertiesResponsePtrOutput) VmPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmPriority
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine Size
func (o AmlComputePropertiesResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlComputePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute.
type AmlComputeResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'AmlCompute'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of AmlCompute
	Properties *AmlComputePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for AmlComputeResponse
func (val *AmlComputeResponse) Defaults() *AmlComputeResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// An Azure Machine Learning compute.
type AmlComputeResponseOutput struct{ *pulumi.OutputState }

func (AmlComputeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlComputeResponse)(nil)).Elem()
}

func (o AmlComputeResponseOutput) ToAmlComputeResponseOutput() AmlComputeResponseOutput {
	return o
}

func (o AmlComputeResponseOutput) ToAmlComputeResponseOutputWithContext(ctx context.Context) AmlComputeResponseOutput {
	return o
}

// Location for the underlying compute
func (o AmlComputeResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'AmlCompute'.
func (o AmlComputeResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o AmlComputeResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o AmlComputeResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o AmlComputeResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o AmlComputeResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v AmlComputeResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o AmlComputeResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of AmlCompute
func (o AmlComputeResponseOutput) Properties() AmlComputePropertiesResponsePtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *AmlComputePropertiesResponse { return v.Properties }).(AmlComputePropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o AmlComputeResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v AmlComputeResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o AmlComputeResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v AmlComputeResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o AmlComputeResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AmlComputeResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// AML Token identity configuration.
type AmlToken struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AmlTokenInput is an input type that accepts AmlTokenArgs and AmlTokenOutput values.
// You can construct a concrete instance of `AmlTokenInput` via:
//
//	AmlTokenArgs{...}
type AmlTokenInput interface {
	pulumi.Input

	ToAmlTokenOutput() AmlTokenOutput
	ToAmlTokenOutputWithContext(context.Context) AmlTokenOutput
}

// AML Token identity configuration.
type AmlTokenArgs struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
}

func (AmlTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (i AmlTokenArgs) ToAmlTokenOutput() AmlTokenOutput {
	return i.ToAmlTokenOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput)
}

func (i AmlTokenArgs) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput).ToAmlTokenPtrOutputWithContext(ctx)
}

// AmlTokenPtrInput is an input type that accepts AmlTokenArgs, AmlTokenPtr and AmlTokenPtrOutput values.
// You can construct a concrete instance of `AmlTokenPtrInput` via:
//
//	        AmlTokenArgs{...}
//
//	or:
//
//	        nil
type AmlTokenPtrInput interface {
	pulumi.Input

	ToAmlTokenPtrOutput() AmlTokenPtrOutput
	ToAmlTokenPtrOutputWithContext(context.Context) AmlTokenPtrOutput
}

type amlTokenPtrType AmlTokenArgs

func AmlTokenPtr(v *AmlTokenArgs) AmlTokenPtrInput {
	return (*amlTokenPtrType)(v)
}

func (*amlTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenPtrOutput)
}

// AML Token identity configuration.
type AmlTokenOutput struct{ *pulumi.OutputState }

func (AmlTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (o AmlTokenOutput) ToAmlTokenOutput() AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (o AmlTokenOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlToken) *AmlToken {
		return &v
	}).(AmlTokenPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlToken) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenPtrOutput struct{ *pulumi.OutputState }

func (AmlTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) Elem() AmlTokenOutput {
	return o.ApplyT(func(v *AmlToken) AmlToken {
		if v != nil {
			return *v
		}
		var ret AmlToken
		return ret
	}).(AmlTokenOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlToken) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// AML Token identity configuration.
type AmlTokenResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AML Token identity configuration.
type AmlTokenResponseOutput struct{ *pulumi.OutputState }

func (AmlTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutput() AmlTokenResponseOutput {
	return o
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutputWithContext(ctx context.Context) AmlTokenResponseOutput {
	return o
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlTokenResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (AmlTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutput() AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutputWithContext(ctx context.Context) AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) Elem() AmlTokenResponseOutput {
	return o.ApplyT(func(v *AmlTokenResponse) AmlTokenResponse {
		if v != nil {
			return *v
		}
		var ret AmlTokenResponse
		return ret
	}).(AmlTokenResponseOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ApiKey'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Api key object for workspace connection credential.
	Credentials *WorkspaceConnectionApiKeyResponse `pulumi:"credentials"`
	ExpiryTime  *string                            `pulumi:"expiryTime"`
	Metadata    interface{}                        `pulumi:"metadata"`
	Target      *string                            `pulumi:"target"`
}

// This connection type covers the generic ApiKey auth connection categories, for examples:
// AzureOpenAI:
//
//	Category:= AzureOpenAI
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {ApiKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {ApiBase}
//
// CognitiveService:
//
//	Category:= CognitiveService
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {SubscriptionKey} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= ServiceRegion={serviceRegion}
//
// CognitiveSearch:
//
//	Category:= CognitiveSearch
//	AuthType:= ApiKey (as type discriminator)
//	Credentials:= {Key} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.ApiKey
//	Target:= {Endpoint}
//
// Use Metadata property bag for ApiType, ApiVersion, Kind and other metadata fields
type ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyAuthWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ToApiKeyAuthWorkspaceConnectionPropertiesResponseOutput() ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ToApiKeyAuthWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ApiKey'.
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Api key object for workspace connection credential.
func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionApiKeyResponsePtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionApiKeyResponse {
		return v.Credentials
	}).(WorkspaceConnectionApiKeyResponsePtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiKeyAuthWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceId struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ArmResourceIdInput is an input type that accepts ArmResourceIdArgs and ArmResourceIdOutput values.
// You can construct a concrete instance of `ArmResourceIdInput` via:
//
//	ArmResourceIdArgs{...}
type ArmResourceIdInput interface {
	pulumi.Input

	ToArmResourceIdOutput() ArmResourceIdOutput
	ToArmResourceIdOutputWithContext(context.Context) ArmResourceIdOutput
}

// ARM ResourceId of a resource
type ArmResourceIdArgs struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ArmResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (i ArmResourceIdArgs) ToArmResourceIdOutput() ArmResourceIdOutput {
	return i.ToArmResourceIdOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput)
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i ArmResourceIdArgs) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdOutput).ToArmResourceIdPtrOutputWithContext(ctx)
}

// ArmResourceIdPtrInput is an input type that accepts ArmResourceIdArgs, ArmResourceIdPtr and ArmResourceIdPtrOutput values.
// You can construct a concrete instance of `ArmResourceIdPtrInput` via:
//
//	        ArmResourceIdArgs{...}
//
//	or:
//
//	        nil
type ArmResourceIdPtrInput interface {
	pulumi.Input

	ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput
	ToArmResourceIdPtrOutputWithContext(context.Context) ArmResourceIdPtrOutput
}

type armResourceIdPtrType ArmResourceIdArgs

func ArmResourceIdPtr(v *ArmResourceIdArgs) ArmResourceIdPtrInput {
	return (*armResourceIdPtrType)(v)
}

func (*armResourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return i.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (i *armResourceIdPtrType) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmResourceIdPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdOutput struct{ *pulumi.OutputState }

func (ArmResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdOutput) ToArmResourceIdOutput() ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdOutputWithContext(ctx context.Context) ArmResourceIdOutput {
	return o
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o.ToArmResourceIdPtrOutputWithContext(context.Background())
}

func (o ArmResourceIdOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArmResourceId) *ArmResourceId {
		return &v
	}).(ArmResourceIdPtrOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceId) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceId)(nil)).Elem()
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutput() ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) ToArmResourceIdPtrOutputWithContext(ctx context.Context) ArmResourceIdPtrOutput {
	return o
}

func (o ArmResourceIdPtrOutput) Elem() ArmResourceIdOutput {
	return o.ApplyT(func(v *ArmResourceId) ArmResourceId {
		if v != nil {
			return *v
		}
		var ret ArmResourceId
		return ret
	}).(ArmResourceIdOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceId) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// ARM ResourceId of a resource
type ArmResourceIdResponse struct {
	// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
	// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
	ResourceId *string `pulumi:"resourceId"`
}

// ARM ResourceId of a resource
type ArmResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutput() ArmResourceIdResponseOutput {
	return o
}

func (o ArmResourceIdResponseOutput) ToArmResourceIdResponseOutputWithContext(ctx context.Context) ArmResourceIdResponseOutput {
	return o
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArmResourceIdResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ArmResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ArmResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArmResourceIdResponse)(nil)).Elem()
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutput() ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) ToArmResourceIdResponsePtrOutputWithContext(ctx context.Context) ArmResourceIdResponsePtrOutput {
	return o
}

func (o ArmResourceIdResponsePtrOutput) Elem() ArmResourceIdResponseOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) ArmResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ArmResourceIdResponse
		return ret
	}).(ArmResourceIdResponseOutput)
}

// Arm ResourceId is in the format "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Storage/storageAccounts/{StorageAccountName}"
// or "/subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{AcrName}"
func (o ArmResourceIdResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArmResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUser struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

// AssignedUserInput is an input type that accepts AssignedUserArgs and AssignedUserOutput values.
// You can construct a concrete instance of `AssignedUserInput` via:
//
//	AssignedUserArgs{...}
type AssignedUserInput interface {
	pulumi.Input

	ToAssignedUserOutput() AssignedUserOutput
	ToAssignedUserOutputWithContext(context.Context) AssignedUserOutput
}

// A user that can be assigned to a compute instance.
type AssignedUserArgs struct {
	// User’s AAD Object Id.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (AssignedUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUser)(nil)).Elem()
}

func (i AssignedUserArgs) ToAssignedUserOutput() AssignedUserOutput {
	return i.ToAssignedUserOutputWithContext(context.Background())
}

func (i AssignedUserArgs) ToAssignedUserOutputWithContext(ctx context.Context) AssignedUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserOutput)
}

func (i AssignedUserArgs) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return i.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (i AssignedUserArgs) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserOutput).ToAssignedUserPtrOutputWithContext(ctx)
}

// AssignedUserPtrInput is an input type that accepts AssignedUserArgs, AssignedUserPtr and AssignedUserPtrOutput values.
// You can construct a concrete instance of `AssignedUserPtrInput` via:
//
//	        AssignedUserArgs{...}
//
//	or:
//
//	        nil
type AssignedUserPtrInput interface {
	pulumi.Input

	ToAssignedUserPtrOutput() AssignedUserPtrOutput
	ToAssignedUserPtrOutputWithContext(context.Context) AssignedUserPtrOutput
}

type assignedUserPtrType AssignedUserArgs

func AssignedUserPtr(v *AssignedUserArgs) AssignedUserPtrInput {
	return (*assignedUserPtrType)(v)
}

func (*assignedUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUser)(nil)).Elem()
}

func (i *assignedUserPtrType) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return i.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (i *assignedUserPtrType) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssignedUserPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUserOutput struct{ *pulumi.OutputState }

func (AssignedUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUser)(nil)).Elem()
}

func (o AssignedUserOutput) ToAssignedUserOutput() AssignedUserOutput {
	return o
}

func (o AssignedUserOutput) ToAssignedUserOutputWithContext(ctx context.Context) AssignedUserOutput {
	return o
}

func (o AssignedUserOutput) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return o.ToAssignedUserPtrOutputWithContext(context.Background())
}

func (o AssignedUserOutput) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AssignedUser) *AssignedUser {
		return &v
	}).(AssignedUserPtrOutput)
}

// User’s AAD Object Id.
func (o AssignedUserOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUser) string { return v.ObjectId }).(pulumi.StringOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUser) string { return v.TenantId }).(pulumi.StringOutput)
}

type AssignedUserPtrOutput struct{ *pulumi.OutputState }

func (AssignedUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUser)(nil)).Elem()
}

func (o AssignedUserPtrOutput) ToAssignedUserPtrOutput() AssignedUserPtrOutput {
	return o
}

func (o AssignedUserPtrOutput) ToAssignedUserPtrOutputWithContext(ctx context.Context) AssignedUserPtrOutput {
	return o
}

func (o AssignedUserPtrOutput) Elem() AssignedUserOutput {
	return o.ApplyT(func(v *AssignedUser) AssignedUser {
		if v != nil {
			return *v
		}
		var ret AssignedUser
		return ret
	}).(AssignedUserOutput)
}

// User’s AAD Object Id.
func (o AssignedUserPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUser) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUser) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// A user that can be assigned to a compute instance.
type AssignedUserResponse struct {
	// User’s AAD Object Id.
	ObjectId string `pulumi:"objectId"`
	// User’s AAD Tenant Id.
	TenantId string `pulumi:"tenantId"`
}

// A user that can be assigned to a compute instance.
type AssignedUserResponseOutput struct{ *pulumi.OutputState }

func (AssignedUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AssignedUserResponse)(nil)).Elem()
}

func (o AssignedUserResponseOutput) ToAssignedUserResponseOutput() AssignedUserResponseOutput {
	return o
}

func (o AssignedUserResponseOutput) ToAssignedUserResponseOutputWithContext(ctx context.Context) AssignedUserResponseOutput {
	return o
}

// User’s AAD Object Id.
func (o AssignedUserResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUserResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AssignedUserResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

type AssignedUserResponsePtrOutput struct{ *pulumi.OutputState }

func (AssignedUserResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssignedUserResponse)(nil)).Elem()
}

func (o AssignedUserResponsePtrOutput) ToAssignedUserResponsePtrOutput() AssignedUserResponsePtrOutput {
	return o
}

func (o AssignedUserResponsePtrOutput) ToAssignedUserResponsePtrOutputWithContext(ctx context.Context) AssignedUserResponsePtrOutput {
	return o
}

func (o AssignedUserResponsePtrOutput) Elem() AssignedUserResponseOutput {
	return o.ApplyT(func(v *AssignedUserResponse) AssignedUserResponse {
		if v != nil {
			return *v
		}
		var ret AssignedUserResponse
		return ret
	}).(AssignedUserResponseOutput)
}

// User’s AAD Object Id.
func (o AssignedUserResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUserResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// User’s AAD Tenant Id.
func (o AssignedUserResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssignedUserResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

type AutoDeleteSetting struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSetting
func (val *AutoDeleteSetting) Defaults() *AutoDeleteSetting {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

// AutoDeleteSettingInput is an input type that accepts AutoDeleteSettingArgs and AutoDeleteSettingOutput values.
// You can construct a concrete instance of `AutoDeleteSettingInput` via:
//
//	AutoDeleteSettingArgs{...}
type AutoDeleteSettingInput interface {
	pulumi.Input

	ToAutoDeleteSettingOutput() AutoDeleteSettingOutput
	ToAutoDeleteSettingOutputWithContext(context.Context) AutoDeleteSettingOutput
}

type AutoDeleteSettingArgs struct {
	// When to check if an asset is expired
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Expiration condition value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingArgs
func (val *AutoDeleteSettingArgs) Defaults() *AutoDeleteSettingArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		tmp.Condition = pulumi.StringPtr("CreatedGreaterThan")
	}
	return &tmp
}
func (AutoDeleteSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return i.ToAutoDeleteSettingOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput)
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i AutoDeleteSettingArgs) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingOutput).ToAutoDeleteSettingPtrOutputWithContext(ctx)
}

// AutoDeleteSettingPtrInput is an input type that accepts AutoDeleteSettingArgs, AutoDeleteSettingPtr and AutoDeleteSettingPtrOutput values.
// You can construct a concrete instance of `AutoDeleteSettingPtrInput` via:
//
//	        AutoDeleteSettingArgs{...}
//
//	or:
//
//	        nil
type AutoDeleteSettingPtrInput interface {
	pulumi.Input

	ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput
	ToAutoDeleteSettingPtrOutputWithContext(context.Context) AutoDeleteSettingPtrOutput
}

type autoDeleteSettingPtrType AutoDeleteSettingArgs

func AutoDeleteSettingPtr(v *AutoDeleteSettingArgs) AutoDeleteSettingPtrInput {
	return (*autoDeleteSettingPtrType)(v)
}

func (*autoDeleteSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return i.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (i *autoDeleteSettingPtrType) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoDeleteSettingPtrOutput)
}

type AutoDeleteSettingOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutput() AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingOutputWithContext(ctx context.Context) AutoDeleteSettingOutput {
	return o
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o.ToAutoDeleteSettingPtrOutputWithContext(context.Background())
}

func (o AutoDeleteSettingOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoDeleteSetting) *AutoDeleteSetting {
		return &v
	}).(AutoDeleteSettingPtrOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSetting) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingPtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSetting)(nil)).Elem()
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutput() AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) ToAutoDeleteSettingPtrOutputWithContext(ctx context.Context) AutoDeleteSettingPtrOutput {
	return o
}

func (o AutoDeleteSettingPtrOutput) Elem() AutoDeleteSettingOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) AutoDeleteSetting {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSetting
		return ret
	}).(AutoDeleteSettingOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSetting) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponse struct {
	// When to check if an asset is expired
	Condition *string `pulumi:"condition"`
	// Expiration condition value.
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for AutoDeleteSettingResponse
func (val *AutoDeleteSettingResponse) Defaults() *AutoDeleteSettingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Condition == nil {
		condition_ := "CreatedGreaterThan"
		tmp.Condition = &condition_
	}
	return &tmp
}

type AutoDeleteSettingResponseOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutput() AutoDeleteSettingResponseOutput {
	return o
}

func (o AutoDeleteSettingResponseOutput) ToAutoDeleteSettingResponseOutputWithContext(ctx context.Context) AutoDeleteSettingResponseOutput {
	return o
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponseOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoDeleteSettingResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AutoDeleteSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoDeleteSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoDeleteSettingResponse)(nil)).Elem()
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutput() AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) ToAutoDeleteSettingResponsePtrOutputWithContext(ctx context.Context) AutoDeleteSettingResponsePtrOutput {
	return o
}

func (o AutoDeleteSettingResponsePtrOutput) Elem() AutoDeleteSettingResponseOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) AutoDeleteSettingResponse {
		if v != nil {
			return *v
		}
		var ret AutoDeleteSettingResponse
		return ret
	}).(AutoDeleteSettingResponseOutput)
}

// When to check if an asset is expired
func (o AutoDeleteSettingResponsePtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Condition
	}).(pulumi.StringPtrOutput)
}

// Expiration condition value.
func (o AutoDeleteSettingResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoDeleteSettingResponse) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoForecastHorizonInput is an input type that accepts AutoForecastHorizonArgs and AutoForecastHorizonOutput values.
// You can construct a concrete instance of `AutoForecastHorizonInput` via:
//
//	AutoForecastHorizonArgs{...}
type AutoForecastHorizonInput interface {
	pulumi.Input

	ToAutoForecastHorizonOutput() AutoForecastHorizonOutput
	ToAutoForecastHorizonOutputWithContext(context.Context) AutoForecastHorizonOutput
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return i.ToAutoForecastHorizonOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput)
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput).ToAutoForecastHorizonPtrOutputWithContext(ctx)
}

// AutoForecastHorizonPtrInput is an input type that accepts AutoForecastHorizonArgs, AutoForecastHorizonPtr and AutoForecastHorizonPtrOutput values.
// You can construct a concrete instance of `AutoForecastHorizonPtrInput` via:
//
//	        AutoForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type AutoForecastHorizonPtrInput interface {
	pulumi.Input

	ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput
	ToAutoForecastHorizonPtrOutputWithContext(context.Context) AutoForecastHorizonPtrOutput
}

type autoForecastHorizonPtrType AutoForecastHorizonArgs

func AutoForecastHorizonPtr(v *AutoForecastHorizonArgs) AutoForecastHorizonPtrInput {
	return (*autoForecastHorizonPtrType)(v)
}

func (*autoForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoForecastHorizon) *AutoForecastHorizon {
		return &v
	}).(AutoForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) Elem() AutoForecastHorizonOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) AutoForecastHorizon {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizon
		return ret
	}).(AutoForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutput() AutoForecastHorizonResponseOutput {
	return o
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutputWithContext(ctx context.Context) AutoForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutput() AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutputWithContext(ctx context.Context) AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) Elem() AutoForecastHorizonResponseOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) AutoForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizonResponse
		return ret
	}).(AutoForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJob
func (val *AutoMLJob) Defaults() *AutoMLJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJobInput is an input type that accepts AutoMLJobArgs and AutoMLJobOutput values.
// You can construct a concrete instance of `AutoMLJobInput` via:
//
//	AutoMLJobArgs{...}
type AutoMLJobInput interface {
	pulumi.Input

	ToAutoMLJobOutput() AutoMLJobOutput
	ToAutoMLJobOutputWithContext(context.Context) AutoMLJobOutput
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails pulumi.Input `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobArgs
func (val *AutoMLJobArgs) Defaults() *AutoMLJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (AutoMLJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (i AutoMLJobArgs) ToAutoMLJobOutput() AutoMLJobOutput {
	return i.ToAutoMLJobOutputWithContext(context.Background())
}

func (i AutoMLJobArgs) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoMLJobOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobOutput struct{ *pulumi.OutputState }

func (AutoMLJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (o AutoMLJobOutput) ToAutoMLJobOutput() AutoMLJobOutput {
	return o
}

func (o AutoMLJobOutput) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o AutoMLJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o AutoMLJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobResponse
func (val *AutoMLJobResponse) Defaults() *AutoMLJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponseOutput struct{ *pulumi.OutputState }

func (AutoMLJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJobResponse)(nil)).Elem()
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutput() AutoMLJobResponseOutput {
	return o
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutputWithContext(ctx context.Context) AutoMLJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o AutoMLJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o AutoMLJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o AutoMLJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobResponseOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoNCrossValidationsInput is an input type that accepts AutoNCrossValidationsArgs and AutoNCrossValidationsOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsInput` via:
//
//	AutoNCrossValidationsArgs{...}
type AutoNCrossValidationsInput interface {
	pulumi.Input

	ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput
	ToAutoNCrossValidationsOutputWithContext(context.Context) AutoNCrossValidationsOutput
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return i.ToAutoNCrossValidationsOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput)
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput).ToAutoNCrossValidationsPtrOutputWithContext(ctx)
}

// AutoNCrossValidationsPtrInput is an input type that accepts AutoNCrossValidationsArgs, AutoNCrossValidationsPtr and AutoNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsPtrInput` via:
//
//	        AutoNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type AutoNCrossValidationsPtrInput interface {
	pulumi.Input

	ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput
	ToAutoNCrossValidationsPtrOutputWithContext(context.Context) AutoNCrossValidationsPtrOutput
}

type autoNCrossValidationsPtrType AutoNCrossValidationsArgs

func AutoNCrossValidationsPtr(v *AutoNCrossValidationsArgs) AutoNCrossValidationsPtrInput {
	return (*autoNCrossValidationsPtrType)(v)
}

func (*autoNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoNCrossValidations) *AutoNCrossValidations {
		return &v
	}).(AutoNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) Elem() AutoNCrossValidationsOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) AutoNCrossValidations {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidations
		return ret
	}).(AutoNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutput() AutoNCrossValidationsResponseOutput {
	return o
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutputWithContext(ctx context.Context) AutoNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutput() AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) Elem() AutoNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) AutoNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidationsResponse
		return ret
	}).(AutoNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Auto pause properties
type AutoPauseProperties struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// AutoPausePropertiesInput is an input type that accepts AutoPausePropertiesArgs and AutoPausePropertiesOutput values.
// You can construct a concrete instance of `AutoPausePropertiesInput` via:
//
//	AutoPausePropertiesArgs{...}
type AutoPausePropertiesInput interface {
	pulumi.Input

	ToAutoPausePropertiesOutput() AutoPausePropertiesOutput
	ToAutoPausePropertiesOutputWithContext(context.Context) AutoPausePropertiesOutput
}

// Auto pause properties
type AutoPausePropertiesArgs struct {
	DelayInMinutes pulumi.IntPtrInput  `pulumi:"delayInMinutes"`
	Enabled        pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (AutoPausePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPauseProperties)(nil)).Elem()
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesOutput() AutoPausePropertiesOutput {
	return i.ToAutoPausePropertiesOutputWithContext(context.Background())
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesOutputWithContext(ctx context.Context) AutoPausePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesOutput)
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return i.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoPausePropertiesArgs) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesOutput).ToAutoPausePropertiesPtrOutputWithContext(ctx)
}

// AutoPausePropertiesPtrInput is an input type that accepts AutoPausePropertiesArgs, AutoPausePropertiesPtr and AutoPausePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoPausePropertiesPtrInput` via:
//
//	        AutoPausePropertiesArgs{...}
//
//	or:
//
//	        nil
type AutoPausePropertiesPtrInput interface {
	pulumi.Input

	ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput
	ToAutoPausePropertiesPtrOutputWithContext(context.Context) AutoPausePropertiesPtrOutput
}

type autoPausePropertiesPtrType AutoPausePropertiesArgs

func AutoPausePropertiesPtr(v *AutoPausePropertiesArgs) AutoPausePropertiesPtrInput {
	return (*autoPausePropertiesPtrType)(v)
}

func (*autoPausePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPauseProperties)(nil)).Elem()
}

func (i *autoPausePropertiesPtrType) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return i.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoPausePropertiesPtrType) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoPausePropertiesPtrOutput)
}

// Auto pause properties
type AutoPausePropertiesOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPauseProperties)(nil)).Elem()
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesOutput() AutoPausePropertiesOutput {
	return o
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesOutputWithContext(ctx context.Context) AutoPausePropertiesOutput {
	return o
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return o.ToAutoPausePropertiesPtrOutputWithContext(context.Background())
}

func (o AutoPausePropertiesOutput) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoPauseProperties) *AutoPauseProperties {
		return &v
	}).(AutoPausePropertiesPtrOutput)
}

func (o AutoPausePropertiesOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoPauseProperties) *int { return v.DelayInMinutes }).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoPauseProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutoPausePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPauseProperties)(nil)).Elem()
}

func (o AutoPausePropertiesPtrOutput) ToAutoPausePropertiesPtrOutput() AutoPausePropertiesPtrOutput {
	return o
}

func (o AutoPausePropertiesPtrOutput) ToAutoPausePropertiesPtrOutputWithContext(ctx context.Context) AutoPausePropertiesPtrOutput {
	return o
}

func (o AutoPausePropertiesPtrOutput) Elem() AutoPausePropertiesOutput {
	return o.ApplyT(func(v *AutoPauseProperties) AutoPauseProperties {
		if v != nil {
			return *v
		}
		var ret AutoPauseProperties
		return ret
	}).(AutoPausePropertiesOutput)
}

func (o AutoPausePropertiesPtrOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoPauseProperties) *int {
		if v == nil {
			return nil
		}
		return v.DelayInMinutes
	}).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoPauseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Auto pause properties
type AutoPausePropertiesResponse struct {
	DelayInMinutes *int  `pulumi:"delayInMinutes"`
	Enabled        *bool `pulumi:"enabled"`
}

// Auto pause properties
type AutoPausePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoPausePropertiesResponse)(nil)).Elem()
}

func (o AutoPausePropertiesResponseOutput) ToAutoPausePropertiesResponseOutput() AutoPausePropertiesResponseOutput {
	return o
}

func (o AutoPausePropertiesResponseOutput) ToAutoPausePropertiesResponseOutputWithContext(ctx context.Context) AutoPausePropertiesResponseOutput {
	return o
}

func (o AutoPausePropertiesResponseOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoPausePropertiesResponse) *int { return v.DelayInMinutes }).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoPausePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type AutoPausePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoPausePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoPausePropertiesResponse)(nil)).Elem()
}

func (o AutoPausePropertiesResponsePtrOutput) ToAutoPausePropertiesResponsePtrOutput() AutoPausePropertiesResponsePtrOutput {
	return o
}

func (o AutoPausePropertiesResponsePtrOutput) ToAutoPausePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoPausePropertiesResponsePtrOutput {
	return o
}

func (o AutoPausePropertiesResponsePtrOutput) Elem() AutoPausePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) AutoPausePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AutoPausePropertiesResponse
		return ret
	}).(AutoPausePropertiesResponseOutput)
}

func (o AutoPausePropertiesResponsePtrOutput) DelayInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayInMinutes
	}).(pulumi.IntPtrOutput)
}

func (o AutoPausePropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoPausePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Auto scale properties
type AutoScaleProperties struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

// AutoScalePropertiesInput is an input type that accepts AutoScalePropertiesArgs and AutoScalePropertiesOutput values.
// You can construct a concrete instance of `AutoScalePropertiesInput` via:
//
//	AutoScalePropertiesArgs{...}
type AutoScalePropertiesInput interface {
	pulumi.Input

	ToAutoScalePropertiesOutput() AutoScalePropertiesOutput
	ToAutoScalePropertiesOutputWithContext(context.Context) AutoScalePropertiesOutput
}

// Auto scale properties
type AutoScalePropertiesArgs struct {
	Enabled      pulumi.BoolPtrInput `pulumi:"enabled"`
	MaxNodeCount pulumi.IntPtrInput  `pulumi:"maxNodeCount"`
	MinNodeCount pulumi.IntPtrInput  `pulumi:"minNodeCount"`
}

func (AutoScalePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleProperties)(nil)).Elem()
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesOutput() AutoScalePropertiesOutput {
	return i.ToAutoScalePropertiesOutputWithContext(context.Background())
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesOutputWithContext(ctx context.Context) AutoScalePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesOutput)
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return i.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (i AutoScalePropertiesArgs) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesOutput).ToAutoScalePropertiesPtrOutputWithContext(ctx)
}

// AutoScalePropertiesPtrInput is an input type that accepts AutoScalePropertiesArgs, AutoScalePropertiesPtr and AutoScalePropertiesPtrOutput values.
// You can construct a concrete instance of `AutoScalePropertiesPtrInput` via:
//
//	        AutoScalePropertiesArgs{...}
//
//	or:
//
//	        nil
type AutoScalePropertiesPtrInput interface {
	pulumi.Input

	ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput
	ToAutoScalePropertiesPtrOutputWithContext(context.Context) AutoScalePropertiesPtrOutput
}

type autoScalePropertiesPtrType AutoScalePropertiesArgs

func AutoScalePropertiesPtr(v *AutoScalePropertiesArgs) AutoScalePropertiesPtrInput {
	return (*autoScalePropertiesPtrType)(v)
}

func (*autoScalePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleProperties)(nil)).Elem()
}

func (i *autoScalePropertiesPtrType) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return i.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (i *autoScalePropertiesPtrType) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoScalePropertiesPtrOutput)
}

// Auto scale properties
type AutoScalePropertiesOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScaleProperties)(nil)).Elem()
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesOutput() AutoScalePropertiesOutput {
	return o
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesOutputWithContext(ctx context.Context) AutoScalePropertiesOutput {
	return o
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return o.ToAutoScalePropertiesPtrOutputWithContext(context.Background())
}

func (o AutoScalePropertiesOutput) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoScaleProperties) *AutoScaleProperties {
		return &v
	}).(AutoScalePropertiesPtrOutput)
}

func (o AutoScalePropertiesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScaleProperties) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type AutoScalePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScaleProperties)(nil)).Elem()
}

func (o AutoScalePropertiesPtrOutput) ToAutoScalePropertiesPtrOutput() AutoScalePropertiesPtrOutput {
	return o
}

func (o AutoScalePropertiesPtrOutput) ToAutoScalePropertiesPtrOutputWithContext(ctx context.Context) AutoScalePropertiesPtrOutput {
	return o
}

func (o AutoScalePropertiesPtrOutput) Elem() AutoScalePropertiesOutput {
	return o.ApplyT(func(v *AutoScaleProperties) AutoScaleProperties {
		if v != nil {
			return *v
		}
		var ret AutoScaleProperties
		return ret
	}).(AutoScalePropertiesOutput)
}

func (o AutoScalePropertiesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScaleProperties) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Auto scale properties
type AutoScalePropertiesResponse struct {
	Enabled      *bool `pulumi:"enabled"`
	MaxNodeCount *int  `pulumi:"maxNodeCount"`
	MinNodeCount *int  `pulumi:"minNodeCount"`
}

// Auto scale properties
type AutoScalePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoScalePropertiesResponse)(nil)).Elem()
}

func (o AutoScalePropertiesResponseOutput) ToAutoScalePropertiesResponseOutput() AutoScalePropertiesResponseOutput {
	return o
}

func (o AutoScalePropertiesResponseOutput) ToAutoScalePropertiesResponseOutputWithContext(ctx context.Context) AutoScalePropertiesResponseOutput {
	return o
}

func (o AutoScalePropertiesResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesResponseOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesResponseOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoScalePropertiesResponse) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type AutoScalePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoScalePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoScalePropertiesResponse)(nil)).Elem()
}

func (o AutoScalePropertiesResponsePtrOutput) ToAutoScalePropertiesResponsePtrOutput() AutoScalePropertiesResponsePtrOutput {
	return o
}

func (o AutoScalePropertiesResponsePtrOutput) ToAutoScalePropertiesResponsePtrOutputWithContext(ctx context.Context) AutoScalePropertiesResponsePtrOutput {
	return o
}

func (o AutoScalePropertiesResponsePtrOutput) Elem() AutoScalePropertiesResponseOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) AutoScalePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret AutoScalePropertiesResponse
		return ret
	}).(AutoScalePropertiesResponseOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

func (o AutoScalePropertiesResponsePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoScalePropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type AutoSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoSeasonalityInput is an input type that accepts AutoSeasonalityArgs and AutoSeasonalityOutput values.
// You can construct a concrete instance of `AutoSeasonalityInput` via:
//
//	AutoSeasonalityArgs{...}
type AutoSeasonalityInput interface {
	pulumi.Input

	ToAutoSeasonalityOutput() AutoSeasonalityOutput
	ToAutoSeasonalityOutputWithContext(context.Context) AutoSeasonalityOutput
}

type AutoSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return i.ToAutoSeasonalityOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput)
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput).ToAutoSeasonalityPtrOutputWithContext(ctx)
}

// AutoSeasonalityPtrInput is an input type that accepts AutoSeasonalityArgs, AutoSeasonalityPtr and AutoSeasonalityPtrOutput values.
// You can construct a concrete instance of `AutoSeasonalityPtrInput` via:
//
//	        AutoSeasonalityArgs{...}
//
//	or:
//
//	        nil
type AutoSeasonalityPtrInput interface {
	pulumi.Input

	ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput
	ToAutoSeasonalityPtrOutputWithContext(context.Context) AutoSeasonalityPtrOutput
}

type autoSeasonalityPtrType AutoSeasonalityArgs

func AutoSeasonalityPtr(v *AutoSeasonalityArgs) AutoSeasonalityPtrInput {
	return (*autoSeasonalityPtrType)(v)
}

func (*autoSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityPtrOutput)
}

type AutoSeasonalityOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoSeasonality) *AutoSeasonality {
		return &v
	}).(AutoSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) Elem() AutoSeasonalityOutput {
	return o.ApplyT(func(v *AutoSeasonality) AutoSeasonality {
		if v != nil {
			return *v
		}
		var ret AutoSeasonality
		return ret
	}).(AutoSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutput() AutoSeasonalityResponseOutput {
	return o
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutputWithContext(ctx context.Context) AutoSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutput() AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutputWithContext(ctx context.Context) AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) Elem() AutoSeasonalityResponseOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) AutoSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret AutoSeasonalityResponse
		return ret
	}).(AutoSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetLagsInput is an input type that accepts AutoTargetLagsArgs and AutoTargetLagsOutput values.
// You can construct a concrete instance of `AutoTargetLagsInput` via:
//
//	AutoTargetLagsArgs{...}
type AutoTargetLagsInput interface {
	pulumi.Input

	ToAutoTargetLagsOutput() AutoTargetLagsOutput
	ToAutoTargetLagsOutputWithContext(context.Context) AutoTargetLagsOutput
}

type AutoTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return i.ToAutoTargetLagsOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput)
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput).ToAutoTargetLagsPtrOutputWithContext(ctx)
}

// AutoTargetLagsPtrInput is an input type that accepts AutoTargetLagsArgs, AutoTargetLagsPtr and AutoTargetLagsPtrOutput values.
// You can construct a concrete instance of `AutoTargetLagsPtrInput` via:
//
//	        AutoTargetLagsArgs{...}
//
//	or:
//
//	        nil
type AutoTargetLagsPtrInput interface {
	pulumi.Input

	ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput
	ToAutoTargetLagsPtrOutputWithContext(context.Context) AutoTargetLagsPtrOutput
}

type autoTargetLagsPtrType AutoTargetLagsArgs

func AutoTargetLagsPtr(v *AutoTargetLagsArgs) AutoTargetLagsPtrInput {
	return (*autoTargetLagsPtrType)(v)
}

func (*autoTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsPtrOutput)
}

type AutoTargetLagsOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetLags) *AutoTargetLags {
		return &v
	}).(AutoTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) Elem() AutoTargetLagsOutput {
	return o.ApplyT(func(v *AutoTargetLags) AutoTargetLags {
		if v != nil {
			return *v
		}
		var ret AutoTargetLags
		return ret
	}).(AutoTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutput() AutoTargetLagsResponseOutput {
	return o
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutputWithContext(ctx context.Context) AutoTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutput() AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutputWithContext(ctx context.Context) AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) Elem() AutoTargetLagsResponseOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) AutoTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetLagsResponse
		return ret
	}).(AutoTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetRollingWindowSizeInput is an input type that accepts AutoTargetRollingWindowSizeArgs and AutoTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizeInput` via:
//
//	AutoTargetRollingWindowSizeArgs{...}
type AutoTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput
	ToAutoTargetRollingWindowSizeOutputWithContext(context.Context) AutoTargetRollingWindowSizeOutput
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return i.ToAutoTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput)
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput).ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// AutoTargetRollingWindowSizePtrInput is an input type that accepts AutoTargetRollingWindowSizeArgs, AutoTargetRollingWindowSizePtr and AutoTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizePtrInput` via:
//
//	        AutoTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type AutoTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput
	ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Context) AutoTargetRollingWindowSizePtrOutput
}

type autoTargetRollingWindowSizePtrType AutoTargetRollingWindowSizeArgs

func AutoTargetRollingWindowSizePtr(v *AutoTargetRollingWindowSizeArgs) AutoTargetRollingWindowSizePtrInput {
	return (*autoTargetRollingWindowSizePtrType)(v)
}

func (*autoTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizePtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetRollingWindowSize) *AutoTargetRollingWindowSize {
		return &v
	}).(AutoTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) Elem() AutoTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) AutoTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSize
		return ret
	}).(AutoTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutput() AutoTargetRollingWindowSizeResponseOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutput() AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) Elem() AutoTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) AutoTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSizeResponse
		return ret
	}).(AutoTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastore struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastore
func (val *AzureBlobDatastore) Defaults() *AzureBlobDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureBlobDatastoreInput is an input type that accepts AzureBlobDatastoreArgs and AzureBlobDatastoreOutput values.
// You can construct a concrete instance of `AzureBlobDatastoreInput` via:
//
//	AzureBlobDatastoreArgs{...}
type AzureBlobDatastoreInput interface {
	pulumi.Input

	ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput
	ToAzureBlobDatastoreOutputWithContext(context.Context) AzureBlobDatastoreOutput
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreArgs struct {
	// Storage account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Storage account container name.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreArgs
func (val *AzureBlobDatastoreArgs) Defaults() *AzureBlobDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureBlobDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return i.ToAzureBlobDatastoreOutputWithContext(context.Background())
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatastoreOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return o
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponse struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreResponse
func (val *AzureBlobDatastoreResponse) Defaults() *AzureBlobDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastoreResponse)(nil)).Elem()
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutput() AzureBlobDatastoreResponseOutput {
	return o
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutputWithContext(ctx context.Context) AzureBlobDatastoreResponseOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureBlobDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1Datastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1Datastore
func (val *AzureDataLakeGen1Datastore) Defaults() *AzureDataLakeGen1Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen1DatastoreInput is an input type that accepts AzureDataLakeGen1DatastoreArgs and AzureDataLakeGen1DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen1DatastoreInput` via:
//
//	AzureDataLakeGen1DatastoreArgs{...}
type AzureDataLakeGen1DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput
	ToAzureDataLakeGen1DatastoreOutputWithContext(context.Context) AzureDataLakeGen1DatastoreOutput
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreArgs struct {
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName pulumi.StringInput `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreArgs
func (val *AzureDataLakeGen1DatastoreArgs) Defaults() *AzureDataLakeGen1DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen1DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return i.ToAzureDataLakeGen1DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen1DatastoreOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.StoreName }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreResponse
func (val *AzureDataLakeGen1DatastoreResponse) Defaults() *AzureDataLakeGen1DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutput() AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen1DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreResponseOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.StoreName }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2Datastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2Datastore
func (val *AzureDataLakeGen2Datastore) Defaults() *AzureDataLakeGen2Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen2DatastoreInput is an input type that accepts AzureDataLakeGen2DatastoreArgs and AzureDataLakeGen2DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen2DatastoreInput` via:
//
//	AzureDataLakeGen2DatastoreArgs{...}
type AzureDataLakeGen2DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput
	ToAzureDataLakeGen2DatastoreOutputWithContext(context.Context) AzureDataLakeGen2DatastoreOutput
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem pulumi.StringInput `pulumi:"filesystem"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreArgs
func (val *AzureDataLakeGen2DatastoreArgs) Defaults() *AzureDataLakeGen2DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen2DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return i.ToAzureDataLakeGen2DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen2DatastoreOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.Filesystem }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreResponse
func (val *AzureDataLakeGen2DatastoreResponse) Defaults() *AzureDataLakeGen2DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutput() AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreResponseOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.Filesystem }).(pulumi.StringOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen2DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type AzureDataLakeSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// The Azure Data Lake credential type.
	CredentialType *string `pulumi:"credentialType"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// The Azure Data Lake store name.
	StoreName *string `pulumi:"storeName"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
}

type AzureDataLakeSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeSectionResponse)(nil)).Elem()
}

func (o AzureDataLakeSectionResponseOutput) ToAzureDataLakeSectionResponseOutput() AzureDataLakeSectionResponseOutput {
	return o
}

func (o AzureDataLakeSectionResponseOutput) ToAzureDataLakeSectionResponseOutputWithContext(ctx context.Context) AzureDataLakeSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureDataLakeSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureDataLakeSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureDataLakeSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureDataLakeSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The Azure Data Lake credential type.
func (o AzureDataLakeSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureDataLakeSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o AzureDataLakeSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureDataLakeSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// The Azure Data Lake store name.
func (o AzureDataLakeSectionResponseOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.StoreName }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureDataLakeSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureDataLakeSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureDataLakeSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type AzureDataLakeSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureDataLakeSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureDataLakeSectionResponse)(nil)).Elem()
}

func (o AzureDataLakeSectionResponsePtrOutput) ToAzureDataLakeSectionResponsePtrOutput() AzureDataLakeSectionResponsePtrOutput {
	return o
}

func (o AzureDataLakeSectionResponsePtrOutput) ToAzureDataLakeSectionResponsePtrOutputWithContext(ctx context.Context) AzureDataLakeSectionResponsePtrOutput {
	return o
}

func (o AzureDataLakeSectionResponsePtrOutput) Elem() AzureDataLakeSectionResponseOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) AzureDataLakeSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureDataLakeSectionResponse
		return ret
	}).(AzureDataLakeSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureDataLakeSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureDataLakeSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureDataLakeSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureDataLakeSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Lake credential type.
func (o AzureDataLakeSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureDataLakeSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o AzureDataLakeSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureDataLakeSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// The Azure Data Lake store name.
func (o AzureDataLakeSectionResponsePtrOutput) StoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoreName
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureDataLakeSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureDataLakeSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureDataLakeSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureDataLakeSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhook struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// AzureDevOpsWebhookInput is an input type that accepts AzureDevOpsWebhookArgs and AzureDevOpsWebhookOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookInput` via:
//
//	AzureDevOpsWebhookArgs{...}
type AzureDevOpsWebhookInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput
	ToAzureDevOpsWebhookOutputWithContext(context.Context) AzureDevOpsWebhookOutput
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookArgs struct {
	// Send callback on a specified notification event
	EventType pulumi.StringPtrInput `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType pulumi.StringInput `pulumi:"webhookType"`
}

func (AzureDevOpsWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return i.ToAzureDevOpsWebhookOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookArgs) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookOutput)
}

// AzureDevOpsWebhookMapInput is an input type that accepts AzureDevOpsWebhookMap and AzureDevOpsWebhookMapOutput values.
// You can construct a concrete instance of `AzureDevOpsWebhookMapInput` via:
//
//	AzureDevOpsWebhookMap{ "key": AzureDevOpsWebhookArgs{...} }
type AzureDevOpsWebhookMapInput interface {
	pulumi.Input

	ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput
	ToAzureDevOpsWebhookMapOutputWithContext(context.Context) AzureDevOpsWebhookMapOutput
}

type AzureDevOpsWebhookMap map[string]AzureDevOpsWebhookInput

func (AzureDevOpsWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return i.ToAzureDevOpsWebhookMapOutputWithContext(context.Background())
}

func (i AzureDevOpsWebhookMap) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDevOpsWebhookMapOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutput() AzureDevOpsWebhookOutput {
	return o
}

func (o AzureDevOpsWebhookOutput) ToAzureDevOpsWebhookOutputWithContext(ctx context.Context) AzureDevOpsWebhookOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhook) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhook)(nil)).Elem()
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutput() AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) ToAzureDevOpsWebhookMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookMapOutput {
	return o
}

func (o AzureDevOpsWebhookMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhook {
		return vs[0].(map[string]AzureDevOpsWebhook)[vs[1].(string)]
	}).(AzureDevOpsWebhookOutput)
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponse struct {
	// Send callback on a specified notification event
	EventType *string `pulumi:"eventType"`
	// Enum to determine the webhook callback service type.
	// Expected value is 'AzureDevOps'.
	WebhookType string `pulumi:"webhookType"`
}

// Webhook details specific for Azure DevOps
type AzureDevOpsWebhookResponseOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutput() AzureDevOpsWebhookResponseOutput {
	return o
}

func (o AzureDevOpsWebhookResponseOutput) ToAzureDevOpsWebhookResponseOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseOutput {
	return o
}

// Send callback on a specified notification event
func (o AzureDevOpsWebhookResponseOutput) EventType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) *string { return v.EventType }).(pulumi.StringPtrOutput)
}

// Enum to determine the webhook callback service type.
// Expected value is 'AzureDevOps'.
func (o AzureDevOpsWebhookResponseOutput) WebhookType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDevOpsWebhookResponse) string { return v.WebhookType }).(pulumi.StringOutput)
}

type AzureDevOpsWebhookResponseMapOutput struct{ *pulumi.OutputState }

func (AzureDevOpsWebhookResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AzureDevOpsWebhookResponse)(nil)).Elem()
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutput() AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) ToAzureDevOpsWebhookResponseMapOutputWithContext(ctx context.Context) AzureDevOpsWebhookResponseMapOutput {
	return o
}

func (o AzureDevOpsWebhookResponseMapOutput) MapIndex(k pulumi.StringInput) AzureDevOpsWebhookResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AzureDevOpsWebhookResponse {
		return vs[0].(map[string]AzureDevOpsWebhookResponse)[vs[1].(string)]
	}).(AzureDevOpsWebhookResponseOutput)
}

// Azure File datastore configuration.
type AzureFileDatastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastore
func (val *AzureFileDatastore) Defaults() *AzureFileDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureFileDatastoreInput is an input type that accepts AzureFileDatastoreArgs and AzureFileDatastoreOutput values.
// You can construct a concrete instance of `AzureFileDatastoreInput` via:
//
//	AzureFileDatastoreArgs{...}
type AzureFileDatastoreInput interface {
	pulumi.Input

	ToAzureFileDatastoreOutput() AzureFileDatastoreOutput
	ToAzureFileDatastoreOutputWithContext(context.Context) AzureFileDatastoreOutput
}

// Azure File datastore configuration.
type AzureFileDatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName pulumi.StringInput `pulumi:"fileShareName"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreArgs
func (val *AzureFileDatastoreArgs) Defaults() *AzureFileDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureFileDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return i.ToAzureFileDatastoreOutputWithContext(context.Background())
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileDatastoreOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return o
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.FileShareName }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreResponse
func (val *AzureFileDatastoreResponse) Defaults() *AzureFileDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure File datastore configuration.
type AzureFileDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastoreResponse)(nil)).Elem()
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutput() AzureFileDatastoreResponseOutput {
	return o
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutputWithContext(ctx context.Context) AzureFileDatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreResponseOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.FileShareName }).(pulumi.StringOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureFileDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type AzureMySqlSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzureMySqlSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureMySqlSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureMySqlSectionResponse)(nil)).Elem()
}

func (o AzureMySqlSectionResponseOutput) ToAzureMySqlSectionResponseOutput() AzureMySqlSectionResponseOutput {
	return o
}

func (o AzureMySqlSectionResponseOutput) ToAzureMySqlSectionResponseOutputWithContext(ctx context.Context) AzureMySqlSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureMySqlSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureMySqlSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureMySqlSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureMySqlSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureMySqlSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureMySqlSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureMySqlSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureMySqlSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureMySqlSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureMySqlSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureMySqlSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureMySqlSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureMySqlSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureMySqlSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureMySqlSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureMySqlSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureMySqlSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureMySqlSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureMySqlSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzureMySqlSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureMySqlSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureMySqlSectionResponse)(nil)).Elem()
}

func (o AzureMySqlSectionResponsePtrOutput) ToAzureMySqlSectionResponsePtrOutput() AzureMySqlSectionResponsePtrOutput {
	return o
}

func (o AzureMySqlSectionResponsePtrOutput) ToAzureMySqlSectionResponsePtrOutputWithContext(ctx context.Context) AzureMySqlSectionResponsePtrOutput {
	return o
}

func (o AzureMySqlSectionResponsePtrOutput) Elem() AzureMySqlSectionResponseOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) AzureMySqlSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureMySqlSectionResponse
		return ret
	}).(AzureMySqlSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureMySqlSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureMySqlSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureMySqlSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureMySqlSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureMySqlSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureMySqlSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureMySqlSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureMySqlSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureMySqlSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureMySqlSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureMySqlSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureMySqlSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureMySqlSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureMySqlSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureMySqlSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureMySqlSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureMySqlSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureMySqlSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureMySqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzurePostgreSqlSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Indicates SSL requirement of Azure Postgresql server.
	EnableSsl *bool `pulumi:"enableSsl"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzurePostgreSqlSectionResponseOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePostgreSqlSectionResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSectionResponseOutput) ToAzurePostgreSqlSectionResponseOutput() AzurePostgreSqlSectionResponseOutput {
	return o
}

func (o AzurePostgreSqlSectionResponseOutput) ToAzurePostgreSqlSectionResponseOutputWithContext(ctx context.Context) AzurePostgreSqlSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzurePostgreSqlSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzurePostgreSqlSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzurePostgreSqlSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzurePostgreSqlSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzurePostgreSqlSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzurePostgreSqlSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Indicates SSL requirement of Azure Postgresql server.
func (o AzurePostgreSqlSectionResponseOutput) EnableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *bool { return v.EnableSsl }).(pulumi.BoolPtrOutput)
}

// The server host endpoint.
func (o AzurePostgreSqlSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzurePostgreSqlSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzurePostgreSqlSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzurePostgreSqlSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzurePostgreSqlSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzurePostgreSqlSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzurePostgreSqlSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzurePostgreSqlSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzurePostgreSqlSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzurePostgreSqlSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzurePostgreSqlSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzurePostgreSqlSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzurePostgreSqlSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzurePostgreSqlSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzurePostgreSqlSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzurePostgreSqlSectionResponse)(nil)).Elem()
}

func (o AzurePostgreSqlSectionResponsePtrOutput) ToAzurePostgreSqlSectionResponsePtrOutput() AzurePostgreSqlSectionResponsePtrOutput {
	return o
}

func (o AzurePostgreSqlSectionResponsePtrOutput) ToAzurePostgreSqlSectionResponsePtrOutputWithContext(ctx context.Context) AzurePostgreSqlSectionResponsePtrOutput {
	return o
}

func (o AzurePostgreSqlSectionResponsePtrOutput) Elem() AzurePostgreSqlSectionResponseOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) AzurePostgreSqlSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzurePostgreSqlSectionResponse
		return ret
	}).(AzurePostgreSqlSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzurePostgreSqlSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzurePostgreSqlSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzurePostgreSqlSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzurePostgreSqlSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzurePostgreSqlSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzurePostgreSqlSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// Indicates SSL requirement of Azure Postgresql server.
func (o AzurePostgreSqlSectionResponsePtrOutput) EnableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSsl
	}).(pulumi.BoolPtrOutput)
}

// The server host endpoint.
func (o AzurePostgreSqlSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzurePostgreSqlSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzurePostgreSqlSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzurePostgreSqlSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzurePostgreSqlSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzurePostgreSqlSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzurePostgreSqlSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzurePostgreSqlSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzurePostgreSqlSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzurePostgreSqlSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzurePostgreSqlSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzurePostgreSqlSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzurePostgreSqlSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseSectionResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Sql Authentication type.
	CredentialType *string `pulumi:"credentialType"`
	// The Azure SQL database name.
	DatabaseName *string `pulumi:"databaseName"`
	// The server host endpoint.
	Endpoint *string `pulumi:"endpoint"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// / The Azure SQL port number.
	PortNumber *string `pulumi:"portNumber"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// The Azure SQL server name.
	ServerName *string `pulumi:"serverName"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
	// The Azure SQL user id.
	UserId *string `pulumi:"userId"`
	// The Azure SQL user password.
	UserPassword *string `pulumi:"userPassword"`
}

type AzureSqlDatabaseSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureSqlDatabaseSectionResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseSectionResponseOutput) ToAzureSqlDatabaseSectionResponseOutput() AzureSqlDatabaseSectionResponseOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponseOutput) ToAzureSqlDatabaseSectionResponseOutputWithContext(ctx context.Context) AzureSqlDatabaseSectionResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o AzureSqlDatabaseSectionResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureSqlDatabaseSectionResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureSqlDatabaseSectionResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureSqlDatabaseSectionResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureSqlDatabaseSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureSqlDatabaseSectionResponseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureSqlDatabaseSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureSqlDatabaseSectionResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureSqlDatabaseSectionResponseOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.PortNumber }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureSqlDatabaseSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureSqlDatabaseSectionResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureSqlDatabaseSectionResponseOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureSqlDatabaseSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureSqlDatabaseSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureSqlDatabaseSectionResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureSqlDatabaseSectionResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureSqlDatabaseSectionResponseOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureSqlDatabaseSectionResponseOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureSqlDatabaseSectionResponse) *string { return v.UserPassword }).(pulumi.StringPtrOutput)
}

type AzureSqlDatabaseSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureSqlDatabaseSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureSqlDatabaseSectionResponse)(nil)).Elem()
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) ToAzureSqlDatabaseSectionResponsePtrOutput() AzureSqlDatabaseSectionResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) ToAzureSqlDatabaseSectionResponsePtrOutputWithContext(ctx context.Context) AzureSqlDatabaseSectionResponsePtrOutput {
	return o
}

func (o AzureSqlDatabaseSectionResponsePtrOutput) Elem() AzureSqlDatabaseSectionResponseOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) AzureSqlDatabaseSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureSqlDatabaseSectionResponse
		return ret
	}).(AzureSqlDatabaseSectionResponseOutput)
}

// The authority URL used for authentication.
func (o AzureSqlDatabaseSectionResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o AzureSqlDatabaseSectionResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Sql Authentication type.
func (o AzureSqlDatabaseSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL database name.
func (o AzureSqlDatabaseSectionResponsePtrOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseName
	}).(pulumi.StringPtrOutput)
}

// The server host endpoint.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o AzureSqlDatabaseSectionResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// / The Azure SQL port number.
func (o AzureSqlDatabaseSectionResponsePtrOutput) PortNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortNumber
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL server name.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureSqlDatabaseSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureSqlDatabaseSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o AzureSqlDatabaseSectionResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o AzureSqlDatabaseSectionResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user id.
func (o AzureSqlDatabaseSectionResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserId
	}).(pulumi.StringPtrOutput)
}

// The Azure SQL user password.
func (o AzureSqlDatabaseSectionResponsePtrOutput) UserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureSqlDatabaseSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserPassword
	}).(pulumi.StringPtrOutput)
}

type AzureStorageSectionResponse struct {
	//  Storage Account Key (Deprecated).
	AccountKey *string `pulumi:"accountKey"`
	// Storage Account Name.
	AccountName *string `pulumi:"accountName"`
	// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
	AreWorkspaceManagedIdentitiesAllowed *bool `pulumi:"areWorkspaceManagedIdentitiesAllowed"`
	//  If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
	BlobCacheTimeout  *int                       `pulumi:"blobCacheTimeout"`
	ClientCredentials *ClientCredentialsResponse `pulumi:"clientCredentials"`
	// The storage container name.
	ContainerName *string `pulumi:"containerName"`
	// The credential.
	Credential *string `pulumi:"credential"`
	//  The credential type.
	CredentialType *string `pulumi:"credentialType"`
	// The host of the container.
	Endpoint *string `pulumi:"endpoint"`
	// Indicate if we are using SAS token or Account Key (Deprecated).
	IsSas *bool `pulumi:"isSas"`
	// The protocol to use. Defaults to https.
	Protocol *string `pulumi:"protocol"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	//  SAS Token for the container (Deprecated).
	SasToken *string `pulumi:"sasToken"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type AzureStorageSectionResponseOutput struct{ *pulumi.OutputState }

func (AzureStorageSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureStorageSectionResponse)(nil)).Elem()
}

func (o AzureStorageSectionResponseOutput) ToAzureStorageSectionResponseOutput() AzureStorageSectionResponseOutput {
	return o
}

func (o AzureStorageSectionResponseOutput) ToAzureStorageSectionResponseOutputWithContext(ctx context.Context) AzureStorageSectionResponseOutput {
	return o
}

// Storage Account Key (Deprecated).
func (o AzureStorageSectionResponseOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.AccountKey }).(pulumi.StringPtrOutput)
}

// Storage Account Name.
func (o AzureStorageSectionResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
func (o AzureStorageSectionResponseOutput) AreWorkspaceManagedIdentitiesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *bool { return v.AreWorkspaceManagedIdentitiesAllowed }).(pulumi.BoolPtrOutput)
}

// If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
func (o AzureStorageSectionResponseOutput) BlobCacheTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *int { return v.BlobCacheTimeout }).(pulumi.IntPtrOutput)
}

func (o AzureStorageSectionResponseOutput) ClientCredentials() ClientCredentialsResponsePtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *ClientCredentialsResponse { return v.ClientCredentials }).(ClientCredentialsResponsePtrOutput)
}

// The storage container name.
func (o AzureStorageSectionResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// The credential.
func (o AzureStorageSectionResponseOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Credential }).(pulumi.StringPtrOutput)
}

// The credential type.
func (o AzureStorageSectionResponseOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.CredentialType }).(pulumi.StringPtrOutput)
}

// The host of the container.
func (o AzureStorageSectionResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Indicate if we are using SAS token or Account Key (Deprecated).
func (o AzureStorageSectionResponseOutput) IsSas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *bool { return v.IsSas }).(pulumi.BoolPtrOutput)
}

// The protocol to use. Defaults to https.
func (o AzureStorageSectionResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureStorageSectionResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// SAS Token for the container (Deprecated).
func (o AzureStorageSectionResponseOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureStorageSectionResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureStorageSectionResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureStorageSectionResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

type AzureStorageSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (AzureStorageSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureStorageSectionResponse)(nil)).Elem()
}

func (o AzureStorageSectionResponsePtrOutput) ToAzureStorageSectionResponsePtrOutput() AzureStorageSectionResponsePtrOutput {
	return o
}

func (o AzureStorageSectionResponsePtrOutput) ToAzureStorageSectionResponsePtrOutputWithContext(ctx context.Context) AzureStorageSectionResponsePtrOutput {
	return o
}

func (o AzureStorageSectionResponsePtrOutput) Elem() AzureStorageSectionResponseOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) AzureStorageSectionResponse {
		if v != nil {
			return *v
		}
		var ret AzureStorageSectionResponse
		return ret
	}).(AzureStorageSectionResponseOutput)
}

// Storage Account Key (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) AccountKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountKey
	}).(pulumi.StringPtrOutput)
}

// Storage Account Name.
func (o AzureStorageSectionResponsePtrOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccountName
	}).(pulumi.StringPtrOutput)
}

// Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) AreWorkspaceManagedIdentitiesAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AreWorkspaceManagedIdentitiesAllowed
	}).(pulumi.BoolPtrOutput)
}

// If this is an "DataStoreType.AzureBlob", the length of time (in seconds) to cache files locally after they are accessed (downloaded).
func (o AzureStorageSectionResponsePtrOutput) BlobCacheTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.BlobCacheTimeout
	}).(pulumi.IntPtrOutput)
}

func (o AzureStorageSectionResponsePtrOutput) ClientCredentials() ClientCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *ClientCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.ClientCredentials
	}).(ClientCredentialsResponsePtrOutput)
}

// The storage container name.
func (o AzureStorageSectionResponsePtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// The credential.
func (o AzureStorageSectionResponsePtrOutput) Credential() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(pulumi.StringPtrOutput)
}

// The credential type.
func (o AzureStorageSectionResponsePtrOutput) CredentialType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CredentialType
	}).(pulumi.StringPtrOutput)
}

// The host of the container.
func (o AzureStorageSectionResponsePtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Indicate if we are using SAS token or Account Key (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) IsSas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsSas
	}).(pulumi.BoolPtrOutput)
}

// The protocol to use. Defaults to https.
func (o AzureStorageSectionResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// Resource Group.
func (o AzureStorageSectionResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// SAS Token for the container (Deprecated).
func (o AzureStorageSectionResponsePtrOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SasToken
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureStorageSectionResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o AzureStorageSectionResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureStorageSectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicy
func (val *BanditPolicy) Defaults() *BanditPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// BanditPolicyInput is an input type that accepts BanditPolicyArgs and BanditPolicyOutput values.
// You can construct a concrete instance of `BanditPolicyInput` via:
//
//	BanditPolicyArgs{...}
type BanditPolicyInput interface {
	pulumi.Input

	ToBanditPolicyOutput() BanditPolicyOutput
	ToBanditPolicyOutputWithContext(context.Context) BanditPolicyOutput
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount pulumi.Float64PtrInput `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor pulumi.Float64PtrInput `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyArgs
func (val *BanditPolicyArgs) Defaults() *BanditPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	if tmp.SlackAmount == nil {
		tmp.SlackAmount = pulumi.Float64Ptr(0.0)
	}
	if tmp.SlackFactor == nil {
		tmp.SlackFactor = pulumi.Float64Ptr(0.0)
	}
	return &tmp
}
func (BanditPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (i BanditPolicyArgs) ToBanditPolicyOutput() BanditPolicyOutput {
	return i.ToBanditPolicyOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput)
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput).ToBanditPolicyPtrOutputWithContext(ctx)
}

// BanditPolicyPtrInput is an input type that accepts BanditPolicyArgs, BanditPolicyPtr and BanditPolicyPtrOutput values.
// You can construct a concrete instance of `BanditPolicyPtrInput` via:
//
//	        BanditPolicyArgs{...}
//
//	or:
//
//	        nil
type BanditPolicyPtrInput interface {
	pulumi.Input

	ToBanditPolicyPtrOutput() BanditPolicyPtrOutput
	ToBanditPolicyPtrOutputWithContext(context.Context) BanditPolicyPtrOutput
}

type banditPolicyPtrType BanditPolicyArgs

func BanditPolicyPtr(v *BanditPolicyArgs) BanditPolicyPtrInput {
	return (*banditPolicyPtrType)(v)
}

func (*banditPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyOutput struct{ *pulumi.OutputState }

func (BanditPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyOutput) ToBanditPolicyOutput() BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BanditPolicy) *BanditPolicy {
		return &v
	}).(BanditPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyPtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) Elem() BanditPolicyOutput {
	return o.ApplyT(func(v *BanditPolicy) BanditPolicy {
		if v != nil {
			return *v
		}
		var ret BanditPolicy
		return ret
	}).(BanditPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyPtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyPtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyResponse
func (val *BanditPolicyResponse) Defaults() *BanditPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponseOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutput() BanditPolicyResponseOutput {
	return o
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutputWithContext(ctx context.Context) BanditPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponseOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponseOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutput() BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutputWithContext(ctx context.Context) BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) Elem() BanditPolicyResponseOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) BanditPolicyResponse {
		if v != nil {
			return *v
		}
		var ret BanditPolicyResponse
		return ret
	}).(BanditPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentType struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfiguration `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettings `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentType
func (val *BatchDeploymentType) Defaults() *BatchDeploymentType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// BatchDeploymentTypeInput is an input type that accepts BatchDeploymentTypeArgs and BatchDeploymentTypeOutput values.
// You can construct a concrete instance of `BatchDeploymentTypeInput` via:
//
//	BatchDeploymentTypeArgs{...}
type BatchDeploymentTypeInput interface {
	pulumi.Input

	ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput
	ToBatchDeploymentTypeOutputWithContext(context.Context) BatchDeploymentTypeOutput
}

// Batch inference settings per deployment.
type BatchDeploymentTypeArgs struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel pulumi.StringPtrInput `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize pulumi.Float64PtrInput `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model pulumi.Input `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction pulumi.StringPtrInput `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName pulumi.StringPtrInput `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources DeploymentResourceConfigurationPtrInput `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings BatchRetrySettingsPtrInput `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentTypeArgs
func (val *BatchDeploymentTypeArgs) Defaults() *BatchDeploymentTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		tmp.ErrorThreshold = pulumi.IntPtr(-1)
	}
	if tmp.LoggingLevel == nil {
		tmp.LoggingLevel = pulumi.StringPtr("Info")
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		tmp.MaxConcurrencyPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MiniBatchSize == nil {
		tmp.MiniBatchSize = pulumi.Float64Ptr(10.0)
	}
	if tmp.OutputAction == nil {
		tmp.OutputAction = pulumi.StringPtr("AppendRow")
	}
	if tmp.OutputFileName == nil {
		tmp.OutputFileName = pulumi.StringPtr("predictions.csv")
	}

	return &tmp
}
func (BatchDeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return i.ToBatchDeploymentTypeOutputWithContext(context.Background())
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchDeploymentTypeOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentTypeOutput struct{ *pulumi.OutputState }

func (BatchDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return o
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o BatchDeploymentTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentTypeOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentTypeOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentTypeOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentTypeOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentTypeOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentTypeOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentType) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentTypeOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentTypeOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentTypeOutput) Resources() DeploymentResourceConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *DeploymentResourceConfiguration { return v.Resources }).(DeploymentResourceConfigurationPtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentTypeOutput) RetrySettings() BatchRetrySettingsPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *BatchRetrySettings { return v.RetrySettings }).(BatchRetrySettingsPtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentResponse struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *DeploymentResourceConfigurationResponse `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettingsResponse `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentResponse
func (val *BatchDeploymentResponse) Defaults() *BatchDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// Batch inference settings per deployment.
type BatchDeploymentResponseOutput struct{ *pulumi.OutputState }

func (BatchDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentResponse)(nil)).Elem()
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutput() BatchDeploymentResponseOutput {
	return o
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutputWithContext(ctx context.Context) BatchDeploymentResponseOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o BatchDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentResponseOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentResponseOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentResponseOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentResponseOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentResponseOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentResponseOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentResponseOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o BatchDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentResponseOutput) Resources() DeploymentResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *DeploymentResourceConfigurationResponse { return v.Resources }).(DeploymentResourceConfigurationResponsePtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentResponseOutput) RetrySettings() BatchRetrySettingsResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *BatchRetrySettingsResponse { return v.RetrySettings }).(BatchRetrySettingsResponsePtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaults `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// BatchEndpointTypeInput is an input type that accepts BatchEndpointTypeArgs and BatchEndpointTypeOutput values.
// You can construct a concrete instance of `BatchEndpointTypeInput` via:
//
//	BatchEndpointTypeArgs{...}
type BatchEndpointTypeInput interface {
	pulumi.Input

	ToBatchEndpointTypeOutput() BatchEndpointTypeOutput
	ToBatchEndpointTypeOutputWithContext(context.Context) BatchEndpointTypeOutput
}

// Batch endpoint configuration.
type BatchEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults BatchEndpointDefaultsPtrInput `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (BatchEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return i.ToBatchEndpointTypeOutputWithContext(context.Background())
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointTypeOutput)
}

// Batch endpoint configuration.
type BatchEndpointTypeOutput struct{ *pulumi.OutputState }

func (BatchEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return o
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointTypeOutput) Defaults() BatchEndpointDefaultsPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *BatchEndpointDefaults { return v.Defaults }).(BatchEndpointDefaultsPtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o BatchEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Batch endpoint default values
type BatchEndpointDefaults struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// BatchEndpointDefaultsInput is an input type that accepts BatchEndpointDefaultsArgs and BatchEndpointDefaultsOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsInput` via:
//
//	BatchEndpointDefaultsArgs{...}
type BatchEndpointDefaultsInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput
	ToBatchEndpointDefaultsOutputWithContext(context.Context) BatchEndpointDefaultsOutput
}

// Batch endpoint default values
type BatchEndpointDefaultsArgs struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName pulumi.StringPtrInput `pulumi:"deploymentName"`
}

func (BatchEndpointDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return i.ToBatchEndpointDefaultsOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput)
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput).ToBatchEndpointDefaultsPtrOutputWithContext(ctx)
}

// BatchEndpointDefaultsPtrInput is an input type that accepts BatchEndpointDefaultsArgs, BatchEndpointDefaultsPtr and BatchEndpointDefaultsPtrOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsPtrInput` via:
//
//	        BatchEndpointDefaultsArgs{...}
//
//	or:
//
//	        nil
type BatchEndpointDefaultsPtrInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput
	ToBatchEndpointDefaultsPtrOutputWithContext(context.Context) BatchEndpointDefaultsPtrOutput
}

type batchEndpointDefaultsPtrType BatchEndpointDefaultsArgs

func BatchEndpointDefaultsPtr(v *BatchEndpointDefaultsArgs) BatchEndpointDefaultsPtrInput {
	return (*batchEndpointDefaultsPtrType)(v)
}

func (*batchEndpointDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchEndpointDefaults) *BatchEndpointDefaults {
		return &v
	}).(BatchEndpointDefaultsPtrOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaults) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsPtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) Elem() BatchEndpointDefaultsOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) BatchEndpointDefaults {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaults
		return ret
	}).(BatchEndpointDefaultsOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsResponse struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// Batch endpoint default values
type BatchEndpointDefaultsResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutput() BatchEndpointDefaultsResponseOutput {
	return o
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponseOutput {
	return o
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponseOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaultsResponse) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutput() BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) Elem() BatchEndpointDefaultsResponseOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) BatchEndpointDefaultsResponse {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaultsResponse
		return ret
	}).(BatchEndpointDefaultsResponseOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponsePtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaultsResponse `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
}

// Batch endpoint configuration.
type BatchEndpointResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointResponse)(nil)).Elem()
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutput() BatchEndpointResponseOutput {
	return o
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutputWithContext(ctx context.Context) BatchEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointResponseOutput) Defaults() BatchEndpointDefaultsResponsePtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *BatchEndpointDefaultsResponse { return v.Defaults }).(BatchEndpointDefaultsResponsePtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o BatchEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint URI.
func (o BatchEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o BatchEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettings struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettings
func (val *BatchRetrySettings) Defaults() *BatchRetrySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchRetrySettingsInput is an input type that accepts BatchRetrySettingsArgs and BatchRetrySettingsOutput values.
// You can construct a concrete instance of `BatchRetrySettingsInput` via:
//
//	BatchRetrySettingsArgs{...}
type BatchRetrySettingsInput interface {
	pulumi.Input

	ToBatchRetrySettingsOutput() BatchRetrySettingsOutput
	ToBatchRetrySettingsOutputWithContext(context.Context) BatchRetrySettingsOutput
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsArgs struct {
	// Maximum retry count for a mini-batch
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsArgs
func (val *BatchRetrySettingsArgs) Defaults() *BatchRetrySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		tmp.MaxRetries = pulumi.IntPtr(3)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT30S")
	}
	return &tmp
}
func (BatchRetrySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return i.ToBatchRetrySettingsOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput)
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput).ToBatchRetrySettingsPtrOutputWithContext(ctx)
}

// BatchRetrySettingsPtrInput is an input type that accepts BatchRetrySettingsArgs, BatchRetrySettingsPtr and BatchRetrySettingsPtrOutput values.
// You can construct a concrete instance of `BatchRetrySettingsPtrInput` via:
//
//	        BatchRetrySettingsArgs{...}
//
//	or:
//
//	        nil
type BatchRetrySettingsPtrInput interface {
	pulumi.Input

	ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput
	ToBatchRetrySettingsPtrOutputWithContext(context.Context) BatchRetrySettingsPtrOutput
}

type batchRetrySettingsPtrType BatchRetrySettingsArgs

func BatchRetrySettingsPtr(v *BatchRetrySettingsArgs) BatchRetrySettingsPtrInput {
	return (*batchRetrySettingsPtrType)(v)
}

func (*batchRetrySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchRetrySettings) *BatchRetrySettings {
		return &v
	}).(BatchRetrySettingsPtrOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsPtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) Elem() BatchRetrySettingsOutput {
	return o.ApplyT(func(v *BatchRetrySettings) BatchRetrySettings {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettings
		return ret
	}).(BatchRetrySettingsOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponse struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsResponse
func (val *BatchRetrySettingsResponse) Defaults() *BatchRetrySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponseOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutput() BatchRetrySettingsResponseOutput {
	return o
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutputWithContext(ctx context.Context) BatchRetrySettingsResponseOutput {
	return o
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponseOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutput() BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutputWithContext(ctx context.Context) BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) Elem() BatchRetrySettingsResponseOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) BatchRetrySettingsResponse {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettingsResponse
		return ret
	}).(BatchRetrySettingsResponseOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponsePtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithm struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// BayesianSamplingAlgorithmInput is an input type that accepts BayesianSamplingAlgorithmArgs and BayesianSamplingAlgorithmOutput values.
// You can construct a concrete instance of `BayesianSamplingAlgorithmInput` via:
//
//	BayesianSamplingAlgorithmArgs{...}
type BayesianSamplingAlgorithmInput interface {
	pulumi.Input

	ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput
	ToBayesianSamplingAlgorithmOutputWithContext(context.Context) BayesianSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmArgs struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (BayesianSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return i.ToBayesianSamplingAlgorithmOutputWithContext(context.Background())
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BayesianSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return o
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponse struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithmResponse)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutput() BayesianSamplingAlgorithmResponseOutput {
	return o
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Describes the bind options for the container
type BindOptions struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

// BindOptionsInput is an input type that accepts BindOptionsArgs and BindOptionsOutput values.
// You can construct a concrete instance of `BindOptionsInput` via:
//
//	BindOptionsArgs{...}
type BindOptionsInput interface {
	pulumi.Input

	ToBindOptionsOutput() BindOptionsOutput
	ToBindOptionsOutputWithContext(context.Context) BindOptionsOutput
}

// Describes the bind options for the container
type BindOptionsArgs struct {
	// Indicate whether to create host path.
	CreateHostPath pulumi.BoolPtrInput `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation pulumi.StringPtrInput `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux pulumi.StringPtrInput `pulumi:"selinux"`
}

func (BindOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptions)(nil)).Elem()
}

func (i BindOptionsArgs) ToBindOptionsOutput() BindOptionsOutput {
	return i.ToBindOptionsOutputWithContext(context.Background())
}

func (i BindOptionsArgs) ToBindOptionsOutputWithContext(ctx context.Context) BindOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsOutput)
}

func (i BindOptionsArgs) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return i.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (i BindOptionsArgs) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsOutput).ToBindOptionsPtrOutputWithContext(ctx)
}

// BindOptionsPtrInput is an input type that accepts BindOptionsArgs, BindOptionsPtr and BindOptionsPtrOutput values.
// You can construct a concrete instance of `BindOptionsPtrInput` via:
//
//	        BindOptionsArgs{...}
//
//	or:
//
//	        nil
type BindOptionsPtrInput interface {
	pulumi.Input

	ToBindOptionsPtrOutput() BindOptionsPtrOutput
	ToBindOptionsPtrOutputWithContext(context.Context) BindOptionsPtrOutput
}

type bindOptionsPtrType BindOptionsArgs

func BindOptionsPtr(v *BindOptionsArgs) BindOptionsPtrInput {
	return (*bindOptionsPtrType)(v)
}

func (*bindOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptions)(nil)).Elem()
}

func (i *bindOptionsPtrType) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return i.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (i *bindOptionsPtrType) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindOptionsPtrOutput)
}

// Describes the bind options for the container
type BindOptionsOutput struct{ *pulumi.OutputState }

func (BindOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptions)(nil)).Elem()
}

func (o BindOptionsOutput) ToBindOptionsOutput() BindOptionsOutput {
	return o
}

func (o BindOptionsOutput) ToBindOptionsOutputWithContext(ctx context.Context) BindOptionsOutput {
	return o
}

func (o BindOptionsOutput) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return o.ToBindOptionsPtrOutputWithContext(context.Background())
}

func (o BindOptionsOutput) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BindOptions) *BindOptions {
		return &v
	}).(BindOptionsPtrOutput)
}

// Indicate whether to create host path.
func (o BindOptionsOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BindOptions) *bool { return v.CreateHostPath }).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptions) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptions) *string { return v.Selinux }).(pulumi.StringPtrOutput)
}

type BindOptionsPtrOutput struct{ *pulumi.OutputState }

func (BindOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptions)(nil)).Elem()
}

func (o BindOptionsPtrOutput) ToBindOptionsPtrOutput() BindOptionsPtrOutput {
	return o
}

func (o BindOptionsPtrOutput) ToBindOptionsPtrOutputWithContext(ctx context.Context) BindOptionsPtrOutput {
	return o
}

func (o BindOptionsPtrOutput) Elem() BindOptionsOutput {
	return o.ApplyT(func(v *BindOptions) BindOptions {
		if v != nil {
			return *v
		}
		var ret BindOptions
		return ret
	}).(BindOptionsOutput)
}

// Indicate whether to create host path.
func (o BindOptionsPtrOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BindOptions) *bool {
		if v == nil {
			return nil
		}
		return v.CreateHostPath
	}).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsPtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsPtrOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptions) *string {
		if v == nil {
			return nil
		}
		return v.Selinux
	}).(pulumi.StringPtrOutput)
}

// Describes the bind options for the container
type BindOptionsResponse struct {
	// Indicate whether to create host path.
	CreateHostPath *bool `pulumi:"createHostPath"`
	// Type of Bind Option
	Propagation *string `pulumi:"propagation"`
	// Mention the selinux options.
	Selinux *string `pulumi:"selinux"`
}

// Describes the bind options for the container
type BindOptionsResponseOutput struct{ *pulumi.OutputState }

func (BindOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindOptionsResponse)(nil)).Elem()
}

func (o BindOptionsResponseOutput) ToBindOptionsResponseOutput() BindOptionsResponseOutput {
	return o
}

func (o BindOptionsResponseOutput) ToBindOptionsResponseOutputWithContext(ctx context.Context) BindOptionsResponseOutput {
	return o
}

// Indicate whether to create host path.
func (o BindOptionsResponseOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *bool { return v.CreateHostPath }).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsResponseOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *string { return v.Propagation }).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsResponseOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindOptionsResponse) *string { return v.Selinux }).(pulumi.StringPtrOutput)
}

type BindOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (BindOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindOptionsResponse)(nil)).Elem()
}

func (o BindOptionsResponsePtrOutput) ToBindOptionsResponsePtrOutput() BindOptionsResponsePtrOutput {
	return o
}

func (o BindOptionsResponsePtrOutput) ToBindOptionsResponsePtrOutputWithContext(ctx context.Context) BindOptionsResponsePtrOutput {
	return o
}

func (o BindOptionsResponsePtrOutput) Elem() BindOptionsResponseOutput {
	return o.ApplyT(func(v *BindOptionsResponse) BindOptionsResponse {
		if v != nil {
			return *v
		}
		var ret BindOptionsResponse
		return ret
	}).(BindOptionsResponseOutput)
}

// Indicate whether to create host path.
func (o BindOptionsResponsePtrOutput) CreateHostPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.CreateHostPath
	}).(pulumi.BoolPtrOutput)
}

// Type of Bind Option
func (o BindOptionsResponsePtrOutput) Propagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Propagation
	}).(pulumi.StringPtrOutput)
}

// Mention the selinux options.
func (o BindOptionsResponsePtrOutput) Selinux() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BindOptionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Selinux
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContext struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContext
func (val *BuildContext) Defaults() *BuildContext {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// BuildContextInput is an input type that accepts BuildContextArgs and BuildContextOutput values.
// You can construct a concrete instance of `BuildContextInput` via:
//
//	BuildContextArgs{...}
type BuildContextInput interface {
	pulumi.Input

	ToBuildContextOutput() BuildContextOutput
	ToBuildContextOutputWithContext(context.Context) BuildContextOutput
}

// Configuration settings for Docker build context
type BuildContextArgs struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri pulumi.StringInput `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextArgs
func (val *BuildContextArgs) Defaults() *BuildContextArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		tmp.DockerfilePath = pulumi.StringPtr("Dockerfile")
	}
	return &tmp
}
func (BuildContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (i BuildContextArgs) ToBuildContextOutput() BuildContextOutput {
	return i.ToBuildContextOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput)
}

func (i BuildContextArgs) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput).ToBuildContextPtrOutputWithContext(ctx)
}

// BuildContextPtrInput is an input type that accepts BuildContextArgs, BuildContextPtr and BuildContextPtrOutput values.
// You can construct a concrete instance of `BuildContextPtrInput` via:
//
//	        BuildContextArgs{...}
//
//	or:
//
//	        nil
type BuildContextPtrInput interface {
	pulumi.Input

	ToBuildContextPtrOutput() BuildContextPtrOutput
	ToBuildContextPtrOutputWithContext(context.Context) BuildContextPtrOutput
}

type buildContextPtrType BuildContextArgs

func BuildContextPtr(v *BuildContextArgs) BuildContextPtrInput {
	return (*buildContextPtrType)(v)
}

func (*buildContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (i *buildContextPtrType) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i *buildContextPtrType) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextOutput struct{ *pulumi.OutputState }

func (BuildContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (o BuildContextOutput) ToBuildContextOutput() BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o.ToBuildContextPtrOutputWithContext(context.Background())
}

func (o BuildContextOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildContext) *BuildContext {
		return &v
	}).(BuildContextPtrOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContext) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContext) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextPtrOutput struct{ *pulumi.OutputState }

func (BuildContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) Elem() BuildContextOutput {
	return o.ApplyT(func(v *BuildContext) BuildContext {
		if v != nil {
			return *v
		}
		var ret BuildContext
		return ret
	}).(BuildContextOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextPtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextPtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextResponse struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextResponse
func (val *BuildContextResponse) Defaults() *BuildContextResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// Configuration settings for Docker build context
type BuildContextResponseOutput struct{ *pulumi.OutputState }

func (BuildContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutput() BuildContextResponseOutput {
	return o
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutputWithContext(ctx context.Context) BuildContextResponseOutput {
	return o
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponseOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContextResponse) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponseOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContextResponse) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildContextResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutput() BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutputWithContext(ctx context.Context) BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) Elem() BuildContextResponseOutput {
	return o.ApplyT(func(v *BuildContextResponse) BuildContextResponse {
		if v != nil {
			return *v
		}
		var ret BuildContextResponse
		return ret
	}).(BuildContextResponseOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponsePtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponsePtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

type CapacityReservationGroupType struct {
	// Offer used by this capacity reservation group.
	Offer *ServerlessOffer `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity int `pulumi:"reservedCapacity"`
}

// CapacityReservationGroupTypeInput is an input type that accepts CapacityReservationGroupTypeArgs and CapacityReservationGroupTypeOutput values.
// You can construct a concrete instance of `CapacityReservationGroupTypeInput` via:
//
//	CapacityReservationGroupTypeArgs{...}
type CapacityReservationGroupTypeInput interface {
	pulumi.Input

	ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput
	ToCapacityReservationGroupTypeOutputWithContext(context.Context) CapacityReservationGroupTypeOutput
}

type CapacityReservationGroupTypeArgs struct {
	// Offer used by this capacity reservation group.
	Offer ServerlessOfferPtrInput `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity pulumi.IntInput `pulumi:"reservedCapacity"`
}

func (CapacityReservationGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupType)(nil)).Elem()
}

func (i CapacityReservationGroupTypeArgs) ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput {
	return i.ToCapacityReservationGroupTypeOutputWithContext(context.Background())
}

func (i CapacityReservationGroupTypeArgs) ToCapacityReservationGroupTypeOutputWithContext(ctx context.Context) CapacityReservationGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CapacityReservationGroupTypeOutput)
}

type CapacityReservationGroupTypeOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupType)(nil)).Elem()
}

func (o CapacityReservationGroupTypeOutput) ToCapacityReservationGroupTypeOutput() CapacityReservationGroupTypeOutput {
	return o
}

func (o CapacityReservationGroupTypeOutput) ToCapacityReservationGroupTypeOutputWithContext(ctx context.Context) CapacityReservationGroupTypeOutput {
	return o
}

// Offer used by this capacity reservation group.
func (o CapacityReservationGroupTypeOutput) Offer() ServerlessOfferPtrOutput {
	return o.ApplyT(func(v CapacityReservationGroupType) *ServerlessOffer { return v.Offer }).(ServerlessOfferPtrOutput)
}

// [Required] Specifies the amount of capacity to reserve.
func (o CapacityReservationGroupTypeOutput) ReservedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityReservationGroupType) int { return v.ReservedCapacity }).(pulumi.IntOutput)
}

type CapacityReservationGroupResponse struct {
	// Offer used by this capacity reservation group.
	Offer *ServerlessOfferResponse `pulumi:"offer"`
	// [Required] Specifies the amount of capacity to reserve.
	ReservedCapacity int `pulumi:"reservedCapacity"`
}

type CapacityReservationGroupResponseOutput struct{ *pulumi.OutputState }

func (CapacityReservationGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CapacityReservationGroupResponse)(nil)).Elem()
}

func (o CapacityReservationGroupResponseOutput) ToCapacityReservationGroupResponseOutput() CapacityReservationGroupResponseOutput {
	return o
}

func (o CapacityReservationGroupResponseOutput) ToCapacityReservationGroupResponseOutputWithContext(ctx context.Context) CapacityReservationGroupResponseOutput {
	return o
}

// Offer used by this capacity reservation group.
func (o CapacityReservationGroupResponseOutput) Offer() ServerlessOfferResponsePtrOutput {
	return o.ApplyT(func(v CapacityReservationGroupResponse) *ServerlessOfferResponse { return v.Offer }).(ServerlessOfferResponsePtrOutput)
}

// [Required] Specifies the amount of capacity to reserve.
func (o CapacityReservationGroupResponseOutput) ReservedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v CapacityReservationGroupResponse) int { return v.ReservedCapacity }).(pulumi.IntOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// CertificateDatastoreCredentialsInput is an input type that accepts CertificateDatastoreCredentialsArgs and CertificateDatastoreCredentialsOutput values.
// You can construct a concrete instance of `CertificateDatastoreCredentialsInput` via:
//
//	CertificateDatastoreCredentialsArgs{...}
type CertificateDatastoreCredentialsInput interface {
	pulumi.Input

	ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput
	ToCertificateDatastoreCredentialsOutputWithContext(context.Context) CertificateDatastoreCredentialsOutput
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (CertificateDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return i.ToCertificateDatastoreCredentialsOutputWithContext(context.Background())
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreCredentialsOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return o
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o CertificateDatastoreCredentialsOutput) Secrets() CertificateDatastoreSecretsOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) CertificateDatastoreSecrets { return v.Secrets }).(CertificateDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentialsResponse)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutput() CertificateDatastoreCredentialsResponseOutput {
	return o
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecrets struct {
	// Service principal certificate.
	Certificate *string `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType string `pulumi:"secretsType"`
}

// CertificateDatastoreSecretsInput is an input type that accepts CertificateDatastoreSecretsArgs and CertificateDatastoreSecretsOutput values.
// You can construct a concrete instance of `CertificateDatastoreSecretsInput` via:
//
//	CertificateDatastoreSecretsArgs{...}
type CertificateDatastoreSecretsInput interface {
	pulumi.Input

	ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput
	ToCertificateDatastoreSecretsOutputWithContext(context.Context) CertificateDatastoreSecretsOutput
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsArgs struct {
	// Service principal certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (CertificateDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return i.ToCertificateDatastoreSecretsOutputWithContext(context.Background())
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreSecretsOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return o
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return o
}

// Service principal certificate.
func (o CertificateDatastoreSecretsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Classification task in AutoML Table vertical.
type Classification struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Classification
func (val *Classification) Defaults() *Classification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ClassificationInput is an input type that accepts ClassificationArgs and ClassificationOutput values.
// You can construct a concrete instance of `ClassificationInput` via:
//
//	ClassificationArgs{...}
type ClassificationInput interface {
	pulumi.Input

	ToClassificationOutput() ClassificationOutput
	ToClassificationOutputWithContext(context.Context) ClassificationOutput
}

// Classification task in AutoML Table vertical.
type ClassificationArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel pulumi.StringPtrInput `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings ClassificationTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ClassificationArgs
func (val *ClassificationArgs) Defaults() *ClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("AUCWeighted")
	}

	return &tmp
}
func (ClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (i ClassificationArgs) ToClassificationOutput() ClassificationOutput {
	return i.ToClassificationOutputWithContext(context.Background())
}

func (i ClassificationArgs) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationOutput struct{ *pulumi.OutputState }

func (ClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (o ClassificationOutput) ToClassificationOutput() ClassificationOutput {
	return o
}

func (o ClassificationOutput) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ClassificationOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Classification) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ClassificationOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Classification) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Positive label for binary metrics calculation.
func (o ClassificationOutput) PositiveLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.PositiveLabel }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Classification) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ClassificationOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Classification) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Classification) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Classification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationOutput) TrainingSettings() ClassificationTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *ClassificationTrainingSettings { return v.TrainingSettings }).(ClassificationTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o ClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Classification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Classification) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ClassificationOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Positive label for binary metrics calculation.
	PositiveLabel *string `pulumi:"positiveLabel"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ClassificationTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ClassificationResponse
func (val *ClassificationResponse) Defaults() *ClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Classification task in AutoML Table vertical.
type ClassificationResponseOutput struct{ *pulumi.OutputState }

func (ClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationResponse)(nil)).Elem()
}

func (o ClassificationResponseOutput) ToClassificationResponseOutput() ClassificationResponseOutput {
	return o
}

func (o ClassificationResponseOutput) ToClassificationResponseOutputWithContext(ctx context.Context) ClassificationResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ClassificationResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ClassificationResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v ClassificationResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Positive label for binary metrics calculation.
func (o ClassificationResponseOutput) PositiveLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.PositiveLabel }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ClassificationResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationResponseOutput) TrainingSettings() ClassificationTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *ClassificationTrainingSettingsResponse { return v.TrainingSettings }).(ClassificationTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o ClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ClassificationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ClassificationResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettings struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettings
func (val *ClassificationTrainingSettings) Defaults() *ClassificationTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// ClassificationTrainingSettingsInput is an input type that accepts ClassificationTrainingSettingsArgs and ClassificationTrainingSettingsOutput values.
// You can construct a concrete instance of `ClassificationTrainingSettingsInput` via:
//
//	ClassificationTrainingSettingsArgs{...}
type ClassificationTrainingSettingsInput interface {
	pulumi.Input

	ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput
	ToClassificationTrainingSettingsOutputWithContext(context.Context) ClassificationTrainingSettingsOutput
}

// Classification Training related configuration.
type ClassificationTrainingSettingsArgs struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettingsArgs
func (val *ClassificationTrainingSettingsArgs) Defaults() *ClassificationTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	return &tmp
}
func (ClassificationTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettings)(nil)).Elem()
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput {
	return i.ToClassificationTrainingSettingsOutputWithContext(context.Background())
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsOutputWithContext(ctx context.Context) ClassificationTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsOutput)
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return i.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i ClassificationTrainingSettingsArgs) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsOutput).ToClassificationTrainingSettingsPtrOutputWithContext(ctx)
}

// ClassificationTrainingSettingsPtrInput is an input type that accepts ClassificationTrainingSettingsArgs, ClassificationTrainingSettingsPtr and ClassificationTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `ClassificationTrainingSettingsPtrInput` via:
//
//	        ClassificationTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type ClassificationTrainingSettingsPtrInput interface {
	pulumi.Input

	ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput
	ToClassificationTrainingSettingsPtrOutputWithContext(context.Context) ClassificationTrainingSettingsPtrOutput
}

type classificationTrainingSettingsPtrType ClassificationTrainingSettingsArgs

func ClassificationTrainingSettingsPtr(v *ClassificationTrainingSettingsArgs) ClassificationTrainingSettingsPtrInput {
	return (*classificationTrainingSettingsPtrType)(v)
}

func (*classificationTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettings)(nil)).Elem()
}

func (i *classificationTrainingSettingsPtrType) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return i.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *classificationTrainingSettingsPtrType) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationTrainingSettingsPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettingsOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettings)(nil)).Elem()
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsOutput() ClassificationTrainingSettingsOutput {
	return o
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsOutputWithContext(ctx context.Context) ClassificationTrainingSettingsOutput {
	return o
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return o.ToClassificationTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o ClassificationTrainingSettingsOutput) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClassificationTrainingSettings) *ClassificationTrainingSettings {
		return &v
	}).(ClassificationTrainingSettingsPtrOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

type ClassificationTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettings)(nil)).Elem()
}

func (o ClassificationTrainingSettingsPtrOutput) ToClassificationTrainingSettingsPtrOutput() ClassificationTrainingSettingsPtrOutput {
	return o
}

func (o ClassificationTrainingSettingsPtrOutput) ToClassificationTrainingSettingsPtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsPtrOutput {
	return o
}

func (o ClassificationTrainingSettingsPtrOutput) Elem() ClassificationTrainingSettingsOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) ClassificationTrainingSettings {
		if v != nil {
			return *v
		}
		var ret ClassificationTrainingSettings
		return ret
	}).(ClassificationTrainingSettingsOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// Classification Training related configuration.
type ClassificationTrainingSettingsResponse struct {
	// Allowed models for classification task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for classification task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ClassificationTrainingSettingsResponse
func (val *ClassificationTrainingSettingsResponse) Defaults() *ClassificationTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Classification Training related configuration.
type ClassificationTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationTrainingSettingsResponse)(nil)).Elem()
}

func (o ClassificationTrainingSettingsResponseOutput) ToClassificationTrainingSettingsResponseOutput() ClassificationTrainingSettingsResponseOutput {
	return o
}

func (o ClassificationTrainingSettingsResponseOutput) ToClassificationTrainingSettingsResponseOutputWithContext(ctx context.Context) ClassificationTrainingSettingsResponseOutput {
	return o
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

type ClassificationTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClassificationTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassificationTrainingSettingsResponse)(nil)).Elem()
}

func (o ClassificationTrainingSettingsResponsePtrOutput) ToClassificationTrainingSettingsResponsePtrOutput() ClassificationTrainingSettingsResponsePtrOutput {
	return o
}

func (o ClassificationTrainingSettingsResponsePtrOutput) ToClassificationTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) ClassificationTrainingSettingsResponsePtrOutput {
	return o
}

func (o ClassificationTrainingSettingsResponsePtrOutput) Elem() ClassificationTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) ClassificationTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ClassificationTrainingSettingsResponse
		return ret
	}).(ClassificationTrainingSettingsResponseOutput)
}

// Allowed models for classification task.
func (o ClassificationTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ClassificationTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ClassificationTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ClassificationTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

type ClientCredentialsResponse struct {
	// The authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// The content of the certificate used for authentication.
	Certificate *string `pulumi:"certificate"`
	// The Client ID/Application ID
	ClientId *string `pulumi:"clientId"`
	// The client secret.
	ClientSecret *string `pulumi:"clientSecret"`
	//  Is it using certificate to authenticate. If false then use client secret.
	IsCertAuth *bool `pulumi:"isCertAuth"`
	// Resource Group.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// The resource the service principal/app has access to.
	ResourceUri *string `pulumi:"resourceUri"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Subscription ID.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// The ID of the tenant the service principal/app belongs to.
	TenantId *string `pulumi:"tenantId"`
	// The thumbprint of the certificate above.
	Thumbprint *string `pulumi:"thumbprint"`
}

type ClientCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ClientCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClientCredentialsResponse)(nil)).Elem()
}

func (o ClientCredentialsResponseOutput) ToClientCredentialsResponseOutput() ClientCredentialsResponseOutput {
	return o
}

func (o ClientCredentialsResponseOutput) ToClientCredentialsResponseOutputWithContext(ctx context.Context) ClientCredentialsResponseOutput {
	return o
}

// The authority URL used for authentication.
func (o ClientCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o ClientCredentialsResponseOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o ClientCredentialsResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret.
func (o ClientCredentialsResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o ClientCredentialsResponseOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *bool { return v.IsCertAuth }).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o ClientCredentialsResponseOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o ClientCredentialsResponseOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o ClientCredentialsResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o ClientCredentialsResponseOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o ClientCredentialsResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o ClientCredentialsResponseOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClientCredentialsResponse) *string { return v.Thumbprint }).(pulumi.StringPtrOutput)
}

type ClientCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (ClientCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClientCredentialsResponse)(nil)).Elem()
}

func (o ClientCredentialsResponsePtrOutput) ToClientCredentialsResponsePtrOutput() ClientCredentialsResponsePtrOutput {
	return o
}

func (o ClientCredentialsResponsePtrOutput) ToClientCredentialsResponsePtrOutputWithContext(ctx context.Context) ClientCredentialsResponsePtrOutput {
	return o
}

func (o ClientCredentialsResponsePtrOutput) Elem() ClientCredentialsResponseOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) ClientCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret ClientCredentialsResponse
		return ret
	}).(ClientCredentialsResponseOutput)
}

// The authority URL used for authentication.
func (o ClientCredentialsResponsePtrOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AuthorityUrl
	}).(pulumi.StringPtrOutput)
}

// The content of the certificate used for authentication.
func (o ClientCredentialsResponsePtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// The Client ID/Application ID
func (o ClientCredentialsResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret.
func (o ClientCredentialsResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Is it using certificate to authenticate. If false then use client secret.
func (o ClientCredentialsResponsePtrOutput) IsCertAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsCertAuth
	}).(pulumi.BoolPtrOutput)
}

// Resource Group.
func (o ClientCredentialsResponsePtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The resource the service principal/app has access to.
func (o ClientCredentialsResponsePtrOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceUri
	}).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o ClientCredentialsResponsePtrOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceDataAccessAuthIdentity
	}).(pulumi.StringPtrOutput)
}

// Subscription ID.
func (o ClientCredentialsResponsePtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// The ID of the tenant the service principal/app belongs to.
func (o ClientCredentialsResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The thumbprint of the certificate above.
func (o ClientCredentialsResponsePtrOutput) Thumbprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClientCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Thumbprint
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfiguration struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// CodeConfigurationInput is an input type that accepts CodeConfigurationArgs and CodeConfigurationOutput values.
// You can construct a concrete instance of `CodeConfigurationInput` via:
//
//	CodeConfigurationArgs{...}
type CodeConfigurationInput interface {
	pulumi.Input

	ToCodeConfigurationOutput() CodeConfigurationOutput
	ToCodeConfigurationOutputWithContext(context.Context) CodeConfigurationOutput
}

// Configuration for a scoring code asset.
type CodeConfigurationArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript pulumi.StringInput `pulumi:"scoringScript"`
}

func (CodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return i.ToCodeConfigurationOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput)
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput).ToCodeConfigurationPtrOutputWithContext(ctx)
}

// CodeConfigurationPtrInput is an input type that accepts CodeConfigurationArgs, CodeConfigurationPtr and CodeConfigurationPtrOutput values.
// You can construct a concrete instance of `CodeConfigurationPtrInput` via:
//
//	        CodeConfigurationArgs{...}
//
//	or:
//
//	        nil
type CodeConfigurationPtrInput interface {
	pulumi.Input

	ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput
	ToCodeConfigurationPtrOutputWithContext(context.Context) CodeConfigurationPtrOutput
}

type codeConfigurationPtrType CodeConfigurationArgs

func CodeConfigurationPtr(v *CodeConfigurationArgs) CodeConfigurationPtrInput {
	return (*codeConfigurationPtrType)(v)
}

func (*codeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationOutput struct{ *pulumi.OutputState }

func (CodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeConfiguration) *CodeConfiguration {
		return &v
	}).(CodeConfigurationPtrOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfiguration) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfiguration) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) Elem() CodeConfigurationOutput {
	return o.ApplyT(func(v *CodeConfiguration) CodeConfiguration {
		if v != nil {
			return *v
		}
		var ret CodeConfiguration
		return ret
	}).(CodeConfigurationOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationPtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationPtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// Configuration for a scoring code asset.
type CodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutput() CodeConfigurationResponseOutput {
	return o
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutputWithContext(ctx context.Context) CodeConfigurationResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponseOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutput() CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutputWithContext(ctx context.Context) CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) Elem() CodeConfigurationResponseOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) CodeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CodeConfigurationResponse
		return ret
	}).(CodeConfigurationResponseOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponsePtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponsePtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Container for code asset versions.
type CodeContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerType
func (val *CodeContainerType) Defaults() *CodeContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeContainerTypeInput is an input type that accepts CodeContainerTypeArgs and CodeContainerTypeOutput values.
// You can construct a concrete instance of `CodeContainerTypeInput` via:
//
//	CodeContainerTypeArgs{...}
type CodeContainerTypeInput interface {
	pulumi.Input

	ToCodeContainerTypeOutput() CodeContainerTypeOutput
	ToCodeContainerTypeOutputWithContext(context.Context) CodeContainerTypeOutput
}

// Container for code asset versions.
type CodeContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerTypeArgs
func (val *CodeContainerTypeArgs) Defaults() *CodeContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return i.ToCodeContainerTypeOutputWithContext(context.Background())
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeContainerTypeOutput)
}

// Container for code asset versions.
type CodeContainerTypeOutput struct{ *pulumi.OutputState }

func (CodeContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return o
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return o
}

// The asset description text.
func (o CodeContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for code asset versions.
type CodeContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerResponse
func (val *CodeContainerResponse) Defaults() *CodeContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for code asset versions.
type CodeContainerResponseOutput struct{ *pulumi.OutputState }

func (CodeContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerResponse)(nil)).Elem()
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutput() CodeContainerResponseOutput {
	return o
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutputWithContext(ctx context.Context) CodeContainerResponseOutput {
	return o
}

// The asset description text.
func (o CodeContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o CodeContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o CodeContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o CodeContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code container.
func (o CodeContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionType struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionType
func (val *CodeVersionType) Defaults() *CodeVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeVersionTypeInput is an input type that accepts CodeVersionTypeArgs and CodeVersionTypeOutput values.
// You can construct a concrete instance of `CodeVersionTypeInput` via:
//
//	CodeVersionTypeArgs{...}
type CodeVersionTypeInput interface {
	pulumi.Input

	ToCodeVersionTypeOutput() CodeVersionTypeOutput
	ToCodeVersionTypeOutputWithContext(context.Context) CodeVersionTypeOutput
}

// Code asset version details.
type CodeVersionTypeArgs struct {
	// Uri where code is located
	CodeUri pulumi.StringPtrInput `pulumi:"codeUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionTypeArgs
func (val *CodeVersionTypeArgs) Defaults() *CodeVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return i.ToCodeVersionTypeOutputWithContext(context.Background())
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeVersionTypeOutput)
}

// Code asset version details.
type CodeVersionTypeOutput struct{ *pulumi.OutputState }

func (CodeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return o
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return o
}

// Uri where code is located
func (o CodeVersionTypeOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionResponse struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the code version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionResponse
func (val *CodeVersionResponse) Defaults() *CodeVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Code asset version details.
type CodeVersionResponseOutput struct{ *pulumi.OutputState }

func (CodeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionResponse)(nil)).Elem()
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutput() CodeVersionResponseOutput {
	return o
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutputWithContext(ctx context.Context) CodeVersionResponseOutput {
	return o
}

// Uri where code is located
func (o CodeVersionResponseOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the code version.
func (o CodeVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v CodeVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Column transformer parameters.
type ColumnTransformer struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// ColumnTransformerInput is an input type that accepts ColumnTransformerArgs and ColumnTransformerOutput values.
// You can construct a concrete instance of `ColumnTransformerInput` via:
//
//	ColumnTransformerArgs{...}
type ColumnTransformerInput interface {
	pulumi.Input

	ToColumnTransformerOutput() ColumnTransformerOutput
	ToColumnTransformerOutputWithContext(context.Context) ColumnTransformerOutput
}

// Column transformer parameters.
type ColumnTransformerArgs struct {
	// Fields to apply transformer logic on.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters pulumi.Input `pulumi:"parameters"`
}

func (ColumnTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArgs) ToColumnTransformerOutput() ColumnTransformerOutput {
	return i.ToColumnTransformerOutputWithContext(context.Background())
}

func (i ColumnTransformerArgs) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerOutput)
}

// ColumnTransformerArrayInput is an input type that accepts ColumnTransformerArray and ColumnTransformerArrayOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayInput` via:
//
//	ColumnTransformerArray{ ColumnTransformerArgs{...} }
type ColumnTransformerArrayInput interface {
	pulumi.Input

	ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput
	ToColumnTransformerArrayOutputWithContext(context.Context) ColumnTransformerArrayOutput
}

type ColumnTransformerArray []ColumnTransformerInput

func (ColumnTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return i.ToColumnTransformerArrayOutputWithContext(context.Background())
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayOutput)
}

// Column transformer parameters.
type ColumnTransformerOutput struct{ *pulumi.OutputState }

func (ColumnTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerOutput) ToColumnTransformerOutput() ColumnTransformerOutput {
	return o
}

func (o ColumnTransformerOutput) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformer) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformer) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) Index(i pulumi.IntInput) ColumnTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformer {
		return vs[0].([]ColumnTransformer)[vs[1].(int)]
	}).(ColumnTransformerOutput)
}

// Column transformer parameters.
type ColumnTransformerResponse struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// Column transformer parameters.
type ColumnTransformerResponseOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutput() ColumnTransformerResponseOutput {
	return o
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutputWithContext(ctx context.Context) ColumnTransformerResponseOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutput() ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) Index(i pulumi.IntInput) ColumnTransformerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformerResponse {
		return vs[0].([]ColumnTransformerResponse)[vs[1].(int)]
	}).(ColumnTransformerResponseOutput)
}

// Command job definition.
type CommandJob struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimits `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJob
func (val *CommandJob) Defaults() *CommandJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// CommandJobInput is an input type that accepts CommandJobArgs and CommandJobOutput values.
// You can construct a concrete instance of `CommandJobInput` via:
//
//	CommandJobArgs{...}
type CommandJobInput interface {
	pulumi.Input

	ToCommandJobOutput() CommandJobOutput
	ToCommandJobOutputWithContext(context.Context) CommandJobOutput
}

// Command job definition.
type CommandJobArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command pulumi.StringInput `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution pulumi.Input `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Command Job limit.
	Limits CommandJobLimitsPtrInput `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobArgs
func (val *CommandJobArgs) Defaults() *CommandJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (CommandJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (i CommandJobArgs) ToCommandJobOutput() CommandJobOutput {
	return i.ToCommandJobOutputWithContext(context.Background())
}

func (i CommandJobArgs) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobOutput)
}

// Command job definition.
type CommandJobOutput struct{ *pulumi.OutputState }

func (CommandJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (o CommandJobOutput) ToCommandJobOutput() CommandJobOutput {
	return o
}

func (o CommandJobOutput) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CommandJobOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o CommandJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobOutput) Limits() CommandJobLimitsPtrOutput {
	return o.ApplyT(func(v CommandJob) *CommandJobLimits { return v.Limits }).(CommandJobLimitsPtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o CommandJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v CommandJob) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Command Job limit class.
type CommandJobLimits struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// CommandJobLimitsInput is an input type that accepts CommandJobLimitsArgs and CommandJobLimitsOutput values.
// You can construct a concrete instance of `CommandJobLimitsInput` via:
//
//	CommandJobLimitsArgs{...}
type CommandJobLimitsInput interface {
	pulumi.Input

	ToCommandJobLimitsOutput() CommandJobLimitsOutput
	ToCommandJobLimitsOutputWithContext(context.Context) CommandJobLimitsOutput
}

// Command Job limit class.
type CommandJobLimitsArgs struct {
	// Expected value is 'Command'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (CommandJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return i.ToCommandJobLimitsOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput)
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput).ToCommandJobLimitsPtrOutputWithContext(ctx)
}

// CommandJobLimitsPtrInput is an input type that accepts CommandJobLimitsArgs, CommandJobLimitsPtr and CommandJobLimitsPtrOutput values.
// You can construct a concrete instance of `CommandJobLimitsPtrInput` via:
//
//	        CommandJobLimitsArgs{...}
//
//	or:
//
//	        nil
type CommandJobLimitsPtrInput interface {
	pulumi.Input

	ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput
	ToCommandJobLimitsPtrOutputWithContext(context.Context) CommandJobLimitsPtrOutput
}

type commandJobLimitsPtrType CommandJobLimitsArgs

func CommandJobLimitsPtr(v *CommandJobLimitsArgs) CommandJobLimitsPtrInput {
	return (*commandJobLimitsPtrType)(v)
}

func (*commandJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommandJobLimits) *CommandJobLimits {
		return &v
	}).(CommandJobLimitsPtrOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) Elem() CommandJobLimitsOutput {
	return o.ApplyT(func(v *CommandJobLimits) CommandJobLimits {
		if v != nil {
			return *v
		}
		var ret CommandJobLimits
		return ret
	}).(CommandJobLimitsOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsResponse struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// Command Job limit class.
type CommandJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutput() CommandJobLimitsResponseOutput {
	return o
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutputWithContext(ctx context.Context) CommandJobLimitsResponseOutput {
	return o
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutput() CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutputWithContext(ctx context.Context) CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) Elem() CommandJobLimitsResponseOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) CommandJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret CommandJobLimitsResponse
		return ret
	}).(CommandJobLimitsResponseOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command job definition.
type CommandJobResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimitsResponse `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// Input parameters.
	Parameters interface{} `pulumi:"parameters"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobResponse
func (val *CommandJobResponse) Defaults() *CommandJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Command job definition.
type CommandJobResponseOutput struct{ *pulumi.OutputState }

func (CommandJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobResponse)(nil)).Elem()
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutput() CommandJobResponseOutput {
	return o
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutputWithContext(ctx context.Context) CommandJobResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CommandJobResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobResponseOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o CommandJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobResponseOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobResponseOutput) Limits() CommandJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *CommandJobLimitsResponse { return v.Limits }).(CommandJobLimitsResponsePtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// Input parameters.
func (o CommandJobResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The asset property dictionary.
func (o CommandJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o CommandJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerType
func (val *ComponentContainerType) Defaults() *ComponentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentContainerTypeInput is an input type that accepts ComponentContainerTypeArgs and ComponentContainerTypeOutput values.
// You can construct a concrete instance of `ComponentContainerTypeInput` via:
//
//	ComponentContainerTypeArgs{...}
type ComponentContainerTypeInput interface {
	pulumi.Input

	ToComponentContainerTypeOutput() ComponentContainerTypeOutput
	ToComponentContainerTypeOutputWithContext(context.Context) ComponentContainerTypeOutput
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerTypeArgs
func (val *ComponentContainerTypeArgs) Defaults() *ComponentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return i.ToComponentContainerTypeOutputWithContext(context.Background())
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentContainerTypeOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeOutput struct{ *pulumi.OutputState }

func (ComponentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return o
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return o
}

// The asset description text.
func (o ComponentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerResponse
func (val *ComponentContainerResponse) Defaults() *ComponentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponseOutput struct{ *pulumi.OutputState }

func (ComponentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerResponse)(nil)).Elem()
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutput() ComponentContainerResponseOutput {
	return o
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutputWithContext(ctx context.Context) ComponentContainerResponseOutput {
	return o
}

// The asset description text.
func (o ComponentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ComponentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ComponentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ComponentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component container.
func (o ComponentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionType struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionType
func (val *ComponentVersionType) Defaults() *ComponentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentVersionTypeInput is an input type that accepts ComponentVersionTypeArgs and ComponentVersionTypeOutput values.
// You can construct a concrete instance of `ComponentVersionTypeInput` via:
//
//	ComponentVersionTypeArgs{...}
type ComponentVersionTypeInput interface {
	pulumi.Input

	ToComponentVersionTypeOutput() ComponentVersionTypeOutput
	ToComponentVersionTypeOutputWithContext(context.Context) ComponentVersionTypeOutput
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeArgs struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec pulumi.Input `pulumi:"componentSpec"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionTypeArgs
func (val *ComponentVersionTypeArgs) Defaults() *ComponentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return i.ToComponentVersionTypeOutputWithContext(context.Background())
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVersionTypeOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeOutput struct{ *pulumi.OutputState }

func (ComponentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return o
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionTypeOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionType) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponse struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the component version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionResponse
func (val *ComponentVersionResponse) Defaults() *ComponentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponseOutput struct{ *pulumi.OutputState }

func (ComponentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionResponse)(nil)).Elem()
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutput() ComponentVersionResponseOutput {
	return o
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutputWithContext(ctx context.Context) ComponentVersionResponseOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionResponseOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionResponse) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the component version.
func (o ComponentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstance struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of ComputeInstance
	Properties *ComputeInstanceProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstance
func (val *ComputeInstance) Defaults() *ComputeInstance {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// ComputeInstanceInput is an input type that accepts ComputeInstanceArgs and ComputeInstanceOutput values.
// You can construct a concrete instance of `ComputeInstanceInput` via:
//
//	ComputeInstanceArgs{...}
type ComputeInstanceInput interface {
	pulumi.Input

	ToComputeInstanceOutput() ComputeInstanceOutput
	ToComputeInstanceOutputWithContext(context.Context) ComputeInstanceOutput
}

// An Azure Machine Learning compute instance.
type ComputeInstanceArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of ComputeInstance
	Properties ComputeInstancePropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstanceArgs
func (val *ComputeInstanceArgs) Defaults() *ComputeInstanceArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ComputeInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstance)(nil)).Elem()
}

func (i ComputeInstanceArgs) ToComputeInstanceOutput() ComputeInstanceOutput {
	return i.ToComputeInstanceOutputWithContext(context.Background())
}

func (i ComputeInstanceArgs) ToComputeInstanceOutputWithContext(ctx context.Context) ComputeInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceOutput)
}

func (i ComputeInstanceArgs) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return i.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (i ComputeInstanceArgs) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceOutput).ToComputeInstancePtrOutputWithContext(ctx)
}

// ComputeInstancePtrInput is an input type that accepts ComputeInstanceArgs, ComputeInstancePtr and ComputeInstancePtrOutput values.
// You can construct a concrete instance of `ComputeInstancePtrInput` via:
//
//	        ComputeInstanceArgs{...}
//
//	or:
//
//	        nil
type ComputeInstancePtrInput interface {
	pulumi.Input

	ToComputeInstancePtrOutput() ComputeInstancePtrOutput
	ToComputeInstancePtrOutputWithContext(context.Context) ComputeInstancePtrOutput
}

type computeInstancePtrType ComputeInstanceArgs

func ComputeInstancePtr(v *ComputeInstanceArgs) ComputeInstancePtrInput {
	return (*computeInstancePtrType)(v)
}

func (*computeInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstance)(nil)).Elem()
}

func (i *computeInstancePtrType) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return i.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (i *computeInstancePtrType) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePtrOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstanceOutput struct{ *pulumi.OutputState }

func (ComputeInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstance)(nil)).Elem()
}

func (o ComputeInstanceOutput) ToComputeInstanceOutput() ComputeInstanceOutput {
	return o
}

func (o ComputeInstanceOutput) ToComputeInstanceOutputWithContext(ctx context.Context) ComputeInstanceOutput {
	return o
}

func (o ComputeInstanceOutput) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return o.ToComputeInstancePtrOutputWithContext(context.Background())
}

func (o ComputeInstanceOutput) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstance) *ComputeInstance {
		return &v
	}).(ComputeInstancePtrOutput)
}

// Location for the underlying compute
func (o ComputeInstanceOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstanceOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstance) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstanceOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of ComputeInstance
func (o ComputeInstanceOutput) Properties() ComputeInstancePropertiesPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *ComputeInstanceProperties { return v.Properties }).(ComputeInstancePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstanceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstance) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ComputeInstancePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstance)(nil)).Elem()
}

func (o ComputeInstancePtrOutput) ToComputeInstancePtrOutput() ComputeInstancePtrOutput {
	return o
}

func (o ComputeInstancePtrOutput) ToComputeInstancePtrOutputWithContext(ctx context.Context) ComputeInstancePtrOutput {
	return o
}

func (o ComputeInstancePtrOutput) Elem() ComputeInstanceOutput {
	return o.ApplyT(func(v *ComputeInstance) ComputeInstance {
		if v != nil {
			return *v
		}
		var ret ComputeInstance
		return ret
	}).(ComputeInstanceOutput)
}

// Location for the underlying compute
func (o ComputeInstancePtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstancePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstancePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstancePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of ComputeInstance
func (o ComputeInstancePtrOutput) Properties() ComputeInstancePropertiesPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *ComputeInstanceProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(ComputeInstancePropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstancePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstance) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance application and its connectivity endpoint URI.
type ComputeInstanceApplicationResponse struct {
	// Name of the ComputeInstance application.
	DisplayName *string `pulumi:"displayName"`
	// Application' endpoint URI.
	EndpointUri *string `pulumi:"endpointUri"`
}

// Defines an Aml Instance application and its connectivity endpoint URI.
type ComputeInstanceApplicationResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceApplicationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceApplicationResponse)(nil)).Elem()
}

func (o ComputeInstanceApplicationResponseOutput) ToComputeInstanceApplicationResponseOutput() ComputeInstanceApplicationResponseOutput {
	return o
}

func (o ComputeInstanceApplicationResponseOutput) ToComputeInstanceApplicationResponseOutputWithContext(ctx context.Context) ComputeInstanceApplicationResponseOutput {
	return o
}

// Name of the ComputeInstance application.
func (o ComputeInstanceApplicationResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceApplicationResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Application' endpoint URI.
func (o ComputeInstanceApplicationResponseOutput) EndpointUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceApplicationResponse) *string { return v.EndpointUri }).(pulumi.StringPtrOutput)
}

type ComputeInstanceApplicationResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceApplicationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceApplicationResponse)(nil)).Elem()
}

func (o ComputeInstanceApplicationResponseArrayOutput) ToComputeInstanceApplicationResponseArrayOutput() ComputeInstanceApplicationResponseArrayOutput {
	return o
}

func (o ComputeInstanceApplicationResponseArrayOutput) ToComputeInstanceApplicationResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceApplicationResponseArrayOutput {
	return o
}

func (o ComputeInstanceApplicationResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceApplicationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceApplicationResponse {
		return vs[0].([]ComputeInstanceApplicationResponse)[vs[1].(int)]
	}).(ComputeInstanceApplicationResponseOutput)
}

// Defines all connectivity endpoints and properties for an ComputeInstance.
type ComputeInstanceConnectivityEndpointsResponse struct {
	// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// Public IP Address of this ComputeInstance.
	PublicIpAddress string `pulumi:"publicIpAddress"`
}

// Defines all connectivity endpoints and properties for an ComputeInstance.
type ComputeInstanceConnectivityEndpointsResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceConnectivityEndpointsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceConnectivityEndpointsResponse)(nil)).Elem()
}

func (o ComputeInstanceConnectivityEndpointsResponseOutput) ToComputeInstanceConnectivityEndpointsResponseOutput() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponseOutput) ToComputeInstanceConnectivityEndpointsResponseOutputWithContext(ctx context.Context) ComputeInstanceConnectivityEndpointsResponseOutput {
	return o
}

// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
func (o ComputeInstanceConnectivityEndpointsResponseOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceConnectivityEndpointsResponse) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// Public IP Address of this ComputeInstance.
func (o ComputeInstanceConnectivityEndpointsResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceConnectivityEndpointsResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

type ComputeInstanceConnectivityEndpointsResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceConnectivityEndpointsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceConnectivityEndpointsResponse)(nil)).Elem()
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) ToComputeInstanceConnectivityEndpointsResponsePtrOutput() ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) ToComputeInstanceConnectivityEndpointsResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o
}

func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) Elem() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) ComputeInstanceConnectivityEndpointsResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceConnectivityEndpointsResponse
		return ret
	}).(ComputeInstanceConnectivityEndpointsResponseOutput)
}

// Private IP Address of this ComputeInstance (local to the VNET in which the compute instance is deployed).
func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateIpAddress
	}).(pulumi.StringPtrOutput)
}

// Public IP Address of this ComputeInstance.
func (o ComputeInstanceConnectivityEndpointsResponsePtrOutput) PublicIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceConnectivityEndpointsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PublicIpAddress
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance container.
type ComputeInstanceContainerResponse struct {
	// Auto save settings.
	Autosave *string `pulumi:"autosave"`
	// Environment information of this container.
	Environment *ComputeInstanceEnvironmentInfoResponse `pulumi:"environment"`
	// Information of GPU.
	Gpu *string `pulumi:"gpu"`
	// Name of the ComputeInstance container.
	Name *string `pulumi:"name"`
	// network of this container.
	Network *string `pulumi:"network"`
	// services of this containers.
	Services []interface{} `pulumi:"services"`
}

// Defines an Aml Instance container.
type ComputeInstanceContainerResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceContainerResponse)(nil)).Elem()
}

func (o ComputeInstanceContainerResponseOutput) ToComputeInstanceContainerResponseOutput() ComputeInstanceContainerResponseOutput {
	return o
}

func (o ComputeInstanceContainerResponseOutput) ToComputeInstanceContainerResponseOutputWithContext(ctx context.Context) ComputeInstanceContainerResponseOutput {
	return o
}

// Auto save settings.
func (o ComputeInstanceContainerResponseOutput) Autosave() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Autosave }).(pulumi.StringPtrOutput)
}

// Environment information of this container.
func (o ComputeInstanceContainerResponseOutput) Environment() ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *ComputeInstanceEnvironmentInfoResponse { return v.Environment }).(ComputeInstanceEnvironmentInfoResponsePtrOutput)
}

// Information of GPU.
func (o ComputeInstanceContainerResponseOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Name of the ComputeInstance container.
func (o ComputeInstanceContainerResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// network of this container.
func (o ComputeInstanceContainerResponseOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// services of this containers.
func (o ComputeInstanceContainerResponseOutput) Services() pulumi.ArrayOutput {
	return o.ApplyT(func(v ComputeInstanceContainerResponse) []interface{} { return v.Services }).(pulumi.ArrayOutput)
}

type ComputeInstanceContainerResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceContainerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceContainerResponse)(nil)).Elem()
}

func (o ComputeInstanceContainerResponseArrayOutput) ToComputeInstanceContainerResponseArrayOutput() ComputeInstanceContainerResponseArrayOutput {
	return o
}

func (o ComputeInstanceContainerResponseArrayOutput) ToComputeInstanceContainerResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceContainerResponseArrayOutput {
	return o
}

func (o ComputeInstanceContainerResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceContainerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceContainerResponse {
		return vs[0].([]ComputeInstanceContainerResponse)[vs[1].(int)]
	}).(ComputeInstanceContainerResponseOutput)
}

// Describes information on user who created this ComputeInstance.
type ComputeInstanceCreatedByResponse struct {
	// Uniquely identifies the user within his/her organization.
	UserId string `pulumi:"userId"`
	// Name of the user.
	UserName string `pulumi:"userName"`
	// Uniquely identifies user' Azure Active Directory organization.
	UserOrgId string `pulumi:"userOrgId"`
}

// Describes information on user who created this ComputeInstance.
type ComputeInstanceCreatedByResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceCreatedByResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceCreatedByResponse)(nil)).Elem()
}

func (o ComputeInstanceCreatedByResponseOutput) ToComputeInstanceCreatedByResponseOutput() ComputeInstanceCreatedByResponseOutput {
	return o
}

func (o ComputeInstanceCreatedByResponseOutput) ToComputeInstanceCreatedByResponseOutputWithContext(ctx context.Context) ComputeInstanceCreatedByResponseOutput {
	return o
}

// Uniquely identifies the user within his/her organization.
func (o ComputeInstanceCreatedByResponseOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserId }).(pulumi.StringOutput)
}

// Name of the user.
func (o ComputeInstanceCreatedByResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserName }).(pulumi.StringOutput)
}

// Uniquely identifies user' Azure Active Directory organization.
func (o ComputeInstanceCreatedByResponseOutput) UserOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceCreatedByResponse) string { return v.UserOrgId }).(pulumi.StringOutput)
}

type ComputeInstanceCreatedByResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceCreatedByResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceCreatedByResponse)(nil)).Elem()
}

func (o ComputeInstanceCreatedByResponsePtrOutput) ToComputeInstanceCreatedByResponsePtrOutput() ComputeInstanceCreatedByResponsePtrOutput {
	return o
}

func (o ComputeInstanceCreatedByResponsePtrOutput) ToComputeInstanceCreatedByResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceCreatedByResponsePtrOutput {
	return o
}

func (o ComputeInstanceCreatedByResponsePtrOutput) Elem() ComputeInstanceCreatedByResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) ComputeInstanceCreatedByResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceCreatedByResponse
		return ret
	}).(ComputeInstanceCreatedByResponseOutput)
}

// Uniquely identifies the user within his/her organization.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserId
	}).(pulumi.StringPtrOutput)
}

// Name of the user.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserName
	}).(pulumi.StringPtrOutput)
}

// Uniquely identifies user' Azure Active Directory organization.
func (o ComputeInstanceCreatedByResponsePtrOutput) UserOrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceCreatedByResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UserOrgId
	}).(pulumi.StringPtrOutput)
}

// Defines an Aml Instance DataDisk.
type ComputeInstanceDataDiskResponse struct {
	// Caching type of Data Disk.
	Caching *string `pulumi:"caching"`
	// The initial disk size in gigabytes.
	DiskSizeGB *int `pulumi:"diskSizeGB"`
	// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
	Lun *int `pulumi:"lun"`
	// type of this storage account.
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// Defaults sets the appropriate defaults for ComputeInstanceDataDiskResponse
func (val *ComputeInstanceDataDiskResponse) Defaults() *ComputeInstanceDataDiskResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StorageAccountType == nil {
		storageAccountType_ := "Standard_LRS"
		tmp.StorageAccountType = &storageAccountType_
	}
	return &tmp
}

// Defines an Aml Instance DataDisk.
type ComputeInstanceDataDiskResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceDataDiskResponse)(nil)).Elem()
}

func (o ComputeInstanceDataDiskResponseOutput) ToComputeInstanceDataDiskResponseOutput() ComputeInstanceDataDiskResponseOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseOutput) ToComputeInstanceDataDiskResponseOutputWithContext(ctx context.Context) ComputeInstanceDataDiskResponseOutput {
	return o
}

// Caching type of Data Disk.
func (o ComputeInstanceDataDiskResponseOutput) Caching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *string { return v.Caching }).(pulumi.StringPtrOutput)
}

// The initial disk size in gigabytes.
func (o ComputeInstanceDataDiskResponseOutput) DiskSizeGB() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *int { return v.DiskSizeGB }).(pulumi.IntPtrOutput)
}

// The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun.
func (o ComputeInstanceDataDiskResponseOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// type of this storage account.
func (o ComputeInstanceDataDiskResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataDiskResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type ComputeInstanceDataDiskResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataDiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceDataDiskResponse)(nil)).Elem()
}

func (o ComputeInstanceDataDiskResponseArrayOutput) ToComputeInstanceDataDiskResponseArrayOutput() ComputeInstanceDataDiskResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseArrayOutput) ToComputeInstanceDataDiskResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceDataDiskResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataDiskResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceDataDiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceDataDiskResponse {
		return vs[0].([]ComputeInstanceDataDiskResponse)[vs[1].(int)]
	}).(ComputeInstanceDataDiskResponseOutput)
}

// Defines an Aml Instance DataMount.
type ComputeInstanceDataMountResponse struct {
	// who this data mount created by.
	CreatedBy *string `pulumi:"createdBy"`
	// Error of this data mount.
	Error *string `pulumi:"error"`
	// Mount Action.
	MountAction *string `pulumi:"mountAction"`
	// name of the ComputeInstance data mount.
	MountName *string `pulumi:"mountName"`
	// Path of this data mount.
	MountPath *string `pulumi:"mountPath"`
	// Mount state.
	MountState *string `pulumi:"mountState"`
	// The time when the disk mounted.
	MountedOn *string `pulumi:"mountedOn"`
	// Source of the ComputeInstance data mount.
	Source *string `pulumi:"source"`
	// Data source type.
	SourceType *string `pulumi:"sourceType"`
}

// Defines an Aml Instance DataMount.
type ComputeInstanceDataMountResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataMountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceDataMountResponse)(nil)).Elem()
}

func (o ComputeInstanceDataMountResponseOutput) ToComputeInstanceDataMountResponseOutput() ComputeInstanceDataMountResponseOutput {
	return o
}

func (o ComputeInstanceDataMountResponseOutput) ToComputeInstanceDataMountResponseOutputWithContext(ctx context.Context) ComputeInstanceDataMountResponseOutput {
	return o
}

// who this data mount created by.
func (o ComputeInstanceDataMountResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// Error of this data mount.
func (o ComputeInstanceDataMountResponseOutput) Error() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.Error }).(pulumi.StringPtrOutput)
}

// Mount Action.
func (o ComputeInstanceDataMountResponseOutput) MountAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountAction }).(pulumi.StringPtrOutput)
}

// name of the ComputeInstance data mount.
func (o ComputeInstanceDataMountResponseOutput) MountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountName }).(pulumi.StringPtrOutput)
}

// Path of this data mount.
func (o ComputeInstanceDataMountResponseOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// Mount state.
func (o ComputeInstanceDataMountResponseOutput) MountState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountState }).(pulumi.StringPtrOutput)
}

// The time when the disk mounted.
func (o ComputeInstanceDataMountResponseOutput) MountedOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.MountedOn }).(pulumi.StringPtrOutput)
}

// Source of the ComputeInstance data mount.
func (o ComputeInstanceDataMountResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Data source type.
func (o ComputeInstanceDataMountResponseOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceDataMountResponse) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

type ComputeInstanceDataMountResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeInstanceDataMountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeInstanceDataMountResponse)(nil)).Elem()
}

func (o ComputeInstanceDataMountResponseArrayOutput) ToComputeInstanceDataMountResponseArrayOutput() ComputeInstanceDataMountResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataMountResponseArrayOutput) ToComputeInstanceDataMountResponseArrayOutputWithContext(ctx context.Context) ComputeInstanceDataMountResponseArrayOutput {
	return o
}

func (o ComputeInstanceDataMountResponseArrayOutput) Index(i pulumi.IntInput) ComputeInstanceDataMountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeInstanceDataMountResponse {
		return vs[0].([]ComputeInstanceDataMountResponse)[vs[1].(int)]
	}).(ComputeInstanceDataMountResponseOutput)
}

// Environment information
type ComputeInstanceEnvironmentInfoResponse struct {
	// name of environment.
	Name *string `pulumi:"name"`
	// version of environment.
	Version *string `pulumi:"version"`
}

// Environment information
type ComputeInstanceEnvironmentInfoResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceEnvironmentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceEnvironmentInfoResponse)(nil)).Elem()
}

func (o ComputeInstanceEnvironmentInfoResponseOutput) ToComputeInstanceEnvironmentInfoResponseOutput() ComputeInstanceEnvironmentInfoResponseOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponseOutput) ToComputeInstanceEnvironmentInfoResponseOutputWithContext(ctx context.Context) ComputeInstanceEnvironmentInfoResponseOutput {
	return o
}

// name of environment.
func (o ComputeInstanceEnvironmentInfoResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceEnvironmentInfoResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// version of environment.
func (o ComputeInstanceEnvironmentInfoResponseOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceEnvironmentInfoResponse) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ComputeInstanceEnvironmentInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceEnvironmentInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceEnvironmentInfoResponse)(nil)).Elem()
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) ToComputeInstanceEnvironmentInfoResponsePtrOutput() ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) ToComputeInstanceEnvironmentInfoResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceEnvironmentInfoResponsePtrOutput {
	return o
}

func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Elem() ComputeInstanceEnvironmentInfoResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) ComputeInstanceEnvironmentInfoResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceEnvironmentInfoResponse
		return ret
	}).(ComputeInstanceEnvironmentInfoResponseOutput)
}

// name of environment.
func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// version of environment.
func (o ComputeInstanceEnvironmentInfoResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceEnvironmentInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// The last operation on ComputeInstance.
type ComputeInstanceLastOperationResponse struct {
	// Name of the last operation.
	OperationName *string `pulumi:"operationName"`
	// Operation status.
	OperationStatus *string `pulumi:"operationStatus"`
	// Time of the last operation.
	OperationTime *string `pulumi:"operationTime"`
	// Trigger of operation.
	OperationTrigger *string `pulumi:"operationTrigger"`
}

// The last operation on ComputeInstance.
type ComputeInstanceLastOperationResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceLastOperationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceLastOperationResponse)(nil)).Elem()
}

func (o ComputeInstanceLastOperationResponseOutput) ToComputeInstanceLastOperationResponseOutput() ComputeInstanceLastOperationResponseOutput {
	return o
}

func (o ComputeInstanceLastOperationResponseOutput) ToComputeInstanceLastOperationResponseOutputWithContext(ctx context.Context) ComputeInstanceLastOperationResponseOutput {
	return o
}

// Name of the last operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationName }).(pulumi.StringPtrOutput)
}

// Operation status.
func (o ComputeInstanceLastOperationResponseOutput) OperationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationStatus }).(pulumi.StringPtrOutput)
}

// Time of the last operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationTime }).(pulumi.StringPtrOutput)
}

// Trigger of operation.
func (o ComputeInstanceLastOperationResponseOutput) OperationTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceLastOperationResponse) *string { return v.OperationTrigger }).(pulumi.StringPtrOutput)
}

type ComputeInstanceLastOperationResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceLastOperationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceLastOperationResponse)(nil)).Elem()
}

func (o ComputeInstanceLastOperationResponsePtrOutput) ToComputeInstanceLastOperationResponsePtrOutput() ComputeInstanceLastOperationResponsePtrOutput {
	return o
}

func (o ComputeInstanceLastOperationResponsePtrOutput) ToComputeInstanceLastOperationResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceLastOperationResponsePtrOutput {
	return o
}

func (o ComputeInstanceLastOperationResponsePtrOutput) Elem() ComputeInstanceLastOperationResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) ComputeInstanceLastOperationResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceLastOperationResponse
		return ret
	}).(ComputeInstanceLastOperationResponseOutput)
}

// Name of the last operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationName
	}).(pulumi.StringPtrOutput)
}

// Operation status.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationStatus
	}).(pulumi.StringPtrOutput)
}

// Time of the last operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationTime
	}).(pulumi.StringPtrOutput)
}

// Trigger of operation.
func (o ComputeInstanceLastOperationResponsePtrOutput) OperationTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceLastOperationResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperationTrigger
	}).(pulumi.StringPtrOutput)
}

// Compute Instance properties
type ComputeInstanceProperties struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// List of Custom Services added to the compute.
	CustomServices []CustomService `pulumi:"customServices"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettings `pulumi:"personalComputeInstanceSettings"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedules `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScripts `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettings `pulumi:"sshSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceId `pulumi:"subnet"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstanceProperties
func (val *ComputeInstanceProperties) Defaults() *ComputeInstanceProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// ComputeInstancePropertiesInput is an input type that accepts ComputeInstancePropertiesArgs and ComputeInstancePropertiesOutput values.
// You can construct a concrete instance of `ComputeInstancePropertiesInput` via:
//
//	ComputeInstancePropertiesArgs{...}
type ComputeInstancePropertiesInput interface {
	pulumi.Input

	ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput
	ToComputeInstancePropertiesOutputWithContext(context.Context) ComputeInstancePropertiesOutput
}

// Compute Instance properties
type ComputeInstancePropertiesArgs struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy pulumi.StringPtrInput `pulumi:"applicationSharingPolicy"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType pulumi.StringPtrInput `pulumi:"computeInstanceAuthorizationType"`
	// List of Custom Services added to the compute.
	CustomServices CustomServiceArrayInput `pulumi:"customServices"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp pulumi.BoolPtrInput `pulumi:"enableNodePublicIp"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings PersonalComputeInstanceSettingsPtrInput `pulumi:"personalComputeInstanceSettings"`
	// The list of schedules to be applied on the computes.
	Schedules ComputeSchedulesPtrInput `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts SetupScriptsPtrInput `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings ComputeInstanceSshSettingsPtrInput `pulumi:"sshSettings"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet ResourceIdPtrInput `pulumi:"subnet"`
	// Virtual Machine Size
	VmSize pulumi.StringPtrInput `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstancePropertiesArgs
func (val *ComputeInstancePropertiesArgs) Defaults() *ComputeInstancePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		tmp.ApplicationSharingPolicy = pulumi.StringPtr("Shared")
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		tmp.ComputeInstanceAuthorizationType = pulumi.StringPtr("personal")
	}

	return &tmp
}
func (ComputeInstancePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceProperties)(nil)).Elem()
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput {
	return i.ToComputeInstancePropertiesOutputWithContext(context.Background())
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesOutputWithContext(ctx context.Context) ComputeInstancePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesOutput)
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return i.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i ComputeInstancePropertiesArgs) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesOutput).ToComputeInstancePropertiesPtrOutputWithContext(ctx)
}

// ComputeInstancePropertiesPtrInput is an input type that accepts ComputeInstancePropertiesArgs, ComputeInstancePropertiesPtr and ComputeInstancePropertiesPtrOutput values.
// You can construct a concrete instance of `ComputeInstancePropertiesPtrInput` via:
//
//	        ComputeInstancePropertiesArgs{...}
//
//	or:
//
//	        nil
type ComputeInstancePropertiesPtrInput interface {
	pulumi.Input

	ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput
	ToComputeInstancePropertiesPtrOutputWithContext(context.Context) ComputeInstancePropertiesPtrOutput
}

type computeInstancePropertiesPtrType ComputeInstancePropertiesArgs

func ComputeInstancePropertiesPtr(v *ComputeInstancePropertiesArgs) ComputeInstancePropertiesPtrInput {
	return (*computeInstancePropertiesPtrType)(v)
}

func (*computeInstancePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceProperties)(nil)).Elem()
}

func (i *computeInstancePropertiesPtrType) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return i.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (i *computeInstancePropertiesPtrType) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstancePropertiesPtrOutput)
}

// Compute Instance properties
type ComputeInstancePropertiesOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceProperties)(nil)).Elem()
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesOutput() ComputeInstancePropertiesOutput {
	return o
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesOutputWithContext(ctx context.Context) ComputeInstancePropertiesOutput {
	return o
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return o.ToComputeInstancePropertiesPtrOutputWithContext(context.Background())
}

func (o ComputeInstancePropertiesOutput) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceProperties) *ComputeInstanceProperties {
		return &v
	}).(ComputeInstancePropertiesPtrOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.ApplicationSharingPolicy }).(pulumi.StringPtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.ComputeInstanceAuthorizationType }).(pulumi.StringPtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesOutput) CustomServices() CustomServiceArrayOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) []CustomService { return v.CustomServices }).(CustomServiceArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *PersonalComputeInstanceSettings {
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesOutput) Schedules() ComputeSchedulesPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ComputeSchedules { return v.Schedules }).(ComputeSchedulesPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesOutput) SetupScripts() SetupScriptsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *SetupScripts { return v.SetupScripts }).(SetupScriptsPtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesOutput) SshSettings() ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ComputeInstanceSshSettings { return v.SshSettings }).(ComputeInstanceSshSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *ResourceId { return v.Subnet }).(ResourceIdPtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceProperties) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ComputeInstancePropertiesPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceProperties)(nil)).Elem()
}

func (o ComputeInstancePropertiesPtrOutput) ToComputeInstancePropertiesPtrOutput() ComputeInstancePropertiesPtrOutput {
	return o
}

func (o ComputeInstancePropertiesPtrOutput) ToComputeInstancePropertiesPtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesPtrOutput {
	return o
}

func (o ComputeInstancePropertiesPtrOutput) Elem() ComputeInstancePropertiesOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) ComputeInstanceProperties {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceProperties
		return ret
	}).(ComputeInstancePropertiesOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesPtrOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSharingPolicy
	}).(pulumi.StringPtrOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesPtrOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.ComputeInstanceAuthorizationType
	}).(pulumi.StringPtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesPtrOutput) CustomServices() CustomServiceArrayOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) []CustomService {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(CustomServiceArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesPtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesPtrOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *PersonalComputeInstanceSettings {
		if v == nil {
			return nil
		}
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesPtrOutput) Schedules() ComputeSchedulesPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ComputeSchedules {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ComputeSchedulesPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesPtrOutput) SetupScripts() SetupScriptsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *SetupScripts {
		if v == nil {
			return nil
		}
		return v.SetupScripts
	}).(SetupScriptsPtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesPtrOutput) SshSettings() ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ComputeInstanceSshSettings {
		if v == nil {
			return nil
		}
		return v.SshSettings
	}).(ComputeInstanceSshSettingsPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesPtrOutput) Subnet() ResourceIdPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *ResourceId {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdPtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesPtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceProperties) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// Compute Instance properties
type ComputeInstancePropertiesResponse struct {
	// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
	ApplicationSharingPolicy *string `pulumi:"applicationSharingPolicy"`
	// Describes available applications and their endpoints on this ComputeInstance.
	Applications []ComputeInstanceApplicationResponse `pulumi:"applications"`
	// The Compute Instance Authorization type. Available values are personal (default).
	ComputeInstanceAuthorizationType *string `pulumi:"computeInstanceAuthorizationType"`
	// Describes all connectivity endpoints available for this ComputeInstance.
	ConnectivityEndpoints ComputeInstanceConnectivityEndpointsResponse `pulumi:"connectivityEndpoints"`
	// Describes informations of containers on this ComputeInstance.
	Containers []ComputeInstanceContainerResponse `pulumi:"containers"`
	// Describes information on user who created this ComputeInstance.
	CreatedBy ComputeInstanceCreatedByResponse `pulumi:"createdBy"`
	// List of Custom Services added to the compute.
	CustomServices []CustomServiceResponse `pulumi:"customServices"`
	// Describes informations of dataDisks on this ComputeInstance.
	DataDisks []ComputeInstanceDataDiskResponse `pulumi:"dataDisks"`
	// Describes informations of dataMounts on this ComputeInstance.
	DataMounts []ComputeInstanceDataMountResponse `pulumi:"dataMounts"`
	// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
	EnableNodePublicIp *bool `pulumi:"enableNodePublicIp"`
	// Collection of errors encountered on this ComputeInstance.
	Errors []ErrorResponseResponse `pulumi:"errors"`
	// The last operation on ComputeInstance.
	LastOperation ComputeInstanceLastOperationResponse `pulumi:"lastOperation"`
	// Returns metadata about the operating system image for this compute instance.
	OsImageMetadata ImageMetadataResponse `pulumi:"osImageMetadata"`
	// Settings for a personal compute instance.
	PersonalComputeInstanceSettings *PersonalComputeInstanceSettingsResponse `pulumi:"personalComputeInstanceSettings"`
	// The list of schedules to be applied on the computes.
	Schedules *ComputeSchedulesResponse `pulumi:"schedules"`
	// Details of customized scripts to execute for setting up the cluster.
	SetupScripts *SetupScriptsResponse `pulumi:"setupScripts"`
	// Specifies policy and settings for SSH access.
	SshSettings *ComputeInstanceSshSettingsResponse `pulumi:"sshSettings"`
	// The current state of this ComputeInstance.
	State string `pulumi:"state"`
	// Virtual network subnet resource ID the compute nodes belong to.
	Subnet *ResourceIdResponse `pulumi:"subnet"`
	// ComputeInstance version.
	Versions ComputeInstanceVersionResponse `pulumi:"versions"`
	// Virtual Machine Size
	VmSize *string `pulumi:"vmSize"`
}

// Defaults sets the appropriate defaults for ComputeInstancePropertiesResponse
func (val *ComputeInstancePropertiesResponse) Defaults() *ComputeInstancePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ApplicationSharingPolicy == nil {
		applicationSharingPolicy_ := "Shared"
		tmp.ApplicationSharingPolicy = &applicationSharingPolicy_
	}
	if tmp.ComputeInstanceAuthorizationType == nil {
		computeInstanceAuthorizationType_ := "personal"
		tmp.ComputeInstanceAuthorizationType = &computeInstanceAuthorizationType_
	}
	tmp.SshSettings = tmp.SshSettings.Defaults()

	return &tmp
}

// Compute Instance properties
type ComputeInstancePropertiesResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstancePropertiesResponse)(nil)).Elem()
}

func (o ComputeInstancePropertiesResponseOutput) ToComputeInstancePropertiesResponseOutput() ComputeInstancePropertiesResponseOutput {
	return o
}

func (o ComputeInstancePropertiesResponseOutput) ToComputeInstancePropertiesResponseOutputWithContext(ctx context.Context) ComputeInstancePropertiesResponseOutput {
	return o
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesResponseOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.ApplicationSharingPolicy }).(pulumi.StringPtrOutput)
}

// Describes available applications and their endpoints on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Applications() ComputeInstanceApplicationResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceApplicationResponse { return v.Applications }).(ComputeInstanceApplicationResponseArrayOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesResponseOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.ComputeInstanceAuthorizationType }).(pulumi.StringPtrOutput)
}

// Describes all connectivity endpoints available for this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) ConnectivityEndpoints() ComputeInstanceConnectivityEndpointsResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceConnectivityEndpointsResponse {
		return v.ConnectivityEndpoints
	}).(ComputeInstanceConnectivityEndpointsResponseOutput)
}

// Describes informations of containers on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Containers() ComputeInstanceContainerResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceContainerResponse { return v.Containers }).(ComputeInstanceContainerResponseArrayOutput)
}

// Describes information on user who created this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) CreatedBy() ComputeInstanceCreatedByResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceCreatedByResponse { return v.CreatedBy }).(ComputeInstanceCreatedByResponseOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesResponseOutput) CustomServices() CustomServiceResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []CustomServiceResponse { return v.CustomServices }).(CustomServiceResponseArrayOutput)
}

// Describes informations of dataDisks on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) DataDisks() ComputeInstanceDataDiskResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceDataDiskResponse { return v.DataDisks }).(ComputeInstanceDataDiskResponseArrayOutput)
}

// Describes informations of dataMounts on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) DataMounts() ComputeInstanceDataMountResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ComputeInstanceDataMountResponse { return v.DataMounts }).(ComputeInstanceDataMountResponseArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesResponseOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *bool { return v.EnableNodePublicIp }).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered on this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) []ErrorResponseResponse { return v.Errors }).(ErrorResponseResponseArrayOutput)
}

// The last operation on ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) LastOperation() ComputeInstanceLastOperationResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceLastOperationResponse { return v.LastOperation }).(ComputeInstanceLastOperationResponseOutput)
}

// Returns metadata about the operating system image for this compute instance.
func (o ComputeInstancePropertiesResponseOutput) OsImageMetadata() ImageMetadataResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ImageMetadataResponse { return v.OsImageMetadata }).(ImageMetadataResponseOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesResponseOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *PersonalComputeInstanceSettingsResponse {
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsResponsePtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesResponseOutput) Schedules() ComputeSchedulesResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ComputeSchedulesResponse { return v.Schedules }).(ComputeSchedulesResponsePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesResponseOutput) SetupScripts() SetupScriptsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *SetupScriptsResponse { return v.SetupScripts }).(SetupScriptsResponsePtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesResponseOutput) SshSettings() ComputeInstanceSshSettingsResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ComputeInstanceSshSettingsResponse { return v.SshSettings }).(ComputeInstanceSshSettingsResponsePtrOutput)
}

// The current state of this ComputeInstance.
func (o ComputeInstancePropertiesResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) string { return v.State }).(pulumi.StringOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesResponseOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *ResourceIdResponse { return v.Subnet }).(ResourceIdResponsePtrOutput)
}

// ComputeInstance version.
func (o ComputeInstancePropertiesResponseOutput) Versions() ComputeInstanceVersionResponseOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) ComputeInstanceVersionResponse { return v.Versions }).(ComputeInstanceVersionResponseOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesResponseOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstancePropertiesResponse) *string { return v.VmSize }).(pulumi.StringPtrOutput)
}

type ComputeInstancePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstancePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstancePropertiesResponse)(nil)).Elem()
}

func (o ComputeInstancePropertiesResponsePtrOutput) ToComputeInstancePropertiesResponsePtrOutput() ComputeInstancePropertiesResponsePtrOutput {
	return o
}

func (o ComputeInstancePropertiesResponsePtrOutput) ToComputeInstancePropertiesResponsePtrOutputWithContext(ctx context.Context) ComputeInstancePropertiesResponsePtrOutput {
	return o
}

func (o ComputeInstancePropertiesResponsePtrOutput) Elem() ComputeInstancePropertiesResponseOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) ComputeInstancePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstancePropertiesResponse
		return ret
	}).(ComputeInstancePropertiesResponseOutput)
}

// Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
func (o ComputeInstancePropertiesResponsePtrOutput) ApplicationSharingPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ApplicationSharingPolicy
	}).(pulumi.StringPtrOutput)
}

// Describes available applications and their endpoints on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Applications() ComputeInstanceApplicationResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceApplicationResponse {
		if v == nil {
			return nil
		}
		return v.Applications
	}).(ComputeInstanceApplicationResponseArrayOutput)
}

// The Compute Instance Authorization type. Available values are personal (default).
func (o ComputeInstancePropertiesResponsePtrOutput) ComputeInstanceAuthorizationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ComputeInstanceAuthorizationType
	}).(pulumi.StringPtrOutput)
}

// Describes all connectivity endpoints available for this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) ConnectivityEndpoints() ComputeInstanceConnectivityEndpointsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceConnectivityEndpointsResponse {
		if v == nil {
			return nil
		}
		return &v.ConnectivityEndpoints
	}).(ComputeInstanceConnectivityEndpointsResponsePtrOutput)
}

// Describes informations of containers on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Containers() ComputeInstanceContainerResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceContainerResponse {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ComputeInstanceContainerResponseArrayOutput)
}

// Describes information on user who created this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) CreatedBy() ComputeInstanceCreatedByResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceCreatedByResponse {
		if v == nil {
			return nil
		}
		return &v.CreatedBy
	}).(ComputeInstanceCreatedByResponsePtrOutput)
}

// List of Custom Services added to the compute.
func (o ComputeInstancePropertiesResponsePtrOutput) CustomServices() CustomServiceResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []CustomServiceResponse {
		if v == nil {
			return nil
		}
		return v.CustomServices
	}).(CustomServiceResponseArrayOutput)
}

// Describes informations of dataDisks on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) DataDisks() ComputeInstanceDataDiskResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceDataDiskResponse {
		if v == nil {
			return nil
		}
		return v.DataDisks
	}).(ComputeInstanceDataDiskResponseArrayOutput)
}

// Describes informations of dataMounts on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) DataMounts() ComputeInstanceDataMountResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ComputeInstanceDataMountResponse {
		if v == nil {
			return nil
		}
		return v.DataMounts
	}).(ComputeInstanceDataMountResponseArrayOutput)
}

// Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
func (o ComputeInstancePropertiesResponsePtrOutput) EnableNodePublicIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNodePublicIp
	}).(pulumi.BoolPtrOutput)
}

// Collection of errors encountered on this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) Errors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) []ErrorResponseResponse {
		if v == nil {
			return nil
		}
		return v.Errors
	}).(ErrorResponseResponseArrayOutput)
}

// The last operation on ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) LastOperation() ComputeInstanceLastOperationResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceLastOperationResponse {
		if v == nil {
			return nil
		}
		return &v.LastOperation
	}).(ComputeInstanceLastOperationResponsePtrOutput)
}

// Returns metadata about the operating system image for this compute instance.
func (o ComputeInstancePropertiesResponsePtrOutput) OsImageMetadata() ImageMetadataResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ImageMetadataResponse {
		if v == nil {
			return nil
		}
		return &v.OsImageMetadata
	}).(ImageMetadataResponsePtrOutput)
}

// Settings for a personal compute instance.
func (o ComputeInstancePropertiesResponsePtrOutput) PersonalComputeInstanceSettings() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *PersonalComputeInstanceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.PersonalComputeInstanceSettings
	}).(PersonalComputeInstanceSettingsResponsePtrOutput)
}

// The list of schedules to be applied on the computes.
func (o ComputeInstancePropertiesResponsePtrOutput) Schedules() ComputeSchedulesResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeSchedulesResponse {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(ComputeSchedulesResponsePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
func (o ComputeInstancePropertiesResponsePtrOutput) SetupScripts() SetupScriptsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *SetupScriptsResponse {
		if v == nil {
			return nil
		}
		return v.SetupScripts
	}).(SetupScriptsResponsePtrOutput)
}

// Specifies policy and settings for SSH access.
func (o ComputeInstancePropertiesResponsePtrOutput) SshSettings() ComputeInstanceSshSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceSshSettingsResponse {
		if v == nil {
			return nil
		}
		return v.SshSettings
	}).(ComputeInstanceSshSettingsResponsePtrOutput)
}

// The current state of this ComputeInstance.
func (o ComputeInstancePropertiesResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// Virtual network subnet resource ID the compute nodes belong to.
func (o ComputeInstancePropertiesResponsePtrOutput) Subnet() ResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.Subnet
	}).(ResourceIdResponsePtrOutput)
}

// ComputeInstance version.
func (o ComputeInstancePropertiesResponsePtrOutput) Versions() ComputeInstanceVersionResponsePtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *ComputeInstanceVersionResponse {
		if v == nil {
			return nil
		}
		return &v.Versions
	}).(ComputeInstanceVersionResponsePtrOutput)
}

// Virtual Machine Size
func (o ComputeInstancePropertiesResponsePtrOutput) VmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstancePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VmSize
	}).(pulumi.StringPtrOutput)
}

// An Azure Machine Learning compute instance.
type ComputeInstanceResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'ComputeInstance'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of ComputeInstance
	Properties *ComputeInstancePropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for ComputeInstanceResponse
func (val *ComputeInstanceResponse) Defaults() *ComputeInstanceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// An Azure Machine Learning compute instance.
type ComputeInstanceResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceResponse)(nil)).Elem()
}

func (o ComputeInstanceResponseOutput) ToComputeInstanceResponseOutput() ComputeInstanceResponseOutput {
	return o
}

func (o ComputeInstanceResponseOutput) ToComputeInstanceResponseOutputWithContext(ctx context.Context) ComputeInstanceResponseOutput {
	return o
}

// Location for the underlying compute
func (o ComputeInstanceResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'ComputeInstance'.
func (o ComputeInstanceResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o ComputeInstanceResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o ComputeInstanceResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o ComputeInstanceResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o ComputeInstanceResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o ComputeInstanceResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of ComputeInstance
func (o ComputeInstanceResponseOutput) Properties() ComputeInstancePropertiesResponsePtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *ComputeInstancePropertiesResponse { return v.Properties }).(ComputeInstancePropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o ComputeInstanceResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o ComputeInstanceResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o ComputeInstanceResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettings struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettings
func (val *ComputeInstanceSshSettings) Defaults() *ComputeInstanceSshSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// ComputeInstanceSshSettingsInput is an input type that accepts ComputeInstanceSshSettingsArgs and ComputeInstanceSshSettingsOutput values.
// You can construct a concrete instance of `ComputeInstanceSshSettingsInput` via:
//
//	ComputeInstanceSshSettingsArgs{...}
type ComputeInstanceSshSettingsInput interface {
	pulumi.Input

	ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput
	ToComputeInstanceSshSettingsOutputWithContext(context.Context) ComputeInstanceSshSettingsOutput
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsArgs struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey pulumi.StringPtrInput `pulumi:"adminPublicKey"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess pulumi.StringPtrInput `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettingsArgs
func (val *ComputeInstanceSshSettingsArgs) Defaults() *ComputeInstanceSshSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		tmp.SshPublicAccess = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (ComputeInstanceSshSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettings)(nil)).Elem()
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput {
	return i.ToComputeInstanceSshSettingsOutputWithContext(context.Background())
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsOutput)
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return i.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (i ComputeInstanceSshSettingsArgs) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsOutput).ToComputeInstanceSshSettingsPtrOutputWithContext(ctx)
}

// ComputeInstanceSshSettingsPtrInput is an input type that accepts ComputeInstanceSshSettingsArgs, ComputeInstanceSshSettingsPtr and ComputeInstanceSshSettingsPtrOutput values.
// You can construct a concrete instance of `ComputeInstanceSshSettingsPtrInput` via:
//
//	        ComputeInstanceSshSettingsArgs{...}
//
//	or:
//
//	        nil
type ComputeInstanceSshSettingsPtrInput interface {
	pulumi.Input

	ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput
	ToComputeInstanceSshSettingsPtrOutputWithContext(context.Context) ComputeInstanceSshSettingsPtrOutput
}

type computeInstanceSshSettingsPtrType ComputeInstanceSshSettingsArgs

func ComputeInstanceSshSettingsPtr(v *ComputeInstanceSshSettingsArgs) ComputeInstanceSshSettingsPtrInput {
	return (*computeInstanceSshSettingsPtrType)(v)
}

func (*computeInstanceSshSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettings)(nil)).Elem()
}

func (i *computeInstanceSshSettingsPtrType) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return i.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (i *computeInstanceSshSettingsPtrType) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeInstanceSshSettingsPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettings)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsOutput() ComputeInstanceSshSettingsOutput {
	return o
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsOutput {
	return o
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return o.ToComputeInstanceSshSettingsPtrOutputWithContext(context.Background())
}

func (o ComputeInstanceSshSettingsOutput) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeInstanceSshSettings) *ComputeInstanceSshSettings {
		return &v
	}).(ComputeInstanceSshSettingsPtrOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettings) *string { return v.AdminPublicKey }).(pulumi.StringPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettings) *string { return v.SshPublicAccess }).(pulumi.StringPtrOutput)
}

type ComputeInstanceSshSettingsPtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettings)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsPtrOutput) ToComputeInstanceSshSettingsPtrOutput() ComputeInstanceSshSettingsPtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsPtrOutput) ToComputeInstanceSshSettingsPtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsPtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsPtrOutput) Elem() ComputeInstanceSshSettingsOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) ComputeInstanceSshSettings {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceSshSettings
		return ret
	}).(ComputeInstanceSshSettingsOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsPtrOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) *string {
		if v == nil {
			return nil
		}
		return v.AdminPublicKey
	}).(pulumi.StringPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsPtrOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettings) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsResponse struct {
	// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
	AdminPublicKey *string `pulumi:"adminPublicKey"`
	// Describes the admin user name.
	AdminUserName string `pulumi:"adminUserName"`
	// Describes the port for connecting through SSH.
	SshPort int `pulumi:"sshPort"`
	// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
	SshPublicAccess *string `pulumi:"sshPublicAccess"`
}

// Defaults sets the appropriate defaults for ComputeInstanceSshSettingsResponse
func (val *ComputeInstanceSshSettingsResponse) Defaults() *ComputeInstanceSshSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.SshPublicAccess == nil {
		sshPublicAccess_ := "Disabled"
		tmp.SshPublicAccess = &sshPublicAccess_
	}
	return &tmp
}

// Specifies policy and settings for SSH access.
type ComputeInstanceSshSettingsResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceSshSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsResponseOutput) ToComputeInstanceSshSettingsResponseOutput() ComputeInstanceSshSettingsResponseOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponseOutput) ToComputeInstanceSshSettingsResponseOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsResponseOutput {
	return o
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsResponseOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) *string { return v.AdminPublicKey }).(pulumi.StringPtrOutput)
}

// Describes the admin user name.
func (o ComputeInstanceSshSettingsResponseOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshSettingsResponseOutput) SshPort() pulumi.IntOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) int { return v.SshPort }).(pulumi.IntOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsResponseOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceSshSettingsResponse) *string { return v.SshPublicAccess }).(pulumi.StringPtrOutput)
}

type ComputeInstanceSshSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceSshSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceSshSettingsResponse)(nil)).Elem()
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) ToComputeInstanceSshSettingsResponsePtrOutput() ComputeInstanceSshSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) ToComputeInstanceSshSettingsResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceSshSettingsResponsePtrOutput {
	return o
}

func (o ComputeInstanceSshSettingsResponsePtrOutput) Elem() ComputeInstanceSshSettingsResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) ComputeInstanceSshSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceSshSettingsResponse
		return ret
	}).(ComputeInstanceSshSettingsResponseOutput)
}

// Specifies the SSH rsa public key file as a string. Use "ssh-keygen -t rsa -b 2048" to generate your SSH key pairs.
func (o ComputeInstanceSshSettingsResponsePtrOutput) AdminPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminPublicKey
	}).(pulumi.StringPtrOutput)
}

// Describes the admin user name.
func (o ComputeInstanceSshSettingsResponsePtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Describes the port for connecting through SSH.
func (o ComputeInstanceSshSettingsResponsePtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.SshPort
	}).(pulumi.IntPtrOutput)
}

// State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on this instance. Enabled - Indicates that the public ssh port is open and accessible according to the VNet/subnet policy if applicable.
func (o ComputeInstanceSshSettingsResponsePtrOutput) SshPublicAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceSshSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.SshPublicAccess
	}).(pulumi.StringPtrOutput)
}

// Version of computeInstance.
type ComputeInstanceVersionResponse struct {
	// Runtime of compute instance.
	Runtime *string `pulumi:"runtime"`
}

// Version of computeInstance.
type ComputeInstanceVersionResponseOutput struct{ *pulumi.OutputState }

func (ComputeInstanceVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeInstanceVersionResponse)(nil)).Elem()
}

func (o ComputeInstanceVersionResponseOutput) ToComputeInstanceVersionResponseOutput() ComputeInstanceVersionResponseOutput {
	return o
}

func (o ComputeInstanceVersionResponseOutput) ToComputeInstanceVersionResponseOutputWithContext(ctx context.Context) ComputeInstanceVersionResponseOutput {
	return o
}

// Runtime of compute instance.
func (o ComputeInstanceVersionResponseOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeInstanceVersionResponse) *string { return v.Runtime }).(pulumi.StringPtrOutput)
}

type ComputeInstanceVersionResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeInstanceVersionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeInstanceVersionResponse)(nil)).Elem()
}

func (o ComputeInstanceVersionResponsePtrOutput) ToComputeInstanceVersionResponsePtrOutput() ComputeInstanceVersionResponsePtrOutput {
	return o
}

func (o ComputeInstanceVersionResponsePtrOutput) ToComputeInstanceVersionResponsePtrOutputWithContext(ctx context.Context) ComputeInstanceVersionResponsePtrOutput {
	return o
}

func (o ComputeInstanceVersionResponsePtrOutput) Elem() ComputeInstanceVersionResponseOutput {
	return o.ApplyT(func(v *ComputeInstanceVersionResponse) ComputeInstanceVersionResponse {
		if v != nil {
			return *v
		}
		var ret ComputeInstanceVersionResponse
		return ret
	}).(ComputeInstanceVersionResponseOutput)
}

// Runtime of compute instance.
func (o ComputeInstanceVersionResponsePtrOutput) Runtime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeInstanceVersionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Runtime
	}).(pulumi.StringPtrOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedules struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopSchedule `pulumi:"computeStartStop"`
}

// ComputeSchedulesInput is an input type that accepts ComputeSchedulesArgs and ComputeSchedulesOutput values.
// You can construct a concrete instance of `ComputeSchedulesInput` via:
//
//	ComputeSchedulesArgs{...}
type ComputeSchedulesInput interface {
	pulumi.Input

	ToComputeSchedulesOutput() ComputeSchedulesOutput
	ToComputeSchedulesOutputWithContext(context.Context) ComputeSchedulesOutput
}

// The list of schedules to be applied on the computes
type ComputeSchedulesArgs struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop ComputeStartStopScheduleArrayInput `pulumi:"computeStartStop"`
}

func (ComputeSchedulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedules)(nil)).Elem()
}

func (i ComputeSchedulesArgs) ToComputeSchedulesOutput() ComputeSchedulesOutput {
	return i.ToComputeSchedulesOutputWithContext(context.Background())
}

func (i ComputeSchedulesArgs) ToComputeSchedulesOutputWithContext(ctx context.Context) ComputeSchedulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesOutput)
}

func (i ComputeSchedulesArgs) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return i.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (i ComputeSchedulesArgs) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesOutput).ToComputeSchedulesPtrOutputWithContext(ctx)
}

// ComputeSchedulesPtrInput is an input type that accepts ComputeSchedulesArgs, ComputeSchedulesPtr and ComputeSchedulesPtrOutput values.
// You can construct a concrete instance of `ComputeSchedulesPtrInput` via:
//
//	        ComputeSchedulesArgs{...}
//
//	or:
//
//	        nil
type ComputeSchedulesPtrInput interface {
	pulumi.Input

	ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput
	ToComputeSchedulesPtrOutputWithContext(context.Context) ComputeSchedulesPtrOutput
}

type computeSchedulesPtrType ComputeSchedulesArgs

func ComputeSchedulesPtr(v *ComputeSchedulesArgs) ComputeSchedulesPtrInput {
	return (*computeSchedulesPtrType)(v)
}

func (*computeSchedulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedules)(nil)).Elem()
}

func (i *computeSchedulesPtrType) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return i.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (i *computeSchedulesPtrType) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSchedulesPtrOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedulesOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedules)(nil)).Elem()
}

func (o ComputeSchedulesOutput) ToComputeSchedulesOutput() ComputeSchedulesOutput {
	return o
}

func (o ComputeSchedulesOutput) ToComputeSchedulesOutputWithContext(ctx context.Context) ComputeSchedulesOutput {
	return o
}

func (o ComputeSchedulesOutput) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return o.ToComputeSchedulesPtrOutputWithContext(context.Background())
}

func (o ComputeSchedulesOutput) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ComputeSchedules) *ComputeSchedules {
		return &v
	}).(ComputeSchedulesPtrOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesOutput) ComputeStartStop() ComputeStartStopScheduleArrayOutput {
	return o.ApplyT(func(v ComputeSchedules) []ComputeStartStopSchedule { return v.ComputeStartStop }).(ComputeStartStopScheduleArrayOutput)
}

type ComputeSchedulesPtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedules)(nil)).Elem()
}

func (o ComputeSchedulesPtrOutput) ToComputeSchedulesPtrOutput() ComputeSchedulesPtrOutput {
	return o
}

func (o ComputeSchedulesPtrOutput) ToComputeSchedulesPtrOutputWithContext(ctx context.Context) ComputeSchedulesPtrOutput {
	return o
}

func (o ComputeSchedulesPtrOutput) Elem() ComputeSchedulesOutput {
	return o.ApplyT(func(v *ComputeSchedules) ComputeSchedules {
		if v != nil {
			return *v
		}
		var ret ComputeSchedules
		return ret
	}).(ComputeSchedulesOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesPtrOutput) ComputeStartStop() ComputeStartStopScheduleArrayOutput {
	return o.ApplyT(func(v *ComputeSchedules) []ComputeStartStopSchedule {
		if v == nil {
			return nil
		}
		return v.ComputeStartStop
	}).(ComputeStartStopScheduleArrayOutput)
}

// The list of schedules to be applied on the computes
type ComputeSchedulesResponse struct {
	// The list of compute start stop schedules to be applied.
	ComputeStartStop []ComputeStartStopScheduleResponse `pulumi:"computeStartStop"`
}

// The list of schedules to be applied on the computes
type ComputeSchedulesResponseOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSchedulesResponse)(nil)).Elem()
}

func (o ComputeSchedulesResponseOutput) ToComputeSchedulesResponseOutput() ComputeSchedulesResponseOutput {
	return o
}

func (o ComputeSchedulesResponseOutput) ToComputeSchedulesResponseOutputWithContext(ctx context.Context) ComputeSchedulesResponseOutput {
	return o
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesResponseOutput) ComputeStartStop() ComputeStartStopScheduleResponseArrayOutput {
	return o.ApplyT(func(v ComputeSchedulesResponse) []ComputeStartStopScheduleResponse { return v.ComputeStartStop }).(ComputeStartStopScheduleResponseArrayOutput)
}

type ComputeSchedulesResponsePtrOutput struct{ *pulumi.OutputState }

func (ComputeSchedulesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeSchedulesResponse)(nil)).Elem()
}

func (o ComputeSchedulesResponsePtrOutput) ToComputeSchedulesResponsePtrOutput() ComputeSchedulesResponsePtrOutput {
	return o
}

func (o ComputeSchedulesResponsePtrOutput) ToComputeSchedulesResponsePtrOutputWithContext(ctx context.Context) ComputeSchedulesResponsePtrOutput {
	return o
}

func (o ComputeSchedulesResponsePtrOutput) Elem() ComputeSchedulesResponseOutput {
	return o.ApplyT(func(v *ComputeSchedulesResponse) ComputeSchedulesResponse {
		if v != nil {
			return *v
		}
		var ret ComputeSchedulesResponse
		return ret
	}).(ComputeSchedulesResponseOutput)
}

// The list of compute start stop schedules to be applied.
func (o ComputeSchedulesResponsePtrOutput) ComputeStartStop() ComputeStartStopScheduleResponseArrayOutput {
	return o.ApplyT(func(v *ComputeSchedulesResponse) []ComputeStartStopScheduleResponse {
		if v == nil {
			return nil
		}
		return v.ComputeStartStop
	}).(ComputeStartStopScheduleResponseArrayOutput)
}

// Compute start stop schedule properties
type ComputeStartStopSchedule struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *Cron `pulumi:"cron"`
	// Required if triggerType is Recurrence.
	Recurrence *Recurrence `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBase `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopSchedule
func (val *ComputeStartStopSchedule) Defaults() *ComputeStartStopSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// ComputeStartStopScheduleInput is an input type that accepts ComputeStartStopScheduleArgs and ComputeStartStopScheduleOutput values.
// You can construct a concrete instance of `ComputeStartStopScheduleInput` via:
//
//	ComputeStartStopScheduleArgs{...}
type ComputeStartStopScheduleInput interface {
	pulumi.Input

	ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput
	ToComputeStartStopScheduleOutputWithContext(context.Context) ComputeStartStopScheduleOutput
}

// Compute start stop schedule properties
type ComputeStartStopScheduleArgs struct {
	// [Required] The compute power action.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron CronPtrInput `pulumi:"cron"`
	// Required if triggerType is Recurrence.
	Recurrence RecurrencePtrInput `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule ScheduleBasePtrInput `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status pulumi.StringPtrInput `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType pulumi.StringPtrInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopScheduleArgs
func (val *ComputeStartStopScheduleArgs) Defaults() *ComputeStartStopScheduleArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ComputeStartStopScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopSchedule)(nil)).Elem()
}

func (i ComputeStartStopScheduleArgs) ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput {
	return i.ToComputeStartStopScheduleOutputWithContext(context.Background())
}

func (i ComputeStartStopScheduleArgs) ToComputeStartStopScheduleOutputWithContext(ctx context.Context) ComputeStartStopScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeStartStopScheduleOutput)
}

// ComputeStartStopScheduleArrayInput is an input type that accepts ComputeStartStopScheduleArray and ComputeStartStopScheduleArrayOutput values.
// You can construct a concrete instance of `ComputeStartStopScheduleArrayInput` via:
//
//	ComputeStartStopScheduleArray{ ComputeStartStopScheduleArgs{...} }
type ComputeStartStopScheduleArrayInput interface {
	pulumi.Input

	ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput
	ToComputeStartStopScheduleArrayOutputWithContext(context.Context) ComputeStartStopScheduleArrayOutput
}

type ComputeStartStopScheduleArray []ComputeStartStopScheduleInput

func (ComputeStartStopScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopSchedule)(nil)).Elem()
}

func (i ComputeStartStopScheduleArray) ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput {
	return i.ToComputeStartStopScheduleArrayOutputWithContext(context.Background())
}

func (i ComputeStartStopScheduleArray) ToComputeStartStopScheduleArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeStartStopScheduleArrayOutput)
}

// Compute start stop schedule properties
type ComputeStartStopScheduleOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopSchedule)(nil)).Elem()
}

func (o ComputeStartStopScheduleOutput) ToComputeStartStopScheduleOutput() ComputeStartStopScheduleOutput {
	return o
}

func (o ComputeStartStopScheduleOutput) ToComputeStartStopScheduleOutputWithContext(ctx context.Context) ComputeStartStopScheduleOutput {
	return o
}

// [Required] The compute power action.
func (o ComputeStartStopScheduleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Required if triggerType is Cron.
func (o ComputeStartStopScheduleOutput) Cron() CronPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *Cron { return v.Cron }).(CronPtrOutput)
}

// Required if triggerType is Recurrence.
func (o ComputeStartStopScheduleOutput) Recurrence() RecurrencePtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *Recurrence { return v.Recurrence }).(RecurrencePtrOutput)
}

// [Deprecated] Not used any more.
func (o ComputeStartStopScheduleOutput) Schedule() ScheduleBasePtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *ScheduleBase { return v.Schedule }).(ScheduleBasePtrOutput)
}

// Is the schedule enabled or disabled?
func (o ComputeStartStopScheduleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Required] The schedule trigger type.
func (o ComputeStartStopScheduleOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopSchedule) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type ComputeStartStopScheduleArrayOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopSchedule)(nil)).Elem()
}

func (o ComputeStartStopScheduleArrayOutput) ToComputeStartStopScheduleArrayOutput() ComputeStartStopScheduleArrayOutput {
	return o
}

func (o ComputeStartStopScheduleArrayOutput) ToComputeStartStopScheduleArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleArrayOutput {
	return o
}

func (o ComputeStartStopScheduleArrayOutput) Index(i pulumi.IntInput) ComputeStartStopScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeStartStopSchedule {
		return vs[0].([]ComputeStartStopSchedule)[vs[1].(int)]
	}).(ComputeStartStopScheduleOutput)
}

// Compute start stop schedule properties
type ComputeStartStopScheduleResponse struct {
	// [Required] The compute power action.
	Action *string `pulumi:"action"`
	// Required if triggerType is Cron.
	Cron *CronResponse `pulumi:"cron"`
	// A system assigned id for the schedule.
	Id string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus string `pulumi:"provisioningStatus"`
	// Required if triggerType is Recurrence.
	Recurrence *RecurrenceResponse `pulumi:"recurrence"`
	// [Deprecated] Not used any more.
	Schedule *ScheduleBaseResponse `pulumi:"schedule"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
	// [Required] The schedule trigger type.
	TriggerType *string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for ComputeStartStopScheduleResponse
func (val *ComputeStartStopScheduleResponse) Defaults() *ComputeStartStopScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Cron = tmp.Cron.Defaults()

	tmp.Recurrence = tmp.Recurrence.Defaults()

	return &tmp
}

// Compute start stop schedule properties
type ComputeStartStopScheduleResponseOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeStartStopScheduleResponse)(nil)).Elem()
}

func (o ComputeStartStopScheduleResponseOutput) ToComputeStartStopScheduleResponseOutput() ComputeStartStopScheduleResponseOutput {
	return o
}

func (o ComputeStartStopScheduleResponseOutput) ToComputeStartStopScheduleResponseOutputWithContext(ctx context.Context) ComputeStartStopScheduleResponseOutput {
	return o
}

// [Required] The compute power action.
func (o ComputeStartStopScheduleResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Required if triggerType is Cron.
func (o ComputeStartStopScheduleResponseOutput) Cron() CronResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *CronResponse { return v.Cron }).(CronResponsePtrOutput)
}

// A system assigned id for the schedule.
func (o ComputeStartStopScheduleResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The current deployment state of schedule.
func (o ComputeStartStopScheduleResponseOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) string { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Required if triggerType is Recurrence.
func (o ComputeStartStopScheduleResponseOutput) Recurrence() RecurrenceResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *RecurrenceResponse { return v.Recurrence }).(RecurrenceResponsePtrOutput)
}

// [Deprecated] Not used any more.
func (o ComputeStartStopScheduleResponseOutput) Schedule() ScheduleBaseResponsePtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *ScheduleBaseResponse { return v.Schedule }).(ScheduleBaseResponsePtrOutput)
}

// Is the schedule enabled or disabled?
func (o ComputeStartStopScheduleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// [Required] The schedule trigger type.
func (o ComputeStartStopScheduleResponseOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComputeStartStopScheduleResponse) *string { return v.TriggerType }).(pulumi.StringPtrOutput)
}

type ComputeStartStopScheduleResponseArrayOutput struct{ *pulumi.OutputState }

func (ComputeStartStopScheduleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComputeStartStopScheduleResponse)(nil)).Elem()
}

func (o ComputeStartStopScheduleResponseArrayOutput) ToComputeStartStopScheduleResponseArrayOutput() ComputeStartStopScheduleResponseArrayOutput {
	return o
}

func (o ComputeStartStopScheduleResponseArrayOutput) ToComputeStartStopScheduleResponseArrayOutputWithContext(ctx context.Context) ComputeStartStopScheduleResponseArrayOutput {
	return o
}

func (o ComputeStartStopScheduleResponseArrayOutput) Index(i pulumi.IntInput) ComputeStartStopScheduleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComputeStartStopScheduleResponse {
		return vs[0].([]ComputeStartStopScheduleResponse)[vs[1].(int)]
	}).(ComputeStartStopScheduleResponseOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirements struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettings `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettings `pulumi:"containerResourceRequests"`
}

// ContainerResourceRequirementsInput is an input type that accepts ContainerResourceRequirementsArgs and ContainerResourceRequirementsOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsInput` via:
//
//	ContainerResourceRequirementsArgs{...}
type ContainerResourceRequirementsInput interface {
	pulumi.Input

	ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput
	ToContainerResourceRequirementsOutputWithContext(context.Context) ContainerResourceRequirementsOutput
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsArgs struct {
	// Container resource limit info:
	ContainerResourceLimits ContainerResourceSettingsPtrInput `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests ContainerResourceSettingsPtrInput `pulumi:"containerResourceRequests"`
}

func (ContainerResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return i.ToContainerResourceRequirementsOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput)
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput).ToContainerResourceRequirementsPtrOutputWithContext(ctx)
}

// ContainerResourceRequirementsPtrInput is an input type that accepts ContainerResourceRequirementsArgs, ContainerResourceRequirementsPtr and ContainerResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsPtrInput` via:
//
//	        ContainerResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceRequirementsPtrInput interface {
	pulumi.Input

	ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput
	ToContainerResourceRequirementsPtrOutputWithContext(context.Context) ContainerResourceRequirementsPtrOutput
}

type containerResourceRequirementsPtrType ContainerResourceRequirementsArgs

func ContainerResourceRequirementsPtr(v *ContainerResourceRequirementsArgs) ContainerResourceRequirementsPtrInput {
	return (*containerResourceRequirementsPtrType)(v)
}

func (*containerResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceRequirements) *ContainerResourceRequirements {
		return &v
	}).(ContainerResourceRequirementsPtrOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceLimits }).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceRequests }).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) Elem() ContainerResourceRequirementsOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) ContainerResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirements
		return ret
	}).(ContainerResourceRequirementsOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponse struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettingsResponse `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettingsResponse `pulumi:"containerResourceRequests"`
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutput() ContainerResourceRequirementsResponseOutput {
	return o
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponseOutput {
	return o
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutput() ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) Elem() ContainerResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) ContainerResourceRequirementsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirementsResponse
		return ret
	}).(ContainerResourceRequirementsResponseOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceSettings struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

// ContainerResourceSettingsInput is an input type that accepts ContainerResourceSettingsArgs and ContainerResourceSettingsOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsInput` via:
//
//	ContainerResourceSettingsArgs{...}
type ContainerResourceSettingsInput interface {
	pulumi.Input

	ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput
	ToContainerResourceSettingsOutputWithContext(context.Context) ContainerResourceSettingsOutput
}

type ContainerResourceSettingsArgs struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu pulumi.StringPtrInput `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (ContainerResourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return i.ToContainerResourceSettingsOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput)
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput).ToContainerResourceSettingsPtrOutputWithContext(ctx)
}

// ContainerResourceSettingsPtrInput is an input type that accepts ContainerResourceSettingsArgs, ContainerResourceSettingsPtr and ContainerResourceSettingsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsPtrInput` via:
//
//	        ContainerResourceSettingsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceSettingsPtrInput interface {
	pulumi.Input

	ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput
	ToContainerResourceSettingsPtrOutputWithContext(context.Context) ContainerResourceSettingsPtrOutput
}

type containerResourceSettingsPtrType ContainerResourceSettingsArgs

func ContainerResourceSettingsPtr(v *ContainerResourceSettingsArgs) ContainerResourceSettingsPtrInput {
	return (*containerResourceSettingsPtrType)(v)
}

func (*containerResourceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceSettingsOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceSettings) *ContainerResourceSettings {
		return &v
	}).(ContainerResourceSettingsPtrOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) Elem() ContainerResourceSettingsOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) ContainerResourceSettings {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettings
		return ret
	}).(ContainerResourceSettingsOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponse struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

type ContainerResourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutput() ContainerResourceSettingsResponseOutput {
	return o
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutputWithContext(ctx context.Context) ContainerResourceSettingsResponseOutput {
	return o
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutput() ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) Elem() ContainerResourceSettingsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) ContainerResourceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettingsResponse
		return ret
	}).(ContainerResourceSettingsResponseOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type CosmosDbSettings struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

// CosmosDbSettingsInput is an input type that accepts CosmosDbSettingsArgs and CosmosDbSettingsOutput values.
// You can construct a concrete instance of `CosmosDbSettingsInput` via:
//
//	CosmosDbSettingsArgs{...}
type CosmosDbSettingsInput interface {
	pulumi.Input

	ToCosmosDbSettingsOutput() CosmosDbSettingsOutput
	ToCosmosDbSettingsOutputWithContext(context.Context) CosmosDbSettingsOutput
}

type CosmosDbSettingsArgs struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput pulumi.IntPtrInput `pulumi:"collectionsThroughput"`
}

func (CosmosDbSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return i.ToCosmosDbSettingsOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput)
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i CosmosDbSettingsArgs) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsOutput).ToCosmosDbSettingsPtrOutputWithContext(ctx)
}

// CosmosDbSettingsPtrInput is an input type that accepts CosmosDbSettingsArgs, CosmosDbSettingsPtr and CosmosDbSettingsPtrOutput values.
// You can construct a concrete instance of `CosmosDbSettingsPtrInput` via:
//
//	        CosmosDbSettingsArgs{...}
//
//	or:
//
//	        nil
type CosmosDbSettingsPtrInput interface {
	pulumi.Input

	ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput
	ToCosmosDbSettingsPtrOutputWithContext(context.Context) CosmosDbSettingsPtrOutput
}

type cosmosDbSettingsPtrType CosmosDbSettingsArgs

func CosmosDbSettingsPtr(v *CosmosDbSettingsArgs) CosmosDbSettingsPtrInput {
	return (*cosmosDbSettingsPtrType)(v)
}

func (*cosmosDbSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return i.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (i *cosmosDbSettingsPtrType) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CosmosDbSettingsPtrOutput)
}

type CosmosDbSettingsOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutput() CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsOutputWithContext(ctx context.Context) CosmosDbSettingsOutput {
	return o
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o.ToCosmosDbSettingsPtrOutputWithContext(context.Background())
}

func (o CosmosDbSettingsOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CosmosDbSettings) *CosmosDbSettings {
		return &v
	}).(CosmosDbSettingsPtrOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettings) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsPtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettings)(nil)).Elem()
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutput() CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) ToCosmosDbSettingsPtrOutputWithContext(ctx context.Context) CosmosDbSettingsPtrOutput {
	return o
}

func (o CosmosDbSettingsPtrOutput) Elem() CosmosDbSettingsOutput {
	return o.ApplyT(func(v *CosmosDbSettings) CosmosDbSettings {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettings
		return ret
	}).(CosmosDbSettingsOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsPtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettings) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponse struct {
	// The throughput of the collections in cosmosdb database
	CollectionsThroughput *int `pulumi:"collectionsThroughput"`
}

type CosmosDbSettingsResponseOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutput() CosmosDbSettingsResponseOutput {
	return o
}

func (o CosmosDbSettingsResponseOutput) ToCosmosDbSettingsResponseOutputWithContext(ctx context.Context) CosmosDbSettingsResponseOutput {
	return o
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsResponseOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CosmosDbSettingsResponse) *int { return v.CollectionsThroughput }).(pulumi.IntPtrOutput)
}

type CosmosDbSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (CosmosDbSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CosmosDbSettingsResponse)(nil)).Elem()
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutput() CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) ToCosmosDbSettingsResponsePtrOutputWithContext(ctx context.Context) CosmosDbSettingsResponsePtrOutput {
	return o
}

func (o CosmosDbSettingsResponsePtrOutput) Elem() CosmosDbSettingsResponseOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) CosmosDbSettingsResponse {
		if v != nil {
			return *v
		}
		var ret CosmosDbSettingsResponse
		return ret
	}).(CosmosDbSettingsResponseOutput)
}

// The throughput of the collections in cosmosdb database
func (o CosmosDbSettingsResponsePtrOutput) CollectionsThroughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CosmosDbSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CollectionsThroughput
	}).(pulumi.IntPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type Cron struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Cron
func (val *Cron) Defaults() *Cron {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// CronInput is an input type that accepts CronArgs and CronOutput values.
// You can construct a concrete instance of `CronInput` via:
//
//	CronArgs{...}
type CronInput interface {
	pulumi.Input

	ToCronOutput() CronOutput
	ToCronOutputWithContext(context.Context) CronOutput
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronArgs struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronArgs
func (val *CronArgs) Defaults() *CronArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (CronArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cron)(nil)).Elem()
}

func (i CronArgs) ToCronOutput() CronOutput {
	return i.ToCronOutputWithContext(context.Background())
}

func (i CronArgs) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronOutput)
}

func (i CronArgs) ToCronPtrOutput() CronPtrOutput {
	return i.ToCronPtrOutputWithContext(context.Background())
}

func (i CronArgs) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronOutput).ToCronPtrOutputWithContext(ctx)
}

// CronPtrInput is an input type that accepts CronArgs, CronPtr and CronPtrOutput values.
// You can construct a concrete instance of `CronPtrInput` via:
//
//	        CronArgs{...}
//
//	or:
//
//	        nil
type CronPtrInput interface {
	pulumi.Input

	ToCronPtrOutput() CronPtrOutput
	ToCronPtrOutputWithContext(context.Context) CronPtrOutput
}

type cronPtrType CronArgs

func CronPtr(v *CronArgs) CronPtrInput {
	return (*cronPtrType)(v)
}

func (*cronPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (i *cronPtrType) ToCronPtrOutput() CronPtrOutput {
	return i.ToCronPtrOutputWithContext(context.Background())
}

func (i *cronPtrType) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronOutput struct{ *pulumi.OutputState }

func (CronOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cron)(nil)).Elem()
}

func (o CronOutput) ToCronOutput() CronOutput {
	return o
}

func (o CronOutput) ToCronOutputWithContext(ctx context.Context) CronOutput {
	return o
}

func (o CronOutput) ToCronPtrOutput() CronPtrOutput {
	return o.ToCronPtrOutputWithContext(context.Background())
}

func (o CronOutput) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cron) *Cron {
		return &v
	}).(CronPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cron) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronPtrOutput struct{ *pulumi.OutputState }

func (CronPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cron)(nil)).Elem()
}

func (o CronPtrOutput) ToCronPtrOutput() CronPtrOutput {
	return o
}

func (o CronPtrOutput) ToCronPtrOutputWithContext(ctx context.Context) CronPtrOutput {
	return o
}

func (o CronPtrOutput) Elem() CronOutput {
	return o.ApplyT(func(v *Cron) Cron {
		if v != nil {
			return *v
		}
		var ret Cron
		return ret
	}).(CronOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cron) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronResponse struct {
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression *string `pulumi:"expression"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronResponse
func (val *CronResponse) Defaults() *CronResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger cron for ComputeStartStop schedule type.
type CronResponseOutput struct{ *pulumi.OutputState }

func (CronResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronResponse)(nil)).Elem()
}

func (o CronResponseOutput) ToCronResponseOutput() CronResponseOutput {
	return o
}

func (o CronResponseOutput) ToCronResponseOutputWithContext(ctx context.Context) CronResponseOutput {
	return o
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronResponseOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronResponsePtrOutput struct{ *pulumi.OutputState }

func (CronResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronResponse)(nil)).Elem()
}

func (o CronResponsePtrOutput) ToCronResponsePtrOutput() CronResponsePtrOutput {
	return o
}

func (o CronResponsePtrOutput) ToCronResponsePtrOutputWithContext(ctx context.Context) CronResponsePtrOutput {
	return o
}

func (o CronResponsePtrOutput) Elem() CronResponseOutput {
	return o.ApplyT(func(v *CronResponse) CronResponse {
		if v != nil {
			return *v
		}
		var ret CronResponse
		return ret
	}).(CronResponseOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o CronResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type CronTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTrigger
func (val *CronTrigger) Defaults() *CronTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// CronTriggerInput is an input type that accepts CronTriggerArgs and CronTriggerOutput values.
// You can construct a concrete instance of `CronTriggerInput` via:
//
//	CronTriggerArgs{...}
type CronTriggerInput interface {
	pulumi.Input

	ToCronTriggerOutput() CronTriggerOutput
	ToCronTriggerOutputWithContext(context.Context) CronTriggerOutput
}

type CronTriggerArgs struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTriggerArgs
func (val *CronTriggerArgs) Defaults() *CronTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (CronTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTrigger)(nil)).Elem()
}

func (i CronTriggerArgs) ToCronTriggerOutput() CronTriggerOutput {
	return i.ToCronTriggerOutputWithContext(context.Background())
}

func (i CronTriggerArgs) ToCronTriggerOutputWithContext(ctx context.Context) CronTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronTriggerOutput)
}

type CronTriggerOutput struct{ *pulumi.OutputState }

func (CronTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTrigger)(nil)).Elem()
}

func (o CronTriggerOutput) ToCronTriggerOutput() CronTriggerOutput {
	return o
}

func (o CronTriggerOutput) ToCronTriggerOutputWithContext(ctx context.Context) CronTriggerOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o CronTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronTriggerOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronTrigger) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o CronTriggerOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronTriggerOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTrigger) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Cron'.
func (o CronTriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v CronTrigger) string { return v.TriggerType }).(pulumi.StringOutput)
}

type CronTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Cron'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for CronTriggerResponse
func (val *CronTriggerResponse) Defaults() *CronTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type CronTriggerResponseOutput struct{ *pulumi.OutputState }

func (CronTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronTriggerResponse)(nil)).Elem()
}

func (o CronTriggerResponseOutput) ToCronTriggerResponseOutput() CronTriggerResponseOutput {
	return o
}

func (o CronTriggerResponseOutput) ToCronTriggerResponseOutputWithContext(ctx context.Context) CronTriggerResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o CronTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronTriggerResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronTriggerResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o CronTriggerResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o CronTriggerResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronTriggerResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Cron'.
func (o CronTriggerResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v CronTriggerResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// CustomForecastHorizonInput is an input type that accepts CustomForecastHorizonArgs and CustomForecastHorizonOutput values.
// You can construct a concrete instance of `CustomForecastHorizonInput` via:
//
//	CustomForecastHorizonArgs{...}
type CustomForecastHorizonInput interface {
	pulumi.Input

	ToCustomForecastHorizonOutput() CustomForecastHorizonOutput
	ToCustomForecastHorizonOutputWithContext(context.Context) CustomForecastHorizonOutput
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return i.ToCustomForecastHorizonOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput)
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput).ToCustomForecastHorizonPtrOutputWithContext(ctx)
}

// CustomForecastHorizonPtrInput is an input type that accepts CustomForecastHorizonArgs, CustomForecastHorizonPtr and CustomForecastHorizonPtrOutput values.
// You can construct a concrete instance of `CustomForecastHorizonPtrInput` via:
//
//	        CustomForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type CustomForecastHorizonPtrInput interface {
	pulumi.Input

	ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput
	ToCustomForecastHorizonPtrOutputWithContext(context.Context) CustomForecastHorizonPtrOutput
}

type customForecastHorizonPtrType CustomForecastHorizonArgs

func CustomForecastHorizonPtr(v *CustomForecastHorizonArgs) CustomForecastHorizonPtrInput {
	return (*customForecastHorizonPtrType)(v)
}

func (*customForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomForecastHorizon) *CustomForecastHorizon {
		return &v
	}).(CustomForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizon) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) Elem() CustomForecastHorizonOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) CustomForecastHorizon {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizon
		return ret
	}).(CustomForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutput() CustomForecastHorizonResponseOutput {
	return o
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutputWithContext(ctx context.Context) CustomForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutput() CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutputWithContext(ctx context.Context) CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) Elem() CustomForecastHorizonResponseOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) CustomForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizonResponse
		return ret
	}).(CustomForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Custom Keys credential object
type CustomKeysResponse struct {
	Keys map[string]string `pulumi:"keys"`
}

// Custom Keys credential object
type CustomKeysResponseOutput struct{ *pulumi.OutputState }

func (CustomKeysResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysResponse)(nil)).Elem()
}

func (o CustomKeysResponseOutput) ToCustomKeysResponseOutput() CustomKeysResponseOutput {
	return o
}

func (o CustomKeysResponseOutput) ToCustomKeysResponseOutputWithContext(ctx context.Context) CustomKeysResponseOutput {
	return o
}

func (o CustomKeysResponseOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v CustomKeysResponse) map[string]string { return v.Keys }).(pulumi.StringMapOutput)
}

type CustomKeysResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomKeysResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomKeysResponse)(nil)).Elem()
}

func (o CustomKeysResponsePtrOutput) ToCustomKeysResponsePtrOutput() CustomKeysResponsePtrOutput {
	return o
}

func (o CustomKeysResponsePtrOutput) ToCustomKeysResponsePtrOutputWithContext(ctx context.Context) CustomKeysResponsePtrOutput {
	return o
}

func (o CustomKeysResponsePtrOutput) Elem() CustomKeysResponseOutput {
	return o.ApplyT(func(v *CustomKeysResponse) CustomKeysResponse {
		if v != nil {
			return *v
		}
		var ret CustomKeysResponse
		return ret
	}).(CustomKeysResponseOutput)
}

func (o CustomKeysResponsePtrOutput) Keys() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CustomKeysResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Keys
	}).(pulumi.StringMapOutput)
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'CustomKeys'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	// Custom Keys credential object
	Credentials *CustomKeysResponse `pulumi:"credentials"`
	ExpiryTime  *string             `pulumi:"expiryTime"`
	Metadata    interface{}         `pulumi:"metadata"`
	Target      *string             `pulumi:"target"`
}

// Category:= CustomKeys
// AuthType:= CustomKeys (as type discriminator)
// Credentials:= {CustomKeys} as Microsoft.MachineLearning.AccountRP.Contracts.WorkspaceConnection.CustomKeys
// Target:= {any value}
// Use Metadata property bag for ApiVersion and other metadata fields
type CustomKeysWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CustomKeysWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomKeysWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ToCustomKeysWorkspaceConnectionPropertiesResponseOutput() CustomKeysWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ToCustomKeysWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) CustomKeysWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'CustomKeys'.
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Custom Keys credential object
func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Credentials() CustomKeysResponsePtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *CustomKeysResponse { return v.Credentials }).(CustomKeysResponsePtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o CustomKeysWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomKeysWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type CustomModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInput
func (val *CustomModelJobInput) Defaults() *CustomModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobInputInput is an input type that accepts CustomModelJobInputArgs and CustomModelJobInputOutput values.
// You can construct a concrete instance of `CustomModelJobInputInput` via:
//
//	CustomModelJobInputArgs{...}
type CustomModelJobInputInput interface {
	pulumi.Input

	ToCustomModelJobInputOutput() CustomModelJobInputOutput
	ToCustomModelJobInputOutputWithContext(context.Context) CustomModelJobInputOutput
}

type CustomModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputArgs
func (val *CustomModelJobInputArgs) Defaults() *CustomModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (CustomModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return i.ToCustomModelJobInputOutputWithContext(context.Background())
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobInputOutput)
}

type CustomModelJobInputOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return o
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return o
}

// Description for the input.
func (o CustomModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'custom_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputResponse
func (val *CustomModelJobInputResponse) Defaults() *CustomModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInputResponse)(nil)).Elem()
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutput() CustomModelJobInputResponseOutput {
	return o
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutputWithContext(ctx context.Context) CustomModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o CustomModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'custom_model'.
func (o CustomModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutput
func (val *CustomModelJobOutput) Defaults() *CustomModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobOutputInput is an input type that accepts CustomModelJobOutputArgs and CustomModelJobOutputOutput values.
// You can construct a concrete instance of `CustomModelJobOutputInput` via:
//
//	CustomModelJobOutputArgs{...}
type CustomModelJobOutputInput interface {
	pulumi.Input

	ToCustomModelJobOutputOutput() CustomModelJobOutputOutput
	ToCustomModelJobOutputOutputWithContext(context.Context) CustomModelJobOutputOutput
}

type CustomModelJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputArgs
func (val *CustomModelJobOutputArgs) Defaults() *CustomModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (CustomModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return i.ToCustomModelJobOutputOutputWithContext(context.Background())
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobOutputOutput)
}

type CustomModelJobOutputOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return o
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return o
}

// Description for the output.
func (o CustomModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'custom_model'.
func (o CustomModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CustomModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'custom_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputResponse
func (val *CustomModelJobOutputResponse) Defaults() *CustomModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutputResponse)(nil)).Elem()
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutput() CustomModelJobOutputResponseOutput {
	return o
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutputWithContext(ctx context.Context) CustomModelJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o CustomModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'custom_model'.
func (o CustomModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// CustomNCrossValidationsInput is an input type that accepts CustomNCrossValidationsArgs and CustomNCrossValidationsOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsInput` via:
//
//	CustomNCrossValidationsArgs{...}
type CustomNCrossValidationsInput interface {
	pulumi.Input

	ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput
	ToCustomNCrossValidationsOutputWithContext(context.Context) CustomNCrossValidationsOutput
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return i.ToCustomNCrossValidationsOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput)
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput).ToCustomNCrossValidationsPtrOutputWithContext(ctx)
}

// CustomNCrossValidationsPtrInput is an input type that accepts CustomNCrossValidationsArgs, CustomNCrossValidationsPtr and CustomNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsPtrInput` via:
//
//	        CustomNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type CustomNCrossValidationsPtrInput interface {
	pulumi.Input

	ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput
	ToCustomNCrossValidationsPtrOutputWithContext(context.Context) CustomNCrossValidationsPtrOutput
}

type customNCrossValidationsPtrType CustomNCrossValidationsArgs

func CustomNCrossValidationsPtr(v *CustomNCrossValidationsArgs) CustomNCrossValidationsPtrInput {
	return (*customNCrossValidationsPtrType)(v)
}

func (*customNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomNCrossValidations) *CustomNCrossValidations {
		return &v
	}).(CustomNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidations) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) Elem() CustomNCrossValidationsOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) CustomNCrossValidations {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidations
		return ret
	}).(CustomNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutput() CustomNCrossValidationsResponseOutput {
	return o
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutputWithContext(ctx context.Context) CustomNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutput() CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) Elem() CustomNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) CustomNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidationsResponse
		return ret
	}).(CustomNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

// CustomSeasonalityInput is an input type that accepts CustomSeasonalityArgs and CustomSeasonalityOutput values.
// You can construct a concrete instance of `CustomSeasonalityInput` via:
//
//	CustomSeasonalityArgs{...}
type CustomSeasonalityInput interface {
	pulumi.Input

	ToCustomSeasonalityOutput() CustomSeasonalityOutput
	ToCustomSeasonalityOutputWithContext(context.Context) CustomSeasonalityOutput
}

type CustomSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Seasonality value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return i.ToCustomSeasonalityOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput)
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput).ToCustomSeasonalityPtrOutputWithContext(ctx)
}

// CustomSeasonalityPtrInput is an input type that accepts CustomSeasonalityArgs, CustomSeasonalityPtr and CustomSeasonalityPtrOutput values.
// You can construct a concrete instance of `CustomSeasonalityPtrInput` via:
//
//	        CustomSeasonalityArgs{...}
//
//	or:
//
//	        nil
type CustomSeasonalityPtrInput interface {
	pulumi.Input

	ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput
	ToCustomSeasonalityPtrOutputWithContext(context.Context) CustomSeasonalityPtrOutput
}

type customSeasonalityPtrType CustomSeasonalityArgs

func CustomSeasonalityPtr(v *CustomSeasonalityArgs) CustomSeasonalityPtrInput {
	return (*customSeasonalityPtrType)(v)
}

func (*customSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityPtrOutput)
}

type CustomSeasonalityOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomSeasonality) *CustomSeasonality {
		return &v
	}).(CustomSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonality) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) Elem() CustomSeasonalityOutput {
	return o.ApplyT(func(v *CustomSeasonality) CustomSeasonality {
		if v != nil {
			return *v
		}
		var ret CustomSeasonality
		return ret
	}).(CustomSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

type CustomSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutput() CustomSeasonalityResponseOutput {
	return o
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutputWithContext(ctx context.Context) CustomSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutput() CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutputWithContext(ctx context.Context) CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) Elem() CustomSeasonalityResponseOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) CustomSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret CustomSeasonalityResponse
		return ret
	}).(CustomSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Specifies the custom service configuration
type CustomService struct {
	// Describes the docker settings for the image
	Docker *Docker `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []Endpoint `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariable `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *Image `pulumi:"image"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinition `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomService
func (val *CustomService) Defaults() *CustomService {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

// CustomServiceInput is an input type that accepts CustomServiceArgs and CustomServiceOutput values.
// You can construct a concrete instance of `CustomServiceInput` via:
//
//	CustomServiceArgs{...}
type CustomServiceInput interface {
	pulumi.Input

	ToCustomServiceOutput() CustomServiceOutput
	ToCustomServiceOutputWithContext(context.Context) CustomServiceOutput
}

// Specifies the custom service configuration
type CustomServiceArgs struct {
	// Describes the docker settings for the image
	Docker DockerPtrInput `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints EndpointArrayInput `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables EnvironmentVariableMapInput `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image ImagePtrInput `pulumi:"image"`
	// Name of the Custom Service
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes VolumeDefinitionArrayInput `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomServiceArgs
func (val *CustomServiceArgs) Defaults() *CustomServiceArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (CustomServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomService)(nil)).Elem()
}

func (i CustomServiceArgs) ToCustomServiceOutput() CustomServiceOutput {
	return i.ToCustomServiceOutputWithContext(context.Background())
}

func (i CustomServiceArgs) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceOutput)
}

// CustomServiceArrayInput is an input type that accepts CustomServiceArray and CustomServiceArrayOutput values.
// You can construct a concrete instance of `CustomServiceArrayInput` via:
//
//	CustomServiceArray{ CustomServiceArgs{...} }
type CustomServiceArrayInput interface {
	pulumi.Input

	ToCustomServiceArrayOutput() CustomServiceArrayOutput
	ToCustomServiceArrayOutputWithContext(context.Context) CustomServiceArrayOutput
}

type CustomServiceArray []CustomServiceInput

func (CustomServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomService)(nil)).Elem()
}

func (i CustomServiceArray) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return i.ToCustomServiceArrayOutputWithContext(context.Background())
}

func (i CustomServiceArray) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomServiceArrayOutput)
}

// Specifies the custom service configuration
type CustomServiceOutput struct{ *pulumi.OutputState }

func (CustomServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomService)(nil)).Elem()
}

func (o CustomServiceOutput) ToCustomServiceOutput() CustomServiceOutput {
	return o
}

func (o CustomServiceOutput) ToCustomServiceOutputWithContext(ctx context.Context) CustomServiceOutput {
	return o
}

// Describes the docker settings for the image
func (o CustomServiceOutput) Docker() DockerPtrOutput {
	return o.ApplyT(func(v CustomService) *Docker { return v.Docker }).(DockerPtrOutput)
}

// Configuring the endpoints for the container
func (o CustomServiceOutput) Endpoints() EndpointArrayOutput {
	return o.ApplyT(func(v CustomService) []Endpoint { return v.Endpoints }).(EndpointArrayOutput)
}

// Environment Variable for the container
func (o CustomServiceOutput) EnvironmentVariables() EnvironmentVariableMapOutput {
	return o.ApplyT(func(v CustomService) map[string]EnvironmentVariable { return v.EnvironmentVariables }).(EnvironmentVariableMapOutput)
}

// Describes the Image Specifications
func (o CustomServiceOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v CustomService) *Image { return v.Image }).(ImagePtrOutput)
}

// Name of the Custom Service
func (o CustomServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configuring the volumes for the container
func (o CustomServiceOutput) Volumes() VolumeDefinitionArrayOutput {
	return o.ApplyT(func(v CustomService) []VolumeDefinition { return v.Volumes }).(VolumeDefinitionArrayOutput)
}

type CustomServiceArrayOutput struct{ *pulumi.OutputState }

func (CustomServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomService)(nil)).Elem()
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutput() CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) ToCustomServiceArrayOutputWithContext(ctx context.Context) CustomServiceArrayOutput {
	return o
}

func (o CustomServiceArrayOutput) Index(i pulumi.IntInput) CustomServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomService {
		return vs[0].([]CustomService)[vs[1].(int)]
	}).(CustomServiceOutput)
}

// Specifies the custom service configuration
type CustomServiceResponse struct {
	// Describes the docker settings for the image
	Docker *DockerResponse `pulumi:"docker"`
	// Configuring the endpoints for the container
	Endpoints []EndpointResponse `pulumi:"endpoints"`
	// Environment Variable for the container
	EnvironmentVariables map[string]EnvironmentVariableResponse `pulumi:"environmentVariables"`
	// Describes the Image Specifications
	Image *ImageResponse `pulumi:"image"`
	// Name of the Custom Service
	Name *string `pulumi:"name"`
	// Configuring the volumes for the container
	Volumes []VolumeDefinitionResponse `pulumi:"volumes"`
}

// Defaults sets the appropriate defaults for CustomServiceResponse
func (val *CustomServiceResponse) Defaults() *CustomServiceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Image = tmp.Image.Defaults()

	return &tmp
}

// Specifies the custom service configuration
type CustomServiceResponseOutput struct{ *pulumi.OutputState }

func (CustomServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomServiceResponse)(nil)).Elem()
}

func (o CustomServiceResponseOutput) ToCustomServiceResponseOutput() CustomServiceResponseOutput {
	return o
}

func (o CustomServiceResponseOutput) ToCustomServiceResponseOutputWithContext(ctx context.Context) CustomServiceResponseOutput {
	return o
}

// Describes the docker settings for the image
func (o CustomServiceResponseOutput) Docker() DockerResponsePtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *DockerResponse { return v.Docker }).(DockerResponsePtrOutput)
}

// Configuring the endpoints for the container
func (o CustomServiceResponseOutput) Endpoints() EndpointResponseArrayOutput {
	return o.ApplyT(func(v CustomServiceResponse) []EndpointResponse { return v.Endpoints }).(EndpointResponseArrayOutput)
}

// Environment Variable for the container
func (o CustomServiceResponseOutput) EnvironmentVariables() EnvironmentVariableResponseMapOutput {
	return o.ApplyT(func(v CustomServiceResponse) map[string]EnvironmentVariableResponse { return v.EnvironmentVariables }).(EnvironmentVariableResponseMapOutput)
}

// Describes the Image Specifications
func (o CustomServiceResponseOutput) Image() ImageResponsePtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *ImageResponse { return v.Image }).(ImageResponsePtrOutput)
}

// Name of the Custom Service
func (o CustomServiceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomServiceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Configuring the volumes for the container
func (o CustomServiceResponseOutput) Volumes() VolumeDefinitionResponseArrayOutput {
	return o.ApplyT(func(v CustomServiceResponse) []VolumeDefinitionResponse { return v.Volumes }).(VolumeDefinitionResponseArrayOutput)
}

type CustomServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (CustomServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomServiceResponse)(nil)).Elem()
}

func (o CustomServiceResponseArrayOutput) ToCustomServiceResponseArrayOutput() CustomServiceResponseArrayOutput {
	return o
}

func (o CustomServiceResponseArrayOutput) ToCustomServiceResponseArrayOutputWithContext(ctx context.Context) CustomServiceResponseArrayOutput {
	return o
}

func (o CustomServiceResponseArrayOutput) Index(i pulumi.IntInput) CustomServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomServiceResponse {
		return vs[0].([]CustomServiceResponse)[vs[1].(int)]
	}).(CustomServiceResponseOutput)
}

type CustomTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

// CustomTargetLagsInput is an input type that accepts CustomTargetLagsArgs and CustomTargetLagsOutput values.
// You can construct a concrete instance of `CustomTargetLagsInput` via:
//
//	CustomTargetLagsArgs{...}
type CustomTargetLagsInput interface {
	pulumi.Input

	ToCustomTargetLagsOutput() CustomTargetLagsOutput
	ToCustomTargetLagsOutputWithContext(context.Context) CustomTargetLagsOutput
}

type CustomTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Set target lags values.
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (CustomTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return i.ToCustomTargetLagsOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput)
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput).ToCustomTargetLagsPtrOutputWithContext(ctx)
}

// CustomTargetLagsPtrInput is an input type that accepts CustomTargetLagsArgs, CustomTargetLagsPtr and CustomTargetLagsPtrOutput values.
// You can construct a concrete instance of `CustomTargetLagsPtrInput` via:
//
//	        CustomTargetLagsArgs{...}
//
//	or:
//
//	        nil
type CustomTargetLagsPtrInput interface {
	pulumi.Input

	ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput
	ToCustomTargetLagsPtrOutputWithContext(context.Context) CustomTargetLagsPtrOutput
}

type customTargetLagsPtrType CustomTargetLagsArgs

func CustomTargetLagsPtr(v *CustomTargetLagsArgs) CustomTargetLagsPtrInput {
	return (*customTargetLagsPtrType)(v)
}

func (*customTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsPtrOutput)
}

type CustomTargetLagsOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetLags) *CustomTargetLags {
		return &v
	}).(CustomTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLags) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) Elem() CustomTargetLagsOutput {
	return o.ApplyT(func(v *CustomTargetLags) CustomTargetLags {
		if v != nil {
			return *v
		}
		var ret CustomTargetLags
		return ret
	}).(CustomTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsPtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLags) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

type CustomTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutput() CustomTargetLagsResponseOutput {
	return o
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutputWithContext(ctx context.Context) CustomTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponseOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutput() CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutputWithContext(ctx context.Context) CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) Elem() CustomTargetLagsResponseOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) CustomTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetLagsResponse
		return ret
	}).(CustomTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponsePtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

// CustomTargetRollingWindowSizeInput is an input type that accepts CustomTargetRollingWindowSizeArgs and CustomTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizeInput` via:
//
//	CustomTargetRollingWindowSizeArgs{...}
type CustomTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput
	ToCustomTargetRollingWindowSizeOutputWithContext(context.Context) CustomTargetRollingWindowSizeOutput
}

type CustomTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return i.ToCustomTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput)
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput).ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// CustomTargetRollingWindowSizePtrInput is an input type that accepts CustomTargetRollingWindowSizeArgs, CustomTargetRollingWindowSizePtr and CustomTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizePtrInput` via:
//
//	        CustomTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type CustomTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput
	ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Context) CustomTargetRollingWindowSizePtrOutput
}

type customTargetRollingWindowSizePtrType CustomTargetRollingWindowSizeArgs

func CustomTargetRollingWindowSizePtr(v *CustomTargetRollingWindowSizeArgs) CustomTargetRollingWindowSizePtrInput {
	return (*customTargetRollingWindowSizePtrType)(v)
}

func (*customTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizePtrOutput)
}

type CustomTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetRollingWindowSize) *CustomTargetRollingWindowSize {
		return &v
	}).(CustomTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) Elem() CustomTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) CustomTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSize
		return ret
	}).(CustomTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

type CustomTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutput() CustomTargetRollingWindowSizeResponseOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutput() CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) Elem() CustomTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) CustomTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSizeResponse
		return ret
	}).(CustomTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Container for data asset versions.
type DataContainerType struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerType
func (val *DataContainerType) Defaults() *DataContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// DataContainerTypeInput is an input type that accepts DataContainerTypeArgs and DataContainerTypeOutput values.
// You can construct a concrete instance of `DataContainerTypeInput` via:
//
//	DataContainerTypeArgs{...}
type DataContainerTypeInput interface {
	pulumi.Input

	ToDataContainerTypeOutput() DataContainerTypeOutput
	ToDataContainerTypeOutputWithContext(context.Context) DataContainerTypeOutput
}

// Container for data asset versions.
type DataContainerTypeArgs struct {
	// [Required] Specifies the type of data.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerTypeArgs
func (val *DataContainerTypeArgs) Defaults() *DataContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DataContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return i.ToDataContainerTypeOutputWithContext(context.Background())
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataContainerTypeOutput)
}

// Container for data asset versions.
type DataContainerTypeOutput struct{ *pulumi.OutputState }

func (DataContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return o
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerTypeOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerType) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for data asset versions.
type DataContainerResponse struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerResponse
func (val *DataContainerResponse) Defaults() *DataContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for data asset versions.
type DataContainerResponseOutput struct{ *pulumi.OutputState }

func (DataContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerResponse)(nil)).Elem()
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutput() DataContainerResponseOutput {
	return o
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutputWithContext(ctx context.Context) DataContainerResponseOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o DataContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o DataContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o DataContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A DataFactory compute.
type DataFactory struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DataFactoryInput is an input type that accepts DataFactoryArgs and DataFactoryOutput values.
// You can construct a concrete instance of `DataFactoryInput` via:
//
//	DataFactoryArgs{...}
type DataFactoryInput interface {
	pulumi.Input

	ToDataFactoryOutput() DataFactoryOutput
	ToDataFactoryOutputWithContext(context.Context) DataFactoryOutput
}

// A DataFactory compute.
type DataFactoryArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DataFactoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactory)(nil)).Elem()
}

func (i DataFactoryArgs) ToDataFactoryOutput() DataFactoryOutput {
	return i.ToDataFactoryOutputWithContext(context.Background())
}

func (i DataFactoryArgs) ToDataFactoryOutputWithContext(ctx context.Context) DataFactoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryOutput)
}

func (i DataFactoryArgs) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return i.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (i DataFactoryArgs) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryOutput).ToDataFactoryPtrOutputWithContext(ctx)
}

// DataFactoryPtrInput is an input type that accepts DataFactoryArgs, DataFactoryPtr and DataFactoryPtrOutput values.
// You can construct a concrete instance of `DataFactoryPtrInput` via:
//
//	        DataFactoryArgs{...}
//
//	or:
//
//	        nil
type DataFactoryPtrInput interface {
	pulumi.Input

	ToDataFactoryPtrOutput() DataFactoryPtrOutput
	ToDataFactoryPtrOutputWithContext(context.Context) DataFactoryPtrOutput
}

type dataFactoryPtrType DataFactoryArgs

func DataFactoryPtr(v *DataFactoryArgs) DataFactoryPtrInput {
	return (*dataFactoryPtrType)(v)
}

func (*dataFactoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFactory)(nil)).Elem()
}

func (i *dataFactoryPtrType) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return i.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (i *dataFactoryPtrType) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataFactoryPtrOutput)
}

// A DataFactory compute.
type DataFactoryOutput struct{ *pulumi.OutputState }

func (DataFactoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactory)(nil)).Elem()
}

func (o DataFactoryOutput) ToDataFactoryOutput() DataFactoryOutput {
	return o
}

func (o DataFactoryOutput) ToDataFactoryOutputWithContext(ctx context.Context) DataFactoryOutput {
	return o
}

func (o DataFactoryOutput) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return o.ToDataFactoryPtrOutputWithContext(context.Background())
}

func (o DataFactoryOutput) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataFactory) *DataFactory {
		return &v
	}).(DataFactoryPtrOutput)
}

// Location for the underlying compute
func (o DataFactoryOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactory) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFactory) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactory) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataFactoryPtrOutput struct{ *pulumi.OutputState }

func (DataFactoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataFactory)(nil)).Elem()
}

func (o DataFactoryPtrOutput) ToDataFactoryPtrOutput() DataFactoryPtrOutput {
	return o
}

func (o DataFactoryPtrOutput) ToDataFactoryPtrOutputWithContext(ctx context.Context) DataFactoryPtrOutput {
	return o
}

func (o DataFactoryPtrOutput) Elem() DataFactoryOutput {
	return o.ApplyT(func(v *DataFactory) DataFactory {
		if v != nil {
			return *v
		}
		var ret DataFactory
		return ret
	}).(DataFactoryOutput)
}

// Location for the underlying compute
func (o DataFactoryPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataFactory) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataFactory) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type DataFactoryResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataFactory'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataFactory compute.
type DataFactoryResponseOutput struct{ *pulumi.OutputState }

func (DataFactoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataFactoryResponse)(nil)).Elem()
}

func (o DataFactoryResponseOutput) ToDataFactoryResponseOutput() DataFactoryResponseOutput {
	return o
}

func (o DataFactoryResponseOutput) ToDataFactoryResponseOutputWithContext(ctx context.Context) DataFactoryResponseOutput {
	return o
}

// Location for the underlying compute
func (o DataFactoryResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataFactory'.
func (o DataFactoryResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DataFactoryResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataFactoryResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataFactoryResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DataFactoryResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DataFactoryResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DataFactoryResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Errors during provisioning
func (o DataFactoryResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DataFactoryResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DataFactoryResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataFactoryResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DataFactoryResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataFactoryResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalytics struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                              `pulumi:"disableLocalAuth"`
	Properties       *DataLakeAnalyticsSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DataLakeAnalyticsInput is an input type that accepts DataLakeAnalyticsArgs and DataLakeAnalyticsOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsInput` via:
//
//	DataLakeAnalyticsArgs{...}
type DataLakeAnalyticsInput interface {
	pulumi.Input

	ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput
	ToDataLakeAnalyticsOutputWithContext(context.Context) DataLakeAnalyticsOutput
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput                       `pulumi:"disableLocalAuth"`
	Properties       DataLakeAnalyticsSchemaPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DataLakeAnalyticsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalytics)(nil)).Elem()
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput {
	return i.ToDataLakeAnalyticsOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsOutputWithContext(ctx context.Context) DataLakeAnalyticsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsOutput)
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return i.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsArgs) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsOutput).ToDataLakeAnalyticsPtrOutputWithContext(ctx)
}

// DataLakeAnalyticsPtrInput is an input type that accepts DataLakeAnalyticsArgs, DataLakeAnalyticsPtr and DataLakeAnalyticsPtrOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsPtrInput` via:
//
//	        DataLakeAnalyticsArgs{...}
//
//	or:
//
//	        nil
type DataLakeAnalyticsPtrInput interface {
	pulumi.Input

	ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput
	ToDataLakeAnalyticsPtrOutputWithContext(context.Context) DataLakeAnalyticsPtrOutput
}

type dataLakeAnalyticsPtrType DataLakeAnalyticsArgs

func DataLakeAnalyticsPtr(v *DataLakeAnalyticsArgs) DataLakeAnalyticsPtrInput {
	return (*dataLakeAnalyticsPtrType)(v)
}

func (*dataLakeAnalyticsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalytics)(nil)).Elem()
}

func (i *dataLakeAnalyticsPtrType) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return i.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (i *dataLakeAnalyticsPtrType) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsPtrOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalytics)(nil)).Elem()
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsOutput() DataLakeAnalyticsOutput {
	return o
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsOutputWithContext(ctx context.Context) DataLakeAnalyticsOutput {
	return o
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return o.ToDataLakeAnalyticsPtrOutputWithContext(context.Background())
}

func (o DataLakeAnalyticsOutput) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeAnalytics) *DataLakeAnalytics {
		return &v
	}).(DataLakeAnalyticsPtrOutput)
}

// Location for the underlying compute
func (o DataLakeAnalyticsOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalytics) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

func (o DataLakeAnalyticsOutput) Properties() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *DataLakeAnalyticsSchemaProperties { return v.Properties }).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalytics) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalytics)(nil)).Elem()
}

func (o DataLakeAnalyticsPtrOutput) ToDataLakeAnalyticsPtrOutput() DataLakeAnalyticsPtrOutput {
	return o
}

func (o DataLakeAnalyticsPtrOutput) ToDataLakeAnalyticsPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsPtrOutput {
	return o
}

func (o DataLakeAnalyticsPtrOutput) Elem() DataLakeAnalyticsOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) DataLakeAnalytics {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalytics
		return ret
	}).(DataLakeAnalyticsOutput)
}

// Location for the underlying compute
func (o DataLakeAnalyticsPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

func (o DataLakeAnalyticsPtrOutput) Properties() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *DataLakeAnalyticsSchemaProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalytics) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'DataLakeAnalytics'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                                     `pulumi:"modifiedOn"`
	Properties *DataLakeAnalyticsSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataLakeAnalytics compute.
type DataLakeAnalyticsResponseOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsResponse)(nil)).Elem()
}

func (o DataLakeAnalyticsResponseOutput) ToDataLakeAnalyticsResponseOutput() DataLakeAnalyticsResponseOutput {
	return o
}

func (o DataLakeAnalyticsResponseOutput) ToDataLakeAnalyticsResponseOutputWithContext(ctx context.Context) DataLakeAnalyticsResponseOutput {
	return o
}

// Location for the underlying compute
func (o DataLakeAnalyticsResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'DataLakeAnalytics'.
func (o DataLakeAnalyticsResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DataLakeAnalyticsResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DataLakeAnalyticsResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DataLakeAnalyticsResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DataLakeAnalyticsResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DataLakeAnalyticsResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o DataLakeAnalyticsResponseOutput) Properties() DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *DataLakeAnalyticsSchemaResponseProperties { return v.Properties }).(DataLakeAnalyticsSchemaResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o DataLakeAnalyticsResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DataLakeAnalyticsResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DataLakeAnalyticsResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

// DataLakeAnalyticsSchemaPropertiesInput is an input type that accepts DataLakeAnalyticsSchemaPropertiesArgs and DataLakeAnalyticsSchemaPropertiesOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsSchemaPropertiesInput` via:
//
//	DataLakeAnalyticsSchemaPropertiesArgs{...}
type DataLakeAnalyticsSchemaPropertiesInput interface {
	pulumi.Input

	ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput
	ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(context.Context) DataLakeAnalyticsSchemaPropertiesOutput
}

type DataLakeAnalyticsSchemaPropertiesArgs struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName pulumi.StringPtrInput `pulumi:"dataLakeStoreAccountName"`
}

func (DataLakeAnalyticsSchemaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesOutput)
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i DataLakeAnalyticsSchemaPropertiesArgs) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesOutput).ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx)
}

// DataLakeAnalyticsSchemaPropertiesPtrInput is an input type that accepts DataLakeAnalyticsSchemaPropertiesArgs, DataLakeAnalyticsSchemaPropertiesPtr and DataLakeAnalyticsSchemaPropertiesPtrOutput values.
// You can construct a concrete instance of `DataLakeAnalyticsSchemaPropertiesPtrInput` via:
//
//	        DataLakeAnalyticsSchemaPropertiesArgs{...}
//
//	or:
//
//	        nil
type DataLakeAnalyticsSchemaPropertiesPtrInput interface {
	pulumi.Input

	ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput
	ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput
}

type dataLakeAnalyticsSchemaPropertiesPtrType DataLakeAnalyticsSchemaPropertiesArgs

func DataLakeAnalyticsSchemaPropertiesPtr(v *DataLakeAnalyticsSchemaPropertiesArgs) DataLakeAnalyticsSchemaPropertiesPtrInput {
	return (*dataLakeAnalyticsSchemaPropertiesPtrType)(v)
}

func (*dataLakeAnalyticsSchemaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (i *dataLakeAnalyticsSchemaPropertiesPtrType) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return i.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i *dataLakeAnalyticsSchemaPropertiesPtrType) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

type DataLakeAnalyticsSchemaPropertiesOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesOutput() DataLakeAnalyticsSchemaPropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (o DataLakeAnalyticsSchemaPropertiesOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataLakeAnalyticsSchemaProperties) *DataLakeAnalyticsSchemaProperties {
		return &v
	}).(DataLakeAnalyticsSchemaPropertiesPtrOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaPropertiesOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsSchemaProperties) *string { return v.DataLakeStoreAccountName }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutput() DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) ToDataLakeAnalyticsSchemaPropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaPropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) Elem() DataLakeAnalyticsSchemaPropertiesOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaProperties) DataLakeAnalyticsSchemaProperties {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalyticsSchemaProperties
		return ret
	}).(DataLakeAnalyticsSchemaPropertiesOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaPropertiesPtrOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataLakeStoreAccountName
	}).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaResponseProperties struct {
	// DataLake Store Account Name
	DataLakeStoreAccountName *string `pulumi:"dataLakeStoreAccountName"`
}

type DataLakeAnalyticsSchemaResponsePropertiesOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataLakeAnalyticsSchemaResponseProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) ToDataLakeAnalyticsSchemaResponsePropertiesOutput() DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) ToDataLakeAnalyticsSchemaResponsePropertiesOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaResponsePropertiesOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataLakeAnalyticsSchemaResponseProperties) *string { return v.DataLakeStoreAccountName }).(pulumi.StringPtrOutput)
}

type DataLakeAnalyticsSchemaResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLakeAnalyticsSchemaResponseProperties)(nil)).Elem()
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ToDataLakeAnalyticsSchemaResponsePropertiesPtrOutput() DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) ToDataLakeAnalyticsSchemaResponsePropertiesPtrOutputWithContext(ctx context.Context) DataLakeAnalyticsSchemaResponsePropertiesPtrOutput {
	return o
}

func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) Elem() DataLakeAnalyticsSchemaResponsePropertiesOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaResponseProperties) DataLakeAnalyticsSchemaResponseProperties {
		if v != nil {
			return *v
		}
		var ret DataLakeAnalyticsSchemaResponseProperties
		return ret
	}).(DataLakeAnalyticsSchemaResponsePropertiesOutput)
}

// DataLake Store Account Name
func (o DataLakeAnalyticsSchemaResponsePropertiesPtrOutput) DataLakeStoreAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataLakeAnalyticsSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.DataLakeStoreAccountName
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReference struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// DataPathAssetReferenceInput is an input type that accepts DataPathAssetReferenceArgs and DataPathAssetReferenceOutput values.
// You can construct a concrete instance of `DataPathAssetReferenceInput` via:
//
//	DataPathAssetReferenceArgs{...}
type DataPathAssetReferenceInput interface {
	pulumi.Input

	ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput
	ToDataPathAssetReferenceOutputWithContext(context.Context) DataPathAssetReferenceOutput
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceArgs struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (DataPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return i.ToDataPathAssetReferenceOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput)
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput).ToDataPathAssetReferencePtrOutputWithContext(ctx)
}

// DataPathAssetReferencePtrInput is an input type that accepts DataPathAssetReferenceArgs, DataPathAssetReferencePtr and DataPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `DataPathAssetReferencePtrInput` via:
//
//	        DataPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type DataPathAssetReferencePtrInput interface {
	pulumi.Input

	ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput
	ToDataPathAssetReferencePtrOutputWithContext(context.Context) DataPathAssetReferencePtrOutput
}

type dataPathAssetReferencePtrType DataPathAssetReferenceArgs

func DataPathAssetReferencePtr(v *DataPathAssetReferenceArgs) DataPathAssetReferencePtrInput {
	return (*dataPathAssetReferencePtrType)(v)
}

func (*dataPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataPathAssetReference) *DataPathAssetReference {
		return &v
	}).(DataPathAssetReferencePtrOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) Elem() DataPathAssetReferenceOutput {
	return o.ApplyT(func(v *DataPathAssetReference) DataPathAssetReference {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReference
		return ret
	}).(DataPathAssetReferenceOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferencePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponse struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutput() DataPathAssetReferenceResponseOutput {
	return o
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutputWithContext(ctx context.Context) DataPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponseOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutput() DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) Elem() DataPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) DataPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReferenceResponse
		return ret
	}).(DataPathAssetReferenceResponseOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponsePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type Databricks struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Databricks
	Properties *DatabricksProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// DatabricksInput is an input type that accepts DatabricksArgs and DatabricksOutput values.
// You can construct a concrete instance of `DatabricksInput` via:
//
//	DatabricksArgs{...}
type DatabricksInput interface {
	pulumi.Input

	ToDatabricksOutput() DatabricksOutput
	ToDatabricksOutputWithContext(context.Context) DatabricksOutput
}

// A DataFactory compute.
type DatabricksArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of Databricks
	Properties DatabricksPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (DatabricksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Databricks)(nil)).Elem()
}

func (i DatabricksArgs) ToDatabricksOutput() DatabricksOutput {
	return i.ToDatabricksOutputWithContext(context.Background())
}

func (i DatabricksArgs) ToDatabricksOutputWithContext(ctx context.Context) DatabricksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksOutput)
}

func (i DatabricksArgs) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return i.ToDatabricksPtrOutputWithContext(context.Background())
}

func (i DatabricksArgs) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksOutput).ToDatabricksPtrOutputWithContext(ctx)
}

// DatabricksPtrInput is an input type that accepts DatabricksArgs, DatabricksPtr and DatabricksPtrOutput values.
// You can construct a concrete instance of `DatabricksPtrInput` via:
//
//	        DatabricksArgs{...}
//
//	or:
//
//	        nil
type DatabricksPtrInput interface {
	pulumi.Input

	ToDatabricksPtrOutput() DatabricksPtrOutput
	ToDatabricksPtrOutputWithContext(context.Context) DatabricksPtrOutput
}

type databricksPtrType DatabricksArgs

func DatabricksPtr(v *DatabricksArgs) DatabricksPtrInput {
	return (*databricksPtrType)(v)
}

func (*databricksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Databricks)(nil)).Elem()
}

func (i *databricksPtrType) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return i.ToDatabricksPtrOutputWithContext(context.Background())
}

func (i *databricksPtrType) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPtrOutput)
}

// A DataFactory compute.
type DatabricksOutput struct{ *pulumi.OutputState }

func (DatabricksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Databricks)(nil)).Elem()
}

func (o DatabricksOutput) ToDatabricksOutput() DatabricksOutput {
	return o
}

func (o DatabricksOutput) ToDatabricksOutputWithContext(ctx context.Context) DatabricksOutput {
	return o
}

func (o DatabricksOutput) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return o.ToDatabricksPtrOutputWithContext(context.Background())
}

func (o DatabricksOutput) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Databricks) *Databricks {
		return &v
	}).(DatabricksPtrOutput)
}

// Location for the underlying compute
func (o DatabricksOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v Databricks) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Databricks) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of Databricks
func (o DatabricksOutput) Properties() DatabricksPropertiesPtrOutput {
	return o.ApplyT(func(v Databricks) *DatabricksProperties { return v.Properties }).(DatabricksPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Databricks) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DatabricksPtrOutput struct{ *pulumi.OutputState }

func (DatabricksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Databricks)(nil)).Elem()
}

func (o DatabricksPtrOutput) ToDatabricksPtrOutput() DatabricksPtrOutput {
	return o
}

func (o DatabricksPtrOutput) ToDatabricksPtrOutputWithContext(ctx context.Context) DatabricksPtrOutput {
	return o
}

func (o DatabricksPtrOutput) Elem() DatabricksOutput {
	return o.ApplyT(func(v *Databricks) Databricks {
		if v != nil {
			return *v
		}
		var ret Databricks
		return ret
	}).(DatabricksOutput)
}

// Location for the underlying compute
func (o DatabricksPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Databricks) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of Databricks
func (o DatabricksPtrOutput) Properties() DatabricksPropertiesPtrOutput {
	return o.ApplyT(func(v *Databricks) *DatabricksProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(DatabricksPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Databricks) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties of Databricks
type DatabricksProperties struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// DatabricksPropertiesInput is an input type that accepts DatabricksPropertiesArgs and DatabricksPropertiesOutput values.
// You can construct a concrete instance of `DatabricksPropertiesInput` via:
//
//	DatabricksPropertiesArgs{...}
type DatabricksPropertiesInput interface {
	pulumi.Input

	ToDatabricksPropertiesOutput() DatabricksPropertiesOutput
	ToDatabricksPropertiesOutputWithContext(context.Context) DatabricksPropertiesOutput
}

// Properties of Databricks
type DatabricksPropertiesArgs struct {
	// Databricks access token
	DatabricksAccessToken pulumi.StringPtrInput `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl pulumi.StringPtrInput `pulumi:"workspaceUrl"`
}

func (DatabricksPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksProperties)(nil)).Elem()
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesOutput() DatabricksPropertiesOutput {
	return i.ToDatabricksPropertiesOutputWithContext(context.Background())
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesOutputWithContext(ctx context.Context) DatabricksPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesOutput)
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return i.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (i DatabricksPropertiesArgs) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesOutput).ToDatabricksPropertiesPtrOutputWithContext(ctx)
}

// DatabricksPropertiesPtrInput is an input type that accepts DatabricksPropertiesArgs, DatabricksPropertiesPtr and DatabricksPropertiesPtrOutput values.
// You can construct a concrete instance of `DatabricksPropertiesPtrInput` via:
//
//	        DatabricksPropertiesArgs{...}
//
//	or:
//
//	        nil
type DatabricksPropertiesPtrInput interface {
	pulumi.Input

	ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput
	ToDatabricksPropertiesPtrOutputWithContext(context.Context) DatabricksPropertiesPtrOutput
}

type databricksPropertiesPtrType DatabricksPropertiesArgs

func DatabricksPropertiesPtr(v *DatabricksPropertiesArgs) DatabricksPropertiesPtrInput {
	return (*databricksPropertiesPtrType)(v)
}

func (*databricksPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksProperties)(nil)).Elem()
}

func (i *databricksPropertiesPtrType) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return i.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (i *databricksPropertiesPtrType) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabricksPropertiesPtrOutput)
}

// Properties of Databricks
type DatabricksPropertiesOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksProperties)(nil)).Elem()
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesOutput() DatabricksPropertiesOutput {
	return o
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesOutputWithContext(ctx context.Context) DatabricksPropertiesOutput {
	return o
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return o.ToDatabricksPropertiesPtrOutputWithContext(context.Background())
}

func (o DatabricksPropertiesOutput) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatabricksProperties) *DatabricksProperties {
		return &v
	}).(DatabricksPropertiesPtrOutput)
}

// Databricks access token
func (o DatabricksPropertiesOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksProperties) *string { return v.DatabricksAccessToken }).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksProperties) *string { return v.WorkspaceUrl }).(pulumi.StringPtrOutput)
}

type DatabricksPropertiesPtrOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksProperties)(nil)).Elem()
}

func (o DatabricksPropertiesPtrOutput) ToDatabricksPropertiesPtrOutput() DatabricksPropertiesPtrOutput {
	return o
}

func (o DatabricksPropertiesPtrOutput) ToDatabricksPropertiesPtrOutputWithContext(ctx context.Context) DatabricksPropertiesPtrOutput {
	return o
}

func (o DatabricksPropertiesPtrOutput) Elem() DatabricksPropertiesOutput {
	return o.ApplyT(func(v *DatabricksProperties) DatabricksProperties {
		if v != nil {
			return *v
		}
		var ret DatabricksProperties
		return ret
	}).(DatabricksPropertiesOutput)
}

// Databricks access token
func (o DatabricksPropertiesPtrOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksProperties) *string {
		if v == nil {
			return nil
		}
		return v.DatabricksAccessToken
	}).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesPtrOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceUrl
	}).(pulumi.StringPtrOutput)
}

// Properties of Databricks
type DatabricksPropertiesResponse struct {
	// Databricks access token
	DatabricksAccessToken *string `pulumi:"databricksAccessToken"`
	// Workspace Url
	WorkspaceUrl *string `pulumi:"workspaceUrl"`
}

// Properties of Databricks
type DatabricksPropertiesResponseOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksPropertiesResponse)(nil)).Elem()
}

func (o DatabricksPropertiesResponseOutput) ToDatabricksPropertiesResponseOutput() DatabricksPropertiesResponseOutput {
	return o
}

func (o DatabricksPropertiesResponseOutput) ToDatabricksPropertiesResponseOutputWithContext(ctx context.Context) DatabricksPropertiesResponseOutput {
	return o
}

// Databricks access token
func (o DatabricksPropertiesResponseOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksPropertiesResponse) *string { return v.DatabricksAccessToken }).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesResponseOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksPropertiesResponse) *string { return v.WorkspaceUrl }).(pulumi.StringPtrOutput)
}

type DatabricksPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (DatabricksPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabricksPropertiesResponse)(nil)).Elem()
}

func (o DatabricksPropertiesResponsePtrOutput) ToDatabricksPropertiesResponsePtrOutput() DatabricksPropertiesResponsePtrOutput {
	return o
}

func (o DatabricksPropertiesResponsePtrOutput) ToDatabricksPropertiesResponsePtrOutputWithContext(ctx context.Context) DatabricksPropertiesResponsePtrOutput {
	return o
}

func (o DatabricksPropertiesResponsePtrOutput) Elem() DatabricksPropertiesResponseOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) DatabricksPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret DatabricksPropertiesResponse
		return ret
	}).(DatabricksPropertiesResponseOutput)
}

// Databricks access token
func (o DatabricksPropertiesResponsePtrOutput) DatabricksAccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatabricksAccessToken
	}).(pulumi.StringPtrOutput)
}

// Workspace Url
func (o DatabricksPropertiesResponsePtrOutput) WorkspaceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabricksPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceUrl
	}).(pulumi.StringPtrOutput)
}

// A DataFactory compute.
type DatabricksResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Databricks'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Databricks
	Properties *DatabricksPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A DataFactory compute.
type DatabricksResponseOutput struct{ *pulumi.OutputState }

func (DatabricksResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabricksResponse)(nil)).Elem()
}

func (o DatabricksResponseOutput) ToDatabricksResponseOutput() DatabricksResponseOutput {
	return o
}

func (o DatabricksResponseOutput) ToDatabricksResponseOutputWithContext(ctx context.Context) DatabricksResponseOutput {
	return o
}

// Location for the underlying compute
func (o DatabricksResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Databricks'.
func (o DatabricksResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o DatabricksResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o DatabricksResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o DatabricksResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o DatabricksResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v DatabricksResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o DatabricksResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of Databricks
func (o DatabricksResponseOutput) Properties() DatabricksPropertiesResponsePtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *DatabricksPropertiesResponse { return v.Properties }).(DatabricksPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o DatabricksResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v DatabricksResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o DatabricksResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v DatabricksResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o DatabricksResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabricksResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestDataPath struct {
	// The datastore name.
	DatastoreName *string `pulumi:"datastoreName"`
	// Path within the datastore.
	RelativePath *string `pulumi:"relativePath"`
}

// DatasetCreateRequestDataPathInput is an input type that accepts DatasetCreateRequestDataPathArgs and DatasetCreateRequestDataPathOutput values.
// You can construct a concrete instance of `DatasetCreateRequestDataPathInput` via:
//
//	DatasetCreateRequestDataPathArgs{...}
type DatasetCreateRequestDataPathInput interface {
	pulumi.Input

	ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput
	ToDatasetCreateRequestDataPathOutputWithContext(context.Context) DatasetCreateRequestDataPathOutput
}

type DatasetCreateRequestDataPathArgs struct {
	// The datastore name.
	DatastoreName pulumi.StringPtrInput `pulumi:"datastoreName"`
	// Path within the datastore.
	RelativePath pulumi.StringPtrInput `pulumi:"relativePath"`
}

func (DatasetCreateRequestDataPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestDataPath)(nil)).Elem()
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput {
	return i.ToDatasetCreateRequestDataPathOutputWithContext(context.Background())
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathOutput)
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return i.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestDataPathArgs) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathOutput).ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx)
}

// DatasetCreateRequestDataPathPtrInput is an input type that accepts DatasetCreateRequestDataPathArgs, DatasetCreateRequestDataPathPtr and DatasetCreateRequestDataPathPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestDataPathPtrInput` via:
//
//	        DatasetCreateRequestDataPathArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestDataPathPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput
	ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Context) DatasetCreateRequestDataPathPtrOutput
}

type datasetCreateRequestDataPathPtrType DatasetCreateRequestDataPathArgs

func DatasetCreateRequestDataPathPtr(v *DatasetCreateRequestDataPathArgs) DatasetCreateRequestDataPathPtrInput {
	return (*datasetCreateRequestDataPathPtrType)(v)
}

func (*datasetCreateRequestDataPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestDataPath)(nil)).Elem()
}

func (i *datasetCreateRequestDataPathPtrType) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return i.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestDataPathPtrType) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestDataPathPtrOutput)
}

type DatasetCreateRequestDataPathOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestDataPath)(nil)).Elem()
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathOutput() DatasetCreateRequestDataPathOutput {
	return o
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathOutput {
	return o
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return o.ToDatasetCreateRequestDataPathPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestDataPathOutput) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestDataPath) *DatasetCreateRequestDataPath {
		return &v
	}).(DatasetCreateRequestDataPathPtrOutput)
}

// The datastore name.
func (o DatasetCreateRequestDataPathOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestDataPath) *string { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// Path within the datastore.
func (o DatasetCreateRequestDataPathOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestDataPath) *string { return v.RelativePath }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestDataPath)(nil)).Elem()
}

func (o DatasetCreateRequestDataPathPtrOutput) ToDatasetCreateRequestDataPathPtrOutput() DatasetCreateRequestDataPathPtrOutput {
	return o
}

func (o DatasetCreateRequestDataPathPtrOutput) ToDatasetCreateRequestDataPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestDataPathPtrOutput {
	return o
}

func (o DatasetCreateRequestDataPathPtrOutput) Elem() DatasetCreateRequestDataPathOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) DatasetCreateRequestDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestDataPath
		return ret
	}).(DatasetCreateRequestDataPathOutput)
}

// The datastore name.
func (o DatasetCreateRequestDataPathPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// Path within the datastore.
func (o DatasetCreateRequestDataPathPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestDataPath) *string {
		if v == nil {
			return nil
		}
		return v.RelativePath
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestParameters struct {
	// Header type.
	Header *string `pulumi:"header"`
	// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
	IncludePath *bool `pulumi:"includePath"`
	// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
	PartitionFormat *string                    `pulumi:"partitionFormat"`
	Path            *DatasetCreateRequestPath  `pulumi:"path"`
	Query           *DatasetCreateRequestQuery `pulumi:"query"`
	// The separator used to split columns for 'delimited_files' sourceType.
	Separator *string `pulumi:"separator"`
	// Data source type.
	SourceType *string `pulumi:"sourceType"`
}

// Defaults sets the appropriate defaults for DatasetCreateRequestParameters
func (val *DatasetCreateRequestParameters) Defaults() *DatasetCreateRequestParameters {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncludePath == nil {
		includePath_ := false
		tmp.IncludePath = &includePath_
	}
	return &tmp
}

// DatasetCreateRequestParametersInput is an input type that accepts DatasetCreateRequestParametersArgs and DatasetCreateRequestParametersOutput values.
// You can construct a concrete instance of `DatasetCreateRequestParametersInput` via:
//
//	DatasetCreateRequestParametersArgs{...}
type DatasetCreateRequestParametersInput interface {
	pulumi.Input

	ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput
	ToDatasetCreateRequestParametersOutputWithContext(context.Context) DatasetCreateRequestParametersOutput
}

type DatasetCreateRequestParametersArgs struct {
	// Header type.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
	IncludePath pulumi.BoolPtrInput `pulumi:"includePath"`
	// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
	PartitionFormat pulumi.StringPtrInput             `pulumi:"partitionFormat"`
	Path            DatasetCreateRequestPathPtrInput  `pulumi:"path"`
	Query           DatasetCreateRequestQueryPtrInput `pulumi:"query"`
	// The separator used to split columns for 'delimited_files' sourceType.
	Separator pulumi.StringPtrInput `pulumi:"separator"`
	// Data source type.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
}

// Defaults sets the appropriate defaults for DatasetCreateRequestParametersArgs
func (val *DatasetCreateRequestParametersArgs) Defaults() *DatasetCreateRequestParametersArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncludePath == nil {
		tmp.IncludePath = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DatasetCreateRequestParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestParameters)(nil)).Elem()
}

func (i DatasetCreateRequestParametersArgs) ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput {
	return i.ToDatasetCreateRequestParametersOutputWithContext(context.Background())
}

func (i DatasetCreateRequestParametersArgs) ToDatasetCreateRequestParametersOutputWithContext(ctx context.Context) DatasetCreateRequestParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestParametersOutput)
}

type DatasetCreateRequestParametersOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestParameters)(nil)).Elem()
}

func (o DatasetCreateRequestParametersOutput) ToDatasetCreateRequestParametersOutput() DatasetCreateRequestParametersOutput {
	return o
}

func (o DatasetCreateRequestParametersOutput) ToDatasetCreateRequestParametersOutputWithContext(ctx context.Context) DatasetCreateRequestParametersOutput {
	return o
}

// Header type.
func (o DatasetCreateRequestParametersOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// Boolean to keep path information as column in the dataset. Defaults to False. This is useful when reading multiple files, and want to know which file a particular record originated from, or to keep useful information in file path.
func (o DatasetCreateRequestParametersOutput) IncludePath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *bool { return v.IncludePath }).(pulumi.BoolPtrOutput)
}

// The partition information of each path will be extracted into columns based on the specified format. Format part '{column_name}' creates string column, and '{column_name:yyyy/MM/dd/HH/mm/ss}' creates datetime column, where 'yyyy', 'MM', 'dd', 'HH', 'mm' and 'ss' are used to extract year, month, day, hour, minute and second for the datetime type. The format should start from the position of first partition key until the end of file path. For example, given the path '../USA/2019/01/01/data.parquet' where the partition is by country/region and time, partition_format='/{CountryOrRegion}/{PartitionDate:yyyy/MM/dd}/data.csv' creates a string column 'CountryOrRegion' with the value 'USA' and a datetime column 'PartitionDate' with the value '2019-01-01
func (o DatasetCreateRequestParametersOutput) PartitionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.PartitionFormat }).(pulumi.StringPtrOutput)
}

func (o DatasetCreateRequestParametersOutput) Path() DatasetCreateRequestPathPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *DatasetCreateRequestPath { return v.Path }).(DatasetCreateRequestPathPtrOutput)
}

func (o DatasetCreateRequestParametersOutput) Query() DatasetCreateRequestQueryPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *DatasetCreateRequestQuery { return v.Query }).(DatasetCreateRequestQueryPtrOutput)
}

// The separator used to split columns for 'delimited_files' sourceType.
func (o DatasetCreateRequestParametersOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

// Data source type.
func (o DatasetCreateRequestParametersOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestParameters) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestPath struct {
	DataPath *DatasetCreateRequestDataPath `pulumi:"dataPath"`
	// The Http URL.
	HttpUrl *string `pulumi:"httpUrl"`
}

// DatasetCreateRequestPathInput is an input type that accepts DatasetCreateRequestPathArgs and DatasetCreateRequestPathOutput values.
// You can construct a concrete instance of `DatasetCreateRequestPathInput` via:
//
//	DatasetCreateRequestPathArgs{...}
type DatasetCreateRequestPathInput interface {
	pulumi.Input

	ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput
	ToDatasetCreateRequestPathOutputWithContext(context.Context) DatasetCreateRequestPathOutput
}

type DatasetCreateRequestPathArgs struct {
	DataPath DatasetCreateRequestDataPathPtrInput `pulumi:"dataPath"`
	// The Http URL.
	HttpUrl pulumi.StringPtrInput `pulumi:"httpUrl"`
}

func (DatasetCreateRequestPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestPath)(nil)).Elem()
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput {
	return i.ToDatasetCreateRequestPathOutputWithContext(context.Background())
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathOutputWithContext(ctx context.Context) DatasetCreateRequestPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathOutput)
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return i.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestPathArgs) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathOutput).ToDatasetCreateRequestPathPtrOutputWithContext(ctx)
}

// DatasetCreateRequestPathPtrInput is an input type that accepts DatasetCreateRequestPathArgs, DatasetCreateRequestPathPtr and DatasetCreateRequestPathPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestPathPtrInput` via:
//
//	        DatasetCreateRequestPathArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestPathPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput
	ToDatasetCreateRequestPathPtrOutputWithContext(context.Context) DatasetCreateRequestPathPtrOutput
}

type datasetCreateRequestPathPtrType DatasetCreateRequestPathArgs

func DatasetCreateRequestPathPtr(v *DatasetCreateRequestPathArgs) DatasetCreateRequestPathPtrInput {
	return (*datasetCreateRequestPathPtrType)(v)
}

func (*datasetCreateRequestPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestPath)(nil)).Elem()
}

func (i *datasetCreateRequestPathPtrType) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return i.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestPathPtrType) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestPathPtrOutput)
}

type DatasetCreateRequestPathOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestPath)(nil)).Elem()
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathOutput() DatasetCreateRequestPathOutput {
	return o
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathOutputWithContext(ctx context.Context) DatasetCreateRequestPathOutput {
	return o
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return o.ToDatasetCreateRequestPathPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestPathOutput) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestPath) *DatasetCreateRequestPath {
		return &v
	}).(DatasetCreateRequestPathPtrOutput)
}

func (o DatasetCreateRequestPathOutput) DataPath() DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestPath) *DatasetCreateRequestDataPath { return v.DataPath }).(DatasetCreateRequestDataPathPtrOutput)
}

// The Http URL.
func (o DatasetCreateRequestPathOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestPath) *string { return v.HttpUrl }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestPath)(nil)).Elem()
}

func (o DatasetCreateRequestPathPtrOutput) ToDatasetCreateRequestPathPtrOutput() DatasetCreateRequestPathPtrOutput {
	return o
}

func (o DatasetCreateRequestPathPtrOutput) ToDatasetCreateRequestPathPtrOutputWithContext(ctx context.Context) DatasetCreateRequestPathPtrOutput {
	return o
}

func (o DatasetCreateRequestPathPtrOutput) Elem() DatasetCreateRequestPathOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) DatasetCreateRequestPath {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestPath
		return ret
	}).(DatasetCreateRequestPathOutput)
}

func (o DatasetCreateRequestPathPtrOutput) DataPath() DatasetCreateRequestDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) *DatasetCreateRequestDataPath {
		if v == nil {
			return nil
		}
		return v.DataPath
	}).(DatasetCreateRequestDataPathPtrOutput)
}

// The Http URL.
func (o DatasetCreateRequestPathPtrOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestPath) *string {
		if v == nil {
			return nil
		}
		return v.HttpUrl
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestQuery struct {
	// The SQL/PostgreSQL/MySQL datastore name.
	DatastoreName *string `pulumi:"datastoreName"`
	// SQL Quey.
	Query *string `pulumi:"query"`
}

// DatasetCreateRequestQueryInput is an input type that accepts DatasetCreateRequestQueryArgs and DatasetCreateRequestQueryOutput values.
// You can construct a concrete instance of `DatasetCreateRequestQueryInput` via:
//
//	DatasetCreateRequestQueryArgs{...}
type DatasetCreateRequestQueryInput interface {
	pulumi.Input

	ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput
	ToDatasetCreateRequestQueryOutputWithContext(context.Context) DatasetCreateRequestQueryOutput
}

type DatasetCreateRequestQueryArgs struct {
	// The SQL/PostgreSQL/MySQL datastore name.
	DatastoreName pulumi.StringPtrInput `pulumi:"datastoreName"`
	// SQL Quey.
	Query pulumi.StringPtrInput `pulumi:"query"`
}

func (DatasetCreateRequestQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestQuery)(nil)).Elem()
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput {
	return i.ToDatasetCreateRequestQueryOutputWithContext(context.Background())
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryOutputWithContext(ctx context.Context) DatasetCreateRequestQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryOutput)
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return i.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestQueryArgs) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryOutput).ToDatasetCreateRequestQueryPtrOutputWithContext(ctx)
}

// DatasetCreateRequestQueryPtrInput is an input type that accepts DatasetCreateRequestQueryArgs, DatasetCreateRequestQueryPtr and DatasetCreateRequestQueryPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestQueryPtrInput` via:
//
//	        DatasetCreateRequestQueryArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestQueryPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput
	ToDatasetCreateRequestQueryPtrOutputWithContext(context.Context) DatasetCreateRequestQueryPtrOutput
}

type datasetCreateRequestQueryPtrType DatasetCreateRequestQueryArgs

func DatasetCreateRequestQueryPtr(v *DatasetCreateRequestQueryArgs) DatasetCreateRequestQueryPtrInput {
	return (*datasetCreateRequestQueryPtrType)(v)
}

func (*datasetCreateRequestQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestQuery)(nil)).Elem()
}

func (i *datasetCreateRequestQueryPtrType) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return i.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestQueryPtrType) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestQueryPtrOutput)
}

type DatasetCreateRequestQueryOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestQuery)(nil)).Elem()
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryOutput() DatasetCreateRequestQueryOutput {
	return o
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryOutputWithContext(ctx context.Context) DatasetCreateRequestQueryOutput {
	return o
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return o.ToDatasetCreateRequestQueryPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestQueryOutput) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestQuery) *DatasetCreateRequestQuery {
		return &v
	}).(DatasetCreateRequestQueryPtrOutput)
}

// The SQL/PostgreSQL/MySQL datastore name.
func (o DatasetCreateRequestQueryOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestQuery) *string { return v.DatastoreName }).(pulumi.StringPtrOutput)
}

// SQL Quey.
func (o DatasetCreateRequestQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestQueryPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestQuery)(nil)).Elem()
}

func (o DatasetCreateRequestQueryPtrOutput) ToDatasetCreateRequestQueryPtrOutput() DatasetCreateRequestQueryPtrOutput {
	return o
}

func (o DatasetCreateRequestQueryPtrOutput) ToDatasetCreateRequestQueryPtrOutputWithContext(ctx context.Context) DatasetCreateRequestQueryPtrOutput {
	return o
}

func (o DatasetCreateRequestQueryPtrOutput) Elem() DatasetCreateRequestQueryOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) DatasetCreateRequestQuery {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestQuery
		return ret
	}).(DatasetCreateRequestQueryOutput)
}

// The SQL/PostgreSQL/MySQL datastore name.
func (o DatasetCreateRequestQueryPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// SQL Quey.
func (o DatasetCreateRequestQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestQuery) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestRegistration struct {
	// The description for the dataset.
	Description *string `pulumi:"description"`
	// The name of the dataset.
	Name *string `pulumi:"name"`
	// Tags associated with the dataset.
	Tags map[string]string `pulumi:"tags"`
}

// DatasetCreateRequestRegistrationInput is an input type that accepts DatasetCreateRequestRegistrationArgs and DatasetCreateRequestRegistrationOutput values.
// You can construct a concrete instance of `DatasetCreateRequestRegistrationInput` via:
//
//	DatasetCreateRequestRegistrationArgs{...}
type DatasetCreateRequestRegistrationInput interface {
	pulumi.Input

	ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput
	ToDatasetCreateRequestRegistrationOutputWithContext(context.Context) DatasetCreateRequestRegistrationOutput
}

type DatasetCreateRequestRegistrationArgs struct {
	// The description for the dataset.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The name of the dataset.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Tags associated with the dataset.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (DatasetCreateRequestRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestRegistration)(nil)).Elem()
}

func (i DatasetCreateRequestRegistrationArgs) ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput {
	return i.ToDatasetCreateRequestRegistrationOutputWithContext(context.Background())
}

func (i DatasetCreateRequestRegistrationArgs) ToDatasetCreateRequestRegistrationOutputWithContext(ctx context.Context) DatasetCreateRequestRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestRegistrationOutput)
}

type DatasetCreateRequestRegistrationOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestRegistration)(nil)).Elem()
}

func (o DatasetCreateRequestRegistrationOutput) ToDatasetCreateRequestRegistrationOutput() DatasetCreateRequestRegistrationOutput {
	return o
}

func (o DatasetCreateRequestRegistrationOutput) ToDatasetCreateRequestRegistrationOutputWithContext(ctx context.Context) DatasetCreateRequestRegistrationOutput {
	return o
}

// The description for the dataset.
func (o DatasetCreateRequestRegistrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the dataset.
func (o DatasetCreateRequestRegistrationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags associated with the dataset.
func (o DatasetCreateRequestRegistrationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetCreateRequestRegistration) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DatasetCreateRequestTimeSeries struct {
	// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
	CoarseGrainTimestamp *string `pulumi:"coarseGrainTimestamp"`
	//  Column name to be used as FineGrainTimestamp
	FineGrainTimestamp *string `pulumi:"fineGrainTimestamp"`
}

// DatasetCreateRequestTimeSeriesInput is an input type that accepts DatasetCreateRequestTimeSeriesArgs and DatasetCreateRequestTimeSeriesOutput values.
// You can construct a concrete instance of `DatasetCreateRequestTimeSeriesInput` via:
//
//	DatasetCreateRequestTimeSeriesArgs{...}
type DatasetCreateRequestTimeSeriesInput interface {
	pulumi.Input

	ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput
	ToDatasetCreateRequestTimeSeriesOutputWithContext(context.Context) DatasetCreateRequestTimeSeriesOutput
}

type DatasetCreateRequestTimeSeriesArgs struct {
	// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
	CoarseGrainTimestamp pulumi.StringPtrInput `pulumi:"coarseGrainTimestamp"`
	//  Column name to be used as FineGrainTimestamp
	FineGrainTimestamp pulumi.StringPtrInput `pulumi:"fineGrainTimestamp"`
}

func (DatasetCreateRequestTimeSeriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput {
	return i.ToDatasetCreateRequestTimeSeriesOutputWithContext(context.Background())
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesOutput)
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return i.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (i DatasetCreateRequestTimeSeriesArgs) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesOutput).ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx)
}

// DatasetCreateRequestTimeSeriesPtrInput is an input type that accepts DatasetCreateRequestTimeSeriesArgs, DatasetCreateRequestTimeSeriesPtr and DatasetCreateRequestTimeSeriesPtrOutput values.
// You can construct a concrete instance of `DatasetCreateRequestTimeSeriesPtrInput` via:
//
//	        DatasetCreateRequestTimeSeriesArgs{...}
//
//	or:
//
//	        nil
type DatasetCreateRequestTimeSeriesPtrInput interface {
	pulumi.Input

	ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput
	ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Context) DatasetCreateRequestTimeSeriesPtrOutput
}

type datasetCreateRequestTimeSeriesPtrType DatasetCreateRequestTimeSeriesArgs

func DatasetCreateRequestTimeSeriesPtr(v *DatasetCreateRequestTimeSeriesArgs) DatasetCreateRequestTimeSeriesPtrInput {
	return (*datasetCreateRequestTimeSeriesPtrType)(v)
}

func (*datasetCreateRequestTimeSeriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (i *datasetCreateRequestTimeSeriesPtrType) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return i.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (i *datasetCreateRequestTimeSeriesPtrType) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetCreateRequestTimeSeriesPtrOutput)
}

type DatasetCreateRequestTimeSeriesOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestTimeSeriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesOutput() DatasetCreateRequestTimeSeriesOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return o.ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(context.Background())
}

func (o DatasetCreateRequestTimeSeriesOutput) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetCreateRequestTimeSeries) *DatasetCreateRequestTimeSeries {
		return &v
	}).(DatasetCreateRequestTimeSeriesPtrOutput)
}

// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
func (o DatasetCreateRequestTimeSeriesOutput) CoarseGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestTimeSeries) *string { return v.CoarseGrainTimestamp }).(pulumi.StringPtrOutput)
}

// Column name to be used as FineGrainTimestamp
func (o DatasetCreateRequestTimeSeriesOutput) FineGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetCreateRequestTimeSeries) *string { return v.FineGrainTimestamp }).(pulumi.StringPtrOutput)
}

type DatasetCreateRequestTimeSeriesPtrOutput struct{ *pulumi.OutputState }

func (DatasetCreateRequestTimeSeriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetCreateRequestTimeSeries)(nil)).Elem()
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) ToDatasetCreateRequestTimeSeriesPtrOutput() DatasetCreateRequestTimeSeriesPtrOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) ToDatasetCreateRequestTimeSeriesPtrOutputWithContext(ctx context.Context) DatasetCreateRequestTimeSeriesPtrOutput {
	return o
}

func (o DatasetCreateRequestTimeSeriesPtrOutput) Elem() DatasetCreateRequestTimeSeriesOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) DatasetCreateRequestTimeSeries {
		if v != nil {
			return *v
		}
		var ret DatasetCreateRequestTimeSeries
		return ret
	}).(DatasetCreateRequestTimeSeriesOutput)
}

// Column name to be used as CoarseGrainTimestamp. Can only be used if 'fineGrainTimestamp' is specified and cannot be same as 'fineGrainTimestamp'.
func (o DatasetCreateRequestTimeSeriesPtrOutput) CoarseGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) *string {
		if v == nil {
			return nil
		}
		return v.CoarseGrainTimestamp
	}).(pulumi.StringPtrOutput)
}

// Column name to be used as FineGrainTimestamp
func (o DatasetCreateRequestTimeSeriesPtrOutput) FineGrainTimestamp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetCreateRequestTimeSeries) *string {
		if v == nil {
			return nil
		}
		return v.FineGrainTimestamp
	}).(pulumi.StringPtrOutput)
}

// Machine Learning dataset object.
type DatasetResponse struct {
	// The dataset creation time (UTC).
	CreatedTime string `pulumi:"createdTime"`
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Dataset state
	DatasetState *DatasetStateResponse `pulumi:"datasetState"`
	// Dataset Type.
	DatasetType string `pulumi:"datasetType"`
	// Name of the default compute to be used for any Dataset actions (such as Profile, Write).
	DefaultCompute string `pulumi:"defaultCompute"`
	// Description about this dataset version.
	Description string `pulumi:"description"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Flag to hide Dataset in UI
	IsVisible bool `pulumi:"isVisible"`
	// Last created Dataset definition.
	Latest *DatasetResponseLatest `pulumi:"latest"`
	// The dataset last modified time (UTC).
	ModifiedTime string `pulumi:"modifiedTime"`
	// Unique dataset name
	Name string `pulumi:"name"`
	// Tags for this dataset version.
	Tags map[string]string `pulumi:"tags"`
}

// Machine Learning dataset object.
type DatasetResponseOutput struct{ *pulumi.OutputState }

func (DatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponse)(nil)).Elem()
}

func (o DatasetResponseOutput) ToDatasetResponseOutput() DatasetResponseOutput {
	return o
}

func (o DatasetResponseOutput) ToDatasetResponseOutputWithContext(ctx context.Context) DatasetResponseOutput {
	return o
}

// The dataset creation time (UTC).
func (o DatasetResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetResponseOutput) DatasetState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetStateResponse { return v.DatasetState }).(DatasetStateResponsePtrOutput)
}

// Dataset Type.
func (o DatasetResponseOutput) DatasetType() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DatasetType }).(pulumi.StringOutput)
}

// Name of the default compute to be used for any Dataset actions (such as Profile, Write).
func (o DatasetResponseOutput) DefaultCompute() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.DefaultCompute }).(pulumi.StringOutput)
}

// Description about this dataset version.
func (o DatasetResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Description }).(pulumi.StringOutput)
}

// eTag description
func (o DatasetResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Flag to hide Dataset in UI
func (o DatasetResponseOutput) IsVisible() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponse) bool { return v.IsVisible }).(pulumi.BoolOutput)
}

// Last created Dataset definition.
func (o DatasetResponseOutput) Latest() DatasetResponseLatestPtrOutput {
	return o.ApplyT(func(v DatasetResponse) *DatasetResponseLatest { return v.Latest }).(DatasetResponseLatestPtrOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Unique dataset name
func (o DatasetResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Tags for this dataset version.
func (o DatasetResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
type DatasetResponseDataPath struct {
	// Additional Properties.
	AdditionalProperties map[string]interface{} `pulumi:"additionalProperties"`
	// Azure path for Azure Blob or File
	AzureFilePath string `pulumi:"azureFilePath"`
	// Data store Name
	DatastoreName string `pulumi:"datastoreName"`
	// HTTP URL.
	HttpUrl string `pulumi:"httpUrl"`
	// Specify the partition format of path. Defaults to None.
	PartitionFormat string `pulumi:"partitionFormat"`
	// Whether or not to ignore unmatched path.
	PartitionFormatIgnoreError bool `pulumi:"partitionFormatIgnoreError"`
	// List of files expanded from a file GLOB specified
	Paths []string `pulumi:"paths"`
	// Relative path in the data store
	RelativePath string `pulumi:"relativePath"`
	// Sql Query/Table/Stored Procedure details.
	SqlDataPath *DatasetResponseSqlDataPath `pulumi:"sqlDataPath"`
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
type DatasetResponseDataPathOutput struct{ *pulumi.OutputState }

func (DatasetResponseDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseDataPath)(nil)).Elem()
}

func (o DatasetResponseDataPathOutput) ToDatasetResponseDataPathOutput() DatasetResponseDataPathOutput {
	return o
}

func (o DatasetResponseDataPathOutput) ToDatasetResponseDataPathOutputWithContext(ctx context.Context) DatasetResponseDataPathOutput {
	return o
}

// Additional Properties.
func (o DatasetResponseDataPathOutput) AdditionalProperties() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) map[string]interface{} { return v.AdditionalProperties }).(pulumi.MapOutput)
}

// Azure path for Azure Blob or File
func (o DatasetResponseDataPathOutput) AzureFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.AzureFilePath }).(pulumi.StringOutput)
}

// Data store Name
func (o DatasetResponseDataPathOutput) DatastoreName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.DatastoreName }).(pulumi.StringOutput)
}

// HTTP URL.
func (o DatasetResponseDataPathOutput) HttpUrl() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.HttpUrl }).(pulumi.StringOutput)
}

// Specify the partition format of path. Defaults to None.
func (o DatasetResponseDataPathOutput) PartitionFormat() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.PartitionFormat }).(pulumi.StringOutput)
}

// Whether or not to ignore unmatched path.
func (o DatasetResponseDataPathOutput) PartitionFormatIgnoreError() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) bool { return v.PartitionFormatIgnoreError }).(pulumi.BoolOutput)
}

// List of files expanded from a file GLOB specified
func (o DatasetResponseDataPathOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Relative path in the data store
func (o DatasetResponseDataPathOutput) RelativePath() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) string { return v.RelativePath }).(pulumi.StringOutput)
}

// Sql Query/Table/Stored Procedure details.
func (o DatasetResponseDataPathOutput) SqlDataPath() DatasetResponseSqlDataPathPtrOutput {
	return o.ApplyT(func(v DatasetResponseDataPath) *DatasetResponseSqlDataPath { return v.SqlDataPath }).(DatasetResponseSqlDataPathPtrOutput)
}

type DatasetResponseDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseDataPath)(nil)).Elem()
}

func (o DatasetResponseDataPathPtrOutput) ToDatasetResponseDataPathPtrOutput() DatasetResponseDataPathPtrOutput {
	return o
}

func (o DatasetResponseDataPathPtrOutput) ToDatasetResponseDataPathPtrOutputWithContext(ctx context.Context) DatasetResponseDataPathPtrOutput {
	return o
}

func (o DatasetResponseDataPathPtrOutput) Elem() DatasetResponseDataPathOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) DatasetResponseDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetResponseDataPath
		return ret
	}).(DatasetResponseDataPathOutput)
}

// Additional Properties.
func (o DatasetResponseDataPathPtrOutput) AdditionalProperties() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AdditionalProperties
	}).(pulumi.MapOutput)
}

// Azure path for Azure Blob or File
func (o DatasetResponseDataPathPtrOutput) AzureFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.AzureFilePath
	}).(pulumi.StringPtrOutput)
}

// Data store Name
func (o DatasetResponseDataPathPtrOutput) DatastoreName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.DatastoreName
	}).(pulumi.StringPtrOutput)
}

// HTTP URL.
func (o DatasetResponseDataPathPtrOutput) HttpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.HttpUrl
	}).(pulumi.StringPtrOutput)
}

// Specify the partition format of path. Defaults to None.
func (o DatasetResponseDataPathPtrOutput) PartitionFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.PartitionFormat
	}).(pulumi.StringPtrOutput)
}

// Whether or not to ignore unmatched path.
func (o DatasetResponseDataPathPtrOutput) PartitionFormatIgnoreError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *bool {
		if v == nil {
			return nil
		}
		return &v.PartitionFormatIgnoreError
	}).(pulumi.BoolPtrOutput)
}

// List of files expanded from a file GLOB specified
func (o DatasetResponseDataPathPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Relative path in the data store
func (o DatasetResponseDataPathPtrOutput) RelativePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.RelativePath
	}).(pulumi.StringPtrOutput)
}

// Sql Query/Table/Stored Procedure details.
func (o DatasetResponseDataPathPtrOutput) SqlDataPath() DatasetResponseSqlDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetResponseDataPath) *DatasetResponseSqlDataPath {
		if v == nil {
			return nil
		}
		return v.SqlDataPath
	}).(DatasetResponseSqlDataPathPtrOutput)
}

// Last created Dataset definition.
type DatasetResponseLatest struct {
	// User who created.
	CreatedBy *UserInfoResponse `pulumi:"createdBy"`
	// The dataset creation time (UTC).
	CreatedTime string `pulumi:"createdTime"`
	//  Datastore and reference to location of data such as relativePath, Sql Query and etc.
	DataPath *DatasetResponseDataPath `pulumi:"dataPath"`
	// Dataflow Json
	Dataflow string `pulumi:"dataflow"`
	// Dataset state
	DatasetDefinitionState *DatasetStateResponse `pulumi:"datasetDefinitionState"`
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Description about the dataset.
	Description string `pulumi:"description"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Dataset FileType, specified by user.
	FileType string `pulumi:"fileType"`
	// The dataset last modified time (UTC).
	ModifiedTime string `pulumi:"modifiedTime"`
	// Summary of Definition changes.
	Notes string `pulumi:"notes"`
	// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
	PartitionFormatInPath bool `pulumi:"partitionFormatInPath"`
	// Properties stores information like name of time series column for time series dataset.
	Properties map[string]interface{} `pulumi:"properties"`
	// Indicates the saved dataset this definition is mapping to, populated on Get.
	SavedDatasetId string `pulumi:"savedDatasetId"`
	// Tags associated with the dataset.
	Tags map[string]string `pulumi:"tags"`
	//  Telemetry information about the dataset including information like which service the dataset was created from.
	TelemetryInfo map[string]string `pulumi:"telemetryInfo"`
	//  Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
	UseDescriptionTagsFromDefinition bool `pulumi:"useDescriptionTagsFromDefinition"`
	// An identifier uniquely identifies a definition change.
	VersionId string `pulumi:"versionId"`
}

// Last created Dataset definition.
type DatasetResponseLatestOutput struct{ *pulumi.OutputState }

func (DatasetResponseLatestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseLatest)(nil)).Elem()
}

func (o DatasetResponseLatestOutput) ToDatasetResponseLatestOutput() DatasetResponseLatestOutput {
	return o
}

func (o DatasetResponseLatestOutput) ToDatasetResponseLatestOutputWithContext(ctx context.Context) DatasetResponseLatestOutput {
	return o
}

// User who created.
func (o DatasetResponseLatestOutput) CreatedBy() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *UserInfoResponse { return v.CreatedBy }).(UserInfoResponsePtrOutput)
}

// The dataset creation time (UTC).
func (o DatasetResponseLatestOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
func (o DatasetResponseLatestOutput) DataPath() DatasetResponseDataPathPtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *DatasetResponseDataPath { return v.DataPath }).(DatasetResponseDataPathPtrOutput)
}

// Dataflow Json
func (o DatasetResponseLatestOutput) Dataflow() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Dataflow }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetResponseLatestOutput) DatasetDefinitionState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v DatasetResponseLatest) *DatasetStateResponse { return v.DatasetDefinitionState }).(DatasetStateResponsePtrOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseLatestOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Description about the dataset.
func (o DatasetResponseLatestOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Description }).(pulumi.StringOutput)
}

// eTag description
func (o DatasetResponseLatestOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Etag }).(pulumi.StringOutput)
}

// Dataset FileType, specified by user.
func (o DatasetResponseLatestOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.FileType }).(pulumi.StringOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseLatestOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Summary of Definition changes.
func (o DatasetResponseLatestOutput) Notes() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.Notes }).(pulumi.StringOutput)
}

// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
func (o DatasetResponseLatestOutput) PartitionFormatInPath() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseLatest) bool { return v.PartitionFormatInPath }).(pulumi.BoolOutput)
}

// Properties stores information like name of time series column for time series dataset.
func (o DatasetResponseLatestOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Indicates the saved dataset this definition is mapping to, populated on Get.
func (o DatasetResponseLatestOutput) SavedDatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.SavedDatasetId }).(pulumi.StringOutput)
}

// Tags associated with the dataset.
func (o DatasetResponseLatestOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Telemetry information about the dataset including information like which service the dataset was created from.
func (o DatasetResponseLatestOutput) TelemetryInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatasetResponseLatest) map[string]string { return v.TelemetryInfo }).(pulumi.StringMapOutput)
}

// Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
func (o DatasetResponseLatestOutput) UseDescriptionTagsFromDefinition() pulumi.BoolOutput {
	return o.ApplyT(func(v DatasetResponseLatest) bool { return v.UseDescriptionTagsFromDefinition }).(pulumi.BoolOutput)
}

// An identifier uniquely identifies a definition change.
func (o DatasetResponseLatestOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseLatest) string { return v.VersionId }).(pulumi.StringOutput)
}

type DatasetResponseLatestPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseLatestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseLatest)(nil)).Elem()
}

func (o DatasetResponseLatestPtrOutput) ToDatasetResponseLatestPtrOutput() DatasetResponseLatestPtrOutput {
	return o
}

func (o DatasetResponseLatestPtrOutput) ToDatasetResponseLatestPtrOutputWithContext(ctx context.Context) DatasetResponseLatestPtrOutput {
	return o
}

func (o DatasetResponseLatestPtrOutput) Elem() DatasetResponseLatestOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) DatasetResponseLatest {
		if v != nil {
			return *v
		}
		var ret DatasetResponseLatest
		return ret
	}).(DatasetResponseLatestOutput)
}

// User who created.
func (o DatasetResponseLatestPtrOutput) CreatedBy() UserInfoResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *UserInfoResponse {
		if v == nil {
			return nil
		}
		return v.CreatedBy
	}).(UserInfoResponsePtrOutput)
}

// The dataset creation time (UTC).
func (o DatasetResponseLatestPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// Datastore and reference to location of data such as relativePath, Sql Query and etc.
func (o DatasetResponseLatestPtrOutput) DataPath() DatasetResponseDataPathPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *DatasetResponseDataPath {
		if v == nil {
			return nil
		}
		return v.DataPath
	}).(DatasetResponseDataPathPtrOutput)
}

// Dataflow Json
func (o DatasetResponseLatestPtrOutput) Dataflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Dataflow
	}).(pulumi.StringPtrOutput)
}

// Dataset state
func (o DatasetResponseLatestPtrOutput) DatasetDefinitionState() DatasetStateResponsePtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *DatasetStateResponse {
		if v == nil {
			return nil
		}
		return v.DatasetDefinitionState
	}).(DatasetStateResponsePtrOutput)
}

// Unique Dataset identifier.
func (o DatasetResponseLatestPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Description about the dataset.
func (o DatasetResponseLatestPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// eTag description
func (o DatasetResponseLatestPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Dataset FileType, specified by user.
func (o DatasetResponseLatestPtrOutput) FileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.FileType
	}).(pulumi.StringPtrOutput)
}

// The dataset last modified time (UTC).
func (o DatasetResponseLatestPtrOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.ModifiedTime
	}).(pulumi.StringPtrOutput)
}

// Summary of Definition changes.
func (o DatasetResponseLatestPtrOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.Notes
	}).(pulumi.StringPtrOutput)
}

// Indicates how the source data is partitioned. This is defined to filter on a range of partitioned data before performing actions or materialization.
func (o DatasetResponseLatestPtrOutput) PartitionFormatInPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *bool {
		if v == nil {
			return nil
		}
		return &v.PartitionFormatInPath
	}).(pulumi.BoolPtrOutput)
}

// Properties stores information like name of time series column for time series dataset.
func (o DatasetResponseLatestPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Indicates the saved dataset this definition is mapping to, populated on Get.
func (o DatasetResponseLatestPtrOutput) SavedDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.SavedDatasetId
	}).(pulumi.StringPtrOutput)
}

// Tags associated with the dataset.
func (o DatasetResponseLatestPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// Telemetry information about the dataset including information like which service the dataset was created from.
func (o DatasetResponseLatestPtrOutput) TelemetryInfo() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) map[string]string {
		if v == nil {
			return nil
		}
		return v.TelemetryInfo
	}).(pulumi.StringMapOutput)
}

// Whether to use description and tags from the definition level as opposed to dataset level (old behavior).
func (o DatasetResponseLatestPtrOutput) UseDescriptionTagsFromDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *bool {
		if v == nil {
			return nil
		}
		return &v.UseDescriptionTagsFromDefinition
	}).(pulumi.BoolPtrOutput)
}

// An identifier uniquely identifies a definition change.
func (o DatasetResponseLatestPtrOutput) VersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseLatest) *string {
		if v == nil {
			return nil
		}
		return &v.VersionId
	}).(pulumi.StringPtrOutput)
}

// Sql Query/Table/Stored Procedure details.
type DatasetResponseSqlDataPath struct {
	// SQL query timeout. Unit in seconds.
	QueryTimeout float64 `pulumi:"queryTimeout"`
	// SQL query
	SqlQuery string `pulumi:"sqlQuery"`
	// SQL storedProcedure name
	SqlStoredProcedureName string `pulumi:"sqlStoredProcedureName"`
	// SQL table name
	SqlTableName string `pulumi:"sqlTableName"`
}

// Sql Query/Table/Stored Procedure details.
type DatasetResponseSqlDataPathOutput struct{ *pulumi.OutputState }

func (DatasetResponseSqlDataPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetResponseSqlDataPath)(nil)).Elem()
}

func (o DatasetResponseSqlDataPathOutput) ToDatasetResponseSqlDataPathOutput() DatasetResponseSqlDataPathOutput {
	return o
}

func (o DatasetResponseSqlDataPathOutput) ToDatasetResponseSqlDataPathOutputWithContext(ctx context.Context) DatasetResponseSqlDataPathOutput {
	return o
}

// SQL query timeout. Unit in seconds.
func (o DatasetResponseSqlDataPathOutput) QueryTimeout() pulumi.Float64Output {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) float64 { return v.QueryTimeout }).(pulumi.Float64Output)
}

// SQL query
func (o DatasetResponseSqlDataPathOutput) SqlQuery() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlQuery }).(pulumi.StringOutput)
}

// SQL storedProcedure name
func (o DatasetResponseSqlDataPathOutput) SqlStoredProcedureName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlStoredProcedureName }).(pulumi.StringOutput)
}

// SQL table name
func (o DatasetResponseSqlDataPathOutput) SqlTableName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetResponseSqlDataPath) string { return v.SqlTableName }).(pulumi.StringOutput)
}

type DatasetResponseSqlDataPathPtrOutput struct{ *pulumi.OutputState }

func (DatasetResponseSqlDataPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetResponseSqlDataPath)(nil)).Elem()
}

func (o DatasetResponseSqlDataPathPtrOutput) ToDatasetResponseSqlDataPathPtrOutput() DatasetResponseSqlDataPathPtrOutput {
	return o
}

func (o DatasetResponseSqlDataPathPtrOutput) ToDatasetResponseSqlDataPathPtrOutputWithContext(ctx context.Context) DatasetResponseSqlDataPathPtrOutput {
	return o
}

func (o DatasetResponseSqlDataPathPtrOutput) Elem() DatasetResponseSqlDataPathOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) DatasetResponseSqlDataPath {
		if v != nil {
			return *v
		}
		var ret DatasetResponseSqlDataPath
		return ret
	}).(DatasetResponseSqlDataPathOutput)
}

// SQL query timeout. Unit in seconds.
func (o DatasetResponseSqlDataPathPtrOutput) QueryTimeout() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *float64 {
		if v == nil {
			return nil
		}
		return &v.QueryTimeout
	}).(pulumi.Float64PtrOutput)
}

// SQL query
func (o DatasetResponseSqlDataPathPtrOutput) SqlQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlQuery
	}).(pulumi.StringPtrOutput)
}

// SQL storedProcedure name
func (o DatasetResponseSqlDataPathPtrOutput) SqlStoredProcedureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlStoredProcedureName
	}).(pulumi.StringPtrOutput)
}

// SQL table name
func (o DatasetResponseSqlDataPathPtrOutput) SqlTableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetResponseSqlDataPath) *string {
		if v == nil {
			return nil
		}
		return &v.SqlTableName
	}).(pulumi.StringPtrOutput)
}

// Dataset state
type DatasetStateResponse struct {
	// Reference to better Dataset or a Definition
	DeprecatedBy *DatasetStateResponseDeprecatedBy `pulumi:"deprecatedBy"`
	// eTag description
	Etag string `pulumi:"etag"`
	// Dataset state
	State *string `pulumi:"state"`
}

// Dataset state
type DatasetStateResponseOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetStateResponse)(nil)).Elem()
}

func (o DatasetStateResponseOutput) ToDatasetStateResponseOutput() DatasetStateResponseOutput {
	return o
}

func (o DatasetStateResponseOutput) ToDatasetStateResponseOutputWithContext(ctx context.Context) DatasetStateResponseOutput {
	return o
}

// Reference to better Dataset or a Definition
func (o DatasetStateResponseOutput) DeprecatedBy() DatasetStateResponseDeprecatedByPtrOutput {
	return o.ApplyT(func(v DatasetStateResponse) *DatasetStateResponseDeprecatedBy { return v.DeprecatedBy }).(DatasetStateResponseDeprecatedByPtrOutput)
}

// eTag description
func (o DatasetStateResponseOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetStateResponse) string { return v.Etag }).(pulumi.StringOutput)
}

// Dataset state
func (o DatasetStateResponseOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetStateResponse) *string { return v.State }).(pulumi.StringPtrOutput)
}

type DatasetStateResponsePtrOutput struct{ *pulumi.OutputState }

func (DatasetStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetStateResponse)(nil)).Elem()
}

func (o DatasetStateResponsePtrOutput) ToDatasetStateResponsePtrOutput() DatasetStateResponsePtrOutput {
	return o
}

func (o DatasetStateResponsePtrOutput) ToDatasetStateResponsePtrOutputWithContext(ctx context.Context) DatasetStateResponsePtrOutput {
	return o
}

func (o DatasetStateResponsePtrOutput) Elem() DatasetStateResponseOutput {
	return o.ApplyT(func(v *DatasetStateResponse) DatasetStateResponse {
		if v != nil {
			return *v
		}
		var ret DatasetStateResponse
		return ret
	}).(DatasetStateResponseOutput)
}

// Reference to better Dataset or a Definition
func (o DatasetStateResponsePtrOutput) DeprecatedBy() DatasetStateResponseDeprecatedByPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *DatasetStateResponseDeprecatedBy {
		if v == nil {
			return nil
		}
		return v.DeprecatedBy
	}).(DatasetStateResponseDeprecatedByPtrOutput)
}

// eTag description
func (o DatasetStateResponsePtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Etag
	}).(pulumi.StringPtrOutput)
}

// Dataset state
func (o DatasetStateResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// Reference to better Dataset or a Definition
type DatasetStateResponseDeprecatedBy struct {
	// Unique Dataset identifier.
	DatasetId string `pulumi:"datasetId"`
	// Definition Version
	DefinitionVersion *string `pulumi:"definitionVersion"`
}

// Reference to better Dataset or a Definition
type DatasetStateResponseDeprecatedByOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseDeprecatedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetStateResponseDeprecatedBy)(nil)).Elem()
}

func (o DatasetStateResponseDeprecatedByOutput) ToDatasetStateResponseDeprecatedByOutput() DatasetStateResponseDeprecatedByOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByOutput) ToDatasetStateResponseDeprecatedByOutputWithContext(ctx context.Context) DatasetStateResponseDeprecatedByOutput {
	return o
}

// Unique Dataset identifier.
func (o DatasetStateResponseDeprecatedByOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetStateResponseDeprecatedBy) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Definition Version
func (o DatasetStateResponseDeprecatedByOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetStateResponseDeprecatedBy) *string { return v.DefinitionVersion }).(pulumi.StringPtrOutput)
}

type DatasetStateResponseDeprecatedByPtrOutput struct{ *pulumi.OutputState }

func (DatasetStateResponseDeprecatedByPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetStateResponseDeprecatedBy)(nil)).Elem()
}

func (o DatasetStateResponseDeprecatedByPtrOutput) ToDatasetStateResponseDeprecatedByPtrOutput() DatasetStateResponseDeprecatedByPtrOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByPtrOutput) ToDatasetStateResponseDeprecatedByPtrOutputWithContext(ctx context.Context) DatasetStateResponseDeprecatedByPtrOutput {
	return o
}

func (o DatasetStateResponseDeprecatedByPtrOutput) Elem() DatasetStateResponseDeprecatedByOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) DatasetStateResponseDeprecatedBy {
		if v != nil {
			return *v
		}
		var ret DatasetStateResponseDeprecatedBy
		return ret
	}).(DatasetStateResponseDeprecatedByOutput)
}

// Unique Dataset identifier.
func (o DatasetStateResponseDeprecatedByPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Definition Version
func (o DatasetStateResponseDeprecatedByPtrOutput) DefinitionVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetStateResponseDeprecatedBy) *string {
		if v == nil {
			return nil
		}
		return v.DefinitionVersion
	}).(pulumi.StringPtrOutput)
}

// Machine Learning datastore object.
type DatastoreResponse struct {
	AzureDataLakeSection    *AzureDataLakeSectionResponse    `pulumi:"azureDataLakeSection"`
	AzureMySqlSection       *AzureMySqlSectionResponse       `pulumi:"azureMySqlSection"`
	AzurePostgreSqlSection  *AzurePostgreSqlSectionResponse  `pulumi:"azurePostgreSqlSection"`
	AzureSqlDatabaseSection *AzureSqlDatabaseSectionResponse `pulumi:"azureSqlDatabaseSection"`
	AzureStorageSection     *AzureStorageSectionResponse     `pulumi:"azureStorageSection"`
	// The User who created the datastore.
	CreatedBy UserInfoResponse `pulumi:"createdBy"`
	// The date and time when the datastore was created.
	CreatedTime string `pulumi:"createdTime"`
	// The datastore type.
	DataStoreType *string `pulumi:"dataStoreType"`
	// Description of the datastore.
	Description *string `pulumi:"description"`
	// Data specific to GlusterFS.
	GlusterFsSection *GlusterFsSectionResponse `pulumi:"glusterFsSection"`
	// A read only property that denotes whether the service datastore has been validated with credentials.
	HasBeenValidated *bool `pulumi:"hasBeenValidated"`
	// Info about origin if it is linked.
	LinkedInfo *LinkedInfoResponse `pulumi:"linkedInfo"`
	// The User who modified the datastore.
	ModifiedBy UserInfoResponse `pulumi:"modifiedBy"`
	// The date and time when the datastore was last modified.
	ModifiedTime string `pulumi:"modifiedTime"`
	// Name of the datastore.
	Name *string `pulumi:"name"`
	// Tags for this datastore.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DatastoreResponse
func (val *DatastoreResponse) Defaults() *DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.HasBeenValidated == nil {
		hasBeenValidated_ := false
		tmp.HasBeenValidated = &hasBeenValidated_
	}
	return &tmp
}

// Machine Learning datastore object.
type DatastoreResponseOutput struct{ *pulumi.OutputState }

func (DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreResponse)(nil)).Elem()
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutput() DatastoreResponseOutput {
	return o
}

func (o DatastoreResponseOutput) ToDatastoreResponseOutputWithContext(ctx context.Context) DatastoreResponseOutput {
	return o
}

func (o DatastoreResponseOutput) AzureDataLakeSection() AzureDataLakeSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureDataLakeSectionResponse { return v.AzureDataLakeSection }).(AzureDataLakeSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureMySqlSection() AzureMySqlSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureMySqlSectionResponse { return v.AzureMySqlSection }).(AzureMySqlSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzurePostgreSqlSection() AzurePostgreSqlSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzurePostgreSqlSectionResponse { return v.AzurePostgreSqlSection }).(AzurePostgreSqlSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureSqlDatabaseSection() AzureSqlDatabaseSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureSqlDatabaseSectionResponse { return v.AzureSqlDatabaseSection }).(AzureSqlDatabaseSectionResponsePtrOutput)
}

func (o DatastoreResponseOutput) AzureStorageSection() AzureStorageSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *AzureStorageSectionResponse { return v.AzureStorageSection }).(AzureStorageSectionResponsePtrOutput)
}

// The User who created the datastore.
func (o DatastoreResponseOutput) CreatedBy() UserInfoResponseOutput {
	return o.ApplyT(func(v DatastoreResponse) UserInfoResponse { return v.CreatedBy }).(UserInfoResponseOutput)
}

// The date and time when the datastore was created.
func (o DatastoreResponseOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// The datastore type.
func (o DatastoreResponseOutput) DataStoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.DataStoreType }).(pulumi.StringPtrOutput)
}

// Description of the datastore.
func (o DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Data specific to GlusterFS.
func (o DatastoreResponseOutput) GlusterFsSection() GlusterFsSectionResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *GlusterFsSectionResponse { return v.GlusterFsSection }).(GlusterFsSectionResponsePtrOutput)
}

// A read only property that denotes whether the service datastore has been validated with credentials.
func (o DatastoreResponseOutput) HasBeenValidated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *bool { return v.HasBeenValidated }).(pulumi.BoolPtrOutput)
}

// Info about origin if it is linked.
func (o DatastoreResponseOutput) LinkedInfo() LinkedInfoResponsePtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *LinkedInfoResponse { return v.LinkedInfo }).(LinkedInfoResponsePtrOutput)
}

// The User who modified the datastore.
func (o DatastoreResponseOutput) ModifiedBy() UserInfoResponseOutput {
	return o.ApplyT(func(v DatastoreResponse) UserInfoResponse { return v.ModifiedBy }).(UserInfoResponseOutput)
}

// The date and time when the datastore was last modified.
func (o DatastoreResponseOutput) ModifiedTime() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreResponse) string { return v.ModifiedTime }).(pulumi.StringOutput)
}

// Name of the datastore.
func (o DatastoreResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Tags for this datastore.
func (o DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type DefaultScaleSettings struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

// DefaultScaleSettingsInput is an input type that accepts DefaultScaleSettingsArgs and DefaultScaleSettingsOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsInput` via:
//
//	DefaultScaleSettingsArgs{...}
type DefaultScaleSettingsInput interface {
	pulumi.Input

	ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput
	ToDefaultScaleSettingsOutputWithContext(context.Context) DefaultScaleSettingsOutput
}

type DefaultScaleSettingsArgs struct {
	// Expected value is 'Default'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
}

func (DefaultScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return i.ToDefaultScaleSettingsOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput)
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput).ToDefaultScaleSettingsPtrOutputWithContext(ctx)
}

// DefaultScaleSettingsPtrInput is an input type that accepts DefaultScaleSettingsArgs, DefaultScaleSettingsPtr and DefaultScaleSettingsPtrOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsPtrInput` via:
//
//	        DefaultScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type DefaultScaleSettingsPtrInput interface {
	pulumi.Input

	ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput
	ToDefaultScaleSettingsPtrOutputWithContext(context.Context) DefaultScaleSettingsPtrOutput
}

type defaultScaleSettingsPtrType DefaultScaleSettingsArgs

func DefaultScaleSettingsPtr(v *DefaultScaleSettingsArgs) DefaultScaleSettingsPtrInput {
	return (*defaultScaleSettingsPtrType)(v)
}

func (*defaultScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsPtrOutput)
}

type DefaultScaleSettingsOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultScaleSettings) *DefaultScaleSettings {
		return &v
	}).(DefaultScaleSettingsPtrOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) Elem() DefaultScaleSettingsOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) DefaultScaleSettings {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettings
		return ret
	}).(DefaultScaleSettingsOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

type DefaultScaleSettingsResponse struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

type DefaultScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutput() DefaultScaleSettingsResponseOutput {
	return o
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutputWithContext(ctx context.Context) DefaultScaleSettingsResponseOutput {
	return o
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutput() DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutputWithContext(ctx context.Context) DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) Elem() DefaultScaleSettingsResponseOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) DefaultScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettingsResponse
		return ret
	}).(DefaultScaleSettingsResponseOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

type DeploymentResourceConfiguration struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfiguration
func (val *DeploymentResourceConfiguration) Defaults() *DeploymentResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

// DeploymentResourceConfigurationInput is an input type that accepts DeploymentResourceConfigurationArgs and DeploymentResourceConfigurationOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationInput` via:
//
//	DeploymentResourceConfigurationArgs{...}
type DeploymentResourceConfigurationInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput
	ToDeploymentResourceConfigurationOutputWithContext(context.Context) DeploymentResourceConfigurationOutput
}

type DeploymentResourceConfigurationArgs struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationArgs
func (val *DeploymentResourceConfigurationArgs) Defaults() *DeploymentResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	return &tmp
}
func (DeploymentResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return i.ToDeploymentResourceConfigurationOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput)
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i DeploymentResourceConfigurationArgs) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationOutput).ToDeploymentResourceConfigurationPtrOutputWithContext(ctx)
}

// DeploymentResourceConfigurationPtrInput is an input type that accepts DeploymentResourceConfigurationArgs, DeploymentResourceConfigurationPtr and DeploymentResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `DeploymentResourceConfigurationPtrInput` via:
//
//	        DeploymentResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type DeploymentResourceConfigurationPtrInput interface {
	pulumi.Input

	ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput
	ToDeploymentResourceConfigurationPtrOutputWithContext(context.Context) DeploymentResourceConfigurationPtrOutput
}

type deploymentResourceConfigurationPtrType DeploymentResourceConfigurationArgs

func DeploymentResourceConfigurationPtr(v *DeploymentResourceConfigurationArgs) DeploymentResourceConfigurationPtrInput {
	return (*deploymentResourceConfigurationPtrType)(v)
}

func (*deploymentResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return i.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *deploymentResourceConfigurationPtrType) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentResourceConfigurationPtrOutput)
}

type DeploymentResourceConfigurationOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutput() DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationOutputWithContext(ctx context.Context) DeploymentResourceConfigurationOutput {
	return o
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o.ToDeploymentResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o DeploymentResourceConfigurationOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DeploymentResourceConfiguration) *DeploymentResourceConfiguration {
		return &v
	}).(DeploymentResourceConfigurationPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfiguration)(nil)).Elem()
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutput() DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) ToDeploymentResourceConfigurationPtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationPtrOutput {
	return o
}

func (o DeploymentResourceConfigurationPtrOutput) Elem() DeploymentResourceConfigurationOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) DeploymentResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfiguration
		return ret
	}).(DeploymentResourceConfigurationOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponse struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for DeploymentResourceConfigurationResponse
func (val *DeploymentResourceConfigurationResponse) Defaults() *DeploymentResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

type DeploymentResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutput() DeploymentResourceConfigurationResponseOutput {
	return o
}

func (o DeploymentResourceConfigurationResponseOutput) ToDeploymentResourceConfigurationResponseOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponseOutput {
	return o
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v DeploymentResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type DeploymentResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (DeploymentResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentResourceConfigurationResponse)(nil)).Elem()
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutput() DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) ToDeploymentResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) DeploymentResourceConfigurationResponsePtrOutput {
	return o
}

func (o DeploymentResourceConfigurationResponsePtrOutput) Elem() DeploymentResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) DeploymentResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret DeploymentResourceConfigurationResponse
		return ret
	}).(DeploymentResourceConfigurationResponseOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o DeploymentResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o DeploymentResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *DeploymentResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Docker container configuration
type Docker struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

// DockerInput is an input type that accepts DockerArgs and DockerOutput values.
// You can construct a concrete instance of `DockerInput` via:
//
//	DockerArgs{...}
type DockerInput interface {
	pulumi.Input

	ToDockerOutput() DockerOutput
	ToDockerOutputWithContext(context.Context) DockerOutput
}

// Docker container configuration
type DockerArgs struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
}

func (DockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Docker)(nil)).Elem()
}

func (i DockerArgs) ToDockerOutput() DockerOutput {
	return i.ToDockerOutputWithContext(context.Background())
}

func (i DockerArgs) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerOutput)
}

func (i DockerArgs) ToDockerPtrOutput() DockerPtrOutput {
	return i.ToDockerPtrOutputWithContext(context.Background())
}

func (i DockerArgs) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerOutput).ToDockerPtrOutputWithContext(ctx)
}

// DockerPtrInput is an input type that accepts DockerArgs, DockerPtr and DockerPtrOutput values.
// You can construct a concrete instance of `DockerPtrInput` via:
//
//	        DockerArgs{...}
//
//	or:
//
//	        nil
type DockerPtrInput interface {
	pulumi.Input

	ToDockerPtrOutput() DockerPtrOutput
	ToDockerPtrOutputWithContext(context.Context) DockerPtrOutput
}

type dockerPtrType DockerArgs

func DockerPtr(v *DockerArgs) DockerPtrInput {
	return (*dockerPtrType)(v)
}

func (*dockerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (i *dockerPtrType) ToDockerPtrOutput() DockerPtrOutput {
	return i.ToDockerPtrOutputWithContext(context.Background())
}

func (i *dockerPtrType) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerPtrOutput)
}

// Docker container configuration
type DockerOutput struct{ *pulumi.OutputState }

func (DockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Docker)(nil)).Elem()
}

func (o DockerOutput) ToDockerOutput() DockerOutput {
	return o
}

func (o DockerOutput) ToDockerOutputWithContext(ctx context.Context) DockerOutput {
	return o
}

func (o DockerOutput) ToDockerPtrOutput() DockerPtrOutput {
	return o.ToDockerPtrOutputWithContext(context.Background())
}

func (o DockerOutput) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Docker) *Docker {
		return &v
	}).(DockerPtrOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Docker) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

type DockerPtrOutput struct{ *pulumi.OutputState }

func (DockerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Docker)(nil)).Elem()
}

func (o DockerPtrOutput) ToDockerPtrOutput() DockerPtrOutput {
	return o
}

func (o DockerPtrOutput) ToDockerPtrOutputWithContext(ctx context.Context) DockerPtrOutput {
	return o
}

func (o DockerPtrOutput) Elem() DockerOutput {
	return o.ApplyT(func(v *Docker) Docker {
		if v != nil {
			return *v
		}
		var ret Docker
		return ret
	}).(DockerOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Docker) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerBuild struct {
	// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
	// The path is relative to the asset path which must contain a single Blob URI value.
	// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
	Context *string `pulumi:"context"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Build'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// [Required] Docker command line instructions to assemble an image.
	// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
	Dockerfile string `pulumi:"dockerfile"`
	// The platform information of the docker image.
	Platform *DockerImagePlatform `pulumi:"platform"`
}

// DockerBuildInput is an input type that accepts DockerBuildArgs and DockerBuildOutput values.
// You can construct a concrete instance of `DockerBuildInput` via:
//
//	DockerBuildArgs{...}
type DockerBuildInput interface {
	pulumi.Input

	ToDockerBuildOutput() DockerBuildOutput
	ToDockerBuildOutputWithContext(context.Context) DockerBuildOutput
}

// Class to represent configuration settings for Docker Build
type DockerBuildArgs struct {
	// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
	// The path is relative to the asset path which must contain a single Blob URI value.
	// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
	Context pulumi.StringPtrInput `pulumi:"context"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Build'.
	DockerSpecificationType pulumi.StringInput `pulumi:"dockerSpecificationType"`
	// [Required] Docker command line instructions to assemble an image.
	// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
	Dockerfile pulumi.StringInput `pulumi:"dockerfile"`
	// The platform information of the docker image.
	Platform DockerImagePlatformPtrInput `pulumi:"platform"`
}

func (DockerBuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (i DockerBuildArgs) ToDockerBuildOutput() DockerBuildOutput {
	return i.ToDockerBuildOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput)
}

func (i DockerBuildArgs) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i DockerBuildArgs) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildOutput).ToDockerBuildPtrOutputWithContext(ctx)
}

// DockerBuildPtrInput is an input type that accepts DockerBuildArgs, DockerBuildPtr and DockerBuildPtrOutput values.
// You can construct a concrete instance of `DockerBuildPtrInput` via:
//
//	        DockerBuildArgs{...}
//
//	or:
//
//	        nil
type DockerBuildPtrInput interface {
	pulumi.Input

	ToDockerBuildPtrOutput() DockerBuildPtrOutput
	ToDockerBuildPtrOutputWithContext(context.Context) DockerBuildPtrOutput
}

type dockerBuildPtrType DockerBuildArgs

func DockerBuildPtr(v *DockerBuildArgs) DockerBuildPtrInput {
	return (*dockerBuildPtrType)(v)
}

func (*dockerBuildPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return i.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (i *dockerBuildPtrType) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerBuildPtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerBuildOutput struct{ *pulumi.OutputState }

func (DockerBuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuild)(nil)).Elem()
}

func (o DockerBuildOutput) ToDockerBuildOutput() DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildOutputWithContext(ctx context.Context) DockerBuildOutput {
	return o
}

func (o DockerBuildOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o.ToDockerBuildPtrOutputWithContext(context.Background())
}

func (o DockerBuildOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerBuild) *DockerBuild {
		return &v
	}).(DockerBuildPtrOutput)
}

// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
// The path is relative to the asset path which must contain a single Blob URI value.
// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
func (o DockerBuildOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuild) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Build'.
func (o DockerBuildOutput) DockerSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuild) string { return v.DockerSpecificationType }).(pulumi.StringOutput)
}

// [Required] Docker command line instructions to assemble an image.
// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
func (o DockerBuildOutput) Dockerfile() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuild) string { return v.Dockerfile }).(pulumi.StringOutput)
}

// The platform information of the docker image.
func (o DockerBuildOutput) Platform() DockerImagePlatformPtrOutput {
	return o.ApplyT(func(v DockerBuild) *DockerImagePlatform { return v.Platform }).(DockerImagePlatformPtrOutput)
}

type DockerBuildPtrOutput struct{ *pulumi.OutputState }

func (DockerBuildPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuild)(nil)).Elem()
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutput() DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) ToDockerBuildPtrOutputWithContext(ctx context.Context) DockerBuildPtrOutput {
	return o
}

func (o DockerBuildPtrOutput) Elem() DockerBuildOutput {
	return o.ApplyT(func(v *DockerBuild) DockerBuild {
		if v != nil {
			return *v
		}
		var ret DockerBuild
		return ret
	}).(DockerBuildOutput)
}

// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
// The path is relative to the asset path which must contain a single Blob URI value.
// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
func (o DockerBuildPtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Build'.
func (o DockerBuildPtrOutput) DockerSpecificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return &v.DockerSpecificationType
	}).(pulumi.StringPtrOutput)
}

// [Required] Docker command line instructions to assemble an image.
// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
func (o DockerBuildPtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *string {
		if v == nil {
			return nil
		}
		return &v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// The platform information of the docker image.
func (o DockerBuildPtrOutput) Platform() DockerImagePlatformPtrOutput {
	return o.ApplyT(func(v *DockerBuild) *DockerImagePlatform {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DockerImagePlatformPtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerBuildResponse struct {
	// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
	// The path is relative to the asset path which must contain a single Blob URI value.
	// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
	Context *string `pulumi:"context"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Build'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// [Required] Docker command line instructions to assemble an image.
	// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
	Dockerfile string `pulumi:"dockerfile"`
	// The platform information of the docker image.
	Platform *DockerImagePlatformResponse `pulumi:"platform"`
}

// Class to represent configuration settings for Docker Build
type DockerBuildResponseOutput struct{ *pulumi.OutputState }

func (DockerBuildResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerBuildResponse)(nil)).Elem()
}

func (o DockerBuildResponseOutput) ToDockerBuildResponseOutput() DockerBuildResponseOutput {
	return o
}

func (o DockerBuildResponseOutput) ToDockerBuildResponseOutputWithContext(ctx context.Context) DockerBuildResponseOutput {
	return o
}

// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
// The path is relative to the asset path which must contain a single Blob URI value.
// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
func (o DockerBuildResponseOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerBuildResponse) *string { return v.Context }).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Build'.
func (o DockerBuildResponseOutput) DockerSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildResponse) string { return v.DockerSpecificationType }).(pulumi.StringOutput)
}

// [Required] Docker command line instructions to assemble an image.
// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
func (o DockerBuildResponseOutput) Dockerfile() pulumi.StringOutput {
	return o.ApplyT(func(v DockerBuildResponse) string { return v.Dockerfile }).(pulumi.StringOutput)
}

// The platform information of the docker image.
func (o DockerBuildResponseOutput) Platform() DockerImagePlatformResponsePtrOutput {
	return o.ApplyT(func(v DockerBuildResponse) *DockerImagePlatformResponse { return v.Platform }).(DockerImagePlatformResponsePtrOutput)
}

type DockerBuildResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerBuildResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerBuildResponse)(nil)).Elem()
}

func (o DockerBuildResponsePtrOutput) ToDockerBuildResponsePtrOutput() DockerBuildResponsePtrOutput {
	return o
}

func (o DockerBuildResponsePtrOutput) ToDockerBuildResponsePtrOutputWithContext(ctx context.Context) DockerBuildResponsePtrOutput {
	return o
}

func (o DockerBuildResponsePtrOutput) Elem() DockerBuildResponseOutput {
	return o.ApplyT(func(v *DockerBuildResponse) DockerBuildResponse {
		if v != nil {
			return *v
		}
		var ret DockerBuildResponse
		return ret
	}).(DockerBuildResponseOutput)
}

// Path to a snapshot of the Docker Context. This property is only valid if Dockerfile is specified.
// The path is relative to the asset path which must contain a single Blob URI value.
// <seealso href="https://docs.docker.com/engine/context/working-with-contexts/" />
func (o DockerBuildResponsePtrOutput) Context() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildResponse) *string {
		if v == nil {
			return nil
		}
		return v.Context
	}).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Build'.
func (o DockerBuildResponsePtrOutput) DockerSpecificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DockerSpecificationType
	}).(pulumi.StringPtrOutput)
}

// [Required] Docker command line instructions to assemble an image.
// <seealso href="https://repo2docker.readthedocs.io/en/latest/config_files.html#dockerfile-advanced-environments" />
func (o DockerBuildResponsePtrOutput) Dockerfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerBuildResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Dockerfile
	}).(pulumi.StringPtrOutput)
}

// The platform information of the docker image.
func (o DockerBuildResponsePtrOutput) Platform() DockerImagePlatformResponsePtrOutput {
	return o.ApplyT(func(v *DockerBuildResponse) *DockerImagePlatformResponse {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DockerImagePlatformResponsePtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerImage struct {
	// [Required] Image name of a custom base image.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	DockerImageUri string `pulumi:"dockerImageUri"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Image'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// The platform information of the docker image.
	Platform *DockerImagePlatform `pulumi:"platform"`
}

// DockerImageInput is an input type that accepts DockerImageArgs and DockerImageOutput values.
// You can construct a concrete instance of `DockerImageInput` via:
//
//	DockerImageArgs{...}
type DockerImageInput interface {
	pulumi.Input

	ToDockerImageOutput() DockerImageOutput
	ToDockerImageOutputWithContext(context.Context) DockerImageOutput
}

// Class to represent configuration settings for Docker Build
type DockerImageArgs struct {
	// [Required] Image name of a custom base image.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	DockerImageUri pulumi.StringInput `pulumi:"dockerImageUri"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Image'.
	DockerSpecificationType pulumi.StringInput `pulumi:"dockerSpecificationType"`
	// The platform information of the docker image.
	Platform DockerImagePlatformPtrInput `pulumi:"platform"`
}

func (DockerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImage)(nil)).Elem()
}

func (i DockerImageArgs) ToDockerImageOutput() DockerImageOutput {
	return i.ToDockerImageOutputWithContext(context.Background())
}

func (i DockerImageArgs) ToDockerImageOutputWithContext(ctx context.Context) DockerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImageOutput)
}

func (i DockerImageArgs) ToDockerImagePtrOutput() DockerImagePtrOutput {
	return i.ToDockerImagePtrOutputWithContext(context.Background())
}

func (i DockerImageArgs) ToDockerImagePtrOutputWithContext(ctx context.Context) DockerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImageOutput).ToDockerImagePtrOutputWithContext(ctx)
}

// DockerImagePtrInput is an input type that accepts DockerImageArgs, DockerImagePtr and DockerImagePtrOutput values.
// You can construct a concrete instance of `DockerImagePtrInput` via:
//
//	        DockerImageArgs{...}
//
//	or:
//
//	        nil
type DockerImagePtrInput interface {
	pulumi.Input

	ToDockerImagePtrOutput() DockerImagePtrOutput
	ToDockerImagePtrOutputWithContext(context.Context) DockerImagePtrOutput
}

type dockerImagePtrType DockerImageArgs

func DockerImagePtr(v *DockerImageArgs) DockerImagePtrInput {
	return (*dockerImagePtrType)(v)
}

func (*dockerImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImage)(nil)).Elem()
}

func (i *dockerImagePtrType) ToDockerImagePtrOutput() DockerImagePtrOutput {
	return i.ToDockerImagePtrOutputWithContext(context.Background())
}

func (i *dockerImagePtrType) ToDockerImagePtrOutputWithContext(ctx context.Context) DockerImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImagePtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerImageOutput struct{ *pulumi.OutputState }

func (DockerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImage)(nil)).Elem()
}

func (o DockerImageOutput) ToDockerImageOutput() DockerImageOutput {
	return o
}

func (o DockerImageOutput) ToDockerImageOutputWithContext(ctx context.Context) DockerImageOutput {
	return o
}

func (o DockerImageOutput) ToDockerImagePtrOutput() DockerImagePtrOutput {
	return o.ToDockerImagePtrOutputWithContext(context.Background())
}

func (o DockerImageOutput) ToDockerImagePtrOutputWithContext(ctx context.Context) DockerImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerImage) *DockerImage {
		return &v
	}).(DockerImagePtrOutput)
}

// [Required] Image name of a custom base image.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o DockerImageOutput) DockerImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v DockerImage) string { return v.DockerImageUri }).(pulumi.StringOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Image'.
func (o DockerImageOutput) DockerSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v DockerImage) string { return v.DockerSpecificationType }).(pulumi.StringOutput)
}

// The platform information of the docker image.
func (o DockerImageOutput) Platform() DockerImagePlatformPtrOutput {
	return o.ApplyT(func(v DockerImage) *DockerImagePlatform { return v.Platform }).(DockerImagePlatformPtrOutput)
}

type DockerImagePtrOutput struct{ *pulumi.OutputState }

func (DockerImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImage)(nil)).Elem()
}

func (o DockerImagePtrOutput) ToDockerImagePtrOutput() DockerImagePtrOutput {
	return o
}

func (o DockerImagePtrOutput) ToDockerImagePtrOutputWithContext(ctx context.Context) DockerImagePtrOutput {
	return o
}

func (o DockerImagePtrOutput) Elem() DockerImageOutput {
	return o.ApplyT(func(v *DockerImage) DockerImage {
		if v != nil {
			return *v
		}
		var ret DockerImage
		return ret
	}).(DockerImageOutput)
}

// [Required] Image name of a custom base image.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o DockerImagePtrOutput) DockerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImage) *string {
		if v == nil {
			return nil
		}
		return &v.DockerImageUri
	}).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Image'.
func (o DockerImagePtrOutput) DockerSpecificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImage) *string {
		if v == nil {
			return nil
		}
		return &v.DockerSpecificationType
	}).(pulumi.StringPtrOutput)
}

// The platform information of the docker image.
func (o DockerImagePtrOutput) Platform() DockerImagePlatformPtrOutput {
	return o.ApplyT(func(v *DockerImage) *DockerImagePlatform {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DockerImagePlatformPtrOutput)
}

type DockerImagePlatform struct {
	// The OS type the Environment.
	OperatingSystemType *string `pulumi:"operatingSystemType"`
}

// DockerImagePlatformInput is an input type that accepts DockerImagePlatformArgs and DockerImagePlatformOutput values.
// You can construct a concrete instance of `DockerImagePlatformInput` via:
//
//	DockerImagePlatformArgs{...}
type DockerImagePlatformInput interface {
	pulumi.Input

	ToDockerImagePlatformOutput() DockerImagePlatformOutput
	ToDockerImagePlatformOutputWithContext(context.Context) DockerImagePlatformOutput
}

type DockerImagePlatformArgs struct {
	// The OS type the Environment.
	OperatingSystemType pulumi.StringPtrInput `pulumi:"operatingSystemType"`
}

func (DockerImagePlatformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImagePlatform)(nil)).Elem()
}

func (i DockerImagePlatformArgs) ToDockerImagePlatformOutput() DockerImagePlatformOutput {
	return i.ToDockerImagePlatformOutputWithContext(context.Background())
}

func (i DockerImagePlatformArgs) ToDockerImagePlatformOutputWithContext(ctx context.Context) DockerImagePlatformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImagePlatformOutput)
}

func (i DockerImagePlatformArgs) ToDockerImagePlatformPtrOutput() DockerImagePlatformPtrOutput {
	return i.ToDockerImagePlatformPtrOutputWithContext(context.Background())
}

func (i DockerImagePlatformArgs) ToDockerImagePlatformPtrOutputWithContext(ctx context.Context) DockerImagePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImagePlatformOutput).ToDockerImagePlatformPtrOutputWithContext(ctx)
}

// DockerImagePlatformPtrInput is an input type that accepts DockerImagePlatformArgs, DockerImagePlatformPtr and DockerImagePlatformPtrOutput values.
// You can construct a concrete instance of `DockerImagePlatformPtrInput` via:
//
//	        DockerImagePlatformArgs{...}
//
//	or:
//
//	        nil
type DockerImagePlatformPtrInput interface {
	pulumi.Input

	ToDockerImagePlatformPtrOutput() DockerImagePlatformPtrOutput
	ToDockerImagePlatformPtrOutputWithContext(context.Context) DockerImagePlatformPtrOutput
}

type dockerImagePlatformPtrType DockerImagePlatformArgs

func DockerImagePlatformPtr(v *DockerImagePlatformArgs) DockerImagePlatformPtrInput {
	return (*dockerImagePlatformPtrType)(v)
}

func (*dockerImagePlatformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImagePlatform)(nil)).Elem()
}

func (i *dockerImagePlatformPtrType) ToDockerImagePlatformPtrOutput() DockerImagePlatformPtrOutput {
	return i.ToDockerImagePlatformPtrOutputWithContext(context.Background())
}

func (i *dockerImagePlatformPtrType) ToDockerImagePlatformPtrOutputWithContext(ctx context.Context) DockerImagePlatformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DockerImagePlatformPtrOutput)
}

type DockerImagePlatformOutput struct{ *pulumi.OutputState }

func (DockerImagePlatformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImagePlatform)(nil)).Elem()
}

func (o DockerImagePlatformOutput) ToDockerImagePlatformOutput() DockerImagePlatformOutput {
	return o
}

func (o DockerImagePlatformOutput) ToDockerImagePlatformOutputWithContext(ctx context.Context) DockerImagePlatformOutput {
	return o
}

func (o DockerImagePlatformOutput) ToDockerImagePlatformPtrOutput() DockerImagePlatformPtrOutput {
	return o.ToDockerImagePlatformPtrOutputWithContext(context.Background())
}

func (o DockerImagePlatformOutput) ToDockerImagePlatformPtrOutputWithContext(ctx context.Context) DockerImagePlatformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DockerImagePlatform) *DockerImagePlatform {
		return &v
	}).(DockerImagePlatformPtrOutput)
}

// The OS type the Environment.
func (o DockerImagePlatformOutput) OperatingSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerImagePlatform) *string { return v.OperatingSystemType }).(pulumi.StringPtrOutput)
}

type DockerImagePlatformPtrOutput struct{ *pulumi.OutputState }

func (DockerImagePlatformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImagePlatform)(nil)).Elem()
}

func (o DockerImagePlatformPtrOutput) ToDockerImagePlatformPtrOutput() DockerImagePlatformPtrOutput {
	return o
}

func (o DockerImagePlatformPtrOutput) ToDockerImagePlatformPtrOutputWithContext(ctx context.Context) DockerImagePlatformPtrOutput {
	return o
}

func (o DockerImagePlatformPtrOutput) Elem() DockerImagePlatformOutput {
	return o.ApplyT(func(v *DockerImagePlatform) DockerImagePlatform {
		if v != nil {
			return *v
		}
		var ret DockerImagePlatform
		return ret
	}).(DockerImagePlatformOutput)
}

// The OS type the Environment.
func (o DockerImagePlatformPtrOutput) OperatingSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImagePlatform) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemType
	}).(pulumi.StringPtrOutput)
}

type DockerImagePlatformResponse struct {
	// The OS type the Environment.
	OperatingSystemType *string `pulumi:"operatingSystemType"`
}

type DockerImagePlatformResponseOutput struct{ *pulumi.OutputState }

func (DockerImagePlatformResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImagePlatformResponse)(nil)).Elem()
}

func (o DockerImagePlatformResponseOutput) ToDockerImagePlatformResponseOutput() DockerImagePlatformResponseOutput {
	return o
}

func (o DockerImagePlatformResponseOutput) ToDockerImagePlatformResponseOutputWithContext(ctx context.Context) DockerImagePlatformResponseOutput {
	return o
}

// The OS type the Environment.
func (o DockerImagePlatformResponseOutput) OperatingSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DockerImagePlatformResponse) *string { return v.OperatingSystemType }).(pulumi.StringPtrOutput)
}

type DockerImagePlatformResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerImagePlatformResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImagePlatformResponse)(nil)).Elem()
}

func (o DockerImagePlatformResponsePtrOutput) ToDockerImagePlatformResponsePtrOutput() DockerImagePlatformResponsePtrOutput {
	return o
}

func (o DockerImagePlatformResponsePtrOutput) ToDockerImagePlatformResponsePtrOutputWithContext(ctx context.Context) DockerImagePlatformResponsePtrOutput {
	return o
}

func (o DockerImagePlatformResponsePtrOutput) Elem() DockerImagePlatformResponseOutput {
	return o.ApplyT(func(v *DockerImagePlatformResponse) DockerImagePlatformResponse {
		if v != nil {
			return *v
		}
		var ret DockerImagePlatformResponse
		return ret
	}).(DockerImagePlatformResponseOutput)
}

// The OS type the Environment.
func (o DockerImagePlatformResponsePtrOutput) OperatingSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImagePlatformResponse) *string {
		if v == nil {
			return nil
		}
		return v.OperatingSystemType
	}).(pulumi.StringPtrOutput)
}

// Class to represent configuration settings for Docker Build
type DockerImageResponse struct {
	// [Required] Image name of a custom base image.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	DockerImageUri string `pulumi:"dockerImageUri"`
	// Enum to determine docker specification type. Must be either Build or Image.
	// Expected value is 'Image'.
	DockerSpecificationType string `pulumi:"dockerSpecificationType"`
	// The platform information of the docker image.
	Platform *DockerImagePlatformResponse `pulumi:"platform"`
}

// Class to represent configuration settings for Docker Build
type DockerImageResponseOutput struct{ *pulumi.OutputState }

func (DockerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerImageResponse)(nil)).Elem()
}

func (o DockerImageResponseOutput) ToDockerImageResponseOutput() DockerImageResponseOutput {
	return o
}

func (o DockerImageResponseOutput) ToDockerImageResponseOutputWithContext(ctx context.Context) DockerImageResponseOutput {
	return o
}

// [Required] Image name of a custom base image.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o DockerImageResponseOutput) DockerImageUri() pulumi.StringOutput {
	return o.ApplyT(func(v DockerImageResponse) string { return v.DockerImageUri }).(pulumi.StringOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Image'.
func (o DockerImageResponseOutput) DockerSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v DockerImageResponse) string { return v.DockerSpecificationType }).(pulumi.StringOutput)
}

// The platform information of the docker image.
func (o DockerImageResponseOutput) Platform() DockerImagePlatformResponsePtrOutput {
	return o.ApplyT(func(v DockerImageResponse) *DockerImagePlatformResponse { return v.Platform }).(DockerImagePlatformResponsePtrOutput)
}

type DockerImageResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerImageResponse)(nil)).Elem()
}

func (o DockerImageResponsePtrOutput) ToDockerImageResponsePtrOutput() DockerImageResponsePtrOutput {
	return o
}

func (o DockerImageResponsePtrOutput) ToDockerImageResponsePtrOutputWithContext(ctx context.Context) DockerImageResponsePtrOutput {
	return o
}

func (o DockerImageResponsePtrOutput) Elem() DockerImageResponseOutput {
	return o.ApplyT(func(v *DockerImageResponse) DockerImageResponse {
		if v != nil {
			return *v
		}
		var ret DockerImageResponse
		return ret
	}).(DockerImageResponseOutput)
}

// [Required] Image name of a custom base image.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o DockerImageResponsePtrOutput) DockerImageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DockerImageUri
	}).(pulumi.StringPtrOutput)
}

// Enum to determine docker specification type. Must be either Build or Image.
// Expected value is 'Image'.
func (o DockerImageResponsePtrOutput) DockerSpecificationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DockerImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DockerSpecificationType
	}).(pulumi.StringPtrOutput)
}

// The platform information of the docker image.
func (o DockerImageResponsePtrOutput) Platform() DockerImagePlatformResponsePtrOutput {
	return o.ApplyT(func(v *DockerImageResponse) *DockerImagePlatformResponse {
		if v == nil {
			return nil
		}
		return v.Platform
	}).(DockerImagePlatformResponsePtrOutput)
}

// Docker container configuration
type DockerResponse struct {
	// Indicate whether container shall run in privileged or non-privileged mode.
	Privileged *bool `pulumi:"privileged"`
}

// Docker container configuration
type DockerResponseOutput struct{ *pulumi.OutputState }

func (DockerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DockerResponse)(nil)).Elem()
}

func (o DockerResponseOutput) ToDockerResponseOutput() DockerResponseOutput {
	return o
}

func (o DockerResponseOutput) ToDockerResponseOutputWithContext(ctx context.Context) DockerResponseOutput {
	return o
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerResponseOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DockerResponse) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

type DockerResponsePtrOutput struct{ *pulumi.OutputState }

func (DockerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DockerResponse)(nil)).Elem()
}

func (o DockerResponsePtrOutput) ToDockerResponsePtrOutput() DockerResponsePtrOutput {
	return o
}

func (o DockerResponsePtrOutput) ToDockerResponsePtrOutputWithContext(ctx context.Context) DockerResponsePtrOutput {
	return o
}

func (o DockerResponsePtrOutput) Elem() DockerResponseOutput {
	return o.ApplyT(func(v *DockerResponse) DockerResponse {
		if v != nil {
			return *v
		}
		var ret DockerResponse
		return ret
	}).(DockerResponseOutput)
}

// Indicate whether container shall run in privileged or non-privileged mode.
func (o DockerResponsePtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DockerResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

type EncryptionKeyVaultProperties struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId *string `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

// EncryptionKeyVaultPropertiesInput is an input type that accepts EncryptionKeyVaultPropertiesArgs and EncryptionKeyVaultPropertiesOutput values.
// You can construct a concrete instance of `EncryptionKeyVaultPropertiesInput` via:
//
//	EncryptionKeyVaultPropertiesArgs{...}
type EncryptionKeyVaultPropertiesInput interface {
	pulumi.Input

	ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput
	ToEncryptionKeyVaultPropertiesOutputWithContext(context.Context) EncryptionKeyVaultPropertiesOutput
}

type EncryptionKeyVaultPropertiesArgs struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId pulumi.StringPtrInput `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier pulumi.StringInput `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId pulumi.StringInput `pulumi:"keyVaultArmId"`
}

func (EncryptionKeyVaultPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultProperties)(nil)).Elem()
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput {
	return i.ToEncryptionKeyVaultPropertiesOutputWithContext(context.Background())
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesOutput)
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return i.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i EncryptionKeyVaultPropertiesArgs) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesOutput).ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx)
}

// EncryptionKeyVaultPropertiesPtrInput is an input type that accepts EncryptionKeyVaultPropertiesArgs, EncryptionKeyVaultPropertiesPtr and EncryptionKeyVaultPropertiesPtrOutput values.
// You can construct a concrete instance of `EncryptionKeyVaultPropertiesPtrInput` via:
//
//	        EncryptionKeyVaultPropertiesArgs{...}
//
//	or:
//
//	        nil
type EncryptionKeyVaultPropertiesPtrInput interface {
	pulumi.Input

	ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput
	ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Context) EncryptionKeyVaultPropertiesPtrOutput
}

type encryptionKeyVaultPropertiesPtrType EncryptionKeyVaultPropertiesArgs

func EncryptionKeyVaultPropertiesPtr(v *EncryptionKeyVaultPropertiesArgs) EncryptionKeyVaultPropertiesPtrInput {
	return (*encryptionKeyVaultPropertiesPtrType)(v)
}

func (*encryptionKeyVaultPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultProperties)(nil)).Elem()
}

func (i *encryptionKeyVaultPropertiesPtrType) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return i.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (i *encryptionKeyVaultPropertiesPtrType) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionKeyVaultPropertiesPtrOutput)
}

type EncryptionKeyVaultPropertiesOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultProperties)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesOutput() EncryptionKeyVaultPropertiesOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return o.ToEncryptionKeyVaultPropertiesPtrOutputWithContext(context.Background())
}

func (o EncryptionKeyVaultPropertiesOutput) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionKeyVaultProperties) *EncryptionKeyVaultProperties {
		return &v
	}).(EncryptionKeyVaultPropertiesPtrOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultProperties) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type EncryptionKeyVaultPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultProperties)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesPtrOutput) ToEncryptionKeyVaultPropertiesPtrOutput() EncryptionKeyVaultPropertiesPtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesPtrOutput) ToEncryptionKeyVaultPropertiesPtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesPtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesPtrOutput) Elem() EncryptionKeyVaultPropertiesOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) EncryptionKeyVaultProperties {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyVaultProperties
		return ret
	}).(EncryptionKeyVaultPropertiesOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesPtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesPtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesPtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

type EncryptionKeyVaultPropertiesResponse struct {
	// For future use - The client id of the identity which will be used to access key vault.
	IdentityClientId *string `pulumi:"identityClientId"`
	// Key vault uri to access the encryption key.
	KeyIdentifier string `pulumi:"keyIdentifier"`
	// The ArmId of the keyVault where the customer owned encryption key is present.
	KeyVaultArmId string `pulumi:"keyVaultArmId"`
}

type EncryptionKeyVaultPropertiesResponseOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesResponseOutput) ToEncryptionKeyVaultPropertiesResponseOutput() EncryptionKeyVaultPropertiesResponseOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponseOutput) ToEncryptionKeyVaultPropertiesResponseOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesResponseOutput {
	return o
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesResponseOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) *string { return v.IdentityClientId }).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesResponseOutput) KeyIdentifier() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) string { return v.KeyIdentifier }).(pulumi.StringOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesResponseOutput) KeyVaultArmId() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionKeyVaultPropertiesResponse) string { return v.KeyVaultArmId }).(pulumi.StringOutput)
}

type EncryptionKeyVaultPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionKeyVaultPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionKeyVaultPropertiesResponse)(nil)).Elem()
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) ToEncryptionKeyVaultPropertiesResponsePtrOutput() EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) ToEncryptionKeyVaultPropertiesResponsePtrOutputWithContext(ctx context.Context) EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o
}

func (o EncryptionKeyVaultPropertiesResponsePtrOutput) Elem() EncryptionKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) EncryptionKeyVaultPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionKeyVaultPropertiesResponse
		return ret
	}).(EncryptionKeyVaultPropertiesResponseOutput)
}

// For future use - The client id of the identity which will be used to access key vault.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) IdentityClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.IdentityClientId
	}).(pulumi.StringPtrOutput)
}

// Key vault uri to access the encryption key.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) KeyIdentifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyIdentifier
	}).(pulumi.StringPtrOutput)
}

// The ArmId of the keyVault where the customer owned encryption key is present.
func (o EncryptionKeyVaultPropertiesResponsePtrOutput) KeyVaultArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionKeyVaultPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.KeyVaultArmId
	}).(pulumi.StringPtrOutput)
}

type EncryptionProperty struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity *IdentityForCmk `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultProperties `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
}

// EncryptionPropertyInput is an input type that accepts EncryptionPropertyArgs and EncryptionPropertyOutput values.
// You can construct a concrete instance of `EncryptionPropertyInput` via:
//
//	EncryptionPropertyArgs{...}
type EncryptionPropertyInput interface {
	pulumi.Input

	ToEncryptionPropertyOutput() EncryptionPropertyOutput
	ToEncryptionPropertyOutputWithContext(context.Context) EncryptionPropertyOutput
}

type EncryptionPropertyArgs struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity IdentityForCmkPtrInput `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultPropertiesInput `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EncryptionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return i.ToEncryptionPropertyOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput)
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i EncryptionPropertyArgs) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyOutput).ToEncryptionPropertyPtrOutputWithContext(ctx)
}

// EncryptionPropertyPtrInput is an input type that accepts EncryptionPropertyArgs, EncryptionPropertyPtr and EncryptionPropertyPtrOutput values.
// You can construct a concrete instance of `EncryptionPropertyPtrInput` via:
//
//	        EncryptionPropertyArgs{...}
//
//	or:
//
//	        nil
type EncryptionPropertyPtrInput interface {
	pulumi.Input

	ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput
	ToEncryptionPropertyPtrOutputWithContext(context.Context) EncryptionPropertyPtrOutput
}

type encryptionPropertyPtrType EncryptionPropertyArgs

func EncryptionPropertyPtr(v *EncryptionPropertyArgs) EncryptionPropertyPtrInput {
	return (*encryptionPropertyPtrType)(v)
}

func (*encryptionPropertyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return i.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (i *encryptionPropertyPtrType) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPropertyPtrOutput)
}

type EncryptionPropertyOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutput() EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyOutputWithContext(ctx context.Context) EncryptionPropertyOutput {
	return o
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o.ToEncryptionPropertyPtrOutputWithContext(context.Background())
}

func (o EncryptionPropertyOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionProperty) *EncryptionProperty {
		return &v
	}).(EncryptionPropertyPtrOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v EncryptionProperty) *IdentityForCmk { return v.Identity }).(IdentityForCmkPtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesOutput {
	return o.ApplyT(func(v EncryptionProperty) EncryptionKeyVaultProperties { return v.KeyVaultProperties }).(EncryptionKeyVaultPropertiesOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionProperty) string { return v.Status }).(pulumi.StringOutput)
}

type EncryptionPropertyPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionProperty)(nil)).Elem()
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutput() EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) ToEncryptionPropertyPtrOutputWithContext(ctx context.Context) EncryptionPropertyPtrOutput {
	return o
}

func (o EncryptionPropertyPtrOutput) Elem() EncryptionPropertyOutput {
	return o.ApplyT(func(v *EncryptionProperty) EncryptionProperty {
		if v != nil {
			return *v
		}
		var ret EncryptionProperty
		return ret
	}).(EncryptionPropertyOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyPtrOutput) Identity() IdentityForCmkPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *IdentityForCmk {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkPtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyPtrOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *EncryptionKeyVaultProperties {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(EncryptionKeyVaultPropertiesPtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionProperty) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

type EncryptionPropertyResponse struct {
	// The identity that will be used to access the key vault for encryption at rest.
	Identity *IdentityForCmkResponse `pulumi:"identity"`
	// Customer Key vault properties.
	KeyVaultProperties EncryptionKeyVaultPropertiesResponse `pulumi:"keyVaultProperties"`
	// Indicates whether or not the encryption is enabled for the workspace.
	Status string `pulumi:"status"`
}

type EncryptionPropertyResponseOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutput() EncryptionPropertyResponseOutput {
	return o
}

func (o EncryptionPropertyResponseOutput) ToEncryptionPropertyResponseOutputWithContext(ctx context.Context) EncryptionPropertyResponseOutput {
	return o
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyResponseOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) *IdentityForCmkResponse { return v.Identity }).(IdentityForCmkResponsePtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyResponseOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesResponseOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) EncryptionKeyVaultPropertiesResponse { return v.KeyVaultProperties }).(EncryptionKeyVaultPropertiesResponseOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionPropertyResponse) string { return v.Status }).(pulumi.StringOutput)
}

type EncryptionPropertyResponsePtrOutput struct{ *pulumi.OutputState }

func (EncryptionPropertyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionPropertyResponse)(nil)).Elem()
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutput() EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) ToEncryptionPropertyResponsePtrOutputWithContext(ctx context.Context) EncryptionPropertyResponsePtrOutput {
	return o
}

func (o EncryptionPropertyResponsePtrOutput) Elem() EncryptionPropertyResponseOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) EncryptionPropertyResponse {
		if v != nil {
			return *v
		}
		var ret EncryptionPropertyResponse
		return ret
	}).(EncryptionPropertyResponseOutput)
}

// The identity that will be used to access the key vault for encryption at rest.
func (o EncryptionPropertyResponsePtrOutput) Identity() IdentityForCmkResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *IdentityForCmkResponse {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(IdentityForCmkResponsePtrOutput)
}

// Customer Key vault properties.
func (o EncryptionPropertyResponsePtrOutput) KeyVaultProperties() EncryptionKeyVaultPropertiesResponsePtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *EncryptionKeyVaultPropertiesResponse {
		if v == nil {
			return nil
		}
		return &v.KeyVaultProperties
	}).(EncryptionKeyVaultPropertiesResponsePtrOutput)
}

// Indicates whether or not the encryption is enabled for the workspace.
func (o EncryptionPropertyResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionPropertyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.StringPtrOutput)
}

// Describes the endpoint configuration for the container
type Endpoint struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for Endpoint
func (val *Endpoint) Defaults() *Endpoint {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//	EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

// Describes the endpoint configuration for the container
type EndpointArgs struct {
	// Host IP over which the application is exposed from the container
	HostIp pulumi.StringPtrInput `pulumi:"hostIp"`
	// Name of the Endpoint
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published pulumi.IntPtrInput `pulumi:"published"`
	// Application port inside the container.
	Target pulumi.IntPtrInput `pulumi:"target"`
}

// Defaults sets the appropriate defaults for EndpointArgs
func (val *EndpointArgs) Defaults() *EndpointArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("tcp")
	}
	return &tmp
}
func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// Describes the endpoint configuration for the container
type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// Host IP over which the application is exposed from the container
func (o EndpointOutput) HostIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.HostIp }).(pulumi.StringPtrOutput)
}

// Name of the Endpoint
func (o EndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol over which communication will happen over this endpoint
func (o EndpointOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Port over which the application is exposed from container.
func (o EndpointOutput) Published() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Published }).(pulumi.IntPtrOutput)
}

// Application port inside the container.
func (o EndpointOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Endpoint) *int { return v.Target }).(pulumi.IntPtrOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Endpoint {
		return vs[0].([]Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeys struct {
	// The primary key.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// EndpointAuthKeysInput is an input type that accepts EndpointAuthKeysArgs and EndpointAuthKeysOutput values.
// You can construct a concrete instance of `EndpointAuthKeysInput` via:
//
//	EndpointAuthKeysArgs{...}
type EndpointAuthKeysInput interface {
	pulumi.Input

	ToEndpointAuthKeysOutput() EndpointAuthKeysOutput
	ToEndpointAuthKeysOutputWithContext(context.Context) EndpointAuthKeysOutput
}

// Keys for endpoint authentication.
type EndpointAuthKeysArgs struct {
	// The primary key.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (EndpointAuthKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return i.ToEndpointAuthKeysOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput)
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput).ToEndpointAuthKeysPtrOutputWithContext(ctx)
}

// EndpointAuthKeysPtrInput is an input type that accepts EndpointAuthKeysArgs, EndpointAuthKeysPtr and EndpointAuthKeysPtrOutput values.
// You can construct a concrete instance of `EndpointAuthKeysPtrInput` via:
//
//	        EndpointAuthKeysArgs{...}
//
//	or:
//
//	        nil
type EndpointAuthKeysPtrInput interface {
	pulumi.Input

	ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput
	ToEndpointAuthKeysPtrOutputWithContext(context.Context) EndpointAuthKeysPtrOutput
}

type endpointAuthKeysPtrType EndpointAuthKeysArgs

func EndpointAuthKeysPtr(v *EndpointAuthKeysArgs) EndpointAuthKeysPtrInput {
	return (*endpointAuthKeysPtrType)(v)
}

func (*endpointAuthKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysPtrOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeysOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointAuthKeys) *EndpointAuthKeys {
		return &v
	}).(EndpointAuthKeysPtrOutput)
}

// The primary key.
func (o EndpointAuthKeysOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type EndpointAuthKeysPtrOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) Elem() EndpointAuthKeysOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) EndpointAuthKeys {
		if v != nil {
			return *v
		}
		var ret EndpointAuthKeys
		return ret
	}).(EndpointAuthKeysOutput)
}

// The primary key.
func (o EndpointAuthKeysPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysPtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// Describes the endpoint configuration for the container
type EndpointResponse struct {
	// Host IP over which the application is exposed from the container
	HostIp *string `pulumi:"hostIp"`
	// Name of the Endpoint
	Name *string `pulumi:"name"`
	// Protocol over which communication will happen over this endpoint
	Protocol *string `pulumi:"protocol"`
	// Port over which the application is exposed from container.
	Published *int `pulumi:"published"`
	// Application port inside the container.
	Target *int `pulumi:"target"`
}

// Defaults sets the appropriate defaults for EndpointResponse
func (val *EndpointResponse) Defaults() *EndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "tcp"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// Describes the endpoint configuration for the container
type EndpointResponseOutput struct{ *pulumi.OutputState }

func (EndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseOutput) ToEndpointResponseOutput() EndpointResponseOutput {
	return o
}

func (o EndpointResponseOutput) ToEndpointResponseOutputWithContext(ctx context.Context) EndpointResponseOutput {
	return o
}

// Host IP over which the application is exposed from the container
func (o EndpointResponseOutput) HostIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.HostIp }).(pulumi.StringPtrOutput)
}

// Name of the Endpoint
func (o EndpointResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Protocol over which communication will happen over this endpoint
func (o EndpointResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Port over which the application is exposed from container.
func (o EndpointResponseOutput) Published() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *int { return v.Published }).(pulumi.IntPtrOutput)
}

// Application port inside the container.
func (o EndpointResponseOutput) Target() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EndpointResponse) *int { return v.Target }).(pulumi.IntPtrOutput)
}

type EndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointResponse)(nil)).Elem()
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutput() EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) ToEndpointResponseArrayOutputWithContext(ctx context.Context) EndpointResponseArrayOutput {
	return o
}

func (o EndpointResponseArrayOutput) Index(i pulumi.IntInput) EndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointResponse {
		return vs[0].([]EndpointResponse)[vs[1].(int)]
	}).(EndpointResponseOutput)
}

type EndpointScheduleAction struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

// EndpointScheduleActionInput is an input type that accepts EndpointScheduleActionArgs and EndpointScheduleActionOutput values.
// You can construct a concrete instance of `EndpointScheduleActionInput` via:
//
//	EndpointScheduleActionArgs{...}
type EndpointScheduleActionInput interface {
	pulumi.Input

	ToEndpointScheduleActionOutput() EndpointScheduleActionOutput
	ToEndpointScheduleActionOutputWithContext(context.Context) EndpointScheduleActionOutput
}

type EndpointScheduleActionArgs struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition pulumi.Input `pulumi:"endpointInvocationDefinition"`
}

func (EndpointScheduleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleAction)(nil)).Elem()
}

func (i EndpointScheduleActionArgs) ToEndpointScheduleActionOutput() EndpointScheduleActionOutput {
	return i.ToEndpointScheduleActionOutputWithContext(context.Background())
}

func (i EndpointScheduleActionArgs) ToEndpointScheduleActionOutputWithContext(ctx context.Context) EndpointScheduleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointScheduleActionOutput)
}

type EndpointScheduleActionOutput struct{ *pulumi.OutputState }

func (EndpointScheduleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleAction)(nil)).Elem()
}

func (o EndpointScheduleActionOutput) ToEndpointScheduleActionOutput() EndpointScheduleActionOutput {
	return o
}

func (o EndpointScheduleActionOutput) ToEndpointScheduleActionOutputWithContext(ctx context.Context) EndpointScheduleActionOutput {
	return o
}

// Expected value is 'InvokeBatchEndpoint'.
func (o EndpointScheduleActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointScheduleAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
// <see href="TBD" />
func (o EndpointScheduleActionOutput) EndpointInvocationDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v EndpointScheduleAction) interface{} { return v.EndpointInvocationDefinition }).(pulumi.AnyOutput)
}

type EndpointScheduleActionResponse struct {
	// Expected value is 'InvokeBatchEndpoint'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	// <see href="TBD" />
	EndpointInvocationDefinition interface{} `pulumi:"endpointInvocationDefinition"`
}

type EndpointScheduleActionResponseOutput struct{ *pulumi.OutputState }

func (EndpointScheduleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointScheduleActionResponse)(nil)).Elem()
}

func (o EndpointScheduleActionResponseOutput) ToEndpointScheduleActionResponseOutput() EndpointScheduleActionResponseOutput {
	return o
}

func (o EndpointScheduleActionResponseOutput) ToEndpointScheduleActionResponseOutputWithContext(ctx context.Context) EndpointScheduleActionResponseOutput {
	return o
}

// Expected value is 'InvokeBatchEndpoint'.
func (o EndpointScheduleActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointScheduleActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
// <see href="TBD" />
func (o EndpointScheduleActionResponseOutput) EndpointInvocationDefinition() pulumi.AnyOutput {
	return o.ApplyT(func(v EndpointScheduleActionResponse) interface{} { return v.EndpointInvocationDefinition }).(pulumi.AnyOutput)
}

// Container for environment specification versions.
type EnvironmentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerType
func (val *EnvironmentContainerType) Defaults() *EnvironmentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// EnvironmentContainerTypeInput is an input type that accepts EnvironmentContainerTypeArgs and EnvironmentContainerTypeOutput values.
// You can construct a concrete instance of `EnvironmentContainerTypeInput` via:
//
//	EnvironmentContainerTypeArgs{...}
type EnvironmentContainerTypeInput interface {
	pulumi.Input

	ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput
	ToEnvironmentContainerTypeOutputWithContext(context.Context) EnvironmentContainerTypeOutput
}

// Container for environment specification versions.
type EnvironmentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerTypeArgs
func (val *EnvironmentContainerTypeArgs) Defaults() *EnvironmentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EnvironmentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return i.ToEnvironmentContainerTypeOutputWithContext(context.Background())
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentContainerTypeOutput)
}

// Container for environment specification versions.
type EnvironmentContainerTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return o
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for environment specification versions.
type EnvironmentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerResponse
func (val *EnvironmentContainerResponse) Defaults() *EnvironmentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for environment specification versions.
type EnvironmentContainerResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerResponse)(nil)).Elem()
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutput() EnvironmentContainerResponseOutput {
	return o
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutputWithContext(ctx context.Context) EnvironmentContainerResponseOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o EnvironmentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o EnvironmentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment container.
func (o EnvironmentContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionType struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Configuration settings for Docker.
	Docker interface{} `pulumi:"docker"`
	// Defines configuration specific to inference.
	InferenceContainerProperties *InferenceContainerProperties `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// EnvironmentSpecificationVersionTypeInput is an input type that accepts EnvironmentSpecificationVersionTypeArgs and EnvironmentSpecificationVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentSpecificationVersionTypeInput` via:
//
//	EnvironmentSpecificationVersionTypeArgs{...}
type EnvironmentSpecificationVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput
	ToEnvironmentSpecificationVersionTypeOutputWithContext(context.Context) EnvironmentSpecificationVersionTypeOutput
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionTypeArgs struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Configuration settings for Docker.
	Docker pulumi.Input `pulumi:"docker"`
	// Defines configuration specific to inference.
	InferenceContainerProperties InferenceContainerPropertiesPtrInput `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (EnvironmentSpecificationVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionType)(nil)).Elem()
}

func (i EnvironmentSpecificationVersionTypeArgs) ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput {
	return i.ToEnvironmentSpecificationVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentSpecificationVersionTypeArgs) ToEnvironmentSpecificationVersionTypeOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentSpecificationVersionTypeOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentSpecificationVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionType)(nil)).Elem()
}

func (o EnvironmentSpecificationVersionTypeOutput) ToEnvironmentSpecificationVersionTypeOutput() EnvironmentSpecificationVersionTypeOutput {
	return o
}

func (o EnvironmentSpecificationVersionTypeOutput) ToEnvironmentSpecificationVersionTypeOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionTypeOutput {
	return o
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentSpecificationVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentSpecificationVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker.
func (o EnvironmentSpecificationVersionTypeOutput) Docker() pulumi.AnyOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) interface{} { return v.Docker }).(pulumi.AnyOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentSpecificationVersionTypeOutput) InferenceContainerProperties() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *InferenceContainerProperties {
		return v.InferenceContainerProperties
	}).(InferenceContainerPropertiesPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentSpecificationVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentSpecificationVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentSpecificationVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionResponse struct {
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Configuration settings for Docker.
	Docker interface{} `pulumi:"docker"`
	// Environment specification is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentSpecificationType string `pulumi:"environmentSpecificationType"`
	// Defines configuration specific to inference.
	InferenceContainerProperties *InferenceContainerPropertiesResponse `pulumi:"inferenceContainerProperties"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Environment specification version details.
// <see href="https://repo2docker.readthedocs.io/en/latest/specification.html" />
type EnvironmentSpecificationVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentSpecificationVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentSpecificationVersionResponse)(nil)).Elem()
}

func (o EnvironmentSpecificationVersionResponseOutput) ToEnvironmentSpecificationVersionResponseOutput() EnvironmentSpecificationVersionResponseOutput {
	return o
}

func (o EnvironmentSpecificationVersionResponseOutput) ToEnvironmentSpecificationVersionResponseOutputWithContext(ctx context.Context) EnvironmentSpecificationVersionResponseOutput {
	return o
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentSpecificationVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentSpecificationVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker.
func (o EnvironmentSpecificationVersionResponseOutput) Docker() pulumi.AnyOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) interface{} { return v.Docker }).(pulumi.AnyOutput)
}

// Environment specification is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentSpecificationVersionResponseOutput) EnvironmentSpecificationType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) string { return v.EnvironmentSpecificationType }).(pulumi.StringOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentSpecificationVersionResponseOutput) InferenceContainerProperties() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *InferenceContainerPropertiesResponse {
		return v.InferenceContainerProperties
	}).(InferenceContainerPropertiesResponsePtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentSpecificationVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentSpecificationVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentSpecificationVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentSpecificationVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment Variables for the container
type EnvironmentVariable struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariable
func (val *EnvironmentVariable) Defaults() *EnvironmentVariable {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

// EnvironmentVariableInput is an input type that accepts EnvironmentVariableArgs and EnvironmentVariableOutput values.
// You can construct a concrete instance of `EnvironmentVariableInput` via:
//
//	EnvironmentVariableArgs{...}
type EnvironmentVariableInput interface {
	pulumi.Input

	ToEnvironmentVariableOutput() EnvironmentVariableOutput
	ToEnvironmentVariableOutputWithContext(context.Context) EnvironmentVariableOutput
}

// Environment Variables for the container
type EnvironmentVariableArgs struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Value of the Environment variable
	Value pulumi.StringPtrInput `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariableArgs
func (val *EnvironmentVariableArgs) Defaults() *EnvironmentVariableArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("local")
	}
	return &tmp
}
func (EnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return i.ToEnvironmentVariableOutputWithContext(context.Background())
}

func (i EnvironmentVariableArgs) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableOutput)
}

// EnvironmentVariableMapInput is an input type that accepts EnvironmentVariableMap and EnvironmentVariableMapOutput values.
// You can construct a concrete instance of `EnvironmentVariableMapInput` via:
//
//	EnvironmentVariableMap{ "key": EnvironmentVariableArgs{...} }
type EnvironmentVariableMapInput interface {
	pulumi.Input

	ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput
	ToEnvironmentVariableMapOutputWithContext(context.Context) EnvironmentVariableMapOutput
}

type EnvironmentVariableMap map[string]EnvironmentVariableInput

func (EnvironmentVariableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariable)(nil)).Elem()
}

func (i EnvironmentVariableMap) ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput {
	return i.ToEnvironmentVariableMapOutputWithContext(context.Background())
}

func (i EnvironmentVariableMap) ToEnvironmentVariableMapOutputWithContext(ctx context.Context) EnvironmentVariableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVariableMapOutput)
}

// Environment Variables for the container
type EnvironmentVariableOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutput() EnvironmentVariableOutput {
	return o
}

func (o EnvironmentVariableOutput) ToEnvironmentVariableOutputWithContext(ctx context.Context) EnvironmentVariableOutput {
	return o
}

// Type of the Environment Variable. Possible values are: local - For local variable
func (o EnvironmentVariableOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the Environment variable
func (o EnvironmentVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableMapOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariable)(nil)).Elem()
}

func (o EnvironmentVariableMapOutput) ToEnvironmentVariableMapOutput() EnvironmentVariableMapOutput {
	return o
}

func (o EnvironmentVariableMapOutput) ToEnvironmentVariableMapOutputWithContext(ctx context.Context) EnvironmentVariableMapOutput {
	return o
}

func (o EnvironmentVariableMapOutput) MapIndex(k pulumi.StringInput) EnvironmentVariableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EnvironmentVariable {
		return vs[0].(map[string]EnvironmentVariable)[vs[1].(string)]
	}).(EnvironmentVariableOutput)
}

// Environment Variables for the container
type EnvironmentVariableResponse struct {
	// Type of the Environment Variable. Possible values are: local - For local variable
	Type *string `pulumi:"type"`
	// Value of the Environment variable
	Value *string `pulumi:"value"`
}

// Defaults sets the appropriate defaults for EnvironmentVariableResponse
func (val *EnvironmentVariableResponse) Defaults() *EnvironmentVariableResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "local"
		tmp.Type = &type_
	}
	return &tmp
}

// Environment Variables for the container
type EnvironmentVariableResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutput() EnvironmentVariableResponseOutput {
	return o
}

func (o EnvironmentVariableResponseOutput) ToEnvironmentVariableResponseOutputWithContext(ctx context.Context) EnvironmentVariableResponseOutput {
	return o
}

// Type of the Environment Variable. Possible values are: local - For local variable
func (o EnvironmentVariableResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Value of the Environment variable
func (o EnvironmentVariableResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVariableResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EnvironmentVariableResponseMapOutput struct{ *pulumi.OutputState }

func (EnvironmentVariableResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EnvironmentVariableResponse)(nil)).Elem()
}

func (o EnvironmentVariableResponseMapOutput) ToEnvironmentVariableResponseMapOutput() EnvironmentVariableResponseMapOutput {
	return o
}

func (o EnvironmentVariableResponseMapOutput) ToEnvironmentVariableResponseMapOutputWithContext(ctx context.Context) EnvironmentVariableResponseMapOutput {
	return o
}

func (o EnvironmentVariableResponseMapOutput) MapIndex(k pulumi.StringInput) EnvironmentVariableResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EnvironmentVariableResponse {
		return vs[0].(map[string]EnvironmentVariableResponse)[vs[1].(string)]
	}).(EnvironmentVariableResponseOutput)
}

// Environment version details.
type EnvironmentVersionType struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContext `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerProperties `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionType
func (val *EnvironmentVersionType) Defaults() *EnvironmentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// EnvironmentVersionTypeInput is an input type that accepts EnvironmentVersionTypeArgs and EnvironmentVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentVersionTypeInput` via:
//
//	EnvironmentVersionTypeArgs{...}
type EnvironmentVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput
	ToEnvironmentVersionTypeOutputWithContext(context.Context) EnvironmentVersionTypeOutput
}

// Environment version details.
type EnvironmentVersionTypeArgs struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild pulumi.StringPtrInput `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build BuildContextPtrInput `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig InferenceContainerPropertiesPtrInput `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the environment lifecycle assigned to this environment
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionTypeArgs
func (val *EnvironmentVersionTypeArgs) Defaults() *EnvironmentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		tmp.AutoRebuild = pulumi.StringPtr("Disabled")
	}

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (EnvironmentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return i.ToEnvironmentVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTypeOutput)
}

// Environment version details.
type EnvironmentVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return o
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return o
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionTypeOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionTypeOutput) Build() BuildContextPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *BuildContext { return v.Build }).(BuildContextPtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionTypeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionTypeOutput) InferenceConfig() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *InferenceContainerProperties { return v.InferenceConfig }).(InferenceContainerPropertiesPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionTypeOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment version details.
type EnvironmentVersionResponse struct {
	// Defines if image needs to be rebuilt based on base image changes.
	AutoRebuild *string `pulumi:"autoRebuild"`
	// Configuration settings for Docker build context.
	Build *BuildContextResponse `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Environment type is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentType string `pulumi:"environmentType"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerPropertiesResponse `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the environment version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the environment lifecycle assigned to this environment
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionResponse
func (val *EnvironmentVersionResponse) Defaults() *EnvironmentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AutoRebuild == nil {
		autoRebuild_ := "Disabled"
		tmp.AutoRebuild = &autoRebuild_
	}
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// Environment version details.
type EnvironmentVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionResponse)(nil)).Elem()
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutput() EnvironmentVersionResponseOutput {
	return o
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutputWithContext(ctx context.Context) EnvironmentVersionResponseOutput {
	return o
}

// Defines if image needs to be rebuilt based on base image changes.
func (o EnvironmentVersionResponseOutput) AutoRebuild() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.AutoRebuild }).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionResponseOutput) Build() BuildContextResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *BuildContextResponse { return v.Build }).(BuildContextResponsePtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment type is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentVersionResponseOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.EnvironmentType }).(pulumi.StringOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionResponseOutput) InferenceConfig() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *InferenceContainerPropertiesResponse { return v.InferenceConfig }).(InferenceContainerPropertiesResponsePtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the environment version.
func (o EnvironmentVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the environment lifecycle assigned to this environment
func (o EnvironmentVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The resource management error additional info.
type ErrorAdditionalInfoResponse struct {
	// The additional info.
	Info interface{} `pulumi:"info"`
	// The additional info type.
	Type string `pulumi:"type"`
}

// The resource management error additional info.
type ErrorAdditionalInfoResponseOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutput() ErrorAdditionalInfoResponseOutput {
	return o
}

func (o ErrorAdditionalInfoResponseOutput) ToErrorAdditionalInfoResponseOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseOutput {
	return o
}

// The additional info.
func (o ErrorAdditionalInfoResponseOutput) Info() pulumi.AnyOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) interface{} { return v.Info }).(pulumi.AnyOutput)
}

// The additional info type.
func (o ErrorAdditionalInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorAdditionalInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ErrorAdditionalInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorAdditionalInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorAdditionalInfoResponse)(nil)).Elem()
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutput() ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) ToErrorAdditionalInfoResponseArrayOutputWithContext(ctx context.Context) ErrorAdditionalInfoResponseArrayOutput {
	return o
}

func (o ErrorAdditionalInfoResponseArrayOutput) Index(i pulumi.IntInput) ErrorAdditionalInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorAdditionalInfoResponse {
		return vs[0].([]ErrorAdditionalInfoResponse)[vs[1].(int)]
	}).(ErrorAdditionalInfoResponseOutput)
}

// The error detail.
type ErrorDetailResponse struct {
	// The error additional info.
	AdditionalInfo []ErrorAdditionalInfoResponse `pulumi:"additionalInfo"`
	// The error code.
	Code string `pulumi:"code"`
	// The error details.
	Details []ErrorDetailResponse `pulumi:"details"`
	// The error message.
	Message string `pulumi:"message"`
	// The error target.
	Target string `pulumi:"target"`
}

// The error detail.
type ErrorDetailResponseOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutput() ErrorDetailResponseOutput {
	return o
}

func (o ErrorDetailResponseOutput) ToErrorDetailResponseOutputWithContext(ctx context.Context) ErrorDetailResponseOutput {
	return o
}

// The error additional info.
func (o ErrorDetailResponseOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorAdditionalInfoResponse { return v.AdditionalInfo }).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Code }).(pulumi.StringOutput)
}

// The error details.
func (o ErrorDetailResponseOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v ErrorDetailResponse) []ErrorDetailResponse { return v.Details }).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The error target.
func (o ErrorDetailResponseOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorDetailResponse) string { return v.Target }).(pulumi.StringOutput)
}

type ErrorDetailResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutput() ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) ToErrorDetailResponsePtrOutputWithContext(ctx context.Context) ErrorDetailResponsePtrOutput {
	return o
}

func (o ErrorDetailResponsePtrOutput) Elem() ErrorDetailResponseOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) ErrorDetailResponse {
		if v != nil {
			return *v
		}
		var ret ErrorDetailResponse
		return ret
	}).(ErrorDetailResponseOutput)
}

// The error additional info.
func (o ErrorDetailResponsePtrOutput) AdditionalInfo() ErrorAdditionalInfoResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorAdditionalInfoResponse {
		if v == nil {
			return nil
		}
		return v.AdditionalInfo
	}).(ErrorAdditionalInfoResponseArrayOutput)
}

// The error code.
func (o ErrorDetailResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// The error details.
func (o ErrorDetailResponsePtrOutput) Details() ErrorDetailResponseArrayOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) []ErrorDetailResponse {
		if v == nil {
			return nil
		}
		return v.Details
	}).(ErrorDetailResponseArrayOutput)
}

// The error message.
func (o ErrorDetailResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// The error target.
func (o ErrorDetailResponsePtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorDetailResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Target
	}).(pulumi.StringPtrOutput)
}

type ErrorDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorDetailResponse)(nil)).Elem()
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutput() ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) ToErrorDetailResponseArrayOutputWithContext(ctx context.Context) ErrorDetailResponseArrayOutput {
	return o
}

func (o ErrorDetailResponseArrayOutput) Index(i pulumi.IntInput) ErrorDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorDetailResponse {
		return vs[0].([]ErrorDetailResponse)[vs[1].(int)]
	}).(ErrorDetailResponseOutput)
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponse struct {
	// The error object.
	Error *ErrorDetailResponse `pulumi:"error"`
}

// Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
type ErrorResponseResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutput() ErrorResponseResponseOutput {
	return o
}

func (o ErrorResponseResponseOutput) ToErrorResponseResponseOutputWithContext(ctx context.Context) ErrorResponseResponseOutput {
	return o
}

// The error object.
func (o ErrorResponseResponseOutput) Error() ErrorDetailResponsePtrOutput {
	return o.ApplyT(func(v ErrorResponseResponse) *ErrorDetailResponse { return v.Error }).(ErrorDetailResponsePtrOutput)
}

type ErrorResponseResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponseResponse)(nil)).Elem()
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutput() ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) ToErrorResponseResponseArrayOutputWithContext(ctx context.Context) ErrorResponseResponseArrayOutput {
	return o
}

func (o ErrorResponseResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponseResponse {
		return vs[0].([]ErrorResponseResponse)[vs[1].(int)]
	}).(ErrorResponseResponseOutput)
}

// The estimated price info for using a VM of a particular OS type, tier, etc.
type EstimatedVMPriceResponse struct {
	// Operating system type used by the VM.
	OsType string `pulumi:"osType"`
	// The price charged for using the VM.
	RetailPrice float64 `pulumi:"retailPrice"`
	// The type of the VM.
	VmTier string `pulumi:"vmTier"`
}

// The estimated price info for using a VM of a particular OS type, tier, etc.
type EstimatedVMPriceResponseOutput struct{ *pulumi.OutputState }

func (EstimatedVMPriceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EstimatedVMPriceResponse)(nil)).Elem()
}

func (o EstimatedVMPriceResponseOutput) ToEstimatedVMPriceResponseOutput() EstimatedVMPriceResponseOutput {
	return o
}

func (o EstimatedVMPriceResponseOutput) ToEstimatedVMPriceResponseOutputWithContext(ctx context.Context) EstimatedVMPriceResponseOutput {
	return o
}

// Operating system type used by the VM.
func (o EstimatedVMPriceResponseOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPriceResponse) string { return v.OsType }).(pulumi.StringOutput)
}

// The price charged for using the VM.
func (o EstimatedVMPriceResponseOutput) RetailPrice() pulumi.Float64Output {
	return o.ApplyT(func(v EstimatedVMPriceResponse) float64 { return v.RetailPrice }).(pulumi.Float64Output)
}

// The type of the VM.
func (o EstimatedVMPriceResponseOutput) VmTier() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPriceResponse) string { return v.VmTier }).(pulumi.StringOutput)
}

type EstimatedVMPriceResponseArrayOutput struct{ *pulumi.OutputState }

func (EstimatedVMPriceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EstimatedVMPriceResponse)(nil)).Elem()
}

func (o EstimatedVMPriceResponseArrayOutput) ToEstimatedVMPriceResponseArrayOutput() EstimatedVMPriceResponseArrayOutput {
	return o
}

func (o EstimatedVMPriceResponseArrayOutput) ToEstimatedVMPriceResponseArrayOutputWithContext(ctx context.Context) EstimatedVMPriceResponseArrayOutput {
	return o
}

func (o EstimatedVMPriceResponseArrayOutput) Index(i pulumi.IntInput) EstimatedVMPriceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EstimatedVMPriceResponse {
		return vs[0].([]EstimatedVMPriceResponse)[vs[1].(int)]
	}).(EstimatedVMPriceResponseOutput)
}

// The estimated price info for using a VM.
type EstimatedVMPricesResponse struct {
	// Three lettered code specifying the currency of the VM price. Example: USD
	BillingCurrency string `pulumi:"billingCurrency"`
	// The unit of time measurement for the specified VM price. Example: OneHour
	UnitOfMeasure string `pulumi:"unitOfMeasure"`
	// The list of estimated prices for using a VM of a particular OS type, tier, etc.
	Values []EstimatedVMPriceResponse `pulumi:"values"`
}

// The estimated price info for using a VM.
type EstimatedVMPricesResponseOutput struct{ *pulumi.OutputState }

func (EstimatedVMPricesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EstimatedVMPricesResponse)(nil)).Elem()
}

func (o EstimatedVMPricesResponseOutput) ToEstimatedVMPricesResponseOutput() EstimatedVMPricesResponseOutput {
	return o
}

func (o EstimatedVMPricesResponseOutput) ToEstimatedVMPricesResponseOutputWithContext(ctx context.Context) EstimatedVMPricesResponseOutput {
	return o
}

// Three lettered code specifying the currency of the VM price. Example: USD
func (o EstimatedVMPricesResponseOutput) BillingCurrency() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) string { return v.BillingCurrency }).(pulumi.StringOutput)
}

// The unit of time measurement for the specified VM price. Example: OneHour
func (o EstimatedVMPricesResponseOutput) UnitOfMeasure() pulumi.StringOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) string { return v.UnitOfMeasure }).(pulumi.StringOutput)
}

// The list of estimated prices for using a VM of a particular OS type, tier, etc.
func (o EstimatedVMPricesResponseOutput) Values() EstimatedVMPriceResponseArrayOutput {
	return o.ApplyT(func(v EstimatedVMPricesResponse) []EstimatedVMPriceResponse { return v.Values }).(EstimatedVMPriceResponseArrayOutput)
}

type EstimatedVMPricesResponsePtrOutput struct{ *pulumi.OutputState }

func (EstimatedVMPricesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EstimatedVMPricesResponse)(nil)).Elem()
}

func (o EstimatedVMPricesResponsePtrOutput) ToEstimatedVMPricesResponsePtrOutput() EstimatedVMPricesResponsePtrOutput {
	return o
}

func (o EstimatedVMPricesResponsePtrOutput) ToEstimatedVMPricesResponsePtrOutputWithContext(ctx context.Context) EstimatedVMPricesResponsePtrOutput {
	return o
}

func (o EstimatedVMPricesResponsePtrOutput) Elem() EstimatedVMPricesResponseOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) EstimatedVMPricesResponse {
		if v != nil {
			return *v
		}
		var ret EstimatedVMPricesResponse
		return ret
	}).(EstimatedVMPricesResponseOutput)
}

// Three lettered code specifying the currency of the VM price. Example: USD
func (o EstimatedVMPricesResponsePtrOutput) BillingCurrency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BillingCurrency
	}).(pulumi.StringPtrOutput)
}

// The unit of time measurement for the specified VM price. Example: OneHour
func (o EstimatedVMPricesResponsePtrOutput) UnitOfMeasure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UnitOfMeasure
	}).(pulumi.StringPtrOutput)
}

// The list of estimated prices for using a VM of a particular OS type, tier, etc.
func (o EstimatedVMPricesResponsePtrOutput) Values() EstimatedVMPriceResponseArrayOutput {
	return o.ApplyT(func(v *EstimatedVMPricesResponse) []EstimatedVMPriceResponse {
		if v == nil {
			return nil
		}
		return v.Values
	}).(EstimatedVMPriceResponseArrayOutput)
}

// Dto object representing feature
type FeatureResponse struct {
	// Specifies type
	DataType *string `pulumi:"dataType"`
	// Specifies description
	Description *string `pulumi:"description"`
	// Specifies name
	FeatureName *string `pulumi:"featureName"`
	// Specifies tags
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeatureResponse
func (val *FeatureResponse) Defaults() *FeatureResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing feature
type FeatureResponseOutput struct{ *pulumi.OutputState }

func (FeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseOutput) ToFeatureResponseOutput() FeatureResponseOutput {
	return o
}

func (o FeatureResponseOutput) ToFeatureResponseOutputWithContext(ctx context.Context) FeatureResponseOutput {
	return o
}

// Specifies type
func (o FeatureResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Specifies description
func (o FeatureResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies name
func (o FeatureResponseOutput) FeatureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.FeatureName }).(pulumi.StringPtrOutput)
}

// Specifies tags
func (o FeatureResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (FeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutput() FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutputWithContext(ctx context.Context) FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) Index(i pulumi.IntInput) FeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureResponse {
		return vs[0].([]FeatureResponse)[vs[1].(int)]
	}).(FeatureResponseOutput)
}

// Specifies the feature window
type FeatureWindowResponse struct {
	// Specifies the feature window end time
	FeatureWindowEnd *string `pulumi:"featureWindowEnd"`
	// Specifies the feature window start time
	FeatureWindowStart *string `pulumi:"featureWindowStart"`
}

// Specifies the feature window
type FeatureWindowResponseOutput struct{ *pulumi.OutputState }

func (FeatureWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureWindowResponse)(nil)).Elem()
}

func (o FeatureWindowResponseOutput) ToFeatureWindowResponseOutput() FeatureWindowResponseOutput {
	return o
}

func (o FeatureWindowResponseOutput) ToFeatureWindowResponseOutputWithContext(ctx context.Context) FeatureWindowResponseOutput {
	return o
}

// Specifies the feature window end time
func (o FeatureWindowResponseOutput) FeatureWindowEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureWindowResponse) *string { return v.FeatureWindowEnd }).(pulumi.StringPtrOutput)
}

// Specifies the feature window start time
func (o FeatureWindowResponseOutput) FeatureWindowStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureWindowResponse) *string { return v.FeatureWindowStart }).(pulumi.StringPtrOutput)
}

type FeatureWindowResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureWindowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureWindowResponse)(nil)).Elem()
}

func (o FeatureWindowResponsePtrOutput) ToFeatureWindowResponsePtrOutput() FeatureWindowResponsePtrOutput {
	return o
}

func (o FeatureWindowResponsePtrOutput) ToFeatureWindowResponsePtrOutputWithContext(ctx context.Context) FeatureWindowResponsePtrOutput {
	return o
}

func (o FeatureWindowResponsePtrOutput) Elem() FeatureWindowResponseOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) FeatureWindowResponse {
		if v != nil {
			return *v
		}
		var ret FeatureWindowResponse
		return ret
	}).(FeatureWindowResponseOutput)
}

// Specifies the feature window end time
func (o FeatureWindowResponsePtrOutput) FeatureWindowEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureWindowEnd
	}).(pulumi.StringPtrOutput)
}

// Specifies the feature window start time
func (o FeatureWindowResponsePtrOutput) FeatureWindowStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureWindowResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureWindowStart
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set
type FeaturesetContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainer
func (val *FeaturesetContainer) Defaults() *FeaturesetContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturesetContainerInput is an input type that accepts FeaturesetContainerArgs and FeaturesetContainerOutput values.
// You can construct a concrete instance of `FeaturesetContainerInput` via:
//
//	FeaturesetContainerArgs{...}
type FeaturesetContainerInput interface {
	pulumi.Input

	ToFeaturesetContainerOutput() FeaturesetContainerOutput
	ToFeaturesetContainerOutputWithContext(context.Context) FeaturesetContainerOutput
}

// Dto object representing feature set
type FeaturesetContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerArgs
func (val *FeaturesetContainerArgs) Defaults() *FeaturesetContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturesetContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return i.ToFeaturesetContainerOutputWithContext(context.Background())
}

func (i FeaturesetContainerArgs) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetContainerOutput)
}

// Dto object representing feature set
type FeaturesetContainerOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainer)(nil)).Elem()
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutput() FeaturesetContainerOutput {
	return o
}

func (o FeaturesetContainerOutput) ToFeaturesetContainerOutputWithContext(ctx context.Context) FeaturesetContainerOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set
type FeaturesetContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetContainerResponse
func (val *FeaturesetContainerResponse) Defaults() *FeaturesetContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature set
type FeaturesetContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetContainerResponse)(nil)).Elem()
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutput() FeaturesetContainerResponseOutput {
	return o
}

func (o FeaturesetContainerResponseOutput) ToFeaturesetContainerResponseOutputWithContext(ctx context.Context) FeaturesetContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturesetContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturesetContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturesetContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturesetContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturesetContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset container.
func (o FeaturesetContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing the feature set job
type FeaturesetJobResponse struct {
	// Specifies the created date
	CreatedDate *string `pulumi:"createdDate"`
	// Specifies the display name
	DisplayName *string `pulumi:"displayName"`
	// Specifies the duration
	Duration *string `pulumi:"duration"`
	// Specifies the experiment id
	ExperimentId *string `pulumi:"experimentId"`
	// Specifies the backfill feature window to be materialized
	FeatureWindow *FeatureWindowResponse `pulumi:"featureWindow"`
	// Specifies the job id
	JobId *string `pulumi:"jobId"`
	// Specifies the job status
	Status *string `pulumi:"status"`
	// Specifies the tags if any
	Tags map[string]string `pulumi:"tags"`
	// Specifies the feature store job type
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for FeaturesetJobResponse
func (val *FeaturesetJobResponse) Defaults() *FeaturesetJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Status == nil {
		status_ := "Unknown"
		tmp.Status = &status_
	}
	if tmp.Type == nil {
		type_ := "RecurrentMaterialization"
		tmp.Type = &type_
	}
	return &tmp
}

// Dto object representing the feature set job
type FeaturesetJobResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetJobResponse)(nil)).Elem()
}

func (o FeaturesetJobResponseOutput) ToFeaturesetJobResponseOutput() FeaturesetJobResponseOutput {
	return o
}

func (o FeaturesetJobResponseOutput) ToFeaturesetJobResponseOutputWithContext(ctx context.Context) FeaturesetJobResponseOutput {
	return o
}

// Specifies the created date
func (o FeaturesetJobResponseOutput) CreatedDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.CreatedDate }).(pulumi.StringPtrOutput)
}

// Specifies the display name
func (o FeaturesetJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Specifies the duration
func (o FeaturesetJobResponseOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Specifies the experiment id
func (o FeaturesetJobResponseOutput) ExperimentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.ExperimentId }).(pulumi.StringPtrOutput)
}

// Specifies the backfill feature window to be materialized
func (o FeaturesetJobResponseOutput) FeatureWindow() FeatureWindowResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *FeatureWindowResponse { return v.FeatureWindow }).(FeatureWindowResponsePtrOutput)
}

// Specifies the job id
func (o FeaturesetJobResponseOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// Specifies the job status
func (o FeaturesetJobResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Specifies the tags if any
func (o FeaturesetJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the feature store job type
func (o FeaturesetJobResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetJobResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type FeaturesetJobResponseArrayOutput struct{ *pulumi.OutputState }

func (FeaturesetJobResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeaturesetJobResponse)(nil)).Elem()
}

func (o FeaturesetJobResponseArrayOutput) ToFeaturesetJobResponseArrayOutput() FeaturesetJobResponseArrayOutput {
	return o
}

func (o FeaturesetJobResponseArrayOutput) ToFeaturesetJobResponseArrayOutputWithContext(ctx context.Context) FeaturesetJobResponseArrayOutput {
	return o
}

func (o FeaturesetJobResponseArrayOutput) Index(i pulumi.IntInput) FeaturesetJobResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeaturesetJobResponse {
		return vs[0].([]FeaturesetJobResponse)[vs[1].(int)]
	}).(FeaturesetJobResponseOutput)
}

// Dto object representing specification
type FeaturesetSpecification struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// FeaturesetSpecificationInput is an input type that accepts FeaturesetSpecificationArgs and FeaturesetSpecificationOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationInput` via:
//
//	FeaturesetSpecificationArgs{...}
type FeaturesetSpecificationInput interface {
	pulumi.Input

	ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput
	ToFeaturesetSpecificationOutputWithContext(context.Context) FeaturesetSpecificationOutput
}

// Dto object representing specification
type FeaturesetSpecificationArgs struct {
	// Specifies the spec path
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (FeaturesetSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return i.ToFeaturesetSpecificationOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput)
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i FeaturesetSpecificationArgs) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationOutput).ToFeaturesetSpecificationPtrOutputWithContext(ctx)
}

// FeaturesetSpecificationPtrInput is an input type that accepts FeaturesetSpecificationArgs, FeaturesetSpecificationPtr and FeaturesetSpecificationPtrOutput values.
// You can construct a concrete instance of `FeaturesetSpecificationPtrInput` via:
//
//	        FeaturesetSpecificationArgs{...}
//
//	or:
//
//	        nil
type FeaturesetSpecificationPtrInput interface {
	pulumi.Input

	ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput
	ToFeaturesetSpecificationPtrOutputWithContext(context.Context) FeaturesetSpecificationPtrOutput
}

type featuresetSpecificationPtrType FeaturesetSpecificationArgs

func FeaturesetSpecificationPtr(v *FeaturesetSpecificationArgs) FeaturesetSpecificationPtrInput {
	return (*featuresetSpecificationPtrType)(v)
}

func (*featuresetSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return i.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (i *featuresetSpecificationPtrType) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetSpecificationPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutput() FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationOutputWithContext(ctx context.Context) FeaturesetSpecificationOutput {
	return o
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o.ToFeaturesetSpecificationPtrOutputWithContext(context.Background())
}

func (o FeaturesetSpecificationOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeaturesetSpecification) *FeaturesetSpecification {
		return &v
	}).(FeaturesetSpecificationPtrOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecification) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationPtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecification)(nil)).Elem()
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutput() FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) ToFeaturesetSpecificationPtrOutputWithContext(ctx context.Context) FeaturesetSpecificationPtrOutput {
	return o
}

func (o FeaturesetSpecificationPtrOutput) Elem() FeaturesetSpecificationOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) FeaturesetSpecification {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecification
		return ret
	}).(FeaturesetSpecificationOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing specification
type FeaturesetSpecificationResponse struct {
	// Specifies the spec path
	Path *string `pulumi:"path"`
}

// Dto object representing specification
type FeaturesetSpecificationResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutput() FeaturesetSpecificationResponseOutput {
	return o
}

func (o FeaturesetSpecificationResponseOutput) ToFeaturesetSpecificationResponseOutputWithContext(ctx context.Context) FeaturesetSpecificationResponseOutput {
	return o
}

// Specifies the spec path
func (o FeaturesetSpecificationResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetSpecificationResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type FeaturesetSpecificationResponsePtrOutput struct{ *pulumi.OutputState }

func (FeaturesetSpecificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeaturesetSpecificationResponse)(nil)).Elem()
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutput() FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) ToFeaturesetSpecificationResponsePtrOutputWithContext(ctx context.Context) FeaturesetSpecificationResponsePtrOutput {
	return o
}

func (o FeaturesetSpecificationResponsePtrOutput) Elem() FeaturesetSpecificationResponseOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) FeaturesetSpecificationResponse {
		if v != nil {
			return *v
		}
		var ret FeaturesetSpecificationResponse
		return ret
	}).(FeaturesetSpecificationResponseOutput)
}

// Specifies the spec path
func (o FeaturesetSpecificationResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeaturesetSpecificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Dto object representing feature set version
type FeaturesetVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettings `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecification `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionType
func (val *FeaturesetVersionType) Defaults() *FeaturesetVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// FeaturesetVersionTypeInput is an input type that accepts FeaturesetVersionTypeArgs and FeaturesetVersionTypeOutput values.
// You can construct a concrete instance of `FeaturesetVersionTypeInput` via:
//
//	FeaturesetVersionTypeArgs{...}
type FeaturesetVersionTypeInput interface {
	pulumi.Input

	ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput
	ToFeaturesetVersionTypeOutputWithContext(context.Context) FeaturesetVersionTypeOutput
}

// Dto object representing feature set version
type FeaturesetVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies list of entities
	Entities pulumi.StringArrayInput `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings MaterializationSettingsPtrInput `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the feature spec details
	Specification FeaturesetSpecificationPtrInput `pulumi:"specification"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionTypeArgs
func (val *FeaturesetVersionTypeArgs) Defaults() *FeaturesetVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (FeaturesetVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return i.ToFeaturesetVersionTypeOutputWithContext(context.Background())
}

func (i FeaturesetVersionTypeArgs) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturesetVersionTypeOutput)
}

// Dto object representing feature set version
type FeaturesetVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionType)(nil)).Elem()
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutput() FeaturesetVersionTypeOutput {
	return o
}

func (o FeaturesetVersionTypeOutput) ToFeaturesetVersionTypeOutputWithContext(ctx context.Context) FeaturesetVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturesetVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionTypeOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionType) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionTypeOutput) MaterializationSettings() MaterializationSettingsPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *MaterializationSettings { return v.MaterializationSettings }).(MaterializationSettingsPtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionTypeOutput) Specification() FeaturesetSpecificationPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *FeaturesetSpecification { return v.Specification }).(FeaturesetSpecificationPtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature set version
type FeaturesetVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies list of entities
	Entities []string `pulumi:"entities"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// Specifies the materialization settings
	MaterializationSettings *MaterializationSettingsResponse `pulumi:"materializationSettings"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featureset version container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the feature spec details
	Specification *FeaturesetSpecificationResponse `pulumi:"specification"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturesetVersionResponse
func (val *FeaturesetVersionResponse) Defaults() *FeaturesetVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.MaterializationSettings = tmp.MaterializationSettings.Defaults()

	return &tmp
}

// Dto object representing feature set version
type FeaturesetVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturesetVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturesetVersionResponse)(nil)).Elem()
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutput() FeaturesetVersionResponseOutput {
	return o
}

func (o FeaturesetVersionResponseOutput) ToFeaturesetVersionResponseOutputWithContext(ctx context.Context) FeaturesetVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturesetVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturesetVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies list of entities
func (o FeaturesetVersionResponseOutput) Entities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) []string { return v.Entities }).(pulumi.StringArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturesetVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturesetVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Specifies the materialization settings
func (o FeaturesetVersionResponseOutput) MaterializationSettings() MaterializationSettingsResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *MaterializationSettingsResponse { return v.MaterializationSettings }).(MaterializationSettingsResponsePtrOutput)
}

// The asset property dictionary.
func (o FeaturesetVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featureset version container.
func (o FeaturesetVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the feature spec details
func (o FeaturesetVersionResponseOutput) Specification() FeaturesetSpecificationResponsePtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *FeaturesetSpecificationResponse { return v.Specification }).(FeaturesetSpecificationResponsePtrOutput)
}

// Specifies the asset stage
func (o FeaturesetVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturesetVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturesetVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainer struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainer
func (val *FeaturestoreEntityContainer) Defaults() *FeaturestoreEntityContainer {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityContainerInput is an input type that accepts FeaturestoreEntityContainerArgs and FeaturestoreEntityContainerOutput values.
// You can construct a concrete instance of `FeaturestoreEntityContainerInput` via:
//
//	FeaturestoreEntityContainerArgs{...}
type FeaturestoreEntityContainerInput interface {
	pulumi.Input

	ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput
	ToFeaturestoreEntityContainerOutputWithContext(context.Context) FeaturestoreEntityContainerOutput
}

// Dto object representing feature entity
type FeaturestoreEntityContainerArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerArgs
func (val *FeaturestoreEntityContainerArgs) Defaults() *FeaturestoreEntityContainerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return i.ToFeaturestoreEntityContainerOutputWithContext(context.Background())
}

func (i FeaturestoreEntityContainerArgs) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityContainerOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainer)(nil)).Elem()
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutput() FeaturestoreEntityContainerOutput {
	return o
}

func (o FeaturestoreEntityContainerOutput) ToFeaturestoreEntityContainerOutputWithContext(ctx context.Context) FeaturestoreEntityContainerOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainer) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityContainerResponse
func (val *FeaturestoreEntityContainerResponse) Defaults() *FeaturestoreEntityContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity
type FeaturestoreEntityContainerResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityContainerResponse)(nil)).Elem()
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutput() FeaturestoreEntityContainerResponseOutput {
	return o
}

func (o FeaturestoreEntityContainerResponseOutput) ToFeaturestoreEntityContainerResponseOutputWithContext(ctx context.Context) FeaturestoreEntityContainerResponseOutput {
	return o
}

// The asset description text.
func (o FeaturestoreEntityContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o FeaturestoreEntityContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o FeaturestoreEntityContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o FeaturestoreEntityContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity container.
func (o FeaturestoreEntityContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionType struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumn `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionType
func (val *FeaturestoreEntityVersionType) Defaults() *FeaturestoreEntityVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// FeaturestoreEntityVersionTypeInput is an input type that accepts FeaturestoreEntityVersionTypeArgs and FeaturestoreEntityVersionTypeOutput values.
// You can construct a concrete instance of `FeaturestoreEntityVersionTypeInput` via:
//
//	FeaturestoreEntityVersionTypeArgs{...}
type FeaturestoreEntityVersionTypeInput interface {
	pulumi.Input

	ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput
	ToFeaturestoreEntityVersionTypeOutputWithContext(context.Context) FeaturestoreEntityVersionTypeOutput
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies index columns
	IndexColumns IndexColumnArrayInput `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Specifies the asset stage
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionTypeArgs
func (val *FeaturestoreEntityVersionTypeArgs) Defaults() *FeaturestoreEntityVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (FeaturestoreEntityVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return i.ToFeaturestoreEntityVersionTypeOutputWithContext(context.Background())
}

func (i FeaturestoreEntityVersionTypeArgs) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeaturestoreEntityVersionTypeOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionTypeOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionType)(nil)).Elem()
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutput() FeaturestoreEntityVersionTypeOutput {
	return o
}

func (o FeaturestoreEntityVersionTypeOutput) ToFeaturestoreEntityVersionTypeOutputWithContext(ctx context.Context) FeaturestoreEntityVersionTypeOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionTypeOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionTypeOutput) IndexColumns() IndexColumnArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) []IndexColumn { return v.IndexColumns }).(IndexColumnArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Specifies index columns
	IndexColumns []IndexColumnResponse `pulumi:"indexColumns"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the featurestore entity version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Specifies the asset stage
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeaturestoreEntityVersionResponse
func (val *FeaturestoreEntityVersionResponse) Defaults() *FeaturestoreEntityVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Dto object representing feature entity version
type FeaturestoreEntityVersionResponseOutput struct{ *pulumi.OutputState }

func (FeaturestoreEntityVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeaturestoreEntityVersionResponse)(nil)).Elem()
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutput() FeaturestoreEntityVersionResponseOutput {
	return o
}

func (o FeaturestoreEntityVersionResponseOutput) ToFeaturestoreEntityVersionResponseOutputWithContext(ctx context.Context) FeaturestoreEntityVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o FeaturestoreEntityVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// The asset description text.
func (o FeaturestoreEntityVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies index columns
func (o FeaturestoreEntityVersionResponseOutput) IndexColumns() IndexColumnResponseArrayOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) []IndexColumnResponse { return v.IndexColumns }).(IndexColumnResponseArrayOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o FeaturestoreEntityVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o FeaturestoreEntityVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o FeaturestoreEntityVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the featurestore entity version.
func (o FeaturestoreEntityVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Specifies the asset stage
func (o FeaturestoreEntityVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o FeaturestoreEntityVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeaturestoreEntityVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FlavorData struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

// FlavorDataInput is an input type that accepts FlavorDataArgs and FlavorDataOutput values.
// You can construct a concrete instance of `FlavorDataInput` via:
//
//	FlavorDataArgs{...}
type FlavorDataInput interface {
	pulumi.Input

	ToFlavorDataOutput() FlavorDataOutput
	ToFlavorDataOutputWithContext(context.Context) FlavorDataOutput
}

type FlavorDataArgs struct {
	// Model flavor-specific data.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FlavorDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (i FlavorDataArgs) ToFlavorDataOutput() FlavorDataOutput {
	return i.ToFlavorDataOutputWithContext(context.Background())
}

func (i FlavorDataArgs) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataOutput)
}

// FlavorDataMapInput is an input type that accepts FlavorDataMap and FlavorDataMapOutput values.
// You can construct a concrete instance of `FlavorDataMapInput` via:
//
//	FlavorDataMap{ "key": FlavorDataArgs{...} }
type FlavorDataMapInput interface {
	pulumi.Input

	ToFlavorDataMapOutput() FlavorDataMapOutput
	ToFlavorDataMapOutputWithContext(context.Context) FlavorDataMapOutput
}

type FlavorDataMap map[string]FlavorDataInput

func (FlavorDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (i FlavorDataMap) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return i.ToFlavorDataMapOutputWithContext(context.Background())
}

func (i FlavorDataMap) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataMapOutput)
}

type FlavorDataOutput struct{ *pulumi.OutputState }

func (FlavorDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (o FlavorDataOutput) ToFlavorDataOutput() FlavorDataOutput {
	return o
}

func (o FlavorDataOutput) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorData) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataMapOutput struct{ *pulumi.OutputState }

func (FlavorDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) MapIndex(k pulumi.StringInput) FlavorDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorData {
		return vs[0].(map[string]FlavorData)[vs[1].(string)]
	}).(FlavorDataOutput)
}

type FlavorDataResponse struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

type FlavorDataResponseOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutput() FlavorDataResponseOutput {
	return o
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutputWithContext(ctx context.Context) FlavorDataResponseOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataResponseOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorDataResponse) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataResponseMapOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutput() FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutputWithContext(ctx context.Context) FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) MapIndex(k pulumi.StringInput) FlavorDataResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorDataResponse {
		return vs[0].(map[string]FlavorDataResponse)[vs[1].(string)]
	}).(FlavorDataResponseOutput)
}

// Forecasting task in AutoML Table vertical.
type Forecasting struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettings `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Forecasting
func (val *Forecasting) Defaults() *Forecasting {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ForecastingInput is an input type that accepts ForecastingArgs and ForecastingOutput values.
// You can construct a concrete instance of `ForecastingInput` via:
//
//	ForecastingArgs{...}
type ForecastingInput interface {
	pulumi.Input

	ToForecastingOutput() ForecastingOutput
	ToForecastingOutputWithContext(context.Context) ForecastingOutput
}

// Forecasting task in AutoML Table vertical.
type ForecastingArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings ForecastingSettingsPtrInput `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings ForecastingTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ForecastingArgs
func (val *ForecastingArgs) Defaults() *ForecastingArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (ForecastingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (i ForecastingArgs) ToForecastingOutput() ForecastingOutput {
	return i.ToForecastingOutputWithContext(context.Background())
}

func (i ForecastingArgs) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingOutput struct{ *pulumi.OutputState }

func (ForecastingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (o ForecastingOutput) ToForecastingOutput() ForecastingOutput {
	return o
}

func (o ForecastingOutput) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ForecastingOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Forecasting) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingOutput) ForecastingSettings() ForecastingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *ForecastingSettings { return v.ForecastingSettings }).(ForecastingSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ForecastingOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ForecastingOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Forecasting) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for forecasting task.
func (o ForecastingOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ForecastingOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Forecasting) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ForecastingOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Forecasting) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Forecasting) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ForecastingOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Forecasting) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingOutput) TrainingSettings() ForecastingTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *ForecastingTrainingSettings { return v.TrainingSettings }).(ForecastingTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o ForecastingOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Forecasting) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Forecasting) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ForecastingOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettingsResponse `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *ForecastingTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for ForecastingResponse
func (val *ForecastingResponse) Defaults() *ForecastingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponseOutput struct{ *pulumi.OutputState }

func (ForecastingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingResponse)(nil)).Elem()
}

func (o ForecastingResponseOutput) ToForecastingResponseOutput() ForecastingResponseOutput {
	return o
}

func (o ForecastingResponseOutput) ToForecastingResponseOutputWithContext(ctx context.Context) ForecastingResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o ForecastingResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingResponseOutput) ForecastingSettings() ForecastingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *ForecastingSettingsResponse { return v.ForecastingSettings }).(ForecastingSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ForecastingResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o ForecastingResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for forecasting task.
func (o ForecastingResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ForecastingResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ForecastingResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o ForecastingResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o ForecastingResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ForecastingResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingResponseOutput) TrainingSettings() ForecastingTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *ForecastingTrainingSettingsResponse { return v.TrainingSettings }).(ForecastingTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o ForecastingResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ForecastingResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o ForecastingResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettings struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettings
func (val *ForecastingSettings) Defaults() *ForecastingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// ForecastingSettingsInput is an input type that accepts ForecastingSettingsArgs and ForecastingSettingsOutput values.
// You can construct a concrete instance of `ForecastingSettingsInput` via:
//
//	ForecastingSettingsArgs{...}
type ForecastingSettingsInput interface {
	pulumi.Input

	ToForecastingSettingsOutput() ForecastingSettingsOutput
	ToForecastingSettingsOutputWithContext(context.Context) ForecastingSettingsOutput
}

// Forecasting specific parameters.
type ForecastingSettingsArgs struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays pulumi.StringPtrInput `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize pulumi.IntPtrInput `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags pulumi.StringPtrInput `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon pulumi.Input `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality pulumi.Input `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig pulumi.StringPtrInput `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction pulumi.StringPtrInput `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags pulumi.Input `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize pulumi.Input `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName pulumi.StringPtrInput `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames pulumi.StringArrayInput `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl pulumi.StringPtrInput `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsArgs
func (val *ForecastingSettingsArgs) Defaults() *ForecastingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		tmp.FeatureLags = pulumi.StringPtr("None")
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		tmp.ShortSeriesHandlingConfig = pulumi.StringPtr("Auto")
	}
	if tmp.TargetAggregateFunction == nil {
		tmp.TargetAggregateFunction = pulumi.StringPtr("None")
	}
	if tmp.UseStl == nil {
		tmp.UseStl = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ForecastingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return i.ToForecastingSettingsOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput)
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput).ToForecastingSettingsPtrOutputWithContext(ctx)
}

// ForecastingSettingsPtrInput is an input type that accepts ForecastingSettingsArgs, ForecastingSettingsPtr and ForecastingSettingsPtrOutput values.
// You can construct a concrete instance of `ForecastingSettingsPtrInput` via:
//
//	        ForecastingSettingsArgs{...}
//
//	or:
//
//	        nil
type ForecastingSettingsPtrInput interface {
	pulumi.Input

	ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput
	ToForecastingSettingsPtrOutputWithContext(context.Context) ForecastingSettingsPtrOutput
}

type forecastingSettingsPtrType ForecastingSettingsArgs

func ForecastingSettingsPtr(v *ForecastingSettingsArgs) ForecastingSettingsPtrInput {
	return (*forecastingSettingsPtrType)(v)
}

func (*forecastingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForecastingSettings) *ForecastingSettings {
		return &v
	}).(ForecastingSettingsPtrOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettings) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) Elem() ForecastingSettingsOutput {
	return o.ApplyT(func(v *ForecastingSettings) ForecastingSettings {
		if v != nil {
			return *v
		}
		var ret ForecastingSettings
		return ret
	}).(ForecastingSettingsOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsPtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsPtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsPtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsPtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsPtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsPtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsPtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsPtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsPtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsPtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsPtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettings) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsPtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsResponse struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsResponse
func (val *ForecastingSettingsResponse) Defaults() *ForecastingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// Forecasting specific parameters.
type ForecastingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutput() ForecastingSettingsResponseOutput {
	return o
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutputWithContext(ctx context.Context) ForecastingSettingsResponseOutput {
	return o
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponseOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponseOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponseOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponseOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponseOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponseOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponseOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponseOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponseOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponseOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponseOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponseOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutput() ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutputWithContext(ctx context.Context) ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) Elem() ForecastingSettingsResponseOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) ForecastingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ForecastingSettingsResponse
		return ret
	}).(ForecastingSettingsResponseOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponsePtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponsePtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponsePtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponsePtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponsePtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponsePtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponsePtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponsePtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponsePtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponsePtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettings struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettings
func (val *ForecastingTrainingSettings) Defaults() *ForecastingTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// ForecastingTrainingSettingsInput is an input type that accepts ForecastingTrainingSettingsArgs and ForecastingTrainingSettingsOutput values.
// You can construct a concrete instance of `ForecastingTrainingSettingsInput` via:
//
//	ForecastingTrainingSettingsArgs{...}
type ForecastingTrainingSettingsInput interface {
	pulumi.Input

	ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput
	ToForecastingTrainingSettingsOutputWithContext(context.Context) ForecastingTrainingSettingsOutput
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsArgs struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettingsArgs
func (val *ForecastingTrainingSettingsArgs) Defaults() *ForecastingTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	return &tmp
}
func (ForecastingTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettings)(nil)).Elem()
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput {
	return i.ToForecastingTrainingSettingsOutputWithContext(context.Background())
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsOutputWithContext(ctx context.Context) ForecastingTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsOutput)
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return i.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i ForecastingTrainingSettingsArgs) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsOutput).ToForecastingTrainingSettingsPtrOutputWithContext(ctx)
}

// ForecastingTrainingSettingsPtrInput is an input type that accepts ForecastingTrainingSettingsArgs, ForecastingTrainingSettingsPtr and ForecastingTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `ForecastingTrainingSettingsPtrInput` via:
//
//	        ForecastingTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type ForecastingTrainingSettingsPtrInput interface {
	pulumi.Input

	ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput
	ToForecastingTrainingSettingsPtrOutputWithContext(context.Context) ForecastingTrainingSettingsPtrOutput
}

type forecastingTrainingSettingsPtrType ForecastingTrainingSettingsArgs

func ForecastingTrainingSettingsPtr(v *ForecastingTrainingSettingsArgs) ForecastingTrainingSettingsPtrInput {
	return (*forecastingTrainingSettingsPtrType)(v)
}

func (*forecastingTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettings)(nil)).Elem()
}

func (i *forecastingTrainingSettingsPtrType) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return i.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *forecastingTrainingSettingsPtrType) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingTrainingSettingsPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettings)(nil)).Elem()
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsOutput() ForecastingTrainingSettingsOutput {
	return o
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsOutputWithContext(ctx context.Context) ForecastingTrainingSettingsOutput {
	return o
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return o.ToForecastingTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o ForecastingTrainingSettingsOutput) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForecastingTrainingSettings) *ForecastingTrainingSettings {
		return &v
	}).(ForecastingTrainingSettingsPtrOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

type ForecastingTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettings)(nil)).Elem()
}

func (o ForecastingTrainingSettingsPtrOutput) ToForecastingTrainingSettingsPtrOutput() ForecastingTrainingSettingsPtrOutput {
	return o
}

func (o ForecastingTrainingSettingsPtrOutput) ToForecastingTrainingSettingsPtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsPtrOutput {
	return o
}

func (o ForecastingTrainingSettingsPtrOutput) Elem() ForecastingTrainingSettingsOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) ForecastingTrainingSettings {
		if v != nil {
			return *v
		}
		var ret ForecastingTrainingSettings
		return ret
	}).(ForecastingTrainingSettingsOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsResponse struct {
	// Allowed models for forecasting task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for forecasting task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for ForecastingTrainingSettingsResponse
func (val *ForecastingTrainingSettingsResponse) Defaults() *ForecastingTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Forecasting Training related configuration.
type ForecastingTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingTrainingSettingsResponse)(nil)).Elem()
}

func (o ForecastingTrainingSettingsResponseOutput) ToForecastingTrainingSettingsResponseOutput() ForecastingTrainingSettingsResponseOutput {
	return o
}

func (o ForecastingTrainingSettingsResponseOutput) ToForecastingTrainingSettingsResponseOutputWithContext(ctx context.Context) ForecastingTrainingSettingsResponseOutput {
	return o
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

type ForecastingTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ForecastingTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingTrainingSettingsResponse)(nil)).Elem()
}

func (o ForecastingTrainingSettingsResponsePtrOutput) ToForecastingTrainingSettingsResponsePtrOutput() ForecastingTrainingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingTrainingSettingsResponsePtrOutput) ToForecastingTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) ForecastingTrainingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingTrainingSettingsResponsePtrOutput) Elem() ForecastingTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) ForecastingTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ForecastingTrainingSettingsResponse
		return ret
	}).(ForecastingTrainingSettingsResponseOutput)
}

// Allowed models for forecasting task.
func (o ForecastingTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o ForecastingTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o ForecastingTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ForecastingTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// FqdnOutboundRuleInput is an input type that accepts FqdnOutboundRuleArgs and FqdnOutboundRuleOutput values.
// You can construct a concrete instance of `FqdnOutboundRuleInput` via:
//
//	FqdnOutboundRuleArgs{...}
type FqdnOutboundRuleInput interface {
	pulumi.Input

	ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput
	ToFqdnOutboundRuleOutputWithContext(context.Context) FqdnOutboundRuleOutput
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    pulumi.StringPtrInput `pulumi:"category"`
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (FqdnOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRule)(nil)).Elem()
}

func (i FqdnOutboundRuleArgs) ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput {
	return i.ToFqdnOutboundRuleOutputWithContext(context.Background())
}

func (i FqdnOutboundRuleArgs) ToFqdnOutboundRuleOutputWithContext(ctx context.Context) FqdnOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FqdnOutboundRuleOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleOutput struct{ *pulumi.OutputState }

func (FqdnOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRule)(nil)).Elem()
}

func (o FqdnOutboundRuleOutput) ToFqdnOutboundRuleOutput() FqdnOutboundRuleOutput {
	return o
}

func (o FqdnOutboundRuleOutput) ToFqdnOutboundRuleOutputWithContext(ctx context.Context) FqdnOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o FqdnOutboundRuleOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'FQDN'.
func (o FqdnOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FqdnOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category    *string `pulumi:"category"`
	Destination *string `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'FQDN'.
	Type string `pulumi:"type"`
}

// FQDN Outbound Rule for the managed network of a machine learning workspace.
type FqdnOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (FqdnOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FqdnOutboundRuleResponse)(nil)).Elem()
}

func (o FqdnOutboundRuleResponseOutput) ToFqdnOutboundRuleResponseOutput() FqdnOutboundRuleResponseOutput {
	return o
}

func (o FqdnOutboundRuleResponseOutput) ToFqdnOutboundRuleResponseOutputWithContext(ctx context.Context) FqdnOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o FqdnOutboundRuleResponseOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o FqdnOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'FQDN'.
func (o FqdnOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FqdnOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Data specific to GlusterFS.
type GlusterFsSectionResponse struct {
	// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
	ServerAddress string `pulumi:"serverAddress"`
	// The name of the created GlusterFS volume.
	VolumeName string `pulumi:"volumeName"`
}

// Data specific to GlusterFS.
type GlusterFsSectionResponseOutput struct{ *pulumi.OutputState }

func (GlusterFsSectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GlusterFsSectionResponse)(nil)).Elem()
}

func (o GlusterFsSectionResponseOutput) ToGlusterFsSectionResponseOutput() GlusterFsSectionResponseOutput {
	return o
}

func (o GlusterFsSectionResponseOutput) ToGlusterFsSectionResponseOutputWithContext(ctx context.Context) GlusterFsSectionResponseOutput {
	return o
}

// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
func (o GlusterFsSectionResponseOutput) ServerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterFsSectionResponse) string { return v.ServerAddress }).(pulumi.StringOutput)
}

// The name of the created GlusterFS volume.
func (o GlusterFsSectionResponseOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v GlusterFsSectionResponse) string { return v.VolumeName }).(pulumi.StringOutput)
}

type GlusterFsSectionResponsePtrOutput struct{ *pulumi.OutputState }

func (GlusterFsSectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlusterFsSectionResponse)(nil)).Elem()
}

func (o GlusterFsSectionResponsePtrOutput) ToGlusterFsSectionResponsePtrOutput() GlusterFsSectionResponsePtrOutput {
	return o
}

func (o GlusterFsSectionResponsePtrOutput) ToGlusterFsSectionResponsePtrOutputWithContext(ctx context.Context) GlusterFsSectionResponsePtrOutput {
	return o
}

func (o GlusterFsSectionResponsePtrOutput) Elem() GlusterFsSectionResponseOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) GlusterFsSectionResponse {
		if v != nil {
			return *v
		}
		var ret GlusterFsSectionResponse
		return ret
	}).(GlusterFsSectionResponseOutput)
}

// The server address of one of the servers that hosts the GlusterFS. Can be either the IP address or server name.
func (o GlusterFsSectionResponsePtrOutput) ServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServerAddress
	}).(pulumi.StringPtrOutput)
}

// The name of the created GlusterFS volume.
func (o GlusterFsSectionResponsePtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlusterFsSectionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithm struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// GridSamplingAlgorithmInput is an input type that accepts GridSamplingAlgorithmArgs and GridSamplingAlgorithmOutput values.
// You can construct a concrete instance of `GridSamplingAlgorithmInput` via:
//
//	GridSamplingAlgorithmArgs{...}
type GridSamplingAlgorithmInput interface {
	pulumi.Input

	ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput
	ToGridSamplingAlgorithmOutputWithContext(context.Context) GridSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmArgs struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (GridSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return i.ToGridSamplingAlgorithmOutputWithContext(context.Background())
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return o
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponse struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithmResponse)(nil)).Elem()
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutput() GridSamplingAlgorithmResponseOutput {
	return o
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutputWithContext(ctx context.Context) GridSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// A HDInsight compute.
type HDInsight struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// HDInsight compute properties
	Properties *HDInsightProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// HDInsightInput is an input type that accepts HDInsightArgs and HDInsightOutput values.
// You can construct a concrete instance of `HDInsightInput` via:
//
//	HDInsightArgs{...}
type HDInsightInput interface {
	pulumi.Input

	ToHDInsightOutput() HDInsightOutput
	ToHDInsightOutputWithContext(context.Context) HDInsightOutput
}

// A HDInsight compute.
type HDInsightArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// HDInsight compute properties
	Properties HDInsightPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (HDInsightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsight)(nil)).Elem()
}

func (i HDInsightArgs) ToHDInsightOutput() HDInsightOutput {
	return i.ToHDInsightOutputWithContext(context.Background())
}

func (i HDInsightArgs) ToHDInsightOutputWithContext(ctx context.Context) HDInsightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOutput)
}

func (i HDInsightArgs) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return i.ToHDInsightPtrOutputWithContext(context.Background())
}

func (i HDInsightArgs) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightOutput).ToHDInsightPtrOutputWithContext(ctx)
}

// HDInsightPtrInput is an input type that accepts HDInsightArgs, HDInsightPtr and HDInsightPtrOutput values.
// You can construct a concrete instance of `HDInsightPtrInput` via:
//
//	        HDInsightArgs{...}
//
//	or:
//
//	        nil
type HDInsightPtrInput interface {
	pulumi.Input

	ToHDInsightPtrOutput() HDInsightPtrOutput
	ToHDInsightPtrOutputWithContext(context.Context) HDInsightPtrOutput
}

type hdinsightPtrType HDInsightArgs

func HDInsightPtr(v *HDInsightArgs) HDInsightPtrInput {
	return (*hdinsightPtrType)(v)
}

func (*hdinsightPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsight)(nil)).Elem()
}

func (i *hdinsightPtrType) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return i.ToHDInsightPtrOutputWithContext(context.Background())
}

func (i *hdinsightPtrType) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPtrOutput)
}

// A HDInsight compute.
type HDInsightOutput struct{ *pulumi.OutputState }

func (HDInsightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsight)(nil)).Elem()
}

func (o HDInsightOutput) ToHDInsightOutput() HDInsightOutput {
	return o
}

func (o HDInsightOutput) ToHDInsightOutputWithContext(ctx context.Context) HDInsightOutput {
	return o
}

func (o HDInsightOutput) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return o.ToHDInsightPtrOutputWithContext(context.Background())
}

func (o HDInsightOutput) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HDInsight) *HDInsight {
		return &v
	}).(HDInsightPtrOutput)
}

// Location for the underlying compute
func (o HDInsightOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsight) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HDInsight) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// HDInsight compute properties
func (o HDInsightOutput) Properties() HDInsightPropertiesPtrOutput {
	return o.ApplyT(func(v HDInsight) *HDInsightProperties { return v.Properties }).(HDInsightPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsight) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type HDInsightPtrOutput struct{ *pulumi.OutputState }

func (HDInsightPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsight)(nil)).Elem()
}

func (o HDInsightPtrOutput) ToHDInsightPtrOutput() HDInsightPtrOutput {
	return o
}

func (o HDInsightPtrOutput) ToHDInsightPtrOutputWithContext(ctx context.Context) HDInsightPtrOutput {
	return o
}

func (o HDInsightPtrOutput) Elem() HDInsightOutput {
	return o.ApplyT(func(v *HDInsight) HDInsight {
		if v != nil {
			return *v
		}
		var ret HDInsight
		return ret
	}).(HDInsightOutput)
}

// Location for the underlying compute
func (o HDInsightPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HDInsight) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// HDInsight compute properties
func (o HDInsightPtrOutput) Properties() HDInsightPropertiesPtrOutput {
	return o.ApplyT(func(v *HDInsight) *HDInsightProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(HDInsightPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsight) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// HDInsight compute properties
type HDInsightProperties struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentials `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// HDInsightPropertiesInput is an input type that accepts HDInsightPropertiesArgs and HDInsightPropertiesOutput values.
// You can construct a concrete instance of `HDInsightPropertiesInput` via:
//
//	HDInsightPropertiesArgs{...}
type HDInsightPropertiesInput interface {
	pulumi.Input

	ToHDInsightPropertiesOutput() HDInsightPropertiesOutput
	ToHDInsightPropertiesOutputWithContext(context.Context) HDInsightPropertiesOutput
}

// HDInsight compute properties
type HDInsightPropertiesArgs struct {
	// Public IP address of the master node of the cluster.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount VirtualMachineSshCredentialsPtrInput `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort pulumi.IntPtrInput `pulumi:"sshPort"`
}

func (HDInsightPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightProperties)(nil)).Elem()
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesOutput() HDInsightPropertiesOutput {
	return i.ToHDInsightPropertiesOutputWithContext(context.Background())
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesOutputWithContext(ctx context.Context) HDInsightPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesOutput)
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return i.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (i HDInsightPropertiesArgs) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesOutput).ToHDInsightPropertiesPtrOutputWithContext(ctx)
}

// HDInsightPropertiesPtrInput is an input type that accepts HDInsightPropertiesArgs, HDInsightPropertiesPtr and HDInsightPropertiesPtrOutput values.
// You can construct a concrete instance of `HDInsightPropertiesPtrInput` via:
//
//	        HDInsightPropertiesArgs{...}
//
//	or:
//
//	        nil
type HDInsightPropertiesPtrInput interface {
	pulumi.Input

	ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput
	ToHDInsightPropertiesPtrOutputWithContext(context.Context) HDInsightPropertiesPtrOutput
}

type hdinsightPropertiesPtrType HDInsightPropertiesArgs

func HDInsightPropertiesPtr(v *HDInsightPropertiesArgs) HDInsightPropertiesPtrInput {
	return (*hdinsightPropertiesPtrType)(v)
}

func (*hdinsightPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightProperties)(nil)).Elem()
}

func (i *hdinsightPropertiesPtrType) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return i.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (i *hdinsightPropertiesPtrType) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HDInsightPropertiesPtrOutput)
}

// HDInsight compute properties
type HDInsightPropertiesOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightProperties)(nil)).Elem()
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesOutput() HDInsightPropertiesOutput {
	return o
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesOutputWithContext(ctx context.Context) HDInsightPropertiesOutput {
	return o
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return o.ToHDInsightPropertiesPtrOutputWithContext(context.Background())
}

func (o HDInsightPropertiesOutput) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HDInsightProperties) *HDInsightProperties {
		return &v
	}).(HDInsightPropertiesPtrOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *VirtualMachineSshCredentials { return v.AdministratorAccount }).(VirtualMachineSshCredentialsPtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightProperties) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

type HDInsightPropertiesPtrOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightProperties)(nil)).Elem()
}

func (o HDInsightPropertiesPtrOutput) ToHDInsightPropertiesPtrOutput() HDInsightPropertiesPtrOutput {
	return o
}

func (o HDInsightPropertiesPtrOutput) ToHDInsightPropertiesPtrOutputWithContext(ctx context.Context) HDInsightPropertiesPtrOutput {
	return o
}

func (o HDInsightPropertiesPtrOutput) Elem() HDInsightPropertiesOutput {
	return o.ApplyT(func(v *HDInsightProperties) HDInsightProperties {
		if v != nil {
			return *v
		}
		var ret HDInsightProperties
		return ret
	}).(HDInsightPropertiesOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesPtrOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *VirtualMachineSshCredentials {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsPtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesPtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HDInsightProperties) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// HDInsight compute properties
type HDInsightPropertiesResponse struct {
	// Public IP address of the master node of the cluster.
	Address *string `pulumi:"address"`
	// Admin credentials for master node of the cluster
	AdministratorAccount *VirtualMachineSshCredentialsResponse `pulumi:"administratorAccount"`
	// Port open for ssh connections on the master node of the cluster.
	SshPort *int `pulumi:"sshPort"`
}

// HDInsight compute properties
type HDInsightPropertiesResponseOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightPropertiesResponse)(nil)).Elem()
}

func (o HDInsightPropertiesResponseOutput) ToHDInsightPropertiesResponseOutput() HDInsightPropertiesResponseOutput {
	return o
}

func (o HDInsightPropertiesResponseOutput) ToHDInsightPropertiesResponseOutputWithContext(ctx context.Context) HDInsightPropertiesResponseOutput {
	return o
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesResponseOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *VirtualMachineSshCredentialsResponse {
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesResponseOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HDInsightPropertiesResponse) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

type HDInsightPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (HDInsightPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HDInsightPropertiesResponse)(nil)).Elem()
}

func (o HDInsightPropertiesResponsePtrOutput) ToHDInsightPropertiesResponsePtrOutput() HDInsightPropertiesResponsePtrOutput {
	return o
}

func (o HDInsightPropertiesResponsePtrOutput) ToHDInsightPropertiesResponsePtrOutputWithContext(ctx context.Context) HDInsightPropertiesResponsePtrOutput {
	return o
}

func (o HDInsightPropertiesResponsePtrOutput) Elem() HDInsightPropertiesResponseOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) HDInsightPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret HDInsightPropertiesResponse
		return ret
	}).(HDInsightPropertiesResponseOutput)
}

// Public IP address of the master node of the cluster.
func (o HDInsightPropertiesResponsePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for master node of the cluster
func (o HDInsightPropertiesResponsePtrOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *VirtualMachineSshCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Port open for ssh connections on the master node of the cluster.
func (o HDInsightPropertiesResponsePtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HDInsightPropertiesResponse) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// A HDInsight compute.
type HDInsightResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'HDInsight'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// HDInsight compute properties
	Properties *HDInsightPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A HDInsight compute.
type HDInsightResponseOutput struct{ *pulumi.OutputState }

func (HDInsightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HDInsightResponse)(nil)).Elem()
}

func (o HDInsightResponseOutput) ToHDInsightResponseOutput() HDInsightResponseOutput {
	return o
}

func (o HDInsightResponseOutput) ToHDInsightResponseOutputWithContext(ctx context.Context) HDInsightResponseOutput {
	return o
}

// Location for the underlying compute
func (o HDInsightResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'HDInsight'.
func (o HDInsightResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o HDInsightResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o HDInsightResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o HDInsightResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o HDInsightResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v HDInsightResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o HDInsightResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// HDInsight compute properties
func (o HDInsightResponseOutput) Properties() HDInsightPropertiesResponsePtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *HDInsightPropertiesResponse { return v.Properties }).(HDInsightPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o HDInsightResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v HDInsightResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o HDInsightResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v HDInsightResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o HDInsightResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HDInsightResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReference struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// IdAssetReferenceInput is an input type that accepts IdAssetReferenceArgs and IdAssetReferenceOutput values.
// You can construct a concrete instance of `IdAssetReferenceInput` via:
//
//	IdAssetReferenceArgs{...}
type IdAssetReferenceInput interface {
	pulumi.Input

	ToIdAssetReferenceOutput() IdAssetReferenceOutput
	ToIdAssetReferenceOutputWithContext(context.Context) IdAssetReferenceOutput
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceArgs struct {
	// [Required] ARM resource ID of the asset.
	AssetId pulumi.StringInput `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (IdAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return i.ToIdAssetReferenceOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput)
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput).ToIdAssetReferencePtrOutputWithContext(ctx)
}

// IdAssetReferencePtrInput is an input type that accepts IdAssetReferenceArgs, IdAssetReferencePtr and IdAssetReferencePtrOutput values.
// You can construct a concrete instance of `IdAssetReferencePtrInput` via:
//
//	        IdAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type IdAssetReferencePtrInput interface {
	pulumi.Input

	ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput
	ToIdAssetReferencePtrOutputWithContext(context.Context) IdAssetReferencePtrOutput
}

type idAssetReferencePtrType IdAssetReferenceArgs

func IdAssetReferencePtr(v *IdAssetReferenceArgs) IdAssetReferencePtrInput {
	return (*idAssetReferencePtrType)(v)
}

func (*idAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferencePtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdAssetReference) *IdAssetReference {
		return &v
	}).(IdAssetReferencePtrOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) Elem() IdAssetReferenceOutput {
	return o.ApplyT(func(v *IdAssetReference) IdAssetReference {
		if v != nil {
			return *v
		}
		var ret IdAssetReference
		return ret
	}).(IdAssetReferenceOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferencePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponse struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutput() IdAssetReferenceResponseOutput {
	return o
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutputWithContext(ctx context.Context) IdAssetReferenceResponseOutput {
	return o
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutput() IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutputWithContext(ctx context.Context) IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) Elem() IdAssetReferenceResponseOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) IdAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret IdAssetReferenceResponse
		return ret
	}).(IdAssetReferenceResponseOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponsePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type Identity struct {
	// The identity type.
	Type *ResourceIdentityType `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// IdentityInput is an input type that accepts IdentityArgs and IdentityOutput values.
// You can construct a concrete instance of `IdentityInput` via:
//
//	IdentityArgs{...}
type IdentityInput interface {
	pulumi.Input

	ToIdentityOutput() IdentityOutput
	ToIdentityOutputWithContext(context.Context) IdentityOutput
}

// Identity for the resource.
type IdentityArgs struct {
	// The identity type.
	Type ResourceIdentityTypePtrInput `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (IdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (i IdentityArgs) ToIdentityOutput() IdentityOutput {
	return i.ToIdentityOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput)
}

func (i IdentityArgs) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i IdentityArgs) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityOutput).ToIdentityPtrOutputWithContext(ctx)
}

// IdentityPtrInput is an input type that accepts IdentityArgs, IdentityPtr and IdentityPtrOutput values.
// You can construct a concrete instance of `IdentityPtrInput` via:
//
//	        IdentityArgs{...}
//
//	or:
//
//	        nil
type IdentityPtrInput interface {
	pulumi.Input

	ToIdentityPtrOutput() IdentityPtrOutput
	ToIdentityPtrOutputWithContext(context.Context) IdentityPtrOutput
}

type identityPtrType IdentityArgs

func IdentityPtr(v *IdentityArgs) IdentityPtrInput {
	return (*identityPtrType)(v)
}

func (*identityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (i *identityPtrType) ToIdentityPtrOutput() IdentityPtrOutput {
	return i.ToIdentityPtrOutputWithContext(context.Background())
}

func (i *identityPtrType) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityPtrOutput)
}

// Identity for the resource.
type IdentityOutput struct{ *pulumi.OutputState }

func (IdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Identity)(nil)).Elem()
}

func (o IdentityOutput) ToIdentityOutput() IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityOutputWithContext(ctx context.Context) IdentityOutput {
	return o
}

func (o IdentityOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o.ToIdentityPtrOutputWithContext(context.Background())
}

func (o IdentityOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Identity) *Identity {
		return &v
	}).(IdentityPtrOutput)
}

// The identity type.
func (o IdentityOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v Identity) *ResourceIdentityType { return v.Type }).(ResourceIdentityTypePtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Identity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type IdentityPtrOutput struct{ *pulumi.OutputState }

func (IdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Identity)(nil)).Elem()
}

func (o IdentityPtrOutput) ToIdentityPtrOutput() IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) ToIdentityPtrOutputWithContext(ctx context.Context) IdentityPtrOutput {
	return o
}

func (o IdentityPtrOutput) Elem() IdentityOutput {
	return o.ApplyT(func(v *Identity) Identity {
		if v != nil {
			return *v
		}
		var ret Identity
		return ret
	}).(IdentityOutput)
}

// The identity type.
func (o IdentityPtrOutput) Type() ResourceIdentityTypePtrOutput {
	return o.ApplyT(func(v *Identity) *ResourceIdentityType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ResourceIdentityTypePtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Identity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmk struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// IdentityForCmkInput is an input type that accepts IdentityForCmkArgs and IdentityForCmkOutput values.
// You can construct a concrete instance of `IdentityForCmkInput` via:
//
//	IdentityForCmkArgs{...}
type IdentityForCmkInput interface {
	pulumi.Input

	ToIdentityForCmkOutput() IdentityForCmkOutput
	ToIdentityForCmkOutputWithContext(context.Context) IdentityForCmkOutput
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkArgs struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity pulumi.StringPtrInput `pulumi:"userAssignedIdentity"`
}

func (IdentityForCmkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return i.ToIdentityForCmkOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput)
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i IdentityForCmkArgs) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkOutput).ToIdentityForCmkPtrOutputWithContext(ctx)
}

// IdentityForCmkPtrInput is an input type that accepts IdentityForCmkArgs, IdentityForCmkPtr and IdentityForCmkPtrOutput values.
// You can construct a concrete instance of `IdentityForCmkPtrInput` via:
//
//	        IdentityForCmkArgs{...}
//
//	or:
//
//	        nil
type IdentityForCmkPtrInput interface {
	pulumi.Input

	ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput
	ToIdentityForCmkPtrOutputWithContext(context.Context) IdentityForCmkPtrOutput
}

type identityForCmkPtrType IdentityForCmkArgs

func IdentityForCmkPtr(v *IdentityForCmkArgs) IdentityForCmkPtrInput {
	return (*identityForCmkPtrType)(v)
}

func (*identityForCmkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return i.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (i *identityForCmkPtrType) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityForCmkPtrOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkOutput struct{ *pulumi.OutputState }

func (IdentityForCmkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutput() IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkOutputWithContext(ctx context.Context) IdentityForCmkOutput {
	return o
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o.ToIdentityForCmkPtrOutputWithContext(context.Background())
}

func (o IdentityForCmkOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityForCmk) *IdentityForCmk {
		return &v
	}).(IdentityForCmkPtrOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmk) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkPtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmk)(nil)).Elem()
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutput() IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) ToIdentityForCmkPtrOutputWithContext(ctx context.Context) IdentityForCmkPtrOutput {
	return o
}

func (o IdentityForCmkPtrOutput) Elem() IdentityForCmkOutput {
	return o.ApplyT(func(v *IdentityForCmk) IdentityForCmk {
		if v != nil {
			return *v
		}
		var ret IdentityForCmk
		return ret
	}).(IdentityForCmkOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkPtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmk) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkResponse struct {
	// The ArmId of the user assigned identity that will be used to access the customer managed key vault
	UserAssignedIdentity *string `pulumi:"userAssignedIdentity"`
}

// Identity that will be used to access key vault for encryption at rest
type IdentityForCmkResponseOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutput() IdentityForCmkResponseOutput {
	return o
}

func (o IdentityForCmkResponseOutput) ToIdentityForCmkResponseOutputWithContext(ctx context.Context) IdentityForCmkResponseOutput {
	return o
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkResponseOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityForCmkResponse) *string { return v.UserAssignedIdentity }).(pulumi.StringPtrOutput)
}

type IdentityForCmkResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityForCmkResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityForCmkResponse)(nil)).Elem()
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutput() IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) ToIdentityForCmkResponsePtrOutputWithContext(ctx context.Context) IdentityForCmkResponsePtrOutput {
	return o
}

func (o IdentityForCmkResponsePtrOutput) Elem() IdentityForCmkResponseOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) IdentityForCmkResponse {
		if v != nil {
			return *v
		}
		var ret IdentityForCmkResponse
		return ret
	}).(IdentityForCmkResponseOutput)
}

// The ArmId of the user assigned identity that will be used to access the customer managed key vault
func (o IdentityForCmkResponsePtrOutput) UserAssignedIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityForCmkResponse) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentity
	}).(pulumi.StringPtrOutput)
}

// Identity for the resource.
type IdentityResponse struct {
	// The principal ID of resource identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of resource.
	TenantId string `pulumi:"tenantId"`
	// The identity type.
	Type *string `pulumi:"type"`
	// The user assigned identities associated with the resource.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Identity for the resource.
type IdentityResponseOutput struct{ *pulumi.OutputState }

func (IdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityResponse)(nil)).Elem()
}

func (o IdentityResponseOutput) ToIdentityResponseOutput() IdentityResponseOutput {
	return o
}

func (o IdentityResponseOutput) ToIdentityResponseOutputWithContext(ctx context.Context) IdentityResponseOutput {
	return o
}

// The principal ID of resource identity.
func (o IdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of resource.
func (o IdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// The identity type.
func (o IdentityResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v IdentityResponse) map[string]UserAssignedIdentityResponse { return v.UserAssignedIdentities }).(UserAssignedIdentityResponseMapOutput)
}

type IdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (IdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityResponse)(nil)).Elem()
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutput() IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) ToIdentityResponsePtrOutputWithContext(ctx context.Context) IdentityResponsePtrOutput {
	return o
}

func (o IdentityResponsePtrOutput) Elem() IdentityResponseOutput {
	return o.ApplyT(func(v *IdentityResponse) IdentityResponse {
		if v != nil {
			return *v
		}
		var ret IdentityResponse
		return ret
	}).(IdentityResponseOutput)
}

// The principal ID of resource identity.
func (o IdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of resource.
func (o IdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// The identity type.
func (o IdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The user assigned identities associated with the resource.
func (o IdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *IdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Describes the Image Specifications
type Image struct {
	// Image reference
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for Image
func (val *Image) Defaults() *Image {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

// ImageInput is an input type that accepts ImageArgs and ImageOutput values.
// You can construct a concrete instance of `ImageInput` via:
//
//	ImageArgs{...}
type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(context.Context) ImageOutput
}

// Describes the Image Specifications
type ImageArgs struct {
	// Image reference
	Reference pulumi.StringPtrInput `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
	Type pulumi.StringPtrInput `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ImageArgs
func (val *ImageArgs) Defaults() *ImageArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("docker")
	}
	return &tmp
}
func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (i ImageArgs) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i ImageArgs) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i ImageArgs) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i ImageArgs) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput).ToImagePtrOutputWithContext(ctx)
}

// ImagePtrInput is an input type that accepts ImageArgs, ImagePtr and ImagePtrOutput values.
// You can construct a concrete instance of `ImagePtrInput` via:
//
//	        ImageArgs{...}
//
//	or:
//
//	        nil
type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func ImagePtr(v *ImageArgs) ImagePtrInput {
	return (*imagePtrType)(v)
}

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

// Describes the Image Specifications
type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

// Image reference
func (o ImageOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
func (o ImageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Image) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// Image reference
func (o ImagePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
func (o ImagePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassification struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassification
func (val *ImageClassification) Defaults() *ImageClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageClassificationInput is an input type that accepts ImageClassificationArgs and ImageClassificationOutput values.
// You can construct a concrete instance of `ImageClassificationInput` via:
//
//	ImageClassificationArgs{...}
type ImageClassificationInput interface {
	pulumi.Input

	ToImageClassificationOutput() ImageClassificationOutput
	ToImageClassificationOutputWithContext(context.Context) ImageClassificationOutput
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationArgs
func (val *ImageClassificationArgs) Defaults() *ImageClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}

	return &tmp
}
func (ImageClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (i ImageClassificationArgs) ToImageClassificationOutput() ImageClassificationOutput {
	return i.ToImageClassificationOutputWithContext(context.Background())
}

func (i ImageClassificationArgs) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationOutput struct{ *pulumi.OutputState }

func (ImageClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (o ImageClassificationOutput) ToImageClassificationOutput() ImageClassificationOutput {
	return o
}

func (o ImageClassificationOutput) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassification) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassification) []ImageModelDistributionSettingsClassification { return v.SearchSpace }).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageClassification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageClassification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassification) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabel struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabel
func (val *ImageClassificationMultilabel) Defaults() *ImageClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageClassificationMultilabelInput is an input type that accepts ImageClassificationMultilabelArgs and ImageClassificationMultilabelOutput values.
// You can construct a concrete instance of `ImageClassificationMultilabelInput` via:
//
//	ImageClassificationMultilabelArgs{...}
type ImageClassificationMultilabelInput interface {
	pulumi.Input

	ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput
	ToImageClassificationMultilabelOutputWithContext(context.Context) ImageClassificationMultilabelOutput
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelArgs
func (val *ImageClassificationMultilabelArgs) Defaults() *ImageClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("IOU")
	}

	return &tmp
}
func (ImageClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return i.ToImageClassificationMultilabelOutputWithContext(context.Background())
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationMultilabelOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return o
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) []ImageModelDistributionSettingsClassification {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationMultilabelOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationMultilabelOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageClassificationMultilabelOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationMultilabelOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelResponse
func (val *ImageClassificationMultilabelResponse) Defaults() *ImageClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabelResponse)(nil)).Elem()
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutput() ImageClassificationMultilabelResponseOutput {
	return o
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutputWithContext(ctx context.Context) ImageClassificationMultilabelResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageModelSettingsClassificationResponse {
		return v.ModelSettings
	}).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationMultilabelResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationMultilabelResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageClassificationMultilabelResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationMultilabelResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageClassificationResponse
func (val *ImageClassificationResponse) Defaults() *ImageClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationResponse)(nil)).Elem()
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutput() ImageClassificationResponseOutput {
	return o
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutputWithContext(ctx context.Context) ImageClassificationResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageModelSettingsClassificationResponse { return v.ModelSettings }).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageClassificationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentation struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentation
func (val *ImageInstanceSegmentation) Defaults() *ImageInstanceSegmentation {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageInstanceSegmentationInput is an input type that accepts ImageInstanceSegmentationArgs and ImageInstanceSegmentationOutput values.
// You can construct a concrete instance of `ImageInstanceSegmentationInput` via:
//
//	ImageInstanceSegmentationArgs{...}
type ImageInstanceSegmentationInput interface {
	pulumi.Input

	ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput
	ToImageInstanceSegmentationOutputWithContext(context.Context) ImageInstanceSegmentationOutput
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationArgs
func (val *ImageInstanceSegmentationArgs) Defaults() *ImageInstanceSegmentationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}

	return &tmp
}
func (ImageInstanceSegmentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return i.ToImageInstanceSegmentationOutputWithContext(context.Background())
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageInstanceSegmentationOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return o
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) []ImageModelDistributionSettingsObjectDetection {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageInstanceSegmentationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageInstanceSegmentationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageInstanceSegmentationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageInstanceSegmentationOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationResponse
func (val *ImageInstanceSegmentationResponse) Defaults() *ImageInstanceSegmentationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponseOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentationResponse)(nil)).Elem()
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutput() ImageInstanceSegmentationResponseOutput {
	return o
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutputWithContext(ctx context.Context) ImageInstanceSegmentationResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageInstanceSegmentationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageInstanceSegmentationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageInstanceSegmentationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageInstanceSegmentationResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettings struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettings
func (val *ImageLimitSettings) Defaults() *ImageLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// ImageLimitSettingsInput is an input type that accepts ImageLimitSettingsArgs and ImageLimitSettingsOutput values.
// You can construct a concrete instance of `ImageLimitSettingsInput` via:
//
//	ImageLimitSettingsArgs{...}
type ImageLimitSettingsInput interface {
	pulumi.Input

	ToImageLimitSettingsOutput() ImageLimitSettingsOutput
	ToImageLimitSettingsOutputWithContext(context.Context) ImageLimitSettingsOutput
}

// Limit settings for the AutoML job.
type ImageLimitSettingsArgs struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsArgs
func (val *ImageLimitSettingsArgs) Defaults() *ImageLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("P7D")
	}
	return &tmp
}
func (ImageLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return i.ToImageLimitSettingsOutputWithContext(context.Background())
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLimitSettingsOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return o
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponse struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsResponse
func (val *ImageLimitSettingsResponse) Defaults() *ImageLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettingsResponse)(nil)).Elem()
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutput() ImageLimitSettingsResponseOutput {
	return o
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutputWithContext(ctx context.Context) ImageLimitSettingsResponseOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Returns metadata about the operating system image for this compute instance.
type ImageMetadataResponse struct {
	// Specifies the current operating system image version this compute instance is running on.
	CurrentImageVersion *string `pulumi:"currentImageVersion"`
	// Specifies whether this compute instance is running on the latest operating system image.
	IsLatestOsImageVersion *bool `pulumi:"isLatestOsImageVersion"`
	// Specifies the latest available operating system image version.
	LatestImageVersion *string `pulumi:"latestImageVersion"`
}

// Returns metadata about the operating system image for this compute instance.
type ImageMetadataResponseOutput struct{ *pulumi.OutputState }

func (ImageMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageMetadataResponse)(nil)).Elem()
}

func (o ImageMetadataResponseOutput) ToImageMetadataResponseOutput() ImageMetadataResponseOutput {
	return o
}

func (o ImageMetadataResponseOutput) ToImageMetadataResponseOutputWithContext(ctx context.Context) ImageMetadataResponseOutput {
	return o
}

// Specifies the current operating system image version this compute instance is running on.
func (o ImageMetadataResponseOutput) CurrentImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *string { return v.CurrentImageVersion }).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is running on the latest operating system image.
func (o ImageMetadataResponseOutput) IsLatestOsImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *bool { return v.IsLatestOsImageVersion }).(pulumi.BoolPtrOutput)
}

// Specifies the latest available operating system image version.
func (o ImageMetadataResponseOutput) LatestImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageMetadataResponse) *string { return v.LatestImageVersion }).(pulumi.StringPtrOutput)
}

type ImageMetadataResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageMetadataResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageMetadataResponse)(nil)).Elem()
}

func (o ImageMetadataResponsePtrOutput) ToImageMetadataResponsePtrOutput() ImageMetadataResponsePtrOutput {
	return o
}

func (o ImageMetadataResponsePtrOutput) ToImageMetadataResponsePtrOutputWithContext(ctx context.Context) ImageMetadataResponsePtrOutput {
	return o
}

func (o ImageMetadataResponsePtrOutput) Elem() ImageMetadataResponseOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) ImageMetadataResponse {
		if v != nil {
			return *v
		}
		var ret ImageMetadataResponse
		return ret
	}).(ImageMetadataResponseOutput)
}

// Specifies the current operating system image version this compute instance is running on.
func (o ImageMetadataResponsePtrOutput) CurrentImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.CurrentImageVersion
	}).(pulumi.StringPtrOutput)
}

// Specifies whether this compute instance is running on the latest operating system image.
func (o ImageMetadataResponsePtrOutput) IsLatestOsImageVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IsLatestOsImageVersion
	}).(pulumi.BoolPtrOutput)
}

// Specifies the latest available operating system image version.
func (o ImageMetadataResponsePtrOutput) LatestImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageMetadataResponse) *string {
		if v == nil {
			return nil
		}
		return v.LatestImageVersion
	}).(pulumi.StringPtrOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassification struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// ImageModelDistributionSettingsClassificationInput is an input type that accepts ImageModelDistributionSettingsClassificationArgs and ImageModelDistributionSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationInput` via:
//
//	ImageModelDistributionSettingsClassificationArgs{...}
type ImageModelDistributionSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput
	ToImageModelDistributionSettingsClassificationOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.StringPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.StringPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.StringPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.StringPtrInput `pulumi:"weightedLoss"`
}

func (ImageModelDistributionSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return i.ToImageModelDistributionSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationOutput)
}

// ImageModelDistributionSettingsClassificationArrayInput is an input type that accepts ImageModelDistributionSettingsClassificationArray and ImageModelDistributionSettingsClassificationArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationArrayInput` via:
//
//	ImageModelDistributionSettingsClassificationArray{ ImageModelDistributionSettingsClassificationArgs{...} }
type ImageModelDistributionSettingsClassificationArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput
	ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationArrayOutput
}

type ImageModelDistributionSettingsClassificationArray []ImageModelDistributionSettingsClassificationInput

func (ImageModelDistributionSettingsClassificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return i.ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassification {
		return vs[0].([]ImageModelDistributionSettingsClassification)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutput() ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutput() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassificationResponse {
		return vs[0].([]ImageModelDistributionSettingsClassificationResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationResponseOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetection struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// ImageModelDistributionSettingsObjectDetectionInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArgs and ImageModelDistributionSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArgs{...}
type ImageModelDistributionSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput
	ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.StringPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.StringPtrInput `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.StringPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.StringPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.StringPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.StringPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold pulumi.StringPtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.StringPtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold pulumi.StringPtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.StringPtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
}

func (ImageModelDistributionSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// ImageModelDistributionSettingsObjectDetectionArrayInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArray and ImageModelDistributionSettingsObjectDetectionArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionArrayInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArray{ ImageModelDistributionSettingsObjectDetectionArgs{...} }
type ImageModelDistributionSettingsObjectDetectionArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput
	ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput
}

type ImageModelDistributionSettingsObjectDetectionArray []ImageModelDistributionSettingsObjectDetectionInput

func (ImageModelDistributionSettingsObjectDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TilePredictionsNmsThreshold }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetection {
		return vs[0].([]ImageModelDistributionSettingsObjectDetection)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
type ImageModelDistributionSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutput() ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.EnableOnnxNormalization
	}).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.TilePredictionsNmsThreshold
	}).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutput() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetectionResponse {
		return vs[0].([]ImageModelDistributionSettingsObjectDetectionResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionResponseOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassification struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassification
func (val *ImageModelSettingsClassification) Defaults() *ImageModelSettingsClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// ImageModelSettingsClassificationInput is an input type that accepts ImageModelSettingsClassificationArgs and ImageModelSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationInput` via:
//
//	ImageModelSettingsClassificationArgs{...}
type ImageModelSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput
	ToImageModelSettingsClassificationOutputWithContext(context.Context) ImageModelSettingsClassificationOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel MLFlowModelJobInputPtrInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.IntPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.IntPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.IntPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.IntPtrInput `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationArgs
func (val *ImageModelSettingsClassificationArgs) Defaults() *ImageModelSettingsClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return i.ToImageModelSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput)
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput).ToImageModelSettingsClassificationPtrOutputWithContext(ctx)
}

// ImageModelSettingsClassificationPtrInput is an input type that accepts ImageModelSettingsClassificationArgs, ImageModelSettingsClassificationPtr and ImageModelSettingsClassificationPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationPtrInput` via:
//
//	        ImageModelSettingsClassificationArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsClassificationPtrInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput
	ToImageModelSettingsClassificationPtrOutputWithContext(context.Context) ImageModelSettingsClassificationPtrOutput
}

type imageModelSettingsClassificationPtrType ImageModelSettingsClassificationArgs

func ImageModelSettingsClassificationPtr(v *ImageModelSettingsClassificationArgs) ImageModelSettingsClassificationPtrInput {
	return (*imageModelSettingsClassificationPtrType)(v)
}

func (*imageModelSettingsClassificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsClassification) *ImageModelSettingsClassification {
		return &v
	}).(ImageModelSettingsClassificationPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *MLFlowModelJobInput { return v.CheckpointModel }).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) Elem() ImageModelSettingsClassificationOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) ImageModelSettingsClassification {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassification
		return ret
	}).(ImageModelSettingsClassificationOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *MLFlowModelJobInput {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationPtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationResponse
func (val *ImageModelSettingsClassificationResponse) Defaults() *ImageModelSettingsClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutput() ImageModelSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *MLFlowModelJobInputResponse {
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponseOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutput() ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) Elem() ImageModelSettingsClassificationResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) ImageModelSettingsClassificationResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassificationResponse
		return ret
	}).(ImageModelSettingsClassificationResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *MLFlowModelJobInputResponse {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetection struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetection
func (val *ImageModelSettingsObjectDetection) Defaults() *ImageModelSettingsObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// ImageModelSettingsObjectDetectionInput is an input type that accepts ImageModelSettingsObjectDetectionArgs and ImageModelSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionInput` via:
//
//	ImageModelSettingsObjectDetectionArgs{...}
type ImageModelSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput
	ToImageModelSettingsObjectDetectionOutputWithContext(context.Context) ImageModelSettingsObjectDetectionOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.IntPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.Float64PtrInput `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel MLFlowModelJobInputPtrInput `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.IntPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.IntPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.IntPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.BoolPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold pulumi.Float64PtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.Float64PtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold pulumi.Float64PtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.Float64PtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionArgs
func (val *ImageModelSettingsObjectDetectionArgs) Defaults() *ImageModelSettingsObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.ModelSize == nil {
		tmp.ModelSize = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	if tmp.ValidationMetricType == nil {
		tmp.ValidationMetricType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return i.ToImageModelSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput)
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput).ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx)
}

// ImageModelSettingsObjectDetectionPtrInput is an input type that accepts ImageModelSettingsObjectDetectionArgs, ImageModelSettingsObjectDetectionPtr and ImageModelSettingsObjectDetectionPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionPtrInput` via:
//
//	        ImageModelSettingsObjectDetectionArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsObjectDetectionPtrInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput
	ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Context) ImageModelSettingsObjectDetectionPtrOutput
}

type imageModelSettingsObjectDetectionPtrType ImageModelSettingsObjectDetectionArgs

func ImageModelSettingsObjectDetectionPtr(v *ImageModelSettingsObjectDetectionArgs) ImageModelSettingsObjectDetectionPtrInput {
	return (*imageModelSettingsObjectDetectionPtrType)(v)
}

func (*imageModelSettingsObjectDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsObjectDetection) *ImageModelSettingsObjectDetection {
		return &v
	}).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *MLFlowModelJobInput { return v.CheckpointModel }).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) Elem() ImageModelSettingsObjectDetectionOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) ImageModelSettingsObjectDetection {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetection
		return ret
	}).(ImageModelSettingsObjectDetectionOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointModel() MLFlowModelJobInputPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *MLFlowModelJobInput {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The pretrained checkpoint model for incremental training.
	CheckpointModel *MLFlowModelJobInputResponse `pulumi:"checkpointModel"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionResponse
func (val *ImageModelSettingsObjectDetectionResponse) Defaults() *ImageModelSettingsObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.CheckpointModel = tmp.CheckpointModel.Defaults()

	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutput() ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *MLFlowModelJobInputResponse {
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutput() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Elem() ImageModelSettingsObjectDetectionResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) ImageModelSettingsObjectDetectionResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetectionResponse
		return ret
	}).(ImageModelSettingsObjectDetectionResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The pretrained checkpoint model for incremental training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointModel() MLFlowModelJobInputResponsePtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *MLFlowModelJobInputResponse {
		if v == nil {
			return nil
		}
		return v.CheckpointModel
	}).(MLFlowModelJobInputResponsePtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetection struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetection
func (val *ImageObjectDetection) Defaults() *ImageObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageObjectDetectionInput is an input type that accepts ImageObjectDetectionArgs and ImageObjectDetectionOutput values.
// You can construct a concrete instance of `ImageObjectDetectionInput` via:
//
//	ImageObjectDetectionArgs{...}
type ImageObjectDetectionInput interface {
	pulumi.Input

	ToImageObjectDetectionOutput() ImageObjectDetectionOutput
	ToImageObjectDetectionOutputWithContext(context.Context) ImageObjectDetectionOutput
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionArgs struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionArgs
func (val *ImageObjectDetectionArgs) Defaults() *ImageObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}

	return &tmp
}
func (ImageObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return i.ToImageObjectDetectionOutputWithContext(context.Background())
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageObjectDetectionOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return o
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageObjectDetection) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageObjectDetection) []ImageModelDistributionSettingsObjectDetection { return v.SearchSpace }).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageObjectDetectionOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetection) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageObjectDetectionOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v ImageObjectDetection) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o ImageObjectDetectionOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageObjectDetectionOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponse struct {
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionResponse
func (val *ImageObjectDetectionResponse) Defaults() *ImageObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetectionResponse)(nil)).Elem()
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutput() ImageObjectDetectionResponseOutput {
	return o
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutputWithContext(ctx context.Context) ImageObjectDetectionResponseOutput {
	return o
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageObjectDetectionResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o ImageObjectDetectionResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o ImageObjectDetectionResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageObjectDetectionResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// Describes the Image Specifications
type ImageResponse struct {
	// Image reference
	Reference *string `pulumi:"reference"`
	// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
	Type *string `pulumi:"type"`
}

// Defaults sets the appropriate defaults for ImageResponse
func (val *ImageResponse) Defaults() *ImageResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "docker"
		tmp.Type = &type_
	}
	return &tmp
}

// Describes the Image Specifications
type ImageResponseOutput struct{ *pulumi.OutputState }

func (ImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (o ImageResponseOutput) ToImageResponseOutput() ImageResponseOutput {
	return o
}

func (o ImageResponseOutput) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return o
}

// Image reference
func (o ImageResponseOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageResponse) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
func (o ImageResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ImageResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageResponse)(nil)).Elem()
}

func (o ImageResponsePtrOutput) ToImageResponsePtrOutput() ImageResponsePtrOutput {
	return o
}

func (o ImageResponsePtrOutput) ToImageResponsePtrOutputWithContext(ctx context.Context) ImageResponsePtrOutput {
	return o
}

func (o ImageResponsePtrOutput) Elem() ImageResponseOutput {
	return o.ApplyT(func(v *ImageResponse) ImageResponse {
		if v != nil {
			return *v
		}
		var ret ImageResponse
		return ret
	}).(ImageResponseOutput)
}

// Image reference
func (o ImageResponsePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// Type of the image. Possible values are: docker - For docker images. azureml - For AzureML images
func (o ImageResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageResponse) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettings struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// ImageSweepSettingsInput is an input type that accepts ImageSweepSettingsArgs and ImageSweepSettingsOutput values.
// You can construct a concrete instance of `ImageSweepSettingsInput` via:
//
//	ImageSweepSettingsArgs{...}
type ImageSweepSettingsInput interface {
	pulumi.Input

	ToImageSweepSettingsOutput() ImageSweepSettingsOutput
	ToImageSweepSettingsOutputWithContext(context.Context) ImageSweepSettingsOutput
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsArgs struct {
	// Type of early termination policy.
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm pulumi.StringInput `pulumi:"samplingAlgorithm"`
}

func (ImageSweepSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return i.ToImageSweepSettingsOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput)
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput).ToImageSweepSettingsPtrOutputWithContext(ctx)
}

// ImageSweepSettingsPtrInput is an input type that accepts ImageSweepSettingsArgs, ImageSweepSettingsPtr and ImageSweepSettingsPtrOutput values.
// You can construct a concrete instance of `ImageSweepSettingsPtrInput` via:
//
//	        ImageSweepSettingsArgs{...}
//
//	or:
//
//	        nil
type ImageSweepSettingsPtrInput interface {
	pulumi.Input

	ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput
	ToImageSweepSettingsPtrOutputWithContext(context.Context) ImageSweepSettingsPtrOutput
}

type imageSweepSettingsPtrType ImageSweepSettingsArgs

func ImageSweepSettingsPtr(v *ImageSweepSettingsArgs) ImageSweepSettingsPtrInput {
	return (*imageSweepSettingsPtrType)(v)
}

func (*imageSweepSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageSweepSettings) *ImageSweepSettings {
		return &v
	}).(ImageSweepSettingsPtrOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettings) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettings) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsPtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) Elem() ImageSweepSettingsOutput {
	return o.ApplyT(func(v *ImageSweepSettings) ImageSweepSettings {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettings
		return ret
	}).(ImageSweepSettingsOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsPtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsPtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponse struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutput() ImageSweepSettingsResponseOutput {
	return o
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutputWithContext(ctx context.Context) ImageSweepSettingsResponseOutput {
	return o
}

// Type of early termination policy.
func (o ImageSweepSettingsResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponseOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutput() ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutputWithContext(ctx context.Context) ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) Elem() ImageSweepSettingsResponseOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) ImageSweepSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettingsResponse
		return ret
	}).(ImageSweepSettingsResponseOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsResponsePtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponsePtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Dto object representing index column
type IndexColumn struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumn
func (val *IndexColumn) Defaults() *IndexColumn {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// IndexColumnInput is an input type that accepts IndexColumnArgs and IndexColumnOutput values.
// You can construct a concrete instance of `IndexColumnInput` via:
//
//	IndexColumnArgs{...}
type IndexColumnInput interface {
	pulumi.Input

	ToIndexColumnOutput() IndexColumnOutput
	ToIndexColumnOutputWithContext(context.Context) IndexColumnOutput
}

// Dto object representing index column
type IndexColumnArgs struct {
	// Specifies the column name
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// Specifies the data type
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnArgs
func (val *IndexColumnArgs) Defaults() *IndexColumnArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		tmp.DataType = pulumi.StringPtr("String")
	}
	return &tmp
}
func (IndexColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (i IndexColumnArgs) ToIndexColumnOutput() IndexColumnOutput {
	return i.ToIndexColumnOutputWithContext(context.Background())
}

func (i IndexColumnArgs) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnOutput)
}

// IndexColumnArrayInput is an input type that accepts IndexColumnArray and IndexColumnArrayOutput values.
// You can construct a concrete instance of `IndexColumnArrayInput` via:
//
//	IndexColumnArray{ IndexColumnArgs{...} }
type IndexColumnArrayInput interface {
	pulumi.Input

	ToIndexColumnArrayOutput() IndexColumnArrayOutput
	ToIndexColumnArrayOutputWithContext(context.Context) IndexColumnArrayOutput
}

type IndexColumnArray []IndexColumnInput

func (IndexColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (i IndexColumnArray) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return i.ToIndexColumnArrayOutputWithContext(context.Background())
}

func (i IndexColumnArray) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexColumnArrayOutput)
}

// Dto object representing index column
type IndexColumnOutput struct{ *pulumi.OutputState }

func (IndexColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumn)(nil)).Elem()
}

func (o IndexColumnOutput) ToIndexColumnOutput() IndexColumnOutput {
	return o
}

func (o IndexColumnOutput) ToIndexColumnOutputWithContext(ctx context.Context) IndexColumnOutput {
	return o
}

// Specifies the column name
func (o IndexColumnOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumn)(nil)).Elem()
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutput() IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) ToIndexColumnArrayOutputWithContext(ctx context.Context) IndexColumnArrayOutput {
	return o
}

func (o IndexColumnArrayOutput) Index(i pulumi.IntInput) IndexColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumn {
		return vs[0].([]IndexColumn)[vs[1].(int)]
	}).(IndexColumnOutput)
}

// Dto object representing index column
type IndexColumnResponse struct {
	// Specifies the column name
	ColumnName *string `pulumi:"columnName"`
	// Specifies the data type
	DataType *string `pulumi:"dataType"`
}

// Defaults sets the appropriate defaults for IndexColumnResponse
func (val *IndexColumnResponse) Defaults() *IndexColumnResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing index column
type IndexColumnResponseOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutput() IndexColumnResponseOutput {
	return o
}

func (o IndexColumnResponseOutput) ToIndexColumnResponseOutputWithContext(ctx context.Context) IndexColumnResponseOutput {
	return o
}

// Specifies the column name
func (o IndexColumnResponseOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// Specifies the data type
func (o IndexColumnResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IndexColumnResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

type IndexColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexColumnResponse)(nil)).Elem()
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutput() IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) ToIndexColumnResponseArrayOutputWithContext(ctx context.Context) IndexColumnResponseArrayOutput {
	return o
}

func (o IndexColumnResponseArrayOutput) Index(i pulumi.IntInput) IndexColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexColumnResponse {
		return vs[0].([]IndexColumnResponse)[vs[1].(int)]
	}).(IndexColumnResponseOutput)
}

type InferenceContainerProperties struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *Route `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *Route `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *Route `pulumi:"scoringRoute"`
}

// InferenceContainerPropertiesInput is an input type that accepts InferenceContainerPropertiesArgs and InferenceContainerPropertiesOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesInput` via:
//
//	InferenceContainerPropertiesArgs{...}
type InferenceContainerPropertiesInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput
	ToInferenceContainerPropertiesOutputWithContext(context.Context) InferenceContainerPropertiesOutput
}

type InferenceContainerPropertiesArgs struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute RoutePtrInput `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute RoutePtrInput `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute RoutePtrInput `pulumi:"scoringRoute"`
}

func (InferenceContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return i.ToInferenceContainerPropertiesOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput)
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput).ToInferenceContainerPropertiesPtrOutputWithContext(ctx)
}

// InferenceContainerPropertiesPtrInput is an input type that accepts InferenceContainerPropertiesArgs, InferenceContainerPropertiesPtr and InferenceContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesPtrInput` via:
//
//	        InferenceContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type InferenceContainerPropertiesPtrInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput
	ToInferenceContainerPropertiesPtrOutputWithContext(context.Context) InferenceContainerPropertiesPtrOutput
}

type inferenceContainerPropertiesPtrType InferenceContainerPropertiesArgs

func InferenceContainerPropertiesPtr(v *InferenceContainerPropertiesArgs) InferenceContainerPropertiesPtrInput {
	return (*inferenceContainerPropertiesPtrType)(v)
}

func (*inferenceContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesPtrOutput)
}

type InferenceContainerPropertiesOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceContainerProperties) *InferenceContainerProperties {
		return &v
	}).(InferenceContainerPropertiesPtrOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.LivenessRoute }).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ReadinessRoute }).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ScoringRoute }).(RoutePtrOutput)
}

type InferenceContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) Elem() InferenceContainerPropertiesOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) InferenceContainerProperties {
		if v != nil {
			return *v
		}
		var ret InferenceContainerProperties
		return ret
	}).(InferenceContainerPropertiesOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RoutePtrOutput)
}

type InferenceContainerPropertiesResponse struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *RouteResponse `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *RouteResponse `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *RouteResponse `pulumi:"scoringRoute"`
}

type InferenceContainerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutput() InferenceContainerPropertiesResponseOutput {
	return o
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponseOutput {
	return o
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.LivenessRoute }).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ReadinessRoute }).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ScoringRoute }).(RouteResponsePtrOutput)
}

type InferenceContainerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutput() InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) Elem() InferenceContainerPropertiesResponseOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) InferenceContainerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret InferenceContainerPropertiesResponse
		return ret
	}).(InferenceContainerPropertiesResponseOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RouteResponsePtrOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointType struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode string `pulumi:"authMode"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId string `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// InferenceEndpointTypeInput is an input type that accepts InferenceEndpointTypeArgs and InferenceEndpointTypeOutput values.
// You can construct a concrete instance of `InferenceEndpointTypeInput` via:
//
//	InferenceEndpointTypeArgs{...}
type InferenceEndpointTypeInput interface {
	pulumi.Input

	ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput
	ToInferenceEndpointTypeOutputWithContext(context.Context) InferenceEndpointTypeOutput
}

// InferenceEndpoint configuration
type InferenceEndpointTypeArgs struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (InferenceEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointType)(nil)).Elem()
}

func (i InferenceEndpointTypeArgs) ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput {
	return i.ToInferenceEndpointTypeOutputWithContext(context.Background())
}

func (i InferenceEndpointTypeArgs) ToInferenceEndpointTypeOutputWithContext(ctx context.Context) InferenceEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceEndpointTypeOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointTypeOutput struct{ *pulumi.OutputState }

func (InferenceEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointType)(nil)).Elem()
}

func (o InferenceEndpointTypeOutput) ToInferenceEndpointTypeOutput() InferenceEndpointTypeOutput {
	return o
}

func (o InferenceEndpointTypeOutput) ToInferenceEndpointTypeOutputWithContext(ctx context.Context) InferenceEndpointTypeOutput {
	return o
}

// [Required] Authentication mode for the endpoint.
func (o InferenceEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Description of the resource.
func (o InferenceEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Required] Group within the same pool with which this endpoint needs to be associated with.
func (o InferenceEndpointTypeOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointType) string { return v.GroupId }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// InferenceEndpoint configuration
type InferenceEndpointResponse struct {
	// [Required] Authentication mode for the endpoint.
	AuthMode string `pulumi:"authMode"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Endpoint URI for the inference endpoint.
	EndpointUri string `pulumi:"endpointUri"`
	// [Required] Group within the same pool with which this endpoint needs to be associated with.
	GroupId string `pulumi:"groupId"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
}

// InferenceEndpoint configuration
type InferenceEndpointResponseOutput struct{ *pulumi.OutputState }

func (InferenceEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceEndpointResponse)(nil)).Elem()
}

func (o InferenceEndpointResponseOutput) ToInferenceEndpointResponseOutput() InferenceEndpointResponseOutput {
	return o
}

func (o InferenceEndpointResponseOutput) ToInferenceEndpointResponseOutputWithContext(ctx context.Context) InferenceEndpointResponseOutput {
	return o
}

// [Required] Authentication mode for the endpoint.
func (o InferenceEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Description of the resource.
func (o InferenceEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Endpoint URI for the inference endpoint.
func (o InferenceEndpointResponseOutput) EndpointUri() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.EndpointUri }).(pulumi.StringOutput)
}

// [Required] Group within the same pool with which this endpoint needs to be associated with.
func (o InferenceEndpointResponseOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.GroupId }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o InferenceEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Inference group configuration
type InferenceGroupType struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity *int `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Metadata for the inference group.
	Metadata *string `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20230801Preview.Pools.InferencePools.
	Priority *int `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for InferenceGroupType
func (val *InferenceGroupType) Defaults() *InferenceGroupType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		bonusExtraCapacity_ := 0
		tmp.BonusExtraCapacity = &bonusExtraCapacity_
	}
	if tmp.Priority == nil {
		priority_ := 0
		tmp.Priority = &priority_
	}
	return &tmp
}

// InferenceGroupTypeInput is an input type that accepts InferenceGroupTypeArgs and InferenceGroupTypeOutput values.
// You can construct a concrete instance of `InferenceGroupTypeInput` via:
//
//	InferenceGroupTypeArgs{...}
type InferenceGroupTypeInput interface {
	pulumi.Input

	ToInferenceGroupTypeOutput() InferenceGroupTypeOutput
	ToInferenceGroupTypeOutputWithContext(context.Context) InferenceGroupTypeOutput
}

// Inference group configuration
type InferenceGroupTypeArgs struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity pulumi.IntPtrInput `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Metadata for the inference group.
	Metadata pulumi.StringPtrInput `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20230801Preview.Pools.InferencePools.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for InferenceGroupTypeArgs
func (val *InferenceGroupTypeArgs) Defaults() *InferenceGroupTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		tmp.BonusExtraCapacity = pulumi.IntPtr(0)
	}
	if tmp.Priority == nil {
		tmp.Priority = pulumi.IntPtr(0)
	}
	return &tmp
}
func (InferenceGroupTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupType)(nil)).Elem()
}

func (i InferenceGroupTypeArgs) ToInferenceGroupTypeOutput() InferenceGroupTypeOutput {
	return i.ToInferenceGroupTypeOutputWithContext(context.Background())
}

func (i InferenceGroupTypeArgs) ToInferenceGroupTypeOutputWithContext(ctx context.Context) InferenceGroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceGroupTypeOutput)
}

// Inference group configuration
type InferenceGroupTypeOutput struct{ *pulumi.OutputState }

func (InferenceGroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupType)(nil)).Elem()
}

func (o InferenceGroupTypeOutput) ToInferenceGroupTypeOutput() InferenceGroupTypeOutput {
	return o
}

func (o InferenceGroupTypeOutput) ToInferenceGroupTypeOutputWithContext(ctx context.Context) InferenceGroupTypeOutput {
	return o
}

// Capacity to be used from the pool's reserved capacity.
// optional
func (o InferenceGroupTypeOutput) BonusExtraCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *int { return v.BonusExtraCapacity }).(pulumi.IntPtrOutput)
}

// Description of the resource.
func (o InferenceGroupTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata for the inference group.
func (o InferenceGroupTypeOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20230801Preview.Pools.InferencePools.
func (o InferenceGroupTypeOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupType) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceGroupTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceGroupType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Inference group configuration
type InferenceGroupResponse struct {
	// Capacity to be used from the pool's reserved capacity.
	// optional
	BonusExtraCapacity *int `pulumi:"bonusExtraCapacity"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// Metadata for the inference group.
	Metadata *string `pulumi:"metadata"`
	// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20230801Preview.Pools.InferencePools.
	Priority *int `pulumi:"priority"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the inference group.
	ProvisioningState string `pulumi:"provisioningState"`
}

// Defaults sets the appropriate defaults for InferenceGroupResponse
func (val *InferenceGroupResponse) Defaults() *InferenceGroupResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.BonusExtraCapacity == nil {
		bonusExtraCapacity_ := 0
		tmp.BonusExtraCapacity = &bonusExtraCapacity_
	}
	if tmp.Priority == nil {
		priority_ := 0
		tmp.Priority = &priority_
	}
	return &tmp
}

// Inference group configuration
type InferenceGroupResponseOutput struct{ *pulumi.OutputState }

func (InferenceGroupResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceGroupResponse)(nil)).Elem()
}

func (o InferenceGroupResponseOutput) ToInferenceGroupResponseOutput() InferenceGroupResponseOutput {
	return o
}

func (o InferenceGroupResponseOutput) ToInferenceGroupResponseOutputWithContext(ctx context.Context) InferenceGroupResponseOutput {
	return o
}

// Capacity to be used from the pool's reserved capacity.
// optional
func (o InferenceGroupResponseOutput) BonusExtraCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *int { return v.BonusExtraCapacity }).(pulumi.IntPtrOutput)
}

// Description of the resource.
func (o InferenceGroupResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Metadata for the inference group.
func (o InferenceGroupResponseOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Priority of the group within the N:Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20230801Preview.Pools.InferencePools.
func (o InferenceGroupResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InferenceGroupResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferenceGroupResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferenceGroupResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the inference group.
func (o InferenceGroupResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferenceGroupResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Inference pool configuration
type InferencePoolType struct {
	// Code configuration for the inference pool.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration *PoolEnvironmentConfiguration `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration *PoolModelConfiguration `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType string `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Request configuration for the inference pool.
	RequestConfiguration *RequestConfiguration `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolType
func (val *InferencePoolType) Defaults() *InferencePoolType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EnvironmentConfiguration = tmp.EnvironmentConfiguration.Defaults()

	tmp.RequestConfiguration = tmp.RequestConfiguration.Defaults()

	return &tmp
}

// InferencePoolTypeInput is an input type that accepts InferencePoolTypeArgs and InferencePoolTypeOutput values.
// You can construct a concrete instance of `InferencePoolTypeInput` via:
//
//	InferencePoolTypeArgs{...}
type InferencePoolTypeInput interface {
	pulumi.Input

	ToInferencePoolTypeOutput() InferencePoolTypeOutput
	ToInferencePoolTypeOutputWithContext(context.Context) InferencePoolTypeOutput
}

// Inference pool configuration
type InferencePoolTypeArgs struct {
	// Code configuration for the inference pool.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration PoolEnvironmentConfigurationPtrInput `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration PoolModelConfigurationPtrInput `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType pulumi.StringInput `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Request configuration for the inference pool.
	RequestConfiguration RequestConfigurationPtrInput `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolTypeArgs
func (val *InferencePoolTypeArgs) Defaults() *InferencePoolTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (InferencePoolTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolType)(nil)).Elem()
}

func (i InferencePoolTypeArgs) ToInferencePoolTypeOutput() InferencePoolTypeOutput {
	return i.ToInferencePoolTypeOutputWithContext(context.Background())
}

func (i InferencePoolTypeArgs) ToInferencePoolTypeOutputWithContext(ctx context.Context) InferencePoolTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferencePoolTypeOutput)
}

// Inference pool configuration
type InferencePoolTypeOutput struct{ *pulumi.OutputState }

func (InferencePoolTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolType)(nil)).Elem()
}

func (o InferencePoolTypeOutput) ToInferencePoolTypeOutput() InferencePoolTypeOutput {
	return o
}

func (o InferencePoolTypeOutput) ToInferencePoolTypeOutputWithContext(ctx context.Context) InferencePoolTypeOutput {
	return o
}

// Code configuration for the inference pool.
func (o InferencePoolTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Description of the resource.
func (o InferencePoolTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EnvironmentConfiguration for the inference pool.
func (o InferencePoolTypeOutput) EnvironmentConfiguration() PoolEnvironmentConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *PoolEnvironmentConfiguration { return v.EnvironmentConfiguration }).(PoolEnvironmentConfigurationPtrOutput)
}

// ModelConfiguration for the inference pool.
func (o InferencePoolTypeOutput) ModelConfiguration() PoolModelConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *PoolModelConfiguration { return v.ModelConfiguration }).(PoolModelConfigurationPtrOutput)
}

// [Required] Compute instance type.
func (o InferencePoolTypeOutput) NodeSkuType() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolType) string { return v.NodeSkuType }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferencePoolTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferencePoolType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Request configuration for the inference pool.
func (o InferencePoolTypeOutput) RequestConfiguration() RequestConfigurationPtrOutput {
	return o.ApplyT(func(v InferencePoolType) *RequestConfiguration { return v.RequestConfiguration }).(RequestConfigurationPtrOutput)
}

// Inference pool configuration
type InferencePoolResponse struct {
	// Code configuration for the inference pool.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Description of the resource.
	Description *string `pulumi:"description"`
	// EnvironmentConfiguration for the inference pool.
	EnvironmentConfiguration *PoolEnvironmentConfigurationResponse `pulumi:"environmentConfiguration"`
	// ModelConfiguration for the inference pool.
	ModelConfiguration *PoolModelConfigurationResponse `pulumi:"modelConfiguration"`
	// [Required] Compute instance type.
	NodeSkuType string `pulumi:"nodeSkuType"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the pool.
	ProvisioningState string `pulumi:"provisioningState"`
	// Request configuration for the inference pool.
	RequestConfiguration *RequestConfigurationResponse `pulumi:"requestConfiguration"`
}

// Defaults sets the appropriate defaults for InferencePoolResponse
func (val *InferencePoolResponse) Defaults() *InferencePoolResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.EnvironmentConfiguration = tmp.EnvironmentConfiguration.Defaults()

	tmp.RequestConfiguration = tmp.RequestConfiguration.Defaults()

	return &tmp
}

// Inference pool configuration
type InferencePoolResponseOutput struct{ *pulumi.OutputState }

func (InferencePoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferencePoolResponse)(nil)).Elem()
}

func (o InferencePoolResponseOutput) ToInferencePoolResponseOutput() InferencePoolResponseOutput {
	return o
}

func (o InferencePoolResponseOutput) ToInferencePoolResponseOutputWithContext(ctx context.Context) InferencePoolResponseOutput {
	return o
}

// Code configuration for the inference pool.
func (o InferencePoolResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Description of the resource.
func (o InferencePoolResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EnvironmentConfiguration for the inference pool.
func (o InferencePoolResponseOutput) EnvironmentConfiguration() PoolEnvironmentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *PoolEnvironmentConfigurationResponse { return v.EnvironmentConfiguration }).(PoolEnvironmentConfigurationResponsePtrOutput)
}

// ModelConfiguration for the inference pool.
func (o InferencePoolResponseOutput) ModelConfiguration() PoolModelConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *PoolModelConfigurationResponse { return v.ModelConfiguration }).(PoolModelConfigurationResponsePtrOutput)
}

// [Required] Compute instance type.
func (o InferencePoolResponseOutput) NodeSkuType() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolResponse) string { return v.NodeSkuType }).(pulumi.StringOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o InferencePoolResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v InferencePoolResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the pool.
func (o InferencePoolResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v InferencePoolResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Request configuration for the inference pool.
func (o InferencePoolResponseOutput) RequestConfiguration() RequestConfigurationResponsePtrOutput {
	return o.ApplyT(func(v InferencePoolResponse) *RequestConfigurationResponse { return v.RequestConfiguration }).(RequestConfigurationResponsePtrOutput)
}

// Instance type schema.
type InstanceTypeSchema struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResources `pulumi:"resources"`
}

// InstanceTypeSchemaInput is an input type that accepts InstanceTypeSchemaArgs and InstanceTypeSchemaOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaInput` via:
//
//	InstanceTypeSchemaArgs{...}
type InstanceTypeSchemaInput interface {
	pulumi.Input

	ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput
	ToInstanceTypeSchemaOutputWithContext(context.Context) InstanceTypeSchemaOutput
}

// Instance type schema.
type InstanceTypeSchemaArgs struct {
	// Node Selector
	NodeSelector pulumi.StringMapInput `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources InstanceTypeSchemaResourcesPtrInput `pulumi:"resources"`
}

func (InstanceTypeSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchema)(nil)).Elem()
}

func (i InstanceTypeSchemaArgs) ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput {
	return i.ToInstanceTypeSchemaOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaArgs) ToInstanceTypeSchemaOutputWithContext(ctx context.Context) InstanceTypeSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaOutput)
}

// InstanceTypeSchemaMapInput is an input type that accepts InstanceTypeSchemaMap and InstanceTypeSchemaMapOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaMapInput` via:
//
//	InstanceTypeSchemaMap{ "key": InstanceTypeSchemaArgs{...} }
type InstanceTypeSchemaMapInput interface {
	pulumi.Input

	ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput
	ToInstanceTypeSchemaMapOutputWithContext(context.Context) InstanceTypeSchemaMapOutput
}

type InstanceTypeSchemaMap map[string]InstanceTypeSchemaInput

func (InstanceTypeSchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchema)(nil)).Elem()
}

func (i InstanceTypeSchemaMap) ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput {
	return i.ToInstanceTypeSchemaMapOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaMap) ToInstanceTypeSchemaMapOutputWithContext(ctx context.Context) InstanceTypeSchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaMapOutput)
}

// Instance type schema.
type InstanceTypeSchemaOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchema)(nil)).Elem()
}

func (o InstanceTypeSchemaOutput) ToInstanceTypeSchemaOutput() InstanceTypeSchemaOutput {
	return o
}

func (o InstanceTypeSchemaOutput) ToInstanceTypeSchemaOutputWithContext(ctx context.Context) InstanceTypeSchemaOutput {
	return o
}

// Node Selector
func (o InstanceTypeSchemaOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchema) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Resource requests/limits for this instance type
func (o InstanceTypeSchemaOutput) Resources() InstanceTypeSchemaResourcesPtrOutput {
	return o.ApplyT(func(v InstanceTypeSchema) *InstanceTypeSchemaResources { return v.Resources }).(InstanceTypeSchemaResourcesPtrOutput)
}

type InstanceTypeSchemaMapOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchema)(nil)).Elem()
}

func (o InstanceTypeSchemaMapOutput) ToInstanceTypeSchemaMapOutput() InstanceTypeSchemaMapOutput {
	return o
}

func (o InstanceTypeSchemaMapOutput) ToInstanceTypeSchemaMapOutputWithContext(ctx context.Context) InstanceTypeSchemaMapOutput {
	return o
}

func (o InstanceTypeSchemaMapOutput) MapIndex(k pulumi.StringInput) InstanceTypeSchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceTypeSchema {
		return vs[0].(map[string]InstanceTypeSchema)[vs[1].(string)]
	}).(InstanceTypeSchemaOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

// InstanceTypeSchemaResourcesInput is an input type that accepts InstanceTypeSchemaResourcesArgs and InstanceTypeSchemaResourcesOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaResourcesInput` via:
//
//	InstanceTypeSchemaResourcesArgs{...}
type InstanceTypeSchemaResourcesInput interface {
	pulumi.Input

	ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput
	ToInstanceTypeSchemaResourcesOutputWithContext(context.Context) InstanceTypeSchemaResourcesOutput
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResourcesArgs struct {
	// Resource limits for this instance type
	Limits pulumi.StringMapInput `pulumi:"limits"`
	// Resource requests for this instance type
	Requests pulumi.StringMapInput `pulumi:"requests"`
}

func (InstanceTypeSchemaResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResources)(nil)).Elem()
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput {
	return i.ToInstanceTypeSchemaResourcesOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesOutput)
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return i.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (i InstanceTypeSchemaResourcesArgs) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesOutput).ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx)
}

// InstanceTypeSchemaResourcesPtrInput is an input type that accepts InstanceTypeSchemaResourcesArgs, InstanceTypeSchemaResourcesPtr and InstanceTypeSchemaResourcesPtrOutput values.
// You can construct a concrete instance of `InstanceTypeSchemaResourcesPtrInput` via:
//
//	        InstanceTypeSchemaResourcesArgs{...}
//
//	or:
//
//	        nil
type InstanceTypeSchemaResourcesPtrInput interface {
	pulumi.Input

	ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput
	ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Context) InstanceTypeSchemaResourcesPtrOutput
}

type instanceTypeSchemaResourcesPtrType InstanceTypeSchemaResourcesArgs

func InstanceTypeSchemaResourcesPtr(v *InstanceTypeSchemaResourcesArgs) InstanceTypeSchemaResourcesPtrInput {
	return (*instanceTypeSchemaResourcesPtrType)(v)
}

func (*instanceTypeSchemaResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResources)(nil)).Elem()
}

func (i *instanceTypeSchemaResourcesPtrType) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return i.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (i *instanceTypeSchemaResourcesPtrType) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypeSchemaResourcesPtrOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResourcesOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesOutput() InstanceTypeSchemaResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return o.ToInstanceTypeSchemaResourcesPtrOutputWithContext(context.Background())
}

func (o InstanceTypeSchemaResourcesOutput) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceTypeSchemaResources) *InstanceTypeSchemaResources {
		return &v
	}).(InstanceTypeSchemaResourcesPtrOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type InstanceTypeSchemaResourcesPtrOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResourcesPtrOutput) ToInstanceTypeSchemaResourcesPtrOutput() InstanceTypeSchemaResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResourcesPtrOutput) ToInstanceTypeSchemaResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResourcesPtrOutput) Elem() InstanceTypeSchemaResourcesOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) InstanceTypeSchemaResources {
		if v != nil {
			return *v
		}
		var ret InstanceTypeSchemaResources
		return ret
	}).(InstanceTypeSchemaResourcesOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

// Instance type schema.
type InstanceTypeSchemaResponse struct {
	// Node Selector
	NodeSelector map[string]string `pulumi:"nodeSelector"`
	// Resource requests/limits for this instance type
	Resources *InstanceTypeSchemaResponseResources `pulumi:"resources"`
}

// Instance type schema.
type InstanceTypeSchemaResponseOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResponse)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseOutput) ToInstanceTypeSchemaResponseOutput() InstanceTypeSchemaResponseOutput {
	return o
}

func (o InstanceTypeSchemaResponseOutput) ToInstanceTypeSchemaResponseOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseOutput {
	return o
}

// Node Selector
func (o InstanceTypeSchemaResponseOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponse) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

// Resource requests/limits for this instance type
func (o InstanceTypeSchemaResponseOutput) Resources() InstanceTypeSchemaResponseResourcesPtrOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponse) *InstanceTypeSchemaResponseResources { return v.Resources }).(InstanceTypeSchemaResponseResourcesPtrOutput)
}

type InstanceTypeSchemaResponseMapOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]InstanceTypeSchemaResponse)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseMapOutput) ToInstanceTypeSchemaResponseMapOutput() InstanceTypeSchemaResponseMapOutput {
	return o
}

func (o InstanceTypeSchemaResponseMapOutput) ToInstanceTypeSchemaResponseMapOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseMapOutput {
	return o
}

func (o InstanceTypeSchemaResponseMapOutput) MapIndex(k pulumi.StringInput) InstanceTypeSchemaResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) InstanceTypeSchemaResponse {
		return vs[0].(map[string]InstanceTypeSchemaResponse)[vs[1].(string)]
	}).(InstanceTypeSchemaResponseOutput)
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResponseResources struct {
	// Resource limits for this instance type
	Limits map[string]string `pulumi:"limits"`
	// Resource requests for this instance type
	Requests map[string]string `pulumi:"requests"`
}

// Resource requests/limits for this instance type
type InstanceTypeSchemaResponseResourcesOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypeSchemaResponseResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseResourcesOutput) ToInstanceTypeSchemaResponseResourcesOutput() InstanceTypeSchemaResponseResourcesOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesOutput) ToInstanceTypeSchemaResponseResourcesOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseResourcesOutput {
	return o
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResponseResourcesOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponseResources) map[string]string { return v.Limits }).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResponseResourcesOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceTypeSchemaResponseResources) map[string]string { return v.Requests }).(pulumi.StringMapOutput)
}

type InstanceTypeSchemaResponseResourcesPtrOutput struct{ *pulumi.OutputState }

func (InstanceTypeSchemaResponseResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceTypeSchemaResponseResources)(nil)).Elem()
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) ToInstanceTypeSchemaResponseResourcesPtrOutput() InstanceTypeSchemaResponseResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) ToInstanceTypeSchemaResponseResourcesPtrOutputWithContext(ctx context.Context) InstanceTypeSchemaResponseResourcesPtrOutput {
	return o
}

func (o InstanceTypeSchemaResponseResourcesPtrOutput) Elem() InstanceTypeSchemaResponseResourcesOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) InstanceTypeSchemaResponseResources {
		if v != nil {
			return *v
		}
		var ret InstanceTypeSchemaResponseResources
		return ret
	}).(InstanceTypeSchemaResponseResourcesOutput)
}

// Resource limits for this instance type
func (o InstanceTypeSchemaResponseResourcesPtrOutput) Limits() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.StringMapOutput)
}

// Resource requests for this instance type
func (o InstanceTypeSchemaResponseResourcesPtrOutput) Requests() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceTypeSchemaResponseResources) map[string]string {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.StringMapOutput)
}

type JobResourceConfiguration struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfiguration
func (val *JobResourceConfiguration) Defaults() *JobResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

// JobResourceConfigurationInput is an input type that accepts JobResourceConfigurationArgs and JobResourceConfigurationOutput values.
// You can construct a concrete instance of `JobResourceConfigurationInput` via:
//
//	JobResourceConfigurationArgs{...}
type JobResourceConfigurationInput interface {
	pulumi.Input

	ToJobResourceConfigurationOutput() JobResourceConfigurationOutput
	ToJobResourceConfigurationOutputWithContext(context.Context) JobResourceConfigurationOutput
}

type JobResourceConfigurationArgs struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs pulumi.StringPtrInput `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize pulumi.StringPtrInput `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfigurationArgs
func (val *JobResourceConfigurationArgs) Defaults() *JobResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	if tmp.ShmSize == nil {
		tmp.ShmSize = pulumi.StringPtr("2g")
	}
	return &tmp
}
func (JobResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfiguration)(nil)).Elem()
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationOutput() JobResourceConfigurationOutput {
	return i.ToJobResourceConfigurationOutputWithContext(context.Background())
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationOutputWithContext(ctx context.Context) JobResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationOutput)
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return i.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i JobResourceConfigurationArgs) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationOutput).ToJobResourceConfigurationPtrOutputWithContext(ctx)
}

// JobResourceConfigurationPtrInput is an input type that accepts JobResourceConfigurationArgs, JobResourceConfigurationPtr and JobResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `JobResourceConfigurationPtrInput` via:
//
//	        JobResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobResourceConfigurationPtrInput interface {
	pulumi.Input

	ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput
	ToJobResourceConfigurationPtrOutputWithContext(context.Context) JobResourceConfigurationPtrOutput
}

type jobResourceConfigurationPtrType JobResourceConfigurationArgs

func JobResourceConfigurationPtr(v *JobResourceConfigurationArgs) JobResourceConfigurationPtrInput {
	return (*jobResourceConfigurationPtrType)(v)
}

func (*jobResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfiguration)(nil)).Elem()
}

func (i *jobResourceConfigurationPtrType) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return i.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobResourceConfigurationPtrType) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobResourceConfigurationPtrOutput)
}

type JobResourceConfigurationOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfiguration)(nil)).Elem()
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationOutput() JobResourceConfigurationOutput {
	return o
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationOutputWithContext(ctx context.Context) JobResourceConfigurationOutput {
	return o
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return o.ToJobResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o JobResourceConfigurationOutput) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobResourceConfiguration) *JobResourceConfiguration {
		return &v
	}).(JobResourceConfigurationPtrOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.DockerArgs }).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v JobResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfiguration) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfiguration)(nil)).Elem()
}

func (o JobResourceConfigurationPtrOutput) ToJobResourceConfigurationPtrOutput() JobResourceConfigurationPtrOutput {
	return o
}

func (o JobResourceConfigurationPtrOutput) ToJobResourceConfigurationPtrOutputWithContext(ctx context.Context) JobResourceConfigurationPtrOutput {
	return o
}

func (o JobResourceConfigurationPtrOutput) Elem() JobResourceConfigurationOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) JobResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret JobResourceConfiguration
		return ret
	}).(JobResourceConfigurationOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationPtrOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DockerArgs
	}).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationPtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationResponse struct {
	// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
	DockerArgs *string `pulumi:"dockerArgs"`
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
	// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
	ShmSize *string `pulumi:"shmSize"`
}

// Defaults sets the appropriate defaults for JobResourceConfigurationResponse
func (val *JobResourceConfigurationResponse) Defaults() *JobResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	if tmp.ShmSize == nil {
		shmSize_ := "2g"
		tmp.ShmSize = &shmSize_
	}
	return &tmp
}

type JobResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobResourceConfigurationResponse)(nil)).Elem()
}

func (o JobResourceConfigurationResponseOutput) ToJobResourceConfigurationResponseOutput() JobResourceConfigurationResponseOutput {
	return o
}

func (o JobResourceConfigurationResponseOutput) ToJobResourceConfigurationResponseOutputWithContext(ctx context.Context) JobResourceConfigurationResponseOutput {
	return o
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationResponseOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.DockerArgs }).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationResponseOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobResourceConfigurationResponse) *string { return v.ShmSize }).(pulumi.StringPtrOutput)
}

type JobResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (JobResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobResourceConfigurationResponse)(nil)).Elem()
}

func (o JobResourceConfigurationResponsePtrOutput) ToJobResourceConfigurationResponsePtrOutput() JobResourceConfigurationResponsePtrOutput {
	return o
}

func (o JobResourceConfigurationResponsePtrOutput) ToJobResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) JobResourceConfigurationResponsePtrOutput {
	return o
}

func (o JobResourceConfigurationResponsePtrOutput) Elem() JobResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) JobResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret JobResourceConfigurationResponse
		return ret
	}).(JobResourceConfigurationResponseOutput)
}

// Extra arguments to pass to the Docker run command. This would override any parameters that have already been set by the system, or in this section. This parameter is only supported for Azure ML compute types.
func (o JobResourceConfigurationResponsePtrOutput) DockerArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerArgs
	}).(pulumi.StringPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o JobResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o JobResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o JobResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

// Size of the docker container's shared memory block. This should be in the format of (number)(unit) where number as to be greater than 0 and the unit can be one of b(bytes), k(kilobytes), m(megabytes), or g(gigabytes).
func (o JobResourceConfigurationResponsePtrOutput) ShmSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShmSize
	}).(pulumi.StringPtrOutput)
}

type JobScheduleAction struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

// JobScheduleActionInput is an input type that accepts JobScheduleActionArgs and JobScheduleActionOutput values.
// You can construct a concrete instance of `JobScheduleActionInput` via:
//
//	JobScheduleActionArgs{...}
type JobScheduleActionInput interface {
	pulumi.Input

	ToJobScheduleActionOutput() JobScheduleActionOutput
	ToJobScheduleActionOutputWithContext(context.Context) JobScheduleActionOutput
}

type JobScheduleActionArgs struct {
	// Expected value is 'CreateJob'.
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties pulumi.Input `pulumi:"jobBaseProperties"`
}

func (JobScheduleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleAction)(nil)).Elem()
}

func (i JobScheduleActionArgs) ToJobScheduleActionOutput() JobScheduleActionOutput {
	return i.ToJobScheduleActionOutputWithContext(context.Background())
}

func (i JobScheduleActionArgs) ToJobScheduleActionOutputWithContext(ctx context.Context) JobScheduleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobScheduleActionOutput)
}

type JobScheduleActionOutput struct{ *pulumi.OutputState }

func (JobScheduleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleAction)(nil)).Elem()
}

func (o JobScheduleActionOutput) ToJobScheduleActionOutput() JobScheduleActionOutput {
	return o
}

func (o JobScheduleActionOutput) ToJobScheduleActionOutputWithContext(ctx context.Context) JobScheduleActionOutput {
	return o
}

// Expected value is 'CreateJob'.
func (o JobScheduleActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v JobScheduleAction) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o JobScheduleActionOutput) JobBaseProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScheduleAction) interface{} { return v.JobBaseProperties }).(pulumi.AnyOutput)
}

type JobScheduleActionResponse struct {
	// Expected value is 'CreateJob'.
	ActionType string `pulumi:"actionType"`
	// [Required] Defines Schedule action definition details.
	JobBaseProperties interface{} `pulumi:"jobBaseProperties"`
}

type JobScheduleActionResponseOutput struct{ *pulumi.OutputState }

func (JobScheduleActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobScheduleActionResponse)(nil)).Elem()
}

func (o JobScheduleActionResponseOutput) ToJobScheduleActionResponseOutput() JobScheduleActionResponseOutput {
	return o
}

func (o JobScheduleActionResponseOutput) ToJobScheduleActionResponseOutputWithContext(ctx context.Context) JobScheduleActionResponseOutput {
	return o
}

// Expected value is 'CreateJob'.
func (o JobScheduleActionResponseOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v JobScheduleActionResponse) string { return v.ActionType }).(pulumi.StringOutput)
}

// [Required] Defines Schedule action definition details.
func (o JobScheduleActionResponseOutput) JobBaseProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v JobScheduleActionResponse) interface{} { return v.JobBaseProperties }).(pulumi.AnyOutput)
}

// Job endpoint definition
type JobService struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodes `pulumi:"nodes"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
}

// JobServiceInput is an input type that accepts JobServiceArgs and JobServiceOutput values.
// You can construct a concrete instance of `JobServiceInput` via:
//
//	JobServiceArgs{...}
type JobServiceInput interface {
	pulumi.Input

	ToJobServiceOutput() JobServiceOutput
	ToJobServiceOutputWithContext(context.Context) JobServiceOutput
}

// Job endpoint definition
type JobServiceArgs struct {
	// Url for endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType pulumi.StringPtrInput `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes AllNodesPtrInput `pulumi:"nodes"`
	// Port for endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (JobServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (i JobServiceArgs) ToJobServiceOutput() JobServiceOutput {
	return i.ToJobServiceOutputWithContext(context.Background())
}

func (i JobServiceArgs) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceOutput)
}

// JobServiceMapInput is an input type that accepts JobServiceMap and JobServiceMapOutput values.
// You can construct a concrete instance of `JobServiceMapInput` via:
//
//	JobServiceMap{ "key": JobServiceArgs{...} }
type JobServiceMapInput interface {
	pulumi.Input

	ToJobServiceMapOutput() JobServiceMapOutput
	ToJobServiceMapOutputWithContext(context.Context) JobServiceMapOutput
}

type JobServiceMap map[string]JobServiceInput

func (JobServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (i JobServiceMap) ToJobServiceMapOutput() JobServiceMapOutput {
	return i.ToJobServiceMapOutputWithContext(context.Background())
}

func (i JobServiceMap) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceMapOutput)
}

// Job endpoint definition
type JobServiceOutput struct{ *pulumi.OutputState }

func (JobServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (o JobServiceOutput) ToJobServiceOutput() JobServiceOutput {
	return o
}

func (o JobServiceOutput) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return o
}

// Url for endpoint.
func (o JobServiceOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Endpoint type.
func (o JobServiceOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceOutput) Nodes() AllNodesPtrOutput {
	return o.ApplyT(func(v JobService) *AllNodes { return v.Nodes }).(AllNodesPtrOutput)
}

// Port for endpoint.
func (o JobServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobService) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type JobServiceMapOutput struct{ *pulumi.OutputState }

func (JobServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (o JobServiceMapOutput) ToJobServiceMapOutput() JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) MapIndex(k pulumi.StringInput) JobServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobService {
		return vs[0].(map[string]JobService)[vs[1].(string)]
	}).(JobServiceOutput)
}

// Job endpoint definition
type JobServiceResponse struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Any error in the service.
	ErrorMessage string `pulumi:"errorMessage"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Nodes that user would like to start the service on.
	// If Nodes is not set or set to null, the service will only be started on leader node.
	Nodes *AllNodesResponse `pulumi:"nodes"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
	// Status of endpoint.
	Status string `pulumi:"status"`
}

// Job endpoint definition
type JobServiceResponseOutput struct{ *pulumi.OutputState }

func (JobServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutput() JobServiceResponseOutput {
	return o
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutputWithContext(ctx context.Context) JobServiceResponseOutput {
	return o
}

// Url for endpoint.
func (o JobServiceResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Any error in the service.
func (o JobServiceResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Endpoint type.
func (o JobServiceResponseOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Nodes that user would like to start the service on.
// If Nodes is not set or set to null, the service will only be started on leader node.
func (o JobServiceResponseOutput) Nodes() AllNodesResponsePtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *AllNodesResponse { return v.Nodes }).(AllNodesResponsePtrOutput)
}

// Port for endpoint.
func (o JobServiceResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobServiceResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Status of endpoint.
func (o JobServiceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.Status }).(pulumi.StringOutput)
}

type JobServiceResponseMapOutput struct{ *pulumi.OutputState }

func (JobServiceResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutput() JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutputWithContext(ctx context.Context) JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) MapIndex(k pulumi.StringInput) JobServiceResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobServiceResponse {
		return vs[0].(map[string]JobServiceResponse)[vs[1].(string)]
	}).(JobServiceResponseOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type Kubernetes struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Properties of Kubernetes
	Properties *KubernetesProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for Kubernetes
func (val *Kubernetes) Defaults() *Kubernetes {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// KubernetesInput is an input type that accepts KubernetesArgs and KubernetesOutput values.
// You can construct a concrete instance of `KubernetesInput` via:
//
//	KubernetesArgs{...}
type KubernetesInput interface {
	pulumi.Input

	ToKubernetesOutput() KubernetesOutput
	ToKubernetesOutputWithContext(context.Context) KubernetesOutput
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput `pulumi:"disableLocalAuth"`
	// Properties of Kubernetes
	Properties KubernetesPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for KubernetesArgs
func (val *KubernetesArgs) Defaults() *KubernetesArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (KubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (i KubernetesArgs) ToKubernetesOutput() KubernetesOutput {
	return i.ToKubernetesOutputWithContext(context.Background())
}

func (i KubernetesArgs) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput)
}

func (i KubernetesArgs) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return i.ToKubernetesPtrOutputWithContext(context.Background())
}

func (i KubernetesArgs) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOutput).ToKubernetesPtrOutputWithContext(ctx)
}

// KubernetesPtrInput is an input type that accepts KubernetesArgs, KubernetesPtr and KubernetesPtrOutput values.
// You can construct a concrete instance of `KubernetesPtrInput` via:
//
//	        KubernetesArgs{...}
//
//	or:
//
//	        nil
type KubernetesPtrInput interface {
	pulumi.Input

	ToKubernetesPtrOutput() KubernetesPtrOutput
	ToKubernetesPtrOutputWithContext(context.Context) KubernetesPtrOutput
}

type kubernetesPtrType KubernetesArgs

func KubernetesPtr(v *KubernetesArgs) KubernetesPtrInput {
	return (*kubernetesPtrType)(v)
}

func (*kubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (i *kubernetesPtrType) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return i.ToKubernetesPtrOutputWithContext(context.Background())
}

func (i *kubernetesPtrType) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPtrOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesOutput struct{ *pulumi.OutputState }

func (KubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Kubernetes)(nil)).Elem()
}

func (o KubernetesOutput) ToKubernetesOutput() KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesOutputWithContext(ctx context.Context) KubernetesOutput {
	return o
}

func (o KubernetesOutput) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return o.ToKubernetesPtrOutputWithContext(context.Background())
}

func (o KubernetesOutput) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Kubernetes) *Kubernetes {
		return &v
	}).(KubernetesPtrOutput)
}

// Location for the underlying compute
func (o KubernetesOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v Kubernetes) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Kubernetes) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Properties of Kubernetes
func (o KubernetesOutput) Properties() KubernetesPropertiesPtrOutput {
	return o.ApplyT(func(v Kubernetes) *KubernetesProperties { return v.Properties }).(KubernetesPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Kubernetes) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type KubernetesPtrOutput struct{ *pulumi.OutputState }

func (KubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kubernetes)(nil)).Elem()
}

func (o KubernetesPtrOutput) ToKubernetesPtrOutput() KubernetesPtrOutput {
	return o
}

func (o KubernetesPtrOutput) ToKubernetesPtrOutputWithContext(ctx context.Context) KubernetesPtrOutput {
	return o
}

func (o KubernetesPtrOutput) Elem() KubernetesOutput {
	return o.ApplyT(func(v *Kubernetes) Kubernetes {
		if v != nil {
			return *v
		}
		var ret Kubernetes
		return ret
	}).(KubernetesOutput)
}

// Location for the underlying compute
func (o KubernetesPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

// Properties of Kubernetes
func (o KubernetesPtrOutput) Properties() KubernetesPropertiesPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *KubernetesProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(KubernetesPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Kubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirements `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeployment
func (val *KubernetesOnlineDeployment) Defaults() *KubernetesOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// KubernetesOnlineDeploymentInput is an input type that accepts KubernetesOnlineDeploymentArgs and KubernetesOnlineDeploymentOutput values.
// You can construct a concrete instance of `KubernetesOnlineDeploymentInput` via:
//
//	KubernetesOnlineDeploymentArgs{...}
type KubernetesOnlineDeploymentInput interface {
	pulumi.Input

	ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput
	ToKubernetesOnlineDeploymentOutputWithContext(context.Context) KubernetesOnlineDeploymentOutput
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements ContainerResourceRequirementsPtrInput `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentArgs
func (val *KubernetesOnlineDeploymentArgs) Defaults() *KubernetesOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}
	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	return &tmp
}
func (KubernetesOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return i.ToKubernetesOnlineDeploymentOutputWithContext(context.Background())
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOnlineDeploymentOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return o
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentOutput) ContainerResourceRequirements() ContainerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ContainerResourceRequirements {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsPtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirementsResponse `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentResponse
func (val *KubernetesOnlineDeploymentResponse) Defaults() *KubernetesOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeploymentResponse)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutput() KubernetesOnlineDeploymentResponseOutput {
	return o
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentResponseOutput) ContainerResourceRequirements() ContainerResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ContainerResourceRequirementsResponse {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Kubernetes properties
type KubernetesProperties struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchema `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesProperties
func (val *KubernetesProperties) Defaults() *KubernetesProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// KubernetesPropertiesInput is an input type that accepts KubernetesPropertiesArgs and KubernetesPropertiesOutput values.
// You can construct a concrete instance of `KubernetesPropertiesInput` via:
//
//	KubernetesPropertiesArgs{...}
type KubernetesPropertiesInput interface {
	pulumi.Input

	ToKubernetesPropertiesOutput() KubernetesPropertiesOutput
	ToKubernetesPropertiesOutputWithContext(context.Context) KubernetesPropertiesOutput
}

// Kubernetes properties
type KubernetesPropertiesArgs struct {
	// Default instance type
	DefaultInstanceType pulumi.StringPtrInput `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain pulumi.StringPtrInput `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId pulumi.StringPtrInput `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes InstanceTypeSchemaMapInput `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString pulumi.StringPtrInput `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString pulumi.StringPtrInput `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName pulumi.StringPtrInput `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesPropertiesArgs
func (val *KubernetesPropertiesArgs) Defaults() *KubernetesPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		tmp.Namespace = pulumi.StringPtr("default")
	}
	return &tmp
}
func (KubernetesPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesProperties)(nil)).Elem()
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesOutput() KubernetesPropertiesOutput {
	return i.ToKubernetesPropertiesOutputWithContext(context.Background())
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesOutputWithContext(ctx context.Context) KubernetesPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesOutput)
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return i.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (i KubernetesPropertiesArgs) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesOutput).ToKubernetesPropertiesPtrOutputWithContext(ctx)
}

// KubernetesPropertiesPtrInput is an input type that accepts KubernetesPropertiesArgs, KubernetesPropertiesPtr and KubernetesPropertiesPtrOutput values.
// You can construct a concrete instance of `KubernetesPropertiesPtrInput` via:
//
//	        KubernetesPropertiesArgs{...}
//
//	or:
//
//	        nil
type KubernetesPropertiesPtrInput interface {
	pulumi.Input

	ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput
	ToKubernetesPropertiesPtrOutputWithContext(context.Context) KubernetesPropertiesPtrOutput
}

type kubernetesPropertiesPtrType KubernetesPropertiesArgs

func KubernetesPropertiesPtr(v *KubernetesPropertiesArgs) KubernetesPropertiesPtrInput {
	return (*kubernetesPropertiesPtrType)(v)
}

func (*kubernetesPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesProperties)(nil)).Elem()
}

func (i *kubernetesPropertiesPtrType) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return i.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (i *kubernetesPropertiesPtrType) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesPropertiesPtrOutput)
}

// Kubernetes properties
type KubernetesPropertiesOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesProperties)(nil)).Elem()
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesOutput() KubernetesPropertiesOutput {
	return o
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesOutputWithContext(ctx context.Context) KubernetesPropertiesOutput {
	return o
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return o.ToKubernetesPropertiesPtrOutputWithContext(context.Background())
}

func (o KubernetesPropertiesOutput) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesProperties) *KubernetesProperties {
		return &v
	}).(KubernetesPropertiesPtrOutput)
}

// Default instance type
func (o KubernetesPropertiesOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.DefaultInstanceType }).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ExtensionInstanceReleaseTrain }).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ExtensionPrincipalId }).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesOutput) InstanceTypes() InstanceTypeSchemaMapOutput {
	return o.ApplyT(func(v KubernetesProperties) map[string]InstanceTypeSchema { return v.InstanceTypes }).(InstanceTypeSchemaMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.RelayConnectionString }).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.ServiceBusConnectionString }).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesProperties) *string { return v.VcName }).(pulumi.StringPtrOutput)
}

type KubernetesPropertiesPtrOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesProperties)(nil)).Elem()
}

func (o KubernetesPropertiesPtrOutput) ToKubernetesPropertiesPtrOutput() KubernetesPropertiesPtrOutput {
	return o
}

func (o KubernetesPropertiesPtrOutput) ToKubernetesPropertiesPtrOutputWithContext(ctx context.Context) KubernetesPropertiesPtrOutput {
	return o
}

func (o KubernetesPropertiesPtrOutput) Elem() KubernetesPropertiesOutput {
	return o.ApplyT(func(v *KubernetesProperties) KubernetesProperties {
		if v != nil {
			return *v
		}
		var ret KubernetesProperties
		return ret
	}).(KubernetesPropertiesOutput)
}

// Default instance type
func (o KubernetesPropertiesPtrOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.DefaultInstanceType
	}).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesPtrOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionInstanceReleaseTrain
	}).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesPtrOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionPrincipalId
	}).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesPtrOutput) InstanceTypes() InstanceTypeSchemaMapOutput {
	return o.ApplyT(func(v *KubernetesProperties) map[string]InstanceTypeSchema {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(InstanceTypeSchemaMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesPtrOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.RelayConnectionString
	}).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesPtrOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusConnectionString
	}).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesPtrOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesProperties) *string {
		if v == nil {
			return nil
		}
		return v.VcName
	}).(pulumi.StringPtrOutput)
}

// Kubernetes properties
type KubernetesPropertiesResponse struct {
	// Default instance type
	DefaultInstanceType *string `pulumi:"defaultInstanceType"`
	// Extension instance release train.
	ExtensionInstanceReleaseTrain *string `pulumi:"extensionInstanceReleaseTrain"`
	// Extension principal-id.
	ExtensionPrincipalId *string `pulumi:"extensionPrincipalId"`
	// Instance Type Schema
	InstanceTypes map[string]InstanceTypeSchemaResponse `pulumi:"instanceTypes"`
	// Compute namespace
	Namespace *string `pulumi:"namespace"`
	// Relay connection string.
	RelayConnectionString *string `pulumi:"relayConnectionString"`
	// ServiceBus connection string.
	ServiceBusConnectionString *string `pulumi:"serviceBusConnectionString"`
	// VC name.
	VcName *string `pulumi:"vcName"`
}

// Defaults sets the appropriate defaults for KubernetesPropertiesResponse
func (val *KubernetesPropertiesResponse) Defaults() *KubernetesPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Namespace == nil {
		namespace_ := "default"
		tmp.Namespace = &namespace_
	}
	return &tmp
}

// Kubernetes properties
type KubernetesPropertiesResponseOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesPropertiesResponse)(nil)).Elem()
}

func (o KubernetesPropertiesResponseOutput) ToKubernetesPropertiesResponseOutput() KubernetesPropertiesResponseOutput {
	return o
}

func (o KubernetesPropertiesResponseOutput) ToKubernetesPropertiesResponseOutputWithContext(ctx context.Context) KubernetesPropertiesResponseOutput {
	return o
}

// Default instance type
func (o KubernetesPropertiesResponseOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.DefaultInstanceType }).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesResponseOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ExtensionInstanceReleaseTrain }).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesResponseOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ExtensionPrincipalId }).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesResponseOutput) InstanceTypes() InstanceTypeSchemaResponseMapOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) map[string]InstanceTypeSchemaResponse { return v.InstanceTypes }).(InstanceTypeSchemaResponseMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesResponseOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesResponseOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.RelayConnectionString }).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesResponseOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.ServiceBusConnectionString }).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesResponseOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesPropertiesResponse) *string { return v.VcName }).(pulumi.StringPtrOutput)
}

type KubernetesPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (KubernetesPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesPropertiesResponse)(nil)).Elem()
}

func (o KubernetesPropertiesResponsePtrOutput) ToKubernetesPropertiesResponsePtrOutput() KubernetesPropertiesResponsePtrOutput {
	return o
}

func (o KubernetesPropertiesResponsePtrOutput) ToKubernetesPropertiesResponsePtrOutputWithContext(ctx context.Context) KubernetesPropertiesResponsePtrOutput {
	return o
}

func (o KubernetesPropertiesResponsePtrOutput) Elem() KubernetesPropertiesResponseOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) KubernetesPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret KubernetesPropertiesResponse
		return ret
	}).(KubernetesPropertiesResponseOutput)
}

// Default instance type
func (o KubernetesPropertiesResponsePtrOutput) DefaultInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultInstanceType
	}).(pulumi.StringPtrOutput)
}

// Extension instance release train.
func (o KubernetesPropertiesResponsePtrOutput) ExtensionInstanceReleaseTrain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionInstanceReleaseTrain
	}).(pulumi.StringPtrOutput)
}

// Extension principal-id.
func (o KubernetesPropertiesResponsePtrOutput) ExtensionPrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ExtensionPrincipalId
	}).(pulumi.StringPtrOutput)
}

// Instance Type Schema
func (o KubernetesPropertiesResponsePtrOutput) InstanceTypes() InstanceTypeSchemaResponseMapOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) map[string]InstanceTypeSchemaResponse {
		if v == nil {
			return nil
		}
		return v.InstanceTypes
	}).(InstanceTypeSchemaResponseMapOutput)
}

// Compute namespace
func (o KubernetesPropertiesResponsePtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Relay connection string.
func (o KubernetesPropertiesResponsePtrOutput) RelayConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.RelayConnectionString
	}).(pulumi.StringPtrOutput)
}

// ServiceBus connection string.
func (o KubernetesPropertiesResponsePtrOutput) ServiceBusConnectionString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceBusConnectionString
	}).(pulumi.StringPtrOutput)
}

// VC name.
func (o KubernetesPropertiesResponsePtrOutput) VcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.VcName
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'Kubernetes'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string `pulumi:"modifiedOn"`
	// Properties of Kubernetes
	Properties *KubernetesPropertiesResponse `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// Defaults sets the appropriate defaults for KubernetesResponse
func (val *KubernetesResponse) Defaults() *KubernetesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Properties = tmp.Properties.Defaults()

	return &tmp
}

// A Machine Learning compute based on Kubernetes Compute.
type KubernetesResponseOutput struct{ *pulumi.OutputState }

func (KubernetesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesResponse)(nil)).Elem()
}

func (o KubernetesResponseOutput) ToKubernetesResponseOutput() KubernetesResponseOutput {
	return o
}

func (o KubernetesResponseOutput) ToKubernetesResponseOutputWithContext(ctx context.Context) KubernetesResponseOutput {
	return o
}

// Location for the underlying compute
func (o KubernetesResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'Kubernetes'.
func (o KubernetesResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o KubernetesResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o KubernetesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o KubernetesResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o KubernetesResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v KubernetesResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o KubernetesResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

// Properties of Kubernetes
func (o KubernetesResponseOutput) Properties() KubernetesPropertiesResponsePtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *KubernetesPropertiesResponse { return v.Properties }).(KubernetesPropertiesResponsePtrOutput)
}

// Errors during provisioning
func (o KubernetesResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v KubernetesResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o KubernetesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o KubernetesResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Label category definition
type LabelCategory struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClass `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategory
func (val *LabelCategory) Defaults() *LabelCategory {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// LabelCategoryInput is an input type that accepts LabelCategoryArgs and LabelCategoryOutput values.
// You can construct a concrete instance of `LabelCategoryInput` via:
//
//	LabelCategoryArgs{...}
type LabelCategoryInput interface {
	pulumi.Input

	ToLabelCategoryOutput() LabelCategoryOutput
	ToLabelCategoryOutputWithContext(context.Context) LabelCategoryOutput
}

// Label category definition
type LabelCategoryArgs struct {
	// Dictionary of label classes in this category.
	Classes LabelClassMapInput `pulumi:"classes"`
	// Display name of the label category.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect pulumi.StringPtrInput `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryArgs
func (val *LabelCategoryArgs) Defaults() *LabelCategoryArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		tmp.MultiSelect = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (i LabelCategoryArgs) ToLabelCategoryOutput() LabelCategoryOutput {
	return i.ToLabelCategoryOutputWithContext(context.Background())
}

func (i LabelCategoryArgs) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryOutput)
}

// LabelCategoryMapInput is an input type that accepts LabelCategoryMap and LabelCategoryMapOutput values.
// You can construct a concrete instance of `LabelCategoryMapInput` via:
//
//	LabelCategoryMap{ "key": LabelCategoryArgs{...} }
type LabelCategoryMapInput interface {
	pulumi.Input

	ToLabelCategoryMapOutput() LabelCategoryMapOutput
	ToLabelCategoryMapOutputWithContext(context.Context) LabelCategoryMapOutput
}

type LabelCategoryMap map[string]LabelCategoryInput

func (LabelCategoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (i LabelCategoryMap) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return i.ToLabelCategoryMapOutputWithContext(context.Background())
}

func (i LabelCategoryMap) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelCategoryMapOutput)
}

// Label category definition
type LabelCategoryOutput struct{ *pulumi.OutputState }

func (LabelCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategory)(nil)).Elem()
}

func (o LabelCategoryOutput) ToLabelCategoryOutput() LabelCategoryOutput {
	return o
}

func (o LabelCategoryOutput) ToLabelCategoryOutputWithContext(ctx context.Context) LabelCategoryOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryOutput) Classes() LabelClassMapOutput {
	return o.ApplyT(func(v LabelCategory) map[string]LabelClass { return v.Classes }).(LabelClassMapOutput)
}

// Display name of the label category.
func (o LabelCategoryOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategory) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategory)(nil)).Elem()
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutput() LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) ToLabelCategoryMapOutputWithContext(ctx context.Context) LabelCategoryMapOutput {
	return o
}

func (o LabelCategoryMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategory {
		return vs[0].(map[string]LabelCategory)[vs[1].(string)]
	}).(LabelCategoryOutput)
}

// Label category definition
type LabelCategoryResponse struct {
	// Dictionary of label classes in this category.
	Classes map[string]LabelClassResponse `pulumi:"classes"`
	// Display name of the label category.
	DisplayName *string `pulumi:"displayName"`
	// Indicates whether it is allowed to select multiple classes in this category.
	MultiSelect *string `pulumi:"multiSelect"`
}

// Defaults sets the appropriate defaults for LabelCategoryResponse
func (val *LabelCategoryResponse) Defaults() *LabelCategoryResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MultiSelect == nil {
		multiSelect_ := "Disabled"
		tmp.MultiSelect = &multiSelect_
	}
	return &tmp
}

// Label category definition
type LabelCategoryResponseOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutput() LabelCategoryResponseOutput {
	return o
}

func (o LabelCategoryResponseOutput) ToLabelCategoryResponseOutputWithContext(ctx context.Context) LabelCategoryResponseOutput {
	return o
}

// Dictionary of label classes in this category.
func (o LabelCategoryResponseOutput) Classes() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelCategoryResponse) map[string]LabelClassResponse { return v.Classes }).(LabelClassResponseMapOutput)
}

// Display name of the label category.
func (o LabelCategoryResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Indicates whether it is allowed to select multiple classes in this category.
func (o LabelCategoryResponseOutput) MultiSelect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelCategoryResponse) *string { return v.MultiSelect }).(pulumi.StringPtrOutput)
}

type LabelCategoryResponseMapOutput struct{ *pulumi.OutputState }

func (LabelCategoryResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelCategoryResponse)(nil)).Elem()
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutput() LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) ToLabelCategoryResponseMapOutputWithContext(ctx context.Context) LabelCategoryResponseMapOutput {
	return o
}

func (o LabelCategoryResponseMapOutput) MapIndex(k pulumi.StringInput) LabelCategoryResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelCategoryResponse {
		return vs[0].(map[string]LabelCategoryResponse)[vs[1].(string)]
	}).(LabelCategoryResponseOutput)
}

// Label class definition
type LabelClass struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClass `pulumi:"subclasses"`
}

// LabelClassInput is an input type that accepts LabelClassArgs and LabelClassOutput values.
// You can construct a concrete instance of `LabelClassInput` via:
//
//	LabelClassArgs{...}
type LabelClassInput interface {
	pulumi.Input

	ToLabelClassOutput() LabelClassOutput
	ToLabelClassOutputWithContext(context.Context) LabelClassOutput
}

// Label class definition
type LabelClassArgs struct {
	// Display name of the label class.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses LabelClassMapInput `pulumi:"subclasses"`
}

func (LabelClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (i LabelClassArgs) ToLabelClassOutput() LabelClassOutput {
	return i.ToLabelClassOutputWithContext(context.Background())
}

func (i LabelClassArgs) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassOutput)
}

// LabelClassMapInput is an input type that accepts LabelClassMap and LabelClassMapOutput values.
// You can construct a concrete instance of `LabelClassMapInput` via:
//
//	LabelClassMap{ "key": LabelClassArgs{...} }
type LabelClassMapInput interface {
	pulumi.Input

	ToLabelClassMapOutput() LabelClassMapOutput
	ToLabelClassMapOutputWithContext(context.Context) LabelClassMapOutput
}

type LabelClassMap map[string]LabelClassInput

func (LabelClassMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (i LabelClassMap) ToLabelClassMapOutput() LabelClassMapOutput {
	return i.ToLabelClassMapOutputWithContext(context.Background())
}

func (i LabelClassMap) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelClassMapOutput)
}

// Label class definition
type LabelClassOutput struct{ *pulumi.OutputState }

func (LabelClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClass)(nil)).Elem()
}

func (o LabelClassOutput) ToLabelClassOutput() LabelClassOutput {
	return o
}

func (o LabelClassOutput) ToLabelClassOutputWithContext(ctx context.Context) LabelClassOutput {
	return o
}

// Display name of the label class.
func (o LabelClassOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClass) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassOutput) Subclasses() LabelClassMapOutput {
	return o.ApplyT(func(v LabelClass) map[string]LabelClass { return v.Subclasses }).(LabelClassMapOutput)
}

type LabelClassMapOutput struct{ *pulumi.OutputState }

func (LabelClassMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClass)(nil)).Elem()
}

func (o LabelClassMapOutput) ToLabelClassMapOutput() LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) ToLabelClassMapOutputWithContext(ctx context.Context) LabelClassMapOutput {
	return o
}

func (o LabelClassMapOutput) MapIndex(k pulumi.StringInput) LabelClassOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClass {
		return vs[0].(map[string]LabelClass)[vs[1].(string)]
	}).(LabelClassOutput)
}

// Label class definition
type LabelClassResponse struct {
	// Display name of the label class.
	DisplayName *string `pulumi:"displayName"`
	// Dictionary of subclasses of the label class.
	Subclasses map[string]LabelClassResponse `pulumi:"subclasses"`
}

// Label class definition
type LabelClassResponseOutput struct{ *pulumi.OutputState }

func (LabelClassResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutput() LabelClassResponseOutput {
	return o
}

func (o LabelClassResponseOutput) ToLabelClassResponseOutputWithContext(ctx context.Context) LabelClassResponseOutput {
	return o
}

// Display name of the label class.
func (o LabelClassResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelClassResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Dictionary of subclasses of the label class.
func (o LabelClassResponseOutput) Subclasses() LabelClassResponseMapOutput {
	return o.ApplyT(func(v LabelClassResponse) map[string]LabelClassResponse { return v.Subclasses }).(LabelClassResponseMapOutput)
}

type LabelClassResponseMapOutput struct{ *pulumi.OutputState }

func (LabelClassResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LabelClassResponse)(nil)).Elem()
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutput() LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) ToLabelClassResponseMapOutputWithContext(ctx context.Context) LabelClassResponseMapOutput {
	return o
}

func (o LabelClassResponseMapOutput) MapIndex(k pulumi.StringInput) LabelClassResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LabelClassResponse {
		return vs[0].(map[string]LabelClassResponse)[vs[1].(string)]
	}).(LabelClassResponseOutput)
}

// Labeling data configuration definition
type LabelingDataConfiguration struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfiguration
func (val *LabelingDataConfiguration) Defaults() *LabelingDataConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// LabelingDataConfigurationInput is an input type that accepts LabelingDataConfigurationArgs and LabelingDataConfigurationOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationInput` via:
//
//	LabelingDataConfigurationArgs{...}
type LabelingDataConfigurationInput interface {
	pulumi.Input

	ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput
	ToLabelingDataConfigurationOutputWithContext(context.Context) LabelingDataConfigurationOutput
}

// Labeling data configuration definition
type LabelingDataConfigurationArgs struct {
	// Resource Id of the data asset to perform labeling.
	DataId pulumi.StringPtrInput `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh pulumi.StringPtrInput `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationArgs
func (val *LabelingDataConfigurationArgs) Defaults() *LabelingDataConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		tmp.IncrementalDataRefresh = pulumi.StringPtr("Disabled")
	}
	return &tmp
}
func (LabelingDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return i.ToLabelingDataConfigurationOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput)
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i LabelingDataConfigurationArgs) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationOutput).ToLabelingDataConfigurationPtrOutputWithContext(ctx)
}

// LabelingDataConfigurationPtrInput is an input type that accepts LabelingDataConfigurationArgs, LabelingDataConfigurationPtr and LabelingDataConfigurationPtrOutput values.
// You can construct a concrete instance of `LabelingDataConfigurationPtrInput` via:
//
//	        LabelingDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type LabelingDataConfigurationPtrInput interface {
	pulumi.Input

	ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput
	ToLabelingDataConfigurationPtrOutputWithContext(context.Context) LabelingDataConfigurationPtrOutput
}

type labelingDataConfigurationPtrType LabelingDataConfigurationArgs

func LabelingDataConfigurationPtr(v *LabelingDataConfigurationArgs) LabelingDataConfigurationPtrInput {
	return (*labelingDataConfigurationPtrType)(v)
}

func (*labelingDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return i.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *labelingDataConfigurationPtrType) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingDataConfigurationPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutput() LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationOutputWithContext(ctx context.Context) LabelingDataConfigurationOutput {
	return o
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o.ToLabelingDataConfigurationPtrOutputWithContext(context.Background())
}

func (o LabelingDataConfigurationOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingDataConfiguration) *LabelingDataConfiguration {
		return &v
	}).(LabelingDataConfigurationPtrOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfiguration) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfiguration)(nil)).Elem()
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutput() LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) ToLabelingDataConfigurationPtrOutputWithContext(ctx context.Context) LabelingDataConfigurationPtrOutput {
	return o
}

func (o LabelingDataConfigurationPtrOutput) Elem() LabelingDataConfigurationOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) LabelingDataConfiguration {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfiguration
		return ret
	}).(LabelingDataConfigurationOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationPtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationPtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling data configuration definition
type LabelingDataConfigurationResponse struct {
	// Resource Id of the data asset to perform labeling.
	DataId *string `pulumi:"dataId"`
	// Indicates whether to enable incremental data refresh.
	IncrementalDataRefresh *string `pulumi:"incrementalDataRefresh"`
}

// Defaults sets the appropriate defaults for LabelingDataConfigurationResponse
func (val *LabelingDataConfigurationResponse) Defaults() *LabelingDataConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IncrementalDataRefresh == nil {
		incrementalDataRefresh_ := "Disabled"
		tmp.IncrementalDataRefresh = &incrementalDataRefresh_
	}
	return &tmp
}

// Labeling data configuration definition
type LabelingDataConfigurationResponseOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutput() LabelingDataConfigurationResponseOutput {
	return o
}

func (o LabelingDataConfigurationResponseOutput) ToLabelingDataConfigurationResponseOutputWithContext(ctx context.Context) LabelingDataConfigurationResponseOutput {
	return o
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponseOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.DataId }).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponseOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingDataConfigurationResponse) *string { return v.IncrementalDataRefresh }).(pulumi.StringPtrOutput)
}

type LabelingDataConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingDataConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingDataConfigurationResponse)(nil)).Elem()
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutput() LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) ToLabelingDataConfigurationResponsePtrOutputWithContext(ctx context.Context) LabelingDataConfigurationResponsePtrOutput {
	return o
}

func (o LabelingDataConfigurationResponsePtrOutput) Elem() LabelingDataConfigurationResponseOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) LabelingDataConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret LabelingDataConfigurationResponse
		return ret
	}).(LabelingDataConfigurationResponseOutput)
}

// Resource Id of the data asset to perform labeling.
func (o LabelingDataConfigurationResponsePtrOutput) DataId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.DataId
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to enable incremental data refresh.
func (o LabelingDataConfigurationResponsePtrOutput) IncrementalDataRefresh() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingDataConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.IncrementalDataRefresh
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobType struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfiguration `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructions `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategory `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobType
func (val *LabelingJobType) Defaults() *LabelingJobType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// LabelingJobTypeInput is an input type that accepts LabelingJobTypeArgs and LabelingJobTypeOutput values.
// You can construct a concrete instance of `LabelingJobTypeInput` via:
//
//	LabelingJobTypeArgs{...}
type LabelingJobTypeInput interface {
	pulumi.Input

	ToLabelingJobTypeOutput() LabelingJobTypeOutput
	ToLabelingJobTypeOutputWithContext(context.Context) LabelingJobTypeOutput
}

// Labeling job definition
type LabelingJobTypeArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// Configuration of data used in the job.
	DataConfiguration LabelingDataConfigurationPtrInput `pulumi:"dataConfiguration"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions LabelingJobInstructionsPtrInput `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories LabelCategoryMapInput `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties pulumi.Input `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration pulumi.Input `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobTypeArgs
func (val *LabelingJobTypeArgs) Defaults() *LabelingJobTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (LabelingJobTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return i.ToLabelingJobTypeOutputWithContext(context.Background())
}

func (i LabelingJobTypeArgs) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTypeOutput)
}

// Labeling job definition
type LabelingJobTypeOutput struct{ *pulumi.OutputState }

func (LabelingJobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobType)(nil)).Elem()
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutput() LabelingJobTypeOutput {
	return o
}

func (o LabelingJobTypeOutput) ToLabelingJobTypeOutputWithContext(ctx context.Context) LabelingJobTypeOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobTypeOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobTypeOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Configuration of data used in the job.
func (o LabelingJobTypeOutput) DataConfiguration() LabelingDataConfigurationPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingDataConfiguration { return v.DataConfiguration }).(LabelingDataConfigurationPtrOutput)
}

// The asset description text.
func (o LabelingJobTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobTypeOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobTypeOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobTypeOutput) JobInstructions() LabelingJobInstructionsPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *LabelingJobInstructions { return v.JobInstructions }).(LabelingJobInstructionsPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobTypeOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobType) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobTypeOutput) LabelCategories() LabelCategoryMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]LabelCategory { return v.LabelCategories }).(LabelCategoryMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobTypeOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobTypeOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobType) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobTypeOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v LabelingJobType) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// The asset property dictionary.
func (o LabelingJobTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobTypeOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobTypeOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for image data
type LabelingJobImageProperties struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImageProperties
func (val *LabelingJobImageProperties) Defaults() *LabelingJobImageProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// LabelingJobImagePropertiesInput is an input type that accepts LabelingJobImagePropertiesArgs and LabelingJobImagePropertiesOutput values.
// You can construct a concrete instance of `LabelingJobImagePropertiesInput` via:
//
//	LabelingJobImagePropertiesArgs{...}
type LabelingJobImagePropertiesInput interface {
	pulumi.Input

	ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput
	ToLabelingJobImagePropertiesOutputWithContext(context.Context) LabelingJobImagePropertiesOutput
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesArgs struct {
	// Annotation type of image labeling job.
	AnnotationType pulumi.StringPtrInput `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType pulumi.StringInput `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImagePropertiesArgs
func (val *LabelingJobImagePropertiesArgs) Defaults() *LabelingJobImagePropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		tmp.AnnotationType = pulumi.StringPtr("Classification")
	}
	return &tmp
}
func (LabelingJobImagePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImageProperties)(nil)).Elem()
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput {
	return i.ToLabelingJobImagePropertiesOutputWithContext(context.Background())
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesOutputWithContext(ctx context.Context) LabelingJobImagePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesOutput)
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return i.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (i LabelingJobImagePropertiesArgs) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesOutput).ToLabelingJobImagePropertiesPtrOutputWithContext(ctx)
}

// LabelingJobImagePropertiesPtrInput is an input type that accepts LabelingJobImagePropertiesArgs, LabelingJobImagePropertiesPtr and LabelingJobImagePropertiesPtrOutput values.
// You can construct a concrete instance of `LabelingJobImagePropertiesPtrInput` via:
//
//	        LabelingJobImagePropertiesArgs{...}
//
//	or:
//
//	        nil
type LabelingJobImagePropertiesPtrInput interface {
	pulumi.Input

	ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput
	ToLabelingJobImagePropertiesPtrOutputWithContext(context.Context) LabelingJobImagePropertiesPtrOutput
}

type labelingJobImagePropertiesPtrType LabelingJobImagePropertiesArgs

func LabelingJobImagePropertiesPtr(v *LabelingJobImagePropertiesArgs) LabelingJobImagePropertiesPtrInput {
	return (*labelingJobImagePropertiesPtrType)(v)
}

func (*labelingJobImagePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImageProperties)(nil)).Elem()
}

func (i *labelingJobImagePropertiesPtrType) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return i.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (i *labelingJobImagePropertiesPtrType) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobImagePropertiesPtrOutput)
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImageProperties)(nil)).Elem()
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesOutput() LabelingJobImagePropertiesOutput {
	return o
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesOutputWithContext(ctx context.Context) LabelingJobImagePropertiesOutput {
	return o
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return o.ToLabelingJobImagePropertiesPtrOutputWithContext(context.Background())
}

func (o LabelingJobImagePropertiesOutput) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobImageProperties) *LabelingJobImageProperties {
		return &v
	}).(LabelingJobImagePropertiesPtrOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobImageProperties) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobImageProperties) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobImagePropertiesPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImageProperties)(nil)).Elem()
}

func (o LabelingJobImagePropertiesPtrOutput) ToLabelingJobImagePropertiesPtrOutput() LabelingJobImagePropertiesPtrOutput {
	return o
}

func (o LabelingJobImagePropertiesPtrOutput) ToLabelingJobImagePropertiesPtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesPtrOutput {
	return o
}

func (o LabelingJobImagePropertiesPtrOutput) Elem() LabelingJobImagePropertiesOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) LabelingJobImageProperties {
		if v != nil {
			return *v
		}
		var ret LabelingJobImageProperties
		return ret
	}).(LabelingJobImagePropertiesOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesPtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImageProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesResponse struct {
	// Annotation type of image labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Image'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobImagePropertiesResponse
func (val *LabelingJobImagePropertiesResponse) Defaults() *LabelingJobImagePropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for image data
type LabelingJobImagePropertiesResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobImagePropertiesResponse)(nil)).Elem()
}

func (o LabelingJobImagePropertiesResponseOutput) ToLabelingJobImagePropertiesResponseOutput() LabelingJobImagePropertiesResponseOutput {
	return o
}

func (o LabelingJobImagePropertiesResponseOutput) ToLabelingJobImagePropertiesResponseOutputWithContext(ctx context.Context) LabelingJobImagePropertiesResponseOutput {
	return o
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesResponseOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobImagePropertiesResponse) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobImagePropertiesResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobImagePropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobImagePropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobImagePropertiesResponse)(nil)).Elem()
}

func (o LabelingJobImagePropertiesResponsePtrOutput) ToLabelingJobImagePropertiesResponsePtrOutput() LabelingJobImagePropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobImagePropertiesResponsePtrOutput) ToLabelingJobImagePropertiesResponsePtrOutputWithContext(ctx context.Context) LabelingJobImagePropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobImagePropertiesResponsePtrOutput) Elem() LabelingJobImagePropertiesResponseOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) LabelingJobImagePropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobImagePropertiesResponse
		return ret
	}).(LabelingJobImagePropertiesResponseOutput)
}

// Annotation type of image labeling job.
func (o LabelingJobImagePropertiesResponsePtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Image'.
func (o LabelingJobImagePropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobImagePropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructions struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// LabelingJobInstructionsInput is an input type that accepts LabelingJobInstructionsArgs and LabelingJobInstructionsOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsInput` via:
//
//	LabelingJobInstructionsArgs{...}
type LabelingJobInstructionsInput interface {
	pulumi.Input

	ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput
	ToLabelingJobInstructionsOutputWithContext(context.Context) LabelingJobInstructionsOutput
}

// Instructions for labeling job
type LabelingJobInstructionsArgs struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (LabelingJobInstructionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return i.ToLabelingJobInstructionsOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput)
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i LabelingJobInstructionsArgs) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsOutput).ToLabelingJobInstructionsPtrOutputWithContext(ctx)
}

// LabelingJobInstructionsPtrInput is an input type that accepts LabelingJobInstructionsArgs, LabelingJobInstructionsPtr and LabelingJobInstructionsPtrOutput values.
// You can construct a concrete instance of `LabelingJobInstructionsPtrInput` via:
//
//	        LabelingJobInstructionsArgs{...}
//
//	or:
//
//	        nil
type LabelingJobInstructionsPtrInput interface {
	pulumi.Input

	ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput
	ToLabelingJobInstructionsPtrOutputWithContext(context.Context) LabelingJobInstructionsPtrOutput
}

type labelingJobInstructionsPtrType LabelingJobInstructionsArgs

func LabelingJobInstructionsPtr(v *LabelingJobInstructionsArgs) LabelingJobInstructionsPtrInput {
	return (*labelingJobInstructionsPtrType)(v)
}

func (*labelingJobInstructionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return i.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (i *labelingJobInstructionsPtrType) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobInstructionsPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutput() LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsOutputWithContext(ctx context.Context) LabelingJobInstructionsOutput {
	return o
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o.ToLabelingJobInstructionsPtrOutputWithContext(context.Background())
}

func (o LabelingJobInstructionsOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobInstructions) *LabelingJobInstructions {
		return &v
	}).(LabelingJobInstructionsPtrOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructions) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructions)(nil)).Elem()
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutput() LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) ToLabelingJobInstructionsPtrOutputWithContext(ctx context.Context) LabelingJobInstructionsPtrOutput {
	return o
}

func (o LabelingJobInstructionsPtrOutput) Elem() LabelingJobInstructionsOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) LabelingJobInstructions {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructions
		return ret
	}).(LabelingJobInstructionsOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructions) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Instructions for labeling job
type LabelingJobInstructionsResponse struct {
	// The link to a page with detailed labeling instructions for labelers.
	Uri *string `pulumi:"uri"`
}

// Instructions for labeling job
type LabelingJobInstructionsResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutput() LabelingJobInstructionsResponseOutput {
	return o
}

func (o LabelingJobInstructionsResponseOutput) ToLabelingJobInstructionsResponseOutputWithContext(ctx context.Context) LabelingJobInstructionsResponseOutput {
	return o
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobInstructionsResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type LabelingJobInstructionsResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobInstructionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobInstructionsResponse)(nil)).Elem()
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutput() LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) ToLabelingJobInstructionsResponsePtrOutputWithContext(ctx context.Context) LabelingJobInstructionsResponsePtrOutput {
	return o
}

func (o LabelingJobInstructionsResponsePtrOutput) Elem() LabelingJobInstructionsResponseOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) LabelingJobInstructionsResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobInstructionsResponse
		return ret
	}).(LabelingJobInstructionsResponseOutput)
}

// The link to a page with detailed labeling instructions for labelers.
func (o LabelingJobInstructionsResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobInstructionsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Labeling job definition
type LabelingJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Created time of the job in UTC timezone.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Configuration of data used in the job.
	DataConfiguration *LabelingDataConfigurationResponse `pulumi:"dataConfiguration"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Labeling instructions of the job.
	JobInstructions *LabelingJobInstructionsResponse `pulumi:"jobInstructions"`
	// Enum to determine the type of job.
	// Expected value is 'Labeling'.
	JobType string `pulumi:"jobType"`
	// Label categories of the job.
	LabelCategories map[string]LabelCategoryResponse `pulumi:"labelCategories"`
	// Media type specific properties in the job.
	LabelingJobMediaProperties interface{} `pulumi:"labelingJobMediaProperties"`
	// Configuration of MLAssist feature in the job.
	MlAssistConfiguration interface{} `pulumi:"mlAssistConfiguration"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Progress metrics of the job.
	ProgressMetrics ProgressMetricsResponse `pulumi:"progressMetrics"`
	// Internal id of the job(Previously called project).
	ProjectId string `pulumi:"projectId"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Specifies the labeling job provisioning state.
	ProvisioningState string `pulumi:"provisioningState"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Status messages of the job.
	StatusMessages []StatusMessageResponse `pulumi:"statusMessages"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for LabelingJobResponse
func (val *LabelingJobResponse) Defaults() *LabelingJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataConfiguration = tmp.DataConfiguration.Defaults()

	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Labeling job definition
type LabelingJobResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobResponse)(nil)).Elem()
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutput() LabelingJobResponseOutput {
	return o
}

func (o LabelingJobResponseOutput) ToLabelingJobResponseOutputWithContext(ctx context.Context) LabelingJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o LabelingJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o LabelingJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Created time of the job in UTC timezone.
func (o LabelingJobResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Configuration of data used in the job.
func (o LabelingJobResponseOutput) DataConfiguration() LabelingDataConfigurationResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingDataConfigurationResponse { return v.DataConfiguration }).(LabelingDataConfigurationResponsePtrOutput)
}

// The asset description text.
func (o LabelingJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o LabelingJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o LabelingJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o LabelingJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o LabelingJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Labeling instructions of the job.
func (o LabelingJobResponseOutput) JobInstructions() LabelingJobInstructionsResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *LabelingJobInstructionsResponse { return v.JobInstructions }).(LabelingJobInstructionsResponsePtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Labeling'.
func (o LabelingJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Label categories of the job.
func (o LabelingJobResponseOutput) LabelCategories() LabelCategoryResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]LabelCategoryResponse { return v.LabelCategories }).(LabelCategoryResponseMapOutput)
}

// Media type specific properties in the job.
func (o LabelingJobResponseOutput) LabelingJobMediaProperties() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.LabelingJobMediaProperties }).(pulumi.AnyOutput)
}

// Configuration of MLAssist feature in the job.
func (o LabelingJobResponseOutput) MlAssistConfiguration() pulumi.AnyOutput {
	return o.ApplyT(func(v LabelingJobResponse) interface{} { return v.MlAssistConfiguration }).(pulumi.AnyOutput)
}

// Notification setting for the job
func (o LabelingJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v LabelingJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Progress metrics of the job.
func (o LabelingJobResponseOutput) ProgressMetrics() ProgressMetricsResponseOutput {
	return o.ApplyT(func(v LabelingJobResponse) ProgressMetricsResponse { return v.ProgressMetrics }).(ProgressMetricsResponseOutput)
}

// Internal id of the job(Previously called project).
func (o LabelingJobResponseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o LabelingJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Specifies the labeling job provisioning state.
func (o LabelingJobResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Configuration for secrets to be made available during runtime.
func (o LabelingJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o LabelingJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o LabelingJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Status messages of the job.
func (o LabelingJobResponseOutput) StatusMessages() StatusMessageResponseArrayOutput {
	return o.ApplyT(func(v LabelingJobResponse) []StatusMessageResponse { return v.StatusMessages }).(StatusMessageResponseArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o LabelingJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LabelingJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextProperties struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextProperties
func (val *LabelingJobTextProperties) Defaults() *LabelingJobTextProperties {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// LabelingJobTextPropertiesInput is an input type that accepts LabelingJobTextPropertiesArgs and LabelingJobTextPropertiesOutput values.
// You can construct a concrete instance of `LabelingJobTextPropertiesInput` via:
//
//	LabelingJobTextPropertiesArgs{...}
type LabelingJobTextPropertiesInput interface {
	pulumi.Input

	ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput
	ToLabelingJobTextPropertiesOutputWithContext(context.Context) LabelingJobTextPropertiesOutput
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesArgs struct {
	// Annotation type of text labeling job.
	AnnotationType pulumi.StringPtrInput `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType pulumi.StringInput `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextPropertiesArgs
func (val *LabelingJobTextPropertiesArgs) Defaults() *LabelingJobTextPropertiesArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		tmp.AnnotationType = pulumi.StringPtr("Classification")
	}
	return &tmp
}
func (LabelingJobTextPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextProperties)(nil)).Elem()
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput {
	return i.ToLabelingJobTextPropertiesOutputWithContext(context.Background())
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesOutputWithContext(ctx context.Context) LabelingJobTextPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesOutput)
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return i.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (i LabelingJobTextPropertiesArgs) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesOutput).ToLabelingJobTextPropertiesPtrOutputWithContext(ctx)
}

// LabelingJobTextPropertiesPtrInput is an input type that accepts LabelingJobTextPropertiesArgs, LabelingJobTextPropertiesPtr and LabelingJobTextPropertiesPtrOutput values.
// You can construct a concrete instance of `LabelingJobTextPropertiesPtrInput` via:
//
//	        LabelingJobTextPropertiesArgs{...}
//
//	or:
//
//	        nil
type LabelingJobTextPropertiesPtrInput interface {
	pulumi.Input

	ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput
	ToLabelingJobTextPropertiesPtrOutputWithContext(context.Context) LabelingJobTextPropertiesPtrOutput
}

type labelingJobTextPropertiesPtrType LabelingJobTextPropertiesArgs

func LabelingJobTextPropertiesPtr(v *LabelingJobTextPropertiesArgs) LabelingJobTextPropertiesPtrInput {
	return (*labelingJobTextPropertiesPtrType)(v)
}

func (*labelingJobTextPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextProperties)(nil)).Elem()
}

func (i *labelingJobTextPropertiesPtrType) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return i.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (i *labelingJobTextPropertiesPtrType) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LabelingJobTextPropertiesPtrOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextProperties)(nil)).Elem()
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesOutput() LabelingJobTextPropertiesOutput {
	return o
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesOutputWithContext(ctx context.Context) LabelingJobTextPropertiesOutput {
	return o
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return o.ToLabelingJobTextPropertiesPtrOutputWithContext(context.Background())
}

func (o LabelingJobTextPropertiesOutput) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LabelingJobTextProperties) *LabelingJobTextProperties {
		return &v
	}).(LabelingJobTextPropertiesPtrOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobTextProperties) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobTextProperties) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobTextPropertiesPtrOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextProperties)(nil)).Elem()
}

func (o LabelingJobTextPropertiesPtrOutput) ToLabelingJobTextPropertiesPtrOutput() LabelingJobTextPropertiesPtrOutput {
	return o
}

func (o LabelingJobTextPropertiesPtrOutput) ToLabelingJobTextPropertiesPtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesPtrOutput {
	return o
}

func (o LabelingJobTextPropertiesPtrOutput) Elem() LabelingJobTextPropertiesOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) LabelingJobTextProperties {
		if v != nil {
			return *v
		}
		var ret LabelingJobTextProperties
		return ret
	}).(LabelingJobTextPropertiesOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesPtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesPtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextProperties) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesResponse struct {
	// Annotation type of text labeling job.
	AnnotationType *string `pulumi:"annotationType"`
	// Media type of data asset.
	// Expected value is 'Text'.
	MediaType string `pulumi:"mediaType"`
}

// Defaults sets the appropriate defaults for LabelingJobTextPropertiesResponse
func (val *LabelingJobTextPropertiesResponse) Defaults() *LabelingJobTextPropertiesResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AnnotationType == nil {
		annotationType_ := "Classification"
		tmp.AnnotationType = &annotationType_
	}
	return &tmp
}

// Properties of a labeling job for text data
type LabelingJobTextPropertiesResponseOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LabelingJobTextPropertiesResponse)(nil)).Elem()
}

func (o LabelingJobTextPropertiesResponseOutput) ToLabelingJobTextPropertiesResponseOutput() LabelingJobTextPropertiesResponseOutput {
	return o
}

func (o LabelingJobTextPropertiesResponseOutput) ToLabelingJobTextPropertiesResponseOutputWithContext(ctx context.Context) LabelingJobTextPropertiesResponseOutput {
	return o
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesResponseOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LabelingJobTextPropertiesResponse) *string { return v.AnnotationType }).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesResponseOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LabelingJobTextPropertiesResponse) string { return v.MediaType }).(pulumi.StringOutput)
}

type LabelingJobTextPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (LabelingJobTextPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LabelingJobTextPropertiesResponse)(nil)).Elem()
}

func (o LabelingJobTextPropertiesResponsePtrOutput) ToLabelingJobTextPropertiesResponsePtrOutput() LabelingJobTextPropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobTextPropertiesResponsePtrOutput) ToLabelingJobTextPropertiesResponsePtrOutputWithContext(ctx context.Context) LabelingJobTextPropertiesResponsePtrOutput {
	return o
}

func (o LabelingJobTextPropertiesResponsePtrOutput) Elem() LabelingJobTextPropertiesResponseOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) LabelingJobTextPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret LabelingJobTextPropertiesResponse
		return ret
	}).(LabelingJobTextPropertiesResponseOutput)
}

// Annotation type of text labeling job.
func (o LabelingJobTextPropertiesResponsePtrOutput) AnnotationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.AnnotationType
	}).(pulumi.StringPtrOutput)
}

// Media type of data asset.
// Expected value is 'Text'.
func (o LabelingJobTextPropertiesResponsePtrOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LabelingJobTextPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MediaType
	}).(pulumi.StringPtrOutput)
}

// Info about origin if it is linked.
type LinkedInfoResponse struct {
	// LinkedId id.
	LinkedId *string `pulumi:"linkedId"`
	// Linked resource name.
	LinkedResourceName *string `pulumi:"linkedResourceName"`
	// Datastore origin
	Origin *string `pulumi:"origin"`
}

// Info about origin if it is linked.
type LinkedInfoResponseOutput struct{ *pulumi.OutputState }

func (LinkedInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedInfoResponse)(nil)).Elem()
}

func (o LinkedInfoResponseOutput) ToLinkedInfoResponseOutput() LinkedInfoResponseOutput {
	return o
}

func (o LinkedInfoResponseOutput) ToLinkedInfoResponseOutputWithContext(ctx context.Context) LinkedInfoResponseOutput {
	return o
}

// LinkedId id.
func (o LinkedInfoResponseOutput) LinkedId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.LinkedId }).(pulumi.StringPtrOutput)
}

// Linked resource name.
func (o LinkedInfoResponseOutput) LinkedResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.LinkedResourceName }).(pulumi.StringPtrOutput)
}

// Datastore origin
func (o LinkedInfoResponseOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedInfoResponse) *string { return v.Origin }).(pulumi.StringPtrOutput)
}

type LinkedInfoResponsePtrOutput struct{ *pulumi.OutputState }

func (LinkedInfoResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedInfoResponse)(nil)).Elem()
}

func (o LinkedInfoResponsePtrOutput) ToLinkedInfoResponsePtrOutput() LinkedInfoResponsePtrOutput {
	return o
}

func (o LinkedInfoResponsePtrOutput) ToLinkedInfoResponsePtrOutputWithContext(ctx context.Context) LinkedInfoResponsePtrOutput {
	return o
}

func (o LinkedInfoResponsePtrOutput) Elem() LinkedInfoResponseOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) LinkedInfoResponse {
		if v != nil {
			return *v
		}
		var ret LinkedInfoResponse
		return ret
	}).(LinkedInfoResponseOutput)
}

// LinkedId id.
func (o LinkedInfoResponsePtrOutput) LinkedId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.LinkedId
	}).(pulumi.StringPtrOutput)
}

// Linked resource name.
func (o LinkedInfoResponsePtrOutput) LinkedResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.LinkedResourceName
	}).(pulumi.StringPtrOutput)
}

// Datastore origin
func (o LinkedInfoResponsePtrOutput) Origin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedInfoResponse) *string {
		if v == nil {
			return nil
		}
		return v.Origin
	}).(pulumi.StringPtrOutput)
}

// LinkedService specific properties.
type LinkedServiceProps struct {
	// The creation time of the linked service.
	CreatedTime *string `pulumi:"createdTime"`
	// Type of the link target.
	LinkType *LinkedServiceLinkType `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId string `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime *string `pulumi:"modifiedTime"`
}

// LinkedServicePropsInput is an input type that accepts LinkedServicePropsArgs and LinkedServicePropsOutput values.
// You can construct a concrete instance of `LinkedServicePropsInput` via:
//
//	LinkedServicePropsArgs{...}
type LinkedServicePropsInput interface {
	pulumi.Input

	ToLinkedServicePropsOutput() LinkedServicePropsOutput
	ToLinkedServicePropsOutputWithContext(context.Context) LinkedServicePropsOutput
}

// LinkedService specific properties.
type LinkedServicePropsArgs struct {
	// The creation time of the linked service.
	CreatedTime pulumi.StringPtrInput `pulumi:"createdTime"`
	// Type of the link target.
	LinkType LinkedServiceLinkTypePtrInput `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId pulumi.StringInput `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime pulumi.StringPtrInput `pulumi:"modifiedTime"`
}

func (LinkedServicePropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceProps)(nil)).Elem()
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsOutput() LinkedServicePropsOutput {
	return i.ToLinkedServicePropsOutputWithContext(context.Background())
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsOutputWithContext(ctx context.Context) LinkedServicePropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsOutput)
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return i.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (i LinkedServicePropsArgs) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsOutput).ToLinkedServicePropsPtrOutputWithContext(ctx)
}

// LinkedServicePropsPtrInput is an input type that accepts LinkedServicePropsArgs, LinkedServicePropsPtr and LinkedServicePropsPtrOutput values.
// You can construct a concrete instance of `LinkedServicePropsPtrInput` via:
//
//	        LinkedServicePropsArgs{...}
//
//	or:
//
//	        nil
type LinkedServicePropsPtrInput interface {
	pulumi.Input

	ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput
	ToLinkedServicePropsPtrOutputWithContext(context.Context) LinkedServicePropsPtrOutput
}

type linkedServicePropsPtrType LinkedServicePropsArgs

func LinkedServicePropsPtr(v *LinkedServicePropsArgs) LinkedServicePropsPtrInput {
	return (*linkedServicePropsPtrType)(v)
}

func (*linkedServicePropsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceProps)(nil)).Elem()
}

func (i *linkedServicePropsPtrType) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return i.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (i *linkedServicePropsPtrType) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedServicePropsPtrOutput)
}

// LinkedService specific properties.
type LinkedServicePropsOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServiceProps)(nil)).Elem()
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsOutput() LinkedServicePropsOutput {
	return o
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsOutputWithContext(ctx context.Context) LinkedServicePropsOutput {
	return o
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return o.ToLinkedServicePropsPtrOutputWithContext(context.Background())
}

func (o LinkedServicePropsOutput) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedServiceProps) *LinkedServiceProps {
		return &v
	}).(LinkedServicePropsPtrOutput)
}

// The creation time of the linked service.
func (o LinkedServicePropsOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsOutput) LinkType() LinkedServiceLinkTypePtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *LinkedServiceLinkType { return v.LinkType }).(LinkedServiceLinkTypePtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsOutput) LinkedServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServiceProps) string { return v.LinkedServiceResourceId }).(pulumi.StringOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServiceProps) *string { return v.ModifiedTime }).(pulumi.StringPtrOutput)
}

type LinkedServicePropsPtrOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedServiceProps)(nil)).Elem()
}

func (o LinkedServicePropsPtrOutput) ToLinkedServicePropsPtrOutput() LinkedServicePropsPtrOutput {
	return o
}

func (o LinkedServicePropsPtrOutput) ToLinkedServicePropsPtrOutputWithContext(ctx context.Context) LinkedServicePropsPtrOutput {
	return o
}

func (o LinkedServicePropsPtrOutput) Elem() LinkedServicePropsOutput {
	return o.ApplyT(func(v *LinkedServiceProps) LinkedServiceProps {
		if v != nil {
			return *v
		}
		var ret LinkedServiceProps
		return ret
	}).(LinkedServicePropsOutput)
}

// The creation time of the linked service.
func (o LinkedServicePropsPtrOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return v.CreatedTime
	}).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsPtrOutput) LinkType() LinkedServiceLinkTypePtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *LinkedServiceLinkType {
		if v == nil {
			return nil
		}
		return v.LinkType
	}).(LinkedServiceLinkTypePtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsPtrOutput) LinkedServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return &v.LinkedServiceResourceId
	}).(pulumi.StringPtrOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsPtrOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedServiceProps) *string {
		if v == nil {
			return nil
		}
		return v.ModifiedTime
	}).(pulumi.StringPtrOutput)
}

// LinkedService specific properties.
type LinkedServicePropsResponse struct {
	// The creation time of the linked service.
	CreatedTime *string `pulumi:"createdTime"`
	// Type of the link target.
	LinkType *string `pulumi:"linkType"`
	// ResourceId of the link target of the linked service.
	LinkedServiceResourceId string `pulumi:"linkedServiceResourceId"`
	// The last modified time of the linked service.
	ModifiedTime *string `pulumi:"modifiedTime"`
}

// LinkedService specific properties.
type LinkedServicePropsResponseOutput struct{ *pulumi.OutputState }

func (LinkedServicePropsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedServicePropsResponse)(nil)).Elem()
}

func (o LinkedServicePropsResponseOutput) ToLinkedServicePropsResponseOutput() LinkedServicePropsResponseOutput {
	return o
}

func (o LinkedServicePropsResponseOutput) ToLinkedServicePropsResponseOutputWithContext(ctx context.Context) LinkedServicePropsResponseOutput {
	return o
}

// The creation time of the linked service.
func (o LinkedServicePropsResponseOutput) CreatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.CreatedTime }).(pulumi.StringPtrOutput)
}

// Type of the link target.
func (o LinkedServicePropsResponseOutput) LinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.LinkType }).(pulumi.StringPtrOutput)
}

// ResourceId of the link target of the linked service.
func (o LinkedServicePropsResponseOutput) LinkedServiceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) string { return v.LinkedServiceResourceId }).(pulumi.StringOutput)
}

// The last modified time of the linked service.
func (o LinkedServicePropsResponseOutput) ModifiedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedServicePropsResponse) *string { return v.ModifiedTime }).(pulumi.StringPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspaceProps struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId *string `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// LinkedWorkspacePropsInput is an input type that accepts LinkedWorkspacePropsArgs and LinkedWorkspacePropsOutput values.
// You can construct a concrete instance of `LinkedWorkspacePropsInput` via:
//
//	LinkedWorkspacePropsArgs{...}
type LinkedWorkspacePropsInput interface {
	pulumi.Input

	ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput
	ToLinkedWorkspacePropsOutputWithContext(context.Context) LinkedWorkspacePropsOutput
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsArgs struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId pulumi.StringPtrInput `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId pulumi.StringPtrInput `pulumi:"userAssignedIdentityResourceId"`
}

func (LinkedWorkspacePropsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspaceProps)(nil)).Elem()
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput {
	return i.ToLinkedWorkspacePropsOutputWithContext(context.Background())
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsOutputWithContext(ctx context.Context) LinkedWorkspacePropsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsOutput)
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return i.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (i LinkedWorkspacePropsArgs) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsOutput).ToLinkedWorkspacePropsPtrOutputWithContext(ctx)
}

// LinkedWorkspacePropsPtrInput is an input type that accepts LinkedWorkspacePropsArgs, LinkedWorkspacePropsPtr and LinkedWorkspacePropsPtrOutput values.
// You can construct a concrete instance of `LinkedWorkspacePropsPtrInput` via:
//
//	        LinkedWorkspacePropsArgs{...}
//
//	or:
//
//	        nil
type LinkedWorkspacePropsPtrInput interface {
	pulumi.Input

	ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput
	ToLinkedWorkspacePropsPtrOutputWithContext(context.Context) LinkedWorkspacePropsPtrOutput
}

type linkedWorkspacePropsPtrType LinkedWorkspacePropsArgs

func LinkedWorkspacePropsPtr(v *LinkedWorkspacePropsArgs) LinkedWorkspacePropsPtrInput {
	return (*linkedWorkspacePropsPtrType)(v)
}

func (*linkedWorkspacePropsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedWorkspaceProps)(nil)).Elem()
}

func (i *linkedWorkspacePropsPtrType) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return i.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (i *linkedWorkspacePropsPtrType) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedWorkspacePropsPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspaceProps)(nil)).Elem()
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsOutput() LinkedWorkspacePropsOutput {
	return o
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsOutputWithContext(ctx context.Context) LinkedWorkspacePropsOutput {
	return o
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return o.ToLinkedWorkspacePropsPtrOutputWithContext(context.Background())
}

func (o LinkedWorkspacePropsOutput) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedWorkspaceProps) *LinkedWorkspaceProps {
		return &v
	}).(LinkedWorkspacePropsPtrOutput)
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspaceProps) *string { return v.LinkedWorkspaceResourceId }).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspaceProps) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type LinkedWorkspacePropsPtrOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedWorkspaceProps)(nil)).Elem()
}

func (o LinkedWorkspacePropsPtrOutput) ToLinkedWorkspacePropsPtrOutput() LinkedWorkspacePropsPtrOutput {
	return o
}

func (o LinkedWorkspacePropsPtrOutput) ToLinkedWorkspacePropsPtrOutputWithContext(ctx context.Context) LinkedWorkspacePropsPtrOutput {
	return o
}

func (o LinkedWorkspacePropsPtrOutput) Elem() LinkedWorkspacePropsOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) LinkedWorkspaceProps {
		if v != nil {
			return *v
		}
		var ret LinkedWorkspaceProps
		return ret
	}).(LinkedWorkspacePropsOutput)
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsPtrOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) *string {
		if v == nil {
			return nil
		}
		return v.LinkedWorkspaceResourceId
	}).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsPtrOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LinkedWorkspaceProps) *string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentityResourceId
	}).(pulumi.StringPtrOutput)
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsResponse struct {
	// ResourceId of the link target of the linked workspace.
	LinkedWorkspaceResourceId *string `pulumi:"linkedWorkspaceResourceId"`
	// ResourceId of the user assigned identity for the linked workspace.
	UserAssignedIdentityResourceId *string `pulumi:"userAssignedIdentityResourceId"`
}

// LinkedWorkspace specific properties.
type LinkedWorkspacePropsResponseOutput struct{ *pulumi.OutputState }

func (LinkedWorkspacePropsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedWorkspacePropsResponse)(nil)).Elem()
}

func (o LinkedWorkspacePropsResponseOutput) ToLinkedWorkspacePropsResponseOutput() LinkedWorkspacePropsResponseOutput {
	return o
}

func (o LinkedWorkspacePropsResponseOutput) ToLinkedWorkspacePropsResponseOutputWithContext(ctx context.Context) LinkedWorkspacePropsResponseOutput {
	return o
}

// ResourceId of the link target of the linked workspace.
func (o LinkedWorkspacePropsResponseOutput) LinkedWorkspaceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspacePropsResponse) *string { return v.LinkedWorkspaceResourceId }).(pulumi.StringPtrOutput)
}

// ResourceId of the user assigned identity for the linked workspace.
func (o LinkedWorkspacePropsResponseOutput) UserAssignedIdentityResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LinkedWorkspacePropsResponse) *string { return v.UserAssignedIdentityResourceId }).(pulumi.StringPtrOutput)
}

type ListNotebookKeysResultResponse struct {
	PrimaryAccessKey   string `pulumi:"primaryAccessKey"`
	SecondaryAccessKey string `pulumi:"secondaryAccessKey"`
}

type ListNotebookKeysResultResponseOutput struct{ *pulumi.OutputState }

func (ListNotebookKeysResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListNotebookKeysResultResponse)(nil)).Elem()
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutput() ListNotebookKeysResultResponseOutput {
	return o
}

func (o ListNotebookKeysResultResponseOutput) ToListNotebookKeysResultResponseOutputWithContext(ctx context.Context) ListNotebookKeysResultResponseOutput {
	return o
}

func (o ListNotebookKeysResultResponseOutput) PrimaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.PrimaryAccessKey }).(pulumi.StringOutput)
}

func (o ListNotebookKeysResultResponseOutput) SecondaryAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ListNotebookKeysResultResponse) string { return v.SecondaryAccessKey }).(pulumi.StringOutput)
}

// Literal input type.
type LiteralJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// LiteralJobInputInput is an input type that accepts LiteralJobInputArgs and LiteralJobInputOutput values.
// You can construct a concrete instance of `LiteralJobInputInput` via:
//
//	LiteralJobInputArgs{...}
type LiteralJobInputInput interface {
	pulumi.Input

	ToLiteralJobInputOutput() LiteralJobInputOutput
	ToLiteralJobInputOutputWithContext(context.Context) LiteralJobInputOutput
}

// Literal input type.
type LiteralJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LiteralJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return i.ToLiteralJobInputOutputWithContext(context.Background())
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteralJobInputOutput)
}

// Literal input type.
type LiteralJobInputOutput struct{ *pulumi.OutputState }

func (LiteralJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return o
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return o
}

// Description for the input.
func (o LiteralJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.Value }).(pulumi.StringOutput)
}

// Literal input type.
type LiteralJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// Literal input type.
type LiteralJobInputResponseOutput struct{ *pulumi.OutputState }

func (LiteralJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInputResponse)(nil)).Elem()
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutput() LiteralJobInputResponseOutput {
	return o
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutputWithContext(ctx context.Context) LiteralJobInputResponseOutput {
	return o
}

// Description for the input.
func (o LiteralJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'literal'.
func (o LiteralJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.Value }).(pulumi.StringOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabled struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// MLAssistConfigurationDisabledInput is an input type that accepts MLAssistConfigurationDisabledArgs and MLAssistConfigurationDisabledOutput values.
// You can construct a concrete instance of `MLAssistConfigurationDisabledInput` via:
//
//	MLAssistConfigurationDisabledArgs{...}
type MLAssistConfigurationDisabledInput interface {
	pulumi.Input

	ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput
	ToMLAssistConfigurationDisabledOutputWithContext(context.Context) MLAssistConfigurationDisabledOutput
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledArgs struct {
	// Expected value is 'Disabled'.
	MlAssist pulumi.StringInput `pulumi:"mlAssist"`
}

func (MLAssistConfigurationDisabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabled)(nil)).Elem()
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput {
	return i.ToMLAssistConfigurationDisabledOutputWithContext(context.Background())
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledOutput)
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return i.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (i MLAssistConfigurationDisabledArgs) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledOutput).ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx)
}

// MLAssistConfigurationDisabledPtrInput is an input type that accepts MLAssistConfigurationDisabledArgs, MLAssistConfigurationDisabledPtr and MLAssistConfigurationDisabledPtrOutput values.
// You can construct a concrete instance of `MLAssistConfigurationDisabledPtrInput` via:
//
//	        MLAssistConfigurationDisabledArgs{...}
//
//	or:
//
//	        nil
type MLAssistConfigurationDisabledPtrInput interface {
	pulumi.Input

	ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput
	ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Context) MLAssistConfigurationDisabledPtrOutput
}

type mlassistConfigurationDisabledPtrType MLAssistConfigurationDisabledArgs

func MLAssistConfigurationDisabledPtr(v *MLAssistConfigurationDisabledArgs) MLAssistConfigurationDisabledPtrInput {
	return (*mlassistConfigurationDisabledPtrType)(v)
}

func (*mlassistConfigurationDisabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabled)(nil)).Elem()
}

func (i *mlassistConfigurationDisabledPtrType) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return i.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (i *mlassistConfigurationDisabledPtrType) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationDisabledPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabled)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledOutput() MLAssistConfigurationDisabledOutput {
	return o
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledOutput {
	return o
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return o.ToMLAssistConfigurationDisabledPtrOutputWithContext(context.Background())
}

func (o MLAssistConfigurationDisabledOutput) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLAssistConfigurationDisabled) *MLAssistConfigurationDisabled {
		return &v
	}).(MLAssistConfigurationDisabledPtrOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationDisabled) string { return v.MlAssist }).(pulumi.StringOutput)
}

type MLAssistConfigurationDisabledPtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabled)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledPtrOutput) ToMLAssistConfigurationDisabledPtrOutput() MLAssistConfigurationDisabledPtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledPtrOutput) ToMLAssistConfigurationDisabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledPtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledPtrOutput) Elem() MLAssistConfigurationDisabledOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabled) MLAssistConfigurationDisabled {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationDisabled
		return ret
	}).(MLAssistConfigurationDisabledOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledPtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabled) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledResponse struct {
	// Expected value is 'Disabled'.
	MlAssist string `pulumi:"mlAssist"`
}

// Labeling MLAssist configuration definition when MLAssist is disabled
type MLAssistConfigurationDisabledResponseOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationDisabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledResponseOutput) ToMLAssistConfigurationDisabledResponseOutput() MLAssistConfigurationDisabledResponseOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponseOutput) ToMLAssistConfigurationDisabledResponseOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledResponseOutput {
	return o
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledResponseOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationDisabledResponse) string { return v.MlAssist }).(pulumi.StringOutput)
}

type MLAssistConfigurationDisabledResponsePtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationDisabledResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationDisabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) ToMLAssistConfigurationDisabledResponsePtrOutput() MLAssistConfigurationDisabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) ToMLAssistConfigurationDisabledResponsePtrOutputWithContext(ctx context.Context) MLAssistConfigurationDisabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationDisabledResponsePtrOutput) Elem() MLAssistConfigurationDisabledResponseOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabledResponse) MLAssistConfigurationDisabledResponse {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationDisabledResponse
		return ret
	}).(MLAssistConfigurationDisabledResponseOutput)
}

// Expected value is 'Disabled'.
func (o MLAssistConfigurationDisabledResponsePtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationDisabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabled struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

// MLAssistConfigurationEnabledInput is an input type that accepts MLAssistConfigurationEnabledArgs and MLAssistConfigurationEnabledOutput values.
// You can construct a concrete instance of `MLAssistConfigurationEnabledInput` via:
//
//	MLAssistConfigurationEnabledArgs{...}
type MLAssistConfigurationEnabledInput interface {
	pulumi.Input

	ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput
	ToMLAssistConfigurationEnabledOutputWithContext(context.Context) MLAssistConfigurationEnabledOutput
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledArgs struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding pulumi.StringInput `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist pulumi.StringInput `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding pulumi.StringInput `pulumi:"trainingComputeBinding"`
}

func (MLAssistConfigurationEnabledArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabled)(nil)).Elem()
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput {
	return i.ToMLAssistConfigurationEnabledOutputWithContext(context.Background())
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledOutput)
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return i.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (i MLAssistConfigurationEnabledArgs) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledOutput).ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx)
}

// MLAssistConfigurationEnabledPtrInput is an input type that accepts MLAssistConfigurationEnabledArgs, MLAssistConfigurationEnabledPtr and MLAssistConfigurationEnabledPtrOutput values.
// You can construct a concrete instance of `MLAssistConfigurationEnabledPtrInput` via:
//
//	        MLAssistConfigurationEnabledArgs{...}
//
//	or:
//
//	        nil
type MLAssistConfigurationEnabledPtrInput interface {
	pulumi.Input

	ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput
	ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Context) MLAssistConfigurationEnabledPtrOutput
}

type mlassistConfigurationEnabledPtrType MLAssistConfigurationEnabledArgs

func MLAssistConfigurationEnabledPtr(v *MLAssistConfigurationEnabledArgs) MLAssistConfigurationEnabledPtrInput {
	return (*mlassistConfigurationEnabledPtrType)(v)
}

func (*mlassistConfigurationEnabledPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabled)(nil)).Elem()
}

func (i *mlassistConfigurationEnabledPtrType) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return i.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (i *mlassistConfigurationEnabledPtrType) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLAssistConfigurationEnabledPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabled)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledOutput() MLAssistConfigurationEnabledOutput {
	return o
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledOutput {
	return o
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return o.ToMLAssistConfigurationEnabledPtrOutputWithContext(context.Background())
}

func (o MLAssistConfigurationEnabledOutput) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLAssistConfigurationEnabled) *MLAssistConfigurationEnabled {
		return &v
	}).(MLAssistConfigurationEnabledPtrOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledOutput) InferencingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.InferencingComputeBinding }).(pulumi.StringOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.MlAssist }).(pulumi.StringOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledOutput) TrainingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabled) string { return v.TrainingComputeBinding }).(pulumi.StringOutput)
}

type MLAssistConfigurationEnabledPtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabled)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledPtrOutput) ToMLAssistConfigurationEnabledPtrOutput() MLAssistConfigurationEnabledPtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledPtrOutput) ToMLAssistConfigurationEnabledPtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledPtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledPtrOutput) Elem() MLAssistConfigurationEnabledOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) MLAssistConfigurationEnabled {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationEnabled
		return ret
	}).(MLAssistConfigurationEnabledOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledPtrOutput) InferencingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.InferencingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledPtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledPtrOutput) TrainingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabled) *string {
		if v == nil {
			return nil
		}
		return &v.TrainingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledResponse struct {
	// [Required] AML compute binding used in inferencing.
	InferencingComputeBinding string `pulumi:"inferencingComputeBinding"`
	// Expected value is 'Enabled'.
	MlAssist string `pulumi:"mlAssist"`
	// [Required] AML compute binding used in training.
	TrainingComputeBinding string `pulumi:"trainingComputeBinding"`
}

// Labeling MLAssist configuration definition when MLAssist is enabled
type MLAssistConfigurationEnabledResponseOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLAssistConfigurationEnabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledResponseOutput) ToMLAssistConfigurationEnabledResponseOutput() MLAssistConfigurationEnabledResponseOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponseOutput) ToMLAssistConfigurationEnabledResponseOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledResponseOutput {
	return o
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledResponseOutput) InferencingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.InferencingComputeBinding }).(pulumi.StringOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledResponseOutput) MlAssist() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.MlAssist }).(pulumi.StringOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledResponseOutput) TrainingComputeBinding() pulumi.StringOutput {
	return o.ApplyT(func(v MLAssistConfigurationEnabledResponse) string { return v.TrainingComputeBinding }).(pulumi.StringOutput)
}

type MLAssistConfigurationEnabledResponsePtrOutput struct{ *pulumi.OutputState }

func (MLAssistConfigurationEnabledResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLAssistConfigurationEnabledResponse)(nil)).Elem()
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) ToMLAssistConfigurationEnabledResponsePtrOutput() MLAssistConfigurationEnabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) ToMLAssistConfigurationEnabledResponsePtrOutputWithContext(ctx context.Context) MLAssistConfigurationEnabledResponsePtrOutput {
	return o
}

func (o MLAssistConfigurationEnabledResponsePtrOutput) Elem() MLAssistConfigurationEnabledResponseOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) MLAssistConfigurationEnabledResponse {
		if v != nil {
			return *v
		}
		var ret MLAssistConfigurationEnabledResponse
		return ret
	}).(MLAssistConfigurationEnabledResponseOutput)
}

// [Required] AML compute binding used in inferencing.
func (o MLAssistConfigurationEnabledResponsePtrOutput) InferencingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.InferencingComputeBinding
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Enabled'.
func (o MLAssistConfigurationEnabledResponsePtrOutput) MlAssist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MlAssist
	}).(pulumi.StringPtrOutput)
}

// [Required] AML compute binding used in training.
func (o MLAssistConfigurationEnabledResponsePtrOutput) TrainingComputeBinding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLAssistConfigurationEnabledResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TrainingComputeBinding
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInput
func (val *MLFlowModelJobInput) Defaults() *MLFlowModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobInputInput is an input type that accepts MLFlowModelJobInputArgs and MLFlowModelJobInputOutput values.
// You can construct a concrete instance of `MLFlowModelJobInputInput` via:
//
//	MLFlowModelJobInputArgs{...}
type MLFlowModelJobInputInput interface {
	pulumi.Input

	ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput
	ToMLFlowModelJobInputOutputWithContext(context.Context) MLFlowModelJobInputOutput
}

type MLFlowModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputArgs
func (val *MLFlowModelJobInputArgs) Defaults() *MLFlowModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLFlowModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return i.ToMLFlowModelJobInputOutputWithContext(context.Background())
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputOutput)
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return i.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputOutput).ToMLFlowModelJobInputPtrOutputWithContext(ctx)
}

// MLFlowModelJobInputPtrInput is an input type that accepts MLFlowModelJobInputArgs, MLFlowModelJobInputPtr and MLFlowModelJobInputPtrOutput values.
// You can construct a concrete instance of `MLFlowModelJobInputPtrInput` via:
//
//	        MLFlowModelJobInputArgs{...}
//
//	or:
//
//	        nil
type MLFlowModelJobInputPtrInput interface {
	pulumi.Input

	ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput
	ToMLFlowModelJobInputPtrOutputWithContext(context.Context) MLFlowModelJobInputPtrOutput
}

type mlflowModelJobInputPtrType MLFlowModelJobInputArgs

func MLFlowModelJobInputPtr(v *MLFlowModelJobInputArgs) MLFlowModelJobInputPtrInput {
	return (*mlflowModelJobInputPtrType)(v)
}

func (*mlflowModelJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInput)(nil)).Elem()
}

func (i *mlflowModelJobInputPtrType) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return i.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (i *mlflowModelJobInputPtrType) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputPtrOutput)
}

type MLFlowModelJobInputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return o
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return o
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return o.ToMLFlowModelJobInputPtrOutputWithContext(context.Background())
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLFlowModelJobInput) *MLFlowModelJobInput {
		return &v
	}).(MLFlowModelJobInputPtrOutput)
}

// Description for the input.
func (o MLFlowModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobInputPtrOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInput)(nil)).Elem()
}

func (o MLFlowModelJobInputPtrOutput) ToMLFlowModelJobInputPtrOutput() MLFlowModelJobInputPtrOutput {
	return o
}

func (o MLFlowModelJobInputPtrOutput) ToMLFlowModelJobInputPtrOutputWithContext(ctx context.Context) MLFlowModelJobInputPtrOutput {
	return o
}

func (o MLFlowModelJobInputPtrOutput) Elem() MLFlowModelJobInputOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) MLFlowModelJobInput {
		if v != nil {
			return *v
		}
		var ret MLFlowModelJobInput
		return ret
	}).(MLFlowModelJobInputOutput)
}

// Description for the input.
func (o MLFlowModelJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mlflow_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputResponse
func (val *MLFlowModelJobInputResponse) Defaults() *MLFlowModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInputResponse)(nil)).Elem()
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutput() MLFlowModelJobInputResponseOutput {
	return o
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutputWithContext(ctx context.Context) MLFlowModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLFlowModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLFlowModelJobInputResponse)(nil)).Elem()
}

func (o MLFlowModelJobInputResponsePtrOutput) ToMLFlowModelJobInputResponsePtrOutput() MLFlowModelJobInputResponsePtrOutput {
	return o
}

func (o MLFlowModelJobInputResponsePtrOutput) ToMLFlowModelJobInputResponsePtrOutputWithContext(ctx context.Context) MLFlowModelJobInputResponsePtrOutput {
	return o
}

func (o MLFlowModelJobInputResponsePtrOutput) Elem() MLFlowModelJobInputResponseOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) MLFlowModelJobInputResponse {
		if v != nil {
			return *v
		}
		var ret MLFlowModelJobInputResponse
		return ret
	}).(MLFlowModelJobInputResponseOutput)
}

// Description for the input.
func (o MLFlowModelJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLFlowModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLFlowModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutput
func (val *MLFlowModelJobOutput) Defaults() *MLFlowModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobOutputInput is an input type that accepts MLFlowModelJobOutputArgs and MLFlowModelJobOutputOutput values.
// You can construct a concrete instance of `MLFlowModelJobOutputInput` via:
//
//	MLFlowModelJobOutputArgs{...}
type MLFlowModelJobOutputInput interface {
	pulumi.Input

	ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput
	ToMLFlowModelJobOutputOutputWithContext(context.Context) MLFlowModelJobOutputOutput
}

type MLFlowModelJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputArgs
func (val *MLFlowModelJobOutputArgs) Defaults() *MLFlowModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLFlowModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return i.ToMLFlowModelJobOutputOutputWithContext(context.Background())
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobOutputOutput)
}

type MLFlowModelJobOutputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return o
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return o
}

// Description for the output.
func (o MLFlowModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLFlowModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mlflow_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputResponse
func (val *MLFlowModelJobOutputResponse) Defaults() *MLFlowModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutputResponse)(nil)).Elem()
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutput() MLFlowModelJobOutputResponseOutput {
	return o
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutputWithContext(ctx context.Context) MLFlowModelJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o MLFlowModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mlflow_model'.
func (o MLFlowModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// MLTable data definition
type MLTableData struct {
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableData
func (val *MLTableData) Defaults() *MLTableData {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTableDataInput is an input type that accepts MLTableDataArgs and MLTableDataOutput values.
// You can construct a concrete instance of `MLTableDataInput` via:
//
//	MLTableDataArgs{...}
type MLTableDataInput interface {
	pulumi.Input

	ToMLTableDataOutput() MLTableDataOutput
	ToMLTableDataOutputWithContext(context.Context) MLTableDataOutput
}

// MLTable data definition
type MLTableDataArgs struct {
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris pulumi.StringArrayInput `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataArgs
func (val *MLTableDataArgs) Defaults() *MLTableDataArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (MLTableDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (i MLTableDataArgs) ToMLTableDataOutput() MLTableDataOutput {
	return i.ToMLTableDataOutputWithContext(context.Background())
}

func (i MLTableDataArgs) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableDataOutput)
}

// MLTable data definition
type MLTableDataOutput struct{ *pulumi.OutputState }

func (MLTableDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (o MLTableDataOutput) ToMLTableDataOutput() MLTableDataOutput {
	return o
}

func (o MLTableDataOutput) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'mltable'.
func (o MLTableDataOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o MLTableDataOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableData) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o MLTableDataOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o MLTableDataOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableData) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MLTable data definition
type MLTableDataResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'mltable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataResponse
func (val *MLTableDataResponse) Defaults() *MLTableDataResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTable data definition
type MLTableDataResponseOutput struct{ *pulumi.OutputState }

func (MLTableDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableDataResponse)(nil)).Elem()
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutput() MLTableDataResponseOutput {
	return o
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutputWithContext(ctx context.Context) MLTableDataResponseOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'mltable'.
func (o MLTableDataResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o MLTableDataResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o MLTableDataResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o MLTableDataResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataResponseOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableDataResponse) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type MLTableJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInput
func (val *MLTableJobInput) Defaults() *MLTableJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobInputInput is an input type that accepts MLTableJobInputArgs and MLTableJobInputOutput values.
// You can construct a concrete instance of `MLTableJobInputInput` via:
//
//	MLTableJobInputArgs{...}
type MLTableJobInputInput interface {
	pulumi.Input

	ToMLTableJobInputOutput() MLTableJobInputOutput
	ToMLTableJobInputOutputWithContext(context.Context) MLTableJobInputOutput
}

type MLTableJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputArgs
func (val *MLTableJobInputArgs) Defaults() *MLTableJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLTableJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return i.ToMLTableJobInputOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput)
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput).ToMLTableJobInputPtrOutputWithContext(ctx)
}

// MLTableJobInputPtrInput is an input type that accepts MLTableJobInputArgs, MLTableJobInputPtr and MLTableJobInputPtrOutput values.
// You can construct a concrete instance of `MLTableJobInputPtrInput` via:
//
//	        MLTableJobInputArgs{...}
//
//	or:
//
//	        nil
type MLTableJobInputPtrInput interface {
	pulumi.Input

	ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput
	ToMLTableJobInputPtrOutputWithContext(context.Context) MLTableJobInputPtrOutput
}

type mltableJobInputPtrType MLTableJobInputArgs

func MLTableJobInputPtr(v *MLTableJobInputArgs) MLTableJobInputPtrInput {
	return (*mltableJobInputPtrType)(v)
}

func (*mltableJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputPtrOutput)
}

type MLTableJobInputOutput struct{ *pulumi.OutputState }

func (MLTableJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLTableJobInput) *MLTableJobInput {
		return &v
	}).(MLTableJobInputPtrOutput)
}

// Description for the input.
func (o MLTableJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputPtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) Elem() MLTableJobInputOutput {
	return o.ApplyT(func(v *MLTableJobInput) MLTableJobInput {
		if v != nil {
			return *v
		}
		var ret MLTableJobInput
		return ret
	}).(MLTableJobInputOutput)
}

// Description for the input.
func (o MLTableJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'mltable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputResponse
func (val *MLTableJobInputResponse) Defaults() *MLTableJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutput() MLTableJobInputResponseOutput {
	return o
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutputWithContext(ctx context.Context) MLTableJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLTableJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutput() MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutputWithContext(ctx context.Context) MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) Elem() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) MLTableJobInputResponse {
		if v != nil {
			return *v
		}
		var ret MLTableJobInputResponse
		return ret
	}).(MLTableJobInputResponseOutput)
}

// Description for the input.
func (o MLTableJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'mltable'.
func (o MLTableJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutput
func (val *MLTableJobOutput) Defaults() *MLTableJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobOutputInput is an input type that accepts MLTableJobOutputArgs and MLTableJobOutputOutput values.
// You can construct a concrete instance of `MLTableJobOutputInput` via:
//
//	MLTableJobOutputArgs{...}
type MLTableJobOutputInput interface {
	pulumi.Input

	ToMLTableJobOutputOutput() MLTableJobOutputOutput
	ToMLTableJobOutputOutputWithContext(context.Context) MLTableJobOutputOutput
}

type MLTableJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputArgs
func (val *MLTableJobOutputArgs) Defaults() *MLTableJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLTableJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return i.ToMLTableJobOutputOutputWithContext(context.Background())
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobOutputOutput)
}

type MLTableJobOutputOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return o
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return o
}

// Description for the output.
func (o MLTableJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mltable'.
func (o MLTableJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLTableJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'mltable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputResponse
func (val *MLTableJobOutputResponse) Defaults() *MLTableJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutputResponse)(nil)).Elem()
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutput() MLTableJobOutputResponseOutput {
	return o
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutputWithContext(ctx context.Context) MLTableJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o MLTableJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'mltable'.
func (o MLTableJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Managed identity configuration.
type ManagedIdentity struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//	ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// Managed identity configuration.
type ManagedIdentityArgs struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//	        ManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentity) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedIdentity
		return ret
	}).(ManagedIdentityOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                             `pulumi:"category"`
	Credentials *WorkspaceConnectionManagedIdentity `pulumi:"credentials"`
	Target      *string                             `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs and ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs{...}
type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput
	ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category    pulumi.StringPtrInput                      `pulumi:"category"`
	Credentials WorkspaceConnectionManagedIdentityPtrInput `pulumi:"credentials"`
	Target      pulumi.StringPtrInput                      `pulumi:"target"`
	// Value details of the workspace connection.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat pulumi.StringPtrInput `pulumi:"valueFormat"`
}

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i ManagedIdentityAuthTypeWorkspaceConnectionPropertiesArgs) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionManagedIdentityPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionManagedIdentity {
		return v.Credentials
	}).(WorkspaceConnectionManagedIdentityPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionProperties) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ManagedIdentity'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                     `pulumi:"category"`
	Credentials *WorkspaceConnectionManagedIdentityResponse `pulumi:"credentials"`
	ExpiryTime  *string                                     `pulumi:"expiryTime"`
	Metadata    interface{}                                 `pulumi:"metadata"`
	Target      *string                                     `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput() ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ManagedIdentity'.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionManagedIdentityResponsePtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionManagedIdentityResponse {
		return v.Credentials
	}).(WorkspaceConnectionManagedIdentityResponsePtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityResponse struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// Managed identity configuration.
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityResponse
		return ret
	}).(ManagedIdentityResponseOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeployment
func (val *ManagedOnlineDeployment) Defaults() *ManagedOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// ManagedOnlineDeploymentInput is an input type that accepts ManagedOnlineDeploymentArgs and ManagedOnlineDeploymentOutput values.
// You can construct a concrete instance of `ManagedOnlineDeploymentInput` via:
//
//	ManagedOnlineDeploymentArgs{...}
type ManagedOnlineDeploymentInput interface {
	pulumi.Input

	ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput
	ToManagedOnlineDeploymentOutputWithContext(context.Context) ManagedOnlineDeploymentOutput
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentArgs
func (val *ManagedOnlineDeploymentArgs) Defaults() *ManagedOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}
	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	return &tmp
}
func (ManagedOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return i.ToManagedOnlineDeploymentOutputWithContext(context.Background())
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedOnlineDeploymentOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return o
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentResponse
func (val *ManagedOnlineDeploymentResponse) Defaults() *ManagedOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeploymentResponse)(nil)).Elem()
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutput() ManagedOnlineDeploymentResponseOutput {
	return o
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutputWithContext(ctx context.Context) ManagedOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID or AssetId of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Dto object representing compute resource
type MaterializationComputeResource struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// MaterializationComputeResourceInput is an input type that accepts MaterializationComputeResourceArgs and MaterializationComputeResourceOutput values.
// You can construct a concrete instance of `MaterializationComputeResourceInput` via:
//
//	MaterializationComputeResourceArgs{...}
type MaterializationComputeResourceInput interface {
	pulumi.Input

	ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput
	ToMaterializationComputeResourceOutputWithContext(context.Context) MaterializationComputeResourceOutput
}

// Dto object representing compute resource
type MaterializationComputeResourceArgs struct {
	// Specifies the instance type
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
}

func (MaterializationComputeResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return i.ToMaterializationComputeResourceOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput)
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i MaterializationComputeResourceArgs) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourceOutput).ToMaterializationComputeResourcePtrOutputWithContext(ctx)
}

// MaterializationComputeResourcePtrInput is an input type that accepts MaterializationComputeResourceArgs, MaterializationComputeResourcePtr and MaterializationComputeResourcePtrOutput values.
// You can construct a concrete instance of `MaterializationComputeResourcePtrInput` via:
//
//	        MaterializationComputeResourceArgs{...}
//
//	or:
//
//	        nil
type MaterializationComputeResourcePtrInput interface {
	pulumi.Input

	ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput
	ToMaterializationComputeResourcePtrOutputWithContext(context.Context) MaterializationComputeResourcePtrOutput
}

type materializationComputeResourcePtrType MaterializationComputeResourceArgs

func MaterializationComputeResourcePtr(v *MaterializationComputeResourceArgs) MaterializationComputeResourcePtrInput {
	return (*materializationComputeResourcePtrType)(v)
}

func (*materializationComputeResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return i.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (i *materializationComputeResourcePtrType) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationComputeResourcePtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutput() MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourceOutputWithContext(ctx context.Context) MaterializationComputeResourceOutput {
	return o
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o.ToMaterializationComputeResourcePtrOutputWithContext(context.Background())
}

func (o MaterializationComputeResourceOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationComputeResource) *MaterializationComputeResource {
		return &v
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResource) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourcePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResource)(nil)).Elem()
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutput() MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) ToMaterializationComputeResourcePtrOutputWithContext(ctx context.Context) MaterializationComputeResourcePtrOutput {
	return o
}

func (o MaterializationComputeResourcePtrOutput) Elem() MaterializationComputeResourceOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) MaterializationComputeResource {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResource
		return ret
	}).(MaterializationComputeResourceOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourcePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResource) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Dto object representing compute resource
type MaterializationComputeResourceResponse struct {
	// Specifies the instance type
	InstanceType *string `pulumi:"instanceType"`
}

// Dto object representing compute resource
type MaterializationComputeResourceResponseOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutput() MaterializationComputeResourceResponseOutput {
	return o
}

func (o MaterializationComputeResourceResponseOutput) ToMaterializationComputeResourceResponseOutputWithContext(ctx context.Context) MaterializationComputeResourceResponseOutput {
	return o
}

// Specifies the instance type
func (o MaterializationComputeResourceResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationComputeResourceResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type MaterializationComputeResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationComputeResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationComputeResourceResponse)(nil)).Elem()
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutput() MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) ToMaterializationComputeResourceResponsePtrOutputWithContext(ctx context.Context) MaterializationComputeResourceResponsePtrOutput {
	return o
}

func (o MaterializationComputeResourceResponsePtrOutput) Elem() MaterializationComputeResourceResponseOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) MaterializationComputeResourceResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationComputeResourceResponse
		return ret
	}).(MaterializationComputeResourceResponseOutput)
}

// Specifies the instance type
func (o MaterializationComputeResourceResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationComputeResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettings struct {
	// Specifies the notification details
	Notification *NotificationSetting `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResource `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTrigger `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettings
func (val *MaterializationSettings) Defaults() *MaterializationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

// MaterializationSettingsInput is an input type that accepts MaterializationSettingsArgs and MaterializationSettingsOutput values.
// You can construct a concrete instance of `MaterializationSettingsInput` via:
//
//	MaterializationSettingsArgs{...}
type MaterializationSettingsInput interface {
	pulumi.Input

	ToMaterializationSettingsOutput() MaterializationSettingsOutput
	ToMaterializationSettingsOutputWithContext(context.Context) MaterializationSettingsOutput
}

type MaterializationSettingsArgs struct {
	// Specifies the notification details
	Notification NotificationSettingPtrInput `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource MaterializationComputeResourcePtrInput `pulumi:"resource"`
	// Specifies the schedule details
	Schedule RecurrenceTriggerPtrInput `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration pulumi.StringMapInput `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType pulumi.StringPtrInput `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsArgs
func (val *MaterializationSettingsArgs) Defaults() *MaterializationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.StoreType == nil {
		tmp.StoreType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (MaterializationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return i.ToMaterializationSettingsOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput)
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i MaterializationSettingsArgs) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsOutput).ToMaterializationSettingsPtrOutputWithContext(ctx)
}

// MaterializationSettingsPtrInput is an input type that accepts MaterializationSettingsArgs, MaterializationSettingsPtr and MaterializationSettingsPtrOutput values.
// You can construct a concrete instance of `MaterializationSettingsPtrInput` via:
//
//	        MaterializationSettingsArgs{...}
//
//	or:
//
//	        nil
type MaterializationSettingsPtrInput interface {
	pulumi.Input

	ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput
	ToMaterializationSettingsPtrOutputWithContext(context.Context) MaterializationSettingsPtrOutput
}

type materializationSettingsPtrType MaterializationSettingsArgs

func MaterializationSettingsPtr(v *MaterializationSettingsArgs) MaterializationSettingsPtrInput {
	return (*materializationSettingsPtrType)(v)
}

func (*materializationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return i.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (i *materializationSettingsPtrType) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializationSettingsPtrOutput)
}

type MaterializationSettingsOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutput() MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsOutputWithContext(ctx context.Context) MaterializationSettingsOutput {
	return o
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o.ToMaterializationSettingsPtrOutputWithContext(context.Background())
}

func (o MaterializationSettingsOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializationSettings) *MaterializationSettings {
		return &v
	}).(MaterializationSettingsPtrOutput)
}

// Specifies the notification details
func (o MaterializationSettingsOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *NotificationSetting { return v.Notification }).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *MaterializationComputeResource { return v.Resource }).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *RecurrenceTrigger { return v.Schedule }).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettings) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettings) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsPtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettings)(nil)).Elem()
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutput() MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) ToMaterializationSettingsPtrOutputWithContext(ctx context.Context) MaterializationSettingsPtrOutput {
	return o
}

func (o MaterializationSettingsPtrOutput) Elem() MaterializationSettingsOutput {
	return o.ApplyT(func(v *MaterializationSettings) MaterializationSettings {
		if v != nil {
			return *v
		}
		var ret MaterializationSettings
		return ret
	}).(MaterializationSettingsOutput)
}

// Specifies the notification details
func (o MaterializationSettingsPtrOutput) Notification() NotificationSettingPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *NotificationSetting {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingPtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsPtrOutput) Resource() MaterializationComputeResourcePtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *MaterializationComputeResource {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourcePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsPtrOutput) Schedule() RecurrenceTriggerPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *RecurrenceTrigger {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsPtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsPtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettings) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponse struct {
	// Specifies the notification details
	Notification *NotificationSettingResponse `pulumi:"notification"`
	// Specifies the compute resource settings
	Resource *MaterializationComputeResourceResponse `pulumi:"resource"`
	// Specifies the schedule details
	Schedule *RecurrenceTriggerResponse `pulumi:"schedule"`
	// Specifies the spark compute settings
	SparkConfiguration map[string]string `pulumi:"sparkConfiguration"`
	// Specifies the stores to which materialization should happen
	StoreType *string `pulumi:"storeType"`
}

// Defaults sets the appropriate defaults for MaterializationSettingsResponse
func (val *MaterializationSettingsResponse) Defaults() *MaterializationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Schedule = tmp.Schedule.Defaults()

	if tmp.StoreType == nil {
		storeType_ := "None"
		tmp.StoreType = &storeType_
	}
	return &tmp
}

type MaterializationSettingsResponseOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutput() MaterializationSettingsResponseOutput {
	return o
}

func (o MaterializationSettingsResponseOutput) ToMaterializationSettingsResponseOutputWithContext(ctx context.Context) MaterializationSettingsResponseOutput {
	return o
}

// Specifies the notification details
func (o MaterializationSettingsResponseOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *NotificationSettingResponse { return v.Notification }).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponseOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *MaterializationComputeResourceResponse { return v.Resource }).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponseOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *RecurrenceTriggerResponse { return v.Schedule }).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponseOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) map[string]string { return v.SparkConfiguration }).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponseOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializationSettingsResponse) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

type MaterializationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (MaterializationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializationSettingsResponse)(nil)).Elem()
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutput() MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) ToMaterializationSettingsResponsePtrOutputWithContext(ctx context.Context) MaterializationSettingsResponsePtrOutput {
	return o
}

func (o MaterializationSettingsResponsePtrOutput) Elem() MaterializationSettingsResponseOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) MaterializationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret MaterializationSettingsResponse
		return ret
	}).(MaterializationSettingsResponseOutput)
}

// Specifies the notification details
func (o MaterializationSettingsResponsePtrOutput) Notification() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *NotificationSettingResponse {
		if v == nil {
			return nil
		}
		return v.Notification
	}).(NotificationSettingResponsePtrOutput)
}

// Specifies the compute resource settings
func (o MaterializationSettingsResponsePtrOutput) Resource() MaterializationComputeResourceResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *MaterializationComputeResourceResponse {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(MaterializationComputeResourceResponsePtrOutput)
}

// Specifies the schedule details
func (o MaterializationSettingsResponsePtrOutput) Schedule() RecurrenceTriggerResponsePtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *RecurrenceTriggerResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceTriggerResponsePtrOutput)
}

// Specifies the spark compute settings
func (o MaterializationSettingsResponsePtrOutput) SparkConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.SparkConfiguration
	}).(pulumi.StringMapOutput)
}

// Specifies the stores to which materialization should happen
func (o MaterializationSettingsResponsePtrOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StoreType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicy
func (val *MedianStoppingPolicy) Defaults() *MedianStoppingPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// MedianStoppingPolicyInput is an input type that accepts MedianStoppingPolicyArgs and MedianStoppingPolicyOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyInput` via:
//
//	MedianStoppingPolicyArgs{...}
type MedianStoppingPolicyInput interface {
	pulumi.Input

	ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput
	ToMedianStoppingPolicyOutputWithContext(context.Context) MedianStoppingPolicyOutput
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyArgs
func (val *MedianStoppingPolicyArgs) Defaults() *MedianStoppingPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	return &tmp
}
func (MedianStoppingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return i.ToMedianStoppingPolicyOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput)
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput).ToMedianStoppingPolicyPtrOutputWithContext(ctx)
}

// MedianStoppingPolicyPtrInput is an input type that accepts MedianStoppingPolicyArgs, MedianStoppingPolicyPtr and MedianStoppingPolicyPtrOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyPtrInput` via:
//
//	        MedianStoppingPolicyArgs{...}
//
//	or:
//
//	        nil
type MedianStoppingPolicyPtrInput interface {
	pulumi.Input

	ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput
	ToMedianStoppingPolicyPtrOutputWithContext(context.Context) MedianStoppingPolicyPtrOutput
}

type medianStoppingPolicyPtrType MedianStoppingPolicyArgs

func MedianStoppingPolicyPtr(v *MedianStoppingPolicyArgs) MedianStoppingPolicyPtrInput {
	return (*medianStoppingPolicyPtrType)(v)
}

func (*medianStoppingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MedianStoppingPolicy) *MedianStoppingPolicy {
		return &v
	}).(MedianStoppingPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyPtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) Elem() MedianStoppingPolicyOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) MedianStoppingPolicy {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicy
		return ret
	}).(MedianStoppingPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyResponse
func (val *MedianStoppingPolicyResponse) Defaults() *MedianStoppingPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponseOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutput() MedianStoppingPolicyResponseOutput {
	return o
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutputWithContext(ctx context.Context) MedianStoppingPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutput() MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutputWithContext(ctx context.Context) MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) Elem() MedianStoppingPolicyResponseOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) MedianStoppingPolicyResponse {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicyResponse
		return ret
	}).(MedianStoppingPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

type ModelContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerType
func (val *ModelContainerType) Defaults() *ModelContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelContainerTypeInput is an input type that accepts ModelContainerTypeArgs and ModelContainerTypeOutput values.
// You can construct a concrete instance of `ModelContainerTypeInput` via:
//
//	ModelContainerTypeArgs{...}
type ModelContainerTypeInput interface {
	pulumi.Input

	ToModelContainerTypeOutput() ModelContainerTypeOutput
	ToModelContainerTypeOutputWithContext(context.Context) ModelContainerTypeOutput
}

type ModelContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerTypeArgs
func (val *ModelContainerTypeArgs) Defaults() *ModelContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return i.ToModelContainerTypeOutputWithContext(context.Background())
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerTypeOutput)
}

type ModelContainerTypeOutput struct{ *pulumi.OutputState }

func (ModelContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return o
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return o
}

// The asset description text.
func (o ModelContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ModelContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ModelContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model container.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerResponse
func (val *ModelContainerResponse) Defaults() *ModelContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type ModelContainerResponseOutput struct{ *pulumi.OutputState }

func (ModelContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerResponse)(nil)).Elem()
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutput() ModelContainerResponseOutput {
	return o
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutputWithContext(ctx context.Context) ModelContainerResponseOutput {
	return o
}

// The asset description text.
func (o ModelContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ModelContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ModelContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ModelContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model container.
func (o ModelContainerResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorData `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionType
func (val *ModelVersionType) Defaults() *ModelVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelVersionTypeInput is an input type that accepts ModelVersionTypeArgs and ModelVersionTypeOutput values.
// You can construct a concrete instance of `ModelVersionTypeInput` via:
//
//	ModelVersionTypeArgs{...}
type ModelVersionTypeInput interface {
	pulumi.Input

	ToModelVersionTypeOutput() ModelVersionTypeOutput
	ToModelVersionTypeOutputWithContext(context.Context) ModelVersionTypeOutput
}

// Model asset version details.
type ModelVersionTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors FlavorDataMapInput `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri pulumi.StringPtrInput `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the model lifecycle assigned to this model
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionTypeArgs
func (val *ModelVersionTypeArgs) Defaults() *ModelVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return i.ToModelVersionTypeOutputWithContext(context.Background())
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelVersionTypeOutput)
}

// Model asset version details.
type ModelVersionTypeOutput struct{ *pulumi.OutputState }

func (ModelVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return o
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return o
}

// The asset description text.
func (o ModelVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionTypeOutput) Flavors() FlavorDataMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]FlavorData { return v.Flavors }).(FlavorDataMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionTypeOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionTypeOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionTypeOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionTypeOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorDataResponse `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the model version.
	ProvisioningState string `pulumi:"provisioningState"`
	// Stage in the model lifecycle assigned to this model
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionResponse
func (val *ModelVersionResponse) Defaults() *ModelVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Model asset version details.
type ModelVersionResponseOutput struct{ *pulumi.OutputState }

func (ModelVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionResponse)(nil)).Elem()
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutput() ModelVersionResponseOutput {
	return o
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutputWithContext(ctx context.Context) ModelVersionResponseOutput {
	return o
}

// The asset description text.
func (o ModelVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionResponseOutput) Flavors() FlavorDataResponseMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]FlavorDataResponse { return v.Flavors }).(FlavorDataResponseMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionResponseOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionResponseOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionResponseOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the model version.
func (o ModelVersionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ModelVersionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Stage in the model lifecycle assigned to this model
func (o ModelVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MPI distribution configuration.
type Mpi struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MpiInput is an input type that accepts MpiArgs and MpiOutput values.
// You can construct a concrete instance of `MpiInput` via:
//
//	MpiArgs{...}
type MpiInput interface {
	pulumi.Input

	ToMpiOutput() MpiOutput
	ToMpiOutputWithContext(context.Context) MpiOutput
}

// MPI distribution configuration.
type MpiArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (MpiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (i MpiArgs) ToMpiOutput() MpiOutput {
	return i.ToMpiOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput)
}

func (i MpiArgs) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput).ToMpiPtrOutputWithContext(ctx)
}

// MpiPtrInput is an input type that accepts MpiArgs, MpiPtr and MpiPtrOutput values.
// You can construct a concrete instance of `MpiPtrInput` via:
//
//	        MpiArgs{...}
//
//	or:
//
//	        nil
type MpiPtrInput interface {
	pulumi.Input

	ToMpiPtrOutput() MpiPtrOutput
	ToMpiPtrOutputWithContext(context.Context) MpiPtrOutput
}

type mpiPtrType MpiArgs

func MpiPtr(v *MpiArgs) MpiPtrInput {
	return (*mpiPtrType)(v)
}

func (*mpiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (i *mpiPtrType) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i *mpiPtrType) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiPtrOutput)
}

// MPI distribution configuration.
type MpiOutput struct{ *pulumi.OutputState }

func (MpiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (o MpiOutput) ToMpiOutput() MpiOutput {
	return o
}

func (o MpiOutput) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return o
}

func (o MpiOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o.ToMpiPtrOutputWithContext(context.Background())
}

func (o MpiOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mpi) *Mpi {
		return &v
	}).(MpiPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v Mpi) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mpi) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiPtrOutput struct{ *pulumi.OutputState }

func (MpiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (o MpiPtrOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) Elem() MpiOutput {
	return o.ApplyT(func(v *Mpi) Mpi {
		if v != nil {
			return *v
		}
		var ret Mpi
		return ret
	}).(MpiOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mpi) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mpi) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// MPI distribution configuration.
type MpiResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MPI distribution configuration.
type MpiResponseOutput struct{ *pulumi.OutputState }

func (MpiResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpiResponse)(nil)).Elem()
}

func (o MpiResponseOutput) ToMpiResponseOutput() MpiResponseOutput {
	return o
}

func (o MpiResponseOutput) ToMpiResponseOutputWithContext(ctx context.Context) MpiResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v MpiResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MpiResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiResponsePtrOutput struct{ *pulumi.OutputState }

func (MpiResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MpiResponse)(nil)).Elem()
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutput() MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutputWithContext(ctx context.Context) MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) Elem() MpiResponseOutput {
	return o.ApplyT(func(v *MpiResponse) MpiResponse {
		if v != nil {
			return *v
		}
		var ret MpiResponse
		return ret
	}).(MpiResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

type NlpVerticalFeaturizationSettings struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

// NlpVerticalFeaturizationSettingsInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs and NlpVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsInput` via:
//
//	NlpVerticalFeaturizationSettingsArgs{...}
type NlpVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput
	ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsOutput
}

type NlpVerticalFeaturizationSettingsArgs struct {
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
}

func (NlpVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return i.ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput)
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput).ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalFeaturizationSettingsPtrInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs, NlpVerticalFeaturizationSettingsPtr and NlpVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsPtrInput` via:
//
//	        NlpVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput
	ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsPtrOutput
}

type nlpVerticalFeaturizationSettingsPtrType NlpVerticalFeaturizationSettingsArgs

func NlpVerticalFeaturizationSettingsPtr(v *NlpVerticalFeaturizationSettingsArgs) NlpVerticalFeaturizationSettingsPtrInput {
	return (*nlpVerticalFeaturizationSettingsPtrType)(v)
}

func (*nlpVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsPtrOutput)
}

type NlpVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalFeaturizationSettings) *NlpVerticalFeaturizationSettings {
		return &v
	}).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) Elem() NlpVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) NlpVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettings
		return ret
	}).(NlpVerticalFeaturizationSettingsOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponse struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

type NlpVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutput() NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutput() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) Elem() NlpVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) NlpVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettingsResponse
		return ret
	}).(NlpVerticalFeaturizationSettingsResponseOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettings struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettings
func (val *NlpVerticalLimitSettings) Defaults() *NlpVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// NlpVerticalLimitSettingsInput is an input type that accepts NlpVerticalLimitSettingsArgs and NlpVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsInput` via:
//
//	NlpVerticalLimitSettingsArgs{...}
type NlpVerticalLimitSettingsInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput
	ToNlpVerticalLimitSettingsOutputWithContext(context.Context) NlpVerticalLimitSettingsOutput
}

// Job execution constraints.
type NlpVerticalLimitSettingsArgs struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsArgs
func (val *NlpVerticalLimitSettingsArgs) Defaults() *NlpVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("P7D")
	}
	return &tmp
}
func (NlpVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return i.ToNlpVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput)
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput).ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalLimitSettingsPtrInput is an input type that accepts NlpVerticalLimitSettingsArgs, NlpVerticalLimitSettingsPtr and NlpVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsPtrInput` via:
//
//	        NlpVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput
	ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Context) NlpVerticalLimitSettingsPtrOutput
}

type nlpVerticalLimitSettingsPtrType NlpVerticalLimitSettingsArgs

func NlpVerticalLimitSettingsPtr(v *NlpVerticalLimitSettingsArgs) NlpVerticalLimitSettingsPtrInput {
	return (*nlpVerticalLimitSettingsPtrType)(v)
}

func (*nlpVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalLimitSettings) *NlpVerticalLimitSettings {
		return &v
	}).(NlpVerticalLimitSettingsPtrOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) Elem() NlpVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) NlpVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettings
		return ret
	}).(NlpVerticalLimitSettingsOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponse struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsResponse
func (val *NlpVerticalLimitSettingsResponse) Defaults() *NlpVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "P7D"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutput() NlpVerticalLimitSettingsResponseOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponseOutput {
	return o
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutput() NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) Elem() NlpVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) NlpVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettingsResponse
		return ret
	}).(NlpVerticalLimitSettingsResponseOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Counts of various compute node states on the amlCompute.
type NodeStateCountsResponse struct {
	// Number of compute nodes in idle state.
	IdleNodeCount int `pulumi:"idleNodeCount"`
	// Number of compute nodes which are leaving the amlCompute.
	LeavingNodeCount int `pulumi:"leavingNodeCount"`
	// Number of compute nodes which are in preempted state.
	PreemptedNodeCount int `pulumi:"preemptedNodeCount"`
	// Number of compute nodes which are being prepared.
	PreparingNodeCount int `pulumi:"preparingNodeCount"`
	// Number of compute nodes which are running jobs.
	RunningNodeCount int `pulumi:"runningNodeCount"`
	// Number of compute nodes which are in unusable state.
	UnusableNodeCount int `pulumi:"unusableNodeCount"`
}

// Counts of various compute node states on the amlCompute.
type NodeStateCountsResponseOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutput() NodeStateCountsResponseOutput {
	return o
}

func (o NodeStateCountsResponseOutput) ToNodeStateCountsResponseOutputWithContext(ctx context.Context) NodeStateCountsResponseOutput {
	return o
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponseOutput) IdleNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.IdleNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are leaving the amlCompute.
func (o NodeStateCountsResponseOutput) LeavingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.LeavingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in preempted state.
func (o NodeStateCountsResponseOutput) PreemptedNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.PreemptedNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponseOutput) PreparingNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.PreparingNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponseOutput) RunningNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.RunningNodeCount }).(pulumi.IntOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponseOutput) UnusableNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v NodeStateCountsResponse) int { return v.UnusableNodeCount }).(pulumi.IntOutput)
}

type NodeStateCountsResponsePtrOutput struct{ *pulumi.OutputState }

func (NodeStateCountsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStateCountsResponse)(nil)).Elem()
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutput() NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) ToNodeStateCountsResponsePtrOutputWithContext(ctx context.Context) NodeStateCountsResponsePtrOutput {
	return o
}

func (o NodeStateCountsResponsePtrOutput) Elem() NodeStateCountsResponseOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) NodeStateCountsResponse {
		if v != nil {
			return *v
		}
		var ret NodeStateCountsResponse
		return ret
	}).(NodeStateCountsResponseOutput)
}

// Number of compute nodes in idle state.
func (o NodeStateCountsResponsePtrOutput) IdleNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.IdleNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are leaving the amlCompute.
func (o NodeStateCountsResponsePtrOutput) LeavingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.LeavingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are in preempted state.
func (o NodeStateCountsResponsePtrOutput) PreemptedNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PreemptedNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are being prepared.
func (o NodeStateCountsResponsePtrOutput) PreparingNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.PreparingNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are running jobs.
func (o NodeStateCountsResponsePtrOutput) RunningNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RunningNodeCount
	}).(pulumi.IntPtrOutput)
}

// Number of compute nodes which are in unusable state.
func (o NodeStateCountsResponsePtrOutput) UnusableNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeStateCountsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.UnusableNodeCount
	}).(pulumi.IntPtrOutput)
}

type NoneAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category *string `pulumi:"category"`
	Target   *string `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// NoneAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts NoneAuthTypeWorkspaceConnectionPropertiesArgs and NoneAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `NoneAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	NoneAuthTypeWorkspaceConnectionPropertiesArgs{...}
type NoneAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput
	ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput
}

type NoneAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category pulumi.StringPtrInput `pulumi:"category"`
	Target   pulumi.StringPtrInput `pulumi:"target"`
	// Value details of the workspace connection.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat pulumi.StringPtrInput `pulumi:"valueFormat"`
}

func (NoneAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i NoneAuthTypeWorkspaceConnectionPropertiesArgs) ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i NoneAuthTypeWorkspaceConnectionPropertiesArgs) ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoneAuthTypeWorkspaceConnectionPropertiesOutput)
}

type NoneAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (NoneAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesOutput() NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'None'.
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o NoneAuthTypeWorkspaceConnectionPropertiesOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionProperties) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

type NoneAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'None'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category   *string     `pulumi:"category"`
	ExpiryTime *string     `pulumi:"expiryTime"`
	Metadata   interface{} `pulumi:"metadata"`
	Target     *string     `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesResponseOutput() NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToNoneAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'None'.
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NoneAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// NoneDatastoreCredentialsInput is an input type that accepts NoneDatastoreCredentialsArgs and NoneDatastoreCredentialsOutput values.
// You can construct a concrete instance of `NoneDatastoreCredentialsInput` via:
//
//	NoneDatastoreCredentialsArgs{...}
type NoneDatastoreCredentialsInput interface {
	pulumi.Input

	ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput
	ToNoneDatastoreCredentialsOutputWithContext(context.Context) NoneDatastoreCredentialsOutput
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
}

func (NoneDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return i.ToNoneDatastoreCredentialsOutputWithContext(context.Background())
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoneDatastoreCredentialsOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return o
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentialsResponse)(nil)).Elem()
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutput() NoneDatastoreCredentialsResponseOutput {
	return o
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutputWithContext(ctx context.Context) NoneDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

type NotebookPreparationErrorResponse struct {
	ErrorMessage *string `pulumi:"errorMessage"`
	StatusCode   *int    `pulumi:"statusCode"`
}

type NotebookPreparationErrorResponseOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutput() NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ToNotebookPreparationErrorResponseOutputWithContext(ctx context.Context) NotebookPreparationErrorResponseOutput {
	return o
}

func (o NotebookPreparationErrorResponseOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponseOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotebookPreparationErrorResponse) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type NotebookPreparationErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (NotebookPreparationErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotebookPreparationErrorResponse)(nil)).Elem()
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutput() NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) ToNotebookPreparationErrorResponsePtrOutputWithContext(ctx context.Context) NotebookPreparationErrorResponsePtrOutput {
	return o
}

func (o NotebookPreparationErrorResponsePtrOutput) Elem() NotebookPreparationErrorResponseOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) NotebookPreparationErrorResponse {
		if v != nil {
			return *v
		}
		var ret NotebookPreparationErrorResponse
		return ret
	}).(NotebookPreparationErrorResponseOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *string {
		if v == nil {
			return nil
		}
		return v.ErrorMessage
	}).(pulumi.StringPtrOutput)
}

func (o NotebookPreparationErrorResponsePtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NotebookPreparationErrorResponse) *int {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type NotebookResourceInfoResponse struct {
	Fqdn *string `pulumi:"fqdn"`
	// The error that occurs when preparing notebook.
	NotebookPreparationError *NotebookPreparationErrorResponse `pulumi:"notebookPreparationError"`
	// the data plane resourceId that used to initialize notebook component
	ResourceId *string `pulumi:"resourceId"`
}

type NotebookResourceInfoResponseOutput struct{ *pulumi.OutputState }

func (NotebookResourceInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotebookResourceInfoResponse)(nil)).Elem()
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutput() NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) ToNotebookResourceInfoResponseOutputWithContext(ctx context.Context) NotebookResourceInfoResponseOutput {
	return o
}

func (o NotebookResourceInfoResponseOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// The error that occurs when preparing notebook.
func (o NotebookResourceInfoResponseOutput) NotebookPreparationError() NotebookPreparationErrorResponsePtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *NotebookPreparationErrorResponse {
		return v.NotebookPreparationError
	}).(NotebookPreparationErrorResponsePtrOutput)
}

// the data plane resourceId that used to initialize notebook component
func (o NotebookResourceInfoResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotebookResourceInfoResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Configuration for notification.
type NotificationSetting struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhook `pulumi:"webhooks"`
}

// NotificationSettingInput is an input type that accepts NotificationSettingArgs and NotificationSettingOutput values.
// You can construct a concrete instance of `NotificationSettingInput` via:
//
//	NotificationSettingArgs{...}
type NotificationSettingInput interface {
	pulumi.Input

	ToNotificationSettingOutput() NotificationSettingOutput
	ToNotificationSettingOutputWithContext(context.Context) NotificationSettingOutput
}

// Configuration for notification.
type NotificationSettingArgs struct {
	// Send email notification to user on specified notification type
	EmailOn pulumi.StringArrayInput `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks AzureDevOpsWebhookMapInput `pulumi:"webhooks"`
}

func (NotificationSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (i NotificationSettingArgs) ToNotificationSettingOutput() NotificationSettingOutput {
	return i.ToNotificationSettingOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput)
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i NotificationSettingArgs) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingOutput).ToNotificationSettingPtrOutputWithContext(ctx)
}

// NotificationSettingPtrInput is an input type that accepts NotificationSettingArgs, NotificationSettingPtr and NotificationSettingPtrOutput values.
// You can construct a concrete instance of `NotificationSettingPtrInput` via:
//
//	        NotificationSettingArgs{...}
//
//	or:
//
//	        nil
type NotificationSettingPtrInput interface {
	pulumi.Input

	ToNotificationSettingPtrOutput() NotificationSettingPtrOutput
	ToNotificationSettingPtrOutputWithContext(context.Context) NotificationSettingPtrOutput
}

type notificationSettingPtrType NotificationSettingArgs

func NotificationSettingPtr(v *NotificationSettingArgs) NotificationSettingPtrInput {
	return (*notificationSettingPtrType)(v)
}

func (*notificationSettingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return i.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (i *notificationSettingPtrType) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationSettingPtrOutput)
}

// Configuration for notification.
type NotificationSettingOutput struct{ *pulumi.OutputState }

func (NotificationSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingOutput) ToNotificationSettingOutput() NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingOutputWithContext(ctx context.Context) NotificationSettingOutput {
	return o
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o.ToNotificationSettingPtrOutputWithContext(context.Background())
}

func (o NotificationSettingOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationSetting) *NotificationSetting {
		return &v
	}).(NotificationSettingPtrOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSetting) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v NotificationSetting) map[string]AzureDevOpsWebhook { return v.Webhooks }).(AzureDevOpsWebhookMapOutput)
}

type NotificationSettingPtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSetting)(nil)).Elem()
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutput() NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) ToNotificationSettingPtrOutputWithContext(ctx context.Context) NotificationSettingPtrOutput {
	return o
}

func (o NotificationSettingPtrOutput) Elem() NotificationSettingOutput {
	return o.ApplyT(func(v *NotificationSetting) NotificationSetting {
		if v != nil {
			return *v
		}
		var ret NotificationSetting
		return ret
	}).(NotificationSettingOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingPtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSetting) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingPtrOutput) Webhooks() AzureDevOpsWebhookMapOutput {
	return o.ApplyT(func(v *NotificationSetting) map[string]AzureDevOpsWebhook {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookMapOutput)
}

// Configuration for notification.
type NotificationSettingResponse struct {
	// Send email notification to user on specified notification type
	EmailOn []string `pulumi:"emailOn"`
	// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
	Emails []string `pulumi:"emails"`
	// Send webhook callback to a service. Key is a user-provided name for the webhook.
	Webhooks map[string]AzureDevOpsWebhookResponse `pulumi:"webhooks"`
}

// Configuration for notification.
type NotificationSettingResponseOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutput() NotificationSettingResponseOutput {
	return o
}

func (o NotificationSettingResponseOutput) ToNotificationSettingResponseOutputWithContext(ctx context.Context) NotificationSettingResponseOutput {
	return o
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponseOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.EmailOn }).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponseOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationSettingResponse) []string { return v.Emails }).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponseOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse { return v.Webhooks }).(AzureDevOpsWebhookResponseMapOutput)
}

type NotificationSettingResponsePtrOutput struct{ *pulumi.OutputState }

func (NotificationSettingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationSettingResponse)(nil)).Elem()
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutput() NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) ToNotificationSettingResponsePtrOutputWithContext(ctx context.Context) NotificationSettingResponsePtrOutput {
	return o
}

func (o NotificationSettingResponsePtrOutput) Elem() NotificationSettingResponseOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) NotificationSettingResponse {
		if v != nil {
			return *v
		}
		var ret NotificationSettingResponse
		return ret
	}).(NotificationSettingResponseOutput)
}

// Send email notification to user on specified notification type
func (o NotificationSettingResponsePtrOutput) EmailOn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.EmailOn
	}).(pulumi.StringArrayOutput)
}

// This is the email recipient list which has a limitation of 499 characters in total concat with comma separator
func (o NotificationSettingResponsePtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// Send webhook callback to a service. Key is a user-provided name for the webhook.
func (o NotificationSettingResponsePtrOutput) Webhooks() AzureDevOpsWebhookResponseMapOutput {
	return o.ApplyT(func(v *NotificationSettingResponse) map[string]AzureDevOpsWebhookResponse {
		if v == nil {
			return nil
		}
		return v.Webhooks
	}).(AzureDevOpsWebhookResponseMapOutput)
}

// Optimization objective.
type Objective struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// ObjectiveInput is an input type that accepts ObjectiveArgs and ObjectiveOutput values.
// You can construct a concrete instance of `ObjectiveInput` via:
//
//	ObjectiveArgs{...}
type ObjectiveInput interface {
	pulumi.Input

	ToObjectiveOutput() ObjectiveOutput
	ToObjectiveOutputWithContext(context.Context) ObjectiveOutput
}

// Optimization objective.
type ObjectiveArgs struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal pulumi.StringInput `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric pulumi.StringInput `pulumi:"primaryMetric"`
}

func (ObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (i ObjectiveArgs) ToObjectiveOutput() ObjectiveOutput {
	return i.ToObjectiveOutputWithContext(context.Background())
}

func (i ObjectiveArgs) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectiveOutput)
}

// Optimization objective.
type ObjectiveOutput struct{ *pulumi.OutputState }

func (ObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (o ObjectiveOutput) ToObjectiveOutput() ObjectiveOutput {
	return o
}

func (o ObjectiveOutput) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Optimization objective.
type ObjectiveResponse struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// Optimization objective.
type ObjectiveResponseOutput struct{ *pulumi.OutputState }

func (ObjectiveResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectiveResponse)(nil)).Elem()
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutput() ObjectiveResponseOutput {
	return o
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutputWithContext(ctx context.Context) ObjectiveResponseOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveResponseOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Online endpoint configuration
type OnlineEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointType
func (val *OnlineEndpointType) Defaults() *OnlineEndpointType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// OnlineEndpointTypeInput is an input type that accepts OnlineEndpointTypeArgs and OnlineEndpointTypeOutput values.
// You can construct a concrete instance of `OnlineEndpointTypeInput` via:
//
//	OnlineEndpointTypeArgs{...}
type OnlineEndpointTypeInput interface {
	pulumi.Input

	ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput
	ToOnlineEndpointTypeOutputWithContext(context.Context) OnlineEndpointTypeOutput
}

// Online endpoint configuration
type OnlineEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic pulumi.IntMapInput `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic pulumi.IntMapInput `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointTypeArgs
func (val *OnlineEndpointTypeArgs) Defaults() *OnlineEndpointTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		tmp.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (OnlineEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return i.ToOnlineEndpointTypeOutputWithContext(context.Background())
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineEndpointTypeOutput)
}

// Online endpoint configuration
type OnlineEndpointTypeOutput struct{ *pulumi.OutputState }

func (OnlineEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return o
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o OnlineEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointTypeOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointTypeOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online endpoint configuration
type OnlineEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointResponse
func (val *OnlineEndpointResponse) Defaults() *OnlineEndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// Online endpoint configuration
type OnlineEndpointResponseOutput struct{ *pulumi.OutputState }

func (OnlineEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointResponse)(nil)).Elem()
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutput() OnlineEndpointResponseOutput {
	return o
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutputWithContext(ctx context.Context) OnlineEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointResponseOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o OnlineEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Endpoint URI.
func (o OnlineEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o OnlineEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointResponseOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettings struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettings
func (val *OnlineRequestSettings) Defaults() *OnlineRequestSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// OnlineRequestSettingsInput is an input type that accepts OnlineRequestSettingsArgs and OnlineRequestSettingsOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsInput` via:
//
//	OnlineRequestSettingsArgs{...}
type OnlineRequestSettingsInput interface {
	pulumi.Input

	ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput
	ToOnlineRequestSettingsOutputWithContext(context.Context) OnlineRequestSettingsOutput
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsArgs struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait pulumi.StringPtrInput `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout pulumi.StringPtrInput `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsArgs
func (val *OnlineRequestSettingsArgs) Defaults() *OnlineRequestSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		tmp.MaxConcurrentRequestsPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MaxQueueWait == nil {
		tmp.MaxQueueWait = pulumi.StringPtr("PT0.5S")
	}
	if tmp.RequestTimeout == nil {
		tmp.RequestTimeout = pulumi.StringPtr("PT5S")
	}
	return &tmp
}
func (OnlineRequestSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return i.ToOnlineRequestSettingsOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput)
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput).ToOnlineRequestSettingsPtrOutputWithContext(ctx)
}

// OnlineRequestSettingsPtrInput is an input type that accepts OnlineRequestSettingsArgs, OnlineRequestSettingsPtr and OnlineRequestSettingsPtrOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsPtrInput` via:
//
//	        OnlineRequestSettingsArgs{...}
//
//	or:
//
//	        nil
type OnlineRequestSettingsPtrInput interface {
	pulumi.Input

	ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput
	ToOnlineRequestSettingsPtrOutputWithContext(context.Context) OnlineRequestSettingsPtrOutput
}

type onlineRequestSettingsPtrType OnlineRequestSettingsArgs

func OnlineRequestSettingsPtr(v *OnlineRequestSettingsArgs) OnlineRequestSettingsPtrInput {
	return (*onlineRequestSettingsPtrType)(v)
}

func (*onlineRequestSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnlineRequestSettings) *OnlineRequestSettings {
		return &v
	}).(OnlineRequestSettingsPtrOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsPtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) Elem() OnlineRequestSettingsOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) OnlineRequestSettings {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettings
		return ret
	}).(OnlineRequestSettingsOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsPtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsPtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsPtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsResponse
func (val *OnlineRequestSettingsResponse) Defaults() *OnlineRequestSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponseOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutput() OnlineRequestSettingsResponseOutput {
	return o
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutputWithContext(ctx context.Context) OnlineRequestSettingsResponseOutput {
	return o
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponseOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsResponseOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponseOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutput() OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutputWithContext(ctx context.Context) OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) Elem() OnlineRequestSettingsResponseOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) OnlineRequestSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettingsResponse
		return ret
	}).(OnlineRequestSettingsResponseOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponsePtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsResponsePtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponsePtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReference struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// OutputPathAssetReferenceInput is an input type that accepts OutputPathAssetReferenceArgs and OutputPathAssetReferenceOutput values.
// You can construct a concrete instance of `OutputPathAssetReferenceInput` via:
//
//	OutputPathAssetReferenceArgs{...}
type OutputPathAssetReferenceInput interface {
	pulumi.Input

	ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput
	ToOutputPathAssetReferenceOutputWithContext(context.Context) OutputPathAssetReferenceOutput
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceArgs struct {
	// ARM resource ID of the job.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (OutputPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return i.ToOutputPathAssetReferenceOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput)
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput).ToOutputPathAssetReferencePtrOutputWithContext(ctx)
}

// OutputPathAssetReferencePtrInput is an input type that accepts OutputPathAssetReferenceArgs, OutputPathAssetReferencePtr and OutputPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `OutputPathAssetReferencePtrInput` via:
//
//	        OutputPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type OutputPathAssetReferencePtrInput interface {
	pulumi.Input

	ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput
	ToOutputPathAssetReferencePtrOutputWithContext(context.Context) OutputPathAssetReferencePtrOutput
}

type outputPathAssetReferencePtrType OutputPathAssetReferenceArgs

func OutputPathAssetReferencePtr(v *OutputPathAssetReferenceArgs) OutputPathAssetReferencePtrInput {
	return (*outputPathAssetReferencePtrType)(v)
}

func (*outputPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputPathAssetReference) *OutputPathAssetReference {
		return &v
	}).(OutputPathAssetReferencePtrOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) Elem() OutputPathAssetReferenceOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) OutputPathAssetReference {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReference
		return ret
	}).(OutputPathAssetReferenceOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponse struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutput() OutputPathAssetReferenceResponseOutput {
	return o
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponseOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutput() OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) Elem() OutputPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) OutputPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReferenceResponse
		return ret
	}).(OutputPathAssetReferenceResponseOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponsePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

type PATAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                 `pulumi:"category"`
	Credentials *WorkspaceConnectionPersonalAccessToken `pulumi:"credentials"`
	Target      *string                                 `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// PATAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts PATAuthTypeWorkspaceConnectionPropertiesArgs and PATAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `PATAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	PATAuthTypeWorkspaceConnectionPropertiesArgs{...}
type PATAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput
	ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput
}

type PATAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category    pulumi.StringPtrInput                          `pulumi:"category"`
	Credentials WorkspaceConnectionPersonalAccessTokenPtrInput `pulumi:"credentials"`
	Target      pulumi.StringPtrInput                          `pulumi:"target"`
	// Value details of the workspace connection.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat pulumi.StringPtrInput `pulumi:"valueFormat"`
}

func (PATAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i PATAuthTypeWorkspaceConnectionPropertiesArgs) ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i PATAuthTypeWorkspaceConnectionPropertiesArgs) ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PATAuthTypeWorkspaceConnectionPropertiesOutput)
}

type PATAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (PATAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ToPATAuthTypeWorkspaceConnectionPropertiesOutput() PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ToPATAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'PAT'.
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionPersonalAccessToken {
		return v.Credentials
	}).(WorkspaceConnectionPersonalAccessTokenPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o PATAuthTypeWorkspaceConnectionPropertiesOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionProperties) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

type PATAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'PAT'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                         `pulumi:"category"`
	Credentials *WorkspaceConnectionPersonalAccessTokenResponse `pulumi:"credentials"`
	ExpiryTime  *string                                         `pulumi:"expiryTime"`
	Metadata    interface{}                                     `pulumi:"metadata"`
	Target      *string                                         `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type PATAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PATAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToPATAuthTypeWorkspaceConnectionPropertiesResponseOutput() PATAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToPATAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) PATAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'PAT'.
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionPersonalAccessTokenResponsePtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionPersonalAccessTokenResponse {
		return v.Credentials
	}).(WorkspaceConnectionPersonalAccessTokenResponsePtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o PATAuthTypeWorkspaceConnectionPropertiesResponseOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PATAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

type PasswordResponse struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

type PasswordResponseOutput struct{ *pulumi.OutputState }

func (PasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseOutput) ToPasswordResponseOutput() PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) ToPasswordResponseOutputWithContext(ctx context.Context) PasswordResponseOutput {
	return o
}

func (o PasswordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o PasswordResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PasswordResponseArrayOutput struct{ *pulumi.OutputState }

func (PasswordResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PasswordResponse)(nil)).Elem()
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutput() PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) ToPasswordResponseArrayOutputWithContext(ctx context.Context) PasswordResponseArrayOutput {
	return o
}

func (o PasswordResponseArrayOutput) Index(i pulumi.IntInput) PasswordResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PasswordResponse {
		return vs[0].([]PasswordResponse)[vs[1].(int)]
	}).(PasswordResponseOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettings struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUser `pulumi:"assignedUser"`
}

// PersonalComputeInstanceSettingsInput is an input type that accepts PersonalComputeInstanceSettingsArgs and PersonalComputeInstanceSettingsOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsInput` via:
//
//	PersonalComputeInstanceSettingsArgs{...}
type PersonalComputeInstanceSettingsInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput
	ToPersonalComputeInstanceSettingsOutputWithContext(context.Context) PersonalComputeInstanceSettingsOutput
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsArgs struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser AssignedUserPtrInput `pulumi:"assignedUser"`
}

func (PersonalComputeInstanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return i.ToPersonalComputeInstanceSettingsOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput)
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput).ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx)
}

// PersonalComputeInstanceSettingsPtrInput is an input type that accepts PersonalComputeInstanceSettingsArgs, PersonalComputeInstanceSettingsPtr and PersonalComputeInstanceSettingsPtrOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsPtrInput` via:
//
//	        PersonalComputeInstanceSettingsArgs{...}
//
//	or:
//
//	        nil
type PersonalComputeInstanceSettingsPtrInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput
	ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Context) PersonalComputeInstanceSettingsPtrOutput
}

type personalComputeInstanceSettingsPtrType PersonalComputeInstanceSettingsArgs

func PersonalComputeInstanceSettingsPtr(v *PersonalComputeInstanceSettingsArgs) PersonalComputeInstanceSettingsPtrInput {
	return (*personalComputeInstanceSettingsPtrType)(v)
}

func (*personalComputeInstanceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersonalComputeInstanceSettings) *PersonalComputeInstanceSettings {
		return &v
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettings) *AssignedUser { return v.AssignedUser }).(AssignedUserPtrOutput)
}

type PersonalComputeInstanceSettingsPtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) Elem() PersonalComputeInstanceSettingsOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) PersonalComputeInstanceSettings {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettings
		return ret
	}).(PersonalComputeInstanceSettingsOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsPtrOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) *AssignedUser {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponse struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUserResponse `pulumi:"assignedUser"`
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponseOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutput() PersonalComputeInstanceSettingsResponseOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponseOutput {
	return o
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponseOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettingsResponse) *AssignedUserResponse { return v.AssignedUser }).(AssignedUserResponsePtrOutput)
}

type PersonalComputeInstanceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutput() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) Elem() PersonalComputeInstanceSettingsResponseOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) PersonalComputeInstanceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettingsResponse
		return ret
	}).(PersonalComputeInstanceSettingsResponseOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponsePtrOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) *AssignedUserResponse {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserResponsePtrOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJob
func (val *PipelineJob) Defaults() *PipelineJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// PipelineJobInput is an input type that accepts PipelineJobArgs and PipelineJobOutput values.
// You can construct a concrete instance of `PipelineJobInput` via:
//
//	PipelineJobArgs{...}
type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(context.Context) PipelineJobOutput
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs pulumi.MapInput `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings pulumi.Input `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId pulumi.StringPtrInput `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobArgs
func (val *PipelineJobArgs) Defaults() *PipelineJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (i PipelineJobArgs) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i PipelineJobArgs) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Outputs for the pipeline job
func (o PipelineJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobResponse
func (val *PipelineJobResponse) Defaults() *PipelineJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponseOutput struct{ *pulumi.OutputState }

func (PipelineJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJobResponse)(nil)).Elem()
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutput() PipelineJobResponseOutput {
	return o
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutputWithContext(ctx context.Context) PipelineJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobResponseOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Outputs for the pipeline job
func (o PipelineJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobResponseOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Status of the job.
func (o PipelineJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment configuration options.
type PoolEnvironmentConfiguration struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettings `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfiguration
func (val *PoolEnvironmentConfiguration) Defaults() *PoolEnvironmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// PoolEnvironmentConfigurationInput is an input type that accepts PoolEnvironmentConfigurationArgs and PoolEnvironmentConfigurationOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationInput` via:
//
//	PoolEnvironmentConfigurationArgs{...}
type PoolEnvironmentConfigurationInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput
	ToPoolEnvironmentConfigurationOutputWithContext(context.Context) PoolEnvironmentConfigurationOutput
}

// Environment configuration options.
type PoolEnvironmentConfigurationArgs struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe ProbeSettingsPtrInput `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationArgs
func (val *PoolEnvironmentConfigurationArgs) Defaults() *PoolEnvironmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PoolEnvironmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return i.ToPoolEnvironmentConfigurationOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput)
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput).ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx)
}

// PoolEnvironmentConfigurationPtrInput is an input type that accepts PoolEnvironmentConfigurationArgs, PoolEnvironmentConfigurationPtr and PoolEnvironmentConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationPtrInput` via:
//
//	        PoolEnvironmentConfigurationArgs{...}
//
//	or:
//
//	        nil
type PoolEnvironmentConfigurationPtrInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput
	ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Context) PoolEnvironmentConfigurationPtrOutput
}

type poolEnvironmentConfigurationPtrType PoolEnvironmentConfigurationArgs

func PoolEnvironmentConfigurationPtr(v *PoolEnvironmentConfigurationArgs) PoolEnvironmentConfigurationPtrInput {
	return (*poolEnvironmentConfigurationPtrType)(v)
}

func (*poolEnvironmentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolEnvironmentConfiguration) *PoolEnvironmentConfiguration {
		return &v
	}).(PoolEnvironmentConfigurationPtrOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.StartupProbe }).(ProbeSettingsPtrOutput)
}

type PoolEnvironmentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) Elem() PoolEnvironmentConfigurationOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) PoolEnvironmentConfiguration {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfiguration
		return ret
	}).(PoolEnvironmentConfigurationOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationPtrOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationPtrOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationPtrOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponse struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettingsResponse `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationResponse
func (val *PoolEnvironmentConfigurationResponse) Defaults() *PoolEnvironmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutput() PoolEnvironmentConfigurationResponseOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponseOutput {
	return o
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponseOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.StartupProbe }).(ProbeSettingsResponsePtrOutput)
}

type PoolEnvironmentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutput() PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) Elem() PoolEnvironmentConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) PoolEnvironmentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfigurationResponse
		return ret
	}).(PoolEnvironmentConfigurationResponseOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponsePtrOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponsePtrOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponsePtrOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// Model configuration options.
type PoolModelConfiguration struct {
	// The URI path to the model.
	ModelId *string `pulumi:"modelId"`
}

// PoolModelConfigurationInput is an input type that accepts PoolModelConfigurationArgs and PoolModelConfigurationOutput values.
// You can construct a concrete instance of `PoolModelConfigurationInput` via:
//
//	PoolModelConfigurationArgs{...}
type PoolModelConfigurationInput interface {
	pulumi.Input

	ToPoolModelConfigurationOutput() PoolModelConfigurationOutput
	ToPoolModelConfigurationOutputWithContext(context.Context) PoolModelConfigurationOutput
}

// Model configuration options.
type PoolModelConfigurationArgs struct {
	// The URI path to the model.
	ModelId pulumi.StringPtrInput `pulumi:"modelId"`
}

func (PoolModelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfiguration)(nil)).Elem()
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationOutput() PoolModelConfigurationOutput {
	return i.ToPoolModelConfigurationOutputWithContext(context.Background())
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationOutputWithContext(ctx context.Context) PoolModelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationOutput)
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return i.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationOutput).ToPoolModelConfigurationPtrOutputWithContext(ctx)
}

// PoolModelConfigurationPtrInput is an input type that accepts PoolModelConfigurationArgs, PoolModelConfigurationPtr and PoolModelConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolModelConfigurationPtrInput` via:
//
//	        PoolModelConfigurationArgs{...}
//
//	or:
//
//	        nil
type PoolModelConfigurationPtrInput interface {
	pulumi.Input

	ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput
	ToPoolModelConfigurationPtrOutputWithContext(context.Context) PoolModelConfigurationPtrOutput
}

type poolModelConfigurationPtrType PoolModelConfigurationArgs

func PoolModelConfigurationPtr(v *PoolModelConfigurationArgs) PoolModelConfigurationPtrInput {
	return (*poolModelConfigurationPtrType)(v)
}

func (*poolModelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfiguration)(nil)).Elem()
}

func (i *poolModelConfigurationPtrType) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return i.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolModelConfigurationPtrType) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationPtrOutput)
}

// Model configuration options.
type PoolModelConfigurationOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfiguration)(nil)).Elem()
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationOutput() PoolModelConfigurationOutput {
	return o
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationOutputWithContext(ctx context.Context) PoolModelConfigurationOutput {
	return o
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return o.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolModelConfiguration) *PoolModelConfiguration {
		return &v
	}).(PoolModelConfigurationPtrOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolModelConfiguration) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

type PoolModelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfiguration)(nil)).Elem()
}

func (o PoolModelConfigurationPtrOutput) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return o
}

func (o PoolModelConfigurationPtrOutput) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return o
}

func (o PoolModelConfigurationPtrOutput) Elem() PoolModelConfigurationOutput {
	return o.ApplyT(func(v *PoolModelConfiguration) PoolModelConfiguration {
		if v != nil {
			return *v
		}
		var ret PoolModelConfiguration
		return ret
	}).(PoolModelConfigurationOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationPtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolModelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// Model configuration options.
type PoolModelConfigurationResponse struct {
	// The URI path to the model.
	ModelId *string `pulumi:"modelId"`
}

// Model configuration options.
type PoolModelConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfigurationResponse)(nil)).Elem()
}

func (o PoolModelConfigurationResponseOutput) ToPoolModelConfigurationResponseOutput() PoolModelConfigurationResponseOutput {
	return o
}

func (o PoolModelConfigurationResponseOutput) ToPoolModelConfigurationResponseOutputWithContext(ctx context.Context) PoolModelConfigurationResponseOutput {
	return o
}

// The URI path to the model.
func (o PoolModelConfigurationResponseOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolModelConfigurationResponse) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

type PoolModelConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfigurationResponse)(nil)).Elem()
}

func (o PoolModelConfigurationResponsePtrOutput) ToPoolModelConfigurationResponsePtrOutput() PoolModelConfigurationResponsePtrOutput {
	return o
}

func (o PoolModelConfigurationResponsePtrOutput) ToPoolModelConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolModelConfigurationResponsePtrOutput {
	return o
}

func (o PoolModelConfigurationResponsePtrOutput) Elem() PoolModelConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolModelConfigurationResponse) PoolModelConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PoolModelConfigurationResponse
		return ret
	}).(PoolModelConfigurationResponseOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationResponsePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolModelConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// The identity of the resource.
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The resource of private end point.
	PrivateEndpoint *PrivateEndpointResponse `pulumi:"privateEndpoint"`
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The provisioning state of the private endpoint connection resource.
	ProvisioningState string `pulumi:"provisioningState"`
	// The sku of the workspace.
	Sku *SkuResponse `pulumi:"sku"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	// Contains resource tags defined as key/value pairs.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The identity of the resource.
func (o PrivateEndpointConnectionResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// Specifies the location of the resource.
func (o PrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The resource of private end point.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() PrivateEndpointResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateEndpointResponse { return v.PrivateEndpoint }).(PrivateEndpointResponsePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// The provisioning state of the private endpoint connection resource.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The sku of the workspace.
func (o PrivateEndpointConnectionResponseOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

// Contains resource tags defined as key/value pairs.
func (o PrivateEndpointConnectionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestination struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// PrivateEndpointDestinationInput is an input type that accepts PrivateEndpointDestinationArgs and PrivateEndpointDestinationOutput values.
// You can construct a concrete instance of `PrivateEndpointDestinationInput` via:
//
//	PrivateEndpointDestinationArgs{...}
type PrivateEndpointDestinationInput interface {
	pulumi.Input

	ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput
	ToPrivateEndpointDestinationOutputWithContext(context.Context) PrivateEndpointDestinationOutput
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationArgs struct {
	ServiceResourceId pulumi.StringPtrInput `pulumi:"serviceResourceId"`
	SparkEnabled      pulumi.BoolPtrInput   `pulumi:"sparkEnabled"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       pulumi.StringPtrInput `pulumi:"sparkStatus"`
	SubresourceTarget pulumi.StringPtrInput `pulumi:"subresourceTarget"`
}

func (PrivateEndpointDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestination)(nil)).Elem()
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput {
	return i.ToPrivateEndpointDestinationOutputWithContext(context.Background())
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationOutputWithContext(ctx context.Context) PrivateEndpointDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationOutput)
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return i.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationOutput).ToPrivateEndpointDestinationPtrOutputWithContext(ctx)
}

// PrivateEndpointDestinationPtrInput is an input type that accepts PrivateEndpointDestinationArgs, PrivateEndpointDestinationPtr and PrivateEndpointDestinationPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointDestinationPtrInput` via:
//
//	        PrivateEndpointDestinationArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointDestinationPtrInput interface {
	pulumi.Input

	ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput
	ToPrivateEndpointDestinationPtrOutputWithContext(context.Context) PrivateEndpointDestinationPtrOutput
}

type privateEndpointDestinationPtrType PrivateEndpointDestinationArgs

func PrivateEndpointDestinationPtr(v *PrivateEndpointDestinationArgs) PrivateEndpointDestinationPtrInput {
	return (*privateEndpointDestinationPtrType)(v)
}

func (*privateEndpointDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestination)(nil)).Elem()
}

func (i *privateEndpointDestinationPtrType) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return i.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (i *privateEndpointDestinationPtrType) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestination)(nil)).Elem()
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput {
	return o
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationOutputWithContext(ctx context.Context) PrivateEndpointDestinationOutput {
	return o
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return o.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointDestination) *PrivateEndpointDestination {
		return &v
	}).(PrivateEndpointDestinationPtrOutput)
}

func (o PrivateEndpointDestinationOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.ServiceResourceId }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *bool { return v.SparkEnabled }).(pulumi.BoolPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.SparkStatus }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.SubresourceTarget }).(pulumi.StringPtrOutput)
}

type PrivateEndpointDestinationPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestination)(nil)).Elem()
}

func (o PrivateEndpointDestinationPtrOutput) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return o
}

func (o PrivateEndpointDestinationPtrOutput) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return o
}

func (o PrivateEndpointDestinationPtrOutput) Elem() PrivateEndpointDestinationOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) PrivateEndpointDestination {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointDestination
		return ret
	}).(PrivateEndpointDestinationOutput)
}

func (o PrivateEndpointDestinationPtrOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceResourceId
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationPtrOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *bool {
		if v == nil {
			return nil
		}
		return v.SparkEnabled
	}).(pulumi.BoolPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationPtrOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.SparkStatus
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationPtrOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.SubresourceTarget
	}).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationResponse struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestinationResponse)(nil)).Elem()
}

func (o PrivateEndpointDestinationResponseOutput) ToPrivateEndpointDestinationResponseOutput() PrivateEndpointDestinationResponseOutput {
	return o
}

func (o PrivateEndpointDestinationResponseOutput) ToPrivateEndpointDestinationResponseOutputWithContext(ctx context.Context) PrivateEndpointDestinationResponseOutput {
	return o
}

func (o PrivateEndpointDestinationResponseOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.ServiceResourceId }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponseOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *bool { return v.SparkEnabled }).(pulumi.BoolPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationResponseOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.SparkStatus }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponseOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.SubresourceTarget }).(pulumi.StringPtrOutput)
}

type PrivateEndpointDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestinationResponse)(nil)).Elem()
}

func (o PrivateEndpointDestinationResponsePtrOutput) ToPrivateEndpointDestinationResponsePtrOutput() PrivateEndpointDestinationResponsePtrOutput {
	return o
}

func (o PrivateEndpointDestinationResponsePtrOutput) ToPrivateEndpointDestinationResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationResponsePtrOutput {
	return o
}

func (o PrivateEndpointDestinationResponsePtrOutput) Elem() PrivateEndpointDestinationResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) PrivateEndpointDestinationResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointDestinationResponse
		return ret
	}).(PrivateEndpointDestinationResponseOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceResourceId
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SparkEnabled
	}).(pulumi.BoolPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationResponsePtrOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SparkStatus
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubresourceTarget
	}).(pulumi.StringPtrOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestination `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// PrivateEndpointOutboundRuleInput is an input type that accepts PrivateEndpointOutboundRuleArgs and PrivateEndpointOutboundRuleOutput values.
// You can construct a concrete instance of `PrivateEndpointOutboundRuleInput` via:
//
//	PrivateEndpointOutboundRuleArgs{...}
type PrivateEndpointOutboundRuleInput interface {
	pulumi.Input

	ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput
	ToPrivateEndpointOutboundRuleOutputWithContext(context.Context) PrivateEndpointOutboundRuleOutput
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination PrivateEndpointDestinationPtrInput `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRule)(nil)).Elem()
}

func (i PrivateEndpointOutboundRuleArgs) ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput {
	return i.ToPrivateEndpointOutboundRuleOutputWithContext(context.Background())
}

func (i PrivateEndpointOutboundRuleArgs) ToPrivateEndpointOutboundRuleOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutboundRuleOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRule)(nil)).Elem()
}

func (o PrivateEndpointOutboundRuleOutput) ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput {
	return o
}

func (o PrivateEndpointOutboundRuleOutput) ToPrivateEndpointOutboundRuleOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Destination() PrivateEndpointDestinationPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *PrivateEndpointDestination { return v.Destination }).(PrivateEndpointDestinationPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'PrivateEndpoint'.
func (o PrivateEndpointOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestinationResponse `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRuleResponse)(nil)).Elem()
}

func (o PrivateEndpointOutboundRuleResponseOutput) ToPrivateEndpointOutboundRuleResponseOutput() PrivateEndpointOutboundRuleResponseOutput {
	return o
}

func (o PrivateEndpointOutboundRuleResponseOutput) ToPrivateEndpointOutboundRuleResponseOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Destination() PrivateEndpointDestinationResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *PrivateEndpointDestinationResponse { return v.Destination }).(PrivateEndpointDestinationResponsePtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'PrivateEndpoint'.
func (o PrivateEndpointOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResource struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// PrivateEndpointResourceInput is an input type that accepts PrivateEndpointResourceArgs and PrivateEndpointResourceOutput values.
// You can construct a concrete instance of `PrivateEndpointResourceInput` via:
//
//	PrivateEndpointResourceArgs{...}
type PrivateEndpointResourceInput interface {
	pulumi.Input

	ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput
	ToPrivateEndpointResourceOutputWithContext(context.Context) PrivateEndpointResourceOutput
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceArgs struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId pulumi.StringPtrInput `pulumi:"subnetArmId"`
}

func (PrivateEndpointResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return i.ToPrivateEndpointResourceOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput)
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput).ToPrivateEndpointResourcePtrOutputWithContext(ctx)
}

// PrivateEndpointResourcePtrInput is an input type that accepts PrivateEndpointResourceArgs, PrivateEndpointResourcePtr and PrivateEndpointResourcePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResourcePtrInput` via:
//
//	        PrivateEndpointResourceArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointResourcePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput
	ToPrivateEndpointResourcePtrOutputWithContext(context.Context) PrivateEndpointResourcePtrOutput
}

type privateEndpointResourcePtrType PrivateEndpointResourceArgs

func PrivateEndpointResourcePtr(v *PrivateEndpointResourceArgs) PrivateEndpointResourcePtrInput {
	return (*privateEndpointResourcePtrType)(v)
}

func (*privateEndpointResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourcePtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointResource) *PrivateEndpointResource {
		return &v
	}).(PrivateEndpointResourcePtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResource) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourcePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) Elem() PrivateEndpointResourceOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) PrivateEndpointResource {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResource
		return ret
	}).(PrivateEndpointResourceOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourcePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutput() PrivateEndpointResourceResponseOutput {
	return o
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutputWithContext(ctx context.Context) PrivateEndpointResourceResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponseOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutput() PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) Elem() PrivateEndpointResourceResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) PrivateEndpointResourceResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResourceResponse
		return ret
	}).(PrivateEndpointResourceResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponsePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint resource.
type PrivateEndpointResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
}

// The Private Endpoint resource.
type PrivateEndpointResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutput() PrivateEndpointResponseOutput {
	return o
}

func (o PrivateEndpointResponseOutput) ToPrivateEndpointResponseOutputWithContext(ctx context.Context) PrivateEndpointResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResponse) string { return v.Id }).(pulumi.StringOutput)
}

type PrivateEndpointResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResponse)(nil)).Elem()
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutput() PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) ToPrivateEndpointResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResponsePtrOutput {
	return o
}

func (o PrivateEndpointResponsePtrOutput) Elem() PrivateEndpointResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) PrivateEndpointResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResponse
		return ret
	}).(PrivateEndpointResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// The reason for approval/rejection of the connection.
	Description *string `pulumi:"description"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// A message indicating if changes on the service provider require any updates on the consumer.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// The reason for approval/rejection of the connection.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettings struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettings
func (val *ProbeSettings) Defaults() *ProbeSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// ProbeSettingsInput is an input type that accepts ProbeSettingsArgs and ProbeSettingsOutput values.
// You can construct a concrete instance of `ProbeSettingsInput` via:
//
//	ProbeSettingsArgs{...}
type ProbeSettingsInput interface {
	pulumi.Input

	ToProbeSettingsOutput() ProbeSettingsOutput
	ToProbeSettingsOutputWithContext(context.Context) ProbeSettingsOutput
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsArgs struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay pulumi.StringPtrInput `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsArgs
func (val *ProbeSettingsArgs) Defaults() *ProbeSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		tmp.FailureThreshold = pulumi.IntPtr(30)
	}
	if tmp.Period == nil {
		tmp.Period = pulumi.StringPtr("PT10S")
	}
	if tmp.SuccessThreshold == nil {
		tmp.SuccessThreshold = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT2S")
	}
	return &tmp
}
func (ProbeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (i ProbeSettingsArgs) ToProbeSettingsOutput() ProbeSettingsOutput {
	return i.ToProbeSettingsOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput)
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput).ToProbeSettingsPtrOutputWithContext(ctx)
}

// ProbeSettingsPtrInput is an input type that accepts ProbeSettingsArgs, ProbeSettingsPtr and ProbeSettingsPtrOutput values.
// You can construct a concrete instance of `ProbeSettingsPtrInput` via:
//
//	        ProbeSettingsArgs{...}
//
//	or:
//
//	        nil
type ProbeSettingsPtrInput interface {
	pulumi.Input

	ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput
	ToProbeSettingsPtrOutputWithContext(context.Context) ProbeSettingsPtrOutput
}

type probeSettingsPtrType ProbeSettingsArgs

func ProbeSettingsPtr(v *ProbeSettingsArgs) ProbeSettingsPtrInput {
	return (*probeSettingsPtrType)(v)
}

func (*probeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsOutput struct{ *pulumi.OutputState }

func (ProbeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsOutput) ToProbeSettingsOutput() ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbeSettings) *ProbeSettings {
		return &v
	}).(ProbeSettingsPtrOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) Elem() ProbeSettingsOutput {
	return o.ApplyT(func(v *ProbeSettings) ProbeSettings {
		if v != nil {
			return *v
		}
		var ret ProbeSettings
		return ret
	}).(ProbeSettingsOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsPtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponse struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsResponse
func (val *ProbeSettingsResponse) Defaults() *ProbeSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponseOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutput() ProbeSettingsResponseOutput {
	return o
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutputWithContext(ctx context.Context) ProbeSettingsResponseOutput {
	return o
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponseOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutput() ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutputWithContext(ctx context.Context) ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) Elem() ProbeSettingsResponseOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) ProbeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ProbeSettingsResponse
		return ret
	}).(ProbeSettingsResponseOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Progress metrics definition
type ProgressMetricsResponse struct {
	// The completed datapoint count.
	CompletedDatapointCount float64 `pulumi:"completedDatapointCount"`
	// The time of last successful incremental data refresh in UTC.
	IncrementalDataLastRefreshDateTime string `pulumi:"incrementalDataLastRefreshDateTime"`
	// The skipped datapoint count.
	SkippedDatapointCount float64 `pulumi:"skippedDatapointCount"`
	// The total datapoint count.
	TotalDatapointCount float64 `pulumi:"totalDatapointCount"`
}

// Progress metrics definition
type ProgressMetricsResponseOutput struct{ *pulumi.OutputState }

func (ProgressMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressMetricsResponse)(nil)).Elem()
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutput() ProgressMetricsResponseOutput {
	return o
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutputWithContext(ctx context.Context) ProgressMetricsResponseOutput {
	return o
}

// The completed datapoint count.
func (o ProgressMetricsResponseOutput) CompletedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.CompletedDatapointCount }).(pulumi.Float64Output)
}

// The time of last successful incremental data refresh in UTC.
func (o ProgressMetricsResponseOutput) IncrementalDataLastRefreshDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ProgressMetricsResponse) string { return v.IncrementalDataLastRefreshDateTime }).(pulumi.StringOutput)
}

// The skipped datapoint count.
func (o ProgressMetricsResponseOutput) SkippedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.SkippedDatapointCount }).(pulumi.Float64Output)
}

// The total datapoint count.
func (o ProgressMetricsResponseOutput) TotalDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.TotalDatapointCount }).(pulumi.Float64Output)
}

// PyTorch distribution configuration.
type PyTorch struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorchInput is an input type that accepts PyTorchArgs and PyTorchOutput values.
// You can construct a concrete instance of `PyTorchInput` via:
//
//	PyTorchArgs{...}
type PyTorchInput interface {
	pulumi.Input

	ToPyTorchOutput() PyTorchOutput
	ToPyTorchOutputWithContext(context.Context) PyTorchOutput
}

// PyTorch distribution configuration.
type PyTorchArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (PyTorchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (i PyTorchArgs) ToPyTorchOutput() PyTorchOutput {
	return i.ToPyTorchOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput)
}

func (i PyTorchArgs) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput).ToPyTorchPtrOutputWithContext(ctx)
}

// PyTorchPtrInput is an input type that accepts PyTorchArgs, PyTorchPtr and PyTorchPtrOutput values.
// You can construct a concrete instance of `PyTorchPtrInput` via:
//
//	        PyTorchArgs{...}
//
//	or:
//
//	        nil
type PyTorchPtrInput interface {
	pulumi.Input

	ToPyTorchPtrOutput() PyTorchPtrOutput
	ToPyTorchPtrOutputWithContext(context.Context) PyTorchPtrOutput
}

type pyTorchPtrType PyTorchArgs

func PyTorchPtr(v *PyTorchArgs) PyTorchPtrInput {
	return (*pyTorchPtrType)(v)
}

func (*pyTorchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (i *pyTorchPtrType) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i *pyTorchPtrType) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchOutput struct{ *pulumi.OutputState }

func (PyTorchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (o PyTorchOutput) ToPyTorchOutput() PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o.ToPyTorchPtrOutputWithContext(context.Background())
}

func (o PyTorchOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PyTorch) *PyTorch {
		return &v
	}).(PyTorchPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorch) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorch) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchPtrOutput struct{ *pulumi.OutputState }

func (PyTorchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) Elem() PyTorchOutput {
	return o.ApplyT(func(v *PyTorch) PyTorch {
		if v != nil {
			return *v
		}
		var ret PyTorch
		return ret
	}).(PyTorchOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorch) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorch) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorch distribution configuration.
type PyTorchResponseOutput struct{ *pulumi.OutputState }

func (PyTorchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutput() PyTorchResponseOutput {
	return o
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutputWithContext(ctx context.Context) PyTorchResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchResponsePtrOutput struct{ *pulumi.OutputState }

func (PyTorchResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutput() PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutputWithContext(ctx context.Context) PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) Elem() PyTorchResponseOutput {
	return o.ApplyT(func(v *PyTorchResponse) PyTorchResponse {
		if v != nil {
			return *v
		}
		var ret PyTorchResponse
		return ret
	}).(PyTorchResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithm struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithm
func (val *RandomSamplingAlgorithm) Defaults() *RandomSamplingAlgorithm {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// RandomSamplingAlgorithmInput is an input type that accepts RandomSamplingAlgorithmArgs and RandomSamplingAlgorithmOutput values.
// You can construct a concrete instance of `RandomSamplingAlgorithmInput` via:
//
//	RandomSamplingAlgorithmArgs{...}
type RandomSamplingAlgorithmInput interface {
	pulumi.Input

	ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput
	ToRandomSamplingAlgorithmOutputWithContext(context.Context) RandomSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmArgs struct {
	// The specific type of random algorithm
	Rule pulumi.StringPtrInput `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed pulumi.IntPtrInput `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmArgs
func (val *RandomSamplingAlgorithmArgs) Defaults() *RandomSamplingAlgorithmArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		tmp.Rule = pulumi.StringPtr("Random")
	}
	return &tmp
}
func (RandomSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return i.ToRandomSamplingAlgorithmOutputWithContext(context.Background())
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return o
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return o
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponse struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmResponse
func (val *RandomSamplingAlgorithmResponse) Defaults() *RandomSamplingAlgorithmResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithmResponse)(nil)).Elem()
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutput() RandomSamplingAlgorithmResponseOutput {
	return o
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutputWithContext(ctx context.Context) RandomSamplingAlgorithmResponseOutput {
	return o
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmResponseOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmResponseOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type Recurrence struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Recurrence
func (val *Recurrence) Defaults() *Recurrence {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceInput is an input type that accepts RecurrenceArgs and RecurrenceOutput values.
// You can construct a concrete instance of `RecurrenceInput` via:
//
//	RecurrenceArgs{...}
type RecurrenceInput interface {
	pulumi.Input

	ToRecurrenceOutput() RecurrenceOutput
	ToRecurrenceOutputWithContext(context.Context) RecurrenceOutput
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceArgs struct {
	// [Required] The frequency to trigger schedule.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceArgs
func (val *RecurrenceArgs) Defaults() *RecurrenceArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (i RecurrenceArgs) ToRecurrenceOutput() RecurrenceOutput {
	return i.ToRecurrenceOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput)
}

func (i RecurrenceArgs) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput).ToRecurrencePtrOutputWithContext(ctx)
}

// RecurrencePtrInput is an input type that accepts RecurrenceArgs, RecurrencePtr and RecurrencePtrOutput values.
// You can construct a concrete instance of `RecurrencePtrInput` via:
//
//	        RecurrenceArgs{...}
//
//	or:
//
//	        nil
type RecurrencePtrInput interface {
	pulumi.Input

	ToRecurrencePtrOutput() RecurrencePtrOutput
	ToRecurrencePtrOutputWithContext(context.Context) RecurrencePtrOutput
}

type recurrencePtrType RecurrenceArgs

func RecurrencePtr(v *RecurrenceArgs) RecurrencePtrInput {
	return (*recurrencePtrType)(v)
}

func (*recurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (i *recurrencePtrType) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i *recurrencePtrType) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceOutput struct{ *pulumi.OutputState }

func (RecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (o RecurrenceOutput) ToRecurrenceOutput() RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o.ToRecurrencePtrOutputWithContext(context.Background())
}

func (o RecurrenceOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Recurrence) *Recurrence {
		return &v
	}).(RecurrencePtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Recurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v Recurrence) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrencePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) Elem() RecurrenceOutput {
	return o.ApplyT(func(v *Recurrence) Recurrence {
		if v != nil {
			return *v
		}
		var ret Recurrence
		return ret
	}).(RecurrenceOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrencePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrencePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Recurrence) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrencePtrOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *Recurrence) *RecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceSchedulePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrencePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrencePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceResponse struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceResponse
func (val *RecurrenceResponse) Defaults() *RecurrenceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutput() RecurrenceResponseOutput {
	return o
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutputWithContext(ctx context.Context) RecurrenceResponseOutput {
	return o
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutput() RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutputWithContext(ctx context.Context) RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) Elem() RecurrenceResponseOutput {
	return o.ApplyT(func(v *RecurrenceResponse) RecurrenceResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceResponse
		return ret
	}).(RecurrenceResponseOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceResponsePtrOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *RecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceScheduleResponsePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type RecurrenceSchedule struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//	RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

type RecurrenceScheduleArgs struct {
	// [Required] List of hours for the schedule.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//	        RecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrenceSchedule
		return ret
	}).(RecurrenceScheduleOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceSchedulePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponse struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceScheduleResponse
		return ret
	}).(RecurrenceScheduleResponseOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTrigger
func (val *RecurrenceTrigger) Defaults() *RecurrenceTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceTriggerInput is an input type that accepts RecurrenceTriggerArgs and RecurrenceTriggerOutput values.
// You can construct a concrete instance of `RecurrenceTriggerInput` via:
//
//	RecurrenceTriggerArgs{...}
type RecurrenceTriggerInput interface {
	pulumi.Input

	ToRecurrenceTriggerOutput() RecurrenceTriggerOutput
	ToRecurrenceTriggerOutputWithContext(context.Context) RecurrenceTriggerOutput
}

type RecurrenceTriggerArgs struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerArgs
func (val *RecurrenceTriggerArgs) Defaults() *RecurrenceTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return i.ToRecurrenceTriggerOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput)
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput).ToRecurrenceTriggerPtrOutputWithContext(ctx)
}

// RecurrenceTriggerPtrInput is an input type that accepts RecurrenceTriggerArgs, RecurrenceTriggerPtr and RecurrenceTriggerPtrOutput values.
// You can construct a concrete instance of `RecurrenceTriggerPtrInput` via:
//
//	        RecurrenceTriggerArgs{...}
//
//	or:
//
//	        nil
type RecurrenceTriggerPtrInput interface {
	pulumi.Input

	ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput
	ToRecurrenceTriggerPtrOutputWithContext(context.Context) RecurrenceTriggerPtrOutput
}

type recurrenceTriggerPtrType RecurrenceTriggerArgs

func RecurrenceTriggerPtr(v *RecurrenceTriggerArgs) RecurrenceTriggerPtrInput {
	return (*recurrenceTriggerPtrType)(v)
}

func (*recurrenceTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerPtrOutput)
}

type RecurrenceTriggerOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceTrigger) *RecurrenceTrigger {
		return &v
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTrigger) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerPtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) Elem() RecurrenceTriggerOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) RecurrenceTrigger {
		if v != nil {
			return *v
		}
		var ret RecurrenceTrigger
		return ret
	}).(RecurrenceTriggerOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerPtrOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *RecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerPtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerResponse
func (val *RecurrenceTriggerResponse) Defaults() *RecurrenceTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type RecurrenceTriggerResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutput() RecurrenceTriggerResponseOutput {
	return o
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutputWithContext(ctx context.Context) RecurrenceTriggerResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutput() RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutputWithContext(ctx context.Context) RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) Elem() RecurrenceTriggerResponseOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) RecurrenceTriggerResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceTriggerResponse
		return ret
	}).(RecurrenceTriggerResponseOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponsePtrOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *RecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponsePtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// Details of the Registry
type RegistryType struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceId `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections []RegistryPrivateEndpointConnection `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetails `pulumi:"regionDetails"`
}

// RegistryTypeInput is an input type that accepts RegistryTypeArgs and RegistryTypeOutput values.
// You can construct a concrete instance of `RegistryTypeInput` via:
//
//	RegistryTypeArgs{...}
type RegistryTypeInput interface {
	pulumi.Input

	ToRegistryTypeOutput() RegistryTypeOutput
	ToRegistryTypeOutputWithContext(context.Context) RegistryTypeOutput
}

// Details of the Registry
type RegistryTypeArgs struct {
	// Discovery URL for the Registry
	DiscoveryUrl pulumi.StringPtrInput `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher pulumi.StringPtrInput `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup ArmResourceIdPtrInput `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri pulumi.StringPtrInput `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections RegistryPrivateEndpointConnectionArrayInput `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails RegistryRegionArmDetailsArrayInput `pulumi:"regionDetails"`
}

func (RegistryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (i RegistryTypeArgs) ToRegistryTypeOutput() RegistryTypeOutput {
	return i.ToRegistryTypeOutputWithContext(context.Background())
}

func (i RegistryTypeArgs) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTypeOutput)
}

// Details of the Registry
type RegistryTypeOutput struct{ *pulumi.OutputState }

func (RegistryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (o RegistryTypeOutput) ToRegistryTypeOutput() RegistryTypeOutput {
	return o
}

func (o RegistryTypeOutput) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryTypeOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryTypeOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryTypeOutput) ManagedResourceGroup() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v RegistryType) *ArmResourceId { return v.ManagedResourceGroup }).(ArmResourceIdPtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryTypeOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryTypeOutput) PrivateEndpointConnections() RegistryPrivateEndpointConnectionArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryPrivateEndpointConnection { return v.PrivateEndpointConnections }).(RegistryPrivateEndpointConnectionArrayOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryTypeOutput) RegionDetails() RegistryRegionArmDetailsArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryRegionArmDetails { return v.RegionDetails }).(RegistryRegionArmDetailsArrayOutput)
}

type RegistryListCredentialsResultResponse struct {
	Location  string             `pulumi:"location"`
	Passwords []PasswordResponse `pulumi:"passwords"`
	Username  string             `pulumi:"username"`
}

type RegistryListCredentialsResultResponseOutput struct{ *pulumi.OutputState }

func (RegistryListCredentialsResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryListCredentialsResultResponse)(nil)).Elem()
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutput() RegistryListCredentialsResultResponseOutput {
	return o
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutputWithContext(ctx context.Context) RegistryListCredentialsResultResponseOutput {
	return o
}

func (o RegistryListCredentialsResultResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Location }).(pulumi.StringOutput)
}

func (o RegistryListCredentialsResultResponseOutput) Passwords() PasswordResponseArrayOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) []PasswordResponse { return v.Passwords }).(PasswordResponseArrayOutput)
}

func (o RegistryListCredentialsResultResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnection struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionProperties `pulumi:"properties"`
}

// RegistryPrivateEndpointConnectionInput is an input type that accepts RegistryPrivateEndpointConnectionArgs and RegistryPrivateEndpointConnectionOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionInput` via:
//
//	RegistryPrivateEndpointConnectionArgs{...}
type RegistryPrivateEndpointConnectionInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput
	ToRegistryPrivateEndpointConnectionOutputWithContext(context.Context) RegistryPrivateEndpointConnectionOutput
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionArgs struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Same as workspace location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties RegistryPrivateEndpointConnectionPropertiesPtrInput `pulumi:"properties"`
}

func (RegistryPrivateEndpointConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return i.ToRegistryPrivateEndpointConnectionOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionOutput)
}

// RegistryPrivateEndpointConnectionArrayInput is an input type that accepts RegistryPrivateEndpointConnectionArray and RegistryPrivateEndpointConnectionArrayOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionArrayInput` via:
//
//	RegistryPrivateEndpointConnectionArray{ RegistryPrivateEndpointConnectionArgs{...} }
type RegistryPrivateEndpointConnectionArrayInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput
	ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Context) RegistryPrivateEndpointConnectionArrayOutput
}

type RegistryPrivateEndpointConnectionArray []RegistryPrivateEndpointConnectionInput

func (RegistryPrivateEndpointConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return i.ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionArrayOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionOutput) Properties() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *RegistryPrivateEndpointConnectionProperties {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

type RegistryPrivateEndpointConnectionArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnection {
		return vs[0].([]RegistryPrivateEndpointConnection)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionProperties struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResource `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionState `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// RegistryPrivateEndpointConnectionPropertiesInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs and RegistryPrivateEndpointConnectionPropertiesOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesInput` via:
//
//	RegistryPrivateEndpointConnectionPropertiesArgs{...}
type RegistryPrivateEndpointConnectionPropertiesInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput
	ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesOutput
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesArgs struct {
	// The group ids
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint PrivateEndpointResourcePtrInput `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState RegistryPrivateLinkServiceConnectionStatePtrInput `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
}

func (RegistryPrivateEndpointConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput).ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx)
}

// RegistryPrivateEndpointConnectionPropertiesPtrInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs, RegistryPrivateEndpointConnectionPropertiesPtr and RegistryPrivateEndpointConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesPtrInput` via:
//
//	        RegistryPrivateEndpointConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateEndpointConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput
	ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput
}

type registryPrivateEndpointConnectionPropertiesPtrType RegistryPrivateEndpointConnectionPropertiesArgs

func RegistryPrivateEndpointConnectionPropertiesPtr(v *RegistryPrivateEndpointConnectionPropertiesArgs) RegistryPrivateEndpointConnectionPropertiesPtrInput {
	return (*registryPrivateEndpointConnectionPropertiesPtrType)(v)
}

func (*registryPrivateEndpointConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateEndpointConnectionProperties {
		return &v
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource { return v.PrivateEndpoint }).(PrivateEndpointResourcePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) RegistryPrivateEndpointConnectionProperties {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionProperties
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourcePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponse struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResourceResponse `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutput() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutput() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) RegistryPrivateEndpointConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionPropertiesResponse
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesResponseOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return v.PrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponse struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutput() RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/privateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionResponseOutput) Properties() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *RegistryPrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput)
}

type RegistryPrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutput() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnectionResponse {
		return vs[0].([]RegistryPrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionResponseOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionState struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// RegistryPrivateLinkServiceConnectionStateInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs and RegistryPrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStateInput` via:
//
//	RegistryPrivateLinkServiceConnectionStateArgs{...}
type RegistryPrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput
	ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStateOutput
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateArgs struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (RegistryPrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput)
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput).ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// RegistryPrivateLinkServiceConnectionStatePtrInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs, RegistryPrivateLinkServiceConnectionStatePtr and RegistryPrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStatePtrInput` via:
//
//	        RegistryPrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput
	ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput
}

type registryPrivateLinkServiceConnectionStatePtrType RegistryPrivateLinkServiceConnectionStateArgs

func RegistryPrivateLinkServiceConnectionStatePtr(v *RegistryPrivateLinkServiceConnectionStateArgs) RegistryPrivateLinkServiceConnectionStatePtrInput {
	return (*registryPrivateLinkServiceConnectionStatePtrType)(v)
}

func (*registryPrivateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateLinkServiceConnectionState) *RegistryPrivateLinkServiceConnectionState {
		return &v
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) RegistryPrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionState
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponse struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutput() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutput() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) RegistryPrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionStateResponse
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateResponseOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetails struct {
	// List of ACR accounts
	AcrDetails []AcrDetails `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetails `pulumi:"storageAccountDetails"`
}

// RegistryRegionArmDetailsInput is an input type that accepts RegistryRegionArmDetailsArgs and RegistryRegionArmDetailsOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsInput` via:
//
//	RegistryRegionArmDetailsArgs{...}
type RegistryRegionArmDetailsInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput
	ToRegistryRegionArmDetailsOutputWithContext(context.Context) RegistryRegionArmDetailsOutput
}

// Details for each region the registry is in
type RegistryRegionArmDetailsArgs struct {
	// List of ACR accounts
	AcrDetails AcrDetailsArrayInput `pulumi:"acrDetails"`
	// The location where the registry exists
	Location pulumi.StringPtrInput `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails StorageAccountDetailsArrayInput `pulumi:"storageAccountDetails"`
}

func (RegistryRegionArmDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return i.ToRegistryRegionArmDetailsOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsOutput)
}

// RegistryRegionArmDetailsArrayInput is an input type that accepts RegistryRegionArmDetailsArray and RegistryRegionArmDetailsArrayOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsArrayInput` via:
//
//	RegistryRegionArmDetailsArray{ RegistryRegionArmDetailsArgs{...} }
type RegistryRegionArmDetailsArrayInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput
	ToRegistryRegionArmDetailsArrayOutputWithContext(context.Context) RegistryRegionArmDetailsArrayOutput
}

type RegistryRegionArmDetailsArray []RegistryRegionArmDetailsInput

func (RegistryRegionArmDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return i.ToRegistryRegionArmDetailsArrayOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsArrayOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return o
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsOutput) AcrDetails() AcrDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []AcrDetails { return v.AcrDetails }).(AcrDetailsArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsOutput) StorageAccountDetails() StorageAccountDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []StorageAccountDetails { return v.StorageAccountDetails }).(StorageAccountDetailsArrayOutput)
}

type RegistryRegionArmDetailsArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetails {
		return vs[0].([]RegistryRegionArmDetails)[vs[1].(int)]
	}).(RegistryRegionArmDetailsOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponse struct {
	// List of ACR accounts
	AcrDetails []AcrDetailsResponse `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetailsResponse `pulumi:"storageAccountDetails"`
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponseOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutput() RegistryRegionArmDetailsResponseOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsResponseOutput) AcrDetails() AcrDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []AcrDetailsResponse { return v.AcrDetails }).(AcrDetailsResponseArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsResponseOutput) StorageAccountDetails() StorageAccountDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []StorageAccountDetailsResponse {
		return v.StorageAccountDetails
	}).(StorageAccountDetailsResponseArrayOutput)
}

type RegistryRegionArmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutput() RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetailsResponse {
		return vs[0].([]RegistryRegionArmDetailsResponse)[vs[1].(int)]
	}).(RegistryRegionArmDetailsResponseOutput)
}

// Details of the Registry
type RegistryResponse struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceIdResponse `pulumi:"managedResourceGroup"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Private endpoint connections info used for pending connections in private link portal
	PrivateEndpointConnections []RegistryPrivateEndpointConnectionResponse `pulumi:"privateEndpointConnections"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetailsResponse `pulumi:"regionDetails"`
}

// Details of the Registry
type RegistryResponseOutput struct{ *pulumi.OutputState }

func (RegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryResponse)(nil)).Elem()
}

func (o RegistryResponseOutput) ToRegistryResponseOutput() RegistryResponseOutput {
	return o
}

func (o RegistryResponseOutput) ToRegistryResponseOutputWithContext(ctx context.Context) RegistryResponseOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryResponseOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryResponseOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryResponseOutput) ManagedResourceGroup() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v RegistryResponse) *ArmResourceIdResponse { return v.ManagedResourceGroup }).(ArmResourceIdResponsePtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryResponseOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryResponseOutput) PrivateEndpointConnections() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryPrivateEndpointConnectionResponse {
		return v.PrivateEndpointConnections
	}).(RegistryPrivateEndpointConnectionResponseArrayOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryResponseOutput) RegionDetails() RegistryRegionArmDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryRegionArmDetailsResponse { return v.RegionDetails }).(RegistryRegionArmDetailsResponseArrayOutput)
}

// Regression task in AutoML Table vertical.
type Regression struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Regression
func (val *Regression) Defaults() *Regression {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// RegressionInput is an input type that accepts RegressionArgs and RegressionOutput values.
// You can construct a concrete instance of `RegressionInput` via:
//
//	RegressionArgs{...}
type RegressionInput interface {
	pulumi.Input

	ToRegressionOutput() RegressionOutput
	ToRegressionOutputWithContext(context.Context) RegressionOutput
}

// Regression task in AutoML Table vertical.
type RegressionArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings RegressionTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for RegressionArgs
func (val *RegressionArgs) Defaults() *RegressionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (RegressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (i RegressionArgs) ToRegressionOutput() RegressionOutput {
	return i.ToRegressionOutputWithContext(context.Background())
}

func (i RegressionArgs) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionOutput)
}

// Regression task in AutoML Table vertical.
type RegressionOutput struct{ *pulumi.OutputState }

func (RegressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (o RegressionOutput) ToRegressionOutput() RegressionOutput {
	return o
}

func (o RegressionOutput) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return o
}

// Columns to use for CVSplit data.
func (o RegressionOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Regression) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o RegressionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o RegressionOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Regression) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for regression task.
func (o RegressionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o RegressionOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Regression) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o RegressionOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Regression) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Regression) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o RegressionOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Regression) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionOutput) TrainingSettings() RegressionTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *RegressionTrainingSettings { return v.TrainingSettings }).(RegressionTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o RegressionOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Regression) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Regression) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o RegressionOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Regression task in AutoML Table vertical.
type RegressionResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for RegressionResponse
func (val *RegressionResponse) Defaults() *RegressionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Regression task in AutoML Table vertical.
type RegressionResponseOutput struct{ *pulumi.OutputState }

func (RegressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionResponse)(nil)).Elem()
}

func (o RegressionResponseOutput) ToRegressionResponseOutput() RegressionResponseOutput {
	return o
}

func (o RegressionResponseOutput) ToRegressionResponseOutputWithContext(ctx context.Context) RegressionResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o RegressionResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalFeaturizationSettingsResponse { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o RegressionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o RegressionResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v RegressionResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for regression task.
func (o RegressionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o RegressionResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o RegressionResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegressionResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o RegressionResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v RegressionResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionResponseOutput) TrainingSettings() RegressionTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *RegressionTrainingSettingsResponse { return v.TrainingSettings }).(RegressionTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o RegressionResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegressionResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o RegressionResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettings struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettings
func (val *RegressionTrainingSettings) Defaults() *RegressionTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// RegressionTrainingSettingsInput is an input type that accepts RegressionTrainingSettingsArgs and RegressionTrainingSettingsOutput values.
// You can construct a concrete instance of `RegressionTrainingSettingsInput` via:
//
//	RegressionTrainingSettingsArgs{...}
type RegressionTrainingSettingsInput interface {
	pulumi.Input

	ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput
	ToRegressionTrainingSettingsOutputWithContext(context.Context) RegressionTrainingSettingsOutput
}

// Regression Training related configuration.
type RegressionTrainingSettingsArgs struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettingsArgs
func (val *RegressionTrainingSettingsArgs) Defaults() *RegressionTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	return &tmp
}
func (RegressionTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettings)(nil)).Elem()
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput {
	return i.ToRegressionTrainingSettingsOutputWithContext(context.Background())
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsOutputWithContext(ctx context.Context) RegressionTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsOutput)
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return i.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsOutput).ToRegressionTrainingSettingsPtrOutputWithContext(ctx)
}

// RegressionTrainingSettingsPtrInput is an input type that accepts RegressionTrainingSettingsArgs, RegressionTrainingSettingsPtr and RegressionTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `RegressionTrainingSettingsPtrInput` via:
//
//	        RegressionTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type RegressionTrainingSettingsPtrInput interface {
	pulumi.Input

	ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput
	ToRegressionTrainingSettingsPtrOutputWithContext(context.Context) RegressionTrainingSettingsPtrOutput
}

type regressionTrainingSettingsPtrType RegressionTrainingSettingsArgs

func RegressionTrainingSettingsPtr(v *RegressionTrainingSettingsArgs) RegressionTrainingSettingsPtrInput {
	return (*regressionTrainingSettingsPtrType)(v)
}

func (*regressionTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettings)(nil)).Elem()
}

func (i *regressionTrainingSettingsPtrType) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return i.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *regressionTrainingSettingsPtrType) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettingsOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettings)(nil)).Elem()
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput {
	return o
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsOutputWithContext(ctx context.Context) RegressionTrainingSettingsOutput {
	return o
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return o.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegressionTrainingSettings) *RegressionTrainingSettings {
		return &v
	}).(RegressionTrainingSettingsPtrOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

type RegressionTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettings)(nil)).Elem()
}

func (o RegressionTrainingSettingsPtrOutput) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return o
}

func (o RegressionTrainingSettingsPtrOutput) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return o
}

func (o RegressionTrainingSettingsPtrOutput) Elem() RegressionTrainingSettingsOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) RegressionTrainingSettings {
		if v != nil {
			return *v
		}
		var ret RegressionTrainingSettings
		return ret
	}).(RegressionTrainingSettingsOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettingsResponse struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettingsResponse
func (val *RegressionTrainingSettingsResponse) Defaults() *RegressionTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Regression Training related configuration.
type RegressionTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettingsResponse)(nil)).Elem()
}

func (o RegressionTrainingSettingsResponseOutput) ToRegressionTrainingSettingsResponseOutput() RegressionTrainingSettingsResponseOutput {
	return o
}

func (o RegressionTrainingSettingsResponseOutput) ToRegressionTrainingSettingsResponseOutputWithContext(ctx context.Context) RegressionTrainingSettingsResponseOutput {
	return o
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

type RegressionTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettingsResponse)(nil)).Elem()
}

func (o RegressionTrainingSettingsResponsePtrOutput) ToRegressionTrainingSettingsResponsePtrOutput() RegressionTrainingSettingsResponsePtrOutput {
	return o
}

func (o RegressionTrainingSettingsResponsePtrOutput) ToRegressionTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsResponsePtrOutput {
	return o
}

func (o RegressionTrainingSettingsResponsePtrOutput) Elem() RegressionTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) RegressionTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret RegressionTrainingSettingsResponse
		return ret
	}).(RegressionTrainingSettingsResponseOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// Scoring requests configuration.
type RequestConfiguration struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfiguration
func (val *RequestConfiguration) Defaults() *RequestConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// RequestConfigurationInput is an input type that accepts RequestConfigurationArgs and RequestConfigurationOutput values.
// You can construct a concrete instance of `RequestConfigurationInput` via:
//
//	RequestConfigurationArgs{...}
type RequestConfigurationInput interface {
	pulumi.Input

	ToRequestConfigurationOutput() RequestConfigurationOutput
	ToRequestConfigurationOutputWithContext(context.Context) RequestConfigurationOutput
}

// Scoring requests configuration.
type RequestConfigurationArgs struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout pulumi.StringPtrInput `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfigurationArgs
func (val *RequestConfigurationArgs) Defaults() *RequestConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		tmp.MaxConcurrentRequestsPerInstance = pulumi.IntPtr(1)
	}
	if tmp.RequestTimeout == nil {
		tmp.RequestTimeout = pulumi.StringPtr("PT5S")
	}
	return &tmp
}
func (RequestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfiguration)(nil)).Elem()
}

func (i RequestConfigurationArgs) ToRequestConfigurationOutput() RequestConfigurationOutput {
	return i.ToRequestConfigurationOutputWithContext(context.Background())
}

func (i RequestConfigurationArgs) ToRequestConfigurationOutputWithContext(ctx context.Context) RequestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationOutput)
}

func (i RequestConfigurationArgs) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return i.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (i RequestConfigurationArgs) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationOutput).ToRequestConfigurationPtrOutputWithContext(ctx)
}

// RequestConfigurationPtrInput is an input type that accepts RequestConfigurationArgs, RequestConfigurationPtr and RequestConfigurationPtrOutput values.
// You can construct a concrete instance of `RequestConfigurationPtrInput` via:
//
//	        RequestConfigurationArgs{...}
//
//	or:
//
//	        nil
type RequestConfigurationPtrInput interface {
	pulumi.Input

	ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput
	ToRequestConfigurationPtrOutputWithContext(context.Context) RequestConfigurationPtrOutput
}

type requestConfigurationPtrType RequestConfigurationArgs

func RequestConfigurationPtr(v *RequestConfigurationArgs) RequestConfigurationPtrInput {
	return (*requestConfigurationPtrType)(v)
}

func (*requestConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfiguration)(nil)).Elem()
}

func (i *requestConfigurationPtrType) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return i.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (i *requestConfigurationPtrType) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationPtrOutput)
}

// Scoring requests configuration.
type RequestConfigurationOutput struct{ *pulumi.OutputState }

func (RequestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfiguration)(nil)).Elem()
}

func (o RequestConfigurationOutput) ToRequestConfigurationOutput() RequestConfigurationOutput {
	return o
}

func (o RequestConfigurationOutput) ToRequestConfigurationOutputWithContext(ctx context.Context) RequestConfigurationOutput {
	return o
}

func (o RequestConfigurationOutput) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return o.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (o RequestConfigurationOutput) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestConfiguration) *RequestConfiguration {
		return &v
	}).(RequestConfigurationPtrOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestConfiguration) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestConfiguration) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type RequestConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RequestConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfiguration)(nil)).Elem()
}

func (o RequestConfigurationPtrOutput) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return o
}

func (o RequestConfigurationPtrOutput) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return o
}

func (o RequestConfigurationPtrOutput) Elem() RequestConfigurationOutput {
	return o.ApplyT(func(v *RequestConfiguration) RequestConfiguration {
		if v != nil {
			return *v
		}
		var ret RequestConfiguration
		return ret
	}).(RequestConfigurationOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationPtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationPtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Scoring requests configuration.
type RequestConfigurationResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfigurationResponse
func (val *RequestConfigurationResponse) Defaults() *RequestConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Scoring requests configuration.
type RequestConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RequestConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfigurationResponse)(nil)).Elem()
}

func (o RequestConfigurationResponseOutput) ToRequestConfigurationResponseOutput() RequestConfigurationResponseOutput {
	return o
}

func (o RequestConfigurationResponseOutput) ToRequestConfigurationResponseOutputWithContext(ctx context.Context) RequestConfigurationResponseOutput {
	return o
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationResponseOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestConfigurationResponse) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationResponseOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestConfigurationResponse) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type RequestConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfigurationResponse)(nil)).Elem()
}

func (o RequestConfigurationResponsePtrOutput) ToRequestConfigurationResponsePtrOutput() RequestConfigurationResponsePtrOutput {
	return o
}

func (o RequestConfigurationResponsePtrOutput) ToRequestConfigurationResponsePtrOutputWithContext(ctx context.Context) RequestConfigurationResponsePtrOutput {
	return o
}

func (o RequestConfigurationResponsePtrOutput) Elem() RequestConfigurationResponseOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) RequestConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret RequestConfigurationResponse
		return ret
	}).(RequestConfigurationResponseOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationResponsePtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationResponsePtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceId struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// ResourceIdInput is an input type that accepts ResourceIdArgs and ResourceIdOutput values.
// You can construct a concrete instance of `ResourceIdInput` via:
//
//	ResourceIdArgs{...}
type ResourceIdInput interface {
	pulumi.Input

	ToResourceIdOutput() ResourceIdOutput
	ToResourceIdOutputWithContext(context.Context) ResourceIdOutput
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdArgs struct {
	// The ID of the resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (ResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (i ResourceIdArgs) ToResourceIdOutput() ResourceIdOutput {
	return i.ToResourceIdOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput)
}

func (i ResourceIdArgs) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput).ToResourceIdPtrOutputWithContext(ctx)
}

// ResourceIdPtrInput is an input type that accepts ResourceIdArgs, ResourceIdPtr and ResourceIdPtrOutput values.
// You can construct a concrete instance of `ResourceIdPtrInput` via:
//
//	        ResourceIdArgs{...}
//
//	or:
//
//	        nil
type ResourceIdPtrInput interface {
	pulumi.Input

	ToResourceIdPtrOutput() ResourceIdPtrOutput
	ToResourceIdPtrOutputWithContext(context.Context) ResourceIdPtrOutput
}

type resourceIdPtrType ResourceIdArgs

func ResourceIdPtr(v *ResourceIdArgs) ResourceIdPtrInput {
	return (*resourceIdPtrType)(v)
}

func (*resourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (i *resourceIdPtrType) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i *resourceIdPtrType) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdOutput struct{ *pulumi.OutputState }

func (ResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (o ResourceIdOutput) ToResourceIdOutput() ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o.ToResourceIdPtrOutputWithContext(context.Background())
}

func (o ResourceIdOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceId) *ResourceId {
		return &v
	}).(ResourceIdPtrOutput)
}

// The ID of the resource
func (o ResourceIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceId) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) Elem() ResourceIdOutput {
	return o.ApplyT(func(v *ResourceId) ResourceId {
		if v != nil {
			return *v
		}
		var ret ResourceId
		return ret
	}).(ResourceIdOutput)
}

// The ID of the resource
func (o ResourceIdPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceId) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponse struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutput() ResourceIdResponseOutput {
	return o
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutputWithContext(ctx context.Context) ResourceIdResponseOutput {
	return o
}

// The ID of the resource
func (o ResourceIdResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) Elem() ResourceIdResponseOutput {
	return o.ApplyT(func(v *ResourceIdResponse) ResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ResourceIdResponse
		return ret
	}).(ResourceIdResponseOutput)
}

// The ID of the resource
func (o ResourceIdResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

type Route struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

// RouteInput is an input type that accepts RouteArgs and RouteOutput values.
// You can construct a concrete instance of `RouteInput` via:
//
//	RouteArgs{...}
type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(context.Context) RouteOutput
}

type RouteArgs struct {
	// [Required] The path for the route.
	Path pulumi.StringInput `pulumi:"path"`
	// [Required] The port for the route.
	Port pulumi.IntInput `pulumi:"port"`
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i RouteArgs) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i RouteArgs) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

func (i RouteArgs) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i RouteArgs) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput).ToRoutePtrOutputWithContext(ctx)
}

// RoutePtrInput is an input type that accepts RouteArgs, RoutePtr and RoutePtrOutput values.
// You can construct a concrete instance of `RoutePtrInput` via:
//
//	        RouteArgs{...}
//
//	or:
//
//	        nil
type RoutePtrInput interface {
	pulumi.Input

	ToRoutePtrOutput() RoutePtrOutput
	ToRoutePtrOutputWithContext(context.Context) RoutePtrOutput
}

type routePtrType RouteArgs

func RoutePtr(v *RouteArgs) RoutePtrInput {
	return (*routePtrType)(v)
}

func (*routePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *routePtrType) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i *routePtrType) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePtrOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o.ToRoutePtrOutputWithContext(context.Background())
}

func (o RouteOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Route) *Route {
		return &v
	}).(RoutePtrOutput)
}

// [Required] The path for the route.
func (o RouteOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Route) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Route) int { return v.Port }).(pulumi.IntOutput)
}

type RoutePtrOutput struct{ *pulumi.OutputState }

func (RoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RoutePtrOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) Elem() RouteOutput {
	return o.ApplyT(func(v *Route) Route {
		if v != nil {
			return *v
		}
		var ret Route
		return ret
	}).(RouteOutput)
}

// [Required] The path for the route.
func (o RoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RoutePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type RouteResponse struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

type RouteResponseOutput struct{ *pulumi.OutputState }

func (RouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponse)(nil)).Elem()
}

func (o RouteResponseOutput) ToRouteResponseOutput() RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return o
}

// [Required] The path for the route.
func (o RouteResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RouteResponse) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RouteResponse) int { return v.Port }).(pulumi.IntOutput)
}

type RouteResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutput() RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutputWithContext(ctx context.Context) RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) Elem() RouteResponseOutput {
	return o.ApplyT(func(v *RouteResponse) RouteResponse {
		if v != nil {
			return *v
		}
		var ret RouteResponse
		return ret
	}).(RouteResponseOutput)
}

// [Required] The path for the route.
func (o RouteResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RouteResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type SASAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                   `pulumi:"category"`
	Credentials *WorkspaceConnectionSharedAccessSignature `pulumi:"credentials"`
	Target      *string                                   `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

// SASAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts SASAuthTypeWorkspaceConnectionPropertiesArgs and SASAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `SASAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	SASAuthTypeWorkspaceConnectionPropertiesArgs{...}
type SASAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput
	ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput
}

type SASAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category    pulumi.StringPtrInput                            `pulumi:"category"`
	Credentials WorkspaceConnectionSharedAccessSignaturePtrInput `pulumi:"credentials"`
	Target      pulumi.StringPtrInput                            `pulumi:"target"`
	// Value details of the workspace connection.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat pulumi.StringPtrInput `pulumi:"valueFormat"`
}

func (SASAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i SASAuthTypeWorkspaceConnectionPropertiesArgs) ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i SASAuthTypeWorkspaceConnectionPropertiesArgs) ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SASAuthTypeWorkspaceConnectionPropertiesOutput)
}

type SASAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (SASAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'SAS'.
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionSharedAccessSignature {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignaturePtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

type SASAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                           `pulumi:"category"`
	Credentials *WorkspaceConnectionSharedAccessSignatureResponse `pulumi:"credentials"`
	ExpiryTime  *string                                           `pulumi:"expiryTime"`
	Metadata    interface{}                                       `pulumi:"metadata"`
	Target      *string                                           `pulumi:"target"`
	// Value details of the workspace connection.
	Value *string `pulumi:"value"`
	// format for the workspace connection value
	ValueFormat *string `pulumi:"valueFormat"`
}

type SASAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToSASAuthTypeWorkspaceConnectionPropertiesResponseOutput() SASAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToSASAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'SAS'.
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionSharedAccessSignatureResponsePtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionSharedAccessSignatureResponse {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignatureResponsePtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Value details of the workspace connection.
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// format for the workspace connection value
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ValueFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ValueFormat }).(pulumi.StringPtrOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecrets `pulumi:"secrets"`
}

// SasDatastoreCredentialsInput is an input type that accepts SasDatastoreCredentialsArgs and SasDatastoreCredentialsOutput values.
// You can construct a concrete instance of `SasDatastoreCredentialsInput` via:
//
//	SasDatastoreCredentialsArgs{...}
type SasDatastoreCredentialsInput interface {
	pulumi.Input

	ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput
	ToSasDatastoreCredentialsOutputWithContext(context.Context) SasDatastoreCredentialsOutput
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecretsInput `pulumi:"secrets"`
}

func (SasDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return i.ToSasDatastoreCredentialsOutputWithContext(context.Background())
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreCredentialsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return o
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage container secrets.
func (o SasDatastoreCredentialsOutput) Secrets() SasDatastoreSecretsOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) SasDatastoreSecrets { return v.Secrets }).(SasDatastoreSecretsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentialsResponse)(nil)).Elem()
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutput() SasDatastoreCredentialsResponseOutput {
	return o
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutputWithContext(ctx context.Context) SasDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecrets struct {
	// Storage container SAS token.
	SasToken *string `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType string `pulumi:"secretsType"`
}

// SasDatastoreSecretsInput is an input type that accepts SasDatastoreSecretsArgs and SasDatastoreSecretsOutput values.
// You can construct a concrete instance of `SasDatastoreSecretsInput` via:
//
//	SasDatastoreSecretsArgs{...}
type SasDatastoreSecretsInput interface {
	pulumi.Input

	ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput
	ToSasDatastoreSecretsOutputWithContext(context.Context) SasDatastoreSecretsOutput
}

// Datastore SAS secrets.
type SasDatastoreSecretsArgs struct {
	// Storage container SAS token.
	SasToken pulumi.StringPtrInput `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (SasDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return i.ToSasDatastoreSecretsOutputWithContext(context.Background())
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreSecretsOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (SasDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return o
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return o
}

// Storage container SAS token.
func (o SasDatastoreSecretsOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Sas'.
func (o SasDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// scale settings for AML Compute
type ScaleSettings struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettings
func (val *ScaleSettings) Defaults() *ScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// ScaleSettingsInput is an input type that accepts ScaleSettingsArgs and ScaleSettingsOutput values.
// You can construct a concrete instance of `ScaleSettingsInput` via:
//
//	ScaleSettingsArgs{...}
type ScaleSettingsInput interface {
	pulumi.Input

	ToScaleSettingsOutput() ScaleSettingsOutput
	ToScaleSettingsOutputWithContext(context.Context) ScaleSettingsOutput
}

// scale settings for AML Compute
type ScaleSettingsArgs struct {
	// Max number of nodes to use
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown pulumi.StringPtrInput `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettingsArgs
func (val *ScaleSettingsArgs) Defaults() *ScaleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		tmp.MinNodeCount = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (i ScaleSettingsArgs) ToScaleSettingsOutput() ScaleSettingsOutput {
	return i.ToScaleSettingsOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput)
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput).ToScaleSettingsPtrOutputWithContext(ctx)
}

// ScaleSettingsPtrInput is an input type that accepts ScaleSettingsArgs, ScaleSettingsPtr and ScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ScaleSettingsPtrInput` via:
//
//	        ScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type ScaleSettingsPtrInput interface {
	pulumi.Input

	ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput
	ToScaleSettingsPtrOutputWithContext(context.Context) ScaleSettingsPtrOutput
}

type scaleSettingsPtrType ScaleSettingsArgs

func ScaleSettingsPtr(v *ScaleSettingsArgs) ScaleSettingsPtrInput {
	return (*scaleSettingsPtrType)(v)
}

func (*scaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsPtrOutput)
}

// scale settings for AML Compute
type ScaleSettingsOutput struct{ *pulumi.OutputState }

func (ScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsOutput) ToScaleSettingsOutput() ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSettings) *ScaleSettings {
		return &v
	}).(ScaleSettingsPtrOutput)
}

// Max number of nodes to use
func (o ScaleSettingsOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleSettings) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Min number of nodes to use
func (o ScaleSettingsOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *string { return v.NodeIdleTimeBeforeScaleDown }).(pulumi.StringPtrOutput)
}

type ScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) Elem() ScaleSettingsOutput {
	return o.ApplyT(func(v *ScaleSettings) ScaleSettings {
		if v != nil {
			return *v
		}
		var ret ScaleSettings
		return ret
	}).(ScaleSettingsOutput)
}

// Max number of nodes to use
func (o ScaleSettingsPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Min number of nodes to use
func (o ScaleSettingsPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsPtrOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.NodeIdleTimeBeforeScaleDown
	}).(pulumi.StringPtrOutput)
}

// scale settings for AML Compute
type ScaleSettingsResponse struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettingsResponse
func (val *ScaleSettingsResponse) Defaults() *ScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// scale settings for AML Compute
type ScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return o
}

// Max number of nodes to use
func (o ScaleSettingsResponseOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Min number of nodes to use
func (o ScaleSettingsResponseOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsResponseOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *string { return v.NodeIdleTimeBeforeScaleDown }).(pulumi.StringPtrOutput)
}

type ScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) Elem() ScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) ScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ScaleSettingsResponse
		return ret
	}).(ScaleSettingsResponseOutput)
}

// Max number of nodes to use
func (o ScaleSettingsResponsePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Min number of nodes to use
func (o ScaleSettingsResponsePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsResponsePtrOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeIdleTimeBeforeScaleDown
	}).(pulumi.StringPtrOutput)
}

// Base definition of a schedule
type ScheduleType struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleType
func (val *ScheduleType) Defaults() *ScheduleType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// ScheduleTypeInput is an input type that accepts ScheduleTypeArgs and ScheduleTypeOutput values.
// You can construct a concrete instance of `ScheduleTypeInput` via:
//
//	ScheduleTypeArgs{...}
type ScheduleTypeInput interface {
	pulumi.Input

	ToScheduleTypeOutput() ScheduleTypeOutput
	ToScheduleTypeOutputWithContext(context.Context) ScheduleTypeOutput
}

// Base definition of a schedule
type ScheduleTypeArgs struct {
	// [Required] Specifies the action of the schedule
	Action pulumi.Input `pulumi:"action"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of schedule.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger pulumi.Input `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleTypeArgs
func (val *ScheduleTypeArgs) Defaults() *ScheduleTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		tmp.IsEnabled = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (ScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (i ScheduleTypeArgs) ToScheduleTypeOutput() ScheduleTypeOutput {
	return i.ToScheduleTypeOutputWithContext(context.Background())
}

func (i ScheduleTypeArgs) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTypeOutput)
}

// Base definition of a schedule
type ScheduleTypeOutput struct{ *pulumi.OutputState }

func (ScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (o ScheduleTypeOutput) ToScheduleTypeOutput() ScheduleTypeOutput {
	return o
}

func (o ScheduleTypeOutput) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleTypeOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleTypeOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleType) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleTypeOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

type ScheduleBase struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

// ScheduleBaseInput is an input type that accepts ScheduleBaseArgs and ScheduleBaseOutput values.
// You can construct a concrete instance of `ScheduleBaseInput` via:
//
//	ScheduleBaseArgs{...}
type ScheduleBaseInput interface {
	pulumi.Input

	ToScheduleBaseOutput() ScheduleBaseOutput
	ToScheduleBaseOutputWithContext(context.Context) ScheduleBaseOutput
}

type ScheduleBaseArgs struct {
	// A system assigned id for the schedule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus pulumi.StringPtrInput `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ScheduleBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBase)(nil)).Elem()
}

func (i ScheduleBaseArgs) ToScheduleBaseOutput() ScheduleBaseOutput {
	return i.ToScheduleBaseOutputWithContext(context.Background())
}

func (i ScheduleBaseArgs) ToScheduleBaseOutputWithContext(ctx context.Context) ScheduleBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBaseOutput)
}

func (i ScheduleBaseArgs) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return i.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (i ScheduleBaseArgs) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBaseOutput).ToScheduleBasePtrOutputWithContext(ctx)
}

// ScheduleBasePtrInput is an input type that accepts ScheduleBaseArgs, ScheduleBasePtr and ScheduleBasePtrOutput values.
// You can construct a concrete instance of `ScheduleBasePtrInput` via:
//
//	        ScheduleBaseArgs{...}
//
//	or:
//
//	        nil
type ScheduleBasePtrInput interface {
	pulumi.Input

	ToScheduleBasePtrOutput() ScheduleBasePtrOutput
	ToScheduleBasePtrOutputWithContext(context.Context) ScheduleBasePtrOutput
}

type scheduleBasePtrType ScheduleBaseArgs

func ScheduleBasePtr(v *ScheduleBaseArgs) ScheduleBasePtrInput {
	return (*scheduleBasePtrType)(v)
}

func (*scheduleBasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBase)(nil)).Elem()
}

func (i *scheduleBasePtrType) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return i.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (i *scheduleBasePtrType) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasePtrOutput)
}

type ScheduleBaseOutput struct{ *pulumi.OutputState }

func (ScheduleBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBase)(nil)).Elem()
}

func (o ScheduleBaseOutput) ToScheduleBaseOutput() ScheduleBaseOutput {
	return o
}

func (o ScheduleBaseOutput) ToScheduleBaseOutputWithContext(ctx context.Context) ScheduleBaseOutput {
	return o
}

func (o ScheduleBaseOutput) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return o.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (o ScheduleBaseOutput) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleBase) *ScheduleBase {
		return &v
	}).(ScheduleBasePtrOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBaseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ScheduleBasePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBase)(nil)).Elem()
}

func (o ScheduleBasePtrOutput) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return o
}

func (o ScheduleBasePtrOutput) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return o
}

func (o ScheduleBasePtrOutput) Elem() ScheduleBaseOutput {
	return o.ApplyT(func(v *ScheduleBase) ScheduleBase {
		if v != nil {
			return *v
		}
		var ret ScheduleBase
		return ret
	}).(ScheduleBaseOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBasePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBasePtrOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBasePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ScheduleBaseResponse struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

type ScheduleBaseResponseOutput struct{ *pulumi.OutputState }

func (ScheduleBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBaseResponse)(nil)).Elem()
}

func (o ScheduleBaseResponseOutput) ToScheduleBaseResponseOutput() ScheduleBaseResponseOutput {
	return o
}

func (o ScheduleBaseResponseOutput) ToScheduleBaseResponseOutputWithContext(ctx context.Context) ScheduleBaseResponseOutput {
	return o
}

// A system assigned id for the schedule.
func (o ScheduleBaseResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseResponseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ScheduleBaseResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBaseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBaseResponse)(nil)).Elem()
}

func (o ScheduleBaseResponsePtrOutput) ToScheduleBaseResponsePtrOutput() ScheduleBaseResponsePtrOutput {
	return o
}

func (o ScheduleBaseResponsePtrOutput) ToScheduleBaseResponsePtrOutputWithContext(ctx context.Context) ScheduleBaseResponsePtrOutput {
	return o
}

func (o ScheduleBaseResponsePtrOutput) Elem() ScheduleBaseResponseOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) ScheduleBaseResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleBaseResponse
		return ret
	}).(ScheduleBaseResponseOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBaseResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseResponsePtrOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Base definition of a schedule
type ScheduleResponse struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the schedule.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleResponse
func (val *ScheduleResponse) Defaults() *ScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// Base definition of a schedule
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleResponseOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the schedule.
func (o ScheduleResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleResponseOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

// Script reference
type ScriptReference struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// ScriptReferenceInput is an input type that accepts ScriptReferenceArgs and ScriptReferenceOutput values.
// You can construct a concrete instance of `ScriptReferenceInput` via:
//
//	ScriptReferenceArgs{...}
type ScriptReferenceInput interface {
	pulumi.Input

	ToScriptReferenceOutput() ScriptReferenceOutput
	ToScriptReferenceOutputWithContext(context.Context) ScriptReferenceOutput
}

// Script reference
type ScriptReferenceArgs struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments pulumi.StringPtrInput `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData pulumi.StringPtrInput `pulumi:"scriptData"`
	// The storage source of the script: workspace.
	ScriptSource pulumi.StringPtrInput `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ScriptReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReference)(nil)).Elem()
}

func (i ScriptReferenceArgs) ToScriptReferenceOutput() ScriptReferenceOutput {
	return i.ToScriptReferenceOutputWithContext(context.Background())
}

func (i ScriptReferenceArgs) ToScriptReferenceOutputWithContext(ctx context.Context) ScriptReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferenceOutput)
}

func (i ScriptReferenceArgs) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return i.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (i ScriptReferenceArgs) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferenceOutput).ToScriptReferencePtrOutputWithContext(ctx)
}

// ScriptReferencePtrInput is an input type that accepts ScriptReferenceArgs, ScriptReferencePtr and ScriptReferencePtrOutput values.
// You can construct a concrete instance of `ScriptReferencePtrInput` via:
//
//	        ScriptReferenceArgs{...}
//
//	or:
//
//	        nil
type ScriptReferencePtrInput interface {
	pulumi.Input

	ToScriptReferencePtrOutput() ScriptReferencePtrOutput
	ToScriptReferencePtrOutputWithContext(context.Context) ScriptReferencePtrOutput
}

type scriptReferencePtrType ScriptReferenceArgs

func ScriptReferencePtr(v *ScriptReferenceArgs) ScriptReferencePtrInput {
	return (*scriptReferencePtrType)(v)
}

func (*scriptReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReference)(nil)).Elem()
}

func (i *scriptReferencePtrType) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return i.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (i *scriptReferencePtrType) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferencePtrOutput)
}

// Script reference
type ScriptReferenceOutput struct{ *pulumi.OutputState }

func (ScriptReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReference)(nil)).Elem()
}

func (o ScriptReferenceOutput) ToScriptReferenceOutput() ScriptReferenceOutput {
	return o
}

func (o ScriptReferenceOutput) ToScriptReferenceOutputWithContext(ctx context.Context) ScriptReferenceOutput {
	return o
}

func (o ScriptReferenceOutput) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return o.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (o ScriptReferenceOutput) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptReference) *ScriptReference {
		return &v
	}).(ScriptReferencePtrOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptArguments }).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptData }).(pulumi.StringPtrOutput)
}

// The storage source of the script: workspace.
func (o ScriptReferenceOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptSource }).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ScriptReferencePtrOutput struct{ *pulumi.OutputState }

func (ScriptReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReference)(nil)).Elem()
}

func (o ScriptReferencePtrOutput) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return o
}

func (o ScriptReferencePtrOutput) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return o
}

func (o ScriptReferencePtrOutput) Elem() ScriptReferenceOutput {
	return o.ApplyT(func(v *ScriptReference) ScriptReference {
		if v != nil {
			return *v
		}
		var ret ScriptReference
		return ret
	}).(ScriptReferenceOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferencePtrOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptArguments
	}).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferencePtrOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptData
	}).(pulumi.StringPtrOutput)
}

// The storage source of the script: workspace.
func (o ScriptReferencePtrOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptSource
	}).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferencePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Script reference
type ScriptReferenceResponse struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// Script reference
type ScriptReferenceResponseOutput struct{ *pulumi.OutputState }

func (ScriptReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReferenceResponse)(nil)).Elem()
}

func (o ScriptReferenceResponseOutput) ToScriptReferenceResponseOutput() ScriptReferenceResponseOutput {
	return o
}

func (o ScriptReferenceResponseOutput) ToScriptReferenceResponseOutputWithContext(ctx context.Context) ScriptReferenceResponseOutput {
	return o
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceResponseOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptArguments }).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceResponseOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptData }).(pulumi.StringPtrOutput)
}

// The storage source of the script: workspace.
func (o ScriptReferenceResponseOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptSource }).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ScriptReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ScriptReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReferenceResponse)(nil)).Elem()
}

func (o ScriptReferenceResponsePtrOutput) ToScriptReferenceResponsePtrOutput() ScriptReferenceResponsePtrOutput {
	return o
}

func (o ScriptReferenceResponsePtrOutput) ToScriptReferenceResponsePtrOutputWithContext(ctx context.Context) ScriptReferenceResponsePtrOutput {
	return o
}

func (o ScriptReferenceResponsePtrOutput) Elem() ScriptReferenceResponseOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) ScriptReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ScriptReferenceResponse
		return ret
	}).(ScriptReferenceResponseOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceResponsePtrOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptArguments
	}).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceResponsePtrOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptData
	}).(pulumi.StringPtrOutput)
}

// The storage source of the script: workspace.
func (o ScriptReferenceResponsePtrOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptSource
	}).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Customized setup scripts
type ScriptsToExecute struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReference `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReference `pulumi:"startupScript"`
}

// ScriptsToExecuteInput is an input type that accepts ScriptsToExecuteArgs and ScriptsToExecuteOutput values.
// You can construct a concrete instance of `ScriptsToExecuteInput` via:
//
//	ScriptsToExecuteArgs{...}
type ScriptsToExecuteInput interface {
	pulumi.Input

	ToScriptsToExecuteOutput() ScriptsToExecuteOutput
	ToScriptsToExecuteOutputWithContext(context.Context) ScriptsToExecuteOutput
}

// Customized setup scripts
type ScriptsToExecuteArgs struct {
	// Script that's run only once during provision of the compute.
	CreationScript ScriptReferencePtrInput `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript ScriptReferencePtrInput `pulumi:"startupScript"`
}

func (ScriptsToExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecute)(nil)).Elem()
}

func (i ScriptsToExecuteArgs) ToScriptsToExecuteOutput() ScriptsToExecuteOutput {
	return i.ToScriptsToExecuteOutputWithContext(context.Background())
}

func (i ScriptsToExecuteArgs) ToScriptsToExecuteOutputWithContext(ctx context.Context) ScriptsToExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecuteOutput)
}

func (i ScriptsToExecuteArgs) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return i.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (i ScriptsToExecuteArgs) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecuteOutput).ToScriptsToExecutePtrOutputWithContext(ctx)
}

// ScriptsToExecutePtrInput is an input type that accepts ScriptsToExecuteArgs, ScriptsToExecutePtr and ScriptsToExecutePtrOutput values.
// You can construct a concrete instance of `ScriptsToExecutePtrInput` via:
//
//	        ScriptsToExecuteArgs{...}
//
//	or:
//
//	        nil
type ScriptsToExecutePtrInput interface {
	pulumi.Input

	ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput
	ToScriptsToExecutePtrOutputWithContext(context.Context) ScriptsToExecutePtrOutput
}

type scriptsToExecutePtrType ScriptsToExecuteArgs

func ScriptsToExecutePtr(v *ScriptsToExecuteArgs) ScriptsToExecutePtrInput {
	return (*scriptsToExecutePtrType)(v)
}

func (*scriptsToExecutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecute)(nil)).Elem()
}

func (i *scriptsToExecutePtrType) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return i.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (i *scriptsToExecutePtrType) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecutePtrOutput)
}

// Customized setup scripts
type ScriptsToExecuteOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecute)(nil)).Elem()
}

func (o ScriptsToExecuteOutput) ToScriptsToExecuteOutput() ScriptsToExecuteOutput {
	return o
}

func (o ScriptsToExecuteOutput) ToScriptsToExecuteOutputWithContext(ctx context.Context) ScriptsToExecuteOutput {
	return o
}

func (o ScriptsToExecuteOutput) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return o.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (o ScriptsToExecuteOutput) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptsToExecute) *ScriptsToExecute {
		return &v
	}).(ScriptsToExecutePtrOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteOutput) CreationScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v ScriptsToExecute) *ScriptReference { return v.CreationScript }).(ScriptReferencePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteOutput) StartupScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v ScriptsToExecute) *ScriptReference { return v.StartupScript }).(ScriptReferencePtrOutput)
}

type ScriptsToExecutePtrOutput struct{ *pulumi.OutputState }

func (ScriptsToExecutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecute)(nil)).Elem()
}

func (o ScriptsToExecutePtrOutput) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return o
}

func (o ScriptsToExecutePtrOutput) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return o
}

func (o ScriptsToExecutePtrOutput) Elem() ScriptsToExecuteOutput {
	return o.ApplyT(func(v *ScriptsToExecute) ScriptsToExecute {
		if v != nil {
			return *v
		}
		var ret ScriptsToExecute
		return ret
	}).(ScriptsToExecuteOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecutePtrOutput) CreationScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecute) *ScriptReference {
		if v == nil {
			return nil
		}
		return v.CreationScript
	}).(ScriptReferencePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecutePtrOutput) StartupScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecute) *ScriptReference {
		if v == nil {
			return nil
		}
		return v.StartupScript
	}).(ScriptReferencePtrOutput)
}

// Customized setup scripts
type ScriptsToExecuteResponse struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReferenceResponse `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReferenceResponse `pulumi:"startupScript"`
}

// Customized setup scripts
type ScriptsToExecuteResponseOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecuteResponse)(nil)).Elem()
}

func (o ScriptsToExecuteResponseOutput) ToScriptsToExecuteResponseOutput() ScriptsToExecuteResponseOutput {
	return o
}

func (o ScriptsToExecuteResponseOutput) ToScriptsToExecuteResponseOutputWithContext(ctx context.Context) ScriptsToExecuteResponseOutput {
	return o
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteResponseOutput) CreationScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v ScriptsToExecuteResponse) *ScriptReferenceResponse { return v.CreationScript }).(ScriptReferenceResponsePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteResponseOutput) StartupScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v ScriptsToExecuteResponse) *ScriptReferenceResponse { return v.StartupScript }).(ScriptReferenceResponsePtrOutput)
}

type ScriptsToExecuteResponsePtrOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecuteResponse)(nil)).Elem()
}

func (o ScriptsToExecuteResponsePtrOutput) ToScriptsToExecuteResponsePtrOutput() ScriptsToExecuteResponsePtrOutput {
	return o
}

func (o ScriptsToExecuteResponsePtrOutput) ToScriptsToExecuteResponsePtrOutputWithContext(ctx context.Context) ScriptsToExecuteResponsePtrOutput {
	return o
}

func (o ScriptsToExecuteResponsePtrOutput) Elem() ScriptsToExecuteResponseOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) ScriptsToExecuteResponse {
		if v != nil {
			return *v
		}
		var ret ScriptsToExecuteResponse
		return ret
	}).(ScriptsToExecuteResponseOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteResponsePtrOutput) CreationScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) *ScriptReferenceResponse {
		if v == nil {
			return nil
		}
		return v.CreationScript
	}).(ScriptReferenceResponsePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteResponsePtrOutput) StartupScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) *ScriptReferenceResponse {
		if v == nil {
			return nil
		}
		return v.StartupScript
	}).(ScriptReferenceResponsePtrOutput)
}

// Secret Configuration definition.
type SecretConfiguration struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// SecretConfigurationInput is an input type that accepts SecretConfigurationArgs and SecretConfigurationOutput values.
// You can construct a concrete instance of `SecretConfigurationInput` via:
//
//	SecretConfigurationArgs{...}
type SecretConfigurationInput interface {
	pulumi.Input

	ToSecretConfigurationOutput() SecretConfigurationOutput
	ToSecretConfigurationOutputWithContext(context.Context) SecretConfigurationOutput
}

// Secret Configuration definition.
type SecretConfigurationArgs struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName pulumi.StringPtrInput `pulumi:"workspaceSecretName"`
}

func (SecretConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return i.ToSecretConfigurationOutputWithContext(context.Background())
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationOutput)
}

// SecretConfigurationMapInput is an input type that accepts SecretConfigurationMap and SecretConfigurationMapOutput values.
// You can construct a concrete instance of `SecretConfigurationMapInput` via:
//
//	SecretConfigurationMap{ "key": SecretConfigurationArgs{...} }
type SecretConfigurationMapInput interface {
	pulumi.Input

	ToSecretConfigurationMapOutput() SecretConfigurationMapOutput
	ToSecretConfigurationMapOutputWithContext(context.Context) SecretConfigurationMapOutput
}

type SecretConfigurationMap map[string]SecretConfigurationInput

func (SecretConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return i.ToSecretConfigurationMapOutputWithContext(context.Background())
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationMapOutput)
}

// Secret Configuration definition.
type SecretConfigurationOutput struct{ *pulumi.OutputState }

func (SecretConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return o
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfiguration {
		return vs[0].(map[string]SecretConfiguration)[vs[1].(string)]
	}).(SecretConfigurationOutput)
}

// Secret Configuration definition.
type SecretConfigurationResponse struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// Secret Configuration definition.
type SecretConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutput() SecretConfigurationResponseOutput {
	return o
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutputWithContext(ctx context.Context) SecretConfigurationResponseOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationResponseOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutput() SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutputWithContext(ctx context.Context) SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfigurationResponse {
		return vs[0].(map[string]SecretConfigurationResponse)[vs[1].(string)]
	}).(SecretConfigurationResponseOutput)
}

type ServerlessEndpointType struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode *string `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation *ServerlessEndpointCapacityReservation `pulumi:"capacityReservation"`
	// [Required] The publisher-defined Serverless Offer to provision the endpoint with.
	Offer ServerlessOffer `pulumi:"offer"`
}

// ServerlessEndpointTypeInput is an input type that accepts ServerlessEndpointTypeArgs and ServerlessEndpointTypeOutput values.
// You can construct a concrete instance of `ServerlessEndpointTypeInput` via:
//
//	ServerlessEndpointTypeArgs{...}
type ServerlessEndpointTypeInput interface {
	pulumi.Input

	ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput
	ToServerlessEndpointTypeOutputWithContext(context.Context) ServerlessEndpointTypeOutput
}

type ServerlessEndpointTypeArgs struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation ServerlessEndpointCapacityReservationPtrInput `pulumi:"capacityReservation"`
	// [Required] The publisher-defined Serverless Offer to provision the endpoint with.
	Offer ServerlessOfferInput `pulumi:"offer"`
}

func (ServerlessEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointType)(nil)).Elem()
}

func (i ServerlessEndpointTypeArgs) ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput {
	return i.ToServerlessEndpointTypeOutputWithContext(context.Background())
}

func (i ServerlessEndpointTypeArgs) ToServerlessEndpointTypeOutputWithContext(ctx context.Context) ServerlessEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointTypeOutput)
}

type ServerlessEndpointTypeOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointType)(nil)).Elem()
}

func (o ServerlessEndpointTypeOutput) ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput {
	return o
}

func (o ServerlessEndpointTypeOutput) ToServerlessEndpointTypeOutputWithContext(ctx context.Context) ServerlessEndpointTypeOutput {
	return o
}

// Specifies the authentication mode for the Serverless endpoint.
func (o ServerlessEndpointTypeOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
// will be allocated capacity from the specified capacity reservation group.
func (o ServerlessEndpointTypeOutput) CapacityReservation() ServerlessEndpointCapacityReservationPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *ServerlessEndpointCapacityReservation { return v.CapacityReservation }).(ServerlessEndpointCapacityReservationPtrOutput)
}

// [Required] The publisher-defined Serverless Offer to provision the endpoint with.
func (o ServerlessEndpointTypeOutput) Offer() ServerlessOfferOutput {
	return o.ApplyT(func(v ServerlessEndpointType) ServerlessOffer { return v.Offer }).(ServerlessOfferOutput)
}

type ServerlessEndpointCapacityReservation struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId string `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity *int `pulumi:"endpointReservedCapacity"`
}

// ServerlessEndpointCapacityReservationInput is an input type that accepts ServerlessEndpointCapacityReservationArgs and ServerlessEndpointCapacityReservationOutput values.
// You can construct a concrete instance of `ServerlessEndpointCapacityReservationInput` via:
//
//	ServerlessEndpointCapacityReservationArgs{...}
type ServerlessEndpointCapacityReservationInput interface {
	pulumi.Input

	ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput
	ToServerlessEndpointCapacityReservationOutputWithContext(context.Context) ServerlessEndpointCapacityReservationOutput
}

type ServerlessEndpointCapacityReservationArgs struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId pulumi.StringInput `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity pulumi.IntPtrInput `pulumi:"endpointReservedCapacity"`
}

func (ServerlessEndpointCapacityReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput {
	return i.ToServerlessEndpointCapacityReservationOutputWithContext(context.Background())
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationOutput)
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return i.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationOutput).ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx)
}

// ServerlessEndpointCapacityReservationPtrInput is an input type that accepts ServerlessEndpointCapacityReservationArgs, ServerlessEndpointCapacityReservationPtr and ServerlessEndpointCapacityReservationPtrOutput values.
// You can construct a concrete instance of `ServerlessEndpointCapacityReservationPtrInput` via:
//
//	        ServerlessEndpointCapacityReservationArgs{...}
//
//	or:
//
//	        nil
type ServerlessEndpointCapacityReservationPtrInput interface {
	pulumi.Input

	ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput
	ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Context) ServerlessEndpointCapacityReservationPtrOutput
}

type serverlessEndpointCapacityReservationPtrType ServerlessEndpointCapacityReservationArgs

func ServerlessEndpointCapacityReservationPtr(v *ServerlessEndpointCapacityReservationArgs) ServerlessEndpointCapacityReservationPtrInput {
	return (*serverlessEndpointCapacityReservationPtrType)(v)
}

func (*serverlessEndpointCapacityReservationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (i *serverlessEndpointCapacityReservationPtrType) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return i.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (i *serverlessEndpointCapacityReservationPtrType) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationPtrOutput)
}

type ServerlessEndpointCapacityReservationOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return o.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessEndpointCapacityReservation) *ServerlessEndpointCapacityReservation {
		return &v
	}).(ServerlessEndpointCapacityReservationPtrOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationOutput) CapacityReservationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservation) string { return v.CapacityReservationGroupId }).(pulumi.StringOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservation) *int { return v.EndpointReservedCapacity }).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationPtrOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationPtrOutput) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationPtrOutput) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationPtrOutput) Elem() ServerlessEndpointCapacityReservationOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) ServerlessEndpointCapacityReservation {
		if v != nil {
			return *v
		}
		var ret ServerlessEndpointCapacityReservation
		return ret
	}).(ServerlessEndpointCapacityReservationOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationPtrOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) *string {
		if v == nil {
			return nil
		}
		return &v.CapacityReservationGroupId
	}).(pulumi.StringPtrOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationPtrOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) *int {
		if v == nil {
			return nil
		}
		return v.EndpointReservedCapacity
	}).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationResponse struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId string `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity *int `pulumi:"endpointReservedCapacity"`
}

type ServerlessEndpointCapacityReservationResponseOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservationResponse)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationResponseOutput) ToServerlessEndpointCapacityReservationResponseOutput() ServerlessEndpointCapacityReservationResponseOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponseOutput) ToServerlessEndpointCapacityReservationResponseOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationResponseOutput {
	return o
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationResponseOutput) CapacityReservationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservationResponse) string { return v.CapacityReservationGroupId }).(pulumi.StringOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationResponseOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservationResponse) *int { return v.EndpointReservedCapacity }).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservationResponse)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) ToServerlessEndpointCapacityReservationResponsePtrOutput() ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) ToServerlessEndpointCapacityReservationResponsePtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) Elem() ServerlessEndpointCapacityReservationResponseOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) ServerlessEndpointCapacityReservationResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessEndpointCapacityReservationResponse
		return ret
	}).(ServerlessEndpointCapacityReservationResponseOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationResponsePtrOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CapacityReservationGroupId
	}).(pulumi.StringPtrOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationResponsePtrOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EndpointReservedCapacity
	}).(pulumi.IntPtrOutput)
}

type ServerlessEndpointResponse struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode *string `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation *ServerlessEndpointCapacityReservationResponse `pulumi:"capacityReservation"`
	// The inference uri to target when making requests against the serverless endpoint
	InferenceEndpoint ServerlessInferenceEndpointResponse `pulumi:"inferenceEndpoint"`
	// [Required] The publisher-defined Serverless Offer to provision the endpoint with.
	Offer ServerlessOfferResponse `pulumi:"offer"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
}

type ServerlessEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointResponse)(nil)).Elem()
}

func (o ServerlessEndpointResponseOutput) ToServerlessEndpointResponseOutput() ServerlessEndpointResponseOutput {
	return o
}

func (o ServerlessEndpointResponseOutput) ToServerlessEndpointResponseOutputWithContext(ctx context.Context) ServerlessEndpointResponseOutput {
	return o
}

// Specifies the authentication mode for the Serverless endpoint.
func (o ServerlessEndpointResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
// will be allocated capacity from the specified capacity reservation group.
func (o ServerlessEndpointResponseOutput) CapacityReservation() ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *ServerlessEndpointCapacityReservationResponse {
		return v.CapacityReservation
	}).(ServerlessEndpointCapacityReservationResponsePtrOutput)
}

// The inference uri to target when making requests against the serverless endpoint
func (o ServerlessEndpointResponseOutput) InferenceEndpoint() ServerlessInferenceEndpointResponseOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) ServerlessInferenceEndpointResponse { return v.InferenceEndpoint }).(ServerlessInferenceEndpointResponseOutput)
}

// [Required] The publisher-defined Serverless Offer to provision the endpoint with.
func (o ServerlessEndpointResponseOutput) Offer() ServerlessOfferResponseOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) ServerlessOfferResponse { return v.Offer }).(ServerlessOfferResponseOutput)
}

// Provisioning state for the endpoint.
func (o ServerlessEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ServerlessInferenceEndpointResponse struct {
	// Specifies any required headers to target this serverless endpoint.
	Headers map[string]string `pulumi:"headers"`
	// [Required] The inference uri to target when making requests against the Serverless Endpoint.
	Uri string `pulumi:"uri"`
}

type ServerlessInferenceEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServerlessInferenceEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessInferenceEndpointResponse)(nil)).Elem()
}

func (o ServerlessInferenceEndpointResponseOutput) ToServerlessInferenceEndpointResponseOutput() ServerlessInferenceEndpointResponseOutput {
	return o
}

func (o ServerlessInferenceEndpointResponseOutput) ToServerlessInferenceEndpointResponseOutputWithContext(ctx context.Context) ServerlessInferenceEndpointResponseOutput {
	return o
}

// Specifies any required headers to target this serverless endpoint.
func (o ServerlessInferenceEndpointResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServerlessInferenceEndpointResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// [Required] The inference uri to target when making requests against the Serverless Endpoint.
func (o ServerlessInferenceEndpointResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessInferenceEndpointResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ServerlessOffer struct {
	// [Required] The name of the Serverless Offer
	OfferName string `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher string `pulumi:"publisher"`
}

// ServerlessOfferInput is an input type that accepts ServerlessOfferArgs and ServerlessOfferOutput values.
// You can construct a concrete instance of `ServerlessOfferInput` via:
//
//	ServerlessOfferArgs{...}
type ServerlessOfferInput interface {
	pulumi.Input

	ToServerlessOfferOutput() ServerlessOfferOutput
	ToServerlessOfferOutputWithContext(context.Context) ServerlessOfferOutput
}

type ServerlessOfferArgs struct {
	// [Required] The name of the Serverless Offer
	OfferName pulumi.StringInput `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (ServerlessOfferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOffer)(nil)).Elem()
}

func (i ServerlessOfferArgs) ToServerlessOfferOutput() ServerlessOfferOutput {
	return i.ToServerlessOfferOutputWithContext(context.Background())
}

func (i ServerlessOfferArgs) ToServerlessOfferOutputWithContext(ctx context.Context) ServerlessOfferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferOutput)
}

func (i ServerlessOfferArgs) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return i.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (i ServerlessOfferArgs) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferOutput).ToServerlessOfferPtrOutputWithContext(ctx)
}

// ServerlessOfferPtrInput is an input type that accepts ServerlessOfferArgs, ServerlessOfferPtr and ServerlessOfferPtrOutput values.
// You can construct a concrete instance of `ServerlessOfferPtrInput` via:
//
//	        ServerlessOfferArgs{...}
//
//	or:
//
//	        nil
type ServerlessOfferPtrInput interface {
	pulumi.Input

	ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput
	ToServerlessOfferPtrOutputWithContext(context.Context) ServerlessOfferPtrOutput
}

type serverlessOfferPtrType ServerlessOfferArgs

func ServerlessOfferPtr(v *ServerlessOfferArgs) ServerlessOfferPtrInput {
	return (*serverlessOfferPtrType)(v)
}

func (*serverlessOfferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOffer)(nil)).Elem()
}

func (i *serverlessOfferPtrType) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return i.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (i *serverlessOfferPtrType) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferPtrOutput)
}

type ServerlessOfferOutput struct{ *pulumi.OutputState }

func (ServerlessOfferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOffer)(nil)).Elem()
}

func (o ServerlessOfferOutput) ToServerlessOfferOutput() ServerlessOfferOutput {
	return o
}

func (o ServerlessOfferOutput) ToServerlessOfferOutputWithContext(ctx context.Context) ServerlessOfferOutput {
	return o
}

func (o ServerlessOfferOutput) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return o.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (o ServerlessOfferOutput) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessOffer) *ServerlessOffer {
		return &v
	}).(ServerlessOfferPtrOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOffer) string { return v.OfferName }).(pulumi.StringOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOffer) string { return v.Publisher }).(pulumi.StringOutput)
}

type ServerlessOfferPtrOutput struct{ *pulumi.OutputState }

func (ServerlessOfferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOffer)(nil)).Elem()
}

func (o ServerlessOfferPtrOutput) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return o
}

func (o ServerlessOfferPtrOutput) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return o
}

func (o ServerlessOfferPtrOutput) Elem() ServerlessOfferOutput {
	return o.ApplyT(func(v *ServerlessOffer) ServerlessOffer {
		if v != nil {
			return *v
		}
		var ret ServerlessOffer
		return ret
	}).(ServerlessOfferOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferPtrOutput) OfferName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOffer) *string {
		if v == nil {
			return nil
		}
		return &v.OfferName
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOffer) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type ServerlessOfferResponse struct {
	// [Required] The name of the Serverless Offer
	OfferName string `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher string `pulumi:"publisher"`
}

type ServerlessOfferResponseOutput struct{ *pulumi.OutputState }

func (ServerlessOfferResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOfferResponse)(nil)).Elem()
}

func (o ServerlessOfferResponseOutput) ToServerlessOfferResponseOutput() ServerlessOfferResponseOutput {
	return o
}

func (o ServerlessOfferResponseOutput) ToServerlessOfferResponseOutputWithContext(ctx context.Context) ServerlessOfferResponseOutput {
	return o
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferResponseOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOfferResponse) string { return v.OfferName }).(pulumi.StringOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOfferResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

type ServerlessOfferResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessOfferResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOfferResponse)(nil)).Elem()
}

func (o ServerlessOfferResponsePtrOutput) ToServerlessOfferResponsePtrOutput() ServerlessOfferResponsePtrOutput {
	return o
}

func (o ServerlessOfferResponsePtrOutput) ToServerlessOfferResponsePtrOutputWithContext(ctx context.Context) ServerlessOfferResponsePtrOutput {
	return o
}

func (o ServerlessOfferResponsePtrOutput) Elem() ServerlessOfferResponseOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) ServerlessOfferResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessOfferResponse
		return ret
	}).(ServerlessOfferResponseOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferResponsePtrOutput) OfferName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OfferName
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type ServiceManagedResourcesSettings struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb *CosmosDbSettings `pulumi:"cosmosDb"`
}

// ServiceManagedResourcesSettingsInput is an input type that accepts ServiceManagedResourcesSettingsArgs and ServiceManagedResourcesSettingsOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsInput` via:
//
//	ServiceManagedResourcesSettingsArgs{...}
type ServiceManagedResourcesSettingsInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput
	ToServiceManagedResourcesSettingsOutputWithContext(context.Context) ServiceManagedResourcesSettingsOutput
}

type ServiceManagedResourcesSettingsArgs struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb CosmosDbSettingsPtrInput `pulumi:"cosmosDb"`
}

func (ServiceManagedResourcesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return i.ToServiceManagedResourcesSettingsOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput)
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput).ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx)
}

// ServiceManagedResourcesSettingsPtrInput is an input type that accepts ServiceManagedResourcesSettingsArgs, ServiceManagedResourcesSettingsPtr and ServiceManagedResourcesSettingsPtrOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsPtrInput` via:
//
//	        ServiceManagedResourcesSettingsArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedResourcesSettingsPtrInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput
	ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Context) ServiceManagedResourcesSettingsPtrOutput
}

type serviceManagedResourcesSettingsPtrType ServiceManagedResourcesSettingsArgs

func ServiceManagedResourcesSettingsPtr(v *ServiceManagedResourcesSettingsArgs) ServiceManagedResourcesSettingsPtrInput {
	return (*serviceManagedResourcesSettingsPtrType)(v)
}

func (*serviceManagedResourcesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedResourcesSettings) *ServiceManagedResourcesSettings {
		return &v
	}).(ServiceManagedResourcesSettingsPtrOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettings) *CosmosDbSettings { return v.CosmosDb }).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) Elem() ServiceManagedResourcesSettingsOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) ServiceManagedResourcesSettings {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettings
		return ret
	}).(ServiceManagedResourcesSettingsOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsPtrOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) *CosmosDbSettings {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsResponse struct {
	// The settings for the service managed cosmosdb account.
	CosmosDb *CosmosDbSettingsResponse `pulumi:"cosmosDb"`
}

type ServiceManagedResourcesSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutput() ServiceManagedResourcesSettingsResponseOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponseOutput {
	return o
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsResponseOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse { return v.CosmosDb }).(CosmosDbSettingsResponsePtrOutput)
}

type ServiceManagedResourcesSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutput() ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) Elem() ServiceManagedResourcesSettingsResponseOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) ServiceManagedResourcesSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettingsResponse
		return ret
	}).(ServiceManagedResourcesSettingsResponseOutput)
}

// The settings for the service managed cosmosdb account.
func (o ServiceManagedResourcesSettingsResponsePtrOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsResponsePtrOutput)
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ServicePrincipal'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category    *string                                      `pulumi:"category"`
	Credentials *WorkspaceConnectionServicePrincipalResponse `pulumi:"credentials"`
	ExpiryTime  *string                                      `pulumi:"expiryTime"`
	Metadata    interface{}                                  `pulumi:"metadata"`
	Target      *string                                      `pulumi:"target"`
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput() ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionServicePrincipalResponsePtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionServicePrincipalResponse {
		return v.Credentials
	}).(WorkspaceConnectionServicePrincipalResponsePtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.AnyOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) interface{} { return v.Metadata }).(pulumi.AnyOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// ServicePrincipalDatastoreCredentialsInput is an input type that accepts ServicePrincipalDatastoreCredentialsArgs and ServicePrincipalDatastoreCredentialsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreCredentialsInput` via:
//
//	ServicePrincipalDatastoreCredentialsArgs{...}
type ServicePrincipalDatastoreCredentialsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput
	ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Context) ServicePrincipalDatastoreCredentialsOutput
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ServicePrincipalDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return i.ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreCredentialsOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o ServicePrincipalDatastoreCredentialsOutput) Secrets() ServicePrincipalDatastoreSecretsOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) ServicePrincipalDatastoreSecrets { return v.Secrets }).(ServicePrincipalDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentialsResponse)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutput() ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecrets struct {
	// Service principal secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType string `pulumi:"secretsType"`
}

// ServicePrincipalDatastoreSecretsInput is an input type that accepts ServicePrincipalDatastoreSecretsArgs and ServicePrincipalDatastoreSecretsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreSecretsInput` via:
//
//	ServicePrincipalDatastoreSecretsArgs{...}
type ServicePrincipalDatastoreSecretsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput
	ToServicePrincipalDatastoreSecretsOutputWithContext(context.Context) ServicePrincipalDatastoreSecretsOutput
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsArgs struct {
	// Service principal secret.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (ServicePrincipalDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return i.ToServicePrincipalDatastoreSecretsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreSecretsOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return o
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return o
}

// Service principal secret.
func (o ServicePrincipalDatastoreSecretsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestination struct {
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	ServiceTag *string `pulumi:"serviceTag"`
}

// ServiceTagDestinationInput is an input type that accepts ServiceTagDestinationArgs and ServiceTagDestinationOutput values.
// You can construct a concrete instance of `ServiceTagDestinationInput` via:
//
//	ServiceTagDestinationArgs{...}
type ServiceTagDestinationInput interface {
	pulumi.Input

	ToServiceTagDestinationOutput() ServiceTagDestinationOutput
	ToServiceTagDestinationOutputWithContext(context.Context) ServiceTagDestinationOutput
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationArgs struct {
	PortRanges pulumi.StringPtrInput `pulumi:"portRanges"`
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	ServiceTag pulumi.StringPtrInput `pulumi:"serviceTag"`
}

func (ServiceTagDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestination)(nil)).Elem()
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationOutput() ServiceTagDestinationOutput {
	return i.ToServiceTagDestinationOutputWithContext(context.Background())
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationOutputWithContext(ctx context.Context) ServiceTagDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationOutput)
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return i.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationOutput).ToServiceTagDestinationPtrOutputWithContext(ctx)
}

// ServiceTagDestinationPtrInput is an input type that accepts ServiceTagDestinationArgs, ServiceTagDestinationPtr and ServiceTagDestinationPtrOutput values.
// You can construct a concrete instance of `ServiceTagDestinationPtrInput` via:
//
//	        ServiceTagDestinationArgs{...}
//
//	or:
//
//	        nil
type ServiceTagDestinationPtrInput interface {
	pulumi.Input

	ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput
	ToServiceTagDestinationPtrOutputWithContext(context.Context) ServiceTagDestinationPtrOutput
}

type serviceTagDestinationPtrType ServiceTagDestinationArgs

func ServiceTagDestinationPtr(v *ServiceTagDestinationArgs) ServiceTagDestinationPtrInput {
	return (*serviceTagDestinationPtrType)(v)
}

func (*serviceTagDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestination)(nil)).Elem()
}

func (i *serviceTagDestinationPtrType) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return i.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (i *serviceTagDestinationPtrType) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestination)(nil)).Elem()
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationOutput() ServiceTagDestinationOutput {
	return o
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationOutputWithContext(ctx context.Context) ServiceTagDestinationOutput {
	return o
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return o.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTagDestination) *ServiceTagDestination {
		return &v
	}).(ServiceTagDestinationPtrOutput)
}

func (o ServiceTagDestinationOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.ServiceTag }).(pulumi.StringPtrOutput)
}

type ServiceTagDestinationPtrOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestination)(nil)).Elem()
}

func (o ServiceTagDestinationPtrOutput) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return o
}

func (o ServiceTagDestinationPtrOutput) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return o
}

func (o ServiceTagDestinationPtrOutput) Elem() ServiceTagDestinationOutput {
	return o.ApplyT(func(v *ServiceTagDestination) ServiceTagDestination {
		if v != nil {
			return *v
		}
		var ret ServiceTagDestination
		return ret
	}).(ServiceTagDestinationOutput)
}

func (o ServiceTagDestinationPtrOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.PortRanges
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationPtrOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTag
	}).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationResponse struct {
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	ServiceTag *string `pulumi:"serviceTag"`
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestinationResponse)(nil)).Elem()
}

func (o ServiceTagDestinationResponseOutput) ToServiceTagDestinationResponseOutput() ServiceTagDestinationResponseOutput {
	return o
}

func (o ServiceTagDestinationResponseOutput) ToServiceTagDestinationResponseOutputWithContext(ctx context.Context) ServiceTagDestinationResponseOutput {
	return o
}

func (o ServiceTagDestinationResponseOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponseOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.ServiceTag }).(pulumi.StringPtrOutput)
}

type ServiceTagDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestinationResponse)(nil)).Elem()
}

func (o ServiceTagDestinationResponsePtrOutput) ToServiceTagDestinationResponsePtrOutput() ServiceTagDestinationResponsePtrOutput {
	return o
}

func (o ServiceTagDestinationResponsePtrOutput) ToServiceTagDestinationResponsePtrOutputWithContext(ctx context.Context) ServiceTagDestinationResponsePtrOutput {
	return o
}

func (o ServiceTagDestinationResponsePtrOutput) Elem() ServiceTagDestinationResponseOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) ServiceTagDestinationResponse {
		if v != nil {
			return *v
		}
		var ret ServiceTagDestinationResponse
		return ret
	}).(ServiceTagDestinationResponseOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortRanges
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTag
	}).(pulumi.StringPtrOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestination `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// ServiceTagOutboundRuleInput is an input type that accepts ServiceTagOutboundRuleArgs and ServiceTagOutboundRuleOutput values.
// You can construct a concrete instance of `ServiceTagOutboundRuleInput` via:
//
//	ServiceTagOutboundRuleArgs{...}
type ServiceTagOutboundRuleInput interface {
	pulumi.Input

	ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput
	ToServiceTagOutboundRuleOutputWithContext(context.Context) ServiceTagOutboundRuleOutput
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination ServiceTagDestinationPtrInput `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceTagOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRule)(nil)).Elem()
}

func (i ServiceTagOutboundRuleArgs) ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput {
	return i.ToServiceTagOutboundRuleOutputWithContext(context.Background())
}

func (i ServiceTagOutboundRuleArgs) ToServiceTagOutboundRuleOutputWithContext(ctx context.Context) ServiceTagOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutboundRuleOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleOutput struct{ *pulumi.OutputState }

func (ServiceTagOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRule)(nil)).Elem()
}

func (o ServiceTagOutboundRuleOutput) ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput {
	return o
}

func (o ServiceTagOutboundRuleOutput) ToServiceTagOutboundRuleOutputWithContext(ctx context.Context) ServiceTagOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Destination() ServiceTagDestinationPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *ServiceTagDestination { return v.Destination }).(ServiceTagDestinationPtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'ServiceTag'.
func (o ServiceTagOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestinationResponse `pulumi:"destination"`
	// Status of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (ServiceTagOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRuleResponse)(nil)).Elem()
}

func (o ServiceTagOutboundRuleResponseOutput) ToServiceTagOutboundRuleResponseOutput() ServiceTagOutboundRuleResponseOutput {
	return o
}

func (o ServiceTagOutboundRuleResponseOutput) ToServiceTagOutboundRuleResponseOutputWithContext(ctx context.Context) ServiceTagOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Destination() ServiceTagDestinationResponsePtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *ServiceTagDestinationResponse { return v.Destination }).(ServiceTagDestinationResponsePtrOutput)
}

// Status of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'ServiceTag'.
func (o ServiceTagOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScripts struct {
	// Customized setup scripts
	Scripts *ScriptsToExecute `pulumi:"scripts"`
}

// SetupScriptsInput is an input type that accepts SetupScriptsArgs and SetupScriptsOutput values.
// You can construct a concrete instance of `SetupScriptsInput` via:
//
//	SetupScriptsArgs{...}
type SetupScriptsInput interface {
	pulumi.Input

	ToSetupScriptsOutput() SetupScriptsOutput
	ToSetupScriptsOutputWithContext(context.Context) SetupScriptsOutput
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsArgs struct {
	// Customized setup scripts
	Scripts ScriptsToExecutePtrInput `pulumi:"scripts"`
}

func (SetupScriptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScripts)(nil)).Elem()
}

func (i SetupScriptsArgs) ToSetupScriptsOutput() SetupScriptsOutput {
	return i.ToSetupScriptsOutputWithContext(context.Background())
}

func (i SetupScriptsArgs) ToSetupScriptsOutputWithContext(ctx context.Context) SetupScriptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsOutput)
}

func (i SetupScriptsArgs) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return i.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (i SetupScriptsArgs) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsOutput).ToSetupScriptsPtrOutputWithContext(ctx)
}

// SetupScriptsPtrInput is an input type that accepts SetupScriptsArgs, SetupScriptsPtr and SetupScriptsPtrOutput values.
// You can construct a concrete instance of `SetupScriptsPtrInput` via:
//
//	        SetupScriptsArgs{...}
//
//	or:
//
//	        nil
type SetupScriptsPtrInput interface {
	pulumi.Input

	ToSetupScriptsPtrOutput() SetupScriptsPtrOutput
	ToSetupScriptsPtrOutputWithContext(context.Context) SetupScriptsPtrOutput
}

type setupScriptsPtrType SetupScriptsArgs

func SetupScriptsPtr(v *SetupScriptsArgs) SetupScriptsPtrInput {
	return (*setupScriptsPtrType)(v)
}

func (*setupScriptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScripts)(nil)).Elem()
}

func (i *setupScriptsPtrType) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return i.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (i *setupScriptsPtrType) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsOutput struct{ *pulumi.OutputState }

func (SetupScriptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScripts)(nil)).Elem()
}

func (o SetupScriptsOutput) ToSetupScriptsOutput() SetupScriptsOutput {
	return o
}

func (o SetupScriptsOutput) ToSetupScriptsOutputWithContext(ctx context.Context) SetupScriptsOutput {
	return o
}

func (o SetupScriptsOutput) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return o.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (o SetupScriptsOutput) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SetupScripts) *SetupScripts {
		return &v
	}).(SetupScriptsPtrOutput)
}

// Customized setup scripts
func (o SetupScriptsOutput) Scripts() ScriptsToExecutePtrOutput {
	return o.ApplyT(func(v SetupScripts) *ScriptsToExecute { return v.Scripts }).(ScriptsToExecutePtrOutput)
}

type SetupScriptsPtrOutput struct{ *pulumi.OutputState }

func (SetupScriptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScripts)(nil)).Elem()
}

func (o SetupScriptsPtrOutput) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return o
}

func (o SetupScriptsPtrOutput) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return o
}

func (o SetupScriptsPtrOutput) Elem() SetupScriptsOutput {
	return o.ApplyT(func(v *SetupScripts) SetupScripts {
		if v != nil {
			return *v
		}
		var ret SetupScripts
		return ret
	}).(SetupScriptsOutput)
}

// Customized setup scripts
func (o SetupScriptsPtrOutput) Scripts() ScriptsToExecutePtrOutput {
	return o.ApplyT(func(v *SetupScripts) *ScriptsToExecute {
		if v == nil {
			return nil
		}
		return v.Scripts
	}).(ScriptsToExecutePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsResponse struct {
	// Customized setup scripts
	Scripts *ScriptsToExecuteResponse `pulumi:"scripts"`
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsResponseOutput struct{ *pulumi.OutputState }

func (SetupScriptsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScriptsResponse)(nil)).Elem()
}

func (o SetupScriptsResponseOutput) ToSetupScriptsResponseOutput() SetupScriptsResponseOutput {
	return o
}

func (o SetupScriptsResponseOutput) ToSetupScriptsResponseOutputWithContext(ctx context.Context) SetupScriptsResponseOutput {
	return o
}

// Customized setup scripts
func (o SetupScriptsResponseOutput) Scripts() ScriptsToExecuteResponsePtrOutput {
	return o.ApplyT(func(v SetupScriptsResponse) *ScriptsToExecuteResponse { return v.Scripts }).(ScriptsToExecuteResponsePtrOutput)
}

type SetupScriptsResponsePtrOutput struct{ *pulumi.OutputState }

func (SetupScriptsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScriptsResponse)(nil)).Elem()
}

func (o SetupScriptsResponsePtrOutput) ToSetupScriptsResponsePtrOutput() SetupScriptsResponsePtrOutput {
	return o
}

func (o SetupScriptsResponsePtrOutput) ToSetupScriptsResponsePtrOutputWithContext(ctx context.Context) SetupScriptsResponsePtrOutput {
	return o
}

func (o SetupScriptsResponsePtrOutput) Elem() SetupScriptsResponseOutput {
	return o.ApplyT(func(v *SetupScriptsResponse) SetupScriptsResponse {
		if v != nil {
			return *v
		}
		var ret SetupScriptsResponse
		return ret
	}).(SetupScriptsResponseOutput)
}

// Customized setup scripts
func (o SetupScriptsResponsePtrOutput) Scripts() ScriptsToExecuteResponsePtrOutput {
	return o.ApplyT(func(v *SetupScriptsResponse) *ScriptsToExecuteResponse {
		if v == nil {
			return nil
		}
		return v.Scripts
	}).(ScriptsToExecuteResponsePtrOutput)
}

type SharedPrivateLinkResource struct {
	// The private link resource group id.
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link.
	Name *string `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage *string `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

// SharedPrivateLinkResourceInput is an input type that accepts SharedPrivateLinkResourceArgs and SharedPrivateLinkResourceOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceInput` via:
//
//	SharedPrivateLinkResourceArgs{...}
type SharedPrivateLinkResourceInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput
	ToSharedPrivateLinkResourceOutputWithContext(context.Context) SharedPrivateLinkResourceOutput
}

type SharedPrivateLinkResourceArgs struct {
	// The private link resource group id.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique name of the private link.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage pulumi.StringPtrInput `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SharedPrivateLinkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return i.ToSharedPrivateLinkResourceOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceOutput)
}

// SharedPrivateLinkResourceArrayInput is an input type that accepts SharedPrivateLinkResourceArray and SharedPrivateLinkResourceArrayOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceArrayInput` via:
//
//	SharedPrivateLinkResourceArray{ SharedPrivateLinkResourceArgs{...} }
type SharedPrivateLinkResourceArrayInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput
	ToSharedPrivateLinkResourceArrayOutputWithContext(context.Context) SharedPrivateLinkResourceArrayOutput
}

type SharedPrivateLinkResourceArray []SharedPrivateLinkResourceInput

func (SharedPrivateLinkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return i.ToSharedPrivateLinkResourceArrayOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceArrayOutput)
}

type SharedPrivateLinkResourceOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return o
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return o
}

// The private link resource group id.
func (o SharedPrivateLinkResourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link.
func (o SharedPrivateLinkResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource id that private link links to.
func (o SharedPrivateLinkResourceOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message.
func (o SharedPrivateLinkResourceOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o SharedPrivateLinkResourceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResource {
		return vs[0].([]SharedPrivateLinkResource)[vs[1].(int)]
	}).(SharedPrivateLinkResourceOutput)
}

type SharedPrivateLinkResourceResponse struct {
	// The private link resource group id.
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link.
	Name *string `pulumi:"name"`
	// The resource id that private link links to.
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message.
	RequestMessage *string `pulumi:"requestMessage"`
	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string `pulumi:"status"`
}

type SharedPrivateLinkResourceResponseOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutput() SharedPrivateLinkResourceResponseOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseOutput {
	return o
}

// The private link resource group id.
func (o SharedPrivateLinkResourceResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link.
func (o SharedPrivateLinkResourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource id that private link links to.
func (o SharedPrivateLinkResourceResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message.
func (o SharedPrivateLinkResourceResponseOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
func (o SharedPrivateLinkResourceResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutput() SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResourceResponse {
		return vs[0].([]SharedPrivateLinkResourceResponse)[vs[1].(int)]
	}).(SharedPrivateLinkResourceResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// The ssl configuration for scoring
type SslConfiguration struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// SslConfigurationInput is an input type that accepts SslConfigurationArgs and SslConfigurationOutput values.
// You can construct a concrete instance of `SslConfigurationInput` via:
//
//	SslConfigurationArgs{...}
type SslConfigurationInput interface {
	pulumi.Input

	ToSslConfigurationOutput() SslConfigurationOutput
	ToSslConfigurationOutputWithContext(context.Context) SslConfigurationOutput
}

// The ssl configuration for scoring
type SslConfigurationArgs struct {
	// Cert data
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// CNAME of the cert
	Cname pulumi.StringPtrInput `pulumi:"cname"`
	// Key data
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel pulumi.StringPtrInput `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain pulumi.BoolPtrInput `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SslConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfiguration)(nil)).Elem()
}

func (i SslConfigurationArgs) ToSslConfigurationOutput() SslConfigurationOutput {
	return i.ToSslConfigurationOutputWithContext(context.Background())
}

func (i SslConfigurationArgs) ToSslConfigurationOutputWithContext(ctx context.Context) SslConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationOutput)
}

func (i SslConfigurationArgs) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return i.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (i SslConfigurationArgs) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationOutput).ToSslConfigurationPtrOutputWithContext(ctx)
}

// SslConfigurationPtrInput is an input type that accepts SslConfigurationArgs, SslConfigurationPtr and SslConfigurationPtrOutput values.
// You can construct a concrete instance of `SslConfigurationPtrInput` via:
//
//	        SslConfigurationArgs{...}
//
//	or:
//
//	        nil
type SslConfigurationPtrInput interface {
	pulumi.Input

	ToSslConfigurationPtrOutput() SslConfigurationPtrOutput
	ToSslConfigurationPtrOutputWithContext(context.Context) SslConfigurationPtrOutput
}

type sslConfigurationPtrType SslConfigurationArgs

func SslConfigurationPtr(v *SslConfigurationArgs) SslConfigurationPtrInput {
	return (*sslConfigurationPtrType)(v)
}

func (*sslConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfiguration)(nil)).Elem()
}

func (i *sslConfigurationPtrType) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return i.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (i *sslConfigurationPtrType) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationPtrOutput)
}

// The ssl configuration for scoring
type SslConfigurationOutput struct{ *pulumi.OutputState }

func (SslConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfiguration)(nil)).Elem()
}

func (o SslConfigurationOutput) ToSslConfigurationOutput() SslConfigurationOutput {
	return o
}

func (o SslConfigurationOutput) ToSslConfigurationOutputWithContext(ctx context.Context) SslConfigurationOutput {
	return o
}

func (o SslConfigurationOutput) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return o.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (o SslConfigurationOutput) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslConfiguration) *SslConfiguration {
		return &v
	}).(SslConfigurationPtrOutput)
}

// Cert data
func (o SslConfigurationOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.LeafDomainLabel }).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *bool { return v.OverwriteExistingDomain }).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SslConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SslConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfiguration)(nil)).Elem()
}

func (o SslConfigurationPtrOutput) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return o
}

func (o SslConfigurationPtrOutput) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return o
}

func (o SslConfigurationPtrOutput) Elem() SslConfigurationOutput {
	return o.ApplyT(func(v *SslConfiguration) SslConfiguration {
		if v != nil {
			return *v
		}
		var ret SslConfiguration
		return ret
	}).(SslConfigurationOutput)
}

// Cert data
func (o SslConfigurationPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationPtrOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LeafDomainLabel
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationPtrOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingDomain
	}).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The ssl configuration for scoring
type SslConfigurationResponse struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// The ssl configuration for scoring
type SslConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SslConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfigurationResponse)(nil)).Elem()
}

func (o SslConfigurationResponseOutput) ToSslConfigurationResponseOutput() SslConfigurationResponseOutput {
	return o
}

func (o SslConfigurationResponseOutput) ToSslConfigurationResponseOutputWithContext(ctx context.Context) SslConfigurationResponseOutput {
	return o
}

// Cert data
func (o SslConfigurationResponseOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationResponseOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.LeafDomainLabel }).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationResponseOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *bool { return v.OverwriteExistingDomain }).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SslConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SslConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfigurationResponse)(nil)).Elem()
}

func (o SslConfigurationResponsePtrOutput) ToSslConfigurationResponsePtrOutput() SslConfigurationResponsePtrOutput {
	return o
}

func (o SslConfigurationResponsePtrOutput) ToSslConfigurationResponsePtrOutputWithContext(ctx context.Context) SslConfigurationResponsePtrOutput {
	return o
}

func (o SslConfigurationResponsePtrOutput) Elem() SslConfigurationResponseOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) SslConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SslConfigurationResponse
		return ret
	}).(SslConfigurationResponseOutput)
}

// Cert data
func (o SslConfigurationResponsePtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationResponsePtrOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LeafDomainLabel
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationResponsePtrOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingDomain
	}).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettings struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettings
func (val *StackEnsembleSettings) Defaults() *StackEnsembleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// StackEnsembleSettingsInput is an input type that accepts StackEnsembleSettingsArgs and StackEnsembleSettingsOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsInput` via:
//
//	StackEnsembleSettingsArgs{...}
type StackEnsembleSettingsInput interface {
	pulumi.Input

	ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput
	ToStackEnsembleSettingsOutputWithContext(context.Context) StackEnsembleSettingsOutput
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsArgs struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs pulumi.Input `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage pulumi.Float64PtrInput `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType pulumi.StringPtrInput `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsArgs
func (val *StackEnsembleSettingsArgs) Defaults() *StackEnsembleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		tmp.StackMetaLearnerTrainPercentage = pulumi.Float64Ptr(0.2)
	}
	if tmp.StackMetaLearnerType == nil {
		tmp.StackMetaLearnerType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (StackEnsembleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return i.ToStackEnsembleSettingsOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput)
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput).ToStackEnsembleSettingsPtrOutputWithContext(ctx)
}

// StackEnsembleSettingsPtrInput is an input type that accepts StackEnsembleSettingsArgs, StackEnsembleSettingsPtr and StackEnsembleSettingsPtrOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsPtrInput` via:
//
//	        StackEnsembleSettingsArgs{...}
//
//	or:
//
//	        nil
type StackEnsembleSettingsPtrInput interface {
	pulumi.Input

	ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput
	ToStackEnsembleSettingsPtrOutputWithContext(context.Context) StackEnsembleSettingsPtrOutput
}

type stackEnsembleSettingsPtrType StackEnsembleSettingsArgs

func StackEnsembleSettingsPtr(v *StackEnsembleSettingsArgs) StackEnsembleSettingsPtrInput {
	return (*stackEnsembleSettingsPtrType)(v)
}

func (*stackEnsembleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackEnsembleSettings) *StackEnsembleSettings {
		return &v
	}).(StackEnsembleSettingsPtrOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettings) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsPtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) Elem() StackEnsembleSettingsOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) StackEnsembleSettings {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettings
		return ret
	}).(StackEnsembleSettingsOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponse struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsResponse
func (val *StackEnsembleSettingsResponse) Defaults() *StackEnsembleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponseOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutput() StackEnsembleSettingsResponseOutput {
	return o
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutputWithContext(ctx context.Context) StackEnsembleSettingsResponseOutput {
	return o
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutput() StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutputWithContext(ctx context.Context) StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) Elem() StackEnsembleSettingsResponseOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) StackEnsembleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettingsResponse
		return ret
	}).(StackEnsembleSettingsResponseOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Active message associated with project
type StatusMessageResponse struct {
	// Service-defined message code.
	Code string `pulumi:"code"`
	// Time in UTC at which the message was created.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Severity level of message.
	Level string `pulumi:"level"`
	// A human-readable representation of the message code.
	Message string `pulumi:"message"`
}

// Active message associated with project
type StatusMessageResponseOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutput() StatusMessageResponseOutput {
	return o
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutputWithContext(ctx context.Context) StatusMessageResponseOutput {
	return o
}

// Service-defined message code.
func (o StatusMessageResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Time in UTC at which the message was created.
func (o StatusMessageResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Severity level of message.
func (o StatusMessageResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Level }).(pulumi.StringOutput)
}

// A human-readable representation of the message code.
func (o StatusMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutput() StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutputWithContext(ctx context.Context) StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) Index(i pulumi.IntInput) StatusMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusMessageResponse {
		return vs[0].([]StatusMessageResponse)[vs[1].(int)]
	}).(StatusMessageResponseOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetails struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccount `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccount `pulumi:"userCreatedStorageAccount"`
}

// StorageAccountDetailsInput is an input type that accepts StorageAccountDetailsArgs and StorageAccountDetailsOutput values.
// You can construct a concrete instance of `StorageAccountDetailsInput` via:
//
//	StorageAccountDetailsArgs{...}
type StorageAccountDetailsInput interface {
	pulumi.Input

	ToStorageAccountDetailsOutput() StorageAccountDetailsOutput
	ToStorageAccountDetailsOutputWithContext(context.Context) StorageAccountDetailsOutput
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsArgs struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount SystemCreatedStorageAccountPtrInput `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount UserCreatedStorageAccountPtrInput `pulumi:"userCreatedStorageAccount"`
}

func (StorageAccountDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return i.ToStorageAccountDetailsOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsOutput)
}

// StorageAccountDetailsArrayInput is an input type that accepts StorageAccountDetailsArray and StorageAccountDetailsArrayOutput values.
// You can construct a concrete instance of `StorageAccountDetailsArrayInput` via:
//
//	StorageAccountDetailsArray{ StorageAccountDetailsArgs{...} }
type StorageAccountDetailsArrayInput interface {
	pulumi.Input

	ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput
	ToStorageAccountDetailsArrayOutputWithContext(context.Context) StorageAccountDetailsArrayOutput
}

type StorageAccountDetailsArray []StorageAccountDetailsInput

func (StorageAccountDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return i.ToStorageAccountDetailsArrayOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsArrayOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return o
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *SystemCreatedStorageAccount { return v.SystemCreatedStorageAccount }).(SystemCreatedStorageAccountPtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsOutput) UserCreatedStorageAccount() UserCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *UserCreatedStorageAccount { return v.UserCreatedStorageAccount }).(UserCreatedStorageAccountPtrOutput)
}

type StorageAccountDetailsArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetails {
		return vs[0].([]StorageAccountDetails)[vs[1].(int)]
	}).(StorageAccountDetailsOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponse struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccountResponse `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccountResponse `pulumi:"userCreatedStorageAccount"`
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutput() StorageAccountDetailsResponseOutput {
	return o
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutputWithContext(ctx context.Context) StorageAccountDetailsResponseOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *SystemCreatedStorageAccountResponse {
		return v.SystemCreatedStorageAccount
	}).(SystemCreatedStorageAccountResponsePtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) UserCreatedStorageAccount() UserCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *UserCreatedStorageAccountResponse {
		return v.UserCreatedStorageAccount
	}).(UserCreatedStorageAccountResponsePtrOutput)
}

type StorageAccountDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutput() StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutputWithContext(ctx context.Context) StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetailsResponse {
		return vs[0].([]StorageAccountDetailsResponse)[vs[1].(int)]
	}).(StorageAccountDetailsResponseOutput)
}

// Sweep job definition.
type SweepJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimits `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective Objective `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponent `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJob
func (val *SweepJob) Defaults() *SweepJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// SweepJobInput is an input type that accepts SweepJobArgs and SweepJobOutput values.
// You can construct a concrete instance of `SweepJobInput` via:
//
//	SweepJobArgs{...}
type SweepJobInput interface {
	pulumi.Input

	ToSweepJobOutput() SweepJobOutput
	ToSweepJobOutputWithContext(context.Context) SweepJobOutput
}

// Sweep job definition.
type SweepJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Sweep Job limit.
	Limits SweepJobLimitsPtrInput `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective ObjectiveInput `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm pulumi.Input `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace pulumi.Input `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentInput `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobArgs
func (val *SweepJobArgs) Defaults() *SweepJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (SweepJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (i SweepJobArgs) ToSweepJobOutput() SweepJobOutput {
	return i.ToSweepJobOutputWithContext(context.Background())
}

func (i SweepJobArgs) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobOutput)
}

// Sweep job definition.
type SweepJobOutput struct{ *pulumi.OutputState }

func (SweepJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (o SweepJobOutput) ToSweepJobOutput() SweepJobOutput {
	return o
}

func (o SweepJobOutput) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o SweepJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SweepJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobOutput) Limits() SweepJobLimitsPtrOutput {
	return o.ApplyT(func(v SweepJob) *SweepJobLimits { return v.Limits }).(SweepJobLimitsPtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobOutput) Objective() ObjectiveOutput {
	return o.ApplyT(func(v SweepJob) Objective { return v.Objective }).(ObjectiveOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobOutput) Trial() TrialComponentOutput {
	return o.ApplyT(func(v SweepJob) TrialComponent { return v.Trial }).(TrialComponentOutput)
}

// Sweep Job limit class.
type SweepJobLimits struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// SweepJobLimitsInput is an input type that accepts SweepJobLimitsArgs and SweepJobLimitsOutput values.
// You can construct a concrete instance of `SweepJobLimitsInput` via:
//
//	SweepJobLimitsArgs{...}
type SweepJobLimitsInput interface {
	pulumi.Input

	ToSweepJobLimitsOutput() SweepJobLimitsOutput
	ToSweepJobLimitsOutputWithContext(context.Context) SweepJobLimitsOutput
}

// Sweep Job limit class.
type SweepJobLimitsArgs struct {
	// Expected value is 'Sweep'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials pulumi.IntPtrInput `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

func (SweepJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return i.ToSweepJobLimitsOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput)
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput).ToSweepJobLimitsPtrOutputWithContext(ctx)
}

// SweepJobLimitsPtrInput is an input type that accepts SweepJobLimitsArgs, SweepJobLimitsPtr and SweepJobLimitsPtrOutput values.
// You can construct a concrete instance of `SweepJobLimitsPtrInput` via:
//
//	        SweepJobLimitsArgs{...}
//
//	or:
//
//	        nil
type SweepJobLimitsPtrInput interface {
	pulumi.Input

	ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput
	ToSweepJobLimitsPtrOutputWithContext(context.Context) SweepJobLimitsPtrOutput
}

type sweepJobLimitsPtrType SweepJobLimitsArgs

func SweepJobLimitsPtr(v *SweepJobLimitsArgs) SweepJobLimitsPtrInput {
	return (*sweepJobLimitsPtrType)(v)
}

func (*sweepJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SweepJobLimits) *SweepJobLimits {
		return &v
	}).(SweepJobLimitsPtrOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) Elem() SweepJobLimitsOutput {
	return o.ApplyT(func(v *SweepJobLimits) SweepJobLimits {
		if v != nil {
			return *v
		}
		var ret SweepJobLimits
		return ret
	}).(SweepJobLimitsOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsPtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsResponse struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Sweep Job limit class.
type SweepJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutput() SweepJobLimitsResponseOutput {
	return o
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutputWithContext(ctx context.Context) SweepJobLimitsResponseOutput {
	return o
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponseOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutput() SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutputWithContext(ctx context.Context) SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) Elem() SweepJobLimitsResponseOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) SweepJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret SweepJobLimitsResponse
		return ret
	}).(SweepJobLimitsResponseOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponsePtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep job definition.
type SweepJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimitsResponse `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective ObjectiveResponse `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentResponse `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobResponse
func (val *SweepJobResponse) Defaults() *SweepJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// Sweep job definition.
type SweepJobResponseOutput struct{ *pulumi.OutputState }

func (SweepJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobResponse)(nil)).Elem()
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutput() SweepJobResponseOutput {
	return o
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutputWithContext(ctx context.Context) SweepJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o SweepJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SweepJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobResponseOutput) Limits() SweepJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *SweepJobLimitsResponse { return v.Limits }).(SweepJobLimitsResponsePtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobResponseOutput) Objective() ObjectiveResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) ObjectiveResponse { return v.Objective }).(ObjectiveResponseOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobResponseOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobResponseOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o SweepJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobResponseOutput) Trial() TrialComponentResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) TrialComponentResponse { return v.Trial }).(TrialComponentResponseOutput)
}

// A SynapseSpark compute.
type SynapseSpark struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                   `pulumi:"disableLocalAuth"`
	Properties       *SynapseSparkProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// SynapseSparkInput is an input type that accepts SynapseSparkArgs and SynapseSparkOutput values.
// You can construct a concrete instance of `SynapseSparkInput` via:
//
//	SynapseSparkArgs{...}
type SynapseSparkInput interface {
	pulumi.Input

	ToSynapseSparkOutput() SynapseSparkOutput
	ToSynapseSparkOutputWithContext(context.Context) SynapseSparkOutput
}

// A SynapseSpark compute.
type SynapseSparkArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput            `pulumi:"disableLocalAuth"`
	Properties       SynapseSparkPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (SynapseSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSpark)(nil)).Elem()
}

func (i SynapseSparkArgs) ToSynapseSparkOutput() SynapseSparkOutput {
	return i.ToSynapseSparkOutputWithContext(context.Background())
}

func (i SynapseSparkArgs) ToSynapseSparkOutputWithContext(ctx context.Context) SynapseSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkOutput)
}

func (i SynapseSparkArgs) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return i.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (i SynapseSparkArgs) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkOutput).ToSynapseSparkPtrOutputWithContext(ctx)
}

// SynapseSparkPtrInput is an input type that accepts SynapseSparkArgs, SynapseSparkPtr and SynapseSparkPtrOutput values.
// You can construct a concrete instance of `SynapseSparkPtrInput` via:
//
//	        SynapseSparkArgs{...}
//
//	or:
//
//	        nil
type SynapseSparkPtrInput interface {
	pulumi.Input

	ToSynapseSparkPtrOutput() SynapseSparkPtrOutput
	ToSynapseSparkPtrOutputWithContext(context.Context) SynapseSparkPtrOutput
}

type synapseSparkPtrType SynapseSparkArgs

func SynapseSparkPtr(v *SynapseSparkArgs) SynapseSparkPtrInput {
	return (*synapseSparkPtrType)(v)
}

func (*synapseSparkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSpark)(nil)).Elem()
}

func (i *synapseSparkPtrType) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return i.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (i *synapseSparkPtrType) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPtrOutput)
}

// A SynapseSpark compute.
type SynapseSparkOutput struct{ *pulumi.OutputState }

func (SynapseSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSpark)(nil)).Elem()
}

func (o SynapseSparkOutput) ToSynapseSparkOutput() SynapseSparkOutput {
	return o
}

func (o SynapseSparkOutput) ToSynapseSparkOutputWithContext(ctx context.Context) SynapseSparkOutput {
	return o
}

func (o SynapseSparkOutput) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return o.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (o SynapseSparkOutput) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SynapseSpark) *SynapseSpark {
		return &v
	}).(SynapseSparkPtrOutput)
}

// Location for the underlying compute
func (o SynapseSparkOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSpark) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

func (o SynapseSparkOutput) Properties() SynapseSparkPropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *SynapseSparkProperties { return v.Properties }).(SynapseSparkPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type SynapseSparkPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSpark)(nil)).Elem()
}

func (o SynapseSparkPtrOutput) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return o
}

func (o SynapseSparkPtrOutput) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return o
}

func (o SynapseSparkPtrOutput) Elem() SynapseSparkOutput {
	return o.ApplyT(func(v *SynapseSpark) SynapseSpark {
		if v != nil {
			return *v
		}
		var ret SynapseSpark
		return ret
	}).(SynapseSparkOutput)
}

// Location for the underlying compute
func (o SynapseSparkPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

func (o SynapseSparkPtrOutput) Properties() SynapseSparkPropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *SynapseSparkProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(SynapseSparkPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type SynapseSparkProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPauseProperties `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScaleProperties `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

// SynapseSparkPropertiesInput is an input type that accepts SynapseSparkPropertiesArgs and SynapseSparkPropertiesOutput values.
// You can construct a concrete instance of `SynapseSparkPropertiesInput` via:
//
//	SynapseSparkPropertiesArgs{...}
type SynapseSparkPropertiesInput interface {
	pulumi.Input

	ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput
	ToSynapseSparkPropertiesOutputWithContext(context.Context) SynapseSparkPropertiesOutput
}

type SynapseSparkPropertiesArgs struct {
	// Auto pause properties.
	AutoPauseProperties AutoPausePropertiesPtrInput `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties AutoScalePropertiesPtrInput `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// Node size.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily pulumi.StringPtrInput `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName pulumi.StringPtrInput `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion pulumi.StringPtrInput `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringPtrInput `pulumi:"workspaceName"`
}

func (SynapseSparkPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkProperties)(nil)).Elem()
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput {
	return i.ToSynapseSparkPropertiesOutputWithContext(context.Background())
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesOutputWithContext(ctx context.Context) SynapseSparkPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesOutput)
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return i.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesOutput).ToSynapseSparkPropertiesPtrOutputWithContext(ctx)
}

// SynapseSparkPropertiesPtrInput is an input type that accepts SynapseSparkPropertiesArgs, SynapseSparkPropertiesPtr and SynapseSparkPropertiesPtrOutput values.
// You can construct a concrete instance of `SynapseSparkPropertiesPtrInput` via:
//
//	        SynapseSparkPropertiesArgs{...}
//
//	or:
//
//	        nil
type SynapseSparkPropertiesPtrInput interface {
	pulumi.Input

	ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput
	ToSynapseSparkPropertiesPtrOutputWithContext(context.Context) SynapseSparkPropertiesPtrOutput
}

type synapseSparkPropertiesPtrType SynapseSparkPropertiesArgs

func SynapseSparkPropertiesPtr(v *SynapseSparkPropertiesArgs) SynapseSparkPropertiesPtrInput {
	return (*synapseSparkPropertiesPtrType)(v)
}

func (*synapseSparkPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkProperties)(nil)).Elem()
}

func (i *synapseSparkPropertiesPtrType) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return i.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i *synapseSparkPropertiesPtrType) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesPtrOutput)
}

type SynapseSparkPropertiesOutput struct{ *pulumi.OutputState }

func (SynapseSparkPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkProperties)(nil)).Elem()
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput {
	return o
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesOutputWithContext(ctx context.Context) SynapseSparkPropertiesOutput {
	return o
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return o.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SynapseSparkProperties) *SynapseSparkProperties {
		return &v
	}).(SynapseSparkPropertiesPtrOutput)
}

// Auto pause properties.
func (o SynapseSparkPropertiesOutput) AutoPauseProperties() AutoPausePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *AutoPauseProperties { return v.AutoPauseProperties }).(AutoPausePropertiesPtrOutput)
}

// Auto scale properties.
func (o SynapseSparkPropertiesOutput) AutoScaleProperties() AutoScalePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *AutoScaleProperties { return v.AutoScaleProperties }).(AutoScalePropertiesPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkPropertiesOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkPropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkPropertiesOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.NodeSizeFamily }).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkPropertiesOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.PoolName }).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkPropertiesOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkPropertiesOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.SparkVersion }).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkPropertiesOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkPropertiesOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.WorkspaceName }).(pulumi.StringPtrOutput)
}

type SynapseSparkPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkProperties)(nil)).Elem()
}

func (o SynapseSparkPropertiesPtrOutput) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return o
}

func (o SynapseSparkPropertiesPtrOutput) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return o
}

func (o SynapseSparkPropertiesPtrOutput) Elem() SynapseSparkPropertiesOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) SynapseSparkProperties {
		if v != nil {
			return *v
		}
		var ret SynapseSparkProperties
		return ret
	}).(SynapseSparkPropertiesOutput)
}

// Auto pause properties.
func (o SynapseSparkPropertiesPtrOutput) AutoPauseProperties() AutoPausePropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *AutoPauseProperties {
		if v == nil {
			return nil
		}
		return v.AutoPauseProperties
	}).(AutoPausePropertiesPtrOutput)
}

// Auto scale properties.
func (o SynapseSparkPropertiesPtrOutput) AutoScaleProperties() AutoScalePropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *AutoScaleProperties {
		if v == nil {
			return nil
		}
		return v.AutoScaleProperties
	}).(AutoScalePropertiesPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkPropertiesPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkPropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkPropertiesPtrOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSizeFamily
	}).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkPropertiesPtrOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.PoolName
	}).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkPropertiesPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkPropertiesPtrOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.SparkVersion
	}).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkPropertiesPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkPropertiesPtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

// A SynapseSpark compute.
type SynapseSparkResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                          `pulumi:"modifiedOn"`
	Properties *SynapseSparkResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A SynapseSpark compute.
type SynapseSparkResponseOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkResponse)(nil)).Elem()
}

func (o SynapseSparkResponseOutput) ToSynapseSparkResponseOutput() SynapseSparkResponseOutput {
	return o
}

func (o SynapseSparkResponseOutput) ToSynapseSparkResponseOutputWithContext(ctx context.Context) SynapseSparkResponseOutput {
	return o
}

// Location for the underlying compute
func (o SynapseSparkResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o SynapseSparkResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o SynapseSparkResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v SynapseSparkResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o SynapseSparkResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o SynapseSparkResponseOutput) Properties() SynapseSparkResponsePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *SynapseSparkResponseProperties { return v.Properties }).(SynapseSparkResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o SynapseSparkResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v SynapseSparkResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o SynapseSparkResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type SynapseSparkResponseProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPausePropertiesResponse `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScalePropertiesResponse `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type SynapseSparkResponsePropertiesOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkResponseProperties)(nil)).Elem()
}

func (o SynapseSparkResponsePropertiesOutput) ToSynapseSparkResponsePropertiesOutput() SynapseSparkResponsePropertiesOutput {
	return o
}

func (o SynapseSparkResponsePropertiesOutput) ToSynapseSparkResponsePropertiesOutputWithContext(ctx context.Context) SynapseSparkResponsePropertiesOutput {
	return o
}

// Auto pause properties.
func (o SynapseSparkResponsePropertiesOutput) AutoPauseProperties() AutoPausePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *AutoPausePropertiesResponse { return v.AutoPauseProperties }).(AutoPausePropertiesResponsePtrOutput)
}

// Auto scale properties.
func (o SynapseSparkResponsePropertiesOutput) AutoScaleProperties() AutoScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *AutoScalePropertiesResponse { return v.AutoScaleProperties }).(AutoScalePropertiesResponsePtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkResponsePropertiesOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkResponsePropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkResponsePropertiesOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.NodeSizeFamily }).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkResponsePropertiesOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.PoolName }).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkResponsePropertiesOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkResponsePropertiesOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.SparkVersion }).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkResponsePropertiesOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkResponsePropertiesOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.WorkspaceName }).(pulumi.StringPtrOutput)
}

type SynapseSparkResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkResponseProperties)(nil)).Elem()
}

func (o SynapseSparkResponsePropertiesPtrOutput) ToSynapseSparkResponsePropertiesPtrOutput() SynapseSparkResponsePropertiesPtrOutput {
	return o
}

func (o SynapseSparkResponsePropertiesPtrOutput) ToSynapseSparkResponsePropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkResponsePropertiesPtrOutput {
	return o
}

func (o SynapseSparkResponsePropertiesPtrOutput) Elem() SynapseSparkResponsePropertiesOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) SynapseSparkResponseProperties {
		if v != nil {
			return *v
		}
		var ret SynapseSparkResponseProperties
		return ret
	}).(SynapseSparkResponsePropertiesOutput)
}

// Auto pause properties.
func (o SynapseSparkResponsePropertiesPtrOutput) AutoPauseProperties() AutoPausePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *AutoPausePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AutoPauseProperties
	}).(AutoPausePropertiesResponsePtrOutput)
}

// Auto scale properties.
func (o SynapseSparkResponsePropertiesPtrOutput) AutoScaleProperties() AutoScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *AutoScalePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AutoScaleProperties
	}).(AutoScalePropertiesResponsePtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSizeFamily
	}).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkResponsePropertiesPtrOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.PoolName
	}).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkResponsePropertiesPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkResponsePropertiesPtrOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SparkVersion
	}).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkResponsePropertiesPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkResponsePropertiesPtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

type SystemCreatedAcrAccount struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
}

// SystemCreatedAcrAccountInput is an input type that accepts SystemCreatedAcrAccountArgs and SystemCreatedAcrAccountOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountInput` via:
//
//	SystemCreatedAcrAccountArgs{...}
type SystemCreatedAcrAccountInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput
	ToSystemCreatedAcrAccountOutputWithContext(context.Context) SystemCreatedAcrAccountOutput
}

type SystemCreatedAcrAccountArgs struct {
	// Name of the ACR account
	AcrAccountName pulumi.StringPtrInput `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku pulumi.StringPtrInput `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
}

func (SystemCreatedAcrAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return i.ToSystemCreatedAcrAccountOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput)
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput).ToSystemCreatedAcrAccountPtrOutputWithContext(ctx)
}

// SystemCreatedAcrAccountPtrInput is an input type that accepts SystemCreatedAcrAccountArgs, SystemCreatedAcrAccountPtr and SystemCreatedAcrAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountPtrInput` via:
//
//	        SystemCreatedAcrAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedAcrAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput
	ToSystemCreatedAcrAccountPtrOutputWithContext(context.Context) SystemCreatedAcrAccountPtrOutput
}

type systemCreatedAcrAccountPtrType SystemCreatedAcrAccountArgs

func SystemCreatedAcrAccountPtr(v *SystemCreatedAcrAccountArgs) SystemCreatedAcrAccountPtrInput {
	return (*systemCreatedAcrAccountPtrType)(v)
}

func (*systemCreatedAcrAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountPtrOutput)
}

type SystemCreatedAcrAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedAcrAccount) *SystemCreatedAcrAccount {
		return &v
	}).(SystemCreatedAcrAccountPtrOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) Elem() SystemCreatedAcrAccountOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) SystemCreatedAcrAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccount
		return ret
	}).(SystemCreatedAcrAccountOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountResponse struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
}

type SystemCreatedAcrAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutput() SystemCreatedAcrAccountResponseOutput {
	return o
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponseOutput {
	return o
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedAcrAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutput() SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) Elem() SystemCreatedAcrAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) SystemCreatedAcrAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccountResponse
		return ret
	}).(SystemCreatedAcrAccountResponseOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedStorageAccount struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// SystemCreatedStorageAccountInput is an input type that accepts SystemCreatedStorageAccountArgs and SystemCreatedStorageAccountOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountInput` via:
//
//	SystemCreatedStorageAccountArgs{...}
type SystemCreatedStorageAccountInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput
	ToSystemCreatedStorageAccountOutputWithContext(context.Context) SystemCreatedStorageAccountOutput
}

type SystemCreatedStorageAccountArgs struct {
	// Public blob access allowed
	AllowBlobPublicAccess pulumi.BoolPtrInput `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled pulumi.BoolPtrInput `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (SystemCreatedStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return i.ToSystemCreatedStorageAccountOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput)
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput).ToSystemCreatedStorageAccountPtrOutputWithContext(ctx)
}

// SystemCreatedStorageAccountPtrInput is an input type that accepts SystemCreatedStorageAccountArgs, SystemCreatedStorageAccountPtr and SystemCreatedStorageAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountPtrInput` via:
//
//	        SystemCreatedStorageAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedStorageAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput
	ToSystemCreatedStorageAccountPtrOutputWithContext(context.Context) SystemCreatedStorageAccountPtrOutput
}

type systemCreatedStorageAccountPtrType SystemCreatedStorageAccountArgs

func SystemCreatedStorageAccountPtr(v *SystemCreatedStorageAccountArgs) SystemCreatedStorageAccountPtrInput {
	return (*systemCreatedStorageAccountPtrType)(v)
}

func (*systemCreatedStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountPtrOutput)
}

type SystemCreatedStorageAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedStorageAccount) *SystemCreatedStorageAccount {
		return &v
	}).(SystemCreatedStorageAccountPtrOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) Elem() SystemCreatedStorageAccountOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) SystemCreatedStorageAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccount
		return ret
	}).(SystemCreatedStorageAccountOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountPtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponse struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

type SystemCreatedStorageAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutput() SystemCreatedStorageAccountResponseOutput {
	return o
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponseOutput {
	return o
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponseOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutput() SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) Elem() SystemCreatedStorageAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) SystemCreatedStorageAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccountResponse
		return ret
	}).(SystemCreatedStorageAccountResponseOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponsePtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// A system service running on a compute.
type SystemServiceResponse struct {
	// Public IP address
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// The type of this system service.
	SystemServiceType string `pulumi:"systemServiceType"`
	// The version for this type.
	Version string `pulumi:"version"`
}

// A system service running on a compute.
type SystemServiceResponseOutput struct{ *pulumi.OutputState }

func (SystemServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemServiceResponse)(nil)).Elem()
}

func (o SystemServiceResponseOutput) ToSystemServiceResponseOutput() SystemServiceResponseOutput {
	return o
}

func (o SystemServiceResponseOutput) ToSystemServiceResponseOutputWithContext(ctx context.Context) SystemServiceResponseOutput {
	return o
}

// Public IP address
func (o SystemServiceResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// The type of this system service.
func (o SystemServiceResponseOutput) SystemServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.SystemServiceType }).(pulumi.StringOutput)
}

// The version for this type.
func (o SystemServiceResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.Version }).(pulumi.StringOutput)
}

type SystemServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (SystemServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemServiceResponse)(nil)).Elem()
}

func (o SystemServiceResponseArrayOutput) ToSystemServiceResponseArrayOutput() SystemServiceResponseArrayOutput {
	return o
}

func (o SystemServiceResponseArrayOutput) ToSystemServiceResponseArrayOutputWithContext(ctx context.Context) SystemServiceResponseArrayOutput {
	return o
}

func (o SystemServiceResponseArrayOutput) Index(i pulumi.IntInput) SystemServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemServiceResponse {
		return vs[0].([]SystemServiceResponse)[vs[1].(int)]
	}).(SystemServiceResponseOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettings struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformer `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettings
func (val *TableVerticalFeaturizationSettings) Defaults() *TableVerticalFeaturizationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TableVerticalFeaturizationSettingsInput is an input type that accepts TableVerticalFeaturizationSettingsArgs and TableVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsInput` via:
//
//	TableVerticalFeaturizationSettingsArgs{...}
type TableVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput
	ToTableVerticalFeaturizationSettingsOutputWithContext(context.Context) TableVerticalFeaturizationSettingsOutput
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsArgs struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers pulumi.StringArrayInput `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes pulumi.StringMapInput `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization pulumi.BoolPtrInput `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams ColumnTransformerArrayMapInput `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsArgs
func (val *TableVerticalFeaturizationSettingsArgs) Defaults() *TableVerticalFeaturizationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		tmp.EnableDnnFeaturization = pulumi.BoolPtr(false)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (TableVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return i.ToTableVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput)
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput).ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// TableVerticalFeaturizationSettingsPtrInput is an input type that accepts TableVerticalFeaturizationSettingsArgs, TableVerticalFeaturizationSettingsPtr and TableVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsPtrInput` via:
//
//	        TableVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput
	ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) TableVerticalFeaturizationSettingsPtrOutput
}

type tableVerticalFeaturizationSettingsPtrType TableVerticalFeaturizationSettingsArgs

func TableVerticalFeaturizationSettingsPtr(v *TableVerticalFeaturizationSettingsArgs) TableVerticalFeaturizationSettingsPtrInput {
	return (*tableVerticalFeaturizationSettingsPtrType)(v)
}

func (*tableVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalFeaturizationSettings) *TableVerticalFeaturizationSettings {
		return &v
	}).(TableVerticalFeaturizationSettingsPtrOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string][]ColumnTransformer { return v.TransformerParams }).(ColumnTransformerArrayMapOutput)
}

type TableVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) Elem() TableVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) TableVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettings
		return ret
	}).(TableVerticalFeaturizationSettingsOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsPtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsPtrOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string][]ColumnTransformer {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerArrayMapOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponse struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformerResponse `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsResponse
func (val *TableVerticalFeaturizationSettingsResponse) Defaults() *TableVerticalFeaturizationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutput() TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponseOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponseOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

type TableVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutput() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Elem() TableVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) TableVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettingsResponse
		return ret
	}).(TableVerticalFeaturizationSettingsResponseOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

// Job execution constraints.
type TableVerticalLimitSettings struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettings
func (val *TableVerticalLimitSettings) Defaults() *TableVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// TableVerticalLimitSettingsInput is an input type that accepts TableVerticalLimitSettingsArgs and TableVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsInput` via:
//
//	TableVerticalLimitSettingsArgs{...}
type TableVerticalLimitSettingsInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput
	ToTableVerticalLimitSettingsOutputWithContext(context.Context) TableVerticalLimitSettingsOutput
}

// Job execution constraints.
type TableVerticalLimitSettingsArgs struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination pulumi.BoolPtrInput `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore pulumi.Float64PtrInput `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial pulumi.IntPtrInput `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsArgs
func (val *TableVerticalLimitSettingsArgs) Defaults() *TableVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		tmp.EnableEarlyTermination = pulumi.BoolPtr(true)
	}
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxCoresPerTrial == nil {
		tmp.MaxCoresPerTrial = pulumi.IntPtr(-1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1000)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT6H")
	}
	if tmp.TrialTimeout == nil {
		tmp.TrialTimeout = pulumi.StringPtr("PT30M")
	}
	return &tmp
}
func (TableVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return i.ToTableVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput)
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput).ToTableVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// TableVerticalLimitSettingsPtrInput is an input type that accepts TableVerticalLimitSettingsArgs, TableVerticalLimitSettingsPtr and TableVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsPtrInput` via:
//
//	        TableVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput
	ToTableVerticalLimitSettingsPtrOutputWithContext(context.Context) TableVerticalLimitSettingsPtrOutput
}

type tableVerticalLimitSettingsPtrType TableVerticalLimitSettingsArgs

func TableVerticalLimitSettingsPtr(v *TableVerticalLimitSettingsArgs) TableVerticalLimitSettingsPtrInput {
	return (*tableVerticalLimitSettingsPtrType)(v)
}

func (*tableVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalLimitSettings) *TableVerticalLimitSettings {
		return &v
	}).(TableVerticalLimitSettingsPtrOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) Elem() TableVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) TableVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettings
		return ret
	}).(TableVerticalLimitSettingsOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsPtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsPtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsPtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsResponse struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsResponse
func (val *TableVerticalLimitSettingsResponse) Defaults() *TableVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// Job execution constraints.
type TableVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutput() TableVerticalLimitSettingsResponseOutput {
	return o
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponseOutput {
	return o
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponseOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponseOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponseOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutput() TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) Elem() TableVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) TableVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettingsResponse
		return ret
	}).(TableVerticalLimitSettingsResponseOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponsePtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

type TargetUtilizationScaleSettings struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettings
func (val *TargetUtilizationScaleSettings) Defaults() *TargetUtilizationScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

// TargetUtilizationScaleSettingsInput is an input type that accepts TargetUtilizationScaleSettingsArgs and TargetUtilizationScaleSettingsOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsInput` via:
//
//	TargetUtilizationScaleSettingsArgs{...}
type TargetUtilizationScaleSettingsInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput
	ToTargetUtilizationScaleSettingsOutputWithContext(context.Context) TargetUtilizationScaleSettingsOutput
}

type TargetUtilizationScaleSettingsArgs struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances pulumi.IntPtrInput `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances pulumi.IntPtrInput `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval pulumi.StringPtrInput `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsArgs
func (val *TargetUtilizationScaleSettingsArgs) Defaults() *TargetUtilizationScaleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		tmp.MaxInstances = pulumi.IntPtr(1)
	}
	if tmp.MinInstances == nil {
		tmp.MinInstances = pulumi.IntPtr(1)
	}
	if tmp.PollingInterval == nil {
		tmp.PollingInterval = pulumi.StringPtr("PT1S")
	}
	if tmp.TargetUtilizationPercentage == nil {
		tmp.TargetUtilizationPercentage = pulumi.IntPtr(70)
	}
	return &tmp
}
func (TargetUtilizationScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return i.ToTargetUtilizationScaleSettingsOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput)
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput).ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx)
}

// TargetUtilizationScaleSettingsPtrInput is an input type that accepts TargetUtilizationScaleSettingsArgs, TargetUtilizationScaleSettingsPtr and TargetUtilizationScaleSettingsPtrOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsPtrInput` via:
//
//	        TargetUtilizationScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type TargetUtilizationScaleSettingsPtrInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput
	ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Context) TargetUtilizationScaleSettingsPtrOutput
}

type targetUtilizationScaleSettingsPtrType TargetUtilizationScaleSettingsArgs

func TargetUtilizationScaleSettingsPtr(v *TargetUtilizationScaleSettingsArgs) TargetUtilizationScaleSettingsPtrInput {
	return (*targetUtilizationScaleSettingsPtrType)(v)
}

func (*targetUtilizationScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsPtrOutput)
}

type TargetUtilizationScaleSettingsOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetUtilizationScaleSettings) *TargetUtilizationScaleSettings {
		return &v
	}).(TargetUtilizationScaleSettingsPtrOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) Elem() TargetUtilizationScaleSettingsOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) TargetUtilizationScaleSettings {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettings
		return ret
	}).(TargetUtilizationScaleSettingsOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsPtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsPtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsPtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsPtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponse struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsResponse
func (val *TargetUtilizationScaleSettingsResponse) Defaults() *TargetUtilizationScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

type TargetUtilizationScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutput() TargetUtilizationScaleSettingsResponseOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponseOutput {
	return o
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponseOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponseOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponseOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponseOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutput() TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) Elem() TargetUtilizationScaleSettingsResponseOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) TargetUtilizationScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettingsResponse
		return ret
	}).(TargetUtilizationScaleSettingsResponseOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlow struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlow
func (val *TensorFlow) Defaults() *TensorFlow {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlowInput is an input type that accepts TensorFlowArgs and TensorFlowOutput values.
// You can construct a concrete instance of `TensorFlowInput` via:
//
//	TensorFlowArgs{...}
type TensorFlowInput interface {
	pulumi.Input

	ToTensorFlowOutput() TensorFlowOutput
	ToTensorFlowOutputWithContext(context.Context) TensorFlowOutput
}

// TensorFlow distribution configuration.
type TensorFlowArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowArgs
func (val *TensorFlowArgs) Defaults() *TensorFlowArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		tmp.ParameterServerCount = pulumi.IntPtr(0)
	}
	return &tmp
}
func (TensorFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (i TensorFlowArgs) ToTensorFlowOutput() TensorFlowOutput {
	return i.ToTensorFlowOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput)
}

func (i TensorFlowArgs) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput).ToTensorFlowPtrOutputWithContext(ctx)
}

// TensorFlowPtrInput is an input type that accepts TensorFlowArgs, TensorFlowPtr and TensorFlowPtrOutput values.
// You can construct a concrete instance of `TensorFlowPtrInput` via:
//
//	        TensorFlowArgs{...}
//
//	or:
//
//	        nil
type TensorFlowPtrInput interface {
	pulumi.Input

	ToTensorFlowPtrOutput() TensorFlowPtrOutput
	ToTensorFlowPtrOutputWithContext(context.Context) TensorFlowPtrOutput
}

type tensorFlowPtrType TensorFlowArgs

func TensorFlowPtr(v *TensorFlowArgs) TensorFlowPtrInput {
	return (*tensorFlowPtrType)(v)
}

func (*tensorFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowOutput struct{ *pulumi.OutputState }

func (TensorFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (o TensorFlowOutput) ToTensorFlowOutput() TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (o TensorFlowOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TensorFlow) *TensorFlow {
		return &v
	}).(TensorFlowPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlow) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowPtrOutput struct{ *pulumi.OutputState }

func (TensorFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) Elem() TensorFlowOutput {
	return o.ApplyT(func(v *TensorFlow) TensorFlow {
		if v != nil {
			return *v
		}
		var ret TensorFlow
		return ret
	}).(TensorFlowOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowPtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowResponse
func (val *TensorFlowResponse) Defaults() *TensorFlowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlow distribution configuration.
type TensorFlowResponseOutput struct{ *pulumi.OutputState }

func (TensorFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutput() TensorFlowResponseOutput {
	return o
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutputWithContext(ctx context.Context) TensorFlowResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponseOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (TensorFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutput() TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutputWithContext(ctx context.Context) TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) Elem() TensorFlowResponseOutput {
	return o.ApplyT(func(v *TensorFlowResponse) TensorFlowResponse {
		if v != nil {
			return *v
		}
		var ret TensorFlowResponse
		return ret
	}).(TensorFlowResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponsePtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassification struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassification
func (val *TextClassification) Defaults() *TextClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TextClassificationInput is an input type that accepts TextClassificationArgs and TextClassificationOutput values.
// You can construct a concrete instance of `TextClassificationInput` via:
//
//	TextClassificationArgs{...}
type TextClassificationInput interface {
	pulumi.Input

	ToTextClassificationOutput() TextClassificationOutput
	ToTextClassificationOutputWithContext(context.Context) TextClassificationOutput
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationArgs struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationArgs
func (val *TextClassificationArgs) Defaults() *TextClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}

	return &tmp
}
func (TextClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (i TextClassificationArgs) ToTextClassificationOutput() TextClassificationOutput {
	return i.ToTextClassificationOutputWithContext(context.Background())
}

func (i TextClassificationArgs) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationOutput struct{ *pulumi.OutputState }

func (TextClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (o TextClassificationOutput) ToTextClassificationOutput() TextClassificationOutput {
	return o
}

func (o TextClassificationOutput) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v TextClassification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o TextClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TextClassification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabel struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabel
func (val *TextClassificationMultilabel) Defaults() *TextClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TextClassificationMultilabelInput is an input type that accepts TextClassificationMultilabelArgs and TextClassificationMultilabelOutput values.
// You can construct a concrete instance of `TextClassificationMultilabelInput` via:
//
//	TextClassificationMultilabelArgs{...}
type TextClassificationMultilabelInput interface {
	pulumi.Input

	ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput
	ToTextClassificationMultilabelOutputWithContext(context.Context) TextClassificationMultilabelOutput
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelArgs struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelArgs
func (val *TextClassificationMultilabelArgs) Defaults() *TextClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	return &tmp
}
func (TextClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return i.ToTextClassificationMultilabelOutputWithContext(context.Background())
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationMultilabelOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return o
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationMultilabelOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationMultilabelOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o TextClassificationMultilabelOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification-Multilabel task.
	// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelResponse
func (val *TextClassificationMultilabelResponse) Defaults() *TextClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabelResponse)(nil)).Elem()
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutput() TextClassificationMultilabelResponseOutput {
	return o
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutputWithContext(ctx context.Context) TextClassificationMultilabelResponseOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification-Multilabel task.
// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
func (o TextClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationMultilabelResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationMultilabelResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o TextClassificationMultilabelResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationResponse
func (val *TextClassificationResponse) Defaults() *TextClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationResponse)(nil)).Elem()
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutput() TextClassificationResponseOutput {
	return o
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutputWithContext(ctx context.Context) TextClassificationResponseOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TextClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o TextClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

type ColumnTransformerArrayMap map[string]ColumnTransformerArrayInput

func (ColumnTransformerArrayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return i.ToColumnTransformerArrayMapOutputWithContext(context.Background())
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayMapOutput)
}

// ColumnTransformerArrayMapInput is an input type that accepts ColumnTransformerArrayMap and ColumnTransformerArrayMapOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayMapInput` via:
//
//	ColumnTransformerArrayMap{ "key": ColumnTransformerArray{ ColumnTransformerArgs{...} } }
type ColumnTransformerArrayMapInput interface {
	pulumi.Input

	ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput
	ToColumnTransformerArrayMapOutputWithContext(context.Context) ColumnTransformerArrayMapOutput
}

type ColumnTransformerArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformer {
		return vs[0].(map[string][]ColumnTransformer)[vs[1].(string)]
	}).(ColumnTransformerArrayOutput)
}

type ColumnTransformerResponseArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutput() ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerResponseArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformerResponse {
		return vs[0].(map[string][]ColumnTransformerResponse)[vs[1].(string)]
	}).(ColumnTransformerResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AKSOutput{})
	pulumi.RegisterOutputType(AKSPtrOutput{})
	pulumi.RegisterOutputType(AKSResponseOutput{})
	pulumi.RegisterOutputType(AKSSchemaPropertiesOutput{})
	pulumi.RegisterOutputType(AKSSchemaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AKSSchemaResponsePropertiesOutput{})
	pulumi.RegisterOutputType(AKSSchemaResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AccessKeyAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(AcrDetailsOutput{})
	pulumi.RegisterOutputType(AcrDetailsArrayOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseOutput{})
	pulumi.RegisterOutputType(AcrDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(ActualCapacityInfoResponseOutput{})
	pulumi.RegisterOutputType(ActualCapacityInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationPtrOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationResponseOutput{})
	pulumi.RegisterOutputType(AksNetworkingConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(AllNodesOutput{})
	pulumi.RegisterOutputType(AllNodesPtrOutput{})
	pulumi.RegisterOutputType(AllNodesResponseOutput{})
	pulumi.RegisterOutputType(AllNodesResponsePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeOutput{})
	pulumi.RegisterOutputType(AmlComputePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseOutput{})
	pulumi.RegisterOutputType(AmlComputeNodeInformationResponseArrayOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AmlComputePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AmlComputeResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenOutput{})
	pulumi.RegisterOutputType(AmlTokenPtrOutput{})
	pulumi.RegisterOutputType(AmlTokenResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(ApiKeyAuthWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ArmResourceIdOutput{})
	pulumi.RegisterOutputType(ArmResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ArmResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(AssignedUserOutput{})
	pulumi.RegisterOutputType(AssignedUserPtrOutput{})
	pulumi.RegisterOutputType(AssignedUserResponseOutput{})
	pulumi.RegisterOutputType(AssignedUserResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingPtrOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponseOutput{})
	pulumi.RegisterOutputType(AutoDeleteSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoMLJobOutput{})
	pulumi.RegisterOutputType(AutoMLJobResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoPausePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesResponseOutput{})
	pulumi.RegisterOutputType(AutoScalePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookMapOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseOutput{})
	pulumi.RegisterOutputType(AzureDevOpsWebhookResponseMapOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureMySqlSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSectionResponseOutput{})
	pulumi.RegisterOutputType(AzurePostgreSqlSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureSqlDatabaseSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureStorageSectionResponseOutput{})
	pulumi.RegisterOutputType(AzureStorageSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(BanditPolicyOutput{})
	pulumi.RegisterOutputType(BanditPolicyPtrOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponseOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchDeploymentTypeOutput{})
	pulumi.RegisterOutputType(BatchDeploymentResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointTypeOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsPtrOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(BindOptionsOutput{})
	pulumi.RegisterOutputType(BindOptionsPtrOutput{})
	pulumi.RegisterOutputType(BindOptionsResponseOutput{})
	pulumi.RegisterOutputType(BindOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(BuildContextOutput{})
	pulumi.RegisterOutputType(BuildContextPtrOutput{})
	pulumi.RegisterOutputType(BuildContextResponseOutput{})
	pulumi.RegisterOutputType(BuildContextResponsePtrOutput{})
	pulumi.RegisterOutputType(CapacityReservationGroupTypeOutput{})
	pulumi.RegisterOutputType(CapacityReservationGroupResponseOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ClassificationOutput{})
	pulumi.RegisterOutputType(ClassificationResponseOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ClassificationTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ClientCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ClientCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationOutput{})
	pulumi.RegisterOutputType(CodeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeContainerTypeOutput{})
	pulumi.RegisterOutputType(CodeContainerResponseOutput{})
	pulumi.RegisterOutputType(CodeVersionTypeOutput{})
	pulumi.RegisterOutputType(CodeVersionResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayOutput{})
	pulumi.RegisterOutputType(CommandJobOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(CommandJobResponseOutput{})
	pulumi.RegisterOutputType(ComponentContainerTypeOutput{})
	pulumi.RegisterOutputType(ComponentContainerResponseOutput{})
	pulumi.RegisterOutputType(ComponentVersionTypeOutput{})
	pulumi.RegisterOutputType(ComponentVersionResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceOutput{})
	pulumi.RegisterOutputType(ComputeInstancePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceApplicationResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceApplicationResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceConnectivityEndpointsResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceConnectivityEndpointsResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceContainerResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceContainerResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceCreatedByResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceCreatedByResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataDiskResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataDiskResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataMountResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceDataMountResponseArrayOutput{})
	pulumi.RegisterOutputType(ComputeInstanceEnvironmentInfoResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceEnvironmentInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceLastOperationResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceLastOperationResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstancePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsPtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceSshSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeInstanceVersionResponseOutput{})
	pulumi.RegisterOutputType(ComputeInstanceVersionResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesPtrOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesResponseOutput{})
	pulumi.RegisterOutputType(ComputeSchedulesResponsePtrOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleArrayOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleResponseOutput{})
	pulumi.RegisterOutputType(ComputeStartStopScheduleResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsPtrOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponseOutput{})
	pulumi.RegisterOutputType(CosmosDbSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CronOutput{})
	pulumi.RegisterOutputType(CronPtrOutput{})
	pulumi.RegisterOutputType(CronResponseOutput{})
	pulumi.RegisterOutputType(CronResponsePtrOutput{})
	pulumi.RegisterOutputType(CronTriggerOutput{})
	pulumi.RegisterOutputType(CronTriggerResponseOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomKeysResponseOutput{})
	pulumi.RegisterOutputType(CustomKeysResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomKeysWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomServiceOutput{})
	pulumi.RegisterOutputType(CustomServiceArrayOutput{})
	pulumi.RegisterOutputType(CustomServiceResponseOutput{})
	pulumi.RegisterOutputType(CustomServiceResponseArrayOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(DataContainerTypeOutput{})
	pulumi.RegisterOutputType(DataContainerResponseOutput{})
	pulumi.RegisterOutputType(DataFactoryOutput{})
	pulumi.RegisterOutputType(DataFactoryPtrOutput{})
	pulumi.RegisterOutputType(DataFactoryResponseOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsPtrOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsResponseOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaPropertiesOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaResponsePropertiesOutput{})
	pulumi.RegisterOutputType(DataLakeAnalyticsSchemaResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabricksOutput{})
	pulumi.RegisterOutputType(DatabricksPtrOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesPtrOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesResponseOutput{})
	pulumi.RegisterOutputType(DatabricksPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(DatabricksResponseOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestDataPathOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestParametersOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestPathOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestQueryOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestQueryPtrOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestRegistrationOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestTimeSeriesOutput{})
	pulumi.RegisterOutputType(DatasetCreateRequestTimeSeriesPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseOutput{})
	pulumi.RegisterOutputType(DatasetResponseDataPathOutput{})
	pulumi.RegisterOutputType(DatasetResponseDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseLatestOutput{})
	pulumi.RegisterOutputType(DatasetResponseLatestPtrOutput{})
	pulumi.RegisterOutputType(DatasetResponseSqlDataPathOutput{})
	pulumi.RegisterOutputType(DatasetResponseSqlDataPathPtrOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseOutput{})
	pulumi.RegisterOutputType(DatasetStateResponsePtrOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseDeprecatedByOutput{})
	pulumi.RegisterOutputType(DatasetStateResponseDeprecatedByPtrOutput{})
	pulumi.RegisterOutputType(DatastoreResponseOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DeploymentResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerOutput{})
	pulumi.RegisterOutputType(DockerPtrOutput{})
	pulumi.RegisterOutputType(DockerBuildOutput{})
	pulumi.RegisterOutputType(DockerBuildPtrOutput{})
	pulumi.RegisterOutputType(DockerBuildResponseOutput{})
	pulumi.RegisterOutputType(DockerBuildResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerImageOutput{})
	pulumi.RegisterOutputType(DockerImagePtrOutput{})
	pulumi.RegisterOutputType(DockerImagePlatformOutput{})
	pulumi.RegisterOutputType(DockerImagePlatformPtrOutput{})
	pulumi.RegisterOutputType(DockerImagePlatformResponseOutput{})
	pulumi.RegisterOutputType(DockerImagePlatformResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerImageResponseOutput{})
	pulumi.RegisterOutputType(DockerImageResponsePtrOutput{})
	pulumi.RegisterOutputType(DockerResponseOutput{})
	pulumi.RegisterOutputType(DockerResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesResponseOutput{})
	pulumi.RegisterOutputType(EncryptionKeyVaultPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyPtrOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponseOutput{})
	pulumi.RegisterOutputType(EncryptionPropertyResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysPtrOutput{})
	pulumi.RegisterOutputType(EndpointResponseOutput{})
	pulumi.RegisterOutputType(EndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointScheduleActionOutput{})
	pulumi.RegisterOutputType(EndpointScheduleActionResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentSpecificationVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentSpecificationVersionResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableMapOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVariableResponseMapOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseOutput{})
	pulumi.RegisterOutputType(ErrorAdditionalInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponseResponseArrayOutput{})
	pulumi.RegisterOutputType(EstimatedVMPriceResponseOutput{})
	pulumi.RegisterOutputType(EstimatedVMPriceResponseArrayOutput{})
	pulumi.RegisterOutputType(EstimatedVMPricesResponseOutput{})
	pulumi.RegisterOutputType(EstimatedVMPricesResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureResponseOutput{})
	pulumi.RegisterOutputType(FeatureResponseArrayOutput{})
	pulumi.RegisterOutputType(FeatureWindowResponseOutput{})
	pulumi.RegisterOutputType(FeatureWindowResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerOutput{})
	pulumi.RegisterOutputType(FeaturesetContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetJobResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetJobResponseArrayOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationPtrOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponseOutput{})
	pulumi.RegisterOutputType(FeaturesetSpecificationResponsePtrOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturesetVersionResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityContainerResponseOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionTypeOutput{})
	pulumi.RegisterOutputType(FeaturestoreEntityVersionResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataOutput{})
	pulumi.RegisterOutputType(FlavorDataMapOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseMapOutput{})
	pulumi.RegisterOutputType(ForecastingOutput{})
	pulumi.RegisterOutputType(ForecastingResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ForecastingTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(FqdnOutboundRuleOutput{})
	pulumi.RegisterOutputType(FqdnOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(GlusterFsSectionResponseOutput{})
	pulumi.RegisterOutputType(GlusterFsSectionResponsePtrOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(HDInsightOutput{})
	pulumi.RegisterOutputType(HDInsightPtrOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesPtrOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesResponseOutput{})
	pulumi.RegisterOutputType(HDInsightPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(HDInsightResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceOutput{})
	pulumi.RegisterOutputType(IdAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityOutput{})
	pulumi.RegisterOutputType(IdentityPtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkOutput{})
	pulumi.RegisterOutputType(IdentityForCmkPtrOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponseOutput{})
	pulumi.RegisterOutputType(IdentityForCmkResponsePtrOutput{})
	pulumi.RegisterOutputType(IdentityResponseOutput{})
	pulumi.RegisterOutputType(IdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageClassificationOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(ImageClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationResponseOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageMetadataResponseOutput{})
	pulumi.RegisterOutputType(ImageMetadataResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageResponseOutput{})
	pulumi.RegisterOutputType(ImageResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsPtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(IndexColumnOutput{})
	pulumi.RegisterOutputType(IndexColumnArrayOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseOutput{})
	pulumi.RegisterOutputType(IndexColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(InferenceEndpointTypeOutput{})
	pulumi.RegisterOutputType(InferenceEndpointResponseOutput{})
	pulumi.RegisterOutputType(InferenceGroupTypeOutput{})
	pulumi.RegisterOutputType(InferenceGroupResponseOutput{})
	pulumi.RegisterOutputType(InferencePoolTypeOutput{})
	pulumi.RegisterOutputType(InferencePoolResponseOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaMapOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResourcesOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResourcesPtrOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseMapOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseResourcesOutput{})
	pulumi.RegisterOutputType(InstanceTypeSchemaResponseResourcesPtrOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(JobResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(JobScheduleActionOutput{})
	pulumi.RegisterOutputType(JobScheduleActionResponseOutput{})
	pulumi.RegisterOutputType(JobServiceOutput{})
	pulumi.RegisterOutputType(JobServiceMapOutput{})
	pulumi.RegisterOutputType(JobServiceResponseOutput{})
	pulumi.RegisterOutputType(JobServiceResponseMapOutput{})
	pulumi.RegisterOutputType(KubernetesOutput{})
	pulumi.RegisterOutputType(KubernetesPtrOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesPtrOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesResponseOutput{})
	pulumi.RegisterOutputType(KubernetesPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(KubernetesResponseOutput{})
	pulumi.RegisterOutputType(LabelCategoryOutput{})
	pulumi.RegisterOutputType(LabelCategoryMapOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseOutput{})
	pulumi.RegisterOutputType(LabelCategoryResponseMapOutput{})
	pulumi.RegisterOutputType(LabelClassOutput{})
	pulumi.RegisterOutputType(LabelClassMapOutput{})
	pulumi.RegisterOutputType(LabelClassResponseOutput{})
	pulumi.RegisterOutputType(LabelClassResponseMapOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponseOutput{})
	pulumi.RegisterOutputType(LabelingDataConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobTypeOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobImagePropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobInstructionsResponsePtrOutput{})
	pulumi.RegisterOutputType(LabelingJobResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesPtrOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesResponseOutput{})
	pulumi.RegisterOutputType(LabelingJobTextPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedInfoResponseOutput{})
	pulumi.RegisterOutputType(LinkedInfoResponsePtrOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsPtrOutput{})
	pulumi.RegisterOutputType(LinkedServicePropsResponseOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsPtrOutput{})
	pulumi.RegisterOutputType(LinkedWorkspacePropsResponseOutput{})
	pulumi.RegisterOutputType(ListNotebookKeysResultResponseOutput{})
	pulumi.RegisterOutputType(LiteralJobInputOutput{})
	pulumi.RegisterOutputType(LiteralJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledPtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledResponseOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationDisabledResponsePtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledPtrOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledResponseOutput{})
	pulumi.RegisterOutputType(MLAssistConfigurationEnabledResponsePtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputPtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(MLTableDataOutput{})
	pulumi.RegisterOutputType(MLTableDataResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputOutput{})
	pulumi.RegisterOutputType(MLTableJobInputPtrOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(ManagedIdentityAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourcePtrOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponseOutput{})
	pulumi.RegisterOutputType(MaterializationComputeResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsPtrOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponseOutput{})
	pulumi.RegisterOutputType(MaterializationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyPtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponseOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ModelContainerTypeOutput{})
	pulumi.RegisterOutputType(ModelContainerResponseOutput{})
	pulumi.RegisterOutputType(ModelVersionTypeOutput{})
	pulumi.RegisterOutputType(ModelVersionResponseOutput{})
	pulumi.RegisterOutputType(MpiOutput{})
	pulumi.RegisterOutputType(MpiPtrOutput{})
	pulumi.RegisterOutputType(MpiResponseOutput{})
	pulumi.RegisterOutputType(MpiResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponseOutput{})
	pulumi.RegisterOutputType(NodeStateCountsResponsePtrOutput{})
	pulumi.RegisterOutputType(NoneAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(NoneAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponseOutput{})
	pulumi.RegisterOutputType(NotebookPreparationErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(NotebookResourceInfoResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingOutput{})
	pulumi.RegisterOutputType(NotificationSettingPtrOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponseOutput{})
	pulumi.RegisterOutputType(NotificationSettingResponsePtrOutput{})
	pulumi.RegisterOutputType(ObjectiveOutput{})
	pulumi.RegisterOutputType(ObjectiveResponseOutput{})
	pulumi.RegisterOutputType(OnlineEndpointTypeOutput{})
	pulumi.RegisterOutputType(OnlineEndpointResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsPtrOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PATAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(PATAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseOutput{})
	pulumi.RegisterOutputType(PasswordResponseArrayOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsPtrOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponseOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
	pulumi.RegisterOutputType(PipelineJobResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutboundRuleOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourcePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(ProbeSettingsOutput{})
	pulumi.RegisterOutputType(ProbeSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ProgressMetricsResponseOutput{})
	pulumi.RegisterOutputType(PyTorchOutput{})
	pulumi.RegisterOutputType(PyTorchPtrOutput{})
	pulumi.RegisterOutputType(PyTorchResponseOutput{})
	pulumi.RegisterOutputType(PyTorchResponsePtrOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceOutput{})
	pulumi.RegisterOutputType(RecurrencePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerPtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryTypeOutput{})
	pulumi.RegisterOutputType(RegistryListCredentialsResultResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsArrayOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryResponseOutput{})
	pulumi.RegisterOutputType(RegressionOutput{})
	pulumi.RegisterOutputType(RegressionResponseOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RequestConfigurationOutput{})
	pulumi.RegisterOutputType(RequestConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RequestConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RequestConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdOutput{})
	pulumi.RegisterOutputType(ResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RoutePtrOutput{})
	pulumi.RegisterOutputType(RouteResponseOutput{})
	pulumi.RegisterOutputType(RouteResponsePtrOutput{})
	pulumi.RegisterOutputType(SASAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(SASAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(SasDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleTypeOutput{})
	pulumi.RegisterOutputType(ScheduleBaseOutput{})
	pulumi.RegisterOutputType(ScheduleBasePtrOutput{})
	pulumi.RegisterOutputType(ScheduleBaseResponseOutput{})
	pulumi.RegisterOutputType(ScheduleBaseResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScriptReferenceOutput{})
	pulumi.RegisterOutputType(ScriptReferencePtrOutput{})
	pulumi.RegisterOutputType(ScriptReferenceResponseOutput{})
	pulumi.RegisterOutputType(ScriptReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteOutput{})
	pulumi.RegisterOutputType(ScriptsToExecutePtrOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteResponseOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteResponsePtrOutput{})
	pulumi.RegisterOutputType(SecretConfigurationOutput{})
	pulumi.RegisterOutputType(SecretConfigurationMapOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointTypeOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationPtrOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationResponseOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServerlessInferenceEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServerlessOfferOutput{})
	pulumi.RegisterOutputType(ServerlessOfferPtrOutput{})
	pulumi.RegisterOutputType(ServerlessOfferResponseOutput{})
	pulumi.RegisterOutputType(ServerlessOfferResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationPtrOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationResponseOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceTagOutboundRuleOutput{})
	pulumi.RegisterOutputType(ServiceTagOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(SetupScriptsOutput{})
	pulumi.RegisterOutputType(SetupScriptsPtrOutput{})
	pulumi.RegisterOutputType(SetupScriptsResponseOutput{})
	pulumi.RegisterOutputType(SetupScriptsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceArrayOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SslConfigurationOutput{})
	pulumi.RegisterOutputType(SslConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SslConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SslConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsPtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponseOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(SweepJobOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(SweepJobResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkOutput{})
	pulumi.RegisterOutputType(SynapseSparkPtrOutput{})
	pulumi.RegisterOutputType(SynapseSparkPropertiesOutput{})
	pulumi.RegisterOutputType(SynapseSparkPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponsePropertiesOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemServiceResponseOutput{})
	pulumi.RegisterOutputType(SystemServiceResponseArrayOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TensorFlowOutput{})
	pulumi.RegisterOutputType(TensorFlowPtrOutput{})
	pulumi.RegisterOutputType(TensorFlowResponseOutput{})
	pulumi.RegisterOutputType(TensorFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(TextClassificationOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(TextClassificationResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayMapOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayMapOutput{})
}
