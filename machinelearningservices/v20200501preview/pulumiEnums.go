// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20200501preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies dataset type.
type DatasetType string

const (
	DatasetTypeTabular = DatasetType("tabular")
	DatasetTypeFile    = DatasetType("file")
)

func (DatasetType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (e DatasetType) ToDatasetTypeOutput() DatasetTypeOutput {
	return pulumi.ToOutput(e).(DatasetTypeOutput)
}

func (e DatasetType) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatasetTypeOutput)
}

func (e DatasetType) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return e.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (e DatasetType) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return DatasetType(e).ToDatasetTypeOutputWithContext(ctx).ToDatasetTypePtrOutputWithContext(ctx)
}

func (e DatasetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatasetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatasetTypeOutput struct{ *pulumi.OutputState }

func (DatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (o DatasetTypeOutput) ToDatasetTypeOutput() DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetType) *DatasetType {
		return &v
	}).(DatasetTypePtrOutput)
}

func (o DatasetTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatasetTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatasetTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) Elem() DatasetTypeOutput {
	return o.ApplyT(func(v *DatasetType) DatasetType {
		if v != nil {
			return *v
		}
		var ret DatasetType
		return ret
	}).(DatasetTypeOutput)
}

func (o DatasetTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatasetType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatasetTypeInput is an input type that accepts values of the DatasetType enum
// A concrete instance of `DatasetTypeInput` can be one of the following:
//
//	DatasetTypeTabular
//	DatasetTypeFile
type DatasetTypeInput interface {
	pulumi.Input

	ToDatasetTypeOutput() DatasetTypeOutput
	ToDatasetTypeOutputWithContext(context.Context) DatasetTypeOutput
}

var datasetTypePtrType = reflect.TypeOf((**DatasetType)(nil)).Elem()

type DatasetTypePtrInput interface {
	pulumi.Input

	ToDatasetTypePtrOutput() DatasetTypePtrOutput
	ToDatasetTypePtrOutputWithContext(context.Context) DatasetTypePtrOutput
}

type datasetTypePtr string

func DatasetTypePtr(v string) DatasetTypePtrInput {
	return (*datasetTypePtr)(&v)
}

func (*datasetTypePtr) ElementType() reflect.Type {
	return datasetTypePtrType
}

func (in *datasetTypePtr) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return pulumi.ToOutput(in).(DatasetTypePtrOutput)
}

func (in *datasetTypePtr) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatasetTypePtrOutput)
}

// Specifies datastore type.
type DatastoreTypeArm string

const (
	DatastoreTypeArmBlob       = DatastoreTypeArm("blob")
	DatastoreTypeArmAdls       = DatastoreTypeArm("adls")
	DatastoreTypeArm_Adls_Gen2 = DatastoreTypeArm("adls-gen2")
	DatastoreTypeArmDbfs       = DatastoreTypeArm("dbfs")
	DatastoreTypeArmFile       = DatastoreTypeArm("file")
	DatastoreTypeArmMysqldb    = DatastoreTypeArm("mysqldb")
	DatastoreTypeArmSqldb      = DatastoreTypeArm("sqldb")
	DatastoreTypeArmPsqldb     = DatastoreTypeArm("psqldb")
)

func (DatastoreTypeArm) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreTypeArm)(nil)).Elem()
}

func (e DatastoreTypeArm) ToDatastoreTypeArmOutput() DatastoreTypeArmOutput {
	return pulumi.ToOutput(e).(DatastoreTypeArmOutput)
}

func (e DatastoreTypeArm) ToDatastoreTypeArmOutputWithContext(ctx context.Context) DatastoreTypeArmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatastoreTypeArmOutput)
}

func (e DatastoreTypeArm) ToDatastoreTypeArmPtrOutput() DatastoreTypeArmPtrOutput {
	return e.ToDatastoreTypeArmPtrOutputWithContext(context.Background())
}

func (e DatastoreTypeArm) ToDatastoreTypeArmPtrOutputWithContext(ctx context.Context) DatastoreTypeArmPtrOutput {
	return DatastoreTypeArm(e).ToDatastoreTypeArmOutputWithContext(ctx).ToDatastoreTypeArmPtrOutputWithContext(ctx)
}

func (e DatastoreTypeArm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatastoreTypeArm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatastoreTypeArm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatastoreTypeArm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatastoreTypeArmOutput struct{ *pulumi.OutputState }

func (DatastoreTypeArmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreTypeArm)(nil)).Elem()
}

func (o DatastoreTypeArmOutput) ToDatastoreTypeArmOutput() DatastoreTypeArmOutput {
	return o
}

func (o DatastoreTypeArmOutput) ToDatastoreTypeArmOutputWithContext(ctx context.Context) DatastoreTypeArmOutput {
	return o
}

func (o DatastoreTypeArmOutput) ToDatastoreTypeArmPtrOutput() DatastoreTypeArmPtrOutput {
	return o.ToDatastoreTypeArmPtrOutputWithContext(context.Background())
}

func (o DatastoreTypeArmOutput) ToDatastoreTypeArmPtrOutputWithContext(ctx context.Context) DatastoreTypeArmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatastoreTypeArm) *DatastoreTypeArm {
		return &v
	}).(DatastoreTypeArmPtrOutput)
}

func (o DatastoreTypeArmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatastoreTypeArmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatastoreTypeArm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatastoreTypeArmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatastoreTypeArmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatastoreTypeArm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatastoreTypeArmPtrOutput struct{ *pulumi.OutputState }

func (DatastoreTypeArmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatastoreTypeArm)(nil)).Elem()
}

func (o DatastoreTypeArmPtrOutput) ToDatastoreTypeArmPtrOutput() DatastoreTypeArmPtrOutput {
	return o
}

func (o DatastoreTypeArmPtrOutput) ToDatastoreTypeArmPtrOutputWithContext(ctx context.Context) DatastoreTypeArmPtrOutput {
	return o
}

func (o DatastoreTypeArmPtrOutput) Elem() DatastoreTypeArmOutput {
	return o.ApplyT(func(v *DatastoreTypeArm) DatastoreTypeArm {
		if v != nil {
			return *v
		}
		var ret DatastoreTypeArm
		return ret
	}).(DatastoreTypeArmOutput)
}

func (o DatastoreTypeArmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatastoreTypeArmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatastoreTypeArm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatastoreTypeArmInput is an input type that accepts values of the DatastoreTypeArm enum
// A concrete instance of `DatastoreTypeArmInput` can be one of the following:
//
//	DatastoreTypeArmBlob
//	DatastoreTypeArmAdls
//	DatastoreTypeArm_Adls_Gen2
//	DatastoreTypeArmDbfs
//	DatastoreTypeArmFile
//	DatastoreTypeArmMysqldb
//	DatastoreTypeArmSqldb
//	DatastoreTypeArmPsqldb
type DatastoreTypeArmInput interface {
	pulumi.Input

	ToDatastoreTypeArmOutput() DatastoreTypeArmOutput
	ToDatastoreTypeArmOutputWithContext(context.Context) DatastoreTypeArmOutput
}

var datastoreTypeArmPtrType = reflect.TypeOf((**DatastoreTypeArm)(nil)).Elem()

type DatastoreTypeArmPtrInput interface {
	pulumi.Input

	ToDatastoreTypeArmPtrOutput() DatastoreTypeArmPtrOutput
	ToDatastoreTypeArmPtrOutputWithContext(context.Context) DatastoreTypeArmPtrOutput
}

type datastoreTypeArmPtr string

func DatastoreTypeArmPtr(v string) DatastoreTypeArmPtrInput {
	return (*datastoreTypeArmPtr)(&v)
}

func (*datastoreTypeArmPtr) ElementType() reflect.Type {
	return datastoreTypeArmPtrType
}

func (in *datastoreTypeArmPtr) ToDatastoreTypeArmPtrOutput() DatastoreTypeArmPtrOutput {
	return pulumi.ToOutput(in).(DatastoreTypeArmPtrOutput)
}

func (in *datastoreTypeArmPtr) ToDatastoreTypeArmPtrOutputWithContext(ctx context.Context) DatastoreTypeArmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatastoreTypeArmPtrOutput)
}

// Header type.
type Header string

const (
	Header_All_files_have_same_headers = Header("all_files_have_same_headers")
	Header_Only_first_file_has_headers = Header("only_first_file_has_headers")
	Header_No_headers                  = Header("no_headers")
	Header_Combine_all_files_headers   = Header("combine_all_files_headers")
)

func (Header) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (e Header) ToHeaderOutput() HeaderOutput {
	return pulumi.ToOutput(e).(HeaderOutput)
}

func (e Header) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, e).(HeaderOutput)
}

func (e Header) ToHeaderPtrOutput() HeaderPtrOutput {
	return e.ToHeaderPtrOutputWithContext(context.Background())
}

func (e Header) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return Header(e).ToHeaderOutputWithContext(ctx).ToHeaderPtrOutputWithContext(ctx)
}

func (e Header) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Header) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Header) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Header) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderPtrOutput() HeaderPtrOutput {
	return o.ToHeaderPtrOutputWithContext(context.Background())
}

func (o HeaderOutput) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Header) *Header {
		return &v
	}).(HeaderPtrOutput)
}

func (o HeaderOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o HeaderOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Header) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o HeaderOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Header) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type HeaderPtrOutput struct{ *pulumi.OutputState }

func (HeaderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Header)(nil)).Elem()
}

func (o HeaderPtrOutput) ToHeaderPtrOutput() HeaderPtrOutput {
	return o
}

func (o HeaderPtrOutput) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return o
}

func (o HeaderPtrOutput) Elem() HeaderOutput {
	return o.ApplyT(func(v *Header) Header {
		if v != nil {
			return *v
		}
		var ret Header
		return ret
	}).(HeaderOutput)
}

func (o HeaderPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o HeaderPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Header) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// HeaderInput is an input type that accepts values of the Header enum
// A concrete instance of `HeaderInput` can be one of the following:
//
//	Header_All_files_have_same_headers
//	Header_Only_first_file_has_headers
//	Header_No_headers
//	Header_Combine_all_files_headers
type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(context.Context) HeaderOutput
}

var headerPtrType = reflect.TypeOf((**Header)(nil)).Elem()

type HeaderPtrInput interface {
	pulumi.Input

	ToHeaderPtrOutput() HeaderPtrOutput
	ToHeaderPtrOutputWithContext(context.Context) HeaderPtrOutput
}

type headerPtr string

func HeaderPtr(v string) HeaderPtrInput {
	return (*headerPtr)(&v)
}

func (*headerPtr) ElementType() reflect.Type {
	return headerPtrType
}

func (in *headerPtr) ToHeaderPtrOutput() HeaderPtrOutput {
	return pulumi.ToOutput(in).(HeaderPtrOutput)
}

func (in *headerPtr) ToHeaderPtrOutputWithContext(ctx context.Context) HeaderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(HeaderPtrOutput)
}

// Data source type.
type SourceType string

const (
	SourceType_Delimited_files  = SourceType("delimited_files")
	SourceType_Json_lines_files = SourceType("json_lines_files")
	SourceType_Parquet_files    = SourceType("parquet_files")
)

func (SourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceType)(nil)).Elem()
}

func (e SourceType) ToSourceTypeOutput() SourceTypeOutput {
	return pulumi.ToOutput(e).(SourceTypeOutput)
}

func (e SourceType) ToSourceTypeOutputWithContext(ctx context.Context) SourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SourceTypeOutput)
}

func (e SourceType) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return e.ToSourceTypePtrOutputWithContext(context.Background())
}

func (e SourceType) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return SourceType(e).ToSourceTypeOutputWithContext(ctx).ToSourceTypePtrOutputWithContext(ctx)
}

func (e SourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SourceTypeOutput struct{ *pulumi.OutputState }

func (SourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceType)(nil)).Elem()
}

func (o SourceTypeOutput) ToSourceTypeOutput() SourceTypeOutput {
	return o
}

func (o SourceTypeOutput) ToSourceTypeOutputWithContext(ctx context.Context) SourceTypeOutput {
	return o
}

func (o SourceTypeOutput) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return o.ToSourceTypePtrOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceType) *SourceType {
		return &v
	}).(SourceTypePtrOutput)
}

func (o SourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SourceTypePtrOutput struct{ *pulumi.OutputState }

func (SourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceType)(nil)).Elem()
}

func (o SourceTypePtrOutput) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return o
}

func (o SourceTypePtrOutput) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return o
}

func (o SourceTypePtrOutput) Elem() SourceTypeOutput {
	return o.ApplyT(func(v *SourceType) SourceType {
		if v != nil {
			return *v
		}
		var ret SourceType
		return ret
	}).(SourceTypeOutput)
}

func (o SourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SourceTypeInput is an input type that accepts values of the SourceType enum
// A concrete instance of `SourceTypeInput` can be one of the following:
//
//	SourceType_Delimited_files
//	SourceType_Json_lines_files
//	SourceType_Parquet_files
type SourceTypeInput interface {
	pulumi.Input

	ToSourceTypeOutput() SourceTypeOutput
	ToSourceTypeOutputWithContext(context.Context) SourceTypeOutput
}

var sourceTypePtrType = reflect.TypeOf((**SourceType)(nil)).Elem()

type SourceTypePtrInput interface {
	pulumi.Input

	ToSourceTypePtrOutput() SourceTypePtrOutput
	ToSourceTypePtrOutputWithContext(context.Context) SourceTypePtrOutput
}

type sourceTypePtr string

func SourceTypePtr(v string) SourceTypePtrInput {
	return (*sourceTypePtr)(&v)
}

func (*sourceTypePtr) ElementType() reflect.Type {
	return sourceTypePtrType
}

func (in *sourceTypePtr) ToSourceTypePtrOutput() SourceTypePtrOutput {
	return pulumi.ToOutput(in).(SourceTypePtrOutput)
}

func (in *sourceTypePtr) ToSourceTypePtrOutputWithContext(ctx context.Context) SourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SourceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DatasetTypeOutput{})
	pulumi.RegisterOutputType(DatasetTypePtrOutput{})
	pulumi.RegisterOutputType(DatastoreTypeArmOutput{})
	pulumi.RegisterOutputType(DatastoreTypeArmPtrOutput{})
	pulumi.RegisterOutputType(HeaderOutput{})
	pulumi.RegisterOutputType(HeaderPtrOutput{})
	pulumi.RegisterOutputType(SourceTypeOutput{})
	pulumi.RegisterOutputType(SourceTypePtrOutput{})
}
