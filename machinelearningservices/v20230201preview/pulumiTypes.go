// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = utilities.GetEnvOrDefault

// Dto object representing feature
type FeatureResponse struct {
	// Specifies type
	DataType *string `pulumi:"dataType"`
	// Specifies description
	Description *string `pulumi:"description"`
	// Specifies name
	FeatureName *string `pulumi:"featureName"`
	// Specifies tags
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for FeatureResponse
func (val *FeatureResponse) Defaults() *FeatureResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DataType == nil {
		dataType_ := "String"
		tmp.DataType = &dataType_
	}
	return &tmp
}

// Dto object representing feature
type FeatureResponseOutput struct{ *pulumi.OutputState }

func (FeatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseOutput) ToFeatureResponseOutput() FeatureResponseOutput {
	return o
}

func (o FeatureResponseOutput) ToFeatureResponseOutputWithContext(ctx context.Context) FeatureResponseOutput {
	return o
}

func (o FeatureResponseOutput) ToOutput(ctx context.Context) pulumix.Output[FeatureResponse] {
	return pulumix.Output[FeatureResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies type
func (o FeatureResponseOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Specifies description
func (o FeatureResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies name
func (o FeatureResponseOutput) FeatureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResponse) *string { return v.FeatureName }).(pulumi.StringPtrOutput)
}

// Specifies tags
func (o FeatureResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v FeatureResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FeatureResponseArrayOutput struct{ *pulumi.OutputState }

func (FeatureResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureResponse)(nil)).Elem()
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutput() FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) ToFeatureResponseArrayOutputWithContext(ctx context.Context) FeatureResponseArrayOutput {
	return o
}

func (o FeatureResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]FeatureResponse] {
	return pulumix.Output[[]FeatureResponse]{
		OutputState: o.OutputState,
	}
}

func (o FeatureResponseArrayOutput) Index(i pulumi.IntInput) FeatureResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureResponse {
		return vs[0].([]FeatureResponse)[vs[1].(int)]
	}).(FeatureResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(FeatureResponseOutput{})
	pulumi.RegisterOutputType(FeatureResponseArrayOutput{})
}
