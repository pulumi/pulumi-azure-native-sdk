// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20240401preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Settings for a personal compute instance.
type PersonalComputeInstanceSettings struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUser `pulumi:"assignedUser"`
}

// PersonalComputeInstanceSettingsInput is an input type that accepts PersonalComputeInstanceSettingsArgs and PersonalComputeInstanceSettingsOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsInput` via:
//
//	PersonalComputeInstanceSettingsArgs{...}
type PersonalComputeInstanceSettingsInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput
	ToPersonalComputeInstanceSettingsOutputWithContext(context.Context) PersonalComputeInstanceSettingsOutput
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsArgs struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser AssignedUserPtrInput `pulumi:"assignedUser"`
}

func (PersonalComputeInstanceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return i.ToPersonalComputeInstanceSettingsOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput)
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i PersonalComputeInstanceSettingsArgs) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsOutput).ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx)
}

// PersonalComputeInstanceSettingsPtrInput is an input type that accepts PersonalComputeInstanceSettingsArgs, PersonalComputeInstanceSettingsPtr and PersonalComputeInstanceSettingsPtrOutput values.
// You can construct a concrete instance of `PersonalComputeInstanceSettingsPtrInput` via:
//
//	        PersonalComputeInstanceSettingsArgs{...}
//
//	or:
//
//	        nil
type PersonalComputeInstanceSettingsPtrInput interface {
	pulumi.Input

	ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput
	ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Context) PersonalComputeInstanceSettingsPtrOutput
}

type personalComputeInstanceSettingsPtrType PersonalComputeInstanceSettingsArgs

func PersonalComputeInstanceSettingsPtr(v *PersonalComputeInstanceSettingsArgs) PersonalComputeInstanceSettingsPtrInput {
	return (*personalComputeInstanceSettingsPtrType)(v)
}

func (*personalComputeInstanceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return i.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (i *personalComputeInstanceSettingsPtrType) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersonalComputeInstanceSettingsPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutput() PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsOutput {
	return o
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o.ToPersonalComputeInstanceSettingsPtrOutputWithContext(context.Background())
}

func (o PersonalComputeInstanceSettingsOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersonalComputeInstanceSettings) *PersonalComputeInstanceSettings {
		return &v
	}).(PersonalComputeInstanceSettingsPtrOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettings) *AssignedUser { return v.AssignedUser }).(AssignedUserPtrOutput)
}

type PersonalComputeInstanceSettingsPtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettings)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutput() PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) ToPersonalComputeInstanceSettingsPtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsPtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsPtrOutput) Elem() PersonalComputeInstanceSettingsOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) PersonalComputeInstanceSettings {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettings
		return ret
	}).(PersonalComputeInstanceSettingsOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsPtrOutput) AssignedUser() AssignedUserPtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettings) *AssignedUser {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserPtrOutput)
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponse struct {
	// A user explicitly assigned to a personal compute instance.
	AssignedUser *AssignedUserResponse `pulumi:"assignedUser"`
}

// Settings for a personal compute instance.
type PersonalComputeInstanceSettingsResponseOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutput() PersonalComputeInstanceSettingsResponseOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponseOutput) ToPersonalComputeInstanceSettingsResponseOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponseOutput {
	return o
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponseOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v PersonalComputeInstanceSettingsResponse) *AssignedUserResponse { return v.AssignedUser }).(AssignedUserResponsePtrOutput)
}

type PersonalComputeInstanceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (PersonalComputeInstanceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersonalComputeInstanceSettingsResponse)(nil)).Elem()
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutput() PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) ToPersonalComputeInstanceSettingsResponsePtrOutputWithContext(ctx context.Context) PersonalComputeInstanceSettingsResponsePtrOutput {
	return o
}

func (o PersonalComputeInstanceSettingsResponsePtrOutput) Elem() PersonalComputeInstanceSettingsResponseOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) PersonalComputeInstanceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret PersonalComputeInstanceSettingsResponse
		return ret
	}).(PersonalComputeInstanceSettingsResponseOutput)
}

// A user explicitly assigned to a personal compute instance.
func (o PersonalComputeInstanceSettingsResponsePtrOutput) AssignedUser() AssignedUserResponsePtrOutput {
	return o.ApplyT(func(v *PersonalComputeInstanceSettingsResponse) *AssignedUserResponse {
		if v == nil {
			return nil
		}
		return v.AssignedUser
	}).(AssignedUserResponsePtrOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJob struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJob
func (val *PipelineJob) Defaults() *PipelineJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// PipelineJobInput is an input type that accepts PipelineJobArgs and PipelineJobOutput values.
// You can construct a concrete instance of `PipelineJobInput` via:
//
//	PipelineJobArgs{...}
type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(context.Context) PipelineJobOutput
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobArgs struct {
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs pulumi.MapInput `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings pulumi.Input `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId pulumi.StringPtrInput `pulumi:"sourceJobId"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobArgs
func (val *PipelineJobArgs) Defaults() *PipelineJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (i PipelineJobArgs) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i PipelineJobArgs) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Notification setting for the job
func (o PipelineJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v PipelineJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// Outputs for the pipeline job
func (o PipelineJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o PipelineJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponse struct {
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// ARM resource ID of source job.
	SourceJobId *string `pulumi:"sourceJobId"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobResponse
func (val *PipelineJobResponse) Defaults() *PipelineJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponseOutput struct{ *pulumi.OutputState }

func (PipelineJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJobResponse)(nil)).Elem()
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutput() PipelineJobResponseOutput {
	return o
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutputWithContext(ctx context.Context) PipelineJobResponseOutput {
	return o
}

// ARM resource ID of the component resource.
func (o PipelineJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o PipelineJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobResponseOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Notification setting for the job
func (o PipelineJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Outputs for the pipeline job
func (o PipelineJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Configuration for secrets to be made available during runtime.
func (o PipelineJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// ARM resource ID of source job.
func (o PipelineJobResponseOutput) SourceJobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.SourceJobId }).(pulumi.StringPtrOutput)
}

// Status of the job.
func (o PipelineJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment configuration options.
type PoolEnvironmentConfiguration struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettings `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfiguration
func (val *PoolEnvironmentConfiguration) Defaults() *PoolEnvironmentConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// PoolEnvironmentConfigurationInput is an input type that accepts PoolEnvironmentConfigurationArgs and PoolEnvironmentConfigurationOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationInput` via:
//
//	PoolEnvironmentConfigurationArgs{...}
type PoolEnvironmentConfigurationInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput
	ToPoolEnvironmentConfigurationOutputWithContext(context.Context) PoolEnvironmentConfigurationOutput
}

// Environment configuration options.
type PoolEnvironmentConfigurationArgs struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe ProbeSettingsPtrInput `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationArgs
func (val *PoolEnvironmentConfigurationArgs) Defaults() *PoolEnvironmentConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (PoolEnvironmentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return i.ToPoolEnvironmentConfigurationOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput)
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolEnvironmentConfigurationArgs) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationOutput).ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx)
}

// PoolEnvironmentConfigurationPtrInput is an input type that accepts PoolEnvironmentConfigurationArgs, PoolEnvironmentConfigurationPtr and PoolEnvironmentConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolEnvironmentConfigurationPtrInput` via:
//
//	        PoolEnvironmentConfigurationArgs{...}
//
//	or:
//
//	        nil
type PoolEnvironmentConfigurationPtrInput interface {
	pulumi.Input

	ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput
	ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Context) PoolEnvironmentConfigurationPtrOutput
}

type poolEnvironmentConfigurationPtrType PoolEnvironmentConfigurationArgs

func PoolEnvironmentConfigurationPtr(v *PoolEnvironmentConfigurationArgs) PoolEnvironmentConfigurationPtrInput {
	return (*poolEnvironmentConfigurationPtrType)(v)
}

func (*poolEnvironmentConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return i.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolEnvironmentConfigurationPtrType) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolEnvironmentConfigurationPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutput() PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationOutput {
	return o
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o.ToPoolEnvironmentConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolEnvironmentConfigurationOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolEnvironmentConfiguration) *PoolEnvironmentConfiguration {
		return &v
	}).(PoolEnvironmentConfigurationPtrOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfiguration) *ProbeSettings { return v.StartupProbe }).(ProbeSettingsPtrOutput)
}

type PoolEnvironmentConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfiguration)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutput() PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) ToPoolEnvironmentConfigurationPtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationPtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationPtrOutput) Elem() PoolEnvironmentConfigurationOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) PoolEnvironmentConfiguration {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfiguration
		return ret
	}).(PoolEnvironmentConfigurationOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationPtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationPtrOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsPtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationPtrOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsPtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationPtrOutput) StartupProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfiguration) *ProbeSettings {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsPtrOutput)
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponse struct {
	// ARM resource ID of the environment specification for the inference pool.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the inference pool.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
	StartupProbe *ProbeSettingsResponse `pulumi:"startupProbe"`
}

// Defaults sets the appropriate defaults for PoolEnvironmentConfigurationResponse
func (val *PoolEnvironmentConfigurationResponse) Defaults() *PoolEnvironmentConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.StartupProbe = tmp.StartupProbe.Defaults()

	return &tmp
}

// Environment configuration options.
type PoolEnvironmentConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutput() PoolEnvironmentConfigurationResponseOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponseOutput) ToPoolEnvironmentConfigurationResponseOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponseOutput {
	return o
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponseOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse { return v.StartupProbe }).(ProbeSettingsResponsePtrOutput)
}

type PoolEnvironmentConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolEnvironmentConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolEnvironmentConfigurationResponse)(nil)).Elem()
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutput() PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) ToPoolEnvironmentConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolEnvironmentConfigurationResponsePtrOutput {
	return o
}

func (o PoolEnvironmentConfigurationResponsePtrOutput) Elem() PoolEnvironmentConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) PoolEnvironmentConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PoolEnvironmentConfigurationResponse
		return ret
	}).(PoolEnvironmentConfigurationResponseOutput)
}

// ARM resource ID of the environment specification for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnvironmentId
	}).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the inference pool.
func (o PoolEnvironmentConfigurationResponsePtrOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.EnvironmentVariables
	}).(pulumi.StringMapOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o PoolEnvironmentConfigurationResponsePtrOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.LivenessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o PoolEnvironmentConfigurationResponsePtrOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// This verifies whether the application within a container is started. Startup probes run before any other probe, and, unless it finishes successfully, disables other probes.
func (o PoolEnvironmentConfigurationResponsePtrOutput) StartupProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v *PoolEnvironmentConfigurationResponse) *ProbeSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StartupProbe
	}).(ProbeSettingsResponsePtrOutput)
}

// Model configuration options.
type PoolModelConfiguration struct {
	// The URI path to the model.
	ModelId *string `pulumi:"modelId"`
}

// PoolModelConfigurationInput is an input type that accepts PoolModelConfigurationArgs and PoolModelConfigurationOutput values.
// You can construct a concrete instance of `PoolModelConfigurationInput` via:
//
//	PoolModelConfigurationArgs{...}
type PoolModelConfigurationInput interface {
	pulumi.Input

	ToPoolModelConfigurationOutput() PoolModelConfigurationOutput
	ToPoolModelConfigurationOutputWithContext(context.Context) PoolModelConfigurationOutput
}

// Model configuration options.
type PoolModelConfigurationArgs struct {
	// The URI path to the model.
	ModelId pulumi.StringPtrInput `pulumi:"modelId"`
}

func (PoolModelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfiguration)(nil)).Elem()
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationOutput() PoolModelConfigurationOutput {
	return i.ToPoolModelConfigurationOutputWithContext(context.Background())
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationOutputWithContext(ctx context.Context) PoolModelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationOutput)
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return i.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (i PoolModelConfigurationArgs) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationOutput).ToPoolModelConfigurationPtrOutputWithContext(ctx)
}

// PoolModelConfigurationPtrInput is an input type that accepts PoolModelConfigurationArgs, PoolModelConfigurationPtr and PoolModelConfigurationPtrOutput values.
// You can construct a concrete instance of `PoolModelConfigurationPtrInput` via:
//
//	        PoolModelConfigurationArgs{...}
//
//	or:
//
//	        nil
type PoolModelConfigurationPtrInput interface {
	pulumi.Input

	ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput
	ToPoolModelConfigurationPtrOutputWithContext(context.Context) PoolModelConfigurationPtrOutput
}

type poolModelConfigurationPtrType PoolModelConfigurationArgs

func PoolModelConfigurationPtr(v *PoolModelConfigurationArgs) PoolModelConfigurationPtrInput {
	return (*poolModelConfigurationPtrType)(v)
}

func (*poolModelConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfiguration)(nil)).Elem()
}

func (i *poolModelConfigurationPtrType) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return i.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (i *poolModelConfigurationPtrType) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolModelConfigurationPtrOutput)
}

// Model configuration options.
type PoolModelConfigurationOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfiguration)(nil)).Elem()
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationOutput() PoolModelConfigurationOutput {
	return o
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationOutputWithContext(ctx context.Context) PoolModelConfigurationOutput {
	return o
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return o.ToPoolModelConfigurationPtrOutputWithContext(context.Background())
}

func (o PoolModelConfigurationOutput) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolModelConfiguration) *PoolModelConfiguration {
		return &v
	}).(PoolModelConfigurationPtrOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolModelConfiguration) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

type PoolModelConfigurationPtrOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfiguration)(nil)).Elem()
}

func (o PoolModelConfigurationPtrOutput) ToPoolModelConfigurationPtrOutput() PoolModelConfigurationPtrOutput {
	return o
}

func (o PoolModelConfigurationPtrOutput) ToPoolModelConfigurationPtrOutputWithContext(ctx context.Context) PoolModelConfigurationPtrOutput {
	return o
}

func (o PoolModelConfigurationPtrOutput) Elem() PoolModelConfigurationOutput {
	return o.ApplyT(func(v *PoolModelConfiguration) PoolModelConfiguration {
		if v != nil {
			return *v
		}
		var ret PoolModelConfiguration
		return ret
	}).(PoolModelConfigurationOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationPtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolModelConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

// Model configuration options.
type PoolModelConfigurationResponse struct {
	// The URI path to the model.
	ModelId *string `pulumi:"modelId"`
}

// Model configuration options.
type PoolModelConfigurationResponseOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolModelConfigurationResponse)(nil)).Elem()
}

func (o PoolModelConfigurationResponseOutput) ToPoolModelConfigurationResponseOutput() PoolModelConfigurationResponseOutput {
	return o
}

func (o PoolModelConfigurationResponseOutput) ToPoolModelConfigurationResponseOutputWithContext(ctx context.Context) PoolModelConfigurationResponseOutput {
	return o
}

// The URI path to the model.
func (o PoolModelConfigurationResponseOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolModelConfigurationResponse) *string { return v.ModelId }).(pulumi.StringPtrOutput)
}

type PoolModelConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (PoolModelConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolModelConfigurationResponse)(nil)).Elem()
}

func (o PoolModelConfigurationResponsePtrOutput) ToPoolModelConfigurationResponsePtrOutput() PoolModelConfigurationResponsePtrOutput {
	return o
}

func (o PoolModelConfigurationResponsePtrOutput) ToPoolModelConfigurationResponsePtrOutputWithContext(ctx context.Context) PoolModelConfigurationResponsePtrOutput {
	return o
}

func (o PoolModelConfigurationResponsePtrOutput) Elem() PoolModelConfigurationResponseOutput {
	return o.ApplyT(func(v *PoolModelConfigurationResponse) PoolModelConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret PoolModelConfigurationResponse
		return ret
	}).(PoolModelConfigurationResponseOutput)
}

// The URI path to the model.
func (o PoolModelConfigurationResponsePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolModelConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelId
	}).(pulumi.StringPtrOutput)
}

type PredictionDriftMonitoringSignal struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'PredictionDrift'.
	SignalType string `pulumi:"signalType"`
}

// PredictionDriftMonitoringSignalInput is an input type that accepts PredictionDriftMonitoringSignalArgs and PredictionDriftMonitoringSignalOutput values.
// You can construct a concrete instance of `PredictionDriftMonitoringSignalInput` via:
//
//	PredictionDriftMonitoringSignalArgs{...}
type PredictionDriftMonitoringSignalInput interface {
	pulumi.Input

	ToPredictionDriftMonitoringSignalOutput() PredictionDriftMonitoringSignalOutput
	ToPredictionDriftMonitoringSignalOutputWithContext(context.Context) PredictionDriftMonitoringSignalOutput
}

type PredictionDriftMonitoringSignalArgs struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride pulumi.StringMapInput `pulumi:"featureDataTypeOverride"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds pulumi.ArrayInput `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes pulumi.StringArrayInput `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData pulumi.Input `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData pulumi.Input `pulumi:"referenceData"`
	// Expected value is 'PredictionDrift'.
	SignalType pulumi.StringInput `pulumi:"signalType"`
}

func (PredictionDriftMonitoringSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionDriftMonitoringSignal)(nil)).Elem()
}

func (i PredictionDriftMonitoringSignalArgs) ToPredictionDriftMonitoringSignalOutput() PredictionDriftMonitoringSignalOutput {
	return i.ToPredictionDriftMonitoringSignalOutputWithContext(context.Background())
}

func (i PredictionDriftMonitoringSignalArgs) ToPredictionDriftMonitoringSignalOutputWithContext(ctx context.Context) PredictionDriftMonitoringSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PredictionDriftMonitoringSignalOutput)
}

type PredictionDriftMonitoringSignalOutput struct{ *pulumi.OutputState }

func (PredictionDriftMonitoringSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionDriftMonitoringSignal)(nil)).Elem()
}

func (o PredictionDriftMonitoringSignalOutput) ToPredictionDriftMonitoringSignalOutput() PredictionDriftMonitoringSignalOutput {
	return o
}

func (o PredictionDriftMonitoringSignalOutput) ToPredictionDriftMonitoringSignalOutputWithContext(ctx context.Context) PredictionDriftMonitoringSignalOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o PredictionDriftMonitoringSignalOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o PredictionDriftMonitoringSignalOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o PredictionDriftMonitoringSignalOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o PredictionDriftMonitoringSignalOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o PredictionDriftMonitoringSignalOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o PredictionDriftMonitoringSignalOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'PredictionDrift'.
func (o PredictionDriftMonitoringSignalOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignal) string { return v.SignalType }).(pulumi.StringOutput)
}

type PredictionDriftMonitoringSignalResponse struct {
	// A dictionary that maps feature names to their respective data types.
	FeatureDataTypeOverride map[string]string `pulumi:"featureDataTypeOverride"`
	// [Required] A list of metrics to calculate and their associated thresholds.
	MetricThresholds []interface{} `pulumi:"metricThresholds"`
	// The current notification mode for this signal.
	NotificationTypes []string `pulumi:"notificationTypes"`
	// [Required] The data which drift will be calculated for.
	ProductionData interface{} `pulumi:"productionData"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The data to calculate drift against.
	ReferenceData interface{} `pulumi:"referenceData"`
	// Expected value is 'PredictionDrift'.
	SignalType string `pulumi:"signalType"`
}

type PredictionDriftMonitoringSignalResponseOutput struct{ *pulumi.OutputState }

func (PredictionDriftMonitoringSignalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PredictionDriftMonitoringSignalResponse)(nil)).Elem()
}

func (o PredictionDriftMonitoringSignalResponseOutput) ToPredictionDriftMonitoringSignalResponseOutput() PredictionDriftMonitoringSignalResponseOutput {
	return o
}

func (o PredictionDriftMonitoringSignalResponseOutput) ToPredictionDriftMonitoringSignalResponseOutputWithContext(ctx context.Context) PredictionDriftMonitoringSignalResponseOutput {
	return o
}

// A dictionary that maps feature names to their respective data types.
func (o PredictionDriftMonitoringSignalResponseOutput) FeatureDataTypeOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) map[string]string { return v.FeatureDataTypeOverride }).(pulumi.StringMapOutput)
}

// [Required] A list of metrics to calculate and their associated thresholds.
func (o PredictionDriftMonitoringSignalResponseOutput) MetricThresholds() pulumi.ArrayOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) []interface{} { return v.MetricThresholds }).(pulumi.ArrayOutput)
}

// The current notification mode for this signal.
func (o PredictionDriftMonitoringSignalResponseOutput) NotificationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) []string { return v.NotificationTypes }).(pulumi.StringArrayOutput)
}

// [Required] The data which drift will be calculated for.
func (o PredictionDriftMonitoringSignalResponseOutput) ProductionData() pulumi.AnyOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) interface{} { return v.ProductionData }).(pulumi.AnyOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o PredictionDriftMonitoringSignalResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The data to calculate drift against.
func (o PredictionDriftMonitoringSignalResponseOutput) ReferenceData() pulumi.AnyOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) interface{} { return v.ReferenceData }).(pulumi.AnyOutput)
}

// Expected value is 'PredictionDrift'.
func (o PredictionDriftMonitoringSignalResponseOutput) SignalType() pulumi.StringOutput {
	return o.ApplyT(func(v PredictionDriftMonitoringSignalResponse) string { return v.SignalType }).(pulumi.StringOutput)
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponse struct {
	// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	Id string `pulumi:"id"`
	// Managed service identity (system assigned and/or user assigned identities)
	Identity *ManagedServiceIdentityResponse `pulumi:"identity"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// The name of the resource
	Name string `pulumi:"name"`
	// The Private Endpoint resource.
	PrivateEndpoint *WorkspacePrivateEndpointResourceResponse `pulumi:"privateEndpoint"`
	// The connection state.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionStateResponse `pulumi:"privateLinkServiceConnectionState"`
	// The current provisioning state.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Optional. This field is required to be implemented by the RP because AML is supporting more than one tier
	Sku *SkuResponse `pulumi:"sku"`
	// Azure Resource Manager metadata containing createdBy and modifiedBy information.
	SystemData SystemDataResponse `pulumi:"systemData"`
	Tags       map[string]string  `pulumi:"tags"`
	// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type string `pulumi:"type"`
}

// The Private Endpoint Connection resource.
type PrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutput() PrivateEndpointConnectionResponseOutput {
	return o
}

func (o PrivateEndpointConnectionResponseOutput) ToPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseOutput {
	return o
}

// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
func (o PrivateEndpointConnectionResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Id }).(pulumi.StringOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
func (o PrivateEndpointConnectionResponseOutput) Identity() ManagedServiceIdentityResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *ManagedServiceIdentityResponse { return v.Identity }).(ManagedServiceIdentityResponsePtrOutput)
}

// Same as workspace location.
func (o PrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the resource
func (o PrivateEndpointConnectionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The Private Endpoint resource.
func (o PrivateEndpointConnectionResponseOutput) PrivateEndpoint() WorkspacePrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *WorkspacePrivateEndpointResourceResponse {
		return v.PrivateEndpoint
	}).(WorkspacePrivateEndpointResourceResponsePtrOutput)
}

// The connection state.
func (o PrivateEndpointConnectionResponseOutput) PrivateLinkServiceConnectionState() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *PrivateLinkServiceConnectionStateResponse {
		return v.PrivateLinkServiceConnectionState
	}).(PrivateLinkServiceConnectionStateResponsePtrOutput)
}

// The current provisioning state.
func (o PrivateEndpointConnectionResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// Optional. This field is required to be implemented by the RP because AML is supporting more than one tier
func (o PrivateEndpointConnectionResponseOutput) Sku() SkuResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) *SkuResponse { return v.Sku }).(SkuResponsePtrOutput)
}

// Azure Resource Manager metadata containing createdBy and modifiedBy information.
func (o PrivateEndpointConnectionResponseOutput) SystemData() SystemDataResponseOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) SystemDataResponse { return v.SystemData }).(SystemDataResponseOutput)
}

func (o PrivateEndpointConnectionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
func (o PrivateEndpointConnectionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointConnectionResponse) string { return v.Type }).(pulumi.StringOutput)
}

type PrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutput() PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) ToPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) PrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o PrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) PrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateEndpointConnectionResponse {
		return vs[0].([]PrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(PrivateEndpointConnectionResponseOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestination struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// PrivateEndpointDestinationInput is an input type that accepts PrivateEndpointDestinationArgs and PrivateEndpointDestinationOutput values.
// You can construct a concrete instance of `PrivateEndpointDestinationInput` via:
//
//	PrivateEndpointDestinationArgs{...}
type PrivateEndpointDestinationInput interface {
	pulumi.Input

	ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput
	ToPrivateEndpointDestinationOutputWithContext(context.Context) PrivateEndpointDestinationOutput
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationArgs struct {
	ServiceResourceId pulumi.StringPtrInput `pulumi:"serviceResourceId"`
	SparkEnabled      pulumi.BoolPtrInput   `pulumi:"sparkEnabled"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       pulumi.StringPtrInput `pulumi:"sparkStatus"`
	SubresourceTarget pulumi.StringPtrInput `pulumi:"subresourceTarget"`
}

func (PrivateEndpointDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestination)(nil)).Elem()
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput {
	return i.ToPrivateEndpointDestinationOutputWithContext(context.Background())
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationOutputWithContext(ctx context.Context) PrivateEndpointDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationOutput)
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return i.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (i PrivateEndpointDestinationArgs) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationOutput).ToPrivateEndpointDestinationPtrOutputWithContext(ctx)
}

// PrivateEndpointDestinationPtrInput is an input type that accepts PrivateEndpointDestinationArgs, PrivateEndpointDestinationPtr and PrivateEndpointDestinationPtrOutput values.
// You can construct a concrete instance of `PrivateEndpointDestinationPtrInput` via:
//
//	        PrivateEndpointDestinationArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointDestinationPtrInput interface {
	pulumi.Input

	ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput
	ToPrivateEndpointDestinationPtrOutputWithContext(context.Context) PrivateEndpointDestinationPtrOutput
}

type privateEndpointDestinationPtrType PrivateEndpointDestinationArgs

func PrivateEndpointDestinationPtr(v *PrivateEndpointDestinationArgs) PrivateEndpointDestinationPtrInput {
	return (*privateEndpointDestinationPtrType)(v)
}

func (*privateEndpointDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestination)(nil)).Elem()
}

func (i *privateEndpointDestinationPtrType) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return i.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (i *privateEndpointDestinationPtrType) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointDestinationPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestination)(nil)).Elem()
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationOutput() PrivateEndpointDestinationOutput {
	return o
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationOutputWithContext(ctx context.Context) PrivateEndpointDestinationOutput {
	return o
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return o.ToPrivateEndpointDestinationPtrOutputWithContext(context.Background())
}

func (o PrivateEndpointDestinationOutput) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointDestination) *PrivateEndpointDestination {
		return &v
	}).(PrivateEndpointDestinationPtrOutput)
}

func (o PrivateEndpointDestinationOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.ServiceResourceId }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *bool { return v.SparkEnabled }).(pulumi.BoolPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.SparkStatus }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestination) *string { return v.SubresourceTarget }).(pulumi.StringPtrOutput)
}

type PrivateEndpointDestinationPtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestination)(nil)).Elem()
}

func (o PrivateEndpointDestinationPtrOutput) ToPrivateEndpointDestinationPtrOutput() PrivateEndpointDestinationPtrOutput {
	return o
}

func (o PrivateEndpointDestinationPtrOutput) ToPrivateEndpointDestinationPtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationPtrOutput {
	return o
}

func (o PrivateEndpointDestinationPtrOutput) Elem() PrivateEndpointDestinationOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) PrivateEndpointDestination {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointDestination
		return ret
	}).(PrivateEndpointDestinationOutput)
}

func (o PrivateEndpointDestinationPtrOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceResourceId
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationPtrOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *bool {
		if v == nil {
			return nil
		}
		return v.SparkEnabled
	}).(pulumi.BoolPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationPtrOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.SparkStatus
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationPtrOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestination) *string {
		if v == nil {
			return nil
		}
		return v.SubresourceTarget
	}).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationResponse struct {
	ServiceResourceId *string `pulumi:"serviceResourceId"`
	SparkEnabled      *bool   `pulumi:"sparkEnabled"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	SparkStatus       *string `pulumi:"sparkStatus"`
	SubresourceTarget *string `pulumi:"subresourceTarget"`
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointDestinationResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointDestinationResponse)(nil)).Elem()
}

func (o PrivateEndpointDestinationResponseOutput) ToPrivateEndpointDestinationResponseOutput() PrivateEndpointDestinationResponseOutput {
	return o
}

func (o PrivateEndpointDestinationResponseOutput) ToPrivateEndpointDestinationResponseOutputWithContext(ctx context.Context) PrivateEndpointDestinationResponseOutput {
	return o
}

func (o PrivateEndpointDestinationResponseOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.ServiceResourceId }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponseOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *bool { return v.SparkEnabled }).(pulumi.BoolPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationResponseOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.SparkStatus }).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponseOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointDestinationResponse) *string { return v.SubresourceTarget }).(pulumi.StringPtrOutput)
}

type PrivateEndpointDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointDestinationResponse)(nil)).Elem()
}

func (o PrivateEndpointDestinationResponsePtrOutput) ToPrivateEndpointDestinationResponsePtrOutput() PrivateEndpointDestinationResponsePtrOutput {
	return o
}

func (o PrivateEndpointDestinationResponsePtrOutput) ToPrivateEndpointDestinationResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointDestinationResponsePtrOutput {
	return o
}

func (o PrivateEndpointDestinationResponsePtrOutput) Elem() PrivateEndpointDestinationResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) PrivateEndpointDestinationResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointDestinationResponse
		return ret
	}).(PrivateEndpointDestinationResponseOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) ServiceResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceResourceId
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) SparkEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.SparkEnabled
	}).(pulumi.BoolPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointDestinationResponsePtrOutput) SparkStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SparkStatus
	}).(pulumi.StringPtrOutput)
}

func (o PrivateEndpointDestinationResponsePtrOutput) SubresourceTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubresourceTarget
	}).(pulumi.StringPtrOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestination `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// PrivateEndpointOutboundRuleInput is an input type that accepts PrivateEndpointOutboundRuleArgs and PrivateEndpointOutboundRuleOutput values.
// You can construct a concrete instance of `PrivateEndpointOutboundRuleInput` via:
//
//	PrivateEndpointOutboundRuleArgs{...}
type PrivateEndpointOutboundRuleInput interface {
	pulumi.Input

	ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput
	ToPrivateEndpointOutboundRuleOutputWithContext(context.Context) PrivateEndpointOutboundRuleOutput
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination PrivateEndpointDestinationPtrInput `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PrivateEndpointOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRule)(nil)).Elem()
}

func (i PrivateEndpointOutboundRuleArgs) ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput {
	return i.ToPrivateEndpointOutboundRuleOutputWithContext(context.Background())
}

func (i PrivateEndpointOutboundRuleArgs) ToPrivateEndpointOutboundRuleOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointOutboundRuleOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRule)(nil)).Elem()
}

func (o PrivateEndpointOutboundRuleOutput) ToPrivateEndpointOutboundRuleOutput() PrivateEndpointOutboundRuleOutput {
	return o
}

func (o PrivateEndpointOutboundRuleOutput) ToPrivateEndpointOutboundRuleOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Destination() PrivateEndpointDestinationPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *PrivateEndpointDestination { return v.Destination }).(PrivateEndpointDestinationPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'PrivateEndpoint'.
func (o PrivateEndpointOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
	Destination *PrivateEndpointDestinationResponse `pulumi:"destination"`
	// The dependency rule name.
	ParentRuleName string `pulumi:"parentRuleName"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'PrivateEndpoint'.
	Type string `pulumi:"type"`
}

// Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
type PrivateEndpointOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointOutboundRuleResponse)(nil)).Elem()
}

func (o PrivateEndpointOutboundRuleResponseOutput) ToPrivateEndpointOutboundRuleResponseOutput() PrivateEndpointOutboundRuleResponseOutput {
	return o
}

func (o PrivateEndpointOutboundRuleResponseOutput) ToPrivateEndpointOutboundRuleResponseOutputWithContext(ctx context.Context) PrivateEndpointOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Private Endpoint destination for a Private Endpoint Outbound Rule for the managed network of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Destination() PrivateEndpointDestinationResponsePtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *PrivateEndpointDestinationResponse { return v.Destination }).(PrivateEndpointDestinationResponsePtrOutput)
}

// The dependency rule name.
func (o PrivateEndpointOutboundRuleResponseOutput) ParentRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) string { return v.ParentRuleName }).(pulumi.StringOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o PrivateEndpointOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'PrivateEndpoint'.
func (o PrivateEndpointOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResource struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// PrivateEndpointResourceInput is an input type that accepts PrivateEndpointResourceArgs and PrivateEndpointResourceOutput values.
// You can construct a concrete instance of `PrivateEndpointResourceInput` via:
//
//	PrivateEndpointResourceArgs{...}
type PrivateEndpointResourceInput interface {
	pulumi.Input

	ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput
	ToPrivateEndpointResourceOutputWithContext(context.Context) PrivateEndpointResourceOutput
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceArgs struct {
	// The subnetId that the private endpoint is connected to.
	SubnetArmId pulumi.StringPtrInput `pulumi:"subnetArmId"`
}

func (PrivateEndpointResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return i.ToPrivateEndpointResourceOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput)
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i PrivateEndpointResourceArgs) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourceOutput).ToPrivateEndpointResourcePtrOutputWithContext(ctx)
}

// PrivateEndpointResourcePtrInput is an input type that accepts PrivateEndpointResourceArgs, PrivateEndpointResourcePtr and PrivateEndpointResourcePtrOutput values.
// You can construct a concrete instance of `PrivateEndpointResourcePtrInput` via:
//
//	        PrivateEndpointResourceArgs{...}
//
//	or:
//
//	        nil
type PrivateEndpointResourcePtrInput interface {
	pulumi.Input

	ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput
	ToPrivateEndpointResourcePtrOutputWithContext(context.Context) PrivateEndpointResourcePtrOutput
}

type privateEndpointResourcePtrType PrivateEndpointResourceArgs

func PrivateEndpointResourcePtr(v *PrivateEndpointResourceArgs) PrivateEndpointResourcePtrInput {
	return (*privateEndpointResourcePtrType)(v)
}

func (*privateEndpointResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return i.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (i *privateEndpointResourcePtrType) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointResourcePtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutput() PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourceOutputWithContext(ctx context.Context) PrivateEndpointResourceOutput {
	return o
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o.ToPrivateEndpointResourcePtrOutputWithContext(context.Background())
}

func (o PrivateEndpointResourceOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateEndpointResource) *PrivateEndpointResource {
		return &v
	}).(PrivateEndpointResourcePtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResource) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourcePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResource)(nil)).Elem()
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutput() PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) ToPrivateEndpointResourcePtrOutputWithContext(ctx context.Context) PrivateEndpointResourcePtrOutput {
	return o
}

func (o PrivateEndpointResourcePtrOutput) Elem() PrivateEndpointResourceOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) PrivateEndpointResource {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResource
		return ret
	}).(PrivateEndpointResourceOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourcePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResource) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponse struct {
	// The ARM identifier for Private Endpoint
	Id string `pulumi:"id"`
	// The subnetId that the private endpoint is connected to.
	SubnetArmId *string `pulumi:"subnetArmId"`
}

// The PE network resource that is linked to this PE connection.
type PrivateEndpointResourceResponseOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutput() PrivateEndpointResourceResponseOutput {
	return o
}

func (o PrivateEndpointResourceResponseOutput) ToPrivateEndpointResourceResponseOutputWithContext(ctx context.Context) PrivateEndpointResourceResponseOutput {
	return o
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponseOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateEndpointResourceResponse) *string { return v.SubnetArmId }).(pulumi.StringPtrOutput)
}

type PrivateEndpointResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateEndpointResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointResourceResponse)(nil)).Elem()
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutput() PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) ToPrivateEndpointResourceResponsePtrOutputWithContext(ctx context.Context) PrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o PrivateEndpointResourceResponsePtrOutput) Elem() PrivateEndpointResourceResponseOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) PrivateEndpointResourceResponse {
		if v != nil {
			return *v
		}
		var ret PrivateEndpointResourceResponse
		return ret
	}).(PrivateEndpointResourceResponseOutput)
}

// The ARM identifier for Private Endpoint
func (o PrivateEndpointResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o PrivateEndpointResourceResponsePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionState struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status *string `pulumi:"status"`
}

// PrivateLinkServiceConnectionStateInput is an input type that accepts PrivateLinkServiceConnectionStateArgs and PrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStateInput` via:
//
//	PrivateLinkServiceConnectionStateArgs{...}
type PrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput
	ToPrivateLinkServiceConnectionStateOutputWithContext(context.Context) PrivateLinkServiceConnectionStateOutput
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateArgs struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (PrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return i.ToPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput)
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i PrivateLinkServiceConnectionStateArgs) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStateOutput).ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// PrivateLinkServiceConnectionStatePtrInput is an input type that accepts PrivateLinkServiceConnectionStateArgs, PrivateLinkServiceConnectionStatePtr and PrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `PrivateLinkServiceConnectionStatePtrInput` via:
//
//	        PrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type PrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput
	ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) PrivateLinkServiceConnectionStatePtrOutput
}

type privateLinkServiceConnectionStatePtrType PrivateLinkServiceConnectionStateArgs

func PrivateLinkServiceConnectionStatePtr(v *PrivateLinkServiceConnectionStateArgs) PrivateLinkServiceConnectionStatePtrInput {
	return (*privateLinkServiceConnectionStatePtrType)(v)
}

func (*privateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return i.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *privateLinkServiceConnectionStatePtrType) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateLinkServiceConnectionStatePtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutput() PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o.ToPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o PrivateLinkServiceConnectionStateOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateLinkServiceConnectionState) *PrivateLinkServiceConnectionState {
		return &v
	}).(PrivateLinkServiceConnectionStatePtrOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o PrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o PrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o PrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutput() PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) ToPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStatePtrOutput) Elem() PrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) PrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionState
		return ret
	}).(PrivateLinkServiceConnectionStateOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o PrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o PrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o PrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponse struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status *string `pulumi:"status"`
}

// A collection of information about the state of the connection between service consumer and provider.
type PrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutput() PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponseOutput) ToPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o PrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o PrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o PrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type PrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutput() PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ToPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) PrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Elem() PrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) PrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret PrivateLinkServiceConnectionStateResponse
		return ret
	}).(PrivateLinkServiceConnectionStateResponseOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o PrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettings struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettings
func (val *ProbeSettings) Defaults() *ProbeSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// ProbeSettingsInput is an input type that accepts ProbeSettingsArgs and ProbeSettingsOutput values.
// You can construct a concrete instance of `ProbeSettingsInput` via:
//
//	ProbeSettingsArgs{...}
type ProbeSettingsInput interface {
	pulumi.Input

	ToProbeSettingsOutput() ProbeSettingsOutput
	ToProbeSettingsOutputWithContext(context.Context) ProbeSettingsOutput
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsArgs struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay pulumi.StringPtrInput `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsArgs
func (val *ProbeSettingsArgs) Defaults() *ProbeSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		tmp.FailureThreshold = pulumi.IntPtr(30)
	}
	if tmp.Period == nil {
		tmp.Period = pulumi.StringPtr("PT10S")
	}
	if tmp.SuccessThreshold == nil {
		tmp.SuccessThreshold = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT2S")
	}
	return &tmp
}
func (ProbeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (i ProbeSettingsArgs) ToProbeSettingsOutput() ProbeSettingsOutput {
	return i.ToProbeSettingsOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput)
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput).ToProbeSettingsPtrOutputWithContext(ctx)
}

// ProbeSettingsPtrInput is an input type that accepts ProbeSettingsArgs, ProbeSettingsPtr and ProbeSettingsPtrOutput values.
// You can construct a concrete instance of `ProbeSettingsPtrInput` via:
//
//	        ProbeSettingsArgs{...}
//
//	or:
//
//	        nil
type ProbeSettingsPtrInput interface {
	pulumi.Input

	ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput
	ToProbeSettingsPtrOutputWithContext(context.Context) ProbeSettingsPtrOutput
}

type probeSettingsPtrType ProbeSettingsArgs

func ProbeSettingsPtr(v *ProbeSettingsArgs) ProbeSettingsPtrInput {
	return (*probeSettingsPtrType)(v)
}

func (*probeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsOutput struct{ *pulumi.OutputState }

func (ProbeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsOutput) ToProbeSettingsOutput() ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbeSettings) *ProbeSettings {
		return &v
	}).(ProbeSettingsPtrOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) Elem() ProbeSettingsOutput {
	return o.ApplyT(func(v *ProbeSettings) ProbeSettings {
		if v != nil {
			return *v
		}
		var ret ProbeSettings
		return ret
	}).(ProbeSettingsOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsPtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponse struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsResponse
func (val *ProbeSettingsResponse) Defaults() *ProbeSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponseOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutput() ProbeSettingsResponseOutput {
	return o
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutputWithContext(ctx context.Context) ProbeSettingsResponseOutput {
	return o
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponseOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutput() ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutputWithContext(ctx context.Context) ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) Elem() ProbeSettingsResponseOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) ProbeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ProbeSettingsResponse
		return ret
	}).(ProbeSettingsResponseOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Progress metrics definition
type ProgressMetricsResponse struct {
	// The completed datapoint count.
	CompletedDatapointCount float64 `pulumi:"completedDatapointCount"`
	// The time of last successful incremental data refresh in UTC.
	IncrementalDataLastRefreshDateTime string `pulumi:"incrementalDataLastRefreshDateTime"`
	// The skipped datapoint count.
	SkippedDatapointCount float64 `pulumi:"skippedDatapointCount"`
	// The total datapoint count.
	TotalDatapointCount float64 `pulumi:"totalDatapointCount"`
}

// Progress metrics definition
type ProgressMetricsResponseOutput struct{ *pulumi.OutputState }

func (ProgressMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressMetricsResponse)(nil)).Elem()
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutput() ProgressMetricsResponseOutput {
	return o
}

func (o ProgressMetricsResponseOutput) ToProgressMetricsResponseOutputWithContext(ctx context.Context) ProgressMetricsResponseOutput {
	return o
}

// The completed datapoint count.
func (o ProgressMetricsResponseOutput) CompletedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.CompletedDatapointCount }).(pulumi.Float64Output)
}

// The time of last successful incremental data refresh in UTC.
func (o ProgressMetricsResponseOutput) IncrementalDataLastRefreshDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ProgressMetricsResponse) string { return v.IncrementalDataLastRefreshDateTime }).(pulumi.StringOutput)
}

// The skipped datapoint count.
func (o ProgressMetricsResponseOutput) SkippedDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.SkippedDatapointCount }).(pulumi.Float64Output)
}

// The total datapoint count.
func (o ProgressMetricsResponseOutput) TotalDatapointCount() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressMetricsResponse) float64 { return v.TotalDatapointCount }).(pulumi.Float64Output)
}

// PyTorch distribution configuration.
type PyTorch struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorchInput is an input type that accepts PyTorchArgs and PyTorchOutput values.
// You can construct a concrete instance of `PyTorchInput` via:
//
//	PyTorchArgs{...}
type PyTorchInput interface {
	pulumi.Input

	ToPyTorchOutput() PyTorchOutput
	ToPyTorchOutputWithContext(context.Context) PyTorchOutput
}

// PyTorch distribution configuration.
type PyTorchArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (PyTorchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (i PyTorchArgs) ToPyTorchOutput() PyTorchOutput {
	return i.ToPyTorchOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput)
}

func (i PyTorchArgs) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput).ToPyTorchPtrOutputWithContext(ctx)
}

// PyTorchPtrInput is an input type that accepts PyTorchArgs, PyTorchPtr and PyTorchPtrOutput values.
// You can construct a concrete instance of `PyTorchPtrInput` via:
//
//	        PyTorchArgs{...}
//
//	or:
//
//	        nil
type PyTorchPtrInput interface {
	pulumi.Input

	ToPyTorchPtrOutput() PyTorchPtrOutput
	ToPyTorchPtrOutputWithContext(context.Context) PyTorchPtrOutput
}

type pyTorchPtrType PyTorchArgs

func PyTorchPtr(v *PyTorchArgs) PyTorchPtrInput {
	return (*pyTorchPtrType)(v)
}

func (*pyTorchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (i *pyTorchPtrType) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i *pyTorchPtrType) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchOutput struct{ *pulumi.OutputState }

func (PyTorchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (o PyTorchOutput) ToPyTorchOutput() PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o.ToPyTorchPtrOutputWithContext(context.Background())
}

func (o PyTorchOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PyTorch) *PyTorch {
		return &v
	}).(PyTorchPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorch) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorch) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchPtrOutput struct{ *pulumi.OutputState }

func (PyTorchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) Elem() PyTorchOutput {
	return o.ApplyT(func(v *PyTorch) PyTorch {
		if v != nil {
			return *v
		}
		var ret PyTorch
		return ret
	}).(PyTorchOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorch) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorch) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorch distribution configuration.
type PyTorchResponseOutput struct{ *pulumi.OutputState }

func (PyTorchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutput() PyTorchResponseOutput {
	return o
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutputWithContext(ctx context.Context) PyTorchResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchResponsePtrOutput struct{ *pulumi.OutputState }

func (PyTorchResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutput() PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutputWithContext(ctx context.Context) PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) Elem() PyTorchResponseOutput {
	return o.ApplyT(func(v *PyTorchResponse) PyTorchResponse {
		if v != nil {
			return *v
		}
		var ret PyTorchResponse
		return ret
	}).(PyTorchResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

type QueueSettings struct {
	// Controls the compute job tier
	JobTier *string `pulumi:"jobTier"`
	// Controls the priority of the job on a compute.
	Priority *int `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for QueueSettings
func (val *QueueSettings) Defaults() *QueueSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.JobTier == nil {
		jobTier_ := "Null"
		tmp.JobTier = &jobTier_
	}
	return &tmp
}

// QueueSettingsInput is an input type that accepts QueueSettingsArgs and QueueSettingsOutput values.
// You can construct a concrete instance of `QueueSettingsInput` via:
//
//	QueueSettingsArgs{...}
type QueueSettingsInput interface {
	pulumi.Input

	ToQueueSettingsOutput() QueueSettingsOutput
	ToQueueSettingsOutputWithContext(context.Context) QueueSettingsOutput
}

type QueueSettingsArgs struct {
	// Controls the compute job tier
	JobTier pulumi.StringPtrInput `pulumi:"jobTier"`
	// Controls the priority of the job on a compute.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for QueueSettingsArgs
func (val *QueueSettingsArgs) Defaults() *QueueSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.JobTier == nil {
		tmp.JobTier = pulumi.StringPtr("Null")
	}
	return &tmp
}
func (QueueSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSettings)(nil)).Elem()
}

func (i QueueSettingsArgs) ToQueueSettingsOutput() QueueSettingsOutput {
	return i.ToQueueSettingsOutputWithContext(context.Background())
}

func (i QueueSettingsArgs) ToQueueSettingsOutputWithContext(ctx context.Context) QueueSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsOutput)
}

func (i QueueSettingsArgs) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return i.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (i QueueSettingsArgs) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsOutput).ToQueueSettingsPtrOutputWithContext(ctx)
}

// QueueSettingsPtrInput is an input type that accepts QueueSettingsArgs, QueueSettingsPtr and QueueSettingsPtrOutput values.
// You can construct a concrete instance of `QueueSettingsPtrInput` via:
//
//	        QueueSettingsArgs{...}
//
//	or:
//
//	        nil
type QueueSettingsPtrInput interface {
	pulumi.Input

	ToQueueSettingsPtrOutput() QueueSettingsPtrOutput
	ToQueueSettingsPtrOutputWithContext(context.Context) QueueSettingsPtrOutput
}

type queueSettingsPtrType QueueSettingsArgs

func QueueSettingsPtr(v *QueueSettingsArgs) QueueSettingsPtrInput {
	return (*queueSettingsPtrType)(v)
}

func (*queueSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSettings)(nil)).Elem()
}

func (i *queueSettingsPtrType) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return i.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (i *queueSettingsPtrType) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsPtrOutput)
}

type QueueSettingsOutput struct{ *pulumi.OutputState }

func (QueueSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSettings)(nil)).Elem()
}

func (o QueueSettingsOutput) ToQueueSettingsOutput() QueueSettingsOutput {
	return o
}

func (o QueueSettingsOutput) ToQueueSettingsOutputWithContext(ctx context.Context) QueueSettingsOutput {
	return o
}

func (o QueueSettingsOutput) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return o.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (o QueueSettingsOutput) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueSettings) *QueueSettings {
		return &v
	}).(QueueSettingsPtrOutput)
}

// Controls the compute job tier
func (o QueueSettingsOutput) JobTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueSettings) *string { return v.JobTier }).(pulumi.StringPtrOutput)
}

// Controls the priority of the job on a compute.
func (o QueueSettingsOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueSettings) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type QueueSettingsPtrOutput struct{ *pulumi.OutputState }

func (QueueSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSettings)(nil)).Elem()
}

func (o QueueSettingsPtrOutput) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return o
}

func (o QueueSettingsPtrOutput) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return o
}

func (o QueueSettingsPtrOutput) Elem() QueueSettingsOutput {
	return o.ApplyT(func(v *QueueSettings) QueueSettings {
		if v != nil {
			return *v
		}
		var ret QueueSettings
		return ret
	}).(QueueSettingsOutput)
}

// Controls the compute job tier
func (o QueueSettingsPtrOutput) JobTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueSettings) *string {
		if v == nil {
			return nil
		}
		return v.JobTier
	}).(pulumi.StringPtrOutput)
}

// Controls the priority of the job on a compute.
func (o QueueSettingsPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueSettings) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

type QueueSettingsResponse struct {
	// Controls the compute job tier
	JobTier *string `pulumi:"jobTier"`
	// Controls the priority of the job on a compute.
	Priority *int `pulumi:"priority"`
}

// Defaults sets the appropriate defaults for QueueSettingsResponse
func (val *QueueSettingsResponse) Defaults() *QueueSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.JobTier == nil {
		jobTier_ := "Null"
		tmp.JobTier = &jobTier_
	}
	return &tmp
}

type QueueSettingsResponseOutput struct{ *pulumi.OutputState }

func (QueueSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSettingsResponse)(nil)).Elem()
}

func (o QueueSettingsResponseOutput) ToQueueSettingsResponseOutput() QueueSettingsResponseOutput {
	return o
}

func (o QueueSettingsResponseOutput) ToQueueSettingsResponseOutputWithContext(ctx context.Context) QueueSettingsResponseOutput {
	return o
}

// Controls the compute job tier
func (o QueueSettingsResponseOutput) JobTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueSettingsResponse) *string { return v.JobTier }).(pulumi.StringPtrOutput)
}

// Controls the priority of the job on a compute.
func (o QueueSettingsResponseOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueSettingsResponse) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type QueueSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (QueueSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSettingsResponse)(nil)).Elem()
}

func (o QueueSettingsResponsePtrOutput) ToQueueSettingsResponsePtrOutput() QueueSettingsResponsePtrOutput {
	return o
}

func (o QueueSettingsResponsePtrOutput) ToQueueSettingsResponsePtrOutputWithContext(ctx context.Context) QueueSettingsResponsePtrOutput {
	return o
}

func (o QueueSettingsResponsePtrOutput) Elem() QueueSettingsResponseOutput {
	return o.ApplyT(func(v *QueueSettingsResponse) QueueSettingsResponse {
		if v != nil {
			return *v
		}
		var ret QueueSettingsResponse
		return ret
	}).(QueueSettingsResponseOutput)
}

// Controls the compute job tier
func (o QueueSettingsResponsePtrOutput) JobTier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.JobTier
	}).(pulumi.StringPtrOutput)
}

// Controls the priority of the job on a compute.
func (o QueueSettingsResponsePtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.IntPtrOutput)
}

// Azure OpenAI blocklist config.
type RaiBlocklistConfig struct {
	// If blocking would occur.
	Blocking *bool `pulumi:"blocking"`
	// Name of ContentFilter.
	BlocklistName *string `pulumi:"blocklistName"`
}

// RaiBlocklistConfigInput is an input type that accepts RaiBlocklistConfigArgs and RaiBlocklistConfigOutput values.
// You can construct a concrete instance of `RaiBlocklistConfigInput` via:
//
//	RaiBlocklistConfigArgs{...}
type RaiBlocklistConfigInput interface {
	pulumi.Input

	ToRaiBlocklistConfigOutput() RaiBlocklistConfigOutput
	ToRaiBlocklistConfigOutputWithContext(context.Context) RaiBlocklistConfigOutput
}

// Azure OpenAI blocklist config.
type RaiBlocklistConfigArgs struct {
	// If blocking would occur.
	Blocking pulumi.BoolPtrInput `pulumi:"blocking"`
	// Name of ContentFilter.
	BlocklistName pulumi.StringPtrInput `pulumi:"blocklistName"`
}

func (RaiBlocklistConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistConfig)(nil)).Elem()
}

func (i RaiBlocklistConfigArgs) ToRaiBlocklistConfigOutput() RaiBlocklistConfigOutput {
	return i.ToRaiBlocklistConfigOutputWithContext(context.Background())
}

func (i RaiBlocklistConfigArgs) ToRaiBlocklistConfigOutputWithContext(ctx context.Context) RaiBlocklistConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiBlocklistConfigOutput)
}

// RaiBlocklistConfigArrayInput is an input type that accepts RaiBlocklistConfigArray and RaiBlocklistConfigArrayOutput values.
// You can construct a concrete instance of `RaiBlocklistConfigArrayInput` via:
//
//	RaiBlocklistConfigArray{ RaiBlocklistConfigArgs{...} }
type RaiBlocklistConfigArrayInput interface {
	pulumi.Input

	ToRaiBlocklistConfigArrayOutput() RaiBlocklistConfigArrayOutput
	ToRaiBlocklistConfigArrayOutputWithContext(context.Context) RaiBlocklistConfigArrayOutput
}

type RaiBlocklistConfigArray []RaiBlocklistConfigInput

func (RaiBlocklistConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiBlocklistConfig)(nil)).Elem()
}

func (i RaiBlocklistConfigArray) ToRaiBlocklistConfigArrayOutput() RaiBlocklistConfigArrayOutput {
	return i.ToRaiBlocklistConfigArrayOutputWithContext(context.Background())
}

func (i RaiBlocklistConfigArray) ToRaiBlocklistConfigArrayOutputWithContext(ctx context.Context) RaiBlocklistConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiBlocklistConfigArrayOutput)
}

// Azure OpenAI blocklist config.
type RaiBlocklistConfigOutput struct{ *pulumi.OutputState }

func (RaiBlocklistConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistConfig)(nil)).Elem()
}

func (o RaiBlocklistConfigOutput) ToRaiBlocklistConfigOutput() RaiBlocklistConfigOutput {
	return o
}

func (o RaiBlocklistConfigOutput) ToRaiBlocklistConfigOutputWithContext(ctx context.Context) RaiBlocklistConfigOutput {
	return o
}

// If blocking would occur.
func (o RaiBlocklistConfigOutput) Blocking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiBlocklistConfig) *bool { return v.Blocking }).(pulumi.BoolPtrOutput)
}

// Name of ContentFilter.
func (o RaiBlocklistConfigOutput) BlocklistName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistConfig) *string { return v.BlocklistName }).(pulumi.StringPtrOutput)
}

type RaiBlocklistConfigArrayOutput struct{ *pulumi.OutputState }

func (RaiBlocklistConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiBlocklistConfig)(nil)).Elem()
}

func (o RaiBlocklistConfigArrayOutput) ToRaiBlocklistConfigArrayOutput() RaiBlocklistConfigArrayOutput {
	return o
}

func (o RaiBlocklistConfigArrayOutput) ToRaiBlocklistConfigArrayOutputWithContext(ctx context.Context) RaiBlocklistConfigArrayOutput {
	return o
}

func (o RaiBlocklistConfigArrayOutput) Index(i pulumi.IntInput) RaiBlocklistConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RaiBlocklistConfig {
		return vs[0].([]RaiBlocklistConfig)[vs[1].(int)]
	}).(RaiBlocklistConfigOutput)
}

// Azure OpenAI blocklist config.
type RaiBlocklistConfigResponse struct {
	// If blocking would occur.
	Blocking *bool `pulumi:"blocking"`
	// Name of ContentFilter.
	BlocklistName *string `pulumi:"blocklistName"`
}

// Azure OpenAI blocklist config.
type RaiBlocklistConfigResponseOutput struct{ *pulumi.OutputState }

func (RaiBlocklistConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistConfigResponse)(nil)).Elem()
}

func (o RaiBlocklistConfigResponseOutput) ToRaiBlocklistConfigResponseOutput() RaiBlocklistConfigResponseOutput {
	return o
}

func (o RaiBlocklistConfigResponseOutput) ToRaiBlocklistConfigResponseOutputWithContext(ctx context.Context) RaiBlocklistConfigResponseOutput {
	return o
}

// If blocking would occur.
func (o RaiBlocklistConfigResponseOutput) Blocking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiBlocklistConfigResponse) *bool { return v.Blocking }).(pulumi.BoolPtrOutput)
}

// Name of ContentFilter.
func (o RaiBlocklistConfigResponseOutput) BlocklistName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistConfigResponse) *string { return v.BlocklistName }).(pulumi.StringPtrOutput)
}

type RaiBlocklistConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (RaiBlocklistConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiBlocklistConfigResponse)(nil)).Elem()
}

func (o RaiBlocklistConfigResponseArrayOutput) ToRaiBlocklistConfigResponseArrayOutput() RaiBlocklistConfigResponseArrayOutput {
	return o
}

func (o RaiBlocklistConfigResponseArrayOutput) ToRaiBlocklistConfigResponseArrayOutputWithContext(ctx context.Context) RaiBlocklistConfigResponseArrayOutput {
	return o
}

func (o RaiBlocklistConfigResponseArrayOutput) Index(i pulumi.IntInput) RaiBlocklistConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RaiBlocklistConfigResponse {
		return vs[0].([]RaiBlocklistConfigResponse)[vs[1].(int)]
	}).(RaiBlocklistConfigResponseOutput)
}

// RAI Custom Blocklist Item properties.
type RaiBlocklistItemProperties struct {
	// If the pattern is a regex pattern.
	IsRegex *bool `pulumi:"isRegex"`
	// Pattern to match against.
	Pattern *string `pulumi:"pattern"`
}

// RaiBlocklistItemPropertiesInput is an input type that accepts RaiBlocklistItemPropertiesArgs and RaiBlocklistItemPropertiesOutput values.
// You can construct a concrete instance of `RaiBlocklistItemPropertiesInput` via:
//
//	RaiBlocklistItemPropertiesArgs{...}
type RaiBlocklistItemPropertiesInput interface {
	pulumi.Input

	ToRaiBlocklistItemPropertiesOutput() RaiBlocklistItemPropertiesOutput
	ToRaiBlocklistItemPropertiesOutputWithContext(context.Context) RaiBlocklistItemPropertiesOutput
}

// RAI Custom Blocklist Item properties.
type RaiBlocklistItemPropertiesArgs struct {
	// If the pattern is a regex pattern.
	IsRegex pulumi.BoolPtrInput `pulumi:"isRegex"`
	// Pattern to match against.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (RaiBlocklistItemPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistItemProperties)(nil)).Elem()
}

func (i RaiBlocklistItemPropertiesArgs) ToRaiBlocklistItemPropertiesOutput() RaiBlocklistItemPropertiesOutput {
	return i.ToRaiBlocklistItemPropertiesOutputWithContext(context.Background())
}

func (i RaiBlocklistItemPropertiesArgs) ToRaiBlocklistItemPropertiesOutputWithContext(ctx context.Context) RaiBlocklistItemPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiBlocklistItemPropertiesOutput)
}

// RAI Custom Blocklist Item properties.
type RaiBlocklistItemPropertiesOutput struct{ *pulumi.OutputState }

func (RaiBlocklistItemPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistItemProperties)(nil)).Elem()
}

func (o RaiBlocklistItemPropertiesOutput) ToRaiBlocklistItemPropertiesOutput() RaiBlocklistItemPropertiesOutput {
	return o
}

func (o RaiBlocklistItemPropertiesOutput) ToRaiBlocklistItemPropertiesOutputWithContext(ctx context.Context) RaiBlocklistItemPropertiesOutput {
	return o
}

// If the pattern is a regex pattern.
func (o RaiBlocklistItemPropertiesOutput) IsRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiBlocklistItemProperties) *bool { return v.IsRegex }).(pulumi.BoolPtrOutput)
}

// Pattern to match against.
func (o RaiBlocklistItemPropertiesOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistItemProperties) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// RAI Custom Blocklist Item properties.
type RaiBlocklistItemPropertiesResponse struct {
	// If the pattern is a regex pattern.
	IsRegex *bool `pulumi:"isRegex"`
	// Pattern to match against.
	Pattern *string `pulumi:"pattern"`
}

// RAI Custom Blocklist Item properties.
type RaiBlocklistItemPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RaiBlocklistItemPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistItemPropertiesResponse)(nil)).Elem()
}

func (o RaiBlocklistItemPropertiesResponseOutput) ToRaiBlocklistItemPropertiesResponseOutput() RaiBlocklistItemPropertiesResponseOutput {
	return o
}

func (o RaiBlocklistItemPropertiesResponseOutput) ToRaiBlocklistItemPropertiesResponseOutputWithContext(ctx context.Context) RaiBlocklistItemPropertiesResponseOutput {
	return o
}

// If the pattern is a regex pattern.
func (o RaiBlocklistItemPropertiesResponseOutput) IsRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiBlocklistItemPropertiesResponse) *bool { return v.IsRegex }).(pulumi.BoolPtrOutput)
}

// Pattern to match against.
func (o RaiBlocklistItemPropertiesResponseOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistItemPropertiesResponse) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// RAI Custom Blocklist properties.
type RaiBlocklistProperties struct {
	// Description of the block list.
	Description *string `pulumi:"description"`
}

// RaiBlocklistPropertiesInput is an input type that accepts RaiBlocklistPropertiesArgs and RaiBlocklistPropertiesOutput values.
// You can construct a concrete instance of `RaiBlocklistPropertiesInput` via:
//
//	RaiBlocklistPropertiesArgs{...}
type RaiBlocklistPropertiesInput interface {
	pulumi.Input

	ToRaiBlocklistPropertiesOutput() RaiBlocklistPropertiesOutput
	ToRaiBlocklistPropertiesOutputWithContext(context.Context) RaiBlocklistPropertiesOutput
}

// RAI Custom Blocklist properties.
type RaiBlocklistPropertiesArgs struct {
	// Description of the block list.
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (RaiBlocklistPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistProperties)(nil)).Elem()
}

func (i RaiBlocklistPropertiesArgs) ToRaiBlocklistPropertiesOutput() RaiBlocklistPropertiesOutput {
	return i.ToRaiBlocklistPropertiesOutputWithContext(context.Background())
}

func (i RaiBlocklistPropertiesArgs) ToRaiBlocklistPropertiesOutputWithContext(ctx context.Context) RaiBlocklistPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiBlocklistPropertiesOutput)
}

// RAI Custom Blocklist properties.
type RaiBlocklistPropertiesOutput struct{ *pulumi.OutputState }

func (RaiBlocklistPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistProperties)(nil)).Elem()
}

func (o RaiBlocklistPropertiesOutput) ToRaiBlocklistPropertiesOutput() RaiBlocklistPropertiesOutput {
	return o
}

func (o RaiBlocklistPropertiesOutput) ToRaiBlocklistPropertiesOutputWithContext(ctx context.Context) RaiBlocklistPropertiesOutput {
	return o
}

// Description of the block list.
func (o RaiBlocklistPropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// RAI Custom Blocklist properties.
type RaiBlocklistPropertiesResponse struct {
	// Description of the block list.
	Description *string `pulumi:"description"`
}

// RAI Custom Blocklist properties.
type RaiBlocklistPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RaiBlocklistPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiBlocklistPropertiesResponse)(nil)).Elem()
}

func (o RaiBlocklistPropertiesResponseOutput) ToRaiBlocklistPropertiesResponseOutput() RaiBlocklistPropertiesResponseOutput {
	return o
}

func (o RaiBlocklistPropertiesResponseOutput) ToRaiBlocklistPropertiesResponseOutputWithContext(ctx context.Context) RaiBlocklistPropertiesResponseOutput {
	return o
}

// Description of the block list.
func (o RaiBlocklistPropertiesResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiBlocklistPropertiesResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure OpenAI Content Filter.
type RaiPolicyContentFilter struct {
	// Level at which content is filtered.
	AllowedContentLevel *string `pulumi:"allowedContentLevel"`
	// If blocking would occur.
	Blocking *bool `pulumi:"blocking"`
	// If the ContentFilter is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of ContentFilter.
	Name *string `pulumi:"name"`
	// Content source to apply the Content Filters.
	Source *string `pulumi:"source"`
}

// RaiPolicyContentFilterInput is an input type that accepts RaiPolicyContentFilterArgs and RaiPolicyContentFilterOutput values.
// You can construct a concrete instance of `RaiPolicyContentFilterInput` via:
//
//	RaiPolicyContentFilterArgs{...}
type RaiPolicyContentFilterInput interface {
	pulumi.Input

	ToRaiPolicyContentFilterOutput() RaiPolicyContentFilterOutput
	ToRaiPolicyContentFilterOutputWithContext(context.Context) RaiPolicyContentFilterOutput
}

// Azure OpenAI Content Filter.
type RaiPolicyContentFilterArgs struct {
	// Level at which content is filtered.
	AllowedContentLevel pulumi.StringPtrInput `pulumi:"allowedContentLevel"`
	// If blocking would occur.
	Blocking pulumi.BoolPtrInput `pulumi:"blocking"`
	// If the ContentFilter is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Name of ContentFilter.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Content source to apply the Content Filters.
	Source pulumi.StringPtrInput `pulumi:"source"`
}

func (RaiPolicyContentFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyContentFilter)(nil)).Elem()
}

func (i RaiPolicyContentFilterArgs) ToRaiPolicyContentFilterOutput() RaiPolicyContentFilterOutput {
	return i.ToRaiPolicyContentFilterOutputWithContext(context.Background())
}

func (i RaiPolicyContentFilterArgs) ToRaiPolicyContentFilterOutputWithContext(ctx context.Context) RaiPolicyContentFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiPolicyContentFilterOutput)
}

// RaiPolicyContentFilterArrayInput is an input type that accepts RaiPolicyContentFilterArray and RaiPolicyContentFilterArrayOutput values.
// You can construct a concrete instance of `RaiPolicyContentFilterArrayInput` via:
//
//	RaiPolicyContentFilterArray{ RaiPolicyContentFilterArgs{...} }
type RaiPolicyContentFilterArrayInput interface {
	pulumi.Input

	ToRaiPolicyContentFilterArrayOutput() RaiPolicyContentFilterArrayOutput
	ToRaiPolicyContentFilterArrayOutputWithContext(context.Context) RaiPolicyContentFilterArrayOutput
}

type RaiPolicyContentFilterArray []RaiPolicyContentFilterInput

func (RaiPolicyContentFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiPolicyContentFilter)(nil)).Elem()
}

func (i RaiPolicyContentFilterArray) ToRaiPolicyContentFilterArrayOutput() RaiPolicyContentFilterArrayOutput {
	return i.ToRaiPolicyContentFilterArrayOutputWithContext(context.Background())
}

func (i RaiPolicyContentFilterArray) ToRaiPolicyContentFilterArrayOutputWithContext(ctx context.Context) RaiPolicyContentFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiPolicyContentFilterArrayOutput)
}

// Azure OpenAI Content Filter.
type RaiPolicyContentFilterOutput struct{ *pulumi.OutputState }

func (RaiPolicyContentFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyContentFilter)(nil)).Elem()
}

func (o RaiPolicyContentFilterOutput) ToRaiPolicyContentFilterOutput() RaiPolicyContentFilterOutput {
	return o
}

func (o RaiPolicyContentFilterOutput) ToRaiPolicyContentFilterOutputWithContext(ctx context.Context) RaiPolicyContentFilterOutput {
	return o
}

// Level at which content is filtered.
func (o RaiPolicyContentFilterOutput) AllowedContentLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilter) *string { return v.AllowedContentLevel }).(pulumi.StringPtrOutput)
}

// If blocking would occur.
func (o RaiPolicyContentFilterOutput) Blocking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilter) *bool { return v.Blocking }).(pulumi.BoolPtrOutput)
}

// If the ContentFilter is enabled.
func (o RaiPolicyContentFilterOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilter) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of ContentFilter.
func (o RaiPolicyContentFilterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Content source to apply the Content Filters.
func (o RaiPolicyContentFilterOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilter) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type RaiPolicyContentFilterArrayOutput struct{ *pulumi.OutputState }

func (RaiPolicyContentFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiPolicyContentFilter)(nil)).Elem()
}

func (o RaiPolicyContentFilterArrayOutput) ToRaiPolicyContentFilterArrayOutput() RaiPolicyContentFilterArrayOutput {
	return o
}

func (o RaiPolicyContentFilterArrayOutput) ToRaiPolicyContentFilterArrayOutputWithContext(ctx context.Context) RaiPolicyContentFilterArrayOutput {
	return o
}

func (o RaiPolicyContentFilterArrayOutput) Index(i pulumi.IntInput) RaiPolicyContentFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RaiPolicyContentFilter {
		return vs[0].([]RaiPolicyContentFilter)[vs[1].(int)]
	}).(RaiPolicyContentFilterOutput)
}

// Azure OpenAI Content Filter.
type RaiPolicyContentFilterResponse struct {
	// Level at which content is filtered.
	AllowedContentLevel *string `pulumi:"allowedContentLevel"`
	// If blocking would occur.
	Blocking *bool `pulumi:"blocking"`
	// If the ContentFilter is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Name of ContentFilter.
	Name *string `pulumi:"name"`
	// Content source to apply the Content Filters.
	Source *string `pulumi:"source"`
}

// Azure OpenAI Content Filter.
type RaiPolicyContentFilterResponseOutput struct{ *pulumi.OutputState }

func (RaiPolicyContentFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyContentFilterResponse)(nil)).Elem()
}

func (o RaiPolicyContentFilterResponseOutput) ToRaiPolicyContentFilterResponseOutput() RaiPolicyContentFilterResponseOutput {
	return o
}

func (o RaiPolicyContentFilterResponseOutput) ToRaiPolicyContentFilterResponseOutputWithContext(ctx context.Context) RaiPolicyContentFilterResponseOutput {
	return o
}

// Level at which content is filtered.
func (o RaiPolicyContentFilterResponseOutput) AllowedContentLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilterResponse) *string { return v.AllowedContentLevel }).(pulumi.StringPtrOutput)
}

// If blocking would occur.
func (o RaiPolicyContentFilterResponseOutput) Blocking() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilterResponse) *bool { return v.Blocking }).(pulumi.BoolPtrOutput)
}

// If the ContentFilter is enabled.
func (o RaiPolicyContentFilterResponseOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilterResponse) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of ContentFilter.
func (o RaiPolicyContentFilterResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilterResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Content source to apply the Content Filters.
func (o RaiPolicyContentFilterResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyContentFilterResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

type RaiPolicyContentFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (RaiPolicyContentFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RaiPolicyContentFilterResponse)(nil)).Elem()
}

func (o RaiPolicyContentFilterResponseArrayOutput) ToRaiPolicyContentFilterResponseArrayOutput() RaiPolicyContentFilterResponseArrayOutput {
	return o
}

func (o RaiPolicyContentFilterResponseArrayOutput) ToRaiPolicyContentFilterResponseArrayOutputWithContext(ctx context.Context) RaiPolicyContentFilterResponseArrayOutput {
	return o
}

func (o RaiPolicyContentFilterResponseArrayOutput) Index(i pulumi.IntInput) RaiPolicyContentFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RaiPolicyContentFilterResponse {
		return vs[0].([]RaiPolicyContentFilterResponse)[vs[1].(int)]
	}).(RaiPolicyContentFilterResponseOutput)
}

// Azure OpenAI Content Filters properties.
type RaiPolicyProperties struct {
	// Name of the base Content Filters.
	BasePolicyName       *string                  `pulumi:"basePolicyName"`
	CompletionBlocklists []RaiBlocklistConfig     `pulumi:"completionBlocklists"`
	ContentFilters       []RaiPolicyContentFilter `pulumi:"contentFilters"`
	// Content Filters mode.
	Mode             *string              `pulumi:"mode"`
	PromptBlocklists []RaiBlocklistConfig `pulumi:"promptBlocklists"`
	// Content Filters policy type.
	Type *string `pulumi:"type"`
}

// RaiPolicyPropertiesInput is an input type that accepts RaiPolicyPropertiesArgs and RaiPolicyPropertiesOutput values.
// You can construct a concrete instance of `RaiPolicyPropertiesInput` via:
//
//	RaiPolicyPropertiesArgs{...}
type RaiPolicyPropertiesInput interface {
	pulumi.Input

	ToRaiPolicyPropertiesOutput() RaiPolicyPropertiesOutput
	ToRaiPolicyPropertiesOutputWithContext(context.Context) RaiPolicyPropertiesOutput
}

// Azure OpenAI Content Filters properties.
type RaiPolicyPropertiesArgs struct {
	// Name of the base Content Filters.
	BasePolicyName       pulumi.StringPtrInput            `pulumi:"basePolicyName"`
	CompletionBlocklists RaiBlocklistConfigArrayInput     `pulumi:"completionBlocklists"`
	ContentFilters       RaiPolicyContentFilterArrayInput `pulumi:"contentFilters"`
	// Content Filters mode.
	Mode             pulumi.StringPtrInput        `pulumi:"mode"`
	PromptBlocklists RaiBlocklistConfigArrayInput `pulumi:"promptBlocklists"`
	// Content Filters policy type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RaiPolicyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyProperties)(nil)).Elem()
}

func (i RaiPolicyPropertiesArgs) ToRaiPolicyPropertiesOutput() RaiPolicyPropertiesOutput {
	return i.ToRaiPolicyPropertiesOutputWithContext(context.Background())
}

func (i RaiPolicyPropertiesArgs) ToRaiPolicyPropertiesOutputWithContext(ctx context.Context) RaiPolicyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RaiPolicyPropertiesOutput)
}

// Azure OpenAI Content Filters properties.
type RaiPolicyPropertiesOutput struct{ *pulumi.OutputState }

func (RaiPolicyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyProperties)(nil)).Elem()
}

func (o RaiPolicyPropertiesOutput) ToRaiPolicyPropertiesOutput() RaiPolicyPropertiesOutput {
	return o
}

func (o RaiPolicyPropertiesOutput) ToRaiPolicyPropertiesOutputWithContext(ctx context.Context) RaiPolicyPropertiesOutput {
	return o
}

// Name of the base Content Filters.
func (o RaiPolicyPropertiesOutput) BasePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyProperties) *string { return v.BasePolicyName }).(pulumi.StringPtrOutput)
}

func (o RaiPolicyPropertiesOutput) CompletionBlocklists() RaiBlocklistConfigArrayOutput {
	return o.ApplyT(func(v RaiPolicyProperties) []RaiBlocklistConfig { return v.CompletionBlocklists }).(RaiBlocklistConfigArrayOutput)
}

func (o RaiPolicyPropertiesOutput) ContentFilters() RaiPolicyContentFilterArrayOutput {
	return o.ApplyT(func(v RaiPolicyProperties) []RaiPolicyContentFilter { return v.ContentFilters }).(RaiPolicyContentFilterArrayOutput)
}

// Content Filters mode.
func (o RaiPolicyPropertiesOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyProperties) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o RaiPolicyPropertiesOutput) PromptBlocklists() RaiBlocklistConfigArrayOutput {
	return o.ApplyT(func(v RaiPolicyProperties) []RaiBlocklistConfig { return v.PromptBlocklists }).(RaiBlocklistConfigArrayOutput)
}

// Content Filters policy type.
func (o RaiPolicyPropertiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyProperties) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Azure OpenAI Content Filters properties.
type RaiPolicyPropertiesResponse struct {
	// Name of the base Content Filters.
	BasePolicyName       *string                          `pulumi:"basePolicyName"`
	CompletionBlocklists []RaiBlocklistConfigResponse     `pulumi:"completionBlocklists"`
	ContentFilters       []RaiPolicyContentFilterResponse `pulumi:"contentFilters"`
	// Content Filters mode.
	Mode             *string                      `pulumi:"mode"`
	PromptBlocklists []RaiBlocklistConfigResponse `pulumi:"promptBlocklists"`
	// Content Filters policy type.
	Type *string `pulumi:"type"`
}

// Azure OpenAI Content Filters properties.
type RaiPolicyPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RaiPolicyPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RaiPolicyPropertiesResponse)(nil)).Elem()
}

func (o RaiPolicyPropertiesResponseOutput) ToRaiPolicyPropertiesResponseOutput() RaiPolicyPropertiesResponseOutput {
	return o
}

func (o RaiPolicyPropertiesResponseOutput) ToRaiPolicyPropertiesResponseOutputWithContext(ctx context.Context) RaiPolicyPropertiesResponseOutput {
	return o
}

// Name of the base Content Filters.
func (o RaiPolicyPropertiesResponseOutput) BasePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) *string { return v.BasePolicyName }).(pulumi.StringPtrOutput)
}

func (o RaiPolicyPropertiesResponseOutput) CompletionBlocklists() RaiBlocklistConfigResponseArrayOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) []RaiBlocklistConfigResponse { return v.CompletionBlocklists }).(RaiBlocklistConfigResponseArrayOutput)
}

func (o RaiPolicyPropertiesResponseOutput) ContentFilters() RaiPolicyContentFilterResponseArrayOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) []RaiPolicyContentFilterResponse { return v.ContentFilters }).(RaiPolicyContentFilterResponseArrayOutput)
}

// Content Filters mode.
func (o RaiPolicyPropertiesResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

func (o RaiPolicyPropertiesResponseOutput) PromptBlocklists() RaiBlocklistConfigResponseArrayOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) []RaiBlocklistConfigResponse { return v.PromptBlocklists }).(RaiBlocklistConfigResponseArrayOutput)
}

// Content Filters policy type.
func (o RaiPolicyPropertiesResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RaiPolicyPropertiesResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithm struct {
	// An optional positive number or e in string format to be used as base for log based random sampling
	Logbase *string `pulumi:"logbase"`
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithm
func (val *RandomSamplingAlgorithm) Defaults() *RandomSamplingAlgorithm {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// RandomSamplingAlgorithmInput is an input type that accepts RandomSamplingAlgorithmArgs and RandomSamplingAlgorithmOutput values.
// You can construct a concrete instance of `RandomSamplingAlgorithmInput` via:
//
//	RandomSamplingAlgorithmArgs{...}
type RandomSamplingAlgorithmInput interface {
	pulumi.Input

	ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput
	ToRandomSamplingAlgorithmOutputWithContext(context.Context) RandomSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmArgs struct {
	// An optional positive number or e in string format to be used as base for log based random sampling
	Logbase pulumi.StringPtrInput `pulumi:"logbase"`
	// The specific type of random algorithm
	Rule pulumi.StringPtrInput `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed pulumi.IntPtrInput `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmArgs
func (val *RandomSamplingAlgorithmArgs) Defaults() *RandomSamplingAlgorithmArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		tmp.Rule = pulumi.StringPtr("Random")
	}
	return &tmp
}
func (RandomSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return i.ToRandomSamplingAlgorithmOutputWithContext(context.Background())
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return o
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return o
}

// An optional positive number or e in string format to be used as base for log based random sampling
func (o RandomSamplingAlgorithmOutput) Logbase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *string { return v.Logbase }).(pulumi.StringPtrOutput)
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponse struct {
	// An optional positive number or e in string format to be used as base for log based random sampling
	Logbase *string `pulumi:"logbase"`
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmResponse
func (val *RandomSamplingAlgorithmResponse) Defaults() *RandomSamplingAlgorithmResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithmResponse)(nil)).Elem()
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutput() RandomSamplingAlgorithmResponseOutput {
	return o
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutputWithContext(ctx context.Context) RandomSamplingAlgorithmResponseOutput {
	return o
}

// An optional positive number or e in string format to be used as base for log based random sampling
func (o RandomSamplingAlgorithmResponseOutput) Logbase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *string { return v.Logbase }).(pulumi.StringPtrOutput)
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmResponseOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmResponseOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Ray distribution configuration.
type Ray struct {
	// The address of Ray head node.
	Address *string `pulumi:"address"`
	// The port to bind the dashboard server to.
	DashboardPort *int `pulumi:"dashboardPort"`
	// Enum to determine the job distribution type.
	// Expected value is 'Ray'.
	DistributionType string `pulumi:"distributionType"`
	// Additional arguments passed to ray start in head node.
	HeadNodeAdditionalArgs *string `pulumi:"headNodeAdditionalArgs"`
	// Provide this argument to start the Ray dashboard GUI.
	IncludeDashboard *bool `pulumi:"includeDashboard"`
	// The port of the head ray process.
	Port *int `pulumi:"port"`
	// Additional arguments passed to ray start in worker node.
	WorkerNodeAdditionalArgs *string `pulumi:"workerNodeAdditionalArgs"`
}

// RayInput is an input type that accepts RayArgs and RayOutput values.
// You can construct a concrete instance of `RayInput` via:
//
//	RayArgs{...}
type RayInput interface {
	pulumi.Input

	ToRayOutput() RayOutput
	ToRayOutputWithContext(context.Context) RayOutput
}

// Ray distribution configuration.
type RayArgs struct {
	// The address of Ray head node.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// The port to bind the dashboard server to.
	DashboardPort pulumi.IntPtrInput `pulumi:"dashboardPort"`
	// Enum to determine the job distribution type.
	// Expected value is 'Ray'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Additional arguments passed to ray start in head node.
	HeadNodeAdditionalArgs pulumi.StringPtrInput `pulumi:"headNodeAdditionalArgs"`
	// Provide this argument to start the Ray dashboard GUI.
	IncludeDashboard pulumi.BoolPtrInput `pulumi:"includeDashboard"`
	// The port of the head ray process.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Additional arguments passed to ray start in worker node.
	WorkerNodeAdditionalArgs pulumi.StringPtrInput `pulumi:"workerNodeAdditionalArgs"`
}

func (RayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ray)(nil)).Elem()
}

func (i RayArgs) ToRayOutput() RayOutput {
	return i.ToRayOutputWithContext(context.Background())
}

func (i RayArgs) ToRayOutputWithContext(ctx context.Context) RayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RayOutput)
}

func (i RayArgs) ToRayPtrOutput() RayPtrOutput {
	return i.ToRayPtrOutputWithContext(context.Background())
}

func (i RayArgs) ToRayPtrOutputWithContext(ctx context.Context) RayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RayOutput).ToRayPtrOutputWithContext(ctx)
}

// RayPtrInput is an input type that accepts RayArgs, RayPtr and RayPtrOutput values.
// You can construct a concrete instance of `RayPtrInput` via:
//
//	        RayArgs{...}
//
//	or:
//
//	        nil
type RayPtrInput interface {
	pulumi.Input

	ToRayPtrOutput() RayPtrOutput
	ToRayPtrOutputWithContext(context.Context) RayPtrOutput
}

type rayPtrType RayArgs

func RayPtr(v *RayArgs) RayPtrInput {
	return (*rayPtrType)(v)
}

func (*rayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ray)(nil)).Elem()
}

func (i *rayPtrType) ToRayPtrOutput() RayPtrOutput {
	return i.ToRayPtrOutputWithContext(context.Background())
}

func (i *rayPtrType) ToRayPtrOutputWithContext(ctx context.Context) RayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RayPtrOutput)
}

// Ray distribution configuration.
type RayOutput struct{ *pulumi.OutputState }

func (RayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ray)(nil)).Elem()
}

func (o RayOutput) ToRayOutput() RayOutput {
	return o
}

func (o RayOutput) ToRayOutputWithContext(ctx context.Context) RayOutput {
	return o
}

func (o RayOutput) ToRayPtrOutput() RayPtrOutput {
	return o.ToRayPtrOutputWithContext(context.Background())
}

func (o RayOutput) ToRayPtrOutputWithContext(ctx context.Context) RayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ray) *Ray {
		return &v
	}).(RayPtrOutput)
}

// The address of Ray head node.
func (o RayOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ray) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The port to bind the dashboard server to.
func (o RayOutput) DashboardPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ray) *int { return v.DashboardPort }).(pulumi.IntPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Ray'.
func (o RayOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v Ray) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Additional arguments passed to ray start in head node.
func (o RayOutput) HeadNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ray) *string { return v.HeadNodeAdditionalArgs }).(pulumi.StringPtrOutput)
}

// Provide this argument to start the Ray dashboard GUI.
func (o RayOutput) IncludeDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Ray) *bool { return v.IncludeDashboard }).(pulumi.BoolPtrOutput)
}

// The port of the head ray process.
func (o RayOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ray) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional arguments passed to ray start in worker node.
func (o RayOutput) WorkerNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ray) *string { return v.WorkerNodeAdditionalArgs }).(pulumi.StringPtrOutput)
}

type RayPtrOutput struct{ *pulumi.OutputState }

func (RayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ray)(nil)).Elem()
}

func (o RayPtrOutput) ToRayPtrOutput() RayPtrOutput {
	return o
}

func (o RayPtrOutput) ToRayPtrOutputWithContext(ctx context.Context) RayPtrOutput {
	return o
}

func (o RayPtrOutput) Elem() RayOutput {
	return o.ApplyT(func(v *Ray) Ray {
		if v != nil {
			return *v
		}
		var ret Ray
		return ret
	}).(RayOutput)
}

// The address of Ray head node.
func (o RayPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ray) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The port to bind the dashboard server to.
func (o RayPtrOutput) DashboardPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ray) *int {
		if v == nil {
			return nil
		}
		return v.DashboardPort
	}).(pulumi.IntPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Ray'.
func (o RayPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ray) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Additional arguments passed to ray start in head node.
func (o RayPtrOutput) HeadNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ray) *string {
		if v == nil {
			return nil
		}
		return v.HeadNodeAdditionalArgs
	}).(pulumi.StringPtrOutput)
}

// Provide this argument to start the Ray dashboard GUI.
func (o RayPtrOutput) IncludeDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ray) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeDashboard
	}).(pulumi.BoolPtrOutput)
}

// The port of the head ray process.
func (o RayPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ray) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Additional arguments passed to ray start in worker node.
func (o RayPtrOutput) WorkerNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ray) *string {
		if v == nil {
			return nil
		}
		return v.WorkerNodeAdditionalArgs
	}).(pulumi.StringPtrOutput)
}

// Ray distribution configuration.
type RayResponse struct {
	// The address of Ray head node.
	Address *string `pulumi:"address"`
	// The port to bind the dashboard server to.
	DashboardPort *int `pulumi:"dashboardPort"`
	// Enum to determine the job distribution type.
	// Expected value is 'Ray'.
	DistributionType string `pulumi:"distributionType"`
	// Additional arguments passed to ray start in head node.
	HeadNodeAdditionalArgs *string `pulumi:"headNodeAdditionalArgs"`
	// Provide this argument to start the Ray dashboard GUI.
	IncludeDashboard *bool `pulumi:"includeDashboard"`
	// The port of the head ray process.
	Port *int `pulumi:"port"`
	// Additional arguments passed to ray start in worker node.
	WorkerNodeAdditionalArgs *string `pulumi:"workerNodeAdditionalArgs"`
}

// Ray distribution configuration.
type RayResponseOutput struct{ *pulumi.OutputState }

func (RayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RayResponse)(nil)).Elem()
}

func (o RayResponseOutput) ToRayResponseOutput() RayResponseOutput {
	return o
}

func (o RayResponseOutput) ToRayResponseOutputWithContext(ctx context.Context) RayResponseOutput {
	return o
}

// The address of Ray head node.
func (o RayResponseOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RayResponse) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// The port to bind the dashboard server to.
func (o RayResponseOutput) DashboardPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RayResponse) *int { return v.DashboardPort }).(pulumi.IntPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Ray'.
func (o RayResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v RayResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Additional arguments passed to ray start in head node.
func (o RayResponseOutput) HeadNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RayResponse) *string { return v.HeadNodeAdditionalArgs }).(pulumi.StringPtrOutput)
}

// Provide this argument to start the Ray dashboard GUI.
func (o RayResponseOutput) IncludeDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RayResponse) *bool { return v.IncludeDashboard }).(pulumi.BoolPtrOutput)
}

// The port of the head ray process.
func (o RayResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RayResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional arguments passed to ray start in worker node.
func (o RayResponseOutput) WorkerNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RayResponse) *string { return v.WorkerNodeAdditionalArgs }).(pulumi.StringPtrOutput)
}

type RayResponsePtrOutput struct{ *pulumi.OutputState }

func (RayResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RayResponse)(nil)).Elem()
}

func (o RayResponsePtrOutput) ToRayResponsePtrOutput() RayResponsePtrOutput {
	return o
}

func (o RayResponsePtrOutput) ToRayResponsePtrOutputWithContext(ctx context.Context) RayResponsePtrOutput {
	return o
}

func (o RayResponsePtrOutput) Elem() RayResponseOutput {
	return o.ApplyT(func(v *RayResponse) RayResponse {
		if v != nil {
			return *v
		}
		var ret RayResponse
		return ret
	}).(RayResponseOutput)
}

// The address of Ray head node.
func (o RayResponsePtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RayResponse) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// The port to bind the dashboard server to.
func (o RayResponsePtrOutput) DashboardPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RayResponse) *int {
		if v == nil {
			return nil
		}
		return v.DashboardPort
	}).(pulumi.IntPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Ray'.
func (o RayResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RayResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Additional arguments passed to ray start in head node.
func (o RayResponsePtrOutput) HeadNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RayResponse) *string {
		if v == nil {
			return nil
		}
		return v.HeadNodeAdditionalArgs
	}).(pulumi.StringPtrOutput)
}

// Provide this argument to start the Ray dashboard GUI.
func (o RayResponsePtrOutput) IncludeDashboard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RayResponse) *bool {
		if v == nil {
			return nil
		}
		return v.IncludeDashboard
	}).(pulumi.BoolPtrOutput)
}

// The port of the head ray process.
func (o RayResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RayResponse) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Additional arguments passed to ray start in worker node.
func (o RayResponsePtrOutput) WorkerNodeAdditionalArgs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RayResponse) *string {
		if v == nil {
			return nil
		}
		return v.WorkerNodeAdditionalArgs
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type Recurrence struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *ComputeRecurrenceSchedule `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for Recurrence
func (val *Recurrence) Defaults() *Recurrence {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceInput is an input type that accepts RecurrenceArgs and RecurrenceOutput values.
// You can construct a concrete instance of `RecurrenceInput` via:
//
//	RecurrenceArgs{...}
type RecurrenceInput interface {
	pulumi.Input

	ToRecurrenceOutput() RecurrenceOutput
	ToRecurrenceOutputWithContext(context.Context) RecurrenceOutput
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceArgs struct {
	// [Required] The frequency to trigger schedule.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule ComputeRecurrenceSchedulePtrInput `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceArgs
func (val *RecurrenceArgs) Defaults() *RecurrenceArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (i RecurrenceArgs) ToRecurrenceOutput() RecurrenceOutput {
	return i.ToRecurrenceOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput)
}

func (i RecurrenceArgs) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i RecurrenceArgs) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceOutput).ToRecurrencePtrOutputWithContext(ctx)
}

// RecurrencePtrInput is an input type that accepts RecurrenceArgs, RecurrencePtr and RecurrencePtrOutput values.
// You can construct a concrete instance of `RecurrencePtrInput` via:
//
//	        RecurrenceArgs{...}
//
//	or:
//
//	        nil
type RecurrencePtrInput interface {
	pulumi.Input

	ToRecurrencePtrOutput() RecurrencePtrOutput
	ToRecurrencePtrOutputWithContext(context.Context) RecurrencePtrOutput
}

type recurrencePtrType RecurrenceArgs

func RecurrencePtr(v *RecurrenceArgs) RecurrencePtrInput {
	return (*recurrencePtrType)(v)
}

func (*recurrencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (i *recurrencePtrType) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return i.ToRecurrencePtrOutputWithContext(context.Background())
}

func (i *recurrencePtrType) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceOutput struct{ *pulumi.OutputState }

func (RecurrenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Recurrence)(nil)).Elem()
}

func (o RecurrenceOutput) ToRecurrenceOutput() RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrenceOutputWithContext(ctx context.Context) RecurrenceOutput {
	return o
}

func (o RecurrenceOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o.ToRecurrencePtrOutputWithContext(context.Background())
}

func (o RecurrenceOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Recurrence) *Recurrence {
		return &v
	}).(RecurrencePtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Recurrence) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceOutput) Schedule() ComputeRecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v Recurrence) *ComputeRecurrenceSchedule { return v.Schedule }).(ComputeRecurrenceSchedulePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Recurrence) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrencePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Recurrence)(nil)).Elem()
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutput() RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) ToRecurrencePtrOutputWithContext(ctx context.Context) RecurrencePtrOutput {
	return o
}

func (o RecurrencePtrOutput) Elem() RecurrenceOutput {
	return o.ApplyT(func(v *Recurrence) Recurrence {
		if v != nil {
			return *v
		}
		var ret Recurrence
		return ret
	}).(RecurrenceOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrencePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrencePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Recurrence) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrencePtrOutput) Schedule() ComputeRecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *Recurrence) *ComputeRecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(ComputeRecurrenceSchedulePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrencePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrencePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Recurrence) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceResponse struct {
	// [Required] The frequency to trigger schedule.
	Frequency *string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval *int `pulumi:"interval"`
	// [Required] The recurrence schedule.
	Schedule *ComputeRecurrenceScheduleResponse `pulumi:"schedule"`
	// The start time in yyyy-MM-ddTHH:mm:ss format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceResponse
func (val *RecurrenceResponse) Defaults() *RecurrenceResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// The workflow trigger recurrence for ComputeStartStop schedule type.
type RecurrenceResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutput() RecurrenceResponseOutput {
	return o
}

func (o RecurrenceResponseOutput) ToRecurrenceResponseOutputWithContext(ctx context.Context) RecurrenceResponseOutput {
	return o
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceResponseOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceResponseOutput) Schedule() ComputeRecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *ComputeRecurrenceScheduleResponse { return v.Schedule }).(ComputeRecurrenceScheduleResponsePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrenceResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceResponse)(nil)).Elem()
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutput() RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) ToRecurrenceResponsePtrOutputWithContext(ctx context.Context) RecurrenceResponsePtrOutput {
	return o
}

func (o RecurrenceResponsePtrOutput) Elem() RecurrenceResponseOutput {
	return o.ApplyT(func(v *RecurrenceResponse) RecurrenceResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceResponse
		return ret
	}).(RecurrenceResponseOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// [Required] The recurrence schedule.
func (o RecurrenceResponsePtrOutput) Schedule() ComputeRecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *ComputeRecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(ComputeRecurrenceScheduleResponsePtrOutput)
}

// The start time in yyyy-MM-ddTHH:mm:ss format.
func (o RecurrenceResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

type RecurrenceSchedule struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//	RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

type RecurrenceScheduleArgs struct {
	// [Required] List of hours for the schedule.
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays pulumi.IntArrayInput `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays pulumi.StringArrayInput `pulumi:"weekDays"`
}

func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//	        RecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceSchedule) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrenceSchedule
		return ret
	}).(RecurrenceScheduleOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceSchedulePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceSchedulePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceSchedulePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceSchedulePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponse struct {
	// [Required] List of hours for the schedule.
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for the schedule.
	Minutes []int `pulumi:"minutes"`
	// List of month days for the schedule
	MonthDays []int `pulumi:"monthDays"`
	// List of days for the schedule.
	WeekDays []string `pulumi:"weekDays"`
}

type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponseOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []int { return v.MonthDays }).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponseOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) []string { return v.WeekDays }).(pulumi.StringArrayOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceScheduleResponse
		return ret
	}).(RecurrenceScheduleResponseOutput)
}

// [Required] List of hours for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of month days for the schedule
func (o RecurrenceScheduleResponsePtrOutput) MonthDays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []int {
		if v == nil {
			return nil
		}
		return v.MonthDays
	}).(pulumi.IntArrayOutput)
}

// List of days for the schedule.
func (o RecurrenceScheduleResponsePtrOutput) WeekDays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) []string {
		if v == nil {
			return nil
		}
		return v.WeekDays
	}).(pulumi.StringArrayOutput)
}

type RecurrenceTrigger struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceSchedule `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTrigger
func (val *RecurrenceTrigger) Defaults() *RecurrenceTrigger {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceTriggerInput is an input type that accepts RecurrenceTriggerArgs and RecurrenceTriggerOutput values.
// You can construct a concrete instance of `RecurrenceTriggerInput` via:
//
//	RecurrenceTriggerArgs{...}
type RecurrenceTriggerInput interface {
	pulumi.Input

	ToRecurrenceTriggerOutput() RecurrenceTriggerOutput
	ToRecurrenceTriggerOutputWithContext(context.Context) RecurrenceTriggerOutput
}

type RecurrenceTriggerArgs struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntInput `pulumi:"interval"`
	// The recurrence schedule.
	Schedule RecurrenceSchedulePtrInput `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType pulumi.StringInput `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerArgs
func (val *RecurrenceTriggerArgs) Defaults() *RecurrenceTriggerArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return i.ToRecurrenceTriggerOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput)
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i RecurrenceTriggerArgs) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerOutput).ToRecurrenceTriggerPtrOutputWithContext(ctx)
}

// RecurrenceTriggerPtrInput is an input type that accepts RecurrenceTriggerArgs, RecurrenceTriggerPtr and RecurrenceTriggerPtrOutput values.
// You can construct a concrete instance of `RecurrenceTriggerPtrInput` via:
//
//	        RecurrenceTriggerArgs{...}
//
//	or:
//
//	        nil
type RecurrenceTriggerPtrInput interface {
	pulumi.Input

	ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput
	ToRecurrenceTriggerPtrOutputWithContext(context.Context) RecurrenceTriggerPtrOutput
}

type recurrenceTriggerPtrType RecurrenceTriggerArgs

func RecurrenceTriggerPtr(v *RecurrenceTriggerArgs) RecurrenceTriggerPtrInput {
	return (*recurrenceTriggerPtrType)(v)
}

func (*recurrenceTriggerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return i.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (i *recurrenceTriggerPtrType) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceTriggerPtrOutput)
}

type RecurrenceTriggerOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutput() RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerOutputWithContext(ctx context.Context) RecurrenceTriggerOutput {
	return o
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o.ToRecurrenceTriggerPtrOutputWithContext(context.Background())
}

func (o RecurrenceTriggerOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceTrigger) *RecurrenceTrigger {
		return &v
	}).(RecurrenceTriggerPtrOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTrigger) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *RecurrenceSchedule { return v.Schedule }).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTrigger) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTrigger) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerPtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTrigger)(nil)).Elem()
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutput() RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) ToRecurrenceTriggerPtrOutputWithContext(ctx context.Context) RecurrenceTriggerPtrOutput {
	return o
}

func (o RecurrenceTriggerPtrOutput) Elem() RecurrenceTriggerOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) RecurrenceTrigger {
		if v != nil {
			return *v
		}
		var ret RecurrenceTrigger
		return ret
	}).(RecurrenceTriggerOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerPtrOutput) Schedule() RecurrenceSchedulePtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *RecurrenceSchedule {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceSchedulePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerPtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTrigger) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

type RecurrenceTriggerResponse struct {
	// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
	// Recommented format would be "2022-06-01T00:00:01"
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] The frequency to trigger schedule.
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// The recurrence schedule.
	Schedule *RecurrenceScheduleResponse `pulumi:"schedule"`
	// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
	TimeZone *string `pulumi:"timeZone"`
	// Expected value is 'Recurrence'.
	TriggerType string `pulumi:"triggerType"`
}

// Defaults sets the appropriate defaults for RecurrenceTriggerResponse
func (val *RecurrenceTriggerResponse) Defaults() *RecurrenceTriggerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

type RecurrenceTriggerResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutput() RecurrenceTriggerResponseOutput {
	return o
}

func (o RecurrenceTriggerResponseOutput) ToRecurrenceTriggerResponseOutputWithContext(ctx context.Context) RecurrenceTriggerResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponseOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *RecurrenceScheduleResponse { return v.Schedule }).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponseOutput) TriggerType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceTriggerResponse) string { return v.TriggerType }).(pulumi.StringOutput)
}

type RecurrenceTriggerResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceTriggerResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceTriggerResponse)(nil)).Elem()
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutput() RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) ToRecurrenceTriggerResponsePtrOutputWithContext(ctx context.Context) RecurrenceTriggerResponsePtrOutput {
	return o
}

func (o RecurrenceTriggerResponsePtrOutput) Elem() RecurrenceTriggerResponseOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) RecurrenceTriggerResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceTriggerResponse
		return ret
	}).(RecurrenceTriggerResponseOutput)
}

// Specifies end time of schedule in ISO 8601, but without a UTC offset. Refer https://en.wikipedia.org/wiki/ISO_8601.
// Recommented format would be "2022-06-01T00:00:01"
// If not present, the schedule will run indefinitely
func (o RecurrenceTriggerResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The frequency to trigger schedule.
func (o RecurrenceTriggerResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceTriggerResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// The recurrence schedule.
func (o RecurrenceTriggerResponsePtrOutput) Schedule() RecurrenceScheduleResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *RecurrenceScheduleResponse {
		if v == nil {
			return nil
		}
		return v.Schedule
	}).(RecurrenceScheduleResponsePtrOutput)
}

// Specifies start time of schedule in ISO 8601 format, but without a UTC offset.
func (o RecurrenceTriggerResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format. Refer: https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/default-time-zones?view=windows-11
func (o RecurrenceTriggerResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'Recurrence'.
func (o RecurrenceTriggerResponsePtrOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceTriggerResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TriggerType
	}).(pulumi.StringPtrOutput)
}

// Details of the Registry
type RegistryType struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceId `pulumi:"managedResourceGroup"`
	// Managed resource group specific settings
	ManagedResourceGroupSettings *ManagedResourceGroupSettings `pulumi:"managedResourceGroupSettings"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetails `pulumi:"regionDetails"`
	// Private endpoint connections info used for pending connections in private link portal
	RegistryPrivateEndpointConnections []RegistryPrivateEndpointConnection `pulumi:"registryPrivateEndpointConnections"`
}

// RegistryTypeInput is an input type that accepts RegistryTypeArgs and RegistryTypeOutput values.
// You can construct a concrete instance of `RegistryTypeInput` via:
//
//	RegistryTypeArgs{...}
type RegistryTypeInput interface {
	pulumi.Input

	ToRegistryTypeOutput() RegistryTypeOutput
	ToRegistryTypeOutputWithContext(context.Context) RegistryTypeOutput
}

// Details of the Registry
type RegistryTypeArgs struct {
	// Discovery URL for the Registry
	DiscoveryUrl pulumi.StringPtrInput `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher pulumi.StringPtrInput `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup ArmResourceIdPtrInput `pulumi:"managedResourceGroup"`
	// Managed resource group specific settings
	ManagedResourceGroupSettings ManagedResourceGroupSettingsPtrInput `pulumi:"managedResourceGroupSettings"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri pulumi.StringPtrInput `pulumi:"mlFlowRegistryUri"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails RegistryRegionArmDetailsArrayInput `pulumi:"regionDetails"`
	// Private endpoint connections info used for pending connections in private link portal
	RegistryPrivateEndpointConnections RegistryPrivateEndpointConnectionArrayInput `pulumi:"registryPrivateEndpointConnections"`
}

func (RegistryTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (i RegistryTypeArgs) ToRegistryTypeOutput() RegistryTypeOutput {
	return i.ToRegistryTypeOutputWithContext(context.Background())
}

func (i RegistryTypeArgs) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTypeOutput)
}

// Details of the Registry
type RegistryTypeOutput struct{ *pulumi.OutputState }

func (RegistryTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryType)(nil)).Elem()
}

func (o RegistryTypeOutput) ToRegistryTypeOutput() RegistryTypeOutput {
	return o
}

func (o RegistryTypeOutput) ToRegistryTypeOutputWithContext(ctx context.Context) RegistryTypeOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryTypeOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryTypeOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryTypeOutput) ManagedResourceGroup() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v RegistryType) *ArmResourceId { return v.ManagedResourceGroup }).(ArmResourceIdPtrOutput)
}

// Managed resource group specific settings
func (o RegistryTypeOutput) ManagedResourceGroupSettings() ManagedResourceGroupSettingsPtrOutput {
	return o.ApplyT(func(v RegistryType) *ManagedResourceGroupSettings { return v.ManagedResourceGroupSettings }).(ManagedResourceGroupSettingsPtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryTypeOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryTypeOutput) RegionDetails() RegistryRegionArmDetailsArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryRegionArmDetails { return v.RegionDetails }).(RegistryRegionArmDetailsArrayOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryTypeOutput) RegistryPrivateEndpointConnections() RegistryPrivateEndpointConnectionArrayOutput {
	return o.ApplyT(func(v RegistryType) []RegistryPrivateEndpointConnection { return v.RegistryPrivateEndpointConnections }).(RegistryPrivateEndpointConnectionArrayOutput)
}

type RegistryListCredentialsResultResponse struct {
	// The location of the workspace ACR
	Location  string             `pulumi:"location"`
	Passwords []PasswordResponse `pulumi:"passwords"`
	// The username of the workspace ACR
	Username string `pulumi:"username"`
}

type RegistryListCredentialsResultResponseOutput struct{ *pulumi.OutputState }

func (RegistryListCredentialsResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryListCredentialsResultResponse)(nil)).Elem()
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutput() RegistryListCredentialsResultResponseOutput {
	return o
}

func (o RegistryListCredentialsResultResponseOutput) ToRegistryListCredentialsResultResponseOutputWithContext(ctx context.Context) RegistryListCredentialsResultResponseOutput {
	return o
}

// The location of the workspace ACR
func (o RegistryListCredentialsResultResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Location }).(pulumi.StringOutput)
}

func (o RegistryListCredentialsResultResponseOutput) Passwords() PasswordResponseArrayOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) []PasswordResponse { return v.Passwords }).(PasswordResponseArrayOutput)
}

// The username of the workspace ACR
func (o RegistryListCredentialsResultResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistryListCredentialsResultResponse) string { return v.Username }).(pulumi.StringOutput)
}

type RegistryListCredentialsResultResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryListCredentialsResultResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryListCredentialsResultResponse)(nil)).Elem()
}

func (o RegistryListCredentialsResultResponsePtrOutput) ToRegistryListCredentialsResultResponsePtrOutput() RegistryListCredentialsResultResponsePtrOutput {
	return o
}

func (o RegistryListCredentialsResultResponsePtrOutput) ToRegistryListCredentialsResultResponsePtrOutputWithContext(ctx context.Context) RegistryListCredentialsResultResponsePtrOutput {
	return o
}

func (o RegistryListCredentialsResultResponsePtrOutput) Elem() RegistryListCredentialsResultResponseOutput {
	return o.ApplyT(func(v *RegistryListCredentialsResultResponse) RegistryListCredentialsResultResponse {
		if v != nil {
			return *v
		}
		var ret RegistryListCredentialsResultResponse
		return ret
	}).(RegistryListCredentialsResultResponseOutput)
}

// The location of the workspace ACR
func (o RegistryListCredentialsResultResponsePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryListCredentialsResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

func (o RegistryListCredentialsResultResponsePtrOutput) Passwords() PasswordResponseArrayOutput {
	return o.ApplyT(func(v *RegistryListCredentialsResultResponse) []PasswordResponse {
		if v == nil {
			return nil
		}
		return v.Passwords
	}).(PasswordResponseArrayOutput)
}

// The username of the workspace ACR
func (o RegistryListCredentialsResultResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryListCredentialsResultResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnection struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/registryPrivateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionProperties `pulumi:"properties"`
}

// RegistryPrivateEndpointConnectionInput is an input type that accepts RegistryPrivateEndpointConnectionArgs and RegistryPrivateEndpointConnectionOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionInput` via:
//
//	RegistryPrivateEndpointConnectionArgs{...}
type RegistryPrivateEndpointConnectionInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput
	ToRegistryPrivateEndpointConnectionOutputWithContext(context.Context) RegistryPrivateEndpointConnectionOutput
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionArgs struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/registryPrivateEndpointConnections/{peConnectionName}
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Same as workspace location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties RegistryPrivateEndpointConnectionPropertiesPtrInput `pulumi:"properties"`
}

func (RegistryPrivateEndpointConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return i.ToRegistryPrivateEndpointConnectionOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArgs) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionOutput)
}

// RegistryPrivateEndpointConnectionArrayInput is an input type that accepts RegistryPrivateEndpointConnectionArray and RegistryPrivateEndpointConnectionArrayOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionArrayInput` via:
//
//	RegistryPrivateEndpointConnectionArray{ RegistryPrivateEndpointConnectionArgs{...} }
type RegistryPrivateEndpointConnectionArrayInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput
	ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Context) RegistryPrivateEndpointConnectionArrayOutput
}

type RegistryPrivateEndpointConnectionArray []RegistryPrivateEndpointConnectionInput

func (RegistryPrivateEndpointConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return i.ToRegistryPrivateEndpointConnectionArrayOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionArray) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionArrayOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutput() RegistryPrivateEndpointConnectionOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionOutput) ToRegistryPrivateEndpointConnectionOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/registryPrivateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionOutput) Properties() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnection) *RegistryPrivateEndpointConnectionProperties {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

type RegistryPrivateEndpointConnectionArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnection)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutput() RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) ToRegistryPrivateEndpointConnectionArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnection {
		return vs[0].([]RegistryPrivateEndpointConnection)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionProperties struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResource `pulumi:"privateEndpoint"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The connection state.
	RegistryPrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionState `pulumi:"registryPrivateLinkServiceConnectionState"`
}

// RegistryPrivateEndpointConnectionPropertiesInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs and RegistryPrivateEndpointConnectionPropertiesOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesInput` via:
//
//	RegistryPrivateEndpointConnectionPropertiesArgs{...}
type RegistryPrivateEndpointConnectionPropertiesInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput
	ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesOutput
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesArgs struct {
	// The group ids
	GroupIds pulumi.StringArrayInput `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint PrivateEndpointResourcePtrInput `pulumi:"privateEndpoint"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState pulumi.StringPtrInput `pulumi:"provisioningState"`
	// The connection state.
	RegistryPrivateLinkServiceConnectionState RegistryPrivateLinkServiceConnectionStatePtrInput `pulumi:"registryPrivateLinkServiceConnectionState"`
}

func (RegistryPrivateEndpointConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i RegistryPrivateEndpointConnectionPropertiesArgs) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesOutput).ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx)
}

// RegistryPrivateEndpointConnectionPropertiesPtrInput is an input type that accepts RegistryPrivateEndpointConnectionPropertiesArgs, RegistryPrivateEndpointConnectionPropertiesPtr and RegistryPrivateEndpointConnectionPropertiesPtrOutput values.
// You can construct a concrete instance of `RegistryPrivateEndpointConnectionPropertiesPtrInput` via:
//
//	        RegistryPrivateEndpointConnectionPropertiesArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateEndpointConnectionPropertiesPtrInput interface {
	pulumi.Input

	ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput
	ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput
}

type registryPrivateEndpointConnectionPropertiesPtrType RegistryPrivateEndpointConnectionPropertiesArgs

func RegistryPrivateEndpointConnectionPropertiesPtr(v *RegistryPrivateEndpointConnectionPropertiesArgs) RegistryPrivateEndpointConnectionPropertiesPtrInput {
	return (*registryPrivateEndpointConnectionPropertiesPtrType)(v)
}

func (*registryPrivateEndpointConnectionPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return i.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (i *registryPrivateEndpointConnectionPropertiesPtrType) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutput() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(context.Background())
}

func (o RegistryPrivateEndpointConnectionPropertiesOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateEndpointConnectionProperties {
		return &v
	}).(RegistryPrivateEndpointConnectionPropertiesPtrOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource { return v.PrivateEndpoint }).(PrivateEndpointResourcePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesOutput) RegistryPrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		return v.RegistryPrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesPtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionProperties)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutput() RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ToRegistryPrivateEndpointConnectionPropertiesPtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesPtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) RegistryPrivateEndpointConnectionProperties {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionProperties
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) PrivateEndpoint() PrivateEndpointResourcePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *PrivateEndpointResource {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourcePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesPtrOutput) RegistryPrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionProperties) *RegistryPrivateLinkServiceConnectionState {
		if v == nil {
			return nil
		}
		return v.RegistryPrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponse struct {
	// The group ids
	GroupIds []string `pulumi:"groupIds"`
	// The PE network resource that is linked to this PE connection.
	PrivateEndpoint *PrivateEndpointResourceResponse `pulumi:"privateEndpoint"`
	// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The connection state.
	RegistryPrivateLinkServiceConnectionState *RegistryPrivateLinkServiceConnectionStateResponse `pulumi:"registryPrivateLinkServiceConnectionState"`
}

// Properties of the Private Endpoint Connection
type RegistryPrivateEndpointConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutput() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ToRegistryPrivateEndpointConnectionPropertiesResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) []string { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *string { return v.ProvisioningState }).(pulumi.StringPtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponseOutput) RegistryPrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		return v.RegistryPrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

type RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateEndpointConnectionPropertiesResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutput() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ToRegistryPrivateEndpointConnectionPropertiesResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) Elem() RegistryPrivateEndpointConnectionPropertiesResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) RegistryPrivateEndpointConnectionPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateEndpointConnectionPropertiesResponse
		return ret
	}).(RegistryPrivateEndpointConnectionPropertiesResponseOutput)
}

// The group ids
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) []string {
		if v == nil {
			return nil
		}
		return v.GroupIds
	}).(pulumi.StringArrayOutput)
}

// The PE network resource that is linked to this PE connection.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) PrivateEndpoint() PrivateEndpointResourceResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *PrivateEndpointResourceResponse {
		if v == nil {
			return nil
		}
		return v.PrivateEndpoint
	}).(PrivateEndpointResourceResponsePtrOutput)
}

// One of null, "Succeeded", "Provisioning", "Failed". While not approved, it's null.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) ProvisioningState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningState
	}).(pulumi.StringPtrOutput)
}

// The connection state.
func (o RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput) RegistryPrivateLinkServiceConnectionState() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o.ApplyT(func(v *RegistryPrivateEndpointConnectionPropertiesResponse) *RegistryPrivateLinkServiceConnectionStateResponse {
		if v == nil {
			return nil
		}
		return v.RegistryPrivateLinkServiceConnectionState
	}).(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput)
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponse struct {
	// This is the private endpoint connection name created on SRP
	// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/registryPrivateEndpointConnections/{peConnectionName}
	Id *string `pulumi:"id"`
	// Same as workspace location.
	Location *string `pulumi:"location"`
	// Properties of the Private Endpoint Connection
	Properties *RegistryPrivateEndpointConnectionPropertiesResponse `pulumi:"properties"`
}

// Private endpoint connection definition.
type RegistryPrivateEndpointConnectionResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutput() RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseOutput) ToRegistryPrivateEndpointConnectionResponseOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseOutput {
	return o
}

// This is the private endpoint connection name created on SRP
// Full resource id: /subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.MachineLearningServices/{resourceType}/{resourceName}/registryPrivateEndpointConnections/{peConnectionName}
func (o RegistryPrivateEndpointConnectionResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Same as workspace location.
func (o RegistryPrivateEndpointConnectionResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Properties of the Private Endpoint Connection
func (o RegistryPrivateEndpointConnectionResponseOutput) Properties() RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput {
	return o.ApplyT(func(v RegistryPrivateEndpointConnectionResponse) *RegistryPrivateEndpointConnectionPropertiesResponse {
		return v.Properties
	}).(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput)
}

type RegistryPrivateEndpointConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryPrivateEndpointConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryPrivateEndpointConnectionResponse)(nil)).Elem()
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutput() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) ToRegistryPrivateEndpointConnectionResponseArrayOutputWithContext(ctx context.Context) RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o
}

func (o RegistryPrivateEndpointConnectionResponseArrayOutput) Index(i pulumi.IntInput) RegistryPrivateEndpointConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryPrivateEndpointConnectionResponse {
		return vs[0].([]RegistryPrivateEndpointConnectionResponse)[vs[1].(int)]
	}).(RegistryPrivateEndpointConnectionResponseOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionState struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// RegistryPrivateLinkServiceConnectionStateInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs and RegistryPrivateLinkServiceConnectionStateOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStateInput` via:
//
//	RegistryPrivateLinkServiceConnectionStateArgs{...}
type RegistryPrivateLinkServiceConnectionStateInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput
	ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStateOutput
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateArgs struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired pulumi.StringPtrInput `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (RegistryPrivateLinkServiceConnectionStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput)
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i RegistryPrivateLinkServiceConnectionStateArgs) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStateOutput).ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx)
}

// RegistryPrivateLinkServiceConnectionStatePtrInput is an input type that accepts RegistryPrivateLinkServiceConnectionStateArgs, RegistryPrivateLinkServiceConnectionStatePtr and RegistryPrivateLinkServiceConnectionStatePtrOutput values.
// You can construct a concrete instance of `RegistryPrivateLinkServiceConnectionStatePtrInput` via:
//
//	        RegistryPrivateLinkServiceConnectionStateArgs{...}
//
//	or:
//
//	        nil
type RegistryPrivateLinkServiceConnectionStatePtrInput interface {
	pulumi.Input

	ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput
	ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput
}

type registryPrivateLinkServiceConnectionStatePtrType RegistryPrivateLinkServiceConnectionStateArgs

func RegistryPrivateLinkServiceConnectionStatePtr(v *RegistryPrivateLinkServiceConnectionStateArgs) RegistryPrivateLinkServiceConnectionStatePtrInput {
	return (*registryPrivateLinkServiceConnectionStatePtrType)(v)
}

func (*registryPrivateLinkServiceConnectionStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return i.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (i *registryPrivateLinkServiceConnectionStatePtrType) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutput() RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStateOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(context.Background())
}

func (o RegistryPrivateLinkServiceConnectionStateOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegistryPrivateLinkServiceConnectionState) *RegistryPrivateLinkServiceConnectionState {
		return &v
	}).(RegistryPrivateLinkServiceConnectionStatePtrOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionState) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStatePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionState)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutput() RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ToRegistryPrivateLinkServiceConnectionStatePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStatePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) RegistryPrivateLinkServiceConnectionState {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionState
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStatePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionState) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponse struct {
	// Some RP chose "None". Other RPs use this for region expansion.
	ActionsRequired *string `pulumi:"actionsRequired"`
	// User-defined message that, per NRP doc, may be used for approval-related message.
	Description *string `pulumi:"description"`
	// Connection status of the service consumer with the service provider
	Status *string `pulumi:"status"`
}

// The connection state.
type RegistryPrivateLinkServiceConnectionStateResponseOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutput() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ToRegistryPrivateLinkServiceConnectionStateResponseOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.ActionsRequired }).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryPrivateLinkServiceConnectionStateResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type RegistryPrivateLinkServiceConnectionStateResponsePtrOutput struct{ *pulumi.OutputState }

func (RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryPrivateLinkServiceConnectionStateResponse)(nil)).Elem()
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutput() RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ToRegistryPrivateLinkServiceConnectionStateResponsePtrOutputWithContext(ctx context.Context) RegistryPrivateLinkServiceConnectionStateResponsePtrOutput {
	return o
}

func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Elem() RegistryPrivateLinkServiceConnectionStateResponseOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) RegistryPrivateLinkServiceConnectionStateResponse {
		if v != nil {
			return *v
		}
		var ret RegistryPrivateLinkServiceConnectionStateResponse
		return ret
	}).(RegistryPrivateLinkServiceConnectionStateResponseOutput)
}

// Some RP chose "None". Other RPs use this for region expansion.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) ActionsRequired() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.ActionsRequired
	}).(pulumi.StringPtrOutput)
}

// User-defined message that, per NRP doc, may be used for approval-related message.
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
func (o RegistryPrivateLinkServiceConnectionStateResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryPrivateLinkServiceConnectionStateResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetails struct {
	// List of ACR accounts
	AcrDetails []AcrDetails `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetails `pulumi:"storageAccountDetails"`
}

// RegistryRegionArmDetailsInput is an input type that accepts RegistryRegionArmDetailsArgs and RegistryRegionArmDetailsOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsInput` via:
//
//	RegistryRegionArmDetailsArgs{...}
type RegistryRegionArmDetailsInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput
	ToRegistryRegionArmDetailsOutputWithContext(context.Context) RegistryRegionArmDetailsOutput
}

// Details for each region the registry is in
type RegistryRegionArmDetailsArgs struct {
	// List of ACR accounts
	AcrDetails AcrDetailsArrayInput `pulumi:"acrDetails"`
	// The location where the registry exists
	Location pulumi.StringPtrInput `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails StorageAccountDetailsArrayInput `pulumi:"storageAccountDetails"`
}

func (RegistryRegionArmDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return i.ToRegistryRegionArmDetailsOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArgs) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsOutput)
}

// RegistryRegionArmDetailsArrayInput is an input type that accepts RegistryRegionArmDetailsArray and RegistryRegionArmDetailsArrayOutput values.
// You can construct a concrete instance of `RegistryRegionArmDetailsArrayInput` via:
//
//	RegistryRegionArmDetailsArray{ RegistryRegionArmDetailsArgs{...} }
type RegistryRegionArmDetailsArrayInput interface {
	pulumi.Input

	ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput
	ToRegistryRegionArmDetailsArrayOutputWithContext(context.Context) RegistryRegionArmDetailsArrayOutput
}

type RegistryRegionArmDetailsArray []RegistryRegionArmDetailsInput

func (RegistryRegionArmDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return i.ToRegistryRegionArmDetailsArrayOutputWithContext(context.Background())
}

func (i RegistryRegionArmDetailsArray) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryRegionArmDetailsArrayOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutput() RegistryRegionArmDetailsOutput {
	return o
}

func (o RegistryRegionArmDetailsOutput) ToRegistryRegionArmDetailsOutputWithContext(ctx context.Context) RegistryRegionArmDetailsOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsOutput) AcrDetails() AcrDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []AcrDetails { return v.AcrDetails }).(AcrDetailsArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsOutput) StorageAccountDetails() StorageAccountDetailsArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetails) []StorageAccountDetails { return v.StorageAccountDetails }).(StorageAccountDetailsArrayOutput)
}

type RegistryRegionArmDetailsArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetails)(nil)).Elem()
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutput() RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) ToRegistryRegionArmDetailsArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetails {
		return vs[0].([]RegistryRegionArmDetails)[vs[1].(int)]
	}).(RegistryRegionArmDetailsOutput)
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponse struct {
	// List of ACR accounts
	AcrDetails []AcrDetailsResponse `pulumi:"acrDetails"`
	// The location where the registry exists
	Location *string `pulumi:"location"`
	// List of storage accounts
	StorageAccountDetails []StorageAccountDetailsResponse `pulumi:"storageAccountDetails"`
}

// Details for each region the registry is in
type RegistryRegionArmDetailsResponseOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutput() RegistryRegionArmDetailsResponseOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseOutput) ToRegistryRegionArmDetailsResponseOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseOutput {
	return o
}

// List of ACR accounts
func (o RegistryRegionArmDetailsResponseOutput) AcrDetails() AcrDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []AcrDetailsResponse { return v.AcrDetails }).(AcrDetailsResponseArrayOutput)
}

// The location where the registry exists
func (o RegistryRegionArmDetailsResponseOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// List of storage accounts
func (o RegistryRegionArmDetailsResponseOutput) StorageAccountDetails() StorageAccountDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryRegionArmDetailsResponse) []StorageAccountDetailsResponse {
		return v.StorageAccountDetails
	}).(StorageAccountDetailsResponseArrayOutput)
}

type RegistryRegionArmDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (RegistryRegionArmDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryRegionArmDetailsResponse)(nil)).Elem()
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutput() RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) ToRegistryRegionArmDetailsResponseArrayOutputWithContext(ctx context.Context) RegistryRegionArmDetailsResponseArrayOutput {
	return o
}

func (o RegistryRegionArmDetailsResponseArrayOutput) Index(i pulumi.IntInput) RegistryRegionArmDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryRegionArmDetailsResponse {
		return vs[0].([]RegistryRegionArmDetailsResponse)[vs[1].(int)]
	}).(RegistryRegionArmDetailsResponseOutput)
}

// Details of the Registry
type RegistryResponse struct {
	// Discovery URL for the Registry
	DiscoveryUrl *string `pulumi:"discoveryUrl"`
	// IntellectualPropertyPublisher for the registry
	IntellectualPropertyPublisher *string `pulumi:"intellectualPropertyPublisher"`
	// ResourceId of the managed RG if the registry has system created resources
	ManagedResourceGroup *ArmResourceIdResponse `pulumi:"managedResourceGroup"`
	// Managed resource group specific settings
	ManagedResourceGroupSettings *ManagedResourceGroupSettingsResponse `pulumi:"managedResourceGroupSettings"`
	// MLFlow Registry URI for the Registry
	MlFlowRegistryUri *string `pulumi:"mlFlowRegistryUri"`
	// Is the Registry accessible from the internet?
	// Possible values: "Enabled" or "Disabled"
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Details of each region the registry is in
	RegionDetails []RegistryRegionArmDetailsResponse `pulumi:"regionDetails"`
	// Private endpoint connections info used for pending connections in private link portal
	RegistryPrivateEndpointConnections []RegistryPrivateEndpointConnectionResponse `pulumi:"registryPrivateEndpointConnections"`
}

// Details of the Registry
type RegistryResponseOutput struct{ *pulumi.OutputState }

func (RegistryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryResponse)(nil)).Elem()
}

func (o RegistryResponseOutput) ToRegistryResponseOutput() RegistryResponseOutput {
	return o
}

func (o RegistryResponseOutput) ToRegistryResponseOutputWithContext(ctx context.Context) RegistryResponseOutput {
	return o
}

// Discovery URL for the Registry
func (o RegistryResponseOutput) DiscoveryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.DiscoveryUrl }).(pulumi.StringPtrOutput)
}

// IntellectualPropertyPublisher for the registry
func (o RegistryResponseOutput) IntellectualPropertyPublisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.IntellectualPropertyPublisher }).(pulumi.StringPtrOutput)
}

// ResourceId of the managed RG if the registry has system created resources
func (o RegistryResponseOutput) ManagedResourceGroup() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v RegistryResponse) *ArmResourceIdResponse { return v.ManagedResourceGroup }).(ArmResourceIdResponsePtrOutput)
}

// Managed resource group specific settings
func (o RegistryResponseOutput) ManagedResourceGroupSettings() ManagedResourceGroupSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegistryResponse) *ManagedResourceGroupSettingsResponse { return v.ManagedResourceGroupSettings }).(ManagedResourceGroupSettingsResponsePtrOutput)
}

// MLFlow Registry URI for the Registry
func (o RegistryResponseOutput) MlFlowRegistryUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.MlFlowRegistryUri }).(pulumi.StringPtrOutput)
}

// Is the Registry accessible from the internet?
// Possible values: "Enabled" or "Disabled"
func (o RegistryResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Details of each region the registry is in
func (o RegistryResponseOutput) RegionDetails() RegistryRegionArmDetailsResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryRegionArmDetailsResponse { return v.RegionDetails }).(RegistryRegionArmDetailsResponseArrayOutput)
}

// Private endpoint connections info used for pending connections in private link portal
func (o RegistryResponseOutput) RegistryPrivateEndpointConnections() RegistryPrivateEndpointConnectionResponseArrayOutput {
	return o.ApplyT(func(v RegistryResponse) []RegistryPrivateEndpointConnectionResponse {
		return v.RegistryPrivateEndpointConnections
	}).(RegistryPrivateEndpointConnectionResponseArrayOutput)
}

// Regression task in AutoML Table vertical.
type Regression struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParameters `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettings `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for Regression
func (val *Regression) Defaults() *Regression {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// RegressionInput is an input type that accepts RegressionArgs and RegressionOutput values.
// You can construct a concrete instance of `RegressionInput` via:
//
//	RegressionArgs{...}
type RegressionInput interface {
	pulumi.Input

	ToRegressionOutput() RegressionOutput
	ToRegressionOutputWithContext(context.Context) RegressionOutput
}

// Regression task in AutoML Table vertical.
type RegressionArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters TableFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace TableParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings TableSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Test data input.
	TestData MLTableJobInputPtrInput `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings RegressionTrainingSettingsPtrInput `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for RegressionArgs
func (val *RegressionArgs) Defaults() *RegressionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (RegressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (i RegressionArgs) ToRegressionOutput() RegressionOutput {
	return i.ToRegressionOutputWithContext(context.Background())
}

func (i RegressionArgs) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionOutput)
}

// Regression task in AutoML Table vertical.
type RegressionOutput struct{ *pulumi.OutputState }

func (RegressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (o RegressionOutput) ToRegressionOutput() RegressionOutput {
	return o
}

func (o RegressionOutput) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return o
}

// Columns to use for CVSplit data.
func (o RegressionOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Regression) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o RegressionOutput) FixedParameters() TableFixedParametersPtrOutput {
	return o.ApplyT(func(v Regression) *TableFixedParameters { return v.FixedParameters }).(TableFixedParametersPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o RegressionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o RegressionOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v Regression) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for regression task.
func (o RegressionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o RegressionOutput) SearchSpace() TableParameterSubspaceArrayOutput {
	return o.ApplyT(func(v Regression) []TableParameterSubspace { return v.SearchSpace }).(TableParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o RegressionOutput) SweepSettings() TableSweepSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableSweepSettings { return v.SweepSettings }).(TableSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o RegressionOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Regression) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o RegressionOutput) TestData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Regression) *MLTableJobInput { return v.TestData }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Regression) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o RegressionOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v Regression) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionOutput) TrainingSettings() RegressionTrainingSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *RegressionTrainingSettings { return v.TrainingSettings }).(RegressionTrainingSettingsPtrOutput)
}

// Validation data inputs.
func (o RegressionOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v Regression) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Regression) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o RegressionOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

type RegressionModelPerformanceMetricThreshold struct {
	// [Required] The regression model performance metric to calculate.
	Metric string `pulumi:"metric"`
	// Expected value is 'Regression'.
	ModelType string `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThreshold `pulumi:"threshold"`
}

// RegressionModelPerformanceMetricThresholdInput is an input type that accepts RegressionModelPerformanceMetricThresholdArgs and RegressionModelPerformanceMetricThresholdOutput values.
// You can construct a concrete instance of `RegressionModelPerformanceMetricThresholdInput` via:
//
//	RegressionModelPerformanceMetricThresholdArgs{...}
type RegressionModelPerformanceMetricThresholdInput interface {
	pulumi.Input

	ToRegressionModelPerformanceMetricThresholdOutput() RegressionModelPerformanceMetricThresholdOutput
	ToRegressionModelPerformanceMetricThresholdOutputWithContext(context.Context) RegressionModelPerformanceMetricThresholdOutput
}

type RegressionModelPerformanceMetricThresholdArgs struct {
	// [Required] The regression model performance metric to calculate.
	Metric pulumi.StringInput `pulumi:"metric"`
	// Expected value is 'Regression'.
	ModelType pulumi.StringInput `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold MonitoringThresholdPtrInput `pulumi:"threshold"`
}

func (RegressionModelPerformanceMetricThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionModelPerformanceMetricThreshold)(nil)).Elem()
}

func (i RegressionModelPerformanceMetricThresholdArgs) ToRegressionModelPerformanceMetricThresholdOutput() RegressionModelPerformanceMetricThresholdOutput {
	return i.ToRegressionModelPerformanceMetricThresholdOutputWithContext(context.Background())
}

func (i RegressionModelPerformanceMetricThresholdArgs) ToRegressionModelPerformanceMetricThresholdOutputWithContext(ctx context.Context) RegressionModelPerformanceMetricThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionModelPerformanceMetricThresholdOutput)
}

type RegressionModelPerformanceMetricThresholdOutput struct{ *pulumi.OutputState }

func (RegressionModelPerformanceMetricThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionModelPerformanceMetricThreshold)(nil)).Elem()
}

func (o RegressionModelPerformanceMetricThresholdOutput) ToRegressionModelPerformanceMetricThresholdOutput() RegressionModelPerformanceMetricThresholdOutput {
	return o
}

func (o RegressionModelPerformanceMetricThresholdOutput) ToRegressionModelPerformanceMetricThresholdOutputWithContext(ctx context.Context) RegressionModelPerformanceMetricThresholdOutput {
	return o
}

// [Required] The regression model performance metric to calculate.
func (o RegressionModelPerformanceMetricThresholdOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThreshold) string { return v.Metric }).(pulumi.StringOutput)
}

// Expected value is 'Regression'.
func (o RegressionModelPerformanceMetricThresholdOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThreshold) string { return v.ModelType }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o RegressionModelPerformanceMetricThresholdOutput) Threshold() MonitoringThresholdPtrOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThreshold) *MonitoringThreshold { return v.Threshold }).(MonitoringThresholdPtrOutput)
}

type RegressionModelPerformanceMetricThresholdResponse struct {
	// [Required] The regression model performance metric to calculate.
	Metric string `pulumi:"metric"`
	// Expected value is 'Regression'.
	ModelType string `pulumi:"modelType"`
	// The threshold value. If null, a default value will be set depending on the selected metric.
	Threshold *MonitoringThresholdResponse `pulumi:"threshold"`
}

type RegressionModelPerformanceMetricThresholdResponseOutput struct{ *pulumi.OutputState }

func (RegressionModelPerformanceMetricThresholdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionModelPerformanceMetricThresholdResponse)(nil)).Elem()
}

func (o RegressionModelPerformanceMetricThresholdResponseOutput) ToRegressionModelPerformanceMetricThresholdResponseOutput() RegressionModelPerformanceMetricThresholdResponseOutput {
	return o
}

func (o RegressionModelPerformanceMetricThresholdResponseOutput) ToRegressionModelPerformanceMetricThresholdResponseOutputWithContext(ctx context.Context) RegressionModelPerformanceMetricThresholdResponseOutput {
	return o
}

// [Required] The regression model performance metric to calculate.
func (o RegressionModelPerformanceMetricThresholdResponseOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThresholdResponse) string { return v.Metric }).(pulumi.StringOutput)
}

// Expected value is 'Regression'.
func (o RegressionModelPerformanceMetricThresholdResponseOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThresholdResponse) string { return v.ModelType }).(pulumi.StringOutput)
}

// The threshold value. If null, a default value will be set depending on the selected metric.
func (o RegressionModelPerformanceMetricThresholdResponseOutput) Threshold() MonitoringThresholdResponsePtrOutput {
	return o.ApplyT(func(v RegressionModelPerformanceMetricThresholdResponse) *MonitoringThresholdResponse {
		return v.Threshold
	}).(MonitoringThresholdResponsePtrOutput)
}

// Regression task in AutoML Table vertical.
type RegressionResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *TableFixedParametersResponse `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []TableParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *TableSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Test data input.
	TestData *MLTableJobInputResponse `pulumi:"testData"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *RegressionTrainingSettingsResponse `pulumi:"trainingSettings"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for RegressionResponse
func (val *RegressionResponse) Defaults() *RegressionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Regression task in AutoML Table vertical.
type RegressionResponseOutput struct{ *pulumi.OutputState }

func (RegressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionResponse)(nil)).Elem()
}

func (o RegressionResponseOutput) ToRegressionResponseOutput() RegressionResponseOutput {
	return o
}

func (o RegressionResponseOutput) ToRegressionResponseOutputWithContext(ctx context.Context) RegressionResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o RegressionResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalFeaturizationSettingsResponse { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o RegressionResponseOutput) FixedParameters() TableFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableFixedParametersResponse { return v.FixedParameters }).(TableFixedParametersResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o RegressionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o RegressionResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v RegressionResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// Primary metric for regression task.
func (o RegressionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o RegressionResponseOutput) SearchSpace() TableParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v RegressionResponse) []TableParameterSubspaceResponse { return v.SearchSpace }).(TableParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o RegressionResponseOutput) SweepSettings() TableSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableSweepSettingsResponse { return v.SweepSettings }).(TableSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o RegressionResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Test data input.
func (o RegressionResponseOutput) TestData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *MLTableJobInputResponse { return v.TestData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegressionResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

// [Required] Training data input.
func (o RegressionResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v RegressionResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionResponseOutput) TrainingSettings() RegressionTrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *RegressionTrainingSettingsResponse { return v.TrainingSettings }).(RegressionTrainingSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o RegressionResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o RegressionResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RegressionResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o RegressionResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettings struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettings
func (val *RegressionTrainingSettings) Defaults() *RegressionTrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// RegressionTrainingSettingsInput is an input type that accepts RegressionTrainingSettingsArgs and RegressionTrainingSettingsOutput values.
// You can construct a concrete instance of `RegressionTrainingSettingsInput` via:
//
//	RegressionTrainingSettingsArgs{...}
type RegressionTrainingSettingsInput interface {
	pulumi.Input

	ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput
	ToRegressionTrainingSettingsOutputWithContext(context.Context) RegressionTrainingSettingsOutput
}

// Regression Training related configuration.
type RegressionTrainingSettingsArgs struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms pulumi.StringArrayInput `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode pulumi.StringPtrInput `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettingsArgs
func (val *RegressionTrainingSettingsArgs) Defaults() *RegressionTrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(true)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	if tmp.TrainingMode == nil {
		tmp.TrainingMode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (RegressionTrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettings)(nil)).Elem()
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput {
	return i.ToRegressionTrainingSettingsOutputWithContext(context.Background())
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsOutputWithContext(ctx context.Context) RegressionTrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsOutput)
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return i.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i RegressionTrainingSettingsArgs) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsOutput).ToRegressionTrainingSettingsPtrOutputWithContext(ctx)
}

// RegressionTrainingSettingsPtrInput is an input type that accepts RegressionTrainingSettingsArgs, RegressionTrainingSettingsPtr and RegressionTrainingSettingsPtrOutput values.
// You can construct a concrete instance of `RegressionTrainingSettingsPtrInput` via:
//
//	        RegressionTrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type RegressionTrainingSettingsPtrInput interface {
	pulumi.Input

	ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput
	ToRegressionTrainingSettingsPtrOutputWithContext(context.Context) RegressionTrainingSettingsPtrOutput
}

type regressionTrainingSettingsPtrType RegressionTrainingSettingsArgs

func RegressionTrainingSettingsPtr(v *RegressionTrainingSettingsArgs) RegressionTrainingSettingsPtrInput {
	return (*regressionTrainingSettingsPtrType)(v)
}

func (*regressionTrainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettings)(nil)).Elem()
}

func (i *regressionTrainingSettingsPtrType) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return i.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *regressionTrainingSettingsPtrType) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionTrainingSettingsPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettingsOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettings)(nil)).Elem()
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsOutput() RegressionTrainingSettingsOutput {
	return o
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsOutputWithContext(ctx context.Context) RegressionTrainingSettingsOutput {
	return o
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return o.ToRegressionTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o RegressionTrainingSettingsOutput) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RegressionTrainingSettings) *RegressionTrainingSettings {
		return &v
	}).(RegressionTrainingSettingsPtrOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o RegressionTrainingSettingsOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettings) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type RegressionTrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettings)(nil)).Elem()
}

func (o RegressionTrainingSettingsPtrOutput) ToRegressionTrainingSettingsPtrOutput() RegressionTrainingSettingsPtrOutput {
	return o
}

func (o RegressionTrainingSettingsPtrOutput) ToRegressionTrainingSettingsPtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsPtrOutput {
	return o
}

func (o RegressionTrainingSettingsPtrOutput) Elem() RegressionTrainingSettingsOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) RegressionTrainingSettings {
		if v != nil {
			return *v
		}
		var ret RegressionTrainingSettings
		return ret
	}).(RegressionTrainingSettingsOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsPtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsPtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o RegressionTrainingSettingsPtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// Regression Training related configuration.
type RegressionTrainingSettingsResponse struct {
	// Allowed models for regression task.
	AllowedTrainingAlgorithms []string `pulumi:"allowedTrainingAlgorithms"`
	// Blocked models for regression task.
	BlockedTrainingAlgorithms []string `pulumi:"blockedTrainingAlgorithms"`
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
	// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
	// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
	// If 'NonDistributed' then only non distributed algorithms are chosen.
	TrainingMode *string `pulumi:"trainingMode"`
}

// Defaults sets the appropriate defaults for RegressionTrainingSettingsResponse
func (val *RegressionTrainingSettingsResponse) Defaults() *RegressionTrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := true
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	if tmp.TrainingMode == nil {
		trainingMode_ := "Auto"
		tmp.TrainingMode = &trainingMode_
	}
	return &tmp
}

// Regression Training related configuration.
type RegressionTrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionTrainingSettingsResponse)(nil)).Elem()
}

func (o RegressionTrainingSettingsResponseOutput) ToRegressionTrainingSettingsResponseOutput() RegressionTrainingSettingsResponseOutput {
	return o
}

func (o RegressionTrainingSettingsResponseOutput) ToRegressionTrainingSettingsResponseOutputWithContext(ctx context.Context) RegressionTrainingSettingsResponseOutput {
	return o
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsResponseOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) []string { return v.AllowedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsResponseOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) []string { return v.BlockedTrainingAlgorithms }).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o RegressionTrainingSettingsResponseOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionTrainingSettingsResponse) *string { return v.TrainingMode }).(pulumi.StringPtrOutput)
}

type RegressionTrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (RegressionTrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegressionTrainingSettingsResponse)(nil)).Elem()
}

func (o RegressionTrainingSettingsResponsePtrOutput) ToRegressionTrainingSettingsResponsePtrOutput() RegressionTrainingSettingsResponsePtrOutput {
	return o
}

func (o RegressionTrainingSettingsResponsePtrOutput) ToRegressionTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) RegressionTrainingSettingsResponsePtrOutput {
	return o
}

func (o RegressionTrainingSettingsResponsePtrOutput) Elem() RegressionTrainingSettingsResponseOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) RegressionTrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret RegressionTrainingSettingsResponse
		return ret
	}).(RegressionTrainingSettingsResponseOutput)
}

// Allowed models for regression task.
func (o RegressionTrainingSettingsResponsePtrOutput) AllowedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionTrainingSettingsResponsePtrOutput) BlockedTrainingAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTrainingAlgorithms
	}).(pulumi.StringArrayOutput)
}

// Enable recommendation of DNN models.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o RegressionTrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o RegressionTrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// TrainingMode mode - Setting to 'auto' is same as setting it to 'non-distributed' for now, however in the future may result in mixed mode or heuristics based mode selection. Default is 'auto'.
// If 'Distributed' then only distributed featurization is used and distributed algorithms are chosen.
// If 'NonDistributed' then only non distributed algorithms are chosen.
func (o RegressionTrainingSettingsResponsePtrOutput) TrainingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegressionTrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrainingMode
	}).(pulumi.StringPtrOutput)
}

// Scoring requests configuration.
type RequestConfiguration struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfiguration
func (val *RequestConfiguration) Defaults() *RequestConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// RequestConfigurationInput is an input type that accepts RequestConfigurationArgs and RequestConfigurationOutput values.
// You can construct a concrete instance of `RequestConfigurationInput` via:
//
//	RequestConfigurationArgs{...}
type RequestConfigurationInput interface {
	pulumi.Input

	ToRequestConfigurationOutput() RequestConfigurationOutput
	ToRequestConfigurationOutputWithContext(context.Context) RequestConfigurationOutput
}

// Scoring requests configuration.
type RequestConfigurationArgs struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout pulumi.StringPtrInput `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfigurationArgs
func (val *RequestConfigurationArgs) Defaults() *RequestConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		tmp.MaxConcurrentRequestsPerInstance = pulumi.IntPtr(1)
	}
	if tmp.RequestTimeout == nil {
		tmp.RequestTimeout = pulumi.StringPtr("PT5S")
	}
	return &tmp
}
func (RequestConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfiguration)(nil)).Elem()
}

func (i RequestConfigurationArgs) ToRequestConfigurationOutput() RequestConfigurationOutput {
	return i.ToRequestConfigurationOutputWithContext(context.Background())
}

func (i RequestConfigurationArgs) ToRequestConfigurationOutputWithContext(ctx context.Context) RequestConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationOutput)
}

func (i RequestConfigurationArgs) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return i.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (i RequestConfigurationArgs) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationOutput).ToRequestConfigurationPtrOutputWithContext(ctx)
}

// RequestConfigurationPtrInput is an input type that accepts RequestConfigurationArgs, RequestConfigurationPtr and RequestConfigurationPtrOutput values.
// You can construct a concrete instance of `RequestConfigurationPtrInput` via:
//
//	        RequestConfigurationArgs{...}
//
//	or:
//
//	        nil
type RequestConfigurationPtrInput interface {
	pulumi.Input

	ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput
	ToRequestConfigurationPtrOutputWithContext(context.Context) RequestConfigurationPtrOutput
}

type requestConfigurationPtrType RequestConfigurationArgs

func RequestConfigurationPtr(v *RequestConfigurationArgs) RequestConfigurationPtrInput {
	return (*requestConfigurationPtrType)(v)
}

func (*requestConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfiguration)(nil)).Elem()
}

func (i *requestConfigurationPtrType) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return i.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (i *requestConfigurationPtrType) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestConfigurationPtrOutput)
}

// Scoring requests configuration.
type RequestConfigurationOutput struct{ *pulumi.OutputState }

func (RequestConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfiguration)(nil)).Elem()
}

func (o RequestConfigurationOutput) ToRequestConfigurationOutput() RequestConfigurationOutput {
	return o
}

func (o RequestConfigurationOutput) ToRequestConfigurationOutputWithContext(ctx context.Context) RequestConfigurationOutput {
	return o
}

func (o RequestConfigurationOutput) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return o.ToRequestConfigurationPtrOutputWithContext(context.Background())
}

func (o RequestConfigurationOutput) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestConfiguration) *RequestConfiguration {
		return &v
	}).(RequestConfigurationPtrOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestConfiguration) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestConfiguration) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type RequestConfigurationPtrOutput struct{ *pulumi.OutputState }

func (RequestConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfiguration)(nil)).Elem()
}

func (o RequestConfigurationPtrOutput) ToRequestConfigurationPtrOutput() RequestConfigurationPtrOutput {
	return o
}

func (o RequestConfigurationPtrOutput) ToRequestConfigurationPtrOutputWithContext(ctx context.Context) RequestConfigurationPtrOutput {
	return o
}

func (o RequestConfigurationPtrOutput) Elem() RequestConfigurationOutput {
	return o.ApplyT(func(v *RequestConfiguration) RequestConfiguration {
		if v != nil {
			return *v
		}
		var ret RequestConfiguration
		return ret
	}).(RequestConfigurationOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationPtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationPtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Scoring requests configuration.
type RequestConfigurationResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for RequestConfigurationResponse
func (val *RequestConfigurationResponse) Defaults() *RequestConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Scoring requests configuration.
type RequestConfigurationResponseOutput struct{ *pulumi.OutputState }

func (RequestConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestConfigurationResponse)(nil)).Elem()
}

func (o RequestConfigurationResponseOutput) ToRequestConfigurationResponseOutput() RequestConfigurationResponseOutput {
	return o
}

func (o RequestConfigurationResponseOutput) ToRequestConfigurationResponseOutputWithContext(ctx context.Context) RequestConfigurationResponseOutput {
	return o
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationResponseOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RequestConfigurationResponse) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationResponseOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestConfigurationResponse) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type RequestConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestConfigurationResponse)(nil)).Elem()
}

func (o RequestConfigurationResponsePtrOutput) ToRequestConfigurationResponsePtrOutput() RequestConfigurationResponsePtrOutput {
	return o
}

func (o RequestConfigurationResponsePtrOutput) ToRequestConfigurationResponsePtrOutputWithContext(ctx context.Context) RequestConfigurationResponsePtrOutput {
	return o
}

func (o RequestConfigurationResponsePtrOutput) Elem() RequestConfigurationResponseOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) RequestConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret RequestConfigurationResponse
		return ret
	}).(RequestConfigurationResponseOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o RequestConfigurationResponsePtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o RequestConfigurationResponsePtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RequestConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

type RequestLogging struct {
	// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
	CaptureHeaders []string `pulumi:"captureHeaders"`
}

// RequestLoggingInput is an input type that accepts RequestLoggingArgs and RequestLoggingOutput values.
// You can construct a concrete instance of `RequestLoggingInput` via:
//
//	RequestLoggingArgs{...}
type RequestLoggingInput interface {
	pulumi.Input

	ToRequestLoggingOutput() RequestLoggingOutput
	ToRequestLoggingOutputWithContext(context.Context) RequestLoggingOutput
}

type RequestLoggingArgs struct {
	// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
	CaptureHeaders pulumi.StringArrayInput `pulumi:"captureHeaders"`
}

func (RequestLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestLogging)(nil)).Elem()
}

func (i RequestLoggingArgs) ToRequestLoggingOutput() RequestLoggingOutput {
	return i.ToRequestLoggingOutputWithContext(context.Background())
}

func (i RequestLoggingArgs) ToRequestLoggingOutputWithContext(ctx context.Context) RequestLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestLoggingOutput)
}

func (i RequestLoggingArgs) ToRequestLoggingPtrOutput() RequestLoggingPtrOutput {
	return i.ToRequestLoggingPtrOutputWithContext(context.Background())
}

func (i RequestLoggingArgs) ToRequestLoggingPtrOutputWithContext(ctx context.Context) RequestLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestLoggingOutput).ToRequestLoggingPtrOutputWithContext(ctx)
}

// RequestLoggingPtrInput is an input type that accepts RequestLoggingArgs, RequestLoggingPtr and RequestLoggingPtrOutput values.
// You can construct a concrete instance of `RequestLoggingPtrInput` via:
//
//	        RequestLoggingArgs{...}
//
//	or:
//
//	        nil
type RequestLoggingPtrInput interface {
	pulumi.Input

	ToRequestLoggingPtrOutput() RequestLoggingPtrOutput
	ToRequestLoggingPtrOutputWithContext(context.Context) RequestLoggingPtrOutput
}

type requestLoggingPtrType RequestLoggingArgs

func RequestLoggingPtr(v *RequestLoggingArgs) RequestLoggingPtrInput {
	return (*requestLoggingPtrType)(v)
}

func (*requestLoggingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestLogging)(nil)).Elem()
}

func (i *requestLoggingPtrType) ToRequestLoggingPtrOutput() RequestLoggingPtrOutput {
	return i.ToRequestLoggingPtrOutputWithContext(context.Background())
}

func (i *requestLoggingPtrType) ToRequestLoggingPtrOutputWithContext(ctx context.Context) RequestLoggingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RequestLoggingPtrOutput)
}

type RequestLoggingOutput struct{ *pulumi.OutputState }

func (RequestLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestLogging)(nil)).Elem()
}

func (o RequestLoggingOutput) ToRequestLoggingOutput() RequestLoggingOutput {
	return o
}

func (o RequestLoggingOutput) ToRequestLoggingOutputWithContext(ctx context.Context) RequestLoggingOutput {
	return o
}

func (o RequestLoggingOutput) ToRequestLoggingPtrOutput() RequestLoggingPtrOutput {
	return o.ToRequestLoggingPtrOutputWithContext(context.Background())
}

func (o RequestLoggingOutput) ToRequestLoggingPtrOutputWithContext(ctx context.Context) RequestLoggingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RequestLogging) *RequestLogging {
		return &v
	}).(RequestLoggingPtrOutput)
}

// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
func (o RequestLoggingOutput) CaptureHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RequestLogging) []string { return v.CaptureHeaders }).(pulumi.StringArrayOutput)
}

type RequestLoggingPtrOutput struct{ *pulumi.OutputState }

func (RequestLoggingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestLogging)(nil)).Elem()
}

func (o RequestLoggingPtrOutput) ToRequestLoggingPtrOutput() RequestLoggingPtrOutput {
	return o
}

func (o RequestLoggingPtrOutput) ToRequestLoggingPtrOutputWithContext(ctx context.Context) RequestLoggingPtrOutput {
	return o
}

func (o RequestLoggingPtrOutput) Elem() RequestLoggingOutput {
	return o.ApplyT(func(v *RequestLogging) RequestLogging {
		if v != nil {
			return *v
		}
		var ret RequestLogging
		return ret
	}).(RequestLoggingOutput)
}

// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
func (o RequestLoggingPtrOutput) CaptureHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RequestLogging) []string {
		if v == nil {
			return nil
		}
		return v.CaptureHeaders
	}).(pulumi.StringArrayOutput)
}

type RequestLoggingResponse struct {
	// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
	CaptureHeaders []string `pulumi:"captureHeaders"`
}

type RequestLoggingResponseOutput struct{ *pulumi.OutputState }

func (RequestLoggingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestLoggingResponse)(nil)).Elem()
}

func (o RequestLoggingResponseOutput) ToRequestLoggingResponseOutput() RequestLoggingResponseOutput {
	return o
}

func (o RequestLoggingResponseOutput) ToRequestLoggingResponseOutputWithContext(ctx context.Context) RequestLoggingResponseOutput {
	return o
}

// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
func (o RequestLoggingResponseOutput) CaptureHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RequestLoggingResponse) []string { return v.CaptureHeaders }).(pulumi.StringArrayOutput)
}

type RequestLoggingResponsePtrOutput struct{ *pulumi.OutputState }

func (RequestLoggingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RequestLoggingResponse)(nil)).Elem()
}

func (o RequestLoggingResponsePtrOutput) ToRequestLoggingResponsePtrOutput() RequestLoggingResponsePtrOutput {
	return o
}

func (o RequestLoggingResponsePtrOutput) ToRequestLoggingResponsePtrOutputWithContext(ctx context.Context) RequestLoggingResponsePtrOutput {
	return o
}

func (o RequestLoggingResponsePtrOutput) Elem() RequestLoggingResponseOutput {
	return o.ApplyT(func(v *RequestLoggingResponse) RequestLoggingResponse {
		if v != nil {
			return *v
		}
		var ret RequestLoggingResponse
		return ret
	}).(RequestLoggingResponseOutput)
}

// For payload logging, we only collect payload by default. If customers also want to collect the specified headers, they can set them in captureHeaders so that backend will collect those headers along with payload.
func (o RequestLoggingResponsePtrOutput) CaptureHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RequestLoggingResponse) []string {
		if v == nil {
			return nil
		}
		return v.CaptureHeaders
	}).(pulumi.StringArrayOutput)
}

type RequestMatchPatternResponse struct {
	Method *string `pulumi:"method"`
	Path   *string `pulumi:"path"`
}

type RequestMatchPatternResponseOutput struct{ *pulumi.OutputState }

func (RequestMatchPatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RequestMatchPatternResponse)(nil)).Elem()
}

func (o RequestMatchPatternResponseOutput) ToRequestMatchPatternResponseOutput() RequestMatchPatternResponseOutput {
	return o
}

func (o RequestMatchPatternResponseOutput) ToRequestMatchPatternResponseOutputWithContext(ctx context.Context) RequestMatchPatternResponseOutput {
	return o
}

func (o RequestMatchPatternResponseOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestMatchPatternResponse) *string { return v.Method }).(pulumi.StringPtrOutput)
}

func (o RequestMatchPatternResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RequestMatchPatternResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type RequestMatchPatternResponseArrayOutput struct{ *pulumi.OutputState }

func (RequestMatchPatternResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RequestMatchPatternResponse)(nil)).Elem()
}

func (o RequestMatchPatternResponseArrayOutput) ToRequestMatchPatternResponseArrayOutput() RequestMatchPatternResponseArrayOutput {
	return o
}

func (o RequestMatchPatternResponseArrayOutput) ToRequestMatchPatternResponseArrayOutputWithContext(ctx context.Context) RequestMatchPatternResponseArrayOutput {
	return o
}

func (o RequestMatchPatternResponseArrayOutput) Index(i pulumi.IntInput) RequestMatchPatternResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RequestMatchPatternResponse {
		return vs[0].([]RequestMatchPatternResponse)[vs[1].(int)]
	}).(RequestMatchPatternResponseOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceId struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// ResourceIdInput is an input type that accepts ResourceIdArgs and ResourceIdOutput values.
// You can construct a concrete instance of `ResourceIdInput` via:
//
//	ResourceIdArgs{...}
type ResourceIdInput interface {
	pulumi.Input

	ToResourceIdOutput() ResourceIdOutput
	ToResourceIdOutputWithContext(context.Context) ResourceIdOutput
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdArgs struct {
	// The ID of the resource
	Id pulumi.StringInput `pulumi:"id"`
}

func (ResourceIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (i ResourceIdArgs) ToResourceIdOutput() ResourceIdOutput {
	return i.ToResourceIdOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput)
}

func (i ResourceIdArgs) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i ResourceIdArgs) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdOutput).ToResourceIdPtrOutputWithContext(ctx)
}

// ResourceIdPtrInput is an input type that accepts ResourceIdArgs, ResourceIdPtr and ResourceIdPtrOutput values.
// You can construct a concrete instance of `ResourceIdPtrInput` via:
//
//	        ResourceIdArgs{...}
//
//	or:
//
//	        nil
type ResourceIdPtrInput interface {
	pulumi.Input

	ToResourceIdPtrOutput() ResourceIdPtrOutput
	ToResourceIdPtrOutputWithContext(context.Context) ResourceIdPtrOutput
}

type resourceIdPtrType ResourceIdArgs

func ResourceIdPtr(v *ResourceIdArgs) ResourceIdPtrInput {
	return (*resourceIdPtrType)(v)
}

func (*resourceIdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (i *resourceIdPtrType) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return i.ToResourceIdPtrOutputWithContext(context.Background())
}

func (i *resourceIdPtrType) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceIdPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdOutput struct{ *pulumi.OutputState }

func (ResourceIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceId)(nil)).Elem()
}

func (o ResourceIdOutput) ToResourceIdOutput() ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdOutputWithContext(ctx context.Context) ResourceIdOutput {
	return o
}

func (o ResourceIdOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o.ToResourceIdPtrOutputWithContext(context.Background())
}

func (o ResourceIdOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceId) *ResourceId {
		return &v
	}).(ResourceIdPtrOutput)
}

// The ID of the resource
func (o ResourceIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceId) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceId)(nil)).Elem()
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutput() ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) ToResourceIdPtrOutputWithContext(ctx context.Context) ResourceIdPtrOutput {
	return o
}

func (o ResourceIdPtrOutput) Elem() ResourceIdOutput {
	return o.ApplyT(func(v *ResourceId) ResourceId {
		if v != nil {
			return *v
		}
		var ret ResourceId
		return ret
	}).(ResourceIdOutput)
}

// The ID of the resource
func (o ResourceIdPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceId) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponse struct {
	// The ID of the resource
	Id string `pulumi:"id"`
}

// Represents a resource ID. For example, for a subnet, it is the resource URL for the subnet.
type ResourceIdResponseOutput struct{ *pulumi.OutputState }

func (ResourceIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutput() ResourceIdResponseOutput {
	return o
}

func (o ResourceIdResponseOutput) ToResourceIdResponseOutputWithContext(ctx context.Context) ResourceIdResponseOutput {
	return o
}

// The ID of the resource
func (o ResourceIdResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceIdResponse) string { return v.Id }).(pulumi.StringOutput)
}

type ResourceIdResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceIdResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdResponse)(nil)).Elem()
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutput() ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) ToResourceIdResponsePtrOutputWithContext(ctx context.Context) ResourceIdResponsePtrOutput {
	return o
}

func (o ResourceIdResponsePtrOutput) Elem() ResourceIdResponseOutput {
	return o.ApplyT(func(v *ResourceIdResponse) ResourceIdResponse {
		if v != nil {
			return *v
		}
		var ret ResourceIdResponse
		return ret
	}).(ResourceIdResponseOutput)
}

// The ID of the resource
func (o ResourceIdResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceIdResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Rolling input data definition.
type RollingInputData struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Rolling'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId *string `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
	// [Required] The time offset between the end of the data window and the monitor's current run time.
	WindowOffset string `pulumi:"windowOffset"`
	// [Required] The size of the trailing data window.
	WindowSize string `pulumi:"windowSize"`
}

// RollingInputDataInput is an input type that accepts RollingInputDataArgs and RollingInputDataOutput values.
// You can construct a concrete instance of `RollingInputDataInput` via:
//
//	RollingInputDataArgs{...}
type RollingInputDataInput interface {
	pulumi.Input

	ToRollingInputDataOutput() RollingInputDataOutput
	ToRollingInputDataOutputWithContext(context.Context) RollingInputDataOutput
}

// Rolling input data definition.
type RollingInputDataArgs struct {
	// Mapping of column names to special uses.
	Columns pulumi.StringMapInput `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext pulumi.StringPtrInput `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Rolling'.
	InputDataType pulumi.StringInput `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId pulumi.StringPtrInput `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
	// [Required] The time offset between the end of the data window and the monitor's current run time.
	WindowOffset pulumi.StringInput `pulumi:"windowOffset"`
	// [Required] The size of the trailing data window.
	WindowSize pulumi.StringInput `pulumi:"windowSize"`
}

func (RollingInputDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingInputData)(nil)).Elem()
}

func (i RollingInputDataArgs) ToRollingInputDataOutput() RollingInputDataOutput {
	return i.ToRollingInputDataOutputWithContext(context.Background())
}

func (i RollingInputDataArgs) ToRollingInputDataOutputWithContext(ctx context.Context) RollingInputDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollingInputDataOutput)
}

// Rolling input data definition.
type RollingInputDataOutput struct{ *pulumi.OutputState }

func (RollingInputDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingInputData)(nil)).Elem()
}

func (o RollingInputDataOutput) ToRollingInputDataOutput() RollingInputDataOutput {
	return o
}

func (o RollingInputDataOutput) ToRollingInputDataOutputWithContext(ctx context.Context) RollingInputDataOutput {
	return o
}

// Mapping of column names to special uses.
func (o RollingInputDataOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v RollingInputData) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o RollingInputDataOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingInputData) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Rolling'.
func (o RollingInputDataOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputData) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o RollingInputDataOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputData) string { return v.JobInputType }).(pulumi.StringOutput)
}

// The ARM resource ID of the component resource used to preprocess the data.
func (o RollingInputDataOutput) PreprocessingComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingInputData) *string { return v.PreprocessingComponentId }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o RollingInputDataOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputData) string { return v.Uri }).(pulumi.StringOutput)
}

// [Required] The time offset between the end of the data window and the monitor's current run time.
func (o RollingInputDataOutput) WindowOffset() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputData) string { return v.WindowOffset }).(pulumi.StringOutput)
}

// [Required] The size of the trailing data window.
func (o RollingInputDataOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputData) string { return v.WindowSize }).(pulumi.StringOutput)
}

// Rolling input data definition.
type RollingInputDataResponse struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Rolling'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId *string `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
	// [Required] The time offset between the end of the data window and the monitor's current run time.
	WindowOffset string `pulumi:"windowOffset"`
	// [Required] The size of the trailing data window.
	WindowSize string `pulumi:"windowSize"`
}

// Rolling input data definition.
type RollingInputDataResponseOutput struct{ *pulumi.OutputState }

func (RollingInputDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RollingInputDataResponse)(nil)).Elem()
}

func (o RollingInputDataResponseOutput) ToRollingInputDataResponseOutput() RollingInputDataResponseOutput {
	return o
}

func (o RollingInputDataResponseOutput) ToRollingInputDataResponseOutputWithContext(ctx context.Context) RollingInputDataResponseOutput {
	return o
}

// Mapping of column names to special uses.
func (o RollingInputDataResponseOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v RollingInputDataResponse) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o RollingInputDataResponseOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingInputDataResponse) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Rolling'.
func (o RollingInputDataResponseOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputDataResponse) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o RollingInputDataResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputDataResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// The ARM resource ID of the component resource used to preprocess the data.
func (o RollingInputDataResponseOutput) PreprocessingComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RollingInputDataResponse) *string { return v.PreprocessingComponentId }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o RollingInputDataResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputDataResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// [Required] The time offset between the end of the data window and the monitor's current run time.
func (o RollingInputDataResponseOutput) WindowOffset() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputDataResponse) string { return v.WindowOffset }).(pulumi.StringOutput)
}

// [Required] The size of the trailing data window.
func (o RollingInputDataResponseOutput) WindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v RollingInputDataResponse) string { return v.WindowSize }).(pulumi.StringOutput)
}

type Route struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

// RouteInput is an input type that accepts RouteArgs and RouteOutput values.
// You can construct a concrete instance of `RouteInput` via:
//
//	RouteArgs{...}
type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(context.Context) RouteOutput
}

type RouteArgs struct {
	// [Required] The path for the route.
	Path pulumi.StringInput `pulumi:"path"`
	// [Required] The port for the route.
	Port pulumi.IntInput `pulumi:"port"`
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i RouteArgs) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i RouteArgs) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

func (i RouteArgs) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i RouteArgs) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput).ToRoutePtrOutputWithContext(ctx)
}

// RoutePtrInput is an input type that accepts RouteArgs, RoutePtr and RoutePtrOutput values.
// You can construct a concrete instance of `RoutePtrInput` via:
//
//	        RouteArgs{...}
//
//	or:
//
//	        nil
type RoutePtrInput interface {
	pulumi.Input

	ToRoutePtrOutput() RoutePtrOutput
	ToRoutePtrOutputWithContext(context.Context) RoutePtrOutput
}

type routePtrType RouteArgs

func RoutePtr(v *RouteArgs) RoutePtrInput {
	return (*routePtrType)(v)
}

func (*routePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *routePtrType) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i *routePtrType) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePtrOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o.ToRoutePtrOutputWithContext(context.Background())
}

func (o RouteOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Route) *Route {
		return &v
	}).(RoutePtrOutput)
}

// [Required] The path for the route.
func (o RouteOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Route) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Route) int { return v.Port }).(pulumi.IntOutput)
}

type RoutePtrOutput struct{ *pulumi.OutputState }

func (RoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RoutePtrOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) Elem() RouteOutput {
	return o.ApplyT(func(v *Route) Route {
		if v != nil {
			return *v
		}
		var ret Route
		return ret
	}).(RouteOutput)
}

// [Required] The path for the route.
func (o RoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RoutePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type RouteResponse struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

type RouteResponseOutput struct{ *pulumi.OutputState }

func (RouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponse)(nil)).Elem()
}

func (o RouteResponseOutput) ToRouteResponseOutput() RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return o
}

// [Required] The path for the route.
func (o RouteResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RouteResponse) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RouteResponse) int { return v.Port }).(pulumi.IntOutput)
}

type RouteResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutput() RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutputWithContext(ctx context.Context) RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) Elem() RouteResponseOutput {
	return o.ApplyT(func(v *RouteResponse) RouteResponse {
		if v != nil {
			return *v
		}
		var ret RouteResponse
		return ret
	}).(RouteResponseOutput)
}

// [Required] The path for the route.
func (o RouteResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RouteResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type SASAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category      *string                                   `pulumi:"category"`
	Credentials   *WorkspaceConnectionSharedAccessSignature `pulumi:"credentials"`
	ExpiryTime    *string                                   `pulumi:"expiryTime"`
	IsSharedToAll *bool                                     `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

// SASAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts SASAuthTypeWorkspaceConnectionPropertiesArgs and SASAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `SASAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	SASAuthTypeWorkspaceConnectionPropertiesArgs{...}
type SASAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput
	ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput
}

type SASAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category      pulumi.StringPtrInput                            `pulumi:"category"`
	Credentials   WorkspaceConnectionSharedAccessSignaturePtrInput `pulumi:"credentials"`
	ExpiryTime    pulumi.StringPtrInput                            `pulumi:"expiryTime"`
	IsSharedToAll pulumi.BoolPtrInput                              `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       pulumi.StringMapInput   `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (SASAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i SASAuthTypeWorkspaceConnectionPropertiesArgs) ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i SASAuthTypeWorkspaceConnectionPropertiesArgs) ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SASAuthTypeWorkspaceConnectionPropertiesOutput)
}

type SASAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (SASAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ToSASAuthTypeWorkspaceConnectionPropertiesOutput() SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ToSASAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'SAS'.
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionSharedAccessSignature {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignaturePtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type SASAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'SAS'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                           `pulumi:"category"`
	CreatedByWorkspaceArmId string                                            `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionSharedAccessSignatureResponse `pulumi:"credentials"`
	ExpiryTime              *string                                           `pulumi:"expiryTime"`
	// Group based on connection category
	Group         string `pulumi:"group"`
	IsSharedToAll *bool  `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

type SASAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SASAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToSASAuthTypeWorkspaceConnectionPropertiesResponseOutput() SASAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToSASAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) SASAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'SAS'.
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.CreatedByWorkspaceArmId }).(pulumi.StringOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionSharedAccessSignatureResponsePtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionSharedAccessSignatureResponse {
		return v.Credentials
	}).(WorkspaceConnectionSharedAccessSignatureResponsePtrOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o SASAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SASAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecrets `pulumi:"secrets"`
}

// SasDatastoreCredentialsInput is an input type that accepts SasDatastoreCredentialsArgs and SasDatastoreCredentialsOutput values.
// You can construct a concrete instance of `SasDatastoreCredentialsInput` via:
//
//	SasDatastoreCredentialsArgs{...}
type SasDatastoreCredentialsInput interface {
	pulumi.Input

	ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput
	ToSasDatastoreCredentialsOutputWithContext(context.Context) SasDatastoreCredentialsOutput
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecretsInput `pulumi:"secrets"`
}

func (SasDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return i.ToSasDatastoreCredentialsOutputWithContext(context.Background())
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreCredentialsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return o
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage container secrets.
func (o SasDatastoreCredentialsOutput) Secrets() SasDatastoreSecretsOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) SasDatastoreSecrets { return v.Secrets }).(SasDatastoreSecretsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentialsResponse)(nil)).Elem()
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutput() SasDatastoreCredentialsResponseOutput {
	return o
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutputWithContext(ctx context.Context) SasDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecrets struct {
	// Storage container SAS token.
	SasToken *string `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType string `pulumi:"secretsType"`
}

// SasDatastoreSecretsInput is an input type that accepts SasDatastoreSecretsArgs and SasDatastoreSecretsOutput values.
// You can construct a concrete instance of `SasDatastoreSecretsInput` via:
//
//	SasDatastoreSecretsArgs{...}
type SasDatastoreSecretsInput interface {
	pulumi.Input

	ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput
	ToSasDatastoreSecretsOutputWithContext(context.Context) SasDatastoreSecretsOutput
}

// Datastore SAS secrets.
type SasDatastoreSecretsArgs struct {
	// Storage container SAS token.
	SasToken pulumi.StringPtrInput `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (SasDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return i.ToSasDatastoreSecretsOutputWithContext(context.Background())
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreSecretsOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (SasDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return o
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return o
}

// Storage container SAS token.
func (o SasDatastoreSecretsOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Sas'.
func (o SasDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// scale settings for AML Compute
type ScaleSettings struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettings
func (val *ScaleSettings) Defaults() *ScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// ScaleSettingsInput is an input type that accepts ScaleSettingsArgs and ScaleSettingsOutput values.
// You can construct a concrete instance of `ScaleSettingsInput` via:
//
//	ScaleSettingsArgs{...}
type ScaleSettingsInput interface {
	pulumi.Input

	ToScaleSettingsOutput() ScaleSettingsOutput
	ToScaleSettingsOutputWithContext(context.Context) ScaleSettingsOutput
}

// scale settings for AML Compute
type ScaleSettingsArgs struct {
	// Max number of nodes to use
	MaxNodeCount pulumi.IntInput `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount pulumi.IntPtrInput `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown pulumi.StringPtrInput `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettingsArgs
func (val *ScaleSettingsArgs) Defaults() *ScaleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		tmp.MinNodeCount = pulumi.IntPtr(0)
	}
	return &tmp
}
func (ScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (i ScaleSettingsArgs) ToScaleSettingsOutput() ScaleSettingsOutput {
	return i.ToScaleSettingsOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput)
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i ScaleSettingsArgs) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsOutput).ToScaleSettingsPtrOutputWithContext(ctx)
}

// ScaleSettingsPtrInput is an input type that accepts ScaleSettingsArgs, ScaleSettingsPtr and ScaleSettingsPtrOutput values.
// You can construct a concrete instance of `ScaleSettingsPtrInput` via:
//
//	        ScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type ScaleSettingsPtrInput interface {
	pulumi.Input

	ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput
	ToScaleSettingsPtrOutputWithContext(context.Context) ScaleSettingsPtrOutput
}

type scaleSettingsPtrType ScaleSettingsArgs

func ScaleSettingsPtr(v *ScaleSettingsArgs) ScaleSettingsPtrInput {
	return (*scaleSettingsPtrType)(v)
}

func (*scaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return i.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *scaleSettingsPtrType) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScaleSettingsPtrOutput)
}

// scale settings for AML Compute
type ScaleSettingsOutput struct{ *pulumi.OutputState }

func (ScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsOutput) ToScaleSettingsOutput() ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsOutputWithContext(ctx context.Context) ScaleSettingsOutput {
	return o
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o.ToScaleSettingsPtrOutputWithContext(context.Background())
}

func (o ScaleSettingsOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScaleSettings) *ScaleSettings {
		return &v
	}).(ScaleSettingsPtrOutput)
}

// Max number of nodes to use
func (o ScaleSettingsOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleSettings) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Min number of nodes to use
func (o ScaleSettingsOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleSettings) *string { return v.NodeIdleTimeBeforeScaleDown }).(pulumi.StringPtrOutput)
}

type ScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettings)(nil)).Elem()
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutput() ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) ToScaleSettingsPtrOutputWithContext(ctx context.Context) ScaleSettingsPtrOutput {
	return o
}

func (o ScaleSettingsPtrOutput) Elem() ScaleSettingsOutput {
	return o.ApplyT(func(v *ScaleSettings) ScaleSettings {
		if v != nil {
			return *v
		}
		var ret ScaleSettings
		return ret
	}).(ScaleSettingsOutput)
}

// Max number of nodes to use
func (o ScaleSettingsPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Min number of nodes to use
func (o ScaleSettingsPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsPtrOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.NodeIdleTimeBeforeScaleDown
	}).(pulumi.StringPtrOutput)
}

// scale settings for AML Compute
type ScaleSettingsResponse struct {
	// Max number of nodes to use
	MaxNodeCount int `pulumi:"maxNodeCount"`
	// Min number of nodes to use
	MinNodeCount *int `pulumi:"minNodeCount"`
	// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
	NodeIdleTimeBeforeScaleDown *string `pulumi:"nodeIdleTimeBeforeScaleDown"`
}

// Defaults sets the appropriate defaults for ScaleSettingsResponse
func (val *ScaleSettingsResponse) Defaults() *ScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MinNodeCount == nil {
		minNodeCount_ := 0
		tmp.MinNodeCount = &minNodeCount_
	}
	return &tmp
}

// scale settings for AML Compute
type ScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutput() ScaleSettingsResponseOutput {
	return o
}

func (o ScaleSettingsResponseOutput) ToScaleSettingsResponseOutputWithContext(ctx context.Context) ScaleSettingsResponseOutput {
	return o
}

// Max number of nodes to use
func (o ScaleSettingsResponseOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

// Min number of nodes to use
func (o ScaleSettingsResponseOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsResponseOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScaleSettingsResponse) *string { return v.NodeIdleTimeBeforeScaleDown }).(pulumi.StringPtrOutput)
}

type ScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScaleSettingsResponse)(nil)).Elem()
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutput() ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) ToScaleSettingsResponsePtrOutputWithContext(ctx context.Context) ScaleSettingsResponsePtrOutput {
	return o
}

func (o ScaleSettingsResponsePtrOutput) Elem() ScaleSettingsResponseOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) ScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ScaleSettingsResponse
		return ret
	}).(ScaleSettingsResponseOutput)
}

// Max number of nodes to use
func (o ScaleSettingsResponsePtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

// Min number of nodes to use
func (o ScaleSettingsResponsePtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

// Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
func (o ScaleSettingsResponsePtrOutput) NodeIdleTimeBeforeScaleDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.NodeIdleTimeBeforeScaleDown
	}).(pulumi.StringPtrOutput)
}

// Base definition of a schedule
type ScheduleType struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleType
func (val *ScheduleType) Defaults() *ScheduleType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// ScheduleTypeInput is an input type that accepts ScheduleTypeArgs and ScheduleTypeOutput values.
// You can construct a concrete instance of `ScheduleTypeInput` via:
//
//	ScheduleTypeArgs{...}
type ScheduleTypeInput interface {
	pulumi.Input

	ToScheduleTypeOutput() ScheduleTypeOutput
	ToScheduleTypeOutputWithContext(context.Context) ScheduleTypeOutput
}

// Base definition of a schedule
type ScheduleTypeArgs struct {
	// [Required] Specifies the action of the schedule
	Action pulumi.Input `pulumi:"action"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of schedule.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled pulumi.BoolPtrInput `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger pulumi.Input `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleTypeArgs
func (val *ScheduleTypeArgs) Defaults() *ScheduleTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		tmp.IsEnabled = pulumi.BoolPtr(true)
	}
	return &tmp
}
func (ScheduleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (i ScheduleTypeArgs) ToScheduleTypeOutput() ScheduleTypeOutput {
	return i.ToScheduleTypeOutputWithContext(context.Background())
}

func (i ScheduleTypeArgs) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleTypeOutput)
}

// Base definition of a schedule
type ScheduleTypeOutput struct{ *pulumi.OutputState }

func (ScheduleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleType)(nil)).Elem()
}

func (o ScheduleTypeOutput) ToScheduleTypeOutput() ScheduleTypeOutput {
	return o
}

func (o ScheduleTypeOutput) ToScheduleTypeOutputWithContext(ctx context.Context) ScheduleTypeOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleTypeOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleTypeOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleType) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleTypeOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleType) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

type ScheduleBase struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

// ScheduleBaseInput is an input type that accepts ScheduleBaseArgs and ScheduleBaseOutput values.
// You can construct a concrete instance of `ScheduleBaseInput` via:
//
//	ScheduleBaseArgs{...}
type ScheduleBaseInput interface {
	pulumi.Input

	ToScheduleBaseOutput() ScheduleBaseOutput
	ToScheduleBaseOutputWithContext(context.Context) ScheduleBaseOutput
}

type ScheduleBaseArgs struct {
	// A system assigned id for the schedule.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus pulumi.StringPtrInput `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (ScheduleBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBase)(nil)).Elem()
}

func (i ScheduleBaseArgs) ToScheduleBaseOutput() ScheduleBaseOutput {
	return i.ToScheduleBaseOutputWithContext(context.Background())
}

func (i ScheduleBaseArgs) ToScheduleBaseOutputWithContext(ctx context.Context) ScheduleBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBaseOutput)
}

func (i ScheduleBaseArgs) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return i.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (i ScheduleBaseArgs) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBaseOutput).ToScheduleBasePtrOutputWithContext(ctx)
}

// ScheduleBasePtrInput is an input type that accepts ScheduleBaseArgs, ScheduleBasePtr and ScheduleBasePtrOutput values.
// You can construct a concrete instance of `ScheduleBasePtrInput` via:
//
//	        ScheduleBaseArgs{...}
//
//	or:
//
//	        nil
type ScheduleBasePtrInput interface {
	pulumi.Input

	ToScheduleBasePtrOutput() ScheduleBasePtrOutput
	ToScheduleBasePtrOutputWithContext(context.Context) ScheduleBasePtrOutput
}

type scheduleBasePtrType ScheduleBaseArgs

func ScheduleBasePtr(v *ScheduleBaseArgs) ScheduleBasePtrInput {
	return (*scheduleBasePtrType)(v)
}

func (*scheduleBasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBase)(nil)).Elem()
}

func (i *scheduleBasePtrType) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return i.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (i *scheduleBasePtrType) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleBasePtrOutput)
}

type ScheduleBaseOutput struct{ *pulumi.OutputState }

func (ScheduleBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBase)(nil)).Elem()
}

func (o ScheduleBaseOutput) ToScheduleBaseOutput() ScheduleBaseOutput {
	return o
}

func (o ScheduleBaseOutput) ToScheduleBaseOutputWithContext(ctx context.Context) ScheduleBaseOutput {
	return o
}

func (o ScheduleBaseOutput) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return o.ToScheduleBasePtrOutputWithContext(context.Background())
}

func (o ScheduleBaseOutput) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScheduleBase) *ScheduleBase {
		return &v
	}).(ScheduleBasePtrOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBaseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBase) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ScheduleBasePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBase)(nil)).Elem()
}

func (o ScheduleBasePtrOutput) ToScheduleBasePtrOutput() ScheduleBasePtrOutput {
	return o
}

func (o ScheduleBasePtrOutput) ToScheduleBasePtrOutputWithContext(ctx context.Context) ScheduleBasePtrOutput {
	return o
}

func (o ScheduleBasePtrOutput) Elem() ScheduleBaseOutput {
	return o.ApplyT(func(v *ScheduleBase) ScheduleBase {
		if v != nil {
			return *v
		}
		var ret ScheduleBase
		return ret
	}).(ScheduleBaseOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBasePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBasePtrOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBasePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBase) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

type ScheduleBaseResponse struct {
	// A system assigned id for the schedule.
	Id *string `pulumi:"id"`
	// The current deployment state of schedule.
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Is the schedule enabled or disabled?
	Status *string `pulumi:"status"`
}

type ScheduleBaseResponseOutput struct{ *pulumi.OutputState }

func (ScheduleBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleBaseResponse)(nil)).Elem()
}

func (o ScheduleBaseResponseOutput) ToScheduleBaseResponseOutput() ScheduleBaseResponseOutput {
	return o
}

func (o ScheduleBaseResponseOutput) ToScheduleBaseResponseOutputWithContext(ctx context.Context) ScheduleBaseResponseOutput {
	return o
}

// A system assigned id for the schedule.
func (o ScheduleBaseResponseOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseResponseOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.ProvisioningStatus }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleBaseResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type ScheduleBaseResponsePtrOutput struct{ *pulumi.OutputState }

func (ScheduleBaseResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleBaseResponse)(nil)).Elem()
}

func (o ScheduleBaseResponsePtrOutput) ToScheduleBaseResponsePtrOutput() ScheduleBaseResponsePtrOutput {
	return o
}

func (o ScheduleBaseResponsePtrOutput) ToScheduleBaseResponsePtrOutputWithContext(ctx context.Context) ScheduleBaseResponsePtrOutput {
	return o
}

func (o ScheduleBaseResponsePtrOutput) Elem() ScheduleBaseResponseOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) ScheduleBaseResponse {
		if v != nil {
			return *v
		}
		var ret ScheduleBaseResponse
		return ret
	}).(ScheduleBaseResponseOutput)
}

// A system assigned id for the schedule.
func (o ScheduleBaseResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// The current deployment state of schedule.
func (o ScheduleBaseResponsePtrOutput) ProvisioningStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.ProvisioningStatus
	}).(pulumi.StringPtrOutput)
}

// Is the schedule enabled or disabled?
func (o ScheduleBaseResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleBaseResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Base definition of a schedule
type ScheduleResponse struct {
	// [Required] Specifies the action of the schedule
	Action interface{} `pulumi:"action"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of schedule.
	DisplayName *string `pulumi:"displayName"`
	// Is the schedule enabled?
	IsEnabled *bool `pulumi:"isEnabled"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the schedule.
	ProvisioningState string `pulumi:"provisioningState"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Specifies the trigger details
	Trigger interface{} `pulumi:"trigger"`
}

// Defaults sets the appropriate defaults for ScheduleResponse
func (val *ScheduleResponse) Defaults() *ScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsEnabled == nil {
		isEnabled_ := true
		tmp.IsEnabled = &isEnabled_
	}
	return &tmp
}

// Base definition of a schedule
type ScheduleResponseOutput struct{ *pulumi.OutputState }

func (ScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleResponse)(nil)).Elem()
}

func (o ScheduleResponseOutput) ToScheduleResponseOutput() ScheduleResponseOutput {
	return o
}

func (o ScheduleResponseOutput) ToScheduleResponseOutputWithContext(ctx context.Context) ScheduleResponseOutput {
	return o
}

// [Required] Specifies the action of the schedule
func (o ScheduleResponseOutput) Action() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Action }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ScheduleResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of schedule.
func (o ScheduleResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Is the schedule enabled?
func (o ScheduleResponseOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ScheduleResponse) *bool { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ScheduleResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the schedule.
func (o ScheduleResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ScheduleResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ScheduleResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Specifies the trigger details
func (o ScheduleResponseOutput) Trigger() pulumi.AnyOutput {
	return o.ApplyT(func(v ScheduleResponse) interface{} { return v.Trigger }).(pulumi.AnyOutput)
}

// Script reference
type ScriptReference struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: inline, workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// ScriptReferenceInput is an input type that accepts ScriptReferenceArgs and ScriptReferenceOutput values.
// You can construct a concrete instance of `ScriptReferenceInput` via:
//
//	ScriptReferenceArgs{...}
type ScriptReferenceInput interface {
	pulumi.Input

	ToScriptReferenceOutput() ScriptReferenceOutput
	ToScriptReferenceOutputWithContext(context.Context) ScriptReferenceOutput
}

// Script reference
type ScriptReferenceArgs struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments pulumi.StringPtrInput `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData pulumi.StringPtrInput `pulumi:"scriptData"`
	// The storage source of the script: inline, workspace.
	ScriptSource pulumi.StringPtrInput `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (ScriptReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReference)(nil)).Elem()
}

func (i ScriptReferenceArgs) ToScriptReferenceOutput() ScriptReferenceOutput {
	return i.ToScriptReferenceOutputWithContext(context.Background())
}

func (i ScriptReferenceArgs) ToScriptReferenceOutputWithContext(ctx context.Context) ScriptReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferenceOutput)
}

func (i ScriptReferenceArgs) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return i.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (i ScriptReferenceArgs) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferenceOutput).ToScriptReferencePtrOutputWithContext(ctx)
}

// ScriptReferencePtrInput is an input type that accepts ScriptReferenceArgs, ScriptReferencePtr and ScriptReferencePtrOutput values.
// You can construct a concrete instance of `ScriptReferencePtrInput` via:
//
//	        ScriptReferenceArgs{...}
//
//	or:
//
//	        nil
type ScriptReferencePtrInput interface {
	pulumi.Input

	ToScriptReferencePtrOutput() ScriptReferencePtrOutput
	ToScriptReferencePtrOutputWithContext(context.Context) ScriptReferencePtrOutput
}

type scriptReferencePtrType ScriptReferenceArgs

func ScriptReferencePtr(v *ScriptReferenceArgs) ScriptReferencePtrInput {
	return (*scriptReferencePtrType)(v)
}

func (*scriptReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReference)(nil)).Elem()
}

func (i *scriptReferencePtrType) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return i.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (i *scriptReferencePtrType) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptReferencePtrOutput)
}

// Script reference
type ScriptReferenceOutput struct{ *pulumi.OutputState }

func (ScriptReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReference)(nil)).Elem()
}

func (o ScriptReferenceOutput) ToScriptReferenceOutput() ScriptReferenceOutput {
	return o
}

func (o ScriptReferenceOutput) ToScriptReferenceOutputWithContext(ctx context.Context) ScriptReferenceOutput {
	return o
}

func (o ScriptReferenceOutput) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return o.ToScriptReferencePtrOutputWithContext(context.Background())
}

func (o ScriptReferenceOutput) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptReference) *ScriptReference {
		return &v
	}).(ScriptReferencePtrOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptArguments }).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptData }).(pulumi.StringPtrOutput)
}

// The storage source of the script: inline, workspace.
func (o ScriptReferenceOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.ScriptSource }).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReference) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ScriptReferencePtrOutput struct{ *pulumi.OutputState }

func (ScriptReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReference)(nil)).Elem()
}

func (o ScriptReferencePtrOutput) ToScriptReferencePtrOutput() ScriptReferencePtrOutput {
	return o
}

func (o ScriptReferencePtrOutput) ToScriptReferencePtrOutputWithContext(ctx context.Context) ScriptReferencePtrOutput {
	return o
}

func (o ScriptReferencePtrOutput) Elem() ScriptReferenceOutput {
	return o.ApplyT(func(v *ScriptReference) ScriptReference {
		if v != nil {
			return *v
		}
		var ret ScriptReference
		return ret
	}).(ScriptReferenceOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferencePtrOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptArguments
	}).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferencePtrOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptData
	}).(pulumi.StringPtrOutput)
}

// The storage source of the script: inline, workspace.
func (o ScriptReferencePtrOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.ScriptSource
	}).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferencePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReference) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Script reference
type ScriptReferenceResponse struct {
	// Optional command line arguments passed to the script to run.
	ScriptArguments *string `pulumi:"scriptArguments"`
	// The location of scripts in the mounted volume.
	ScriptData *string `pulumi:"scriptData"`
	// The storage source of the script: inline, workspace.
	ScriptSource *string `pulumi:"scriptSource"`
	// Optional time period passed to timeout command.
	Timeout *string `pulumi:"timeout"`
}

// Script reference
type ScriptReferenceResponseOutput struct{ *pulumi.OutputState }

func (ScriptReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptReferenceResponse)(nil)).Elem()
}

func (o ScriptReferenceResponseOutput) ToScriptReferenceResponseOutput() ScriptReferenceResponseOutput {
	return o
}

func (o ScriptReferenceResponseOutput) ToScriptReferenceResponseOutputWithContext(ctx context.Context) ScriptReferenceResponseOutput {
	return o
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceResponseOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptArguments }).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceResponseOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptData }).(pulumi.StringPtrOutput)
}

// The storage source of the script: inline, workspace.
func (o ScriptReferenceResponseOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.ScriptSource }).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptReferenceResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ScriptReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (ScriptReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptReferenceResponse)(nil)).Elem()
}

func (o ScriptReferenceResponsePtrOutput) ToScriptReferenceResponsePtrOutput() ScriptReferenceResponsePtrOutput {
	return o
}

func (o ScriptReferenceResponsePtrOutput) ToScriptReferenceResponsePtrOutputWithContext(ctx context.Context) ScriptReferenceResponsePtrOutput {
	return o
}

func (o ScriptReferenceResponsePtrOutput) Elem() ScriptReferenceResponseOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) ScriptReferenceResponse {
		if v != nil {
			return *v
		}
		var ret ScriptReferenceResponse
		return ret
	}).(ScriptReferenceResponseOutput)
}

// Optional command line arguments passed to the script to run.
func (o ScriptReferenceResponsePtrOutput) ScriptArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptArguments
	}).(pulumi.StringPtrOutput)
}

// The location of scripts in the mounted volume.
func (o ScriptReferenceResponsePtrOutput) ScriptData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptData
	}).(pulumi.StringPtrOutput)
}

// The storage source of the script: inline, workspace.
func (o ScriptReferenceResponsePtrOutput) ScriptSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScriptSource
	}).(pulumi.StringPtrOutput)
}

// Optional time period passed to timeout command.
func (o ScriptReferenceResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Customized setup scripts
type ScriptsToExecute struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReference `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReference `pulumi:"startupScript"`
}

// ScriptsToExecuteInput is an input type that accepts ScriptsToExecuteArgs and ScriptsToExecuteOutput values.
// You can construct a concrete instance of `ScriptsToExecuteInput` via:
//
//	ScriptsToExecuteArgs{...}
type ScriptsToExecuteInput interface {
	pulumi.Input

	ToScriptsToExecuteOutput() ScriptsToExecuteOutput
	ToScriptsToExecuteOutputWithContext(context.Context) ScriptsToExecuteOutput
}

// Customized setup scripts
type ScriptsToExecuteArgs struct {
	// Script that's run only once during provision of the compute.
	CreationScript ScriptReferencePtrInput `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript ScriptReferencePtrInput `pulumi:"startupScript"`
}

func (ScriptsToExecuteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecute)(nil)).Elem()
}

func (i ScriptsToExecuteArgs) ToScriptsToExecuteOutput() ScriptsToExecuteOutput {
	return i.ToScriptsToExecuteOutputWithContext(context.Background())
}

func (i ScriptsToExecuteArgs) ToScriptsToExecuteOutputWithContext(ctx context.Context) ScriptsToExecuteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecuteOutput)
}

func (i ScriptsToExecuteArgs) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return i.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (i ScriptsToExecuteArgs) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecuteOutput).ToScriptsToExecutePtrOutputWithContext(ctx)
}

// ScriptsToExecutePtrInput is an input type that accepts ScriptsToExecuteArgs, ScriptsToExecutePtr and ScriptsToExecutePtrOutput values.
// You can construct a concrete instance of `ScriptsToExecutePtrInput` via:
//
//	        ScriptsToExecuteArgs{...}
//
//	or:
//
//	        nil
type ScriptsToExecutePtrInput interface {
	pulumi.Input

	ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput
	ToScriptsToExecutePtrOutputWithContext(context.Context) ScriptsToExecutePtrOutput
}

type scriptsToExecutePtrType ScriptsToExecuteArgs

func ScriptsToExecutePtr(v *ScriptsToExecuteArgs) ScriptsToExecutePtrInput {
	return (*scriptsToExecutePtrType)(v)
}

func (*scriptsToExecutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecute)(nil)).Elem()
}

func (i *scriptsToExecutePtrType) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return i.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (i *scriptsToExecutePtrType) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptsToExecutePtrOutput)
}

// Customized setup scripts
type ScriptsToExecuteOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecute)(nil)).Elem()
}

func (o ScriptsToExecuteOutput) ToScriptsToExecuteOutput() ScriptsToExecuteOutput {
	return o
}

func (o ScriptsToExecuteOutput) ToScriptsToExecuteOutputWithContext(ctx context.Context) ScriptsToExecuteOutput {
	return o
}

func (o ScriptsToExecuteOutput) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return o.ToScriptsToExecutePtrOutputWithContext(context.Background())
}

func (o ScriptsToExecuteOutput) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptsToExecute) *ScriptsToExecute {
		return &v
	}).(ScriptsToExecutePtrOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteOutput) CreationScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v ScriptsToExecute) *ScriptReference { return v.CreationScript }).(ScriptReferencePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteOutput) StartupScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v ScriptsToExecute) *ScriptReference { return v.StartupScript }).(ScriptReferencePtrOutput)
}

type ScriptsToExecutePtrOutput struct{ *pulumi.OutputState }

func (ScriptsToExecutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecute)(nil)).Elem()
}

func (o ScriptsToExecutePtrOutput) ToScriptsToExecutePtrOutput() ScriptsToExecutePtrOutput {
	return o
}

func (o ScriptsToExecutePtrOutput) ToScriptsToExecutePtrOutputWithContext(ctx context.Context) ScriptsToExecutePtrOutput {
	return o
}

func (o ScriptsToExecutePtrOutput) Elem() ScriptsToExecuteOutput {
	return o.ApplyT(func(v *ScriptsToExecute) ScriptsToExecute {
		if v != nil {
			return *v
		}
		var ret ScriptsToExecute
		return ret
	}).(ScriptsToExecuteOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecutePtrOutput) CreationScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecute) *ScriptReference {
		if v == nil {
			return nil
		}
		return v.CreationScript
	}).(ScriptReferencePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecutePtrOutput) StartupScript() ScriptReferencePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecute) *ScriptReference {
		if v == nil {
			return nil
		}
		return v.StartupScript
	}).(ScriptReferencePtrOutput)
}

// Customized setup scripts
type ScriptsToExecuteResponse struct {
	// Script that's run only once during provision of the compute.
	CreationScript *ScriptReferenceResponse `pulumi:"creationScript"`
	// Script that's run every time the machine starts.
	StartupScript *ScriptReferenceResponse `pulumi:"startupScript"`
}

// Customized setup scripts
type ScriptsToExecuteResponseOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptsToExecuteResponse)(nil)).Elem()
}

func (o ScriptsToExecuteResponseOutput) ToScriptsToExecuteResponseOutput() ScriptsToExecuteResponseOutput {
	return o
}

func (o ScriptsToExecuteResponseOutput) ToScriptsToExecuteResponseOutputWithContext(ctx context.Context) ScriptsToExecuteResponseOutput {
	return o
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteResponseOutput) CreationScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v ScriptsToExecuteResponse) *ScriptReferenceResponse { return v.CreationScript }).(ScriptReferenceResponsePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteResponseOutput) StartupScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v ScriptsToExecuteResponse) *ScriptReferenceResponse { return v.StartupScript }).(ScriptReferenceResponsePtrOutput)
}

type ScriptsToExecuteResponsePtrOutput struct{ *pulumi.OutputState }

func (ScriptsToExecuteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptsToExecuteResponse)(nil)).Elem()
}

func (o ScriptsToExecuteResponsePtrOutput) ToScriptsToExecuteResponsePtrOutput() ScriptsToExecuteResponsePtrOutput {
	return o
}

func (o ScriptsToExecuteResponsePtrOutput) ToScriptsToExecuteResponsePtrOutputWithContext(ctx context.Context) ScriptsToExecuteResponsePtrOutput {
	return o
}

func (o ScriptsToExecuteResponsePtrOutput) Elem() ScriptsToExecuteResponseOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) ScriptsToExecuteResponse {
		if v != nil {
			return *v
		}
		var ret ScriptsToExecuteResponse
		return ret
	}).(ScriptsToExecuteResponseOutput)
}

// Script that's run only once during provision of the compute.
func (o ScriptsToExecuteResponsePtrOutput) CreationScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) *ScriptReferenceResponse {
		if v == nil {
			return nil
		}
		return v.CreationScript
	}).(ScriptReferenceResponsePtrOutput)
}

// Script that's run every time the machine starts.
func (o ScriptsToExecuteResponsePtrOutput) StartupScript() ScriptReferenceResponsePtrOutput {
	return o.ApplyT(func(v *ScriptsToExecuteResponse) *ScriptReferenceResponse {
		if v == nil {
			return nil
		}
		return v.StartupScript
	}).(ScriptReferenceResponsePtrOutput)
}

// Secret Configuration definition.
type SecretConfiguration struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// SecretConfigurationInput is an input type that accepts SecretConfigurationArgs and SecretConfigurationOutput values.
// You can construct a concrete instance of `SecretConfigurationInput` via:
//
//	SecretConfigurationArgs{...}
type SecretConfigurationInput interface {
	pulumi.Input

	ToSecretConfigurationOutput() SecretConfigurationOutput
	ToSecretConfigurationOutputWithContext(context.Context) SecretConfigurationOutput
}

// Secret Configuration definition.
type SecretConfigurationArgs struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName pulumi.StringPtrInput `pulumi:"workspaceSecretName"`
}

func (SecretConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return i.ToSecretConfigurationOutputWithContext(context.Background())
}

func (i SecretConfigurationArgs) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationOutput)
}

// SecretConfigurationMapInput is an input type that accepts SecretConfigurationMap and SecretConfigurationMapOutput values.
// You can construct a concrete instance of `SecretConfigurationMapInput` via:
//
//	SecretConfigurationMap{ "key": SecretConfigurationArgs{...} }
type SecretConfigurationMapInput interface {
	pulumi.Input

	ToSecretConfigurationMapOutput() SecretConfigurationMapOutput
	ToSecretConfigurationMapOutputWithContext(context.Context) SecretConfigurationMapOutput
}

type SecretConfigurationMap map[string]SecretConfigurationInput

func (SecretConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return i.ToSecretConfigurationMapOutputWithContext(context.Background())
}

func (i SecretConfigurationMap) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretConfigurationMapOutput)
}

// Secret Configuration definition.
type SecretConfigurationOutput struct{ *pulumi.OutputState }

func (SecretConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutput() SecretConfigurationOutput {
	return o
}

func (o SecretConfigurationOutput) ToSecretConfigurationOutputWithContext(ctx context.Context) SecretConfigurationOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfiguration) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfiguration)(nil)).Elem()
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutput() SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) ToSecretConfigurationMapOutputWithContext(ctx context.Context) SecretConfigurationMapOutput {
	return o
}

func (o SecretConfigurationMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfiguration {
		return vs[0].(map[string]SecretConfiguration)[vs[1].(string)]
	}).(SecretConfigurationOutput)
}

// Secret Configuration definition.
type SecretConfigurationResponse struct {
	// Secret Uri.
	// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
	Uri *string `pulumi:"uri"`
	// Name of secret in workspace key vault.
	WorkspaceSecretName *string `pulumi:"workspaceSecretName"`
}

// Secret Configuration definition.
type SecretConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutput() SecretConfigurationResponseOutput {
	return o
}

func (o SecretConfigurationResponseOutput) ToSecretConfigurationResponseOutputWithContext(ctx context.Context) SecretConfigurationResponseOutput {
	return o
}

// Secret Uri.
// Sample Uri : https://myvault.vault.azure.net/secrets/mysecretname/secretversion
func (o SecretConfigurationResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Name of secret in workspace key vault.
func (o SecretConfigurationResponseOutput) WorkspaceSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretConfigurationResponse) *string { return v.WorkspaceSecretName }).(pulumi.StringPtrOutput)
}

type SecretConfigurationResponseMapOutput struct{ *pulumi.OutputState }

func (SecretConfigurationResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SecretConfigurationResponse)(nil)).Elem()
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutput() SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) ToSecretConfigurationResponseMapOutputWithContext(ctx context.Context) SecretConfigurationResponseMapOutput {
	return o
}

func (o SecretConfigurationResponseMapOutput) MapIndex(k pulumi.StringInput) SecretConfigurationResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SecretConfigurationResponse {
		return vs[0].(map[string]SecretConfigurationResponse)[vs[1].(string)]
	}).(SecretConfigurationResponseOutput)
}

type ServerlessComputeSettings struct {
	// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
	ServerlessComputeCustomSubnet *string `pulumi:"serverlessComputeCustomSubnet"`
	// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
	ServerlessComputeNoPublicIP *bool `pulumi:"serverlessComputeNoPublicIP"`
}

// ServerlessComputeSettingsInput is an input type that accepts ServerlessComputeSettingsArgs and ServerlessComputeSettingsOutput values.
// You can construct a concrete instance of `ServerlessComputeSettingsInput` via:
//
//	ServerlessComputeSettingsArgs{...}
type ServerlessComputeSettingsInput interface {
	pulumi.Input

	ToServerlessComputeSettingsOutput() ServerlessComputeSettingsOutput
	ToServerlessComputeSettingsOutputWithContext(context.Context) ServerlessComputeSettingsOutput
}

type ServerlessComputeSettingsArgs struct {
	// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
	ServerlessComputeCustomSubnet pulumi.StringPtrInput `pulumi:"serverlessComputeCustomSubnet"`
	// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
	ServerlessComputeNoPublicIP pulumi.BoolPtrInput `pulumi:"serverlessComputeNoPublicIP"`
}

func (ServerlessComputeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessComputeSettings)(nil)).Elem()
}

func (i ServerlessComputeSettingsArgs) ToServerlessComputeSettingsOutput() ServerlessComputeSettingsOutput {
	return i.ToServerlessComputeSettingsOutputWithContext(context.Background())
}

func (i ServerlessComputeSettingsArgs) ToServerlessComputeSettingsOutputWithContext(ctx context.Context) ServerlessComputeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessComputeSettingsOutput)
}

func (i ServerlessComputeSettingsArgs) ToServerlessComputeSettingsPtrOutput() ServerlessComputeSettingsPtrOutput {
	return i.ToServerlessComputeSettingsPtrOutputWithContext(context.Background())
}

func (i ServerlessComputeSettingsArgs) ToServerlessComputeSettingsPtrOutputWithContext(ctx context.Context) ServerlessComputeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessComputeSettingsOutput).ToServerlessComputeSettingsPtrOutputWithContext(ctx)
}

// ServerlessComputeSettingsPtrInput is an input type that accepts ServerlessComputeSettingsArgs, ServerlessComputeSettingsPtr and ServerlessComputeSettingsPtrOutput values.
// You can construct a concrete instance of `ServerlessComputeSettingsPtrInput` via:
//
//	        ServerlessComputeSettingsArgs{...}
//
//	or:
//
//	        nil
type ServerlessComputeSettingsPtrInput interface {
	pulumi.Input

	ToServerlessComputeSettingsPtrOutput() ServerlessComputeSettingsPtrOutput
	ToServerlessComputeSettingsPtrOutputWithContext(context.Context) ServerlessComputeSettingsPtrOutput
}

type serverlessComputeSettingsPtrType ServerlessComputeSettingsArgs

func ServerlessComputeSettingsPtr(v *ServerlessComputeSettingsArgs) ServerlessComputeSettingsPtrInput {
	return (*serverlessComputeSettingsPtrType)(v)
}

func (*serverlessComputeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessComputeSettings)(nil)).Elem()
}

func (i *serverlessComputeSettingsPtrType) ToServerlessComputeSettingsPtrOutput() ServerlessComputeSettingsPtrOutput {
	return i.ToServerlessComputeSettingsPtrOutputWithContext(context.Background())
}

func (i *serverlessComputeSettingsPtrType) ToServerlessComputeSettingsPtrOutputWithContext(ctx context.Context) ServerlessComputeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessComputeSettingsPtrOutput)
}

type ServerlessComputeSettingsOutput struct{ *pulumi.OutputState }

func (ServerlessComputeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessComputeSettings)(nil)).Elem()
}

func (o ServerlessComputeSettingsOutput) ToServerlessComputeSettingsOutput() ServerlessComputeSettingsOutput {
	return o
}

func (o ServerlessComputeSettingsOutput) ToServerlessComputeSettingsOutputWithContext(ctx context.Context) ServerlessComputeSettingsOutput {
	return o
}

func (o ServerlessComputeSettingsOutput) ToServerlessComputeSettingsPtrOutput() ServerlessComputeSettingsPtrOutput {
	return o.ToServerlessComputeSettingsPtrOutputWithContext(context.Background())
}

func (o ServerlessComputeSettingsOutput) ToServerlessComputeSettingsPtrOutputWithContext(ctx context.Context) ServerlessComputeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessComputeSettings) *ServerlessComputeSettings {
		return &v
	}).(ServerlessComputeSettingsPtrOutput)
}

// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
func (o ServerlessComputeSettingsOutput) ServerlessComputeCustomSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessComputeSettings) *string { return v.ServerlessComputeCustomSubnet }).(pulumi.StringPtrOutput)
}

// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
func (o ServerlessComputeSettingsOutput) ServerlessComputeNoPublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerlessComputeSettings) *bool { return v.ServerlessComputeNoPublicIP }).(pulumi.BoolPtrOutput)
}

type ServerlessComputeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServerlessComputeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessComputeSettings)(nil)).Elem()
}

func (o ServerlessComputeSettingsPtrOutput) ToServerlessComputeSettingsPtrOutput() ServerlessComputeSettingsPtrOutput {
	return o
}

func (o ServerlessComputeSettingsPtrOutput) ToServerlessComputeSettingsPtrOutputWithContext(ctx context.Context) ServerlessComputeSettingsPtrOutput {
	return o
}

func (o ServerlessComputeSettingsPtrOutput) Elem() ServerlessComputeSettingsOutput {
	return o.ApplyT(func(v *ServerlessComputeSettings) ServerlessComputeSettings {
		if v != nil {
			return *v
		}
		var ret ServerlessComputeSettings
		return ret
	}).(ServerlessComputeSettingsOutput)
}

// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
func (o ServerlessComputeSettingsPtrOutput) ServerlessComputeCustomSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessComputeSettings) *string {
		if v == nil {
			return nil
		}
		return v.ServerlessComputeCustomSubnet
	}).(pulumi.StringPtrOutput)
}

// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
func (o ServerlessComputeSettingsPtrOutput) ServerlessComputeNoPublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerlessComputeSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ServerlessComputeNoPublicIP
	}).(pulumi.BoolPtrOutput)
}

type ServerlessComputeSettingsResponse struct {
	// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
	ServerlessComputeCustomSubnet *string `pulumi:"serverlessComputeCustomSubnet"`
	// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
	ServerlessComputeNoPublicIP *bool `pulumi:"serverlessComputeNoPublicIP"`
}

type ServerlessComputeSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServerlessComputeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessComputeSettingsResponse)(nil)).Elem()
}

func (o ServerlessComputeSettingsResponseOutput) ToServerlessComputeSettingsResponseOutput() ServerlessComputeSettingsResponseOutput {
	return o
}

func (o ServerlessComputeSettingsResponseOutput) ToServerlessComputeSettingsResponseOutputWithContext(ctx context.Context) ServerlessComputeSettingsResponseOutput {
	return o
}

// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
func (o ServerlessComputeSettingsResponseOutput) ServerlessComputeCustomSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessComputeSettingsResponse) *string { return v.ServerlessComputeCustomSubnet }).(pulumi.StringPtrOutput)
}

// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
func (o ServerlessComputeSettingsResponseOutput) ServerlessComputeNoPublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServerlessComputeSettingsResponse) *bool { return v.ServerlessComputeNoPublicIP }).(pulumi.BoolPtrOutput)
}

type ServerlessComputeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessComputeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessComputeSettingsResponse)(nil)).Elem()
}

func (o ServerlessComputeSettingsResponsePtrOutput) ToServerlessComputeSettingsResponsePtrOutput() ServerlessComputeSettingsResponsePtrOutput {
	return o
}

func (o ServerlessComputeSettingsResponsePtrOutput) ToServerlessComputeSettingsResponsePtrOutputWithContext(ctx context.Context) ServerlessComputeSettingsResponsePtrOutput {
	return o
}

func (o ServerlessComputeSettingsResponsePtrOutput) Elem() ServerlessComputeSettingsResponseOutput {
	return o.ApplyT(func(v *ServerlessComputeSettingsResponse) ServerlessComputeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessComputeSettingsResponse
		return ret
	}).(ServerlessComputeSettingsResponseOutput)
}

// The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed
func (o ServerlessComputeSettingsResponsePtrOutput) ServerlessComputeCustomSubnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessComputeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServerlessComputeCustomSubnet
	}).(pulumi.StringPtrOutput)
}

// The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint
func (o ServerlessComputeSettingsResponsePtrOutput) ServerlessComputeNoPublicIP() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServerlessComputeSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.ServerlessComputeNoPublicIP
	}).(pulumi.BoolPtrOutput)
}

type ServerlessEndpointType struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode *string `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation *ServerlessEndpointCapacityReservation `pulumi:"capacityReservation"`
	// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
	ModelSettings *ModelSettings `pulumi:"modelSettings"`
	// The publisher-defined Serverless Offer to provision the endpoint with.
	Offer *ServerlessOffer `pulumi:"offer"`
}

// ServerlessEndpointTypeInput is an input type that accepts ServerlessEndpointTypeArgs and ServerlessEndpointTypeOutput values.
// You can construct a concrete instance of `ServerlessEndpointTypeInput` via:
//
//	ServerlessEndpointTypeArgs{...}
type ServerlessEndpointTypeInput interface {
	pulumi.Input

	ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput
	ToServerlessEndpointTypeOutputWithContext(context.Context) ServerlessEndpointTypeOutput
}

type ServerlessEndpointTypeArgs struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode pulumi.StringPtrInput `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation ServerlessEndpointCapacityReservationPtrInput `pulumi:"capacityReservation"`
	// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
	ModelSettings ModelSettingsPtrInput `pulumi:"modelSettings"`
	// The publisher-defined Serverless Offer to provision the endpoint with.
	Offer ServerlessOfferPtrInput `pulumi:"offer"`
}

func (ServerlessEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointType)(nil)).Elem()
}

func (i ServerlessEndpointTypeArgs) ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput {
	return i.ToServerlessEndpointTypeOutputWithContext(context.Background())
}

func (i ServerlessEndpointTypeArgs) ToServerlessEndpointTypeOutputWithContext(ctx context.Context) ServerlessEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointTypeOutput)
}

type ServerlessEndpointTypeOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointType)(nil)).Elem()
}

func (o ServerlessEndpointTypeOutput) ToServerlessEndpointTypeOutput() ServerlessEndpointTypeOutput {
	return o
}

func (o ServerlessEndpointTypeOutput) ToServerlessEndpointTypeOutputWithContext(ctx context.Context) ServerlessEndpointTypeOutput {
	return o
}

// Specifies the authentication mode for the Serverless endpoint.
func (o ServerlessEndpointTypeOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
// will be allocated capacity from the specified capacity reservation group.
func (o ServerlessEndpointTypeOutput) CapacityReservation() ServerlessEndpointCapacityReservationPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *ServerlessEndpointCapacityReservation { return v.CapacityReservation }).(ServerlessEndpointCapacityReservationPtrOutput)
}

// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
func (o ServerlessEndpointTypeOutput) ModelSettings() ModelSettingsPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *ModelSettings { return v.ModelSettings }).(ModelSettingsPtrOutput)
}

// The publisher-defined Serverless Offer to provision the endpoint with.
func (o ServerlessEndpointTypeOutput) Offer() ServerlessOfferPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointType) *ServerlessOffer { return v.Offer }).(ServerlessOfferPtrOutput)
}

type ServerlessEndpointCapacityReservation struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId string `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity *int `pulumi:"endpointReservedCapacity"`
}

// ServerlessEndpointCapacityReservationInput is an input type that accepts ServerlessEndpointCapacityReservationArgs and ServerlessEndpointCapacityReservationOutput values.
// You can construct a concrete instance of `ServerlessEndpointCapacityReservationInput` via:
//
//	ServerlessEndpointCapacityReservationArgs{...}
type ServerlessEndpointCapacityReservationInput interface {
	pulumi.Input

	ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput
	ToServerlessEndpointCapacityReservationOutputWithContext(context.Context) ServerlessEndpointCapacityReservationOutput
}

type ServerlessEndpointCapacityReservationArgs struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId pulumi.StringInput `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity pulumi.IntPtrInput `pulumi:"endpointReservedCapacity"`
}

func (ServerlessEndpointCapacityReservationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput {
	return i.ToServerlessEndpointCapacityReservationOutputWithContext(context.Background())
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationOutput)
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return i.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (i ServerlessEndpointCapacityReservationArgs) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationOutput).ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx)
}

// ServerlessEndpointCapacityReservationPtrInput is an input type that accepts ServerlessEndpointCapacityReservationArgs, ServerlessEndpointCapacityReservationPtr and ServerlessEndpointCapacityReservationPtrOutput values.
// You can construct a concrete instance of `ServerlessEndpointCapacityReservationPtrInput` via:
//
//	        ServerlessEndpointCapacityReservationArgs{...}
//
//	or:
//
//	        nil
type ServerlessEndpointCapacityReservationPtrInput interface {
	pulumi.Input

	ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput
	ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Context) ServerlessEndpointCapacityReservationPtrOutput
}

type serverlessEndpointCapacityReservationPtrType ServerlessEndpointCapacityReservationArgs

func ServerlessEndpointCapacityReservationPtr(v *ServerlessEndpointCapacityReservationArgs) ServerlessEndpointCapacityReservationPtrInput {
	return (*serverlessEndpointCapacityReservationPtrType)(v)
}

func (*serverlessEndpointCapacityReservationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (i *serverlessEndpointCapacityReservationPtrType) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return i.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (i *serverlessEndpointCapacityReservationPtrType) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessEndpointCapacityReservationPtrOutput)
}

type ServerlessEndpointCapacityReservationOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationOutput() ServerlessEndpointCapacityReservationOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return o.ToServerlessEndpointCapacityReservationPtrOutputWithContext(context.Background())
}

func (o ServerlessEndpointCapacityReservationOutput) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessEndpointCapacityReservation) *ServerlessEndpointCapacityReservation {
		return &v
	}).(ServerlessEndpointCapacityReservationPtrOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationOutput) CapacityReservationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservation) string { return v.CapacityReservationGroupId }).(pulumi.StringOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservation) *int { return v.EndpointReservedCapacity }).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationPtrOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservation)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationPtrOutput) ToServerlessEndpointCapacityReservationPtrOutput() ServerlessEndpointCapacityReservationPtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationPtrOutput) ToServerlessEndpointCapacityReservationPtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationPtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationPtrOutput) Elem() ServerlessEndpointCapacityReservationOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) ServerlessEndpointCapacityReservation {
		if v != nil {
			return *v
		}
		var ret ServerlessEndpointCapacityReservation
		return ret
	}).(ServerlessEndpointCapacityReservationOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationPtrOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) *string {
		if v == nil {
			return nil
		}
		return &v.CapacityReservationGroupId
	}).(pulumi.StringPtrOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationPtrOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservation) *int {
		if v == nil {
			return nil
		}
		return v.EndpointReservedCapacity
	}).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationResponse struct {
	// [Required] Specifies a capacity reservation group ID to allocate capacity from.
	CapacityReservationGroupId string `pulumi:"capacityReservationGroupId"`
	// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
	EndpointReservedCapacity *int `pulumi:"endpointReservedCapacity"`
}

type ServerlessEndpointCapacityReservationResponseOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointCapacityReservationResponse)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationResponseOutput) ToServerlessEndpointCapacityReservationResponseOutput() ServerlessEndpointCapacityReservationResponseOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponseOutput) ToServerlessEndpointCapacityReservationResponseOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationResponseOutput {
	return o
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationResponseOutput) CapacityReservationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservationResponse) string { return v.CapacityReservationGroupId }).(pulumi.StringOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationResponseOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointCapacityReservationResponse) *int { return v.EndpointReservedCapacity }).(pulumi.IntPtrOutput)
}

type ServerlessEndpointCapacityReservationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointCapacityReservationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessEndpointCapacityReservationResponse)(nil)).Elem()
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) ToServerlessEndpointCapacityReservationResponsePtrOutput() ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) ToServerlessEndpointCapacityReservationResponsePtrOutputWithContext(ctx context.Context) ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o
}

func (o ServerlessEndpointCapacityReservationResponsePtrOutput) Elem() ServerlessEndpointCapacityReservationResponseOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) ServerlessEndpointCapacityReservationResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessEndpointCapacityReservationResponse
		return ret
	}).(ServerlessEndpointCapacityReservationResponseOutput)
}

// [Required] Specifies a capacity reservation group ID to allocate capacity from.
func (o ServerlessEndpointCapacityReservationResponsePtrOutput) CapacityReservationGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CapacityReservationGroupId
	}).(pulumi.StringPtrOutput)
}

// Specifies a capacity amount to reserve for this endpoint within the parent capacity reservation group.
func (o ServerlessEndpointCapacityReservationResponsePtrOutput) EndpointReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServerlessEndpointCapacityReservationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EndpointReservedCapacity
	}).(pulumi.IntPtrOutput)
}

type ServerlessEndpointResponse struct {
	// Specifies the authentication mode for the Serverless endpoint.
	AuthMode *string `pulumi:"authMode"`
	// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
	// will be allocated capacity from the specified capacity reservation group.
	CapacityReservation *ServerlessEndpointCapacityReservationResponse `pulumi:"capacityReservation"`
	// State of the Serverless Endpoint.
	EndpointState string `pulumi:"endpointState"`
	// The inference uri to target when making requests against the serverless endpoint
	InferenceEndpoint ServerlessInferenceEndpointResponse `pulumi:"inferenceEndpoint"`
	// The MarketplaceSubscription ARM ID associated to this ServerlessEndpoint.
	MarketplaceSubscriptionId string `pulumi:"marketplaceSubscriptionId"`
	// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
	ModelSettings *ModelSettingsResponse `pulumi:"modelSettings"`
	// The publisher-defined Serverless Offer to provision the endpoint with.
	Offer *ServerlessOfferResponse `pulumi:"offer"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
}

type ServerlessEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServerlessEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessEndpointResponse)(nil)).Elem()
}

func (o ServerlessEndpointResponseOutput) ToServerlessEndpointResponseOutput() ServerlessEndpointResponseOutput {
	return o
}

func (o ServerlessEndpointResponseOutput) ToServerlessEndpointResponseOutputWithContext(ctx context.Context) ServerlessEndpointResponseOutput {
	return o
}

// Specifies the authentication mode for the Serverless endpoint.
func (o ServerlessEndpointResponseOutput) AuthMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *string { return v.AuthMode }).(pulumi.StringPtrOutput)
}

// Optional capacity reservation information for the endpoint. When specified, the Serverless Endpoint
// will be allocated capacity from the specified capacity reservation group.
func (o ServerlessEndpointResponseOutput) CapacityReservation() ServerlessEndpointCapacityReservationResponsePtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *ServerlessEndpointCapacityReservationResponse {
		return v.CapacityReservation
	}).(ServerlessEndpointCapacityReservationResponsePtrOutput)
}

// State of the Serverless Endpoint.
func (o ServerlessEndpointResponseOutput) EndpointState() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) string { return v.EndpointState }).(pulumi.StringOutput)
}

// The inference uri to target when making requests against the serverless endpoint
func (o ServerlessEndpointResponseOutput) InferenceEndpoint() ServerlessInferenceEndpointResponseOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) ServerlessInferenceEndpointResponse { return v.InferenceEndpoint }).(ServerlessInferenceEndpointResponseOutput)
}

// The MarketplaceSubscription ARM ID associated to this ServerlessEndpoint.
func (o ServerlessEndpointResponseOutput) MarketplaceSubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) string { return v.MarketplaceSubscriptionId }).(pulumi.StringOutput)
}

// The model settings (model id) for the model being serviced on the ServerlessEndpoint.
func (o ServerlessEndpointResponseOutput) ModelSettings() ModelSettingsResponsePtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *ModelSettingsResponse { return v.ModelSettings }).(ModelSettingsResponsePtrOutput)
}

// The publisher-defined Serverless Offer to provision the endpoint with.
func (o ServerlessEndpointResponseOutput) Offer() ServerlessOfferResponsePtrOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) *ServerlessOfferResponse { return v.Offer }).(ServerlessOfferResponsePtrOutput)
}

// Provisioning state for the endpoint.
func (o ServerlessEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

type ServerlessInferenceEndpointResponse struct {
	// Specifies any required headers to target this serverless endpoint.
	Headers map[string]string `pulumi:"headers"`
	// [Required] The inference uri to target when making requests against the Serverless Endpoint.
	Uri string `pulumi:"uri"`
}

type ServerlessInferenceEndpointResponseOutput struct{ *pulumi.OutputState }

func (ServerlessInferenceEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessInferenceEndpointResponse)(nil)).Elem()
}

func (o ServerlessInferenceEndpointResponseOutput) ToServerlessInferenceEndpointResponseOutput() ServerlessInferenceEndpointResponseOutput {
	return o
}

func (o ServerlessInferenceEndpointResponseOutput) ToServerlessInferenceEndpointResponseOutputWithContext(ctx context.Context) ServerlessInferenceEndpointResponseOutput {
	return o
}

// Specifies any required headers to target this serverless endpoint.
func (o ServerlessInferenceEndpointResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServerlessInferenceEndpointResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// [Required] The inference uri to target when making requests against the Serverless Endpoint.
func (o ServerlessInferenceEndpointResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessInferenceEndpointResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type ServerlessOffer struct {
	// [Required] The name of the Serverless Offer
	OfferName string `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher string `pulumi:"publisher"`
}

// ServerlessOfferInput is an input type that accepts ServerlessOfferArgs and ServerlessOfferOutput values.
// You can construct a concrete instance of `ServerlessOfferInput` via:
//
//	ServerlessOfferArgs{...}
type ServerlessOfferInput interface {
	pulumi.Input

	ToServerlessOfferOutput() ServerlessOfferOutput
	ToServerlessOfferOutputWithContext(context.Context) ServerlessOfferOutput
}

type ServerlessOfferArgs struct {
	// [Required] The name of the Serverless Offer
	OfferName pulumi.StringInput `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher pulumi.StringInput `pulumi:"publisher"`
}

func (ServerlessOfferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOffer)(nil)).Elem()
}

func (i ServerlessOfferArgs) ToServerlessOfferOutput() ServerlessOfferOutput {
	return i.ToServerlessOfferOutputWithContext(context.Background())
}

func (i ServerlessOfferArgs) ToServerlessOfferOutputWithContext(ctx context.Context) ServerlessOfferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferOutput)
}

func (i ServerlessOfferArgs) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return i.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (i ServerlessOfferArgs) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferOutput).ToServerlessOfferPtrOutputWithContext(ctx)
}

// ServerlessOfferPtrInput is an input type that accepts ServerlessOfferArgs, ServerlessOfferPtr and ServerlessOfferPtrOutput values.
// You can construct a concrete instance of `ServerlessOfferPtrInput` via:
//
//	        ServerlessOfferArgs{...}
//
//	or:
//
//	        nil
type ServerlessOfferPtrInput interface {
	pulumi.Input

	ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput
	ToServerlessOfferPtrOutputWithContext(context.Context) ServerlessOfferPtrOutput
}

type serverlessOfferPtrType ServerlessOfferArgs

func ServerlessOfferPtr(v *ServerlessOfferArgs) ServerlessOfferPtrInput {
	return (*serverlessOfferPtrType)(v)
}

func (*serverlessOfferPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOffer)(nil)).Elem()
}

func (i *serverlessOfferPtrType) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return i.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (i *serverlessOfferPtrType) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerlessOfferPtrOutput)
}

type ServerlessOfferOutput struct{ *pulumi.OutputState }

func (ServerlessOfferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOffer)(nil)).Elem()
}

func (o ServerlessOfferOutput) ToServerlessOfferOutput() ServerlessOfferOutput {
	return o
}

func (o ServerlessOfferOutput) ToServerlessOfferOutputWithContext(ctx context.Context) ServerlessOfferOutput {
	return o
}

func (o ServerlessOfferOutput) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return o.ToServerlessOfferPtrOutputWithContext(context.Background())
}

func (o ServerlessOfferOutput) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServerlessOffer) *ServerlessOffer {
		return &v
	}).(ServerlessOfferPtrOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOffer) string { return v.OfferName }).(pulumi.StringOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOffer) string { return v.Publisher }).(pulumi.StringOutput)
}

type ServerlessOfferPtrOutput struct{ *pulumi.OutputState }

func (ServerlessOfferPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOffer)(nil)).Elem()
}

func (o ServerlessOfferPtrOutput) ToServerlessOfferPtrOutput() ServerlessOfferPtrOutput {
	return o
}

func (o ServerlessOfferPtrOutput) ToServerlessOfferPtrOutputWithContext(ctx context.Context) ServerlessOfferPtrOutput {
	return o
}

func (o ServerlessOfferPtrOutput) Elem() ServerlessOfferOutput {
	return o.ApplyT(func(v *ServerlessOffer) ServerlessOffer {
		if v != nil {
			return *v
		}
		var ret ServerlessOffer
		return ret
	}).(ServerlessOfferOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferPtrOutput) OfferName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOffer) *string {
		if v == nil {
			return nil
		}
		return &v.OfferName
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferPtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOffer) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type ServerlessOfferResponse struct {
	// [Required] The name of the Serverless Offer
	OfferName string `pulumi:"offerName"`
	// [Required] Publisher name of the Serverless Offer
	Publisher string `pulumi:"publisher"`
}

type ServerlessOfferResponseOutput struct{ *pulumi.OutputState }

func (ServerlessOfferResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerlessOfferResponse)(nil)).Elem()
}

func (o ServerlessOfferResponseOutput) ToServerlessOfferResponseOutput() ServerlessOfferResponseOutput {
	return o
}

func (o ServerlessOfferResponseOutput) ToServerlessOfferResponseOutputWithContext(ctx context.Context) ServerlessOfferResponseOutput {
	return o
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferResponseOutput) OfferName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOfferResponse) string { return v.OfferName }).(pulumi.StringOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferResponseOutput) Publisher() pulumi.StringOutput {
	return o.ApplyT(func(v ServerlessOfferResponse) string { return v.Publisher }).(pulumi.StringOutput)
}

type ServerlessOfferResponsePtrOutput struct{ *pulumi.OutputState }

func (ServerlessOfferResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerlessOfferResponse)(nil)).Elem()
}

func (o ServerlessOfferResponsePtrOutput) ToServerlessOfferResponsePtrOutput() ServerlessOfferResponsePtrOutput {
	return o
}

func (o ServerlessOfferResponsePtrOutput) ToServerlessOfferResponsePtrOutputWithContext(ctx context.Context) ServerlessOfferResponsePtrOutput {
	return o
}

func (o ServerlessOfferResponsePtrOutput) Elem() ServerlessOfferResponseOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) ServerlessOfferResponse {
		if v != nil {
			return *v
		}
		var ret ServerlessOfferResponse
		return ret
	}).(ServerlessOfferResponseOutput)
}

// [Required] The name of the Serverless Offer
func (o ServerlessOfferResponsePtrOutput) OfferName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.OfferName
	}).(pulumi.StringPtrOutput)
}

// [Required] Publisher name of the Serverless Offer
func (o ServerlessOfferResponsePtrOutput) Publisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerlessOfferResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Publisher
	}).(pulumi.StringPtrOutput)
}

type ServiceManagedResourcesSettings struct {
	CosmosDb *CosmosDbSettings `pulumi:"cosmosDb"`
}

// ServiceManagedResourcesSettingsInput is an input type that accepts ServiceManagedResourcesSettingsArgs and ServiceManagedResourcesSettingsOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsInput` via:
//
//	ServiceManagedResourcesSettingsArgs{...}
type ServiceManagedResourcesSettingsInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput
	ToServiceManagedResourcesSettingsOutputWithContext(context.Context) ServiceManagedResourcesSettingsOutput
}

type ServiceManagedResourcesSettingsArgs struct {
	CosmosDb CosmosDbSettingsPtrInput `pulumi:"cosmosDb"`
}

func (ServiceManagedResourcesSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return i.ToServiceManagedResourcesSettingsOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput)
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i ServiceManagedResourcesSettingsArgs) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsOutput).ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx)
}

// ServiceManagedResourcesSettingsPtrInput is an input type that accepts ServiceManagedResourcesSettingsArgs, ServiceManagedResourcesSettingsPtr and ServiceManagedResourcesSettingsPtrOutput values.
// You can construct a concrete instance of `ServiceManagedResourcesSettingsPtrInput` via:
//
//	        ServiceManagedResourcesSettingsArgs{...}
//
//	or:
//
//	        nil
type ServiceManagedResourcesSettingsPtrInput interface {
	pulumi.Input

	ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput
	ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Context) ServiceManagedResourcesSettingsPtrOutput
}

type serviceManagedResourcesSettingsPtrType ServiceManagedResourcesSettingsArgs

func ServiceManagedResourcesSettingsPtr(v *ServiceManagedResourcesSettingsArgs) ServiceManagedResourcesSettingsPtrInput {
	return (*serviceManagedResourcesSettingsPtrType)(v)
}

func (*serviceManagedResourcesSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return i.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (i *serviceManagedResourcesSettingsPtrType) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceManagedResourcesSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutput() ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsOutput {
	return o
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o.ToServiceManagedResourcesSettingsPtrOutputWithContext(context.Background())
}

func (o ServiceManagedResourcesSettingsOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceManagedResourcesSettings) *ServiceManagedResourcesSettings {
		return &v
	}).(ServiceManagedResourcesSettingsPtrOutput)
}

func (o ServiceManagedResourcesSettingsOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettings) *CosmosDbSettings { return v.CosmosDb }).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsPtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettings)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutput() ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) ToServiceManagedResourcesSettingsPtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsPtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsPtrOutput) Elem() ServiceManagedResourcesSettingsOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) ServiceManagedResourcesSettings {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettings
		return ret
	}).(ServiceManagedResourcesSettingsOutput)
}

func (o ServiceManagedResourcesSettingsPtrOutput) CosmosDb() CosmosDbSettingsPtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettings) *CosmosDbSettings {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsPtrOutput)
}

type ServiceManagedResourcesSettingsResponse struct {
	CosmosDb *CosmosDbSettingsResponse `pulumi:"cosmosDb"`
}

type ServiceManagedResourcesSettingsResponseOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutput() ServiceManagedResourcesSettingsResponseOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponseOutput) ToServiceManagedResourcesSettingsResponseOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponseOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponseOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse { return v.CosmosDb }).(CosmosDbSettingsResponsePtrOutput)
}

type ServiceManagedResourcesSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceManagedResourcesSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceManagedResourcesSettingsResponse)(nil)).Elem()
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutput() ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) ToServiceManagedResourcesSettingsResponsePtrOutputWithContext(ctx context.Context) ServiceManagedResourcesSettingsResponsePtrOutput {
	return o
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) Elem() ServiceManagedResourcesSettingsResponseOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) ServiceManagedResourcesSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ServiceManagedResourcesSettingsResponse
		return ret
	}).(ServiceManagedResourcesSettingsResponseOutput)
}

func (o ServiceManagedResourcesSettingsResponsePtrOutput) CosmosDb() CosmosDbSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ServiceManagedResourcesSettingsResponse) *CosmosDbSettingsResponse {
		if v == nil {
			return nil
		}
		return v.CosmosDb
	}).(CosmosDbSettingsResponsePtrOutput)
}

type ServicePrincipalAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'ServicePrincipal'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category      *string                              `pulumi:"category"`
	Credentials   *WorkspaceConnectionServicePrincipal `pulumi:"credentials"`
	ExpiryTime    *string                              `pulumi:"expiryTime"`
	IsSharedToAll *bool                                `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

// ServicePrincipalAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs and ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `ServicePrincipalAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs{...}
type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput() ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput
	ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'ServicePrincipal'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category      pulumi.StringPtrInput                       `pulumi:"category"`
	Credentials   WorkspaceConnectionServicePrincipalPtrInput `pulumi:"credentials"`
	ExpiryTime    pulumi.StringPtrInput                       `pulumi:"expiryTime"`
	IsSharedToAll pulumi.BoolPtrInput                         `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       pulumi.StringMapInput   `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput() ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i ServicePrincipalAuthTypeWorkspaceConnectionPropertiesArgs) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput)
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput() ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionServicePrincipalPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionServicePrincipal {
		return v.Credentials
	}).(WorkspaceConnectionServicePrincipalPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'ServicePrincipal'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                      `pulumi:"category"`
	CreatedByWorkspaceArmId string                                       `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionServicePrincipalResponse `pulumi:"credentials"`
	ExpiryTime              *string                                      `pulumi:"expiryTime"`
	// Group based on connection category
	Group         string `pulumi:"group"`
	IsSharedToAll *bool  `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

type ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput() ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) string {
		return v.CreatedByWorkspaceArmId
	}).(pulumi.StringOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionServicePrincipalResponsePtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionServicePrincipalResponse {
		return v.Credentials
	}).(WorkspaceConnectionServicePrincipalResponsePtrOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) map[string]string {
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) []string {
		return v.SharedUserList
	}).(pulumi.StringArrayOutput)
}

func (o ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// ServicePrincipalDatastoreCredentialsInput is an input type that accepts ServicePrincipalDatastoreCredentialsArgs and ServicePrincipalDatastoreCredentialsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreCredentialsInput` via:
//
//	ServicePrincipalDatastoreCredentialsArgs{...}
type ServicePrincipalDatastoreCredentialsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput
	ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Context) ServicePrincipalDatastoreCredentialsOutput
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ServicePrincipalDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return i.ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreCredentialsOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o ServicePrincipalDatastoreCredentialsOutput) Secrets() ServicePrincipalDatastoreSecretsOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) ServicePrincipalDatastoreSecrets { return v.Secrets }).(ServicePrincipalDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentialsResponse)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutput() ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecrets struct {
	// Service principal secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType string `pulumi:"secretsType"`
}

// ServicePrincipalDatastoreSecretsInput is an input type that accepts ServicePrincipalDatastoreSecretsArgs and ServicePrincipalDatastoreSecretsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreSecretsInput` via:
//
//	ServicePrincipalDatastoreSecretsArgs{...}
type ServicePrincipalDatastoreSecretsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput
	ToServicePrincipalDatastoreSecretsOutputWithContext(context.Context) ServicePrincipalDatastoreSecretsOutput
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsArgs struct {
	// Service principal secret.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (ServicePrincipalDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return i.ToServicePrincipalDatastoreSecretsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreSecretsOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return o
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return o
}

// Service principal secret.
func (o ServicePrincipalDatastoreSecretsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestination struct {
	// The action enum for networking rule.
	Action     *string `pulumi:"action"`
	PortRanges *string `pulumi:"portRanges"`
	Protocol   *string `pulumi:"protocol"`
	ServiceTag *string `pulumi:"serviceTag"`
}

// ServiceTagDestinationInput is an input type that accepts ServiceTagDestinationArgs and ServiceTagDestinationOutput values.
// You can construct a concrete instance of `ServiceTagDestinationInput` via:
//
//	ServiceTagDestinationArgs{...}
type ServiceTagDestinationInput interface {
	pulumi.Input

	ToServiceTagDestinationOutput() ServiceTagDestinationOutput
	ToServiceTagDestinationOutputWithContext(context.Context) ServiceTagDestinationOutput
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationArgs struct {
	// The action enum for networking rule.
	Action     pulumi.StringPtrInput `pulumi:"action"`
	PortRanges pulumi.StringPtrInput `pulumi:"portRanges"`
	Protocol   pulumi.StringPtrInput `pulumi:"protocol"`
	ServiceTag pulumi.StringPtrInput `pulumi:"serviceTag"`
}

func (ServiceTagDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestination)(nil)).Elem()
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationOutput() ServiceTagDestinationOutput {
	return i.ToServiceTagDestinationOutputWithContext(context.Background())
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationOutputWithContext(ctx context.Context) ServiceTagDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationOutput)
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return i.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (i ServiceTagDestinationArgs) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationOutput).ToServiceTagDestinationPtrOutputWithContext(ctx)
}

// ServiceTagDestinationPtrInput is an input type that accepts ServiceTagDestinationArgs, ServiceTagDestinationPtr and ServiceTagDestinationPtrOutput values.
// You can construct a concrete instance of `ServiceTagDestinationPtrInput` via:
//
//	        ServiceTagDestinationArgs{...}
//
//	or:
//
//	        nil
type ServiceTagDestinationPtrInput interface {
	pulumi.Input

	ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput
	ToServiceTagDestinationPtrOutputWithContext(context.Context) ServiceTagDestinationPtrOutput
}

type serviceTagDestinationPtrType ServiceTagDestinationArgs

func ServiceTagDestinationPtr(v *ServiceTagDestinationArgs) ServiceTagDestinationPtrInput {
	return (*serviceTagDestinationPtrType)(v)
}

func (*serviceTagDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestination)(nil)).Elem()
}

func (i *serviceTagDestinationPtrType) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return i.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (i *serviceTagDestinationPtrType) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagDestinationPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestination)(nil)).Elem()
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationOutput() ServiceTagDestinationOutput {
	return o
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationOutputWithContext(ctx context.Context) ServiceTagDestinationOutput {
	return o
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return o.ToServiceTagDestinationPtrOutputWithContext(context.Background())
}

func (o ServiceTagDestinationOutput) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceTagDestination) *ServiceTagDestination {
		return &v
	}).(ServiceTagDestinationPtrOutput)
}

// The action enum for networking rule.
func (o ServiceTagDestinationOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestination) *string { return v.ServiceTag }).(pulumi.StringPtrOutput)
}

type ServiceTagDestinationPtrOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestination)(nil)).Elem()
}

func (o ServiceTagDestinationPtrOutput) ToServiceTagDestinationPtrOutput() ServiceTagDestinationPtrOutput {
	return o
}

func (o ServiceTagDestinationPtrOutput) ToServiceTagDestinationPtrOutputWithContext(ctx context.Context) ServiceTagDestinationPtrOutput {
	return o
}

func (o ServiceTagDestinationPtrOutput) Elem() ServiceTagDestinationOutput {
	return o.ApplyT(func(v *ServiceTagDestination) ServiceTagDestination {
		if v != nil {
			return *v
		}
		var ret ServiceTagDestination
		return ret
	}).(ServiceTagDestinationOutput)
}

// The action enum for networking rule.
func (o ServiceTagDestinationPtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationPtrOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.PortRanges
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationPtrOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTag
	}).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationResponse struct {
	// The action enum for networking rule.
	Action *string `pulumi:"action"`
	// Optional, if provided, the ServiceTag property will be ignored.
	AddressPrefixes []string `pulumi:"addressPrefixes"`
	PortRanges      *string  `pulumi:"portRanges"`
	Protocol        *string  `pulumi:"protocol"`
	ServiceTag      *string  `pulumi:"serviceTag"`
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagDestinationResponseOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagDestinationResponse)(nil)).Elem()
}

func (o ServiceTagDestinationResponseOutput) ToServiceTagDestinationResponseOutput() ServiceTagDestinationResponseOutput {
	return o
}

func (o ServiceTagDestinationResponseOutput) ToServiceTagDestinationResponseOutputWithContext(ctx context.Context) ServiceTagDestinationResponseOutput {
	return o
}

// The action enum for networking rule.
func (o ServiceTagDestinationResponseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Optional, if provided, the ServiceTag property will be ignored.
func (o ServiceTagDestinationResponseOutput) AddressPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) []string { return v.AddressPrefixes }).(pulumi.StringArrayOutput)
}

func (o ServiceTagDestinationResponseOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.PortRanges }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponseOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagDestinationResponse) *string { return v.ServiceTag }).(pulumi.StringPtrOutput)
}

type ServiceTagDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceTagDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTagDestinationResponse)(nil)).Elem()
}

func (o ServiceTagDestinationResponsePtrOutput) ToServiceTagDestinationResponsePtrOutput() ServiceTagDestinationResponsePtrOutput {
	return o
}

func (o ServiceTagDestinationResponsePtrOutput) ToServiceTagDestinationResponsePtrOutputWithContext(ctx context.Context) ServiceTagDestinationResponsePtrOutput {
	return o
}

func (o ServiceTagDestinationResponsePtrOutput) Elem() ServiceTagDestinationResponseOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) ServiceTagDestinationResponse {
		if v != nil {
			return *v
		}
		var ret ServiceTagDestinationResponse
		return ret
	}).(ServiceTagDestinationResponseOutput)
}

// The action enum for networking rule.
func (o ServiceTagDestinationResponsePtrOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Action
	}).(pulumi.StringPtrOutput)
}

// Optional, if provided, the ServiceTag property will be ignored.
func (o ServiceTagDestinationResponsePtrOutput) AddressPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) []string {
		if v == nil {
			return nil
		}
		return v.AddressPrefixes
	}).(pulumi.StringArrayOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) PortRanges() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.PortRanges
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o ServiceTagDestinationResponsePtrOutput) ServiceTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTagDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ServiceTag
	}).(pulumi.StringPtrOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRule struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestination `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// ServiceTagOutboundRuleInput is an input type that accepts ServiceTagOutboundRuleArgs and ServiceTagOutboundRuleOutput values.
// You can construct a concrete instance of `ServiceTagOutboundRuleInput` via:
//
//	ServiceTagOutboundRuleArgs{...}
type ServiceTagOutboundRuleInput interface {
	pulumi.Input

	ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput
	ToServiceTagOutboundRuleOutputWithContext(context.Context) ServiceTagOutboundRuleOutput
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleArgs struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category pulumi.StringPtrInput `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination ServiceTagDestinationPtrInput `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceTagOutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRule)(nil)).Elem()
}

func (i ServiceTagOutboundRuleArgs) ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput {
	return i.ToServiceTagOutboundRuleOutputWithContext(context.Background())
}

func (i ServiceTagOutboundRuleArgs) ToServiceTagOutboundRuleOutputWithContext(ctx context.Context) ServiceTagOutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutboundRuleOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleOutput struct{ *pulumi.OutputState }

func (ServiceTagOutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRule)(nil)).Elem()
}

func (o ServiceTagOutboundRuleOutput) ToServiceTagOutboundRuleOutput() ServiceTagOutboundRuleOutput {
	return o
}

func (o ServiceTagOutboundRuleOutput) ToServiceTagOutboundRuleOutputWithContext(ctx context.Context) ServiceTagOutboundRuleOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Destination() ServiceTagDestinationPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *ServiceTagDestination { return v.Destination }).(ServiceTagDestinationPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'ServiceTag'.
func (o ServiceTagOutboundRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTagOutboundRule) string { return v.Type }).(pulumi.StringOutput)
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleResponse struct {
	// Category of a managed network Outbound Rule of a machine learning workspace.
	Category *string `pulumi:"category"`
	// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
	Destination *ServiceTagDestinationResponse `pulumi:"destination"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	Status *string `pulumi:"status"`
	// Type of a managed network Outbound Rule of a machine learning workspace.
	// Expected value is 'ServiceTag'.
	Type string `pulumi:"type"`
}

// Service Tag Outbound Rule for the managed network of a machine learning workspace.
type ServiceTagOutboundRuleResponseOutput struct{ *pulumi.OutputState }

func (ServiceTagOutboundRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTagOutboundRuleResponse)(nil)).Elem()
}

func (o ServiceTagOutboundRuleResponseOutput) ToServiceTagOutboundRuleResponseOutput() ServiceTagOutboundRuleResponseOutput {
	return o
}

func (o ServiceTagOutboundRuleResponseOutput) ToServiceTagOutboundRuleResponseOutputWithContext(ctx context.Context) ServiceTagOutboundRuleResponseOutput {
	return o
}

// Category of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

// Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Destination() ServiceTagDestinationResponsePtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *ServiceTagDestinationResponse { return v.Destination }).(ServiceTagDestinationResponsePtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
func (o ServiceTagOutboundRuleResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of a managed network Outbound Rule of a machine learning workspace.
// Expected value is 'ServiceTag'.
func (o ServiceTagOutboundRuleResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTagOutboundRuleResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScripts struct {
	// Customized setup scripts
	Scripts *ScriptsToExecute `pulumi:"scripts"`
}

// SetupScriptsInput is an input type that accepts SetupScriptsArgs and SetupScriptsOutput values.
// You can construct a concrete instance of `SetupScriptsInput` via:
//
//	SetupScriptsArgs{...}
type SetupScriptsInput interface {
	pulumi.Input

	ToSetupScriptsOutput() SetupScriptsOutput
	ToSetupScriptsOutputWithContext(context.Context) SetupScriptsOutput
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsArgs struct {
	// Customized setup scripts
	Scripts ScriptsToExecutePtrInput `pulumi:"scripts"`
}

func (SetupScriptsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScripts)(nil)).Elem()
}

func (i SetupScriptsArgs) ToSetupScriptsOutput() SetupScriptsOutput {
	return i.ToSetupScriptsOutputWithContext(context.Background())
}

func (i SetupScriptsArgs) ToSetupScriptsOutputWithContext(ctx context.Context) SetupScriptsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsOutput)
}

func (i SetupScriptsArgs) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return i.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (i SetupScriptsArgs) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsOutput).ToSetupScriptsPtrOutputWithContext(ctx)
}

// SetupScriptsPtrInput is an input type that accepts SetupScriptsArgs, SetupScriptsPtr and SetupScriptsPtrOutput values.
// You can construct a concrete instance of `SetupScriptsPtrInput` via:
//
//	        SetupScriptsArgs{...}
//
//	or:
//
//	        nil
type SetupScriptsPtrInput interface {
	pulumi.Input

	ToSetupScriptsPtrOutput() SetupScriptsPtrOutput
	ToSetupScriptsPtrOutputWithContext(context.Context) SetupScriptsPtrOutput
}

type setupScriptsPtrType SetupScriptsArgs

func SetupScriptsPtr(v *SetupScriptsArgs) SetupScriptsPtrInput {
	return (*setupScriptsPtrType)(v)
}

func (*setupScriptsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScripts)(nil)).Elem()
}

func (i *setupScriptsPtrType) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return i.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (i *setupScriptsPtrType) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SetupScriptsPtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsOutput struct{ *pulumi.OutputState }

func (SetupScriptsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScripts)(nil)).Elem()
}

func (o SetupScriptsOutput) ToSetupScriptsOutput() SetupScriptsOutput {
	return o
}

func (o SetupScriptsOutput) ToSetupScriptsOutputWithContext(ctx context.Context) SetupScriptsOutput {
	return o
}

func (o SetupScriptsOutput) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return o.ToSetupScriptsPtrOutputWithContext(context.Background())
}

func (o SetupScriptsOutput) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SetupScripts) *SetupScripts {
		return &v
	}).(SetupScriptsPtrOutput)
}

// Customized setup scripts
func (o SetupScriptsOutput) Scripts() ScriptsToExecutePtrOutput {
	return o.ApplyT(func(v SetupScripts) *ScriptsToExecute { return v.Scripts }).(ScriptsToExecutePtrOutput)
}

type SetupScriptsPtrOutput struct{ *pulumi.OutputState }

func (SetupScriptsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScripts)(nil)).Elem()
}

func (o SetupScriptsPtrOutput) ToSetupScriptsPtrOutput() SetupScriptsPtrOutput {
	return o
}

func (o SetupScriptsPtrOutput) ToSetupScriptsPtrOutputWithContext(ctx context.Context) SetupScriptsPtrOutput {
	return o
}

func (o SetupScriptsPtrOutput) Elem() SetupScriptsOutput {
	return o.ApplyT(func(v *SetupScripts) SetupScripts {
		if v != nil {
			return *v
		}
		var ret SetupScripts
		return ret
	}).(SetupScriptsOutput)
}

// Customized setup scripts
func (o SetupScriptsPtrOutput) Scripts() ScriptsToExecutePtrOutput {
	return o.ApplyT(func(v *SetupScripts) *ScriptsToExecute {
		if v == nil {
			return nil
		}
		return v.Scripts
	}).(ScriptsToExecutePtrOutput)
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsResponse struct {
	// Customized setup scripts
	Scripts *ScriptsToExecuteResponse `pulumi:"scripts"`
}

// Details of customized scripts to execute for setting up the cluster.
type SetupScriptsResponseOutput struct{ *pulumi.OutputState }

func (SetupScriptsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetupScriptsResponse)(nil)).Elem()
}

func (o SetupScriptsResponseOutput) ToSetupScriptsResponseOutput() SetupScriptsResponseOutput {
	return o
}

func (o SetupScriptsResponseOutput) ToSetupScriptsResponseOutputWithContext(ctx context.Context) SetupScriptsResponseOutput {
	return o
}

// Customized setup scripts
func (o SetupScriptsResponseOutput) Scripts() ScriptsToExecuteResponsePtrOutput {
	return o.ApplyT(func(v SetupScriptsResponse) *ScriptsToExecuteResponse { return v.Scripts }).(ScriptsToExecuteResponsePtrOutput)
}

type SetupScriptsResponsePtrOutput struct{ *pulumi.OutputState }

func (SetupScriptsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SetupScriptsResponse)(nil)).Elem()
}

func (o SetupScriptsResponsePtrOutput) ToSetupScriptsResponsePtrOutput() SetupScriptsResponsePtrOutput {
	return o
}

func (o SetupScriptsResponsePtrOutput) ToSetupScriptsResponsePtrOutputWithContext(ctx context.Context) SetupScriptsResponsePtrOutput {
	return o
}

func (o SetupScriptsResponsePtrOutput) Elem() SetupScriptsResponseOutput {
	return o.ApplyT(func(v *SetupScriptsResponse) SetupScriptsResponse {
		if v != nil {
			return *v
		}
		var ret SetupScriptsResponse
		return ret
	}).(SetupScriptsResponseOutput)
}

// Customized setup scripts
func (o SetupScriptsResponsePtrOutput) Scripts() ScriptsToExecuteResponsePtrOutput {
	return o.ApplyT(func(v *SetupScriptsResponse) *ScriptsToExecuteResponse {
		if v == nil {
			return nil
		}
		return v.Scripts
	}).(ScriptsToExecuteResponsePtrOutput)
}

type SharedPrivateLinkResource struct {
	// group id of the private link
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link
	Name *string `pulumi:"name"`
	// the resource id that private link links to
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message
	RequestMessage *string `pulumi:"requestMessage"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status *string `pulumi:"status"`
}

// SharedPrivateLinkResourceInput is an input type that accepts SharedPrivateLinkResourceArgs and SharedPrivateLinkResourceOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceInput` via:
//
//	SharedPrivateLinkResourceArgs{...}
type SharedPrivateLinkResourceInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput
	ToSharedPrivateLinkResourceOutputWithContext(context.Context) SharedPrivateLinkResourceOutput
}

type SharedPrivateLinkResourceArgs struct {
	// group id of the private link
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Unique name of the private link
	Name pulumi.StringPtrInput `pulumi:"name"`
	// the resource id that private link links to
	PrivateLinkResourceId pulumi.StringPtrInput `pulumi:"privateLinkResourceId"`
	// Request message
	RequestMessage pulumi.StringPtrInput `pulumi:"requestMessage"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SharedPrivateLinkResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return i.ToSharedPrivateLinkResourceOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArgs) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceOutput)
}

// SharedPrivateLinkResourceArrayInput is an input type that accepts SharedPrivateLinkResourceArray and SharedPrivateLinkResourceArrayOutput values.
// You can construct a concrete instance of `SharedPrivateLinkResourceArrayInput` via:
//
//	SharedPrivateLinkResourceArray{ SharedPrivateLinkResourceArgs{...} }
type SharedPrivateLinkResourceArrayInput interface {
	pulumi.Input

	ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput
	ToSharedPrivateLinkResourceArrayOutputWithContext(context.Context) SharedPrivateLinkResourceArrayOutput
}

type SharedPrivateLinkResourceArray []SharedPrivateLinkResourceInput

func (SharedPrivateLinkResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return i.ToSharedPrivateLinkResourceArrayOutputWithContext(context.Background())
}

func (i SharedPrivateLinkResourceArray) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedPrivateLinkResourceArrayOutput)
}

type SharedPrivateLinkResourceOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutput() SharedPrivateLinkResourceOutput {
	return o
}

func (o SharedPrivateLinkResourceOutput) ToSharedPrivateLinkResourceOutputWithContext(ctx context.Context) SharedPrivateLinkResourceOutput {
	return o
}

// group id of the private link
func (o SharedPrivateLinkResourceOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link
func (o SharedPrivateLinkResourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// the resource id that private link links to
func (o SharedPrivateLinkResourceOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message
func (o SharedPrivateLinkResourceOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o SharedPrivateLinkResourceOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResource) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResource)(nil)).Elem()
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutput() SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) ToSharedPrivateLinkResourceArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResource {
		return vs[0].([]SharedPrivateLinkResource)[vs[1].(int)]
	}).(SharedPrivateLinkResourceOutput)
}

type SharedPrivateLinkResourceResponse struct {
	// group id of the private link
	GroupId *string `pulumi:"groupId"`
	// Unique name of the private link
	Name *string `pulumi:"name"`
	// the resource id that private link links to
	PrivateLinkResourceId *string `pulumi:"privateLinkResourceId"`
	// Request message
	RequestMessage *string `pulumi:"requestMessage"`
	// Connection status of the service consumer with the service provider
	// Possible state transitions
	// Pending -> Approved (Service provider approves the connection request)
	// Pending -> Rejected (Service provider rejects the connection request)
	// Pending -> Disconnected (Service provider deletes the connection)
	// Approved -> Rejected (Service provider rejects the approved connection)
	// Approved -> Disconnected (Service provider deletes the connection)
	// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
	// Rejected -> Disconnected (Service provider deletes the connection)
	Status *string `pulumi:"status"`
}

type SharedPrivateLinkResourceResponseOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutput() SharedPrivateLinkResourceResponseOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseOutput) ToSharedPrivateLinkResourceResponseOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseOutput {
	return o
}

// group id of the private link
func (o SharedPrivateLinkResourceResponseOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Unique name of the private link
func (o SharedPrivateLinkResourceResponseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// the resource id that private link links to
func (o SharedPrivateLinkResourceResponseOutput) PrivateLinkResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.PrivateLinkResourceId }).(pulumi.StringPtrOutput)
}

// Request message
func (o SharedPrivateLinkResourceResponseOutput) RequestMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.RequestMessage }).(pulumi.StringPtrOutput)
}

// Connection status of the service consumer with the service provider
// Possible state transitions
// Pending -> Approved (Service provider approves the connection request)
// Pending -> Rejected (Service provider rejects the connection request)
// Pending -> Disconnected (Service provider deletes the connection)
// Approved -> Rejected (Service provider rejects the approved connection)
// Approved -> Disconnected (Service provider deletes the connection)
// Rejected -> Pending (Service consumer re-initiates the connection request that was rejected)
// Rejected -> Disconnected (Service provider deletes the connection)
func (o SharedPrivateLinkResourceResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SharedPrivateLinkResourceResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SharedPrivateLinkResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SharedPrivateLinkResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SharedPrivateLinkResourceResponse)(nil)).Elem()
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutput() SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) ToSharedPrivateLinkResourceResponseArrayOutputWithContext(ctx context.Context) SharedPrivateLinkResourceResponseArrayOutput {
	return o
}

func (o SharedPrivateLinkResourceResponseArrayOutput) Index(i pulumi.IntInput) SharedPrivateLinkResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SharedPrivateLinkResourceResponse {
		return vs[0].([]SharedPrivateLinkResourceResponse)[vs[1].(int)]
	}).(SharedPrivateLinkResourceResponseOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Spark job definition.
type SparkJob struct {
	// Archive files used in the job.
	Archives []string `pulumi:"archives"`
	// Arguments for the job.
	Args *string `pulumi:"args"`
	// [Required] ARM resource ID of the code asset.
	CodeId string `pulumi:"codeId"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Spark configured properties.
	Conf map[string]string `pulumi:"conf"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// [Required] The entry to execute on startup of the job.
	Entry interface{} `pulumi:"entry"`
	// The ARM resource ID of the Environment specification for the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Files used in the job.
	Files []string `pulumi:"files"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Jar files used in the job.
	Jars []string `pulumi:"jars"`
	// Enum to determine the type of job.
	// Expected value is 'Spark'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Python files used in the job.
	PyFiles []string `pulumi:"pyFiles"`
	// Queue settings for the job
	QueueSettings *QueueSettings `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *SparkResourceConfiguration `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for SparkJob
func (val *SparkJob) Defaults() *SparkJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// SparkJobInput is an input type that accepts SparkJobArgs and SparkJobOutput values.
// You can construct a concrete instance of `SparkJobInput` via:
//
//	SparkJobArgs{...}
type SparkJobInput interface {
	pulumi.Input

	ToSparkJobOutput() SparkJobOutput
	ToSparkJobOutputWithContext(context.Context) SparkJobOutput
}

// Spark job definition.
type SparkJobArgs struct {
	// Archive files used in the job.
	Archives pulumi.StringArrayInput `pulumi:"archives"`
	// Arguments for the job.
	Args pulumi.StringPtrInput `pulumi:"args"`
	// [Required] ARM resource ID of the code asset.
	CodeId pulumi.StringInput `pulumi:"codeId"`
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// Spark configured properties.
	Conf pulumi.StringMapInput `pulumi:"conf"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// [Required] The entry to execute on startup of the job.
	Entry pulumi.Input `pulumi:"entry"`
	// The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Files used in the job.
	Files pulumi.StringArrayInput `pulumi:"files"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Jar files used in the job.
	Jars pulumi.StringArrayInput `pulumi:"jars"`
	// Enum to determine the type of job.
	// Expected value is 'Spark'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Python files used in the job.
	PyFiles pulumi.StringArrayInput `pulumi:"pyFiles"`
	// Queue settings for the job
	QueueSettings QueueSettingsPtrInput `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources SparkResourceConfigurationPtrInput `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for SparkJobArgs
func (val *SparkJobArgs) Defaults() *SparkJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (SparkJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJob)(nil)).Elem()
}

func (i SparkJobArgs) ToSparkJobOutput() SparkJobOutput {
	return i.ToSparkJobOutputWithContext(context.Background())
}

func (i SparkJobArgs) ToSparkJobOutputWithContext(ctx context.Context) SparkJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobOutput)
}

// Spark job definition.
type SparkJobOutput struct{ *pulumi.OutputState }

func (SparkJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJob)(nil)).Elem()
}

func (o SparkJobOutput) ToSparkJobOutput() SparkJobOutput {
	return o
}

func (o SparkJobOutput) ToSparkJobOutputWithContext(ctx context.Context) SparkJobOutput {
	return o
}

// Archive files used in the job.
func (o SparkJobOutput) Archives() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJob) []string { return v.Archives }).(pulumi.StringArrayOutput)
}

// Arguments for the job.
func (o SparkJobOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// [Required] ARM resource ID of the code asset.
func (o SparkJobOutput) CodeId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJob) string { return v.CodeId }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o SparkJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SparkJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Spark configured properties.
func (o SparkJobOutput) Conf() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]string { return v.Conf }).(pulumi.StringMapOutput)
}

// The asset description text.
func (o SparkJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SparkJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// [Required] The entry to execute on startup of the job.
func (o SparkJobOutput) Entry() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkJob) interface{} { return v.Entry }).(pulumi.AnyOutput)
}

// The ARM resource ID of the Environment specification for the job.
func (o SparkJobOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o SparkJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SparkJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Files used in the job.
func (o SparkJobOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJob) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SparkJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SparkJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SparkJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SparkJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SparkJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Jar files used in the job.
func (o SparkJobOutput) Jars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJob) []string { return v.Jars }).(pulumi.StringArrayOutput)
}

// Enum to determine the type of job.
// Expected value is 'Spark'.
func (o SparkJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o SparkJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v SparkJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// Mapping of output data bindings used in the job.
func (o SparkJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SparkJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SparkJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files used in the job.
func (o SparkJobOutput) PyFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJob) []string { return v.PyFiles }).(pulumi.StringArrayOutput)
}

// Queue settings for the job
func (o SparkJobOutput) QueueSettings() QueueSettingsPtrOutput {
	return o.ApplyT(func(v SparkJob) *QueueSettings { return v.QueueSettings }).(QueueSettingsPtrOutput)
}

// Compute Resource configuration for the job.
func (o SparkJobOutput) Resources() SparkResourceConfigurationPtrOutput {
	return o.ApplyT(func(v SparkJob) *SparkResourceConfiguration { return v.Resources }).(SparkResourceConfigurationPtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o SparkJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SparkJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SparkJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SparkJobPythonEntry struct {
	// [Required] Relative python file path for job entry point.
	File string `pulumi:"file"`
	// Expected value is 'SparkJobPythonEntry'.
	SparkJobEntryType string `pulumi:"sparkJobEntryType"`
}

// SparkJobPythonEntryInput is an input type that accepts SparkJobPythonEntryArgs and SparkJobPythonEntryOutput values.
// You can construct a concrete instance of `SparkJobPythonEntryInput` via:
//
//	SparkJobPythonEntryArgs{...}
type SparkJobPythonEntryInput interface {
	pulumi.Input

	ToSparkJobPythonEntryOutput() SparkJobPythonEntryOutput
	ToSparkJobPythonEntryOutputWithContext(context.Context) SparkJobPythonEntryOutput
}

type SparkJobPythonEntryArgs struct {
	// [Required] Relative python file path for job entry point.
	File pulumi.StringInput `pulumi:"file"`
	// Expected value is 'SparkJobPythonEntry'.
	SparkJobEntryType pulumi.StringInput `pulumi:"sparkJobEntryType"`
}

func (SparkJobPythonEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobPythonEntry)(nil)).Elem()
}

func (i SparkJobPythonEntryArgs) ToSparkJobPythonEntryOutput() SparkJobPythonEntryOutput {
	return i.ToSparkJobPythonEntryOutputWithContext(context.Background())
}

func (i SparkJobPythonEntryArgs) ToSparkJobPythonEntryOutputWithContext(ctx context.Context) SparkJobPythonEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobPythonEntryOutput)
}

type SparkJobPythonEntryOutput struct{ *pulumi.OutputState }

func (SparkJobPythonEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobPythonEntry)(nil)).Elem()
}

func (o SparkJobPythonEntryOutput) ToSparkJobPythonEntryOutput() SparkJobPythonEntryOutput {
	return o
}

func (o SparkJobPythonEntryOutput) ToSparkJobPythonEntryOutputWithContext(ctx context.Context) SparkJobPythonEntryOutput {
	return o
}

// [Required] Relative python file path for job entry point.
func (o SparkJobPythonEntryOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobPythonEntry) string { return v.File }).(pulumi.StringOutput)
}

// Expected value is 'SparkJobPythonEntry'.
func (o SparkJobPythonEntryOutput) SparkJobEntryType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobPythonEntry) string { return v.SparkJobEntryType }).(pulumi.StringOutput)
}

type SparkJobPythonEntryResponse struct {
	// [Required] Relative python file path for job entry point.
	File string `pulumi:"file"`
	// Expected value is 'SparkJobPythonEntry'.
	SparkJobEntryType string `pulumi:"sparkJobEntryType"`
}

type SparkJobPythonEntryResponseOutput struct{ *pulumi.OutputState }

func (SparkJobPythonEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobPythonEntryResponse)(nil)).Elem()
}

func (o SparkJobPythonEntryResponseOutput) ToSparkJobPythonEntryResponseOutput() SparkJobPythonEntryResponseOutput {
	return o
}

func (o SparkJobPythonEntryResponseOutput) ToSparkJobPythonEntryResponseOutputWithContext(ctx context.Context) SparkJobPythonEntryResponseOutput {
	return o
}

// [Required] Relative python file path for job entry point.
func (o SparkJobPythonEntryResponseOutput) File() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobPythonEntryResponse) string { return v.File }).(pulumi.StringOutput)
}

// Expected value is 'SparkJobPythonEntry'.
func (o SparkJobPythonEntryResponseOutput) SparkJobEntryType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobPythonEntryResponse) string { return v.SparkJobEntryType }).(pulumi.StringOutput)
}

// Spark job definition.
type SparkJobResponse struct {
	// Archive files used in the job.
	Archives []string `pulumi:"archives"`
	// Arguments for the job.
	Args *string `pulumi:"args"`
	// [Required] ARM resource ID of the code asset.
	CodeId string `pulumi:"codeId"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// Spark configured properties.
	Conf map[string]string `pulumi:"conf"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// [Required] The entry to execute on startup of the job.
	Entry interface{} `pulumi:"entry"`
	// The ARM resource ID of the Environment specification for the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Files used in the job.
	Files []string `pulumi:"files"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Jar files used in the job.
	Jars []string `pulumi:"jars"`
	// Enum to determine the type of job.
	// Expected value is 'Spark'.
	JobType string `pulumi:"jobType"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Python files used in the job.
	PyFiles []string `pulumi:"pyFiles"`
	// Queue settings for the job
	QueueSettings *QueueSettingsResponse `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *SparkResourceConfigurationResponse `pulumi:"resources"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for SparkJobResponse
func (val *SparkJobResponse) Defaults() *SparkJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Spark job definition.
type SparkJobResponseOutput struct{ *pulumi.OutputState }

func (SparkJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobResponse)(nil)).Elem()
}

func (o SparkJobResponseOutput) ToSparkJobResponseOutput() SparkJobResponseOutput {
	return o
}

func (o SparkJobResponseOutput) ToSparkJobResponseOutputWithContext(ctx context.Context) SparkJobResponseOutput {
	return o
}

// Archive files used in the job.
func (o SparkJobResponseOutput) Archives() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJobResponse) []string { return v.Archives }).(pulumi.StringArrayOutput)
}

// Arguments for the job.
func (o SparkJobResponseOutput) Args() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.Args }).(pulumi.StringPtrOutput)
}

// [Required] ARM resource ID of the code asset.
func (o SparkJobResponseOutput) CodeId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobResponse) string { return v.CodeId }).(pulumi.StringOutput)
}

// ARM resource ID of the component resource.
func (o SparkJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SparkJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// Spark configured properties.
func (o SparkJobResponseOutput) Conf() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]string { return v.Conf }).(pulumi.StringMapOutput)
}

// The asset description text.
func (o SparkJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SparkJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// [Required] The entry to execute on startup of the job.
func (o SparkJobResponseOutput) Entry() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkJobResponse) interface{} { return v.Entry }).(pulumi.AnyOutput)
}

// The ARM resource ID of the Environment specification for the job.
func (o SparkJobResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o SparkJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SparkJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Files used in the job.
func (o SparkJobResponseOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJobResponse) []string { return v.Files }).(pulumi.StringArrayOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SparkJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SparkJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SparkJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SparkJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Jar files used in the job.
func (o SparkJobResponseOutput) Jars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJobResponse) []string { return v.Jars }).(pulumi.StringArrayOutput)
}

// Enum to determine the type of job.
// Expected value is 'Spark'.
func (o SparkJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Notification setting for the job
func (o SparkJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// Mapping of output data bindings used in the job.
func (o SparkJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SparkJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files used in the job.
func (o SparkJobResponseOutput) PyFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkJobResponse) []string { return v.PyFiles }).(pulumi.StringArrayOutput)
}

// Queue settings for the job
func (o SparkJobResponseOutput) QueueSettings() QueueSettingsResponsePtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *QueueSettingsResponse { return v.QueueSettings }).(QueueSettingsResponsePtrOutput)
}

// Compute Resource configuration for the job.
func (o SparkJobResponseOutput) Resources() SparkResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SparkJobResponse) *SparkResourceConfigurationResponse { return v.Resources }).(SparkResourceConfigurationResponsePtrOutput)
}

// Configuration for secrets to be made available during runtime.
func (o SparkJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SparkJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o SparkJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SparkJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type SparkJobScalaEntry struct {
	// [Required] Scala class name used as entry point.
	ClassName string `pulumi:"className"`
	// Expected value is 'SparkJobScalaEntry'.
	SparkJobEntryType string `pulumi:"sparkJobEntryType"`
}

// SparkJobScalaEntryInput is an input type that accepts SparkJobScalaEntryArgs and SparkJobScalaEntryOutput values.
// You can construct a concrete instance of `SparkJobScalaEntryInput` via:
//
//	SparkJobScalaEntryArgs{...}
type SparkJobScalaEntryInput interface {
	pulumi.Input

	ToSparkJobScalaEntryOutput() SparkJobScalaEntryOutput
	ToSparkJobScalaEntryOutputWithContext(context.Context) SparkJobScalaEntryOutput
}

type SparkJobScalaEntryArgs struct {
	// [Required] Scala class name used as entry point.
	ClassName pulumi.StringInput `pulumi:"className"`
	// Expected value is 'SparkJobScalaEntry'.
	SparkJobEntryType pulumi.StringInput `pulumi:"sparkJobEntryType"`
}

func (SparkJobScalaEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobScalaEntry)(nil)).Elem()
}

func (i SparkJobScalaEntryArgs) ToSparkJobScalaEntryOutput() SparkJobScalaEntryOutput {
	return i.ToSparkJobScalaEntryOutputWithContext(context.Background())
}

func (i SparkJobScalaEntryArgs) ToSparkJobScalaEntryOutputWithContext(ctx context.Context) SparkJobScalaEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobScalaEntryOutput)
}

type SparkJobScalaEntryOutput struct{ *pulumi.OutputState }

func (SparkJobScalaEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobScalaEntry)(nil)).Elem()
}

func (o SparkJobScalaEntryOutput) ToSparkJobScalaEntryOutput() SparkJobScalaEntryOutput {
	return o
}

func (o SparkJobScalaEntryOutput) ToSparkJobScalaEntryOutputWithContext(ctx context.Context) SparkJobScalaEntryOutput {
	return o
}

// [Required] Scala class name used as entry point.
func (o SparkJobScalaEntryOutput) ClassName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobScalaEntry) string { return v.ClassName }).(pulumi.StringOutput)
}

// Expected value is 'SparkJobScalaEntry'.
func (o SparkJobScalaEntryOutput) SparkJobEntryType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobScalaEntry) string { return v.SparkJobEntryType }).(pulumi.StringOutput)
}

type SparkJobScalaEntryResponse struct {
	// [Required] Scala class name used as entry point.
	ClassName string `pulumi:"className"`
	// Expected value is 'SparkJobScalaEntry'.
	SparkJobEntryType string `pulumi:"sparkJobEntryType"`
}

type SparkJobScalaEntryResponseOutput struct{ *pulumi.OutputState }

func (SparkJobScalaEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobScalaEntryResponse)(nil)).Elem()
}

func (o SparkJobScalaEntryResponseOutput) ToSparkJobScalaEntryResponseOutput() SparkJobScalaEntryResponseOutput {
	return o
}

func (o SparkJobScalaEntryResponseOutput) ToSparkJobScalaEntryResponseOutputWithContext(ctx context.Context) SparkJobScalaEntryResponseOutput {
	return o
}

// [Required] Scala class name used as entry point.
func (o SparkJobScalaEntryResponseOutput) ClassName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobScalaEntryResponse) string { return v.ClassName }).(pulumi.StringOutput)
}

// Expected value is 'SparkJobScalaEntry'.
func (o SparkJobScalaEntryResponseOutput) SparkJobEntryType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobScalaEntryResponse) string { return v.SparkJobEntryType }).(pulumi.StringOutput)
}

type SparkResourceConfiguration struct {
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Version of spark runtime used for the job.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// Defaults sets the appropriate defaults for SparkResourceConfiguration
func (val *SparkResourceConfiguration) Defaults() *SparkResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RuntimeVersion == nil {
		runtimeVersion_ := "3.1"
		tmp.RuntimeVersion = &runtimeVersion_
	}
	return &tmp
}

// SparkResourceConfigurationInput is an input type that accepts SparkResourceConfigurationArgs and SparkResourceConfigurationOutput values.
// You can construct a concrete instance of `SparkResourceConfigurationInput` via:
//
//	SparkResourceConfigurationArgs{...}
type SparkResourceConfigurationInput interface {
	pulumi.Input

	ToSparkResourceConfigurationOutput() SparkResourceConfigurationOutput
	ToSparkResourceConfigurationOutputWithContext(context.Context) SparkResourceConfigurationOutput
}

type SparkResourceConfigurationArgs struct {
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Version of spark runtime used for the job.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

// Defaults sets the appropriate defaults for SparkResourceConfigurationArgs
func (val *SparkResourceConfigurationArgs) Defaults() *SparkResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RuntimeVersion == nil {
		tmp.RuntimeVersion = pulumi.StringPtr("3.1")
	}
	return &tmp
}
func (SparkResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkResourceConfiguration)(nil)).Elem()
}

func (i SparkResourceConfigurationArgs) ToSparkResourceConfigurationOutput() SparkResourceConfigurationOutput {
	return i.ToSparkResourceConfigurationOutputWithContext(context.Background())
}

func (i SparkResourceConfigurationArgs) ToSparkResourceConfigurationOutputWithContext(ctx context.Context) SparkResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkResourceConfigurationOutput)
}

func (i SparkResourceConfigurationArgs) ToSparkResourceConfigurationPtrOutput() SparkResourceConfigurationPtrOutput {
	return i.ToSparkResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i SparkResourceConfigurationArgs) ToSparkResourceConfigurationPtrOutputWithContext(ctx context.Context) SparkResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkResourceConfigurationOutput).ToSparkResourceConfigurationPtrOutputWithContext(ctx)
}

// SparkResourceConfigurationPtrInput is an input type that accepts SparkResourceConfigurationArgs, SparkResourceConfigurationPtr and SparkResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `SparkResourceConfigurationPtrInput` via:
//
//	        SparkResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type SparkResourceConfigurationPtrInput interface {
	pulumi.Input

	ToSparkResourceConfigurationPtrOutput() SparkResourceConfigurationPtrOutput
	ToSparkResourceConfigurationPtrOutputWithContext(context.Context) SparkResourceConfigurationPtrOutput
}

type sparkResourceConfigurationPtrType SparkResourceConfigurationArgs

func SparkResourceConfigurationPtr(v *SparkResourceConfigurationArgs) SparkResourceConfigurationPtrInput {
	return (*sparkResourceConfigurationPtrType)(v)
}

func (*sparkResourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkResourceConfiguration)(nil)).Elem()
}

func (i *sparkResourceConfigurationPtrType) ToSparkResourceConfigurationPtrOutput() SparkResourceConfigurationPtrOutput {
	return i.ToSparkResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *sparkResourceConfigurationPtrType) ToSparkResourceConfigurationPtrOutputWithContext(ctx context.Context) SparkResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkResourceConfigurationPtrOutput)
}

type SparkResourceConfigurationOutput struct{ *pulumi.OutputState }

func (SparkResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkResourceConfiguration)(nil)).Elem()
}

func (o SparkResourceConfigurationOutput) ToSparkResourceConfigurationOutput() SparkResourceConfigurationOutput {
	return o
}

func (o SparkResourceConfigurationOutput) ToSparkResourceConfigurationOutputWithContext(ctx context.Context) SparkResourceConfigurationOutput {
	return o
}

func (o SparkResourceConfigurationOutput) ToSparkResourceConfigurationPtrOutput() SparkResourceConfigurationPtrOutput {
	return o.ToSparkResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o SparkResourceConfigurationOutput) ToSparkResourceConfigurationPtrOutputWithContext(ctx context.Context) SparkResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkResourceConfiguration) *SparkResourceConfiguration {
		return &v
	}).(SparkResourceConfigurationPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o SparkResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Version of spark runtime used for the job.
func (o SparkResourceConfigurationOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkResourceConfiguration) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type SparkResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SparkResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkResourceConfiguration)(nil)).Elem()
}

func (o SparkResourceConfigurationPtrOutput) ToSparkResourceConfigurationPtrOutput() SparkResourceConfigurationPtrOutput {
	return o
}

func (o SparkResourceConfigurationPtrOutput) ToSparkResourceConfigurationPtrOutputWithContext(ctx context.Context) SparkResourceConfigurationPtrOutput {
	return o
}

func (o SparkResourceConfigurationPtrOutput) Elem() SparkResourceConfigurationOutput {
	return o.ApplyT(func(v *SparkResourceConfiguration) SparkResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret SparkResourceConfiguration
		return ret
	}).(SparkResourceConfigurationOutput)
}

// Optional type of VM used as supported by the compute target.
func (o SparkResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Version of spark runtime used for the job.
func (o SparkResourceConfigurationPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

type SparkResourceConfigurationResponse struct {
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Version of spark runtime used for the job.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// Defaults sets the appropriate defaults for SparkResourceConfigurationResponse
func (val *SparkResourceConfigurationResponse) Defaults() *SparkResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.RuntimeVersion == nil {
		runtimeVersion_ := "3.1"
		tmp.RuntimeVersion = &runtimeVersion_
	}
	return &tmp
}

type SparkResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SparkResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkResourceConfigurationResponse)(nil)).Elem()
}

func (o SparkResourceConfigurationResponseOutput) ToSparkResourceConfigurationResponseOutput() SparkResourceConfigurationResponseOutput {
	return o
}

func (o SparkResourceConfigurationResponseOutput) ToSparkResourceConfigurationResponseOutputWithContext(ctx context.Context) SparkResourceConfigurationResponseOutput {
	return o
}

// Optional type of VM used as supported by the compute target.
func (o SparkResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Version of spark runtime used for the job.
func (o SparkResourceConfigurationResponseOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkResourceConfigurationResponse) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type SparkResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SparkResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkResourceConfigurationResponse)(nil)).Elem()
}

func (o SparkResourceConfigurationResponsePtrOutput) ToSparkResourceConfigurationResponsePtrOutput() SparkResourceConfigurationResponsePtrOutput {
	return o
}

func (o SparkResourceConfigurationResponsePtrOutput) ToSparkResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) SparkResourceConfigurationResponsePtrOutput {
	return o
}

func (o SparkResourceConfigurationResponsePtrOutput) Elem() SparkResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *SparkResourceConfigurationResponse) SparkResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SparkResourceConfigurationResponse
		return ret
	}).(SparkResourceConfigurationResponseOutput)
}

// Optional type of VM used as supported by the compute target.
func (o SparkResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Version of spark runtime used for the job.
func (o SparkResourceConfigurationResponsePtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

type SpeechEndpointDeploymentResourceProperties struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModel `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName *string               `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSku `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.Speech'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

// SpeechEndpointDeploymentResourcePropertiesInput is an input type that accepts SpeechEndpointDeploymentResourcePropertiesArgs and SpeechEndpointDeploymentResourcePropertiesOutput values.
// You can construct a concrete instance of `SpeechEndpointDeploymentResourcePropertiesInput` via:
//
//	SpeechEndpointDeploymentResourcePropertiesArgs{...}
type SpeechEndpointDeploymentResourcePropertiesInput interface {
	pulumi.Input

	ToSpeechEndpointDeploymentResourcePropertiesOutput() SpeechEndpointDeploymentResourcePropertiesOutput
	ToSpeechEndpointDeploymentResourcePropertiesOutputWithContext(context.Context) SpeechEndpointDeploymentResourcePropertiesOutput
}

type SpeechEndpointDeploymentResourcePropertiesArgs struct {
	// The failure reason if the creation failed.
	FailureReason pulumi.StringPtrInput `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelInput `pulumi:"model"`
	// The name of RAI policy.
	RaiPolicyName pulumi.StringPtrInput        `pulumi:"raiPolicyName"`
	Sku           CognitiveServicesSkuPtrInput `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.Speech'.
	Type pulumi.StringInput `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption pulumi.StringPtrInput `pulumi:"versionUpgradeOption"`
}

func (SpeechEndpointDeploymentResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpeechEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (i SpeechEndpointDeploymentResourcePropertiesArgs) ToSpeechEndpointDeploymentResourcePropertiesOutput() SpeechEndpointDeploymentResourcePropertiesOutput {
	return i.ToSpeechEndpointDeploymentResourcePropertiesOutputWithContext(context.Background())
}

func (i SpeechEndpointDeploymentResourcePropertiesArgs) ToSpeechEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) SpeechEndpointDeploymentResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpeechEndpointDeploymentResourcePropertiesOutput)
}

type SpeechEndpointDeploymentResourcePropertiesOutput struct{ *pulumi.OutputState }

func (SpeechEndpointDeploymentResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpeechEndpointDeploymentResourceProperties)(nil)).Elem()
}

func (o SpeechEndpointDeploymentResourcePropertiesOutput) ToSpeechEndpointDeploymentResourcePropertiesOutput() SpeechEndpointDeploymentResourcePropertiesOutput {
	return o
}

func (o SpeechEndpointDeploymentResourcePropertiesOutput) ToSpeechEndpointDeploymentResourcePropertiesOutputWithContext(ctx context.Context) SpeechEndpointDeploymentResourcePropertiesOutput {
	return o
}

// The failure reason if the creation failed.
func (o SpeechEndpointDeploymentResourcePropertiesOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o SpeechEndpointDeploymentResourcePropertiesOutput) Model() EndpointDeploymentModelOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) EndpointDeploymentModel { return v.Model }).(EndpointDeploymentModelOutput)
}

// The name of RAI policy.
func (o SpeechEndpointDeploymentResourcePropertiesOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o SpeechEndpointDeploymentResourcePropertiesOutput) Sku() CognitiveServicesSkuPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) *CognitiveServicesSku { return v.Sku }).(CognitiveServicesSkuPtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.Speech'.
func (o SpeechEndpointDeploymentResourcePropertiesOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o SpeechEndpointDeploymentResourcePropertiesOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourceProperties) *string { return v.VersionUpgradeOption }).(pulumi.StringPtrOutput)
}

type SpeechEndpointDeploymentResourcePropertiesResponse struct {
	// The failure reason if the creation failed.
	FailureReason *string `pulumi:"failureReason"`
	// Model used for the endpoint deployment.
	Model EndpointDeploymentModelResponse `pulumi:"model"`
	// Read-only provision state status property.
	ProvisioningState string `pulumi:"provisioningState"`
	// The name of RAI policy.
	RaiPolicyName *string                       `pulumi:"raiPolicyName"`
	Sku           *CognitiveServicesSkuResponse `pulumi:"sku"`
	// Kind of the deployment.
	// Expected value is 'Azure.Speech'.
	Type string `pulumi:"type"`
	// Deployment model version upgrade option.
	VersionUpgradeOption *string `pulumi:"versionUpgradeOption"`
}

type SpeechEndpointDeploymentResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (SpeechEndpointDeploymentResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpeechEndpointDeploymentResourcePropertiesResponse)(nil)).Elem()
}

func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) ToSpeechEndpointDeploymentResourcePropertiesResponseOutput() SpeechEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) ToSpeechEndpointDeploymentResourcePropertiesResponseOutputWithContext(ctx context.Context) SpeechEndpointDeploymentResourcePropertiesResponseOutput {
	return o
}

// The failure reason if the creation failed.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) FailureReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) *string { return v.FailureReason }).(pulumi.StringPtrOutput)
}

// Model used for the endpoint deployment.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) Model() EndpointDeploymentModelResponseOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) EndpointDeploymentModelResponse {
		return v.Model
	}).(EndpointDeploymentModelResponseOutput)
}

// Read-only provision state status property.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// The name of RAI policy.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) RaiPolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) *string { return v.RaiPolicyName }).(pulumi.StringPtrOutput)
}

func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) Sku() CognitiveServicesSkuResponsePtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) *CognitiveServicesSkuResponse { return v.Sku }).(CognitiveServicesSkuResponsePtrOutput)
}

// Kind of the deployment.
// Expected value is 'Azure.Speech'.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Deployment model version upgrade option.
func (o SpeechEndpointDeploymentResourcePropertiesResponseOutput) VersionUpgradeOption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpeechEndpointDeploymentResourcePropertiesResponse) *string { return v.VersionUpgradeOption }).(pulumi.StringPtrOutput)
}

// The ssl configuration for scoring
type SslConfiguration struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// SslConfigurationInput is an input type that accepts SslConfigurationArgs and SslConfigurationOutput values.
// You can construct a concrete instance of `SslConfigurationInput` via:
//
//	SslConfigurationArgs{...}
type SslConfigurationInput interface {
	pulumi.Input

	ToSslConfigurationOutput() SslConfigurationOutput
	ToSslConfigurationOutputWithContext(context.Context) SslConfigurationOutput
}

// The ssl configuration for scoring
type SslConfigurationArgs struct {
	// Cert data
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// CNAME of the cert
	Cname pulumi.StringPtrInput `pulumi:"cname"`
	// Key data
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel pulumi.StringPtrInput `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain pulumi.BoolPtrInput `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (SslConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfiguration)(nil)).Elem()
}

func (i SslConfigurationArgs) ToSslConfigurationOutput() SslConfigurationOutput {
	return i.ToSslConfigurationOutputWithContext(context.Background())
}

func (i SslConfigurationArgs) ToSslConfigurationOutputWithContext(ctx context.Context) SslConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationOutput)
}

func (i SslConfigurationArgs) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return i.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (i SslConfigurationArgs) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationOutput).ToSslConfigurationPtrOutputWithContext(ctx)
}

// SslConfigurationPtrInput is an input type that accepts SslConfigurationArgs, SslConfigurationPtr and SslConfigurationPtrOutput values.
// You can construct a concrete instance of `SslConfigurationPtrInput` via:
//
//	        SslConfigurationArgs{...}
//
//	or:
//
//	        nil
type SslConfigurationPtrInput interface {
	pulumi.Input

	ToSslConfigurationPtrOutput() SslConfigurationPtrOutput
	ToSslConfigurationPtrOutputWithContext(context.Context) SslConfigurationPtrOutput
}

type sslConfigurationPtrType SslConfigurationArgs

func SslConfigurationPtr(v *SslConfigurationArgs) SslConfigurationPtrInput {
	return (*sslConfigurationPtrType)(v)
}

func (*sslConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfiguration)(nil)).Elem()
}

func (i *sslConfigurationPtrType) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return i.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (i *sslConfigurationPtrType) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslConfigurationPtrOutput)
}

// The ssl configuration for scoring
type SslConfigurationOutput struct{ *pulumi.OutputState }

func (SslConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfiguration)(nil)).Elem()
}

func (o SslConfigurationOutput) ToSslConfigurationOutput() SslConfigurationOutput {
	return o
}

func (o SslConfigurationOutput) ToSslConfigurationOutputWithContext(ctx context.Context) SslConfigurationOutput {
	return o
}

func (o SslConfigurationOutput) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return o.ToSslConfigurationPtrOutputWithContext(context.Background())
}

func (o SslConfigurationOutput) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslConfiguration) *SslConfiguration {
		return &v
	}).(SslConfigurationPtrOutput)
}

// Cert data
func (o SslConfigurationOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.LeafDomainLabel }).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *bool { return v.OverwriteExistingDomain }).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfiguration) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SslConfigurationPtrOutput struct{ *pulumi.OutputState }

func (SslConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfiguration)(nil)).Elem()
}

func (o SslConfigurationPtrOutput) ToSslConfigurationPtrOutput() SslConfigurationPtrOutput {
	return o
}

func (o SslConfigurationPtrOutput) ToSslConfigurationPtrOutputWithContext(ctx context.Context) SslConfigurationPtrOutput {
	return o
}

func (o SslConfigurationPtrOutput) Elem() SslConfigurationOutput {
	return o.ApplyT(func(v *SslConfiguration) SslConfiguration {
		if v != nil {
			return *v
		}
		var ret SslConfiguration
		return ret
	}).(SslConfigurationOutput)
}

// Cert data
func (o SslConfigurationPtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationPtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationPtrOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.LeafDomainLabel
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationPtrOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingDomain
	}).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// The ssl configuration for scoring
type SslConfigurationResponse struct {
	// Cert data
	Cert *string `pulumi:"cert"`
	// CNAME of the cert
	Cname *string `pulumi:"cname"`
	// Key data
	Key *string `pulumi:"key"`
	// Leaf domain label of public endpoint
	LeafDomainLabel *string `pulumi:"leafDomainLabel"`
	// Indicates whether to overwrite existing domain label.
	OverwriteExistingDomain *bool `pulumi:"overwriteExistingDomain"`
	// Enable or disable ssl for scoring
	Status *string `pulumi:"status"`
}

// The ssl configuration for scoring
type SslConfigurationResponseOutput struct{ *pulumi.OutputState }

func (SslConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslConfigurationResponse)(nil)).Elem()
}

func (o SslConfigurationResponseOutput) ToSslConfigurationResponseOutput() SslConfigurationResponseOutput {
	return o
}

func (o SslConfigurationResponseOutput) ToSslConfigurationResponseOutputWithContext(ctx context.Context) SslConfigurationResponseOutput {
	return o
}

// Cert data
func (o SslConfigurationResponseOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationResponseOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Cname }).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationResponseOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.LeafDomainLabel }).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationResponseOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *bool { return v.OverwriteExistingDomain }).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationResponseOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslConfigurationResponse) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type SslConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (SslConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslConfigurationResponse)(nil)).Elem()
}

func (o SslConfigurationResponsePtrOutput) ToSslConfigurationResponsePtrOutput() SslConfigurationResponsePtrOutput {
	return o
}

func (o SslConfigurationResponsePtrOutput) ToSslConfigurationResponsePtrOutputWithContext(ctx context.Context) SslConfigurationResponsePtrOutput {
	return o
}

func (o SslConfigurationResponsePtrOutput) Elem() SslConfigurationResponseOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) SslConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret SslConfigurationResponse
		return ret
	}).(SslConfigurationResponseOutput)
}

// Cert data
func (o SslConfigurationResponsePtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// CNAME of the cert
func (o SslConfigurationResponsePtrOutput) Cname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cname
	}).(pulumi.StringPtrOutput)
}

// Key data
func (o SslConfigurationResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Leaf domain label of public endpoint
func (o SslConfigurationResponsePtrOutput) LeafDomainLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LeafDomainLabel
	}).(pulumi.StringPtrOutput)
}

// Indicates whether to overwrite existing domain label.
func (o SslConfigurationResponsePtrOutput) OverwriteExistingDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.OverwriteExistingDomain
	}).(pulumi.BoolPtrOutput)
}

// Enable or disable ssl for scoring
func (o SslConfigurationResponsePtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettings struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettings
func (val *StackEnsembleSettings) Defaults() *StackEnsembleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// StackEnsembleSettingsInput is an input type that accepts StackEnsembleSettingsArgs and StackEnsembleSettingsOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsInput` via:
//
//	StackEnsembleSettingsArgs{...}
type StackEnsembleSettingsInput interface {
	pulumi.Input

	ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput
	ToStackEnsembleSettingsOutputWithContext(context.Context) StackEnsembleSettingsOutput
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsArgs struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs pulumi.Input `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage pulumi.Float64PtrInput `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType pulumi.StringPtrInput `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsArgs
func (val *StackEnsembleSettingsArgs) Defaults() *StackEnsembleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		tmp.StackMetaLearnerTrainPercentage = pulumi.Float64Ptr(0.2)
	}
	if tmp.StackMetaLearnerType == nil {
		tmp.StackMetaLearnerType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (StackEnsembleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return i.ToStackEnsembleSettingsOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput)
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput).ToStackEnsembleSettingsPtrOutputWithContext(ctx)
}

// StackEnsembleSettingsPtrInput is an input type that accepts StackEnsembleSettingsArgs, StackEnsembleSettingsPtr and StackEnsembleSettingsPtrOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsPtrInput` via:
//
//	        StackEnsembleSettingsArgs{...}
//
//	or:
//
//	        nil
type StackEnsembleSettingsPtrInput interface {
	pulumi.Input

	ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput
	ToStackEnsembleSettingsPtrOutputWithContext(context.Context) StackEnsembleSettingsPtrOutput
}

type stackEnsembleSettingsPtrType StackEnsembleSettingsArgs

func StackEnsembleSettingsPtr(v *StackEnsembleSettingsArgs) StackEnsembleSettingsPtrInput {
	return (*stackEnsembleSettingsPtrType)(v)
}

func (*stackEnsembleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackEnsembleSettings) *StackEnsembleSettings {
		return &v
	}).(StackEnsembleSettingsPtrOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettings) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsPtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) Elem() StackEnsembleSettingsOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) StackEnsembleSettings {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettings
		return ret
	}).(StackEnsembleSettingsOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponse struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsResponse
func (val *StackEnsembleSettingsResponse) Defaults() *StackEnsembleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponseOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutput() StackEnsembleSettingsResponseOutput {
	return o
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutputWithContext(ctx context.Context) StackEnsembleSettingsResponseOutput {
	return o
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutput() StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutputWithContext(ctx context.Context) StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) Elem() StackEnsembleSettingsResponseOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) StackEnsembleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettingsResponse
		return ret
	}).(StackEnsembleSettingsResponseOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Static input data definition.
type StaticInputData struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Static'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId *string `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
	// [Required] The end date of the data window.
	WindowEnd string `pulumi:"windowEnd"`
	// [Required] The start date of the data window.
	WindowStart string `pulumi:"windowStart"`
}

// StaticInputDataInput is an input type that accepts StaticInputDataArgs and StaticInputDataOutput values.
// You can construct a concrete instance of `StaticInputDataInput` via:
//
//	StaticInputDataArgs{...}
type StaticInputDataInput interface {
	pulumi.Input

	ToStaticInputDataOutput() StaticInputDataOutput
	ToStaticInputDataOutputWithContext(context.Context) StaticInputDataOutput
}

// Static input data definition.
type StaticInputDataArgs struct {
	// Mapping of column names to special uses.
	Columns pulumi.StringMapInput `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext pulumi.StringPtrInput `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Static'.
	InputDataType pulumi.StringInput `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId pulumi.StringPtrInput `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
	// [Required] The end date of the data window.
	WindowEnd pulumi.StringInput `pulumi:"windowEnd"`
	// [Required] The start date of the data window.
	WindowStart pulumi.StringInput `pulumi:"windowStart"`
}

func (StaticInputDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticInputData)(nil)).Elem()
}

func (i StaticInputDataArgs) ToStaticInputDataOutput() StaticInputDataOutput {
	return i.ToStaticInputDataOutputWithContext(context.Background())
}

func (i StaticInputDataArgs) ToStaticInputDataOutputWithContext(ctx context.Context) StaticInputDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticInputDataOutput)
}

// Static input data definition.
type StaticInputDataOutput struct{ *pulumi.OutputState }

func (StaticInputDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticInputData)(nil)).Elem()
}

func (o StaticInputDataOutput) ToStaticInputDataOutput() StaticInputDataOutput {
	return o
}

func (o StaticInputDataOutput) ToStaticInputDataOutputWithContext(ctx context.Context) StaticInputDataOutput {
	return o
}

// Mapping of column names to special uses.
func (o StaticInputDataOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v StaticInputData) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o StaticInputDataOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticInputData) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Static'.
func (o StaticInputDataOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputData) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o StaticInputDataOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputData) string { return v.JobInputType }).(pulumi.StringOutput)
}

// The ARM resource ID of the component resource used to preprocess the data.
func (o StaticInputDataOutput) PreprocessingComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticInputData) *string { return v.PreprocessingComponentId }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o StaticInputDataOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputData) string { return v.Uri }).(pulumi.StringOutput)
}

// [Required] The end date of the data window.
func (o StaticInputDataOutput) WindowEnd() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputData) string { return v.WindowEnd }).(pulumi.StringOutput)
}

// [Required] The start date of the data window.
func (o StaticInputDataOutput) WindowStart() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputData) string { return v.WindowStart }).(pulumi.StringOutput)
}

// Static input data definition.
type StaticInputDataResponse struct {
	// Mapping of column names to special uses.
	Columns map[string]string `pulumi:"columns"`
	// The context metadata of the data source.
	DataContext *string `pulumi:"dataContext"`
	// Monitoring input data type enum.
	// Expected value is 'Static'.
	InputDataType string `pulumi:"inputDataType"`
	// [Required] Specifies the type of job.
	JobInputType string `pulumi:"jobInputType"`
	// The ARM resource ID of the component resource used to preprocess the data.
	PreprocessingComponentId *string `pulumi:"preprocessingComponentId"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
	// [Required] The end date of the data window.
	WindowEnd string `pulumi:"windowEnd"`
	// [Required] The start date of the data window.
	WindowStart string `pulumi:"windowStart"`
}

// Static input data definition.
type StaticInputDataResponseOutput struct{ *pulumi.OutputState }

func (StaticInputDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticInputDataResponse)(nil)).Elem()
}

func (o StaticInputDataResponseOutput) ToStaticInputDataResponseOutput() StaticInputDataResponseOutput {
	return o
}

func (o StaticInputDataResponseOutput) ToStaticInputDataResponseOutputWithContext(ctx context.Context) StaticInputDataResponseOutput {
	return o
}

// Mapping of column names to special uses.
func (o StaticInputDataResponseOutput) Columns() pulumi.StringMapOutput {
	return o.ApplyT(func(v StaticInputDataResponse) map[string]string { return v.Columns }).(pulumi.StringMapOutput)
}

// The context metadata of the data source.
func (o StaticInputDataResponseOutput) DataContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticInputDataResponse) *string { return v.DataContext }).(pulumi.StringPtrOutput)
}

// Monitoring input data type enum.
// Expected value is 'Static'.
func (o StaticInputDataResponseOutput) InputDataType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputDataResponse) string { return v.InputDataType }).(pulumi.StringOutput)
}

// [Required] Specifies the type of job.
func (o StaticInputDataResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputDataResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// The ARM resource ID of the component resource used to preprocess the data.
func (o StaticInputDataResponseOutput) PreprocessingComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticInputDataResponse) *string { return v.PreprocessingComponentId }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o StaticInputDataResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputDataResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// [Required] The end date of the data window.
func (o StaticInputDataResponseOutput) WindowEnd() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputDataResponse) string { return v.WindowEnd }).(pulumi.StringOutput)
}

// [Required] The start date of the data window.
func (o StaticInputDataResponseOutput) WindowStart() pulumi.StringOutput {
	return o.ApplyT(func(v StaticInputDataResponse) string { return v.WindowStart }).(pulumi.StringOutput)
}

// Active message associated with project
type StatusMessageResponse struct {
	// Service-defined message code.
	Code string `pulumi:"code"`
	// Time in UTC at which the message was created.
	CreatedDateTime string `pulumi:"createdDateTime"`
	// Severity level of message.
	Level string `pulumi:"level"`
	// A human-readable representation of the message code.
	Message string `pulumi:"message"`
}

// Active message associated with project
type StatusMessageResponseOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutput() StatusMessageResponseOutput {
	return o
}

func (o StatusMessageResponseOutput) ToStatusMessageResponseOutputWithContext(ctx context.Context) StatusMessageResponseOutput {
	return o
}

// Service-defined message code.
func (o StatusMessageResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Time in UTC at which the message was created.
func (o StatusMessageResponseOutput) CreatedDateTime() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.CreatedDateTime }).(pulumi.StringOutput)
}

// Severity level of message.
func (o StatusMessageResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Level }).(pulumi.StringOutput)
}

// A human-readable representation of the message code.
func (o StatusMessageResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusMessageResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusMessageResponse)(nil)).Elem()
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutput() StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) ToStatusMessageResponseArrayOutputWithContext(ctx context.Context) StatusMessageResponseArrayOutput {
	return o
}

func (o StatusMessageResponseArrayOutput) Index(i pulumi.IntInput) StatusMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusMessageResponse {
		return vs[0].([]StatusMessageResponse)[vs[1].(int)]
	}).(StatusMessageResponseOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetails struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccount `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccount `pulumi:"userCreatedStorageAccount"`
}

// StorageAccountDetailsInput is an input type that accepts StorageAccountDetailsArgs and StorageAccountDetailsOutput values.
// You can construct a concrete instance of `StorageAccountDetailsInput` via:
//
//	StorageAccountDetailsArgs{...}
type StorageAccountDetailsInput interface {
	pulumi.Input

	ToStorageAccountDetailsOutput() StorageAccountDetailsOutput
	ToStorageAccountDetailsOutputWithContext(context.Context) StorageAccountDetailsOutput
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsArgs struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount SystemCreatedStorageAccountPtrInput `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount UserCreatedStorageAccountPtrInput `pulumi:"userCreatedStorageAccount"`
}

func (StorageAccountDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return i.ToStorageAccountDetailsOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArgs) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsOutput)
}

// StorageAccountDetailsArrayInput is an input type that accepts StorageAccountDetailsArray and StorageAccountDetailsArrayOutput values.
// You can construct a concrete instance of `StorageAccountDetailsArrayInput` via:
//
//	StorageAccountDetailsArray{ StorageAccountDetailsArgs{...} }
type StorageAccountDetailsArrayInput interface {
	pulumi.Input

	ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput
	ToStorageAccountDetailsArrayOutputWithContext(context.Context) StorageAccountDetailsArrayOutput
}

type StorageAccountDetailsArray []StorageAccountDetailsInput

func (StorageAccountDetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return i.ToStorageAccountDetailsArrayOutputWithContext(context.Background())
}

func (i StorageAccountDetailsArray) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageAccountDetailsArrayOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutput() StorageAccountDetailsOutput {
	return o
}

func (o StorageAccountDetailsOutput) ToStorageAccountDetailsOutputWithContext(ctx context.Context) StorageAccountDetailsOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *SystemCreatedStorageAccount { return v.SystemCreatedStorageAccount }).(SystemCreatedStorageAccountPtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsOutput) UserCreatedStorageAccount() UserCreatedStorageAccountPtrOutput {
	return o.ApplyT(func(v StorageAccountDetails) *UserCreatedStorageAccount { return v.UserCreatedStorageAccount }).(UserCreatedStorageAccountPtrOutput)
}

type StorageAccountDetailsArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetails)(nil)).Elem()
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutput() StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) ToStorageAccountDetailsArrayOutputWithContext(ctx context.Context) StorageAccountDetailsArrayOutput {
	return o
}

func (o StorageAccountDetailsArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetails {
		return vs[0].([]StorageAccountDetails)[vs[1].(int)]
	}).(StorageAccountDetailsOutput)
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponse struct {
	// Details of system created storage account to be used for the registry
	SystemCreatedStorageAccount *SystemCreatedStorageAccountResponse `pulumi:"systemCreatedStorageAccount"`
	// Details of user created storage account to be used for the registry
	UserCreatedStorageAccount *UserCreatedStorageAccountResponse `pulumi:"userCreatedStorageAccount"`
}

// Details of storage account to be used for the Registry
type StorageAccountDetailsResponseOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutput() StorageAccountDetailsResponseOutput {
	return o
}

func (o StorageAccountDetailsResponseOutput) ToStorageAccountDetailsResponseOutputWithContext(ctx context.Context) StorageAccountDetailsResponseOutput {
	return o
}

// Details of system created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) SystemCreatedStorageAccount() SystemCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *SystemCreatedStorageAccountResponse {
		return v.SystemCreatedStorageAccount
	}).(SystemCreatedStorageAccountResponsePtrOutput)
}

// Details of user created storage account to be used for the registry
func (o StorageAccountDetailsResponseOutput) UserCreatedStorageAccount() UserCreatedStorageAccountResponsePtrOutput {
	return o.ApplyT(func(v StorageAccountDetailsResponse) *UserCreatedStorageAccountResponse {
		return v.UserCreatedStorageAccount
	}).(UserCreatedStorageAccountResponsePtrOutput)
}

type StorageAccountDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (StorageAccountDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StorageAccountDetailsResponse)(nil)).Elem()
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutput() StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) ToStorageAccountDetailsResponseArrayOutputWithContext(ctx context.Context) StorageAccountDetailsResponseArrayOutput {
	return o
}

func (o StorageAccountDetailsResponseArrayOutput) Index(i pulumi.IntInput) StorageAccountDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StorageAccountDetailsResponse {
		return vs[0].([]StorageAccountDetailsResponse)[vs[1].(int)]
	}).(StorageAccountDetailsResponseOutput)
}

// Sweep job definition.
type SweepJob struct {
	// Component Configuration for sweep over component
	ComponentConfiguration *ComponentConfiguration `pulumi:"componentConfiguration"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimits `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting *NotificationSetting `pulumi:"notificationSetting"`
	// [Required] Optimization objective.
	Objective Objective `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettings `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfiguration `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponent `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJob
func (val *SweepJob) Defaults() *SweepJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// SweepJobInput is an input type that accepts SweepJobArgs and SweepJobOutput values.
// You can construct a concrete instance of `SweepJobInput` via:
//
//	SweepJobArgs{...}
type SweepJobInput interface {
	pulumi.Input

	ToSweepJobOutput() SweepJobOutput
	ToSweepJobOutputWithContext(context.Context) SweepJobOutput
}

// Sweep job definition.
type SweepJobArgs struct {
	// Component Configuration for sweep over component
	ComponentConfiguration ComponentConfigurationPtrInput `pulumi:"componentConfiguration"`
	// ARM resource ID of the component resource.
	ComponentId pulumi.StringPtrInput `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Sweep Job limit.
	Limits SweepJobLimitsPtrInput `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting NotificationSettingPtrInput `pulumi:"notificationSetting"`
	// [Required] Optimization objective.
	Objective ObjectiveInput `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings QueueSettingsPtrInput `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm pulumi.Input `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace pulumi.Input `pulumi:"searchSpace"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration SecretConfigurationMapInput `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentInput `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobArgs
func (val *SweepJobArgs) Defaults() *SweepJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (SweepJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (i SweepJobArgs) ToSweepJobOutput() SweepJobOutput {
	return i.ToSweepJobOutputWithContext(context.Background())
}

func (i SweepJobArgs) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobOutput)
}

// Sweep job definition.
type SweepJobOutput struct{ *pulumi.OutputState }

func (SweepJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (o SweepJobOutput) ToSweepJobOutput() SweepJobOutput {
	return o
}

func (o SweepJobOutput) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return o
}

// Component Configuration for sweep over component
func (o SweepJobOutput) ComponentConfiguration() ComponentConfigurationPtrOutput {
	return o.ApplyT(func(v SweepJob) *ComponentConfiguration { return v.ComponentConfiguration }).(ComponentConfigurationPtrOutput)
}

// ARM resource ID of the component resource.
func (o SweepJobOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SweepJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobOutput) Limits() SweepJobLimitsPtrOutput {
	return o.ApplyT(func(v SweepJob) *SweepJobLimits { return v.Limits }).(SweepJobLimitsPtrOutput)
}

// Notification setting for the job
func (o SweepJobOutput) NotificationSetting() NotificationSettingPtrOutput {
	return o.ApplyT(func(v SweepJob) *NotificationSetting { return v.NotificationSetting }).(NotificationSettingPtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobOutput) Objective() ObjectiveOutput {
	return o.ApplyT(func(v SweepJob) Objective { return v.Objective }).(ObjectiveOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o SweepJobOutput) QueueSettings() QueueSettingsPtrOutput {
	return o.ApplyT(func(v SweepJob) *QueueSettings { return v.QueueSettings }).(QueueSettingsPtrOutput)
}

// Compute Resource configuration for the job.
func (o SweepJobOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v SweepJob) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// Configuration for secrets to be made available during runtime.
func (o SweepJobOutput) SecretsConfiguration() SecretConfigurationMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]SecretConfiguration { return v.SecretsConfiguration }).(SecretConfigurationMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobOutput) Trial() TrialComponentOutput {
	return o.ApplyT(func(v SweepJob) TrialComponent { return v.Trial }).(TrialComponentOutput)
}

// Sweep Job limit class.
type SweepJobLimits struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// SweepJobLimitsInput is an input type that accepts SweepJobLimitsArgs and SweepJobLimitsOutput values.
// You can construct a concrete instance of `SweepJobLimitsInput` via:
//
//	SweepJobLimitsArgs{...}
type SweepJobLimitsInput interface {
	pulumi.Input

	ToSweepJobLimitsOutput() SweepJobLimitsOutput
	ToSweepJobLimitsOutputWithContext(context.Context) SweepJobLimitsOutput
}

// Sweep Job limit class.
type SweepJobLimitsArgs struct {
	// Expected value is 'Sweep'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials pulumi.IntPtrInput `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

func (SweepJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return i.ToSweepJobLimitsOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput)
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput).ToSweepJobLimitsPtrOutputWithContext(ctx)
}

// SweepJobLimitsPtrInput is an input type that accepts SweepJobLimitsArgs, SweepJobLimitsPtr and SweepJobLimitsPtrOutput values.
// You can construct a concrete instance of `SweepJobLimitsPtrInput` via:
//
//	        SweepJobLimitsArgs{...}
//
//	or:
//
//	        nil
type SweepJobLimitsPtrInput interface {
	pulumi.Input

	ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput
	ToSweepJobLimitsPtrOutputWithContext(context.Context) SweepJobLimitsPtrOutput
}

type sweepJobLimitsPtrType SweepJobLimitsArgs

func SweepJobLimitsPtr(v *SweepJobLimitsArgs) SweepJobLimitsPtrInput {
	return (*sweepJobLimitsPtrType)(v)
}

func (*sweepJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SweepJobLimits) *SweepJobLimits {
		return &v
	}).(SweepJobLimitsPtrOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) Elem() SweepJobLimitsOutput {
	return o.ApplyT(func(v *SweepJobLimits) SweepJobLimits {
		if v != nil {
			return *v
		}
		var ret SweepJobLimits
		return ret
	}).(SweepJobLimitsOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsPtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsResponse struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Sweep Job limit class.
type SweepJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutput() SweepJobLimitsResponseOutput {
	return o
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutputWithContext(ctx context.Context) SweepJobLimitsResponseOutput {
	return o
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponseOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutput() SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutputWithContext(ctx context.Context) SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) Elem() SweepJobLimitsResponseOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) SweepJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret SweepJobLimitsResponse
		return ret
	}).(SweepJobLimitsResponseOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponsePtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep job definition.
type SweepJobResponse struct {
	// Component Configuration for sweep over component
	ComponentConfiguration *ComponentConfigurationResponse `pulumi:"componentConfiguration"`
	// ARM resource ID of the component resource.
	ComponentId *string `pulumi:"componentId"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimitsResponse `pulumi:"limits"`
	// Notification setting for the job
	NotificationSetting *NotificationSettingResponse `pulumi:"notificationSetting"`
	// [Required] Optimization objective.
	Objective ObjectiveResponse `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Queue settings for the job
	QueueSettings *QueueSettingsResponse `pulumi:"queueSettings"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// Configuration for secrets to be made available during runtime.
	SecretsConfiguration map[string]SecretConfigurationResponse `pulumi:"secretsConfiguration"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentResponse `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobResponse
func (val *SweepJobResponse) Defaults() *SweepJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.QueueSettings = tmp.QueueSettings.Defaults()

	tmp.Resources = tmp.Resources.Defaults()

	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// Sweep job definition.
type SweepJobResponseOutput struct{ *pulumi.OutputState }

func (SweepJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobResponse)(nil)).Elem()
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutput() SweepJobResponseOutput {
	return o
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutputWithContext(ctx context.Context) SweepJobResponseOutput {
	return o
}

// Component Configuration for sweep over component
func (o SweepJobResponseOutput) ComponentConfiguration() ComponentConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *ComponentConfigurationResponse { return v.ComponentConfiguration }).(ComponentConfigurationResponsePtrOutput)
}

// ARM resource ID of the component resource.
func (o SweepJobResponseOutput) ComponentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ComponentId }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the compute resource.
func (o SweepJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobResponseOutput) Limits() SweepJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *SweepJobLimitsResponse { return v.Limits }).(SweepJobLimitsResponsePtrOutput)
}

// Notification setting for the job
func (o SweepJobResponseOutput) NotificationSetting() NotificationSettingResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *NotificationSettingResponse { return v.NotificationSetting }).(NotificationSettingResponsePtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobResponseOutput) Objective() ObjectiveResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) ObjectiveResponse { return v.Objective }).(ObjectiveResponseOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Queue settings for the job
func (o SweepJobResponseOutput) QueueSettings() QueueSettingsResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *QueueSettingsResponse { return v.QueueSettings }).(QueueSettingsResponsePtrOutput)
}

// Compute Resource configuration for the job.
func (o SweepJobResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobResponseOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobResponseOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// Configuration for secrets to be made available during runtime.
func (o SweepJobResponseOutput) SecretsConfiguration() SecretConfigurationResponseMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]SecretConfigurationResponse { return v.SecretsConfiguration }).(SecretConfigurationResponseMapOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o SweepJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobResponseOutput) Trial() TrialComponentResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) TrialComponentResponse { return v.Trial }).(TrialComponentResponseOutput)
}

// A SynapseSpark compute.
type SynapseSpark struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                   `pulumi:"disableLocalAuth"`
	Properties       *SynapseSparkProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// SynapseSparkInput is an input type that accepts SynapseSparkArgs and SynapseSparkOutput values.
// You can construct a concrete instance of `SynapseSparkInput` via:
//
//	SynapseSparkArgs{...}
type SynapseSparkInput interface {
	pulumi.Input

	ToSynapseSparkOutput() SynapseSparkOutput
	ToSynapseSparkOutputWithContext(context.Context) SynapseSparkOutput
}

// A SynapseSpark compute.
type SynapseSparkArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput            `pulumi:"disableLocalAuth"`
	Properties       SynapseSparkPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (SynapseSparkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSpark)(nil)).Elem()
}

func (i SynapseSparkArgs) ToSynapseSparkOutput() SynapseSparkOutput {
	return i.ToSynapseSparkOutputWithContext(context.Background())
}

func (i SynapseSparkArgs) ToSynapseSparkOutputWithContext(ctx context.Context) SynapseSparkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkOutput)
}

func (i SynapseSparkArgs) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return i.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (i SynapseSparkArgs) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkOutput).ToSynapseSparkPtrOutputWithContext(ctx)
}

// SynapseSparkPtrInput is an input type that accepts SynapseSparkArgs, SynapseSparkPtr and SynapseSparkPtrOutput values.
// You can construct a concrete instance of `SynapseSparkPtrInput` via:
//
//	        SynapseSparkArgs{...}
//
//	or:
//
//	        nil
type SynapseSparkPtrInput interface {
	pulumi.Input

	ToSynapseSparkPtrOutput() SynapseSparkPtrOutput
	ToSynapseSparkPtrOutputWithContext(context.Context) SynapseSparkPtrOutput
}

type synapseSparkPtrType SynapseSparkArgs

func SynapseSparkPtr(v *SynapseSparkArgs) SynapseSparkPtrInput {
	return (*synapseSparkPtrType)(v)
}

func (*synapseSparkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSpark)(nil)).Elem()
}

func (i *synapseSparkPtrType) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return i.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (i *synapseSparkPtrType) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPtrOutput)
}

// A SynapseSpark compute.
type SynapseSparkOutput struct{ *pulumi.OutputState }

func (SynapseSparkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSpark)(nil)).Elem()
}

func (o SynapseSparkOutput) ToSynapseSparkOutput() SynapseSparkOutput {
	return o
}

func (o SynapseSparkOutput) ToSynapseSparkOutputWithContext(ctx context.Context) SynapseSparkOutput {
	return o
}

func (o SynapseSparkOutput) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return o.ToSynapseSparkPtrOutputWithContext(context.Background())
}

func (o SynapseSparkOutput) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SynapseSpark) *SynapseSpark {
		return &v
	}).(SynapseSparkPtrOutput)
}

// Location for the underlying compute
func (o SynapseSparkOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSpark) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

func (o SynapseSparkOutput) Properties() SynapseSparkPropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *SynapseSparkProperties { return v.Properties }).(SynapseSparkPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSpark) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type SynapseSparkPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSpark)(nil)).Elem()
}

func (o SynapseSparkPtrOutput) ToSynapseSparkPtrOutput() SynapseSparkPtrOutput {
	return o
}

func (o SynapseSparkPtrOutput) ToSynapseSparkPtrOutputWithContext(ctx context.Context) SynapseSparkPtrOutput {
	return o
}

func (o SynapseSparkPtrOutput) Elem() SynapseSparkOutput {
	return o.ApplyT(func(v *SynapseSpark) SynapseSpark {
		if v != nil {
			return *v
		}
		var ret SynapseSpark
		return ret
	}).(SynapseSparkOutput)
}

// Location for the underlying compute
func (o SynapseSparkPtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkPtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkPtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

func (o SynapseSparkPtrOutput) Properties() SynapseSparkPropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *SynapseSparkProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(SynapseSparkPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSpark) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type SynapseSparkProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPauseProperties `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScaleProperties `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

// SynapseSparkPropertiesInput is an input type that accepts SynapseSparkPropertiesArgs and SynapseSparkPropertiesOutput values.
// You can construct a concrete instance of `SynapseSparkPropertiesInput` via:
//
//	SynapseSparkPropertiesArgs{...}
type SynapseSparkPropertiesInput interface {
	pulumi.Input

	ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput
	ToSynapseSparkPropertiesOutputWithContext(context.Context) SynapseSparkPropertiesOutput
}

type SynapseSparkPropertiesArgs struct {
	// Auto pause properties.
	AutoPauseProperties AutoPausePropertiesPtrInput `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties AutoScalePropertiesPtrInput `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount pulumi.IntPtrInput `pulumi:"nodeCount"`
	// Node size.
	NodeSize pulumi.StringPtrInput `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily pulumi.StringPtrInput `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName pulumi.StringPtrInput `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup pulumi.StringPtrInput `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion pulumi.StringPtrInput `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId pulumi.StringPtrInput `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringPtrInput `pulumi:"workspaceName"`
}

func (SynapseSparkPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkProperties)(nil)).Elem()
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput {
	return i.ToSynapseSparkPropertiesOutputWithContext(context.Background())
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesOutputWithContext(ctx context.Context) SynapseSparkPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesOutput)
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return i.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i SynapseSparkPropertiesArgs) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesOutput).ToSynapseSparkPropertiesPtrOutputWithContext(ctx)
}

// SynapseSparkPropertiesPtrInput is an input type that accepts SynapseSparkPropertiesArgs, SynapseSparkPropertiesPtr and SynapseSparkPropertiesPtrOutput values.
// You can construct a concrete instance of `SynapseSparkPropertiesPtrInput` via:
//
//	        SynapseSparkPropertiesArgs{...}
//
//	or:
//
//	        nil
type SynapseSparkPropertiesPtrInput interface {
	pulumi.Input

	ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput
	ToSynapseSparkPropertiesPtrOutputWithContext(context.Context) SynapseSparkPropertiesPtrOutput
}

type synapseSparkPropertiesPtrType SynapseSparkPropertiesArgs

func SynapseSparkPropertiesPtr(v *SynapseSparkPropertiesArgs) SynapseSparkPropertiesPtrInput {
	return (*synapseSparkPropertiesPtrType)(v)
}

func (*synapseSparkPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkProperties)(nil)).Elem()
}

func (i *synapseSparkPropertiesPtrType) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return i.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i *synapseSparkPropertiesPtrType) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SynapseSparkPropertiesPtrOutput)
}

type SynapseSparkPropertiesOutput struct{ *pulumi.OutputState }

func (SynapseSparkPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkProperties)(nil)).Elem()
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesOutput() SynapseSparkPropertiesOutput {
	return o
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesOutputWithContext(ctx context.Context) SynapseSparkPropertiesOutput {
	return o
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return o.ToSynapseSparkPropertiesPtrOutputWithContext(context.Background())
}

func (o SynapseSparkPropertiesOutput) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SynapseSparkProperties) *SynapseSparkProperties {
		return &v
	}).(SynapseSparkPropertiesPtrOutput)
}

// Auto pause properties.
func (o SynapseSparkPropertiesOutput) AutoPauseProperties() AutoPausePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *AutoPauseProperties { return v.AutoPauseProperties }).(AutoPausePropertiesPtrOutput)
}

// Auto scale properties.
func (o SynapseSparkPropertiesOutput) AutoScaleProperties() AutoScalePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *AutoScaleProperties { return v.AutoScaleProperties }).(AutoScalePropertiesPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkPropertiesOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkPropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkPropertiesOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.NodeSizeFamily }).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkPropertiesOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.PoolName }).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkPropertiesOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkPropertiesOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.SparkVersion }).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkPropertiesOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkPropertiesOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkProperties) *string { return v.WorkspaceName }).(pulumi.StringPtrOutput)
}

type SynapseSparkPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkProperties)(nil)).Elem()
}

func (o SynapseSparkPropertiesPtrOutput) ToSynapseSparkPropertiesPtrOutput() SynapseSparkPropertiesPtrOutput {
	return o
}

func (o SynapseSparkPropertiesPtrOutput) ToSynapseSparkPropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkPropertiesPtrOutput {
	return o
}

func (o SynapseSparkPropertiesPtrOutput) Elem() SynapseSparkPropertiesOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) SynapseSparkProperties {
		if v != nil {
			return *v
		}
		var ret SynapseSparkProperties
		return ret
	}).(SynapseSparkPropertiesOutput)
}

// Auto pause properties.
func (o SynapseSparkPropertiesPtrOutput) AutoPauseProperties() AutoPausePropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *AutoPauseProperties {
		if v == nil {
			return nil
		}
		return v.AutoPauseProperties
	}).(AutoPausePropertiesPtrOutput)
}

// Auto scale properties.
func (o SynapseSparkPropertiesPtrOutput) AutoScaleProperties() AutoScalePropertiesPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *AutoScaleProperties {
		if v == nil {
			return nil
		}
		return v.AutoScaleProperties
	}).(AutoScalePropertiesPtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkPropertiesPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkPropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkPropertiesPtrOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSizeFamily
	}).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkPropertiesPtrOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.PoolName
	}).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkPropertiesPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkPropertiesPtrOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.SparkVersion
	}).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkPropertiesPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkPropertiesPtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

// A SynapseSpark compute.
type SynapseSparkResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'SynapseSpark'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                          `pulumi:"modifiedOn"`
	Properties *SynapseSparkResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A SynapseSpark compute.
type SynapseSparkResponseOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkResponse)(nil)).Elem()
}

func (o SynapseSparkResponseOutput) ToSynapseSparkResponseOutput() SynapseSparkResponseOutput {
	return o
}

func (o SynapseSparkResponseOutput) ToSynapseSparkResponseOutputWithContext(ctx context.Context) SynapseSparkResponseOutput {
	return o
}

// Location for the underlying compute
func (o SynapseSparkResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'SynapseSpark'.
func (o SynapseSparkResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o SynapseSparkResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o SynapseSparkResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o SynapseSparkResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o SynapseSparkResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v SynapseSparkResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o SynapseSparkResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o SynapseSparkResponseOutput) Properties() SynapseSparkResponsePropertiesPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *SynapseSparkResponseProperties { return v.Properties }).(SynapseSparkResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o SynapseSparkResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v SynapseSparkResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o SynapseSparkResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v SynapseSparkResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o SynapseSparkResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type SynapseSparkResponseProperties struct {
	// Auto pause properties.
	AutoPauseProperties *AutoPausePropertiesResponse `pulumi:"autoPauseProperties"`
	// Auto scale properties.
	AutoScaleProperties *AutoScalePropertiesResponse `pulumi:"autoScaleProperties"`
	// The number of compute nodes currently assigned to the compute.
	NodeCount *int `pulumi:"nodeCount"`
	// Node size.
	NodeSize *string `pulumi:"nodeSize"`
	// Node size family.
	NodeSizeFamily *string `pulumi:"nodeSizeFamily"`
	// Pool name.
	PoolName *string `pulumi:"poolName"`
	// Name of the resource group in which workspace is located.
	ResourceGroup *string `pulumi:"resourceGroup"`
	// Spark version.
	SparkVersion *string `pulumi:"sparkVersion"`
	// Azure subscription identifier.
	SubscriptionId *string `pulumi:"subscriptionId"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName *string `pulumi:"workspaceName"`
}

type SynapseSparkResponsePropertiesOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SynapseSparkResponseProperties)(nil)).Elem()
}

func (o SynapseSparkResponsePropertiesOutput) ToSynapseSparkResponsePropertiesOutput() SynapseSparkResponsePropertiesOutput {
	return o
}

func (o SynapseSparkResponsePropertiesOutput) ToSynapseSparkResponsePropertiesOutputWithContext(ctx context.Context) SynapseSparkResponsePropertiesOutput {
	return o
}

// Auto pause properties.
func (o SynapseSparkResponsePropertiesOutput) AutoPauseProperties() AutoPausePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *AutoPausePropertiesResponse { return v.AutoPauseProperties }).(AutoPausePropertiesResponsePtrOutput)
}

// Auto scale properties.
func (o SynapseSparkResponsePropertiesOutput) AutoScaleProperties() AutoScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *AutoScalePropertiesResponse { return v.AutoScaleProperties }).(AutoScalePropertiesResponsePtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkResponsePropertiesOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *int { return v.NodeCount }).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkResponsePropertiesOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.NodeSize }).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkResponsePropertiesOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.NodeSizeFamily }).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkResponsePropertiesOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.PoolName }).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkResponsePropertiesOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.ResourceGroup }).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkResponsePropertiesOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.SparkVersion }).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkResponsePropertiesOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.SubscriptionId }).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkResponsePropertiesOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SynapseSparkResponseProperties) *string { return v.WorkspaceName }).(pulumi.StringPtrOutput)
}

type SynapseSparkResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (SynapseSparkResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SynapseSparkResponseProperties)(nil)).Elem()
}

func (o SynapseSparkResponsePropertiesPtrOutput) ToSynapseSparkResponsePropertiesPtrOutput() SynapseSparkResponsePropertiesPtrOutput {
	return o
}

func (o SynapseSparkResponsePropertiesPtrOutput) ToSynapseSparkResponsePropertiesPtrOutputWithContext(ctx context.Context) SynapseSparkResponsePropertiesPtrOutput {
	return o
}

func (o SynapseSparkResponsePropertiesPtrOutput) Elem() SynapseSparkResponsePropertiesOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) SynapseSparkResponseProperties {
		if v != nil {
			return *v
		}
		var ret SynapseSparkResponseProperties
		return ret
	}).(SynapseSparkResponsePropertiesOutput)
}

// Auto pause properties.
func (o SynapseSparkResponsePropertiesPtrOutput) AutoPauseProperties() AutoPausePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *AutoPausePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AutoPauseProperties
	}).(AutoPausePropertiesResponsePtrOutput)
}

// Auto scale properties.
func (o SynapseSparkResponsePropertiesPtrOutput) AutoScaleProperties() AutoScalePropertiesResponsePtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *AutoScalePropertiesResponse {
		if v == nil {
			return nil
		}
		return v.AutoScaleProperties
	}).(AutoScalePropertiesResponsePtrOutput)
}

// The number of compute nodes currently assigned to the compute.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.NodeCount
	}).(pulumi.IntPtrOutput)
}

// Node size.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSize
	}).(pulumi.StringPtrOutput)
}

// Node size family.
func (o SynapseSparkResponsePropertiesPtrOutput) NodeSizeFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.NodeSizeFamily
	}).(pulumi.StringPtrOutput)
}

// Pool name.
func (o SynapseSparkResponsePropertiesPtrOutput) PoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.PoolName
	}).(pulumi.StringPtrOutput)
}

// Name of the resource group in which workspace is located.
func (o SynapseSparkResponsePropertiesPtrOutput) ResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.ResourceGroup
	}).(pulumi.StringPtrOutput)
}

// Spark version.
func (o SynapseSparkResponsePropertiesPtrOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SparkVersion
	}).(pulumi.StringPtrOutput)
}

// Azure subscription identifier.
func (o SynapseSparkResponsePropertiesPtrOutput) SubscriptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.SubscriptionId
	}).(pulumi.StringPtrOutput)
}

// Name of Azure Machine Learning workspace.
func (o SynapseSparkResponsePropertiesPtrOutput) WorkspaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SynapseSparkResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.WorkspaceName
	}).(pulumi.StringPtrOutput)
}

type SystemCreatedAcrAccount struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
}

// SystemCreatedAcrAccountInput is an input type that accepts SystemCreatedAcrAccountArgs and SystemCreatedAcrAccountOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountInput` via:
//
//	SystemCreatedAcrAccountArgs{...}
type SystemCreatedAcrAccountInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput
	ToSystemCreatedAcrAccountOutputWithContext(context.Context) SystemCreatedAcrAccountOutput
}

type SystemCreatedAcrAccountArgs struct {
	// Name of the ACR account
	AcrAccountName pulumi.StringPtrInput `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku pulumi.StringPtrInput `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
}

func (SystemCreatedAcrAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return i.ToSystemCreatedAcrAccountOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput)
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedAcrAccountArgs) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountOutput).ToSystemCreatedAcrAccountPtrOutputWithContext(ctx)
}

// SystemCreatedAcrAccountPtrInput is an input type that accepts SystemCreatedAcrAccountArgs, SystemCreatedAcrAccountPtr and SystemCreatedAcrAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedAcrAccountPtrInput` via:
//
//	        SystemCreatedAcrAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedAcrAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput
	ToSystemCreatedAcrAccountPtrOutputWithContext(context.Context) SystemCreatedAcrAccountPtrOutput
}

type systemCreatedAcrAccountPtrType SystemCreatedAcrAccountArgs

func SystemCreatedAcrAccountPtr(v *SystemCreatedAcrAccountArgs) SystemCreatedAcrAccountPtrInput {
	return (*systemCreatedAcrAccountPtrType)(v)
}

func (*systemCreatedAcrAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return i.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedAcrAccountPtrType) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedAcrAccountPtrOutput)
}

type SystemCreatedAcrAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutput() SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountOutputWithContext(ctx context.Context) SystemCreatedAcrAccountOutput {
	return o
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o.ToSystemCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedAcrAccountOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedAcrAccount) *SystemCreatedAcrAccount {
		return &v
	}).(SystemCreatedAcrAccountPtrOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccount)(nil)).Elem()
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutput() SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) ToSystemCreatedAcrAccountPtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountPtrOutput {
	return o
}

func (o SystemCreatedAcrAccountPtrOutput) Elem() SystemCreatedAcrAccountOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) SystemCreatedAcrAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccount
		return ret
	}).(SystemCreatedAcrAccountOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountPtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

type SystemCreatedAcrAccountResponse struct {
	// Name of the ACR account
	AcrAccountName *string `pulumi:"acrAccountName"`
	// SKU of the ACR account
	AcrAccountSku *string `pulumi:"acrAccountSku"`
	// This is populated once the ACR account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
}

type SystemCreatedAcrAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutput() SystemCreatedAcrAccountResponseOutput {
	return o
}

func (o SystemCreatedAcrAccountResponseOutput) ToSystemCreatedAcrAccountResponseOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponseOutput {
	return o
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountName }).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponseOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *string { return v.AcrAccountSku }).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedAcrAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedAcrAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedAcrAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedAcrAccountResponse)(nil)).Elem()
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutput() SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) ToSystemCreatedAcrAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedAcrAccountResponsePtrOutput) Elem() SystemCreatedAcrAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) SystemCreatedAcrAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedAcrAccountResponse
		return ret
	}).(SystemCreatedAcrAccountResponseOutput)
}

// Name of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountName
	}).(pulumi.StringPtrOutput)
}

// SKU of the ACR account
func (o SystemCreatedAcrAccountResponsePtrOutput) AcrAccountSku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.AcrAccountSku
	}).(pulumi.StringPtrOutput)
}

// This is populated once the ACR account is created.
func (o SystemCreatedAcrAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedAcrAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

type SystemCreatedStorageAccount struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

// SystemCreatedStorageAccountInput is an input type that accepts SystemCreatedStorageAccountArgs and SystemCreatedStorageAccountOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountInput` via:
//
//	SystemCreatedStorageAccountArgs{...}
type SystemCreatedStorageAccountInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput
	ToSystemCreatedStorageAccountOutputWithContext(context.Context) SystemCreatedStorageAccountOutput
}

type SystemCreatedStorageAccountArgs struct {
	// Public blob access allowed
	AllowBlobPublicAccess pulumi.BoolPtrInput `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled pulumi.BoolPtrInput `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName pulumi.StringPtrInput `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType pulumi.StringPtrInput `pulumi:"storageAccountType"`
}

func (SystemCreatedStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return i.ToSystemCreatedStorageAccountOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput)
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i SystemCreatedStorageAccountArgs) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountOutput).ToSystemCreatedStorageAccountPtrOutputWithContext(ctx)
}

// SystemCreatedStorageAccountPtrInput is an input type that accepts SystemCreatedStorageAccountArgs, SystemCreatedStorageAccountPtr and SystemCreatedStorageAccountPtrOutput values.
// You can construct a concrete instance of `SystemCreatedStorageAccountPtrInput` via:
//
//	        SystemCreatedStorageAccountArgs{...}
//
//	or:
//
//	        nil
type SystemCreatedStorageAccountPtrInput interface {
	pulumi.Input

	ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput
	ToSystemCreatedStorageAccountPtrOutputWithContext(context.Context) SystemCreatedStorageAccountPtrOutput
}

type systemCreatedStorageAccountPtrType SystemCreatedStorageAccountArgs

func SystemCreatedStorageAccountPtr(v *SystemCreatedStorageAccountArgs) SystemCreatedStorageAccountPtrInput {
	return (*systemCreatedStorageAccountPtrType)(v)
}

func (*systemCreatedStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return i.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *systemCreatedStorageAccountPtrType) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemCreatedStorageAccountPtrOutput)
}

type SystemCreatedStorageAccountOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutput() SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountOutputWithContext(ctx context.Context) SystemCreatedStorageAccountOutput {
	return o
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o.ToSystemCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (o SystemCreatedStorageAccountOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SystemCreatedStorageAccount) *SystemCreatedStorageAccount {
		return &v
	}).(SystemCreatedStorageAccountPtrOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccount) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccount)(nil)).Elem()
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutput() SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) ToSystemCreatedStorageAccountPtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountPtrOutput {
	return o
}

func (o SystemCreatedStorageAccountPtrOutput) Elem() SystemCreatedStorageAccountOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) SystemCreatedStorageAccount {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccount
		return ret
	}).(SystemCreatedStorageAccountOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountPtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountPtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccount) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponse struct {
	// Public blob access allowed
	AllowBlobPublicAccess *bool `pulumi:"allowBlobPublicAccess"`
	// This is populated once the storage account is created.
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
	// HNS enabled for storage account
	StorageAccountHnsEnabled *bool `pulumi:"storageAccountHnsEnabled"`
	// Name of the storage account
	StorageAccountName *string `pulumi:"storageAccountName"`
	// Allowed values:
	// "Standard_LRS",
	// "Standard_GRS",
	// "Standard_RAGRS",
	// "Standard_ZRS",
	// "Standard_GZRS",
	// "Standard_RAGZRS",
	// "Premium_LRS",
	// "Premium_ZRS"
	StorageAccountType *string `pulumi:"storageAccountType"`
}

type SystemCreatedStorageAccountResponseOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutput() SystemCreatedStorageAccountResponseOutput {
	return o
}

func (o SystemCreatedStorageAccountResponseOutput) ToSystemCreatedStorageAccountResponseOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponseOutput {
	return o
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponseOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.AllowBlobPublicAccess }).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *bool { return v.StorageAccountHnsEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountName }).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponseOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemCreatedStorageAccountResponse) *string { return v.StorageAccountType }).(pulumi.StringPtrOutput)
}

type SystemCreatedStorageAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (SystemCreatedStorageAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemCreatedStorageAccountResponse)(nil)).Elem()
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutput() SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) ToSystemCreatedStorageAccountResponsePtrOutputWithContext(ctx context.Context) SystemCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o SystemCreatedStorageAccountResponsePtrOutput) Elem() SystemCreatedStorageAccountResponseOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) SystemCreatedStorageAccountResponse {
		if v != nil {
			return *v
		}
		var ret SystemCreatedStorageAccountResponse
		return ret
	}).(SystemCreatedStorageAccountResponseOutput)
}

// Public blob access allowed
func (o SystemCreatedStorageAccountResponsePtrOutput) AllowBlobPublicAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AllowBlobPublicAccess
	}).(pulumi.BoolPtrOutput)
}

// This is populated once the storage account is created.
func (o SystemCreatedStorageAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

// HNS enabled for storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountHnsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAccountHnsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Name of the storage account
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountName
	}).(pulumi.StringPtrOutput)
}

// Allowed values:
// "Standard_LRS",
// "Standard_GRS",
// "Standard_RAGRS",
// "Standard_ZRS",
// "Standard_GZRS",
// "Standard_RAGZRS",
// "Premium_LRS",
// "Premium_ZRS"
func (o SystemCreatedStorageAccountResponsePtrOutput) StorageAccountType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemCreatedStorageAccountResponse) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountType
	}).(pulumi.StringPtrOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// A system service running on a compute.
type SystemServiceResponse struct {
	// Public IP address
	PublicIpAddress string `pulumi:"publicIpAddress"`
	// The type of this system service.
	SystemServiceType string `pulumi:"systemServiceType"`
	// The version for this type.
	Version string `pulumi:"version"`
}

// A system service running on a compute.
type SystemServiceResponseOutput struct{ *pulumi.OutputState }

func (SystemServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemServiceResponse)(nil)).Elem()
}

func (o SystemServiceResponseOutput) ToSystemServiceResponseOutput() SystemServiceResponseOutput {
	return o
}

func (o SystemServiceResponseOutput) ToSystemServiceResponseOutputWithContext(ctx context.Context) SystemServiceResponseOutput {
	return o
}

// Public IP address
func (o SystemServiceResponseOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// The type of this system service.
func (o SystemServiceResponseOutput) SystemServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.SystemServiceType }).(pulumi.StringOutput)
}

// The version for this type.
func (o SystemServiceResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SystemServiceResponse) string { return v.Version }).(pulumi.StringOutput)
}

type SystemServiceResponseArrayOutput struct{ *pulumi.OutputState }

func (SystemServiceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemServiceResponse)(nil)).Elem()
}

func (o SystemServiceResponseArrayOutput) ToSystemServiceResponseArrayOutput() SystemServiceResponseArrayOutput {
	return o
}

func (o SystemServiceResponseArrayOutput) ToSystemServiceResponseArrayOutputWithContext(ctx context.Context) SystemServiceResponseArrayOutput {
	return o
}

func (o SystemServiceResponseArrayOutput) Index(i pulumi.IntInput) SystemServiceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemServiceResponse {
		return vs[0].([]SystemServiceResponse)[vs[1].(int)]
	}).(SystemServiceResponseOutput)
}

// Fixed training parameters that won't be swept over during AutoML Table training.
type TableFixedParameters struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster *string `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType *string `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy *string `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate *float64 `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin *int `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth *int `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves *int `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf *int `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain *float64 `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators *int `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves *int `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName *string `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha *float64 `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda *float64 `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample *float64 `pulumi:"subsample"`
	// Frequency of subsample.
	SubsampleFreq *float64 `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod *string `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean *bool `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd *bool `pulumi:"withStd"`
}

// Defaults sets the appropriate defaults for TableFixedParameters
func (val *TableFixedParameters) Defaults() *TableFixedParameters {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.WithMean == nil {
		withMean_ := false
		tmp.WithMean = &withMean_
	}
	if tmp.WithStd == nil {
		withStd_ := false
		tmp.WithStd = &withStd_
	}
	return &tmp
}

// TableFixedParametersInput is an input type that accepts TableFixedParametersArgs and TableFixedParametersOutput values.
// You can construct a concrete instance of `TableFixedParametersInput` via:
//
//	TableFixedParametersArgs{...}
type TableFixedParametersInput interface {
	pulumi.Input

	ToTableFixedParametersOutput() TableFixedParametersOutput
	ToTableFixedParametersOutputWithContext(context.Context) TableFixedParametersOutput
}

// Fixed training parameters that won't be swept over during AutoML Table training.
type TableFixedParametersArgs struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster pulumi.StringPtrInput `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType pulumi.StringPtrInput `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy pulumi.StringPtrInput `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin pulumi.IntPtrInput `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth pulumi.IntPtrInput `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves pulumi.IntPtrInput `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf pulumi.IntPtrInput `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain pulumi.Float64PtrInput `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators pulumi.IntPtrInput `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves pulumi.IntPtrInput `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName pulumi.StringPtrInput `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha pulumi.Float64PtrInput `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda pulumi.Float64PtrInput `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample pulumi.Float64PtrInput `pulumi:"subsample"`
	// Frequency of subsample.
	SubsampleFreq pulumi.Float64PtrInput `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod pulumi.StringPtrInput `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean pulumi.BoolPtrInput `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd pulumi.BoolPtrInput `pulumi:"withStd"`
}

// Defaults sets the appropriate defaults for TableFixedParametersArgs
func (val *TableFixedParametersArgs) Defaults() *TableFixedParametersArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.WithMean == nil {
		tmp.WithMean = pulumi.BoolPtr(false)
	}
	if tmp.WithStd == nil {
		tmp.WithStd = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (TableFixedParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFixedParameters)(nil)).Elem()
}

func (i TableFixedParametersArgs) ToTableFixedParametersOutput() TableFixedParametersOutput {
	return i.ToTableFixedParametersOutputWithContext(context.Background())
}

func (i TableFixedParametersArgs) ToTableFixedParametersOutputWithContext(ctx context.Context) TableFixedParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFixedParametersOutput)
}

func (i TableFixedParametersArgs) ToTableFixedParametersPtrOutput() TableFixedParametersPtrOutput {
	return i.ToTableFixedParametersPtrOutputWithContext(context.Background())
}

func (i TableFixedParametersArgs) ToTableFixedParametersPtrOutputWithContext(ctx context.Context) TableFixedParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFixedParametersOutput).ToTableFixedParametersPtrOutputWithContext(ctx)
}

// TableFixedParametersPtrInput is an input type that accepts TableFixedParametersArgs, TableFixedParametersPtr and TableFixedParametersPtrOutput values.
// You can construct a concrete instance of `TableFixedParametersPtrInput` via:
//
//	        TableFixedParametersArgs{...}
//
//	or:
//
//	        nil
type TableFixedParametersPtrInput interface {
	pulumi.Input

	ToTableFixedParametersPtrOutput() TableFixedParametersPtrOutput
	ToTableFixedParametersPtrOutputWithContext(context.Context) TableFixedParametersPtrOutput
}

type tableFixedParametersPtrType TableFixedParametersArgs

func TableFixedParametersPtr(v *TableFixedParametersArgs) TableFixedParametersPtrInput {
	return (*tableFixedParametersPtrType)(v)
}

func (*tableFixedParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFixedParameters)(nil)).Elem()
}

func (i *tableFixedParametersPtrType) ToTableFixedParametersPtrOutput() TableFixedParametersPtrOutput {
	return i.ToTableFixedParametersPtrOutputWithContext(context.Background())
}

func (i *tableFixedParametersPtrType) ToTableFixedParametersPtrOutputWithContext(ctx context.Context) TableFixedParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFixedParametersPtrOutput)
}

// Fixed training parameters that won't be swept over during AutoML Table training.
type TableFixedParametersOutput struct{ *pulumi.OutputState }

func (TableFixedParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFixedParameters)(nil)).Elem()
}

func (o TableFixedParametersOutput) ToTableFixedParametersOutput() TableFixedParametersOutput {
	return o
}

func (o TableFixedParametersOutput) ToTableFixedParametersOutputWithContext(ctx context.Context) TableFixedParametersOutput {
	return o
}

func (o TableFixedParametersOutput) ToTableFixedParametersPtrOutput() TableFixedParametersPtrOutput {
	return o.ToTableFixedParametersPtrOutputWithContext(context.Background())
}

func (o TableFixedParametersOutput) ToTableFixedParametersPtrOutputWithContext(ctx context.Context) TableFixedParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFixedParameters) *TableFixedParameters {
		return &v
	}).(TableFixedParametersPtrOutput)
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableFixedParametersOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.Booster }).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableFixedParametersOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.BoostingType }).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableFixedParametersOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.GrowPolicy }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableFixedParametersOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableFixedParametersOutput) MaxBin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.MaxBin }).(pulumi.IntPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableFixedParametersOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.MaxDepth }).(pulumi.IntPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableFixedParametersOutput) MaxLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.MaxLeaves }).(pulumi.IntPtrOutput)
}

// The minimum number of data per leaf.
func (o TableFixedParametersOutput) MinDataInLeaf() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.MinDataInLeaf }).(pulumi.IntPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableFixedParametersOutput) MinSplitGain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.MinSplitGain }).(pulumi.Float64PtrOutput)
}

// The name of the model to train.
func (o TableFixedParametersOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableFixedParametersOutput) NEstimators() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.NEstimators }).(pulumi.IntPtrOutput)
}

// Specify the number of leaves.
func (o TableFixedParametersOutput) NumLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *int { return v.NumLeaves }).(pulumi.IntPtrOutput)
}

// The name of the preprocessor to use.
func (o TableFixedParametersOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.PreprocessorName }).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableFixedParametersOutput) RegAlpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.RegAlpha }).(pulumi.Float64PtrOutput)
}

// L2 regularization term on weights.
func (o TableFixedParametersOutput) RegLambda() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.RegLambda }).(pulumi.Float64PtrOutput)
}

// Subsample ratio of the training instance.
func (o TableFixedParametersOutput) Subsample() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.Subsample }).(pulumi.Float64PtrOutput)
}

// Frequency of subsample.
func (o TableFixedParametersOutput) SubsampleFreq() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *float64 { return v.SubsampleFreq }).(pulumi.Float64PtrOutput)
}

// Specify the tree method.
func (o TableFixedParametersOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *string { return v.TreeMethod }).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableFixedParametersOutput) WithMean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *bool { return v.WithMean }).(pulumi.BoolPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableFixedParametersOutput) WithStd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableFixedParameters) *bool { return v.WithStd }).(pulumi.BoolPtrOutput)
}

type TableFixedParametersPtrOutput struct{ *pulumi.OutputState }

func (TableFixedParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFixedParameters)(nil)).Elem()
}

func (o TableFixedParametersPtrOutput) ToTableFixedParametersPtrOutput() TableFixedParametersPtrOutput {
	return o
}

func (o TableFixedParametersPtrOutput) ToTableFixedParametersPtrOutputWithContext(ctx context.Context) TableFixedParametersPtrOutput {
	return o
}

func (o TableFixedParametersPtrOutput) Elem() TableFixedParametersOutput {
	return o.ApplyT(func(v *TableFixedParameters) TableFixedParameters {
		if v != nil {
			return *v
		}
		var ret TableFixedParameters
		return ret
	}).(TableFixedParametersOutput)
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableFixedParametersPtrOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.Booster
	}).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableFixedParametersPtrOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.BoostingType
	}).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableFixedParametersPtrOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.GrowPolicy
	}).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableFixedParametersPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableFixedParametersPtrOutput) MaxBin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxBin
	}).(pulumi.IntPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableFixedParametersPtrOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxDepth
	}).(pulumi.IntPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableFixedParametersPtrOutput) MaxLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.MaxLeaves
	}).(pulumi.IntPtrOutput)
}

// The minimum number of data per leaf.
func (o TableFixedParametersPtrOutput) MinDataInLeaf() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.MinDataInLeaf
	}).(pulumi.IntPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableFixedParametersPtrOutput) MinSplitGain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.MinSplitGain
	}).(pulumi.Float64PtrOutput)
}

// The name of the model to train.
func (o TableFixedParametersPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableFixedParametersPtrOutput) NEstimators() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.NEstimators
	}).(pulumi.IntPtrOutput)
}

// Specify the number of leaves.
func (o TableFixedParametersPtrOutput) NumLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *int {
		if v == nil {
			return nil
		}
		return v.NumLeaves
	}).(pulumi.IntPtrOutput)
}

// The name of the preprocessor to use.
func (o TableFixedParametersPtrOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.PreprocessorName
	}).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableFixedParametersPtrOutput) RegAlpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.RegAlpha
	}).(pulumi.Float64PtrOutput)
}

// L2 regularization term on weights.
func (o TableFixedParametersPtrOutput) RegLambda() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.RegLambda
	}).(pulumi.Float64PtrOutput)
}

// Subsample ratio of the training instance.
func (o TableFixedParametersPtrOutput) Subsample() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.Subsample
	}).(pulumi.Float64PtrOutput)
}

// Frequency of subsample.
func (o TableFixedParametersPtrOutput) SubsampleFreq() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *float64 {
		if v == nil {
			return nil
		}
		return v.SubsampleFreq
	}).(pulumi.Float64PtrOutput)
}

// Specify the tree method.
func (o TableFixedParametersPtrOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *string {
		if v == nil {
			return nil
		}
		return v.TreeMethod
	}).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableFixedParametersPtrOutput) WithMean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *bool {
		if v == nil {
			return nil
		}
		return v.WithMean
	}).(pulumi.BoolPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableFixedParametersPtrOutput) WithStd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableFixedParameters) *bool {
		if v == nil {
			return nil
		}
		return v.WithStd
	}).(pulumi.BoolPtrOutput)
}

// Fixed training parameters that won't be swept over during AutoML Table training.
type TableFixedParametersResponse struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster *string `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType *string `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy *string `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate *float64 `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin *int `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth *int `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves *int `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf *int `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain *float64 `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators *int `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves *int `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName *string `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha *float64 `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda *float64 `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample *float64 `pulumi:"subsample"`
	// Frequency of subsample.
	SubsampleFreq *float64 `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod *string `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean *bool `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd *bool `pulumi:"withStd"`
}

// Defaults sets the appropriate defaults for TableFixedParametersResponse
func (val *TableFixedParametersResponse) Defaults() *TableFixedParametersResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.WithMean == nil {
		withMean_ := false
		tmp.WithMean = &withMean_
	}
	if tmp.WithStd == nil {
		withStd_ := false
		tmp.WithStd = &withStd_
	}
	return &tmp
}

// Fixed training parameters that won't be swept over during AutoML Table training.
type TableFixedParametersResponseOutput struct{ *pulumi.OutputState }

func (TableFixedParametersResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFixedParametersResponse)(nil)).Elem()
}

func (o TableFixedParametersResponseOutput) ToTableFixedParametersResponseOutput() TableFixedParametersResponseOutput {
	return o
}

func (o TableFixedParametersResponseOutput) ToTableFixedParametersResponseOutputWithContext(ctx context.Context) TableFixedParametersResponseOutput {
	return o
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableFixedParametersResponseOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.Booster }).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableFixedParametersResponseOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.BoostingType }).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableFixedParametersResponseOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.GrowPolicy }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableFixedParametersResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableFixedParametersResponseOutput) MaxBin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.MaxBin }).(pulumi.IntPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableFixedParametersResponseOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.MaxDepth }).(pulumi.IntPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableFixedParametersResponseOutput) MaxLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.MaxLeaves }).(pulumi.IntPtrOutput)
}

// The minimum number of data per leaf.
func (o TableFixedParametersResponseOutput) MinDataInLeaf() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.MinDataInLeaf }).(pulumi.IntPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableFixedParametersResponseOutput) MinSplitGain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.MinSplitGain }).(pulumi.Float64PtrOutput)
}

// The name of the model to train.
func (o TableFixedParametersResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableFixedParametersResponseOutput) NEstimators() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.NEstimators }).(pulumi.IntPtrOutput)
}

// Specify the number of leaves.
func (o TableFixedParametersResponseOutput) NumLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *int { return v.NumLeaves }).(pulumi.IntPtrOutput)
}

// The name of the preprocessor to use.
func (o TableFixedParametersResponseOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.PreprocessorName }).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableFixedParametersResponseOutput) RegAlpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.RegAlpha }).(pulumi.Float64PtrOutput)
}

// L2 regularization term on weights.
func (o TableFixedParametersResponseOutput) RegLambda() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.RegLambda }).(pulumi.Float64PtrOutput)
}

// Subsample ratio of the training instance.
func (o TableFixedParametersResponseOutput) Subsample() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.Subsample }).(pulumi.Float64PtrOutput)
}

// Frequency of subsample.
func (o TableFixedParametersResponseOutput) SubsampleFreq() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *float64 { return v.SubsampleFreq }).(pulumi.Float64PtrOutput)
}

// Specify the tree method.
func (o TableFixedParametersResponseOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *string { return v.TreeMethod }).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableFixedParametersResponseOutput) WithMean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *bool { return v.WithMean }).(pulumi.BoolPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableFixedParametersResponseOutput) WithStd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableFixedParametersResponse) *bool { return v.WithStd }).(pulumi.BoolPtrOutput)
}

type TableFixedParametersResponsePtrOutput struct{ *pulumi.OutputState }

func (TableFixedParametersResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFixedParametersResponse)(nil)).Elem()
}

func (o TableFixedParametersResponsePtrOutput) ToTableFixedParametersResponsePtrOutput() TableFixedParametersResponsePtrOutput {
	return o
}

func (o TableFixedParametersResponsePtrOutput) ToTableFixedParametersResponsePtrOutputWithContext(ctx context.Context) TableFixedParametersResponsePtrOutput {
	return o
}

func (o TableFixedParametersResponsePtrOutput) Elem() TableFixedParametersResponseOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) TableFixedParametersResponse {
		if v != nil {
			return *v
		}
		var ret TableFixedParametersResponse
		return ret
	}).(TableFixedParametersResponseOutput)
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableFixedParametersResponsePtrOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.Booster
	}).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableFixedParametersResponsePtrOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.BoostingType
	}).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableFixedParametersResponsePtrOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.GrowPolicy
	}).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableFixedParametersResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableFixedParametersResponsePtrOutput) MaxBin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxBin
	}).(pulumi.IntPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableFixedParametersResponsePtrOutput) MaxDepth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxDepth
	}).(pulumi.IntPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableFixedParametersResponsePtrOutput) MaxLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxLeaves
	}).(pulumi.IntPtrOutput)
}

// The minimum number of data per leaf.
func (o TableFixedParametersResponsePtrOutput) MinDataInLeaf() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinDataInLeaf
	}).(pulumi.IntPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableFixedParametersResponsePtrOutput) MinSplitGain() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.MinSplitGain
	}).(pulumi.Float64PtrOutput)
}

// The name of the model to train.
func (o TableFixedParametersResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableFixedParametersResponsePtrOutput) NEstimators() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.NEstimators
	}).(pulumi.IntPtrOutput)
}

// Specify the number of leaves.
func (o TableFixedParametersResponsePtrOutput) NumLeaves() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumLeaves
	}).(pulumi.IntPtrOutput)
}

// The name of the preprocessor to use.
func (o TableFixedParametersResponsePtrOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.PreprocessorName
	}).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableFixedParametersResponsePtrOutput) RegAlpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RegAlpha
	}).(pulumi.Float64PtrOutput)
}

// L2 regularization term on weights.
func (o TableFixedParametersResponsePtrOutput) RegLambda() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.RegLambda
	}).(pulumi.Float64PtrOutput)
}

// Subsample ratio of the training instance.
func (o TableFixedParametersResponsePtrOutput) Subsample() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Subsample
	}).(pulumi.Float64PtrOutput)
}

// Frequency of subsample.
func (o TableFixedParametersResponsePtrOutput) SubsampleFreq() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SubsampleFreq
	}).(pulumi.Float64PtrOutput)
}

// Specify the tree method.
func (o TableFixedParametersResponsePtrOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *string {
		if v == nil {
			return nil
		}
		return v.TreeMethod
	}).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableFixedParametersResponsePtrOutput) WithMean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WithMean
	}).(pulumi.BoolPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableFixedParametersResponsePtrOutput) WithStd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableFixedParametersResponse) *bool {
		if v == nil {
			return nil
		}
		return v.WithStd
	}).(pulumi.BoolPtrOutput)
}

type TableParameterSubspace struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster *string `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType *string `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy *string `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate *string `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin *string `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth *string `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves *string `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf *string `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain *string `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators *string `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves *string `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName *string `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha *string `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda *string `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample *string `pulumi:"subsample"`
	// Frequency of subsample
	SubsampleFreq *string `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod *string `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean *string `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd *string `pulumi:"withStd"`
}

// TableParameterSubspaceInput is an input type that accepts TableParameterSubspaceArgs and TableParameterSubspaceOutput values.
// You can construct a concrete instance of `TableParameterSubspaceInput` via:
//
//	TableParameterSubspaceArgs{...}
type TableParameterSubspaceInput interface {
	pulumi.Input

	ToTableParameterSubspaceOutput() TableParameterSubspaceOutput
	ToTableParameterSubspaceOutputWithContext(context.Context) TableParameterSubspaceOutput
}

type TableParameterSubspaceArgs struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster pulumi.StringPtrInput `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType pulumi.StringPtrInput `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy pulumi.StringPtrInput `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin pulumi.StringPtrInput `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth pulumi.StringPtrInput `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves pulumi.StringPtrInput `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf pulumi.StringPtrInput `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain pulumi.StringPtrInput `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators pulumi.StringPtrInput `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves pulumi.StringPtrInput `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName pulumi.StringPtrInput `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha pulumi.StringPtrInput `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda pulumi.StringPtrInput `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample pulumi.StringPtrInput `pulumi:"subsample"`
	// Frequency of subsample
	SubsampleFreq pulumi.StringPtrInput `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod pulumi.StringPtrInput `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean pulumi.StringPtrInput `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd pulumi.StringPtrInput `pulumi:"withStd"`
}

func (TableParameterSubspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableParameterSubspace)(nil)).Elem()
}

func (i TableParameterSubspaceArgs) ToTableParameterSubspaceOutput() TableParameterSubspaceOutput {
	return i.ToTableParameterSubspaceOutputWithContext(context.Background())
}

func (i TableParameterSubspaceArgs) ToTableParameterSubspaceOutputWithContext(ctx context.Context) TableParameterSubspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableParameterSubspaceOutput)
}

// TableParameterSubspaceArrayInput is an input type that accepts TableParameterSubspaceArray and TableParameterSubspaceArrayOutput values.
// You can construct a concrete instance of `TableParameterSubspaceArrayInput` via:
//
//	TableParameterSubspaceArray{ TableParameterSubspaceArgs{...} }
type TableParameterSubspaceArrayInput interface {
	pulumi.Input

	ToTableParameterSubspaceArrayOutput() TableParameterSubspaceArrayOutput
	ToTableParameterSubspaceArrayOutputWithContext(context.Context) TableParameterSubspaceArrayOutput
}

type TableParameterSubspaceArray []TableParameterSubspaceInput

func (TableParameterSubspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableParameterSubspace)(nil)).Elem()
}

func (i TableParameterSubspaceArray) ToTableParameterSubspaceArrayOutput() TableParameterSubspaceArrayOutput {
	return i.ToTableParameterSubspaceArrayOutputWithContext(context.Background())
}

func (i TableParameterSubspaceArray) ToTableParameterSubspaceArrayOutputWithContext(ctx context.Context) TableParameterSubspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableParameterSubspaceArrayOutput)
}

type TableParameterSubspaceOutput struct{ *pulumi.OutputState }

func (TableParameterSubspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableParameterSubspace)(nil)).Elem()
}

func (o TableParameterSubspaceOutput) ToTableParameterSubspaceOutput() TableParameterSubspaceOutput {
	return o
}

func (o TableParameterSubspaceOutput) ToTableParameterSubspaceOutputWithContext(ctx context.Context) TableParameterSubspaceOutput {
	return o
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableParameterSubspaceOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.Booster }).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableParameterSubspaceOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.BoostingType }).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableParameterSubspaceOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.GrowPolicy }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableParameterSubspaceOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableParameterSubspaceOutput) MaxBin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.MaxBin }).(pulumi.StringPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableParameterSubspaceOutput) MaxDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.MaxDepth }).(pulumi.StringPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableParameterSubspaceOutput) MaxLeaves() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.MaxLeaves }).(pulumi.StringPtrOutput)
}

// The minimum number of data per leaf.
func (o TableParameterSubspaceOutput) MinDataInLeaf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.MinDataInLeaf }).(pulumi.StringPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableParameterSubspaceOutput) MinSplitGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.MinSplitGain }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o TableParameterSubspaceOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableParameterSubspaceOutput) NEstimators() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.NEstimators }).(pulumi.StringPtrOutput)
}

// Specify the number of leaves.
func (o TableParameterSubspaceOutput) NumLeaves() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.NumLeaves }).(pulumi.StringPtrOutput)
}

// The name of the preprocessor to use.
func (o TableParameterSubspaceOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.PreprocessorName }).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableParameterSubspaceOutput) RegAlpha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.RegAlpha }).(pulumi.StringPtrOutput)
}

// L2 regularization term on weights.
func (o TableParameterSubspaceOutput) RegLambda() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.RegLambda }).(pulumi.StringPtrOutput)
}

// Subsample ratio of the training instance.
func (o TableParameterSubspaceOutput) Subsample() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.Subsample }).(pulumi.StringPtrOutput)
}

// Frequency of subsample
func (o TableParameterSubspaceOutput) SubsampleFreq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.SubsampleFreq }).(pulumi.StringPtrOutput)
}

// Specify the tree method.
func (o TableParameterSubspaceOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.TreeMethod }).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableParameterSubspaceOutput) WithMean() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.WithMean }).(pulumi.StringPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableParameterSubspaceOutput) WithStd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspace) *string { return v.WithStd }).(pulumi.StringPtrOutput)
}

type TableParameterSubspaceArrayOutput struct{ *pulumi.OutputState }

func (TableParameterSubspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableParameterSubspace)(nil)).Elem()
}

func (o TableParameterSubspaceArrayOutput) ToTableParameterSubspaceArrayOutput() TableParameterSubspaceArrayOutput {
	return o
}

func (o TableParameterSubspaceArrayOutput) ToTableParameterSubspaceArrayOutputWithContext(ctx context.Context) TableParameterSubspaceArrayOutput {
	return o
}

func (o TableParameterSubspaceArrayOutput) Index(i pulumi.IntInput) TableParameterSubspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableParameterSubspace {
		return vs[0].([]TableParameterSubspace)[vs[1].(int)]
	}).(TableParameterSubspaceOutput)
}

type TableParameterSubspaceResponse struct {
	// Specify the boosting type, e.g gbdt for XGBoost.
	Booster *string `pulumi:"booster"`
	// Specify the boosting type, e.g gbdt for LightGBM.
	BoostingType *string `pulumi:"boostingType"`
	// Specify the grow policy, which controls the way new nodes are added to the tree.
	GrowPolicy *string `pulumi:"growPolicy"`
	// The learning rate for the training procedure.
	LearningRate *string `pulumi:"learningRate"`
	// Specify the Maximum number of discrete bins to bucket continuous features .
	MaxBin *string `pulumi:"maxBin"`
	// Specify the max depth to limit the tree depth explicitly.
	MaxDepth *string `pulumi:"maxDepth"`
	// Specify the max leaves to limit the tree leaves explicitly.
	MaxLeaves *string `pulumi:"maxLeaves"`
	// The minimum number of data per leaf.
	MinDataInLeaf *string `pulumi:"minDataInLeaf"`
	// Minimum loss reduction required to make a further partition on a leaf node of the tree.
	MinSplitGain *string `pulumi:"minSplitGain"`
	// The name of the model to train.
	ModelName *string `pulumi:"modelName"`
	// Specify the number of trees (or rounds) in an model.
	NEstimators *string `pulumi:"nEstimators"`
	// Specify the number of leaves.
	NumLeaves *string `pulumi:"numLeaves"`
	// The name of the preprocessor to use.
	PreprocessorName *string `pulumi:"preprocessorName"`
	// L1 regularization term on weights.
	RegAlpha *string `pulumi:"regAlpha"`
	// L2 regularization term on weights.
	RegLambda *string `pulumi:"regLambda"`
	// Subsample ratio of the training instance.
	Subsample *string `pulumi:"subsample"`
	// Frequency of subsample
	SubsampleFreq *string `pulumi:"subsampleFreq"`
	// Specify the tree method.
	TreeMethod *string `pulumi:"treeMethod"`
	// If true, center before scaling the data with StandardScalar.
	WithMean *string `pulumi:"withMean"`
	// If true, scaling the data with Unit Variance with StandardScalar.
	WithStd *string `pulumi:"withStd"`
}

type TableParameterSubspaceResponseOutput struct{ *pulumi.OutputState }

func (TableParameterSubspaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableParameterSubspaceResponse)(nil)).Elem()
}

func (o TableParameterSubspaceResponseOutput) ToTableParameterSubspaceResponseOutput() TableParameterSubspaceResponseOutput {
	return o
}

func (o TableParameterSubspaceResponseOutput) ToTableParameterSubspaceResponseOutputWithContext(ctx context.Context) TableParameterSubspaceResponseOutput {
	return o
}

// Specify the boosting type, e.g gbdt for XGBoost.
func (o TableParameterSubspaceResponseOutput) Booster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.Booster }).(pulumi.StringPtrOutput)
}

// Specify the boosting type, e.g gbdt for LightGBM.
func (o TableParameterSubspaceResponseOutput) BoostingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.BoostingType }).(pulumi.StringPtrOutput)
}

// Specify the grow policy, which controls the way new nodes are added to the tree.
func (o TableParameterSubspaceResponseOutput) GrowPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.GrowPolicy }).(pulumi.StringPtrOutput)
}

// The learning rate for the training procedure.
func (o TableParameterSubspaceResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Specify the Maximum number of discrete bins to bucket continuous features .
func (o TableParameterSubspaceResponseOutput) MaxBin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.MaxBin }).(pulumi.StringPtrOutput)
}

// Specify the max depth to limit the tree depth explicitly.
func (o TableParameterSubspaceResponseOutput) MaxDepth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.MaxDepth }).(pulumi.StringPtrOutput)
}

// Specify the max leaves to limit the tree leaves explicitly.
func (o TableParameterSubspaceResponseOutput) MaxLeaves() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.MaxLeaves }).(pulumi.StringPtrOutput)
}

// The minimum number of data per leaf.
func (o TableParameterSubspaceResponseOutput) MinDataInLeaf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.MinDataInLeaf }).(pulumi.StringPtrOutput)
}

// Minimum loss reduction required to make a further partition on a leaf node of the tree.
func (o TableParameterSubspaceResponseOutput) MinSplitGain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.MinSplitGain }).(pulumi.StringPtrOutput)
}

// The name of the model to train.
func (o TableParameterSubspaceResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Specify the number of trees (or rounds) in an model.
func (o TableParameterSubspaceResponseOutput) NEstimators() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.NEstimators }).(pulumi.StringPtrOutput)
}

// Specify the number of leaves.
func (o TableParameterSubspaceResponseOutput) NumLeaves() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.NumLeaves }).(pulumi.StringPtrOutput)
}

// The name of the preprocessor to use.
func (o TableParameterSubspaceResponseOutput) PreprocessorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.PreprocessorName }).(pulumi.StringPtrOutput)
}

// L1 regularization term on weights.
func (o TableParameterSubspaceResponseOutput) RegAlpha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.RegAlpha }).(pulumi.StringPtrOutput)
}

// L2 regularization term on weights.
func (o TableParameterSubspaceResponseOutput) RegLambda() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.RegLambda }).(pulumi.StringPtrOutput)
}

// Subsample ratio of the training instance.
func (o TableParameterSubspaceResponseOutput) Subsample() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.Subsample }).(pulumi.StringPtrOutput)
}

// Frequency of subsample
func (o TableParameterSubspaceResponseOutput) SubsampleFreq() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.SubsampleFreq }).(pulumi.StringPtrOutput)
}

// Specify the tree method.
func (o TableParameterSubspaceResponseOutput) TreeMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.TreeMethod }).(pulumi.StringPtrOutput)
}

// If true, center before scaling the data with StandardScalar.
func (o TableParameterSubspaceResponseOutput) WithMean() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.WithMean }).(pulumi.StringPtrOutput)
}

// If true, scaling the data with Unit Variance with StandardScalar.
func (o TableParameterSubspaceResponseOutput) WithStd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableParameterSubspaceResponse) *string { return v.WithStd }).(pulumi.StringPtrOutput)
}

type TableParameterSubspaceResponseArrayOutput struct{ *pulumi.OutputState }

func (TableParameterSubspaceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableParameterSubspaceResponse)(nil)).Elem()
}

func (o TableParameterSubspaceResponseArrayOutput) ToTableParameterSubspaceResponseArrayOutput() TableParameterSubspaceResponseArrayOutput {
	return o
}

func (o TableParameterSubspaceResponseArrayOutput) ToTableParameterSubspaceResponseArrayOutputWithContext(ctx context.Context) TableParameterSubspaceResponseArrayOutput {
	return o
}

func (o TableParameterSubspaceResponseArrayOutput) Index(i pulumi.IntInput) TableParameterSubspaceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableParameterSubspaceResponse {
		return vs[0].([]TableParameterSubspaceResponse)[vs[1].(int)]
	}).(TableParameterSubspaceResponseOutput)
}

type TableSweepSettings struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// TableSweepSettingsInput is an input type that accepts TableSweepSettingsArgs and TableSweepSettingsOutput values.
// You can construct a concrete instance of `TableSweepSettingsInput` via:
//
//	TableSweepSettingsArgs{...}
type TableSweepSettingsInput interface {
	pulumi.Input

	ToTableSweepSettingsOutput() TableSweepSettingsOutput
	ToTableSweepSettingsOutputWithContext(context.Context) TableSweepSettingsOutput
}

type TableSweepSettingsArgs struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm pulumi.StringInput `pulumi:"samplingAlgorithm"`
}

func (TableSweepSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSweepSettings)(nil)).Elem()
}

func (i TableSweepSettingsArgs) ToTableSweepSettingsOutput() TableSweepSettingsOutput {
	return i.ToTableSweepSettingsOutputWithContext(context.Background())
}

func (i TableSweepSettingsArgs) ToTableSweepSettingsOutputWithContext(ctx context.Context) TableSweepSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSweepSettingsOutput)
}

func (i TableSweepSettingsArgs) ToTableSweepSettingsPtrOutput() TableSweepSettingsPtrOutput {
	return i.ToTableSweepSettingsPtrOutputWithContext(context.Background())
}

func (i TableSweepSettingsArgs) ToTableSweepSettingsPtrOutputWithContext(ctx context.Context) TableSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSweepSettingsOutput).ToTableSweepSettingsPtrOutputWithContext(ctx)
}

// TableSweepSettingsPtrInput is an input type that accepts TableSweepSettingsArgs, TableSweepSettingsPtr and TableSweepSettingsPtrOutput values.
// You can construct a concrete instance of `TableSweepSettingsPtrInput` via:
//
//	        TableSweepSettingsArgs{...}
//
//	or:
//
//	        nil
type TableSweepSettingsPtrInput interface {
	pulumi.Input

	ToTableSweepSettingsPtrOutput() TableSweepSettingsPtrOutput
	ToTableSweepSettingsPtrOutputWithContext(context.Context) TableSweepSettingsPtrOutput
}

type tableSweepSettingsPtrType TableSweepSettingsArgs

func TableSweepSettingsPtr(v *TableSweepSettingsArgs) TableSweepSettingsPtrInput {
	return (*tableSweepSettingsPtrType)(v)
}

func (*tableSweepSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSweepSettings)(nil)).Elem()
}

func (i *tableSweepSettingsPtrType) ToTableSweepSettingsPtrOutput() TableSweepSettingsPtrOutput {
	return i.ToTableSweepSettingsPtrOutputWithContext(context.Background())
}

func (i *tableSweepSettingsPtrType) ToTableSweepSettingsPtrOutputWithContext(ctx context.Context) TableSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSweepSettingsPtrOutput)
}

type TableSweepSettingsOutput struct{ *pulumi.OutputState }

func (TableSweepSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSweepSettings)(nil)).Elem()
}

func (o TableSweepSettingsOutput) ToTableSweepSettingsOutput() TableSweepSettingsOutput {
	return o
}

func (o TableSweepSettingsOutput) ToTableSweepSettingsOutputWithContext(ctx context.Context) TableSweepSettingsOutput {
	return o
}

func (o TableSweepSettingsOutput) ToTableSweepSettingsPtrOutput() TableSweepSettingsPtrOutput {
	return o.ToTableSweepSettingsPtrOutputWithContext(context.Background())
}

func (o TableSweepSettingsOutput) ToTableSweepSettingsPtrOutputWithContext(ctx context.Context) TableSweepSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSweepSettings) *TableSweepSettings {
		return &v
	}).(TableSweepSettingsPtrOutput)
}

// Type of early termination policy for the sweeping job.
func (o TableSweepSettingsOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v TableSweepSettings) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o TableSweepSettingsOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v TableSweepSettings) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type TableSweepSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableSweepSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSweepSettings)(nil)).Elem()
}

func (o TableSweepSettingsPtrOutput) ToTableSweepSettingsPtrOutput() TableSweepSettingsPtrOutput {
	return o
}

func (o TableSweepSettingsPtrOutput) ToTableSweepSettingsPtrOutputWithContext(ctx context.Context) TableSweepSettingsPtrOutput {
	return o
}

func (o TableSweepSettingsPtrOutput) Elem() TableSweepSettingsOutput {
	return o.ApplyT(func(v *TableSweepSettings) TableSweepSettings {
		if v != nil {
			return *v
		}
		var ret TableSweepSettings
		return ret
	}).(TableSweepSettingsOutput)
}

// Type of early termination policy for the sweeping job.
func (o TableSweepSettingsPtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableSweepSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o TableSweepSettingsPtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSweepSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

type TableSweepSettingsResponse struct {
	// Type of early termination policy for the sweeping job.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Type of sampling algorithm.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

type TableSweepSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableSweepSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSweepSettingsResponse)(nil)).Elem()
}

func (o TableSweepSettingsResponseOutput) ToTableSweepSettingsResponseOutput() TableSweepSettingsResponseOutput {
	return o
}

func (o TableSweepSettingsResponseOutput) ToTableSweepSettingsResponseOutputWithContext(ctx context.Context) TableSweepSettingsResponseOutput {
	return o
}

// Type of early termination policy for the sweeping job.
func (o TableSweepSettingsResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v TableSweepSettingsResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o TableSweepSettingsResponseOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v TableSweepSettingsResponse) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type TableSweepSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableSweepSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSweepSettingsResponse)(nil)).Elem()
}

func (o TableSweepSettingsResponsePtrOutput) ToTableSweepSettingsResponsePtrOutput() TableSweepSettingsResponsePtrOutput {
	return o
}

func (o TableSweepSettingsResponsePtrOutput) ToTableSweepSettingsResponsePtrOutputWithContext(ctx context.Context) TableSweepSettingsResponsePtrOutput {
	return o
}

func (o TableSweepSettingsResponsePtrOutput) Elem() TableSweepSettingsResponseOutput {
	return o.ApplyT(func(v *TableSweepSettingsResponse) TableSweepSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableSweepSettingsResponse
		return ret
	}).(TableSweepSettingsResponseOutput)
}

// Type of early termination policy for the sweeping job.
func (o TableSweepSettingsResponsePtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableSweepSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Type of sampling algorithm.
func (o TableSweepSettingsResponsePtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableSweepSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettings struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformer `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettings
func (val *TableVerticalFeaturizationSettings) Defaults() *TableVerticalFeaturizationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TableVerticalFeaturizationSettingsInput is an input type that accepts TableVerticalFeaturizationSettingsArgs and TableVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsInput` via:
//
//	TableVerticalFeaturizationSettingsArgs{...}
type TableVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput
	ToTableVerticalFeaturizationSettingsOutputWithContext(context.Context) TableVerticalFeaturizationSettingsOutput
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsArgs struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers pulumi.StringArrayInput `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes pulumi.StringMapInput `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization pulumi.BoolPtrInput `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams ColumnTransformerArrayMapInput `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsArgs
func (val *TableVerticalFeaturizationSettingsArgs) Defaults() *TableVerticalFeaturizationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		tmp.EnableDnnFeaturization = pulumi.BoolPtr(false)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (TableVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return i.ToTableVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput)
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput).ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// TableVerticalFeaturizationSettingsPtrInput is an input type that accepts TableVerticalFeaturizationSettingsArgs, TableVerticalFeaturizationSettingsPtr and TableVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsPtrInput` via:
//
//	        TableVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput
	ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) TableVerticalFeaturizationSettingsPtrOutput
}

type tableVerticalFeaturizationSettingsPtrType TableVerticalFeaturizationSettingsArgs

func TableVerticalFeaturizationSettingsPtr(v *TableVerticalFeaturizationSettingsArgs) TableVerticalFeaturizationSettingsPtrInput {
	return (*tableVerticalFeaturizationSettingsPtrType)(v)
}

func (*tableVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalFeaturizationSettings) *TableVerticalFeaturizationSettings {
		return &v
	}).(TableVerticalFeaturizationSettingsPtrOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string][]ColumnTransformer { return v.TransformerParams }).(ColumnTransformerArrayMapOutput)
}

type TableVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) Elem() TableVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) TableVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettings
		return ret
	}).(TableVerticalFeaturizationSettingsOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsPtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsPtrOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string][]ColumnTransformer {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerArrayMapOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponse struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformerResponse `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsResponse
func (val *TableVerticalFeaturizationSettingsResponse) Defaults() *TableVerticalFeaturizationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutput() TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponseOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponseOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

type TableVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutput() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Elem() TableVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) TableVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettingsResponse
		return ret
	}).(TableVerticalFeaturizationSettingsResponseOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

// Job execution constraints.
type TableVerticalLimitSettings struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Maximum nodes to use for the experiment.
	MaxNodes *int `pulumi:"maxNodes"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// Number of concurrent sweeping runs that user wants to trigger.
	SweepConcurrentTrials *int `pulumi:"sweepConcurrentTrials"`
	// Number of sweeping runs that user wants to trigger.
	SweepTrials *int `pulumi:"sweepTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettings
func (val *TableVerticalLimitSettings) Defaults() *TableVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxNodes == nil {
		maxNodes_ := 1
		tmp.MaxNodes = &maxNodes_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.SweepConcurrentTrials == nil {
		sweepConcurrentTrials_ := 0
		tmp.SweepConcurrentTrials = &sweepConcurrentTrials_
	}
	if tmp.SweepTrials == nil {
		sweepTrials_ := 0
		tmp.SweepTrials = &sweepTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// TableVerticalLimitSettingsInput is an input type that accepts TableVerticalLimitSettingsArgs and TableVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsInput` via:
//
//	TableVerticalLimitSettingsArgs{...}
type TableVerticalLimitSettingsInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput
	ToTableVerticalLimitSettingsOutputWithContext(context.Context) TableVerticalLimitSettingsOutput
}

// Job execution constraints.
type TableVerticalLimitSettingsArgs struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination pulumi.BoolPtrInput `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore pulumi.Float64PtrInput `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial pulumi.IntPtrInput `pulumi:"maxCoresPerTrial"`
	// Maximum nodes to use for the experiment.
	MaxNodes pulumi.IntPtrInput `pulumi:"maxNodes"`
	// Number of iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// Number of concurrent sweeping runs that user wants to trigger.
	SweepConcurrentTrials pulumi.IntPtrInput `pulumi:"sweepConcurrentTrials"`
	// Number of sweeping runs that user wants to trigger.
	SweepTrials pulumi.IntPtrInput `pulumi:"sweepTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsArgs
func (val *TableVerticalLimitSettingsArgs) Defaults() *TableVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		tmp.EnableEarlyTermination = pulumi.BoolPtr(true)
	}
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxCoresPerTrial == nil {
		tmp.MaxCoresPerTrial = pulumi.IntPtr(-1)
	}
	if tmp.MaxNodes == nil {
		tmp.MaxNodes = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1000)
	}
	if tmp.SweepConcurrentTrials == nil {
		tmp.SweepConcurrentTrials = pulumi.IntPtr(0)
	}
	if tmp.SweepTrials == nil {
		tmp.SweepTrials = pulumi.IntPtr(0)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT6H")
	}
	if tmp.TrialTimeout == nil {
		tmp.TrialTimeout = pulumi.StringPtr("PT30M")
	}
	return &tmp
}
func (TableVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return i.ToTableVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput)
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput).ToTableVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// TableVerticalLimitSettingsPtrInput is an input type that accepts TableVerticalLimitSettingsArgs, TableVerticalLimitSettingsPtr and TableVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsPtrInput` via:
//
//	        TableVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput
	ToTableVerticalLimitSettingsPtrOutputWithContext(context.Context) TableVerticalLimitSettingsPtrOutput
}

type tableVerticalLimitSettingsPtrType TableVerticalLimitSettingsArgs

func TableVerticalLimitSettingsPtr(v *TableVerticalLimitSettingsArgs) TableVerticalLimitSettingsPtrInput {
	return (*tableVerticalLimitSettingsPtrType)(v)
}

func (*tableVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalLimitSettings) *TableVerticalLimitSettings {
		return &v
	}).(TableVerticalLimitSettingsPtrOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o TableVerticalLimitSettingsOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// Number of concurrent sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsOutput) SweepConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.SweepConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsOutput) SweepTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.SweepTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) Elem() TableVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) TableVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettings
		return ret
	}).(TableVerticalLimitSettingsOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsPtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsPtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsPtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o TableVerticalLimitSettingsPtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// Number of concurrent sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsPtrOutput) SweepConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.SweepConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsPtrOutput) SweepTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.SweepTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsResponse struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Maximum nodes to use for the experiment.
	MaxNodes *int `pulumi:"maxNodes"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// Number of concurrent sweeping runs that user wants to trigger.
	SweepConcurrentTrials *int `pulumi:"sweepConcurrentTrials"`
	// Number of sweeping runs that user wants to trigger.
	SweepTrials *int `pulumi:"sweepTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsResponse
func (val *TableVerticalLimitSettingsResponse) Defaults() *TableVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxNodes == nil {
		maxNodes_ := 1
		tmp.MaxNodes = &maxNodes_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.SweepConcurrentTrials == nil {
		sweepConcurrentTrials_ := 0
		tmp.SweepConcurrentTrials = &sweepConcurrentTrials_
	}
	if tmp.SweepTrials == nil {
		sweepTrials_ := 0
		tmp.SweepTrials = &sweepTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// Job execution constraints.
type TableVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutput() TableVerticalLimitSettingsResponseOutput {
	return o
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponseOutput {
	return o
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponseOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponseOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponseOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o TableVerticalLimitSettingsResponseOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxNodes }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// Number of concurrent sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsResponseOutput) SweepConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.SweepConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsResponseOutput) SweepTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.SweepTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutput() TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) Elem() TableVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) TableVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettingsResponse
		return ret
	}).(TableVerticalLimitSettingsResponseOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponsePtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Maximum nodes to use for the experiment.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxNodes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodes
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// Number of concurrent sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsResponsePtrOutput) SweepConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SweepConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of sweeping runs that user wants to trigger.
func (o TableVerticalLimitSettingsResponsePtrOutput) SweepTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SweepTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

type TargetUtilizationScaleSettings struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettings
func (val *TargetUtilizationScaleSettings) Defaults() *TargetUtilizationScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

// TargetUtilizationScaleSettingsInput is an input type that accepts TargetUtilizationScaleSettingsArgs and TargetUtilizationScaleSettingsOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsInput` via:
//
//	TargetUtilizationScaleSettingsArgs{...}
type TargetUtilizationScaleSettingsInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput
	ToTargetUtilizationScaleSettingsOutputWithContext(context.Context) TargetUtilizationScaleSettingsOutput
}

type TargetUtilizationScaleSettingsArgs struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances pulumi.IntPtrInput `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances pulumi.IntPtrInput `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval pulumi.StringPtrInput `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsArgs
func (val *TargetUtilizationScaleSettingsArgs) Defaults() *TargetUtilizationScaleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		tmp.MaxInstances = pulumi.IntPtr(1)
	}
	if tmp.MinInstances == nil {
		tmp.MinInstances = pulumi.IntPtr(1)
	}
	if tmp.PollingInterval == nil {
		tmp.PollingInterval = pulumi.StringPtr("PT1S")
	}
	if tmp.TargetUtilizationPercentage == nil {
		tmp.TargetUtilizationPercentage = pulumi.IntPtr(70)
	}
	return &tmp
}
func (TargetUtilizationScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return i.ToTargetUtilizationScaleSettingsOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput)
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput).ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx)
}

// TargetUtilizationScaleSettingsPtrInput is an input type that accepts TargetUtilizationScaleSettingsArgs, TargetUtilizationScaleSettingsPtr and TargetUtilizationScaleSettingsPtrOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsPtrInput` via:
//
//	        TargetUtilizationScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type TargetUtilizationScaleSettingsPtrInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput
	ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Context) TargetUtilizationScaleSettingsPtrOutput
}

type targetUtilizationScaleSettingsPtrType TargetUtilizationScaleSettingsArgs

func TargetUtilizationScaleSettingsPtr(v *TargetUtilizationScaleSettingsArgs) TargetUtilizationScaleSettingsPtrInput {
	return (*targetUtilizationScaleSettingsPtrType)(v)
}

func (*targetUtilizationScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsPtrOutput)
}

type TargetUtilizationScaleSettingsOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetUtilizationScaleSettings) *TargetUtilizationScaleSettings {
		return &v
	}).(TargetUtilizationScaleSettingsPtrOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) Elem() TargetUtilizationScaleSettingsOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) TargetUtilizationScaleSettings {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettings
		return ret
	}).(TargetUtilizationScaleSettingsOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsPtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsPtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsPtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsPtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponse struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsResponse
func (val *TargetUtilizationScaleSettingsResponse) Defaults() *TargetUtilizationScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

type TargetUtilizationScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutput() TargetUtilizationScaleSettingsResponseOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponseOutput {
	return o
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponseOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponseOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponseOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponseOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutput() TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) Elem() TargetUtilizationScaleSettingsResponseOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) TargetUtilizationScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettingsResponse
		return ret
	}).(TargetUtilizationScaleSettingsResponseOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlow struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlow
func (val *TensorFlow) Defaults() *TensorFlow {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlowInput is an input type that accepts TensorFlowArgs and TensorFlowOutput values.
// You can construct a concrete instance of `TensorFlowInput` via:
//
//	TensorFlowArgs{...}
type TensorFlowInput interface {
	pulumi.Input

	ToTensorFlowOutput() TensorFlowOutput
	ToTensorFlowOutputWithContext(context.Context) TensorFlowOutput
}

// TensorFlow distribution configuration.
type TensorFlowArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowArgs
func (val *TensorFlowArgs) Defaults() *TensorFlowArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		tmp.ParameterServerCount = pulumi.IntPtr(0)
	}
	return &tmp
}
func (TensorFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (i TensorFlowArgs) ToTensorFlowOutput() TensorFlowOutput {
	return i.ToTensorFlowOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput)
}

func (i TensorFlowArgs) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput).ToTensorFlowPtrOutputWithContext(ctx)
}

// TensorFlowPtrInput is an input type that accepts TensorFlowArgs, TensorFlowPtr and TensorFlowPtrOutput values.
// You can construct a concrete instance of `TensorFlowPtrInput` via:
//
//	        TensorFlowArgs{...}
//
//	or:
//
//	        nil
type TensorFlowPtrInput interface {
	pulumi.Input

	ToTensorFlowPtrOutput() TensorFlowPtrOutput
	ToTensorFlowPtrOutputWithContext(context.Context) TensorFlowPtrOutput
}

type tensorFlowPtrType TensorFlowArgs

func TensorFlowPtr(v *TensorFlowArgs) TensorFlowPtrInput {
	return (*tensorFlowPtrType)(v)
}

func (*tensorFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowOutput struct{ *pulumi.OutputState }

func (TensorFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (o TensorFlowOutput) ToTensorFlowOutput() TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (o TensorFlowOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TensorFlow) *TensorFlow {
		return &v
	}).(TensorFlowPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlow) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowPtrOutput struct{ *pulumi.OutputState }

func (TensorFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) Elem() TensorFlowOutput {
	return o.ApplyT(func(v *TensorFlow) TensorFlow {
		if v != nil {
			return *v
		}
		var ret TensorFlow
		return ret
	}).(TensorFlowOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowPtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowResponse
func (val *TensorFlowResponse) Defaults() *TensorFlowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlow distribution configuration.
type TensorFlowResponseOutput struct{ *pulumi.OutputState }

func (TensorFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutput() TensorFlowResponseOutput {
	return o
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutputWithContext(ctx context.Context) TensorFlowResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponseOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (TensorFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutput() TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutputWithContext(ctx context.Context) TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) Elem() TensorFlowResponseOutput {
	return o.ApplyT(func(v *TensorFlowResponse) TensorFlowResponse {
		if v != nil {
			return *v
		}
		var ret TensorFlowResponse
		return ret
	}).(TensorFlowResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponsePtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassification struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParameters `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassification
func (val *TextClassification) Defaults() *TextClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TextClassificationInput is an input type that accepts TextClassificationArgs and TextClassificationOutput values.
// You can construct a concrete instance of `TextClassificationInput` via:
//
//	TextClassificationArgs{...}
type TextClassificationInput interface {
	pulumi.Input

	ToTextClassificationOutput() TextClassificationOutput
	ToTextClassificationOutputWithContext(context.Context) TextClassificationOutput
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationArgs struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters NlpFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace NlpParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings NlpSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationArgs
func (val *TextClassificationArgs) Defaults() *TextClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}

	return &tmp
}
func (TextClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (i TextClassificationArgs) ToTextClassificationOutput() TextClassificationOutput {
	return i.ToTextClassificationOutputWithContext(context.Background())
}

func (i TextClassificationArgs) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationOutput struct{ *pulumi.OutputState }

func (TextClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (o TextClassificationOutput) ToTextClassificationOutput() TextClassificationOutput {
	return o
}

func (o TextClassificationOutput) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextClassificationOutput) FixedParameters() NlpFixedParametersPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpFixedParameters { return v.FixedParameters }).(NlpFixedParametersPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextClassificationOutput) SearchSpace() NlpParameterSubspaceArrayOutput {
	return o.ApplyT(func(v TextClassification) []NlpParameterSubspace { return v.SearchSpace }).(NlpParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextClassificationOutput) SweepSettings() NlpSweepSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpSweepSettings { return v.SweepSettings }).(NlpSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v TextClassification) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o TextClassificationOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TextClassification) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabel struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParameters `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabel
func (val *TextClassificationMultilabel) Defaults() *TextClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TextClassificationMultilabelInput is an input type that accepts TextClassificationMultilabelArgs and TextClassificationMultilabelOutput values.
// You can construct a concrete instance of `TextClassificationMultilabelInput` via:
//
//	TextClassificationMultilabelArgs{...}
type TextClassificationMultilabelInput interface {
	pulumi.Input

	ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput
	ToTextClassificationMultilabelOutputWithContext(context.Context) TextClassificationMultilabelOutput
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelArgs struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters NlpFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace NlpParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings NlpSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelArgs
func (val *TextClassificationMultilabelArgs) Defaults() *TextClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	return &tmp
}
func (TextClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return i.ToTextClassificationMultilabelOutputWithContext(context.Background())
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationMultilabelOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return o
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextClassificationMultilabelOutput) FixedParameters() NlpFixedParametersPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpFixedParameters { return v.FixedParameters }).(NlpFixedParametersPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextClassificationMultilabelOutput) SearchSpace() NlpParameterSubspaceArrayOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) []NlpParameterSubspace { return v.SearchSpace }).(NlpParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextClassificationMultilabelOutput) SweepSettings() NlpSweepSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpSweepSettings { return v.SweepSettings }).(NlpSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationMultilabelOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationMultilabelOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o TextClassificationMultilabelOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParametersResponse `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification-Multilabel task.
	// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelResponse
func (val *TextClassificationMultilabelResponse) Defaults() *TextClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabelResponse)(nil)).Elem()
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutput() TextClassificationMultilabelResponseOutput {
	return o
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutputWithContext(ctx context.Context) TextClassificationMultilabelResponseOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextClassificationMultilabelResponseOutput) FixedParameters() NlpFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpFixedParametersResponse { return v.FixedParameters }).(NlpFixedParametersResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification-Multilabel task.
// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
func (o TextClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextClassificationMultilabelResponseOutput) SearchSpace() NlpParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) []NlpParameterSubspaceResponse { return v.SearchSpace }).(NlpParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextClassificationMultilabelResponseOutput) SweepSettings() NlpSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpSweepSettingsResponse { return v.SweepSettings }).(NlpSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationMultilabelResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationMultilabelResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o TextClassificationMultilabelResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParametersResponse `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextClassificationResponse
func (val *TextClassificationResponse) Defaults() *TextClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationResponse)(nil)).Elem()
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutput() TextClassificationResponseOutput {
	return o
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutputWithContext(ctx context.Context) TextClassificationResponseOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextClassificationResponseOutput) FixedParameters() NlpFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpFixedParametersResponse { return v.FixedParameters }).(NlpFixedParametersResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextClassificationResponseOutput) SearchSpace() NlpParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v TextClassificationResponse) []NlpParameterSubspaceResponse { return v.SearchSpace }).(NlpParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextClassificationResponseOutput) SweepSettings() NlpSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpSweepSettingsResponse { return v.SweepSettings }).(NlpSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextClassificationResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextClassificationResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TextClassificationResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o TextClassificationResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNer struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParameters `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspace `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettings `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextNer
func (val *TextNer) Defaults() *TextNer {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TextNerInput is an input type that accepts TextNerArgs and TextNerOutput values.
// You can construct a concrete instance of `TextNerInput` via:
//
//	TextNerArgs{...}
type TextNerInput interface {
	pulumi.Input

	ToTextNerOutput() TextNerOutput
	ToTextNerOutputWithContext(context.Context) TextNerOutput
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerArgs struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters NlpFixedParametersPtrInput `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace NlpParameterSubspaceArrayInput `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings NlpSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringPtrInput `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData MLTableJobInputPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextNerArgs
func (val *TextNerArgs) Defaults() *TextNerArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	return &tmp
}
func (TextNerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNer)(nil)).Elem()
}

func (i TextNerArgs) ToTextNerOutput() TextNerOutput {
	return i.ToTextNerOutputWithContext(context.Background())
}

func (i TextNerArgs) ToTextNerOutputWithContext(ctx context.Context) TextNerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextNerOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerOutput struct{ *pulumi.OutputState }

func (TextNerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNer)(nil)).Elem()
}

func (o TextNerOutput) ToTextNerOutput() TextNerOutput {
	return o
}

func (o TextNerOutput) ToTextNerOutputWithContext(ctx context.Context) TextNerOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextNerOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextNerOutput) FixedParameters() NlpFixedParametersPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpFixedParameters { return v.FixedParameters }).(NlpFixedParametersPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextNerOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextNerOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNer) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextNerOutput) SearchSpace() NlpParameterSubspaceArrayOutput {
	return o.ApplyT(func(v TextNer) []NlpParameterSubspace { return v.SearchSpace }).(NlpParameterSubspaceArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextNerOutput) SweepSettings() NlpSweepSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpSweepSettings { return v.SweepSettings }).(NlpSweepSettingsPtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextNerOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNer) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextNER'.
func (o TextNerOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextNer) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextNerOutput) TrainingData() MLTableJobInputOutput {
	return o.ApplyT(func(v TextNer) MLTableJobInput { return v.TrainingData }).(MLTableJobInputOutput)
}

// Validation data inputs.
func (o TextNerOutput) ValidationData() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TextNer) *MLTableJobInput { return v.ValidationData }).(MLTableJobInputPtrOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerResponse struct {
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Model/training parameters that will remain constant throughout training.
	FixedParameters *NlpFixedParametersResponse `pulumi:"fixedParameters"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-NER task.
	// Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []NlpParameterSubspaceResponse `pulumi:"searchSpace"`
	// Settings for model sweeping and hyperparameter tuning.
	SweepSettings *NlpSweepSettingsResponse `pulumi:"sweepSettings"`
	// Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName *string `pulumi:"targetColumnName"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
	// [Required] Training data input.
	TrainingData MLTableJobInputResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *MLTableJobInputResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for TextNerResponse
func (val *TextNerResponse) Defaults() *TextNerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.FixedParameters = tmp.FixedParameters.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerResponseOutput struct{ *pulumi.OutputState }

func (TextNerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNerResponse)(nil)).Elem()
}

func (o TextNerResponseOutput) ToTextNerResponseOutput() TextNerResponseOutput {
	return o
}

func (o TextNerResponseOutput) ToTextNerResponseOutputWithContext(ctx context.Context) TextNerResponseOutput {
	return o
}

// Featurization inputs needed for AutoML job.
func (o TextNerResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpVerticalFeaturizationSettingsResponse { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Model/training parameters that will remain constant throughout training.
func (o TextNerResponseOutput) FixedParameters() NlpFixedParametersResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpFixedParametersResponse { return v.FixedParameters }).(NlpFixedParametersResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextNerResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextNerResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNerResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-NER task.
// Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
func (o TextNerResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v TextNerResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o TextNerResponseOutput) SearchSpace() NlpParameterSubspaceResponseArrayOutput {
	return o.ApplyT(func(v TextNerResponse) []NlpParameterSubspaceResponse { return v.SearchSpace }).(NlpParameterSubspaceResponseArrayOutput)
}

// Settings for model sweeping and hyperparameter tuning.
func (o TextNerResponseOutput) SweepSettings() NlpSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpSweepSettingsResponse { return v.SweepSettings }).(NlpSweepSettingsResponsePtrOutput)
}

// Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TextNerResponseOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNerResponse) *string { return v.TargetColumnName }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextNER'.
func (o TextNerResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextNerResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// [Required] Training data input.
func (o TextNerResponseOutput) TrainingData() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TextNerResponse) MLTableJobInputResponse { return v.TrainingData }).(MLTableJobInputResponseOutput)
}

// Validation data inputs.
func (o TextNerResponseOutput) ValidationData() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *MLTableJobInputResponse { return v.ValidationData }).(MLTableJobInputResponsePtrOutput)
}

type ThrottlingRuleResponse struct {
	Count                    *float64                      `pulumi:"count"`
	DynamicThrottlingEnabled *bool                         `pulumi:"dynamicThrottlingEnabled"`
	Key                      *string                       `pulumi:"key"`
	MatchPatterns            []RequestMatchPatternResponse `pulumi:"matchPatterns"`
	MinCount                 *float64                      `pulumi:"minCount"`
	RenewalPeriod            *float64                      `pulumi:"renewalPeriod"`
}

type ThrottlingRuleResponseOutput struct{ *pulumi.OutputState }

func (ThrottlingRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThrottlingRuleResponse)(nil)).Elem()
}

func (o ThrottlingRuleResponseOutput) ToThrottlingRuleResponseOutput() ThrottlingRuleResponseOutput {
	return o
}

func (o ThrottlingRuleResponseOutput) ToThrottlingRuleResponseOutputWithContext(ctx context.Context) ThrottlingRuleResponseOutput {
	return o
}

func (o ThrottlingRuleResponseOutput) Count() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) *float64 { return v.Count }).(pulumi.Float64PtrOutput)
}

func (o ThrottlingRuleResponseOutput) DynamicThrottlingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) *bool { return v.DynamicThrottlingEnabled }).(pulumi.BoolPtrOutput)
}

func (o ThrottlingRuleResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ThrottlingRuleResponseOutput) MatchPatterns() RequestMatchPatternResponseArrayOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) []RequestMatchPatternResponse { return v.MatchPatterns }).(RequestMatchPatternResponseArrayOutput)
}

func (o ThrottlingRuleResponseOutput) MinCount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) *float64 { return v.MinCount }).(pulumi.Float64PtrOutput)
}

func (o ThrottlingRuleResponseOutput) RenewalPeriod() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ThrottlingRuleResponse) *float64 { return v.RenewalPeriod }).(pulumi.Float64PtrOutput)
}

type ThrottlingRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (ThrottlingRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThrottlingRuleResponse)(nil)).Elem()
}

func (o ThrottlingRuleResponseArrayOutput) ToThrottlingRuleResponseArrayOutput() ThrottlingRuleResponseArrayOutput {
	return o
}

func (o ThrottlingRuleResponseArrayOutput) ToThrottlingRuleResponseArrayOutputWithContext(ctx context.Context) ThrottlingRuleResponseArrayOutput {
	return o
}

func (o ThrottlingRuleResponseArrayOutput) Index(i pulumi.IntInput) ThrottlingRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThrottlingRuleResponse {
		return vs[0].([]ThrottlingRuleResponse)[vs[1].(int)]
	}).(ThrottlingRuleResponseOutput)
}

type TmpfsOptions struct {
	// Mention the Tmpfs size
	Size *int `pulumi:"size"`
}

// TmpfsOptionsInput is an input type that accepts TmpfsOptionsArgs and TmpfsOptionsOutput values.
// You can construct a concrete instance of `TmpfsOptionsInput` via:
//
//	TmpfsOptionsArgs{...}
type TmpfsOptionsInput interface {
	pulumi.Input

	ToTmpfsOptionsOutput() TmpfsOptionsOutput
	ToTmpfsOptionsOutputWithContext(context.Context) TmpfsOptionsOutput
}

type TmpfsOptionsArgs struct {
	// Mention the Tmpfs size
	Size pulumi.IntPtrInput `pulumi:"size"`
}

func (TmpfsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TmpfsOptions)(nil)).Elem()
}

func (i TmpfsOptionsArgs) ToTmpfsOptionsOutput() TmpfsOptionsOutput {
	return i.ToTmpfsOptionsOutputWithContext(context.Background())
}

func (i TmpfsOptionsArgs) ToTmpfsOptionsOutputWithContext(ctx context.Context) TmpfsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpfsOptionsOutput)
}

func (i TmpfsOptionsArgs) ToTmpfsOptionsPtrOutput() TmpfsOptionsPtrOutput {
	return i.ToTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i TmpfsOptionsArgs) ToTmpfsOptionsPtrOutputWithContext(ctx context.Context) TmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpfsOptionsOutput).ToTmpfsOptionsPtrOutputWithContext(ctx)
}

// TmpfsOptionsPtrInput is an input type that accepts TmpfsOptionsArgs, TmpfsOptionsPtr and TmpfsOptionsPtrOutput values.
// You can construct a concrete instance of `TmpfsOptionsPtrInput` via:
//
//	        TmpfsOptionsArgs{...}
//
//	or:
//
//	        nil
type TmpfsOptionsPtrInput interface {
	pulumi.Input

	ToTmpfsOptionsPtrOutput() TmpfsOptionsPtrOutput
	ToTmpfsOptionsPtrOutputWithContext(context.Context) TmpfsOptionsPtrOutput
}

type tmpfsOptionsPtrType TmpfsOptionsArgs

func TmpfsOptionsPtr(v *TmpfsOptionsArgs) TmpfsOptionsPtrInput {
	return (*tmpfsOptionsPtrType)(v)
}

func (*tmpfsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpfsOptions)(nil)).Elem()
}

func (i *tmpfsOptionsPtrType) ToTmpfsOptionsPtrOutput() TmpfsOptionsPtrOutput {
	return i.ToTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (i *tmpfsOptionsPtrType) ToTmpfsOptionsPtrOutputWithContext(ctx context.Context) TmpfsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpfsOptionsPtrOutput)
}

type TmpfsOptionsOutput struct{ *pulumi.OutputState }

func (TmpfsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TmpfsOptions)(nil)).Elem()
}

func (o TmpfsOptionsOutput) ToTmpfsOptionsOutput() TmpfsOptionsOutput {
	return o
}

func (o TmpfsOptionsOutput) ToTmpfsOptionsOutputWithContext(ctx context.Context) TmpfsOptionsOutput {
	return o
}

func (o TmpfsOptionsOutput) ToTmpfsOptionsPtrOutput() TmpfsOptionsPtrOutput {
	return o.ToTmpfsOptionsPtrOutputWithContext(context.Background())
}

func (o TmpfsOptionsOutput) ToTmpfsOptionsPtrOutputWithContext(ctx context.Context) TmpfsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TmpfsOptions) *TmpfsOptions {
		return &v
	}).(TmpfsOptionsPtrOutput)
}

// Mention the Tmpfs size
func (o TmpfsOptionsOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TmpfsOptions) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type TmpfsOptionsPtrOutput struct{ *pulumi.OutputState }

func (TmpfsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpfsOptions)(nil)).Elem()
}

func (o TmpfsOptionsPtrOutput) ToTmpfsOptionsPtrOutput() TmpfsOptionsPtrOutput {
	return o
}

func (o TmpfsOptionsPtrOutput) ToTmpfsOptionsPtrOutputWithContext(ctx context.Context) TmpfsOptionsPtrOutput {
	return o
}

func (o TmpfsOptionsPtrOutput) Elem() TmpfsOptionsOutput {
	return o.ApplyT(func(v *TmpfsOptions) TmpfsOptions {
		if v != nil {
			return *v
		}
		var ret TmpfsOptions
		return ret
	}).(TmpfsOptionsOutput)
}

// Mention the Tmpfs size
func (o TmpfsOptionsPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TmpfsOptions) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type TmpfsOptionsResponse struct {
	// Mention the Tmpfs size
	Size *int `pulumi:"size"`
}

type TmpfsOptionsResponseOutput struct{ *pulumi.OutputState }

func (TmpfsOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TmpfsOptionsResponse)(nil)).Elem()
}

func (o TmpfsOptionsResponseOutput) ToTmpfsOptionsResponseOutput() TmpfsOptionsResponseOutput {
	return o
}

func (o TmpfsOptionsResponseOutput) ToTmpfsOptionsResponseOutputWithContext(ctx context.Context) TmpfsOptionsResponseOutput {
	return o
}

// Mention the Tmpfs size
func (o TmpfsOptionsResponseOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TmpfsOptionsResponse) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type TmpfsOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (TmpfsOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpfsOptionsResponse)(nil)).Elem()
}

func (o TmpfsOptionsResponsePtrOutput) ToTmpfsOptionsResponsePtrOutput() TmpfsOptionsResponsePtrOutput {
	return o
}

func (o TmpfsOptionsResponsePtrOutput) ToTmpfsOptionsResponsePtrOutputWithContext(ctx context.Context) TmpfsOptionsResponsePtrOutput {
	return o
}

func (o TmpfsOptionsResponsePtrOutput) Elem() TmpfsOptionsResponseOutput {
	return o.ApplyT(func(v *TmpfsOptionsResponse) TmpfsOptionsResponse {
		if v != nil {
			return *v
		}
		var ret TmpfsOptionsResponse
		return ret
	}).(TmpfsOptionsResponseOutput)
}

// Mention the Tmpfs size
func (o TmpfsOptionsResponsePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TmpfsOptionsResponse) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type TopNFeaturesByAttribution struct {
	// Expected value is 'TopNByAttribution'.
	FilterType string `pulumi:"filterType"`
	// The number of top features to include.
	Top *int `pulumi:"top"`
}

// Defaults sets the appropriate defaults for TopNFeaturesByAttribution
func (val *TopNFeaturesByAttribution) Defaults() *TopNFeaturesByAttribution {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Top == nil {
		top_ := 10
		tmp.Top = &top_
	}
	return &tmp
}

// TopNFeaturesByAttributionInput is an input type that accepts TopNFeaturesByAttributionArgs and TopNFeaturesByAttributionOutput values.
// You can construct a concrete instance of `TopNFeaturesByAttributionInput` via:
//
//	TopNFeaturesByAttributionArgs{...}
type TopNFeaturesByAttributionInput interface {
	pulumi.Input

	ToTopNFeaturesByAttributionOutput() TopNFeaturesByAttributionOutput
	ToTopNFeaturesByAttributionOutputWithContext(context.Context) TopNFeaturesByAttributionOutput
}

type TopNFeaturesByAttributionArgs struct {
	// Expected value is 'TopNByAttribution'.
	FilterType pulumi.StringInput `pulumi:"filterType"`
	// The number of top features to include.
	Top pulumi.IntPtrInput `pulumi:"top"`
}

// Defaults sets the appropriate defaults for TopNFeaturesByAttributionArgs
func (val *TopNFeaturesByAttributionArgs) Defaults() *TopNFeaturesByAttributionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Top == nil {
		tmp.Top = pulumi.IntPtr(10)
	}
	return &tmp
}
func (TopNFeaturesByAttributionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopNFeaturesByAttribution)(nil)).Elem()
}

func (i TopNFeaturesByAttributionArgs) ToTopNFeaturesByAttributionOutput() TopNFeaturesByAttributionOutput {
	return i.ToTopNFeaturesByAttributionOutputWithContext(context.Background())
}

func (i TopNFeaturesByAttributionArgs) ToTopNFeaturesByAttributionOutputWithContext(ctx context.Context) TopNFeaturesByAttributionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopNFeaturesByAttributionOutput)
}

func (i TopNFeaturesByAttributionArgs) ToTopNFeaturesByAttributionPtrOutput() TopNFeaturesByAttributionPtrOutput {
	return i.ToTopNFeaturesByAttributionPtrOutputWithContext(context.Background())
}

func (i TopNFeaturesByAttributionArgs) ToTopNFeaturesByAttributionPtrOutputWithContext(ctx context.Context) TopNFeaturesByAttributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopNFeaturesByAttributionOutput).ToTopNFeaturesByAttributionPtrOutputWithContext(ctx)
}

// TopNFeaturesByAttributionPtrInput is an input type that accepts TopNFeaturesByAttributionArgs, TopNFeaturesByAttributionPtr and TopNFeaturesByAttributionPtrOutput values.
// You can construct a concrete instance of `TopNFeaturesByAttributionPtrInput` via:
//
//	        TopNFeaturesByAttributionArgs{...}
//
//	or:
//
//	        nil
type TopNFeaturesByAttributionPtrInput interface {
	pulumi.Input

	ToTopNFeaturesByAttributionPtrOutput() TopNFeaturesByAttributionPtrOutput
	ToTopNFeaturesByAttributionPtrOutputWithContext(context.Context) TopNFeaturesByAttributionPtrOutput
}

type topNFeaturesByAttributionPtrType TopNFeaturesByAttributionArgs

func TopNFeaturesByAttributionPtr(v *TopNFeaturesByAttributionArgs) TopNFeaturesByAttributionPtrInput {
	return (*topNFeaturesByAttributionPtrType)(v)
}

func (*topNFeaturesByAttributionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopNFeaturesByAttribution)(nil)).Elem()
}

func (i *topNFeaturesByAttributionPtrType) ToTopNFeaturesByAttributionPtrOutput() TopNFeaturesByAttributionPtrOutput {
	return i.ToTopNFeaturesByAttributionPtrOutputWithContext(context.Background())
}

func (i *topNFeaturesByAttributionPtrType) ToTopNFeaturesByAttributionPtrOutputWithContext(ctx context.Context) TopNFeaturesByAttributionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopNFeaturesByAttributionPtrOutput)
}

type TopNFeaturesByAttributionOutput struct{ *pulumi.OutputState }

func (TopNFeaturesByAttributionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopNFeaturesByAttribution)(nil)).Elem()
}

func (o TopNFeaturesByAttributionOutput) ToTopNFeaturesByAttributionOutput() TopNFeaturesByAttributionOutput {
	return o
}

func (o TopNFeaturesByAttributionOutput) ToTopNFeaturesByAttributionOutputWithContext(ctx context.Context) TopNFeaturesByAttributionOutput {
	return o
}

func (o TopNFeaturesByAttributionOutput) ToTopNFeaturesByAttributionPtrOutput() TopNFeaturesByAttributionPtrOutput {
	return o.ToTopNFeaturesByAttributionPtrOutputWithContext(context.Background())
}

func (o TopNFeaturesByAttributionOutput) ToTopNFeaturesByAttributionPtrOutputWithContext(ctx context.Context) TopNFeaturesByAttributionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopNFeaturesByAttribution) *TopNFeaturesByAttribution {
		return &v
	}).(TopNFeaturesByAttributionPtrOutput)
}

// Expected value is 'TopNByAttribution'.
func (o TopNFeaturesByAttributionOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v TopNFeaturesByAttribution) string { return v.FilterType }).(pulumi.StringOutput)
}

// The number of top features to include.
func (o TopNFeaturesByAttributionOutput) Top() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopNFeaturesByAttribution) *int { return v.Top }).(pulumi.IntPtrOutput)
}

type TopNFeaturesByAttributionPtrOutput struct{ *pulumi.OutputState }

func (TopNFeaturesByAttributionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopNFeaturesByAttribution)(nil)).Elem()
}

func (o TopNFeaturesByAttributionPtrOutput) ToTopNFeaturesByAttributionPtrOutput() TopNFeaturesByAttributionPtrOutput {
	return o
}

func (o TopNFeaturesByAttributionPtrOutput) ToTopNFeaturesByAttributionPtrOutputWithContext(ctx context.Context) TopNFeaturesByAttributionPtrOutput {
	return o
}

func (o TopNFeaturesByAttributionPtrOutput) Elem() TopNFeaturesByAttributionOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttribution) TopNFeaturesByAttribution {
		if v != nil {
			return *v
		}
		var ret TopNFeaturesByAttribution
		return ret
	}).(TopNFeaturesByAttributionOutput)
}

// Expected value is 'TopNByAttribution'.
func (o TopNFeaturesByAttributionPtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttribution) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

// The number of top features to include.
func (o TopNFeaturesByAttributionPtrOutput) Top() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttribution) *int {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.IntPtrOutput)
}

type TopNFeaturesByAttributionResponse struct {
	// Expected value is 'TopNByAttribution'.
	FilterType string `pulumi:"filterType"`
	// The number of top features to include.
	Top *int `pulumi:"top"`
}

// Defaults sets the appropriate defaults for TopNFeaturesByAttributionResponse
func (val *TopNFeaturesByAttributionResponse) Defaults() *TopNFeaturesByAttributionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Top == nil {
		top_ := 10
		tmp.Top = &top_
	}
	return &tmp
}

type TopNFeaturesByAttributionResponseOutput struct{ *pulumi.OutputState }

func (TopNFeaturesByAttributionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopNFeaturesByAttributionResponse)(nil)).Elem()
}

func (o TopNFeaturesByAttributionResponseOutput) ToTopNFeaturesByAttributionResponseOutput() TopNFeaturesByAttributionResponseOutput {
	return o
}

func (o TopNFeaturesByAttributionResponseOutput) ToTopNFeaturesByAttributionResponseOutputWithContext(ctx context.Context) TopNFeaturesByAttributionResponseOutput {
	return o
}

// Expected value is 'TopNByAttribution'.
func (o TopNFeaturesByAttributionResponseOutput) FilterType() pulumi.StringOutput {
	return o.ApplyT(func(v TopNFeaturesByAttributionResponse) string { return v.FilterType }).(pulumi.StringOutput)
}

// The number of top features to include.
func (o TopNFeaturesByAttributionResponseOutput) Top() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopNFeaturesByAttributionResponse) *int { return v.Top }).(pulumi.IntPtrOutput)
}

type TopNFeaturesByAttributionResponsePtrOutput struct{ *pulumi.OutputState }

func (TopNFeaturesByAttributionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopNFeaturesByAttributionResponse)(nil)).Elem()
}

func (o TopNFeaturesByAttributionResponsePtrOutput) ToTopNFeaturesByAttributionResponsePtrOutput() TopNFeaturesByAttributionResponsePtrOutput {
	return o
}

func (o TopNFeaturesByAttributionResponsePtrOutput) ToTopNFeaturesByAttributionResponsePtrOutputWithContext(ctx context.Context) TopNFeaturesByAttributionResponsePtrOutput {
	return o
}

func (o TopNFeaturesByAttributionResponsePtrOutput) Elem() TopNFeaturesByAttributionResponseOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttributionResponse) TopNFeaturesByAttributionResponse {
		if v != nil {
			return *v
		}
		var ret TopNFeaturesByAttributionResponse
		return ret
	}).(TopNFeaturesByAttributionResponseOutput)
}

// Expected value is 'TopNByAttribution'.
func (o TopNFeaturesByAttributionResponsePtrOutput) FilterType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttributionResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FilterType
	}).(pulumi.StringPtrOutput)
}

// The number of top features to include.
func (o TopNFeaturesByAttributionResponsePtrOutput) Top() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopNFeaturesByAttributionResponse) *int {
		if v == nil {
			return nil
		}
		return v.Top
	}).(pulumi.IntPtrOutput)
}

// Trial component definition.
type TrialComponent struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfiguration `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponent
func (val *TrialComponent) Defaults() *TrialComponent {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// TrialComponentInput is an input type that accepts TrialComponentArgs and TrialComponentOutput values.
// You can construct a concrete instance of `TrialComponentInput` via:
//
//	TrialComponentArgs{...}
type TrialComponentInput interface {
	pulumi.Input

	ToTrialComponentOutput() TrialComponentOutput
	ToTrialComponentOutputWithContext(context.Context) TrialComponentOutput
}

// Trial component definition.
type TrialComponentArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command pulumi.StringInput `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution pulumi.Input `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources JobResourceConfigurationPtrInput `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponentArgs
func (val *TrialComponentArgs) Defaults() *TrialComponentArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrialComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponent)(nil)).Elem()
}

func (i TrialComponentArgs) ToTrialComponentOutput() TrialComponentOutput {
	return i.ToTrialComponentOutputWithContext(context.Background())
}

func (i TrialComponentArgs) ToTrialComponentOutputWithContext(ctx context.Context) TrialComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrialComponentOutput)
}

// Trial component definition.
type TrialComponentOutput struct{ *pulumi.OutputState }

func (TrialComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponent)(nil)).Elem()
}

func (o TrialComponentOutput) ToTrialComponentOutput() TrialComponentOutput {
	return o
}

func (o TrialComponentOutput) ToTrialComponentOutputWithContext(ctx context.Context) TrialComponentOutput {
	return o
}

// ARM resource ID of the code asset.
func (o TrialComponentOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrialComponent) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o TrialComponentOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponent) string { return v.Command }).(pulumi.StringOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o TrialComponentOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v TrialComponent) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o TrialComponentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponent) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o TrialComponentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrialComponent) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o TrialComponentOutput) Resources() JobResourceConfigurationPtrOutput {
	return o.ApplyT(func(v TrialComponent) *JobResourceConfiguration { return v.Resources }).(JobResourceConfigurationPtrOutput)
}

// Trial component definition.
type TrialComponentResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *JobResourceConfigurationResponse `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponentResponse
func (val *TrialComponentResponse) Defaults() *TrialComponentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Trial component definition.
type TrialComponentResponseOutput struct{ *pulumi.OutputState }

func (TrialComponentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponentResponse)(nil)).Elem()
}

func (o TrialComponentResponseOutput) ToTrialComponentResponseOutput() TrialComponentResponseOutput {
	return o
}

func (o TrialComponentResponseOutput) ToTrialComponentResponseOutputWithContext(ctx context.Context) TrialComponentResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o TrialComponentResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrialComponentResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o TrialComponentResponseOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponentResponse) string { return v.Command }).(pulumi.StringOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o TrialComponentResponseOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v TrialComponentResponse) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o TrialComponentResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponentResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o TrialComponentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrialComponentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o TrialComponentResponseOutput) Resources() JobResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v TrialComponentResponse) *JobResourceConfigurationResponse { return v.Resources }).(JobResourceConfigurationResponsePtrOutput)
}

type TritonModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'triton_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInput
func (val *TritonModelJobInput) Defaults() *TritonModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TritonModelJobInputInput is an input type that accepts TritonModelJobInputArgs and TritonModelJobInputOutput values.
// You can construct a concrete instance of `TritonModelJobInputInput` via:
//
//	TritonModelJobInputArgs{...}
type TritonModelJobInputInput interface {
	pulumi.Input

	ToTritonModelJobInputOutput() TritonModelJobInputOutput
	ToTritonModelJobInputOutputWithContext(context.Context) TritonModelJobInputOutput
}

type TritonModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'triton_model'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInputArgs
func (val *TritonModelJobInputArgs) Defaults() *TritonModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (TritonModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInput)(nil)).Elem()
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputOutput() TritonModelJobInputOutput {
	return i.ToTritonModelJobInputOutputWithContext(context.Background())
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputOutputWithContext(ctx context.Context) TritonModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobInputOutput)
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputPtrOutput() TritonModelJobInputPtrOutput {
	return i.ToTritonModelJobInputPtrOutputWithContext(context.Background())
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputPtrOutputWithContext(ctx context.Context) TritonModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobInputOutput).ToTritonModelJobInputPtrOutputWithContext(ctx)
}

// TritonModelJobInputPtrInput is an input type that accepts TritonModelJobInputArgs, TritonModelJobInputPtr and TritonModelJobInputPtrOutput values.
// You can construct a concrete instance of `TritonModelJobInputPtrInput` via:
//
//	        TritonModelJobInputArgs{...}
//
//	or:
//
//	        nil
type TritonModelJobInputPtrInput interface {
	pulumi.Input

	ToTritonModelJobInputPtrOutput() TritonModelJobInputPtrOutput
	ToTritonModelJobInputPtrOutputWithContext(context.Context) TritonModelJobInputPtrOutput
}

type tritonModelJobInputPtrType TritonModelJobInputArgs

func TritonModelJobInputPtr(v *TritonModelJobInputArgs) TritonModelJobInputPtrInput {
	return (*tritonModelJobInputPtrType)(v)
}

func (*tritonModelJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TritonModelJobInput)(nil)).Elem()
}

func (i *tritonModelJobInputPtrType) ToTritonModelJobInputPtrOutput() TritonModelJobInputPtrOutput {
	return i.ToTritonModelJobInputPtrOutputWithContext(context.Background())
}

func (i *tritonModelJobInputPtrType) ToTritonModelJobInputPtrOutputWithContext(ctx context.Context) TritonModelJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobInputPtrOutput)
}

type TritonModelJobInputOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInput)(nil)).Elem()
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputOutput() TritonModelJobInputOutput {
	return o
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputOutputWithContext(ctx context.Context) TritonModelJobInputOutput {
	return o
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputPtrOutput() TritonModelJobInputPtrOutput {
	return o.ToTritonModelJobInputPtrOutputWithContext(context.Background())
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputPtrOutputWithContext(ctx context.Context) TritonModelJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TritonModelJobInput) *TritonModelJobInput {
		return &v
	}).(TritonModelJobInputPtrOutput)
}

// Description for the input.
func (o TritonModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'triton_model'.
func (o TritonModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o TritonModelJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type TritonModelJobInputPtrOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TritonModelJobInput)(nil)).Elem()
}

func (o TritonModelJobInputPtrOutput) ToTritonModelJobInputPtrOutput() TritonModelJobInputPtrOutput {
	return o
}

func (o TritonModelJobInputPtrOutput) ToTritonModelJobInputPtrOutputWithContext(ctx context.Context) TritonModelJobInputPtrOutput {
	return o
}

func (o TritonModelJobInputPtrOutput) Elem() TritonModelJobInputOutput {
	return o.ApplyT(func(v *TritonModelJobInput) TritonModelJobInput {
		if v != nil {
			return *v
		}
		var ret TritonModelJobInput
		return ret
	}).(TritonModelJobInputOutput)
}

// Description for the input.
func (o TritonModelJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'triton_model'.
func (o TritonModelJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o TritonModelJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type TritonModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'triton_model'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInputResponse
func (val *TritonModelJobInputResponse) Defaults() *TritonModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInputResponse)(nil)).Elem()
}

func (o TritonModelJobInputResponseOutput) ToTritonModelJobInputResponseOutput() TritonModelJobInputResponseOutput {
	return o
}

func (o TritonModelJobInputResponseOutput) ToTritonModelJobInputResponseOutputWithContext(ctx context.Context) TritonModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o TritonModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'triton_model'.
func (o TritonModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o TritonModelJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type TritonModelJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TritonModelJobInputResponse)(nil)).Elem()
}

func (o TritonModelJobInputResponsePtrOutput) ToTritonModelJobInputResponsePtrOutput() TritonModelJobInputResponsePtrOutput {
	return o
}

func (o TritonModelJobInputResponsePtrOutput) ToTritonModelJobInputResponsePtrOutputWithContext(ctx context.Context) TritonModelJobInputResponsePtrOutput {
	return o
}

func (o TritonModelJobInputResponsePtrOutput) Elem() TritonModelJobInputResponseOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) TritonModelJobInputResponse {
		if v != nil {
			return *v
		}
		var ret TritonModelJobInputResponse
		return ret
	}).(TritonModelJobInputResponseOutput)
}

// Description for the input.
func (o TritonModelJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'triton_model'.
func (o TritonModelJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o TritonModelJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TritonModelJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type TritonModelJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'triton_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutput
func (val *TritonModelJobOutput) Defaults() *TritonModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TritonModelJobOutputInput is an input type that accepts TritonModelJobOutputArgs and TritonModelJobOutputOutput values.
// You can construct a concrete instance of `TritonModelJobOutputInput` via:
//
//	TritonModelJobOutputArgs{...}
type TritonModelJobOutputInput interface {
	pulumi.Input

	ToTritonModelJobOutputOutput() TritonModelJobOutputOutput
	ToTritonModelJobOutputOutputWithContext(context.Context) TritonModelJobOutputOutput
}

type TritonModelJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'triton_model'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutputArgs
func (val *TritonModelJobOutputArgs) Defaults() *TritonModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (TritonModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutput)(nil)).Elem()
}

func (i TritonModelJobOutputArgs) ToTritonModelJobOutputOutput() TritonModelJobOutputOutput {
	return i.ToTritonModelJobOutputOutputWithContext(context.Background())
}

func (i TritonModelJobOutputArgs) ToTritonModelJobOutputOutputWithContext(ctx context.Context) TritonModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobOutputOutput)
}

type TritonModelJobOutputOutput struct{ *pulumi.OutputState }

func (TritonModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutput)(nil)).Elem()
}

func (o TritonModelJobOutputOutput) ToTritonModelJobOutputOutput() TritonModelJobOutputOutput {
	return o
}

func (o TritonModelJobOutputOutput) ToTritonModelJobOutputOutputWithContext(ctx context.Context) TritonModelJobOutputOutput {
	return o
}

// Output Asset Name.
func (o TritonModelJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o TritonModelJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o TritonModelJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o TritonModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'triton_model'.
func (o TritonModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o TritonModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o TritonModelJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o TritonModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type TritonModelJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'triton_model'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutputResponse
func (val *TritonModelJobOutputResponse) Defaults() *TritonModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (TritonModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutputResponse)(nil)).Elem()
}

func (o TritonModelJobOutputResponseOutput) ToTritonModelJobOutputResponseOutput() TritonModelJobOutputResponseOutput {
	return o
}

func (o TritonModelJobOutputResponseOutput) ToTritonModelJobOutputResponseOutputWithContext(ctx context.Context) TritonModelJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o TritonModelJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o TritonModelJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o TritonModelJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o TritonModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'triton_model'.
func (o TritonModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o TritonModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o TritonModelJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o TritonModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicy
func (val *TruncationSelectionPolicy) Defaults() *TruncationSelectionPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// TruncationSelectionPolicyInput is an input type that accepts TruncationSelectionPolicyArgs and TruncationSelectionPolicyOutput values.
// You can construct a concrete instance of `TruncationSelectionPolicyInput` via:
//
//	TruncationSelectionPolicyArgs{...}
type TruncationSelectionPolicyInput interface {
	pulumi.Input

	ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput
	ToTruncationSelectionPolicyOutputWithContext(context.Context) TruncationSelectionPolicyOutput
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage pulumi.IntPtrInput `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicyArgs
func (val *TruncationSelectionPolicyArgs) Defaults() *TruncationSelectionPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	if tmp.TruncationPercentage == nil {
		tmp.TruncationPercentage = pulumi.IntPtr(0)
	}
	return &tmp
}
func (TruncationSelectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicy)(nil)).Elem()
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput {
	return i.ToTruncationSelectionPolicyOutputWithContext(context.Background())
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyOutputWithContext(ctx context.Context) TruncationSelectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyOutput)
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return i.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyOutput).ToTruncationSelectionPolicyPtrOutputWithContext(ctx)
}

// TruncationSelectionPolicyPtrInput is an input type that accepts TruncationSelectionPolicyArgs, TruncationSelectionPolicyPtr and TruncationSelectionPolicyPtrOutput values.
// You can construct a concrete instance of `TruncationSelectionPolicyPtrInput` via:
//
//	        TruncationSelectionPolicyArgs{...}
//
//	or:
//
//	        nil
type TruncationSelectionPolicyPtrInput interface {
	pulumi.Input

	ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput
	ToTruncationSelectionPolicyPtrOutputWithContext(context.Context) TruncationSelectionPolicyPtrOutput
}

type truncationSelectionPolicyPtrType TruncationSelectionPolicyArgs

func TruncationSelectionPolicyPtr(v *TruncationSelectionPolicyArgs) TruncationSelectionPolicyPtrInput {
	return (*truncationSelectionPolicyPtrType)(v)
}

func (*truncationSelectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicy)(nil)).Elem()
}

func (i *truncationSelectionPolicyPtrType) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return i.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (i *truncationSelectionPolicyPtrType) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicy)(nil)).Elem()
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput {
	return o
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyOutputWithContext(ctx context.Context) TruncationSelectionPolicyOutput {
	return o
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return o.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TruncationSelectionPolicy) *TruncationSelectionPolicy {
		return &v
	}).(TruncationSelectionPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.TruncationPercentage }).(pulumi.IntPtrOutput)
}

type TruncationSelectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicy)(nil)).Elem()
}

func (o TruncationSelectionPolicyPtrOutput) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return o
}

func (o TruncationSelectionPolicyPtrOutput) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return o
}

func (o TruncationSelectionPolicyPtrOutput) Elem() TruncationSelectionPolicyOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) TruncationSelectionPolicy {
		if v != nil {
			return *v
		}
		var ret TruncationSelectionPolicy
		return ret
	}).(TruncationSelectionPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyPtrOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.TruncationPercentage
	}).(pulumi.IntPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicyResponse
func (val *TruncationSelectionPolicyResponse) Defaults() *TruncationSelectionPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicyResponse)(nil)).Elem()
}

func (o TruncationSelectionPolicyResponseOutput) ToTruncationSelectionPolicyResponseOutput() TruncationSelectionPolicyResponseOutput {
	return o
}

func (o TruncationSelectionPolicyResponseOutput) ToTruncationSelectionPolicyResponseOutputWithContext(ctx context.Context) TruncationSelectionPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyResponseOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.TruncationPercentage }).(pulumi.IntPtrOutput)
}

type TruncationSelectionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicyResponse)(nil)).Elem()
}

func (o TruncationSelectionPolicyResponsePtrOutput) ToTruncationSelectionPolicyResponsePtrOutput() TruncationSelectionPolicyResponsePtrOutput {
	return o
}

func (o TruncationSelectionPolicyResponsePtrOutput) ToTruncationSelectionPolicyResponsePtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyResponsePtrOutput {
	return o
}

func (o TruncationSelectionPolicyResponsePtrOutput) Elem() TruncationSelectionPolicyResponseOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) TruncationSelectionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret TruncationSelectionPolicyResponse
		return ret
	}).(TruncationSelectionPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyResponsePtrOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.TruncationPercentage
	}).(pulumi.IntPtrOutput)
}

// uri-file data version entity
type UriFileDataVersion struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_file'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersion
func (val *UriFileDataVersion) Defaults() *UriFileDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// UriFileDataVersionInput is an input type that accepts UriFileDataVersionArgs and UriFileDataVersionOutput values.
// You can construct a concrete instance of `UriFileDataVersionInput` via:
//
//	UriFileDataVersionArgs{...}
type UriFileDataVersionInput interface {
	pulumi.Input

	ToUriFileDataVersionOutput() UriFileDataVersionOutput
	ToUriFileDataVersionOutputWithContext(context.Context) UriFileDataVersionOutput
}

// uri-file data version entity
type UriFileDataVersionArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_file'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersionArgs
func (val *UriFileDataVersionArgs) Defaults() *UriFileDataVersionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (UriFileDataVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersion)(nil)).Elem()
}

func (i UriFileDataVersionArgs) ToUriFileDataVersionOutput() UriFileDataVersionOutput {
	return i.ToUriFileDataVersionOutputWithContext(context.Background())
}

func (i UriFileDataVersionArgs) ToUriFileDataVersionOutputWithContext(ctx context.Context) UriFileDataVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileDataVersionOutput)
}

// uri-file data version entity
type UriFileDataVersionOutput struct{ *pulumi.OutputState }

func (UriFileDataVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersion)(nil)).Elem()
}

func (o UriFileDataVersionOutput) ToUriFileDataVersionOutput() UriFileDataVersionOutput {
	return o
}

func (o UriFileDataVersionOutput) ToUriFileDataVersionOutputWithContext(ctx context.Context) UriFileDataVersionOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o UriFileDataVersionOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_file'.
func (o UriFileDataVersionOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersion) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o UriFileDataVersionOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersion) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFileDataVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o UriFileDataVersionOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o UriFileDataVersionOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o UriFileDataVersionOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFileDataVersionOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersion) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o UriFileDataVersionOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFileDataVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersion) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// uri-file data version entity
type UriFileDataVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_file'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersionResponse
func (val *UriFileDataVersionResponse) Defaults() *UriFileDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-file data version entity
type UriFileDataVersionResponseOutput struct{ *pulumi.OutputState }

func (UriFileDataVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersionResponse)(nil)).Elem()
}

func (o UriFileDataVersionResponseOutput) ToUriFileDataVersionResponseOutput() UriFileDataVersionResponseOutput {
	return o
}

func (o UriFileDataVersionResponseOutput) ToUriFileDataVersionResponseOutputWithContext(ctx context.Context) UriFileDataVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o UriFileDataVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_file'.
func (o UriFileDataVersionResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o UriFileDataVersionResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFileDataVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o UriFileDataVersionResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o UriFileDataVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o UriFileDataVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFileDataVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o UriFileDataVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFileDataVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type UriFileJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_file'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInput
func (val *UriFileJobInput) Defaults() *UriFileJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFileJobInputInput is an input type that accepts UriFileJobInputArgs and UriFileJobInputOutput values.
// You can construct a concrete instance of `UriFileJobInputInput` via:
//
//	UriFileJobInputArgs{...}
type UriFileJobInputInput interface {
	pulumi.Input

	ToUriFileJobInputOutput() UriFileJobInputOutput
	ToUriFileJobInputOutputWithContext(context.Context) UriFileJobInputOutput
}

type UriFileJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_file'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInputArgs
func (val *UriFileJobInputArgs) Defaults() *UriFileJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (UriFileJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInput)(nil)).Elem()
}

func (i UriFileJobInputArgs) ToUriFileJobInputOutput() UriFileJobInputOutput {
	return i.ToUriFileJobInputOutputWithContext(context.Background())
}

func (i UriFileJobInputArgs) ToUriFileJobInputOutputWithContext(ctx context.Context) UriFileJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobInputOutput)
}

func (i UriFileJobInputArgs) ToUriFileJobInputPtrOutput() UriFileJobInputPtrOutput {
	return i.ToUriFileJobInputPtrOutputWithContext(context.Background())
}

func (i UriFileJobInputArgs) ToUriFileJobInputPtrOutputWithContext(ctx context.Context) UriFileJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobInputOutput).ToUriFileJobInputPtrOutputWithContext(ctx)
}

// UriFileJobInputPtrInput is an input type that accepts UriFileJobInputArgs, UriFileJobInputPtr and UriFileJobInputPtrOutput values.
// You can construct a concrete instance of `UriFileJobInputPtrInput` via:
//
//	        UriFileJobInputArgs{...}
//
//	or:
//
//	        nil
type UriFileJobInputPtrInput interface {
	pulumi.Input

	ToUriFileJobInputPtrOutput() UriFileJobInputPtrOutput
	ToUriFileJobInputPtrOutputWithContext(context.Context) UriFileJobInputPtrOutput
}

type uriFileJobInputPtrType UriFileJobInputArgs

func UriFileJobInputPtr(v *UriFileJobInputArgs) UriFileJobInputPtrInput {
	return (*uriFileJobInputPtrType)(v)
}

func (*uriFileJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFileJobInput)(nil)).Elem()
}

func (i *uriFileJobInputPtrType) ToUriFileJobInputPtrOutput() UriFileJobInputPtrOutput {
	return i.ToUriFileJobInputPtrOutputWithContext(context.Background())
}

func (i *uriFileJobInputPtrType) ToUriFileJobInputPtrOutputWithContext(ctx context.Context) UriFileJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobInputPtrOutput)
}

type UriFileJobInputOutput struct{ *pulumi.OutputState }

func (UriFileJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInput)(nil)).Elem()
}

func (o UriFileJobInputOutput) ToUriFileJobInputOutput() UriFileJobInputOutput {
	return o
}

func (o UriFileJobInputOutput) ToUriFileJobInputOutputWithContext(ctx context.Context) UriFileJobInputOutput {
	return o
}

func (o UriFileJobInputOutput) ToUriFileJobInputPtrOutput() UriFileJobInputPtrOutput {
	return o.ToUriFileJobInputPtrOutputWithContext(context.Background())
}

func (o UriFileJobInputOutput) ToUriFileJobInputPtrOutputWithContext(ctx context.Context) UriFileJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UriFileJobInput) *UriFileJobInput {
		return &v
	}).(UriFileJobInputPtrOutput)
}

// Description for the input.
func (o UriFileJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_file'.
func (o UriFileJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFileJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFileJobInputPtrOutput struct{ *pulumi.OutputState }

func (UriFileJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFileJobInput)(nil)).Elem()
}

func (o UriFileJobInputPtrOutput) ToUriFileJobInputPtrOutput() UriFileJobInputPtrOutput {
	return o
}

func (o UriFileJobInputPtrOutput) ToUriFileJobInputPtrOutputWithContext(ctx context.Context) UriFileJobInputPtrOutput {
	return o
}

func (o UriFileJobInputPtrOutput) Elem() UriFileJobInputOutput {
	return o.ApplyT(func(v *UriFileJobInput) UriFileJobInput {
		if v != nil {
			return *v
		}
		var ret UriFileJobInput
		return ret
	}).(UriFileJobInputOutput)
}

// Description for the input.
func (o UriFileJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_file'.
func (o UriFileJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFileJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type UriFileJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_file'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInputResponse
func (val *UriFileJobInputResponse) Defaults() *UriFileJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobInputResponseOutput struct{ *pulumi.OutputState }

func (UriFileJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInputResponse)(nil)).Elem()
}

func (o UriFileJobInputResponseOutput) ToUriFileJobInputResponseOutput() UriFileJobInputResponseOutput {
	return o
}

func (o UriFileJobInputResponseOutput) ToUriFileJobInputResponseOutputWithContext(ctx context.Context) UriFileJobInputResponseOutput {
	return o
}

// Description for the input.
func (o UriFileJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_file'.
func (o UriFileJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFileJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFileJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (UriFileJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFileJobInputResponse)(nil)).Elem()
}

func (o UriFileJobInputResponsePtrOutput) ToUriFileJobInputResponsePtrOutput() UriFileJobInputResponsePtrOutput {
	return o
}

func (o UriFileJobInputResponsePtrOutput) ToUriFileJobInputResponsePtrOutputWithContext(ctx context.Context) UriFileJobInputResponsePtrOutput {
	return o
}

func (o UriFileJobInputResponsePtrOutput) Elem() UriFileJobInputResponseOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) UriFileJobInputResponse {
		if v != nil {
			return *v
		}
		var ret UriFileJobInputResponse
		return ret
	}).(UriFileJobInputResponseOutput)
}

// Description for the input.
func (o UriFileJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_file'.
func (o UriFileJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFileJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFileJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type UriFileJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_file'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutput
func (val *UriFileJobOutput) Defaults() *UriFileJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFileJobOutputInput is an input type that accepts UriFileJobOutputArgs and UriFileJobOutputOutput values.
// You can construct a concrete instance of `UriFileJobOutputInput` via:
//
//	UriFileJobOutputArgs{...}
type UriFileJobOutputInput interface {
	pulumi.Input

	ToUriFileJobOutputOutput() UriFileJobOutputOutput
	ToUriFileJobOutputOutputWithContext(context.Context) UriFileJobOutputOutput
}

type UriFileJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_file'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutputArgs
func (val *UriFileJobOutputArgs) Defaults() *UriFileJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (UriFileJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutput)(nil)).Elem()
}

func (i UriFileJobOutputArgs) ToUriFileJobOutputOutput() UriFileJobOutputOutput {
	return i.ToUriFileJobOutputOutputWithContext(context.Background())
}

func (i UriFileJobOutputArgs) ToUriFileJobOutputOutputWithContext(ctx context.Context) UriFileJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobOutputOutput)
}

type UriFileJobOutputOutput struct{ *pulumi.OutputState }

func (UriFileJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutput)(nil)).Elem()
}

func (o UriFileJobOutputOutput) ToUriFileJobOutputOutput() UriFileJobOutputOutput {
	return o
}

func (o UriFileJobOutputOutput) ToUriFileJobOutputOutputWithContext(ctx context.Context) UriFileJobOutputOutput {
	return o
}

// Output Asset Name.
func (o UriFileJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o UriFileJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o UriFileJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o UriFileJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'uri_file'.
func (o UriFileJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFileJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o UriFileJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFileJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type UriFileJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_file'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutputResponse
func (val *UriFileJobOutputResponse) Defaults() *UriFileJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobOutputResponseOutput struct{ *pulumi.OutputState }

func (UriFileJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutputResponse)(nil)).Elem()
}

func (o UriFileJobOutputResponseOutput) ToUriFileJobOutputResponseOutput() UriFileJobOutputResponseOutput {
	return o
}

func (o UriFileJobOutputResponseOutput) ToUriFileJobOutputResponseOutputWithContext(ctx context.Context) UriFileJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o UriFileJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o UriFileJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o UriFileJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o UriFileJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'uri_file'.
func (o UriFileJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFileJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o UriFileJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFileJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// uri-folder data version entity
type UriFolderDataVersion struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualProperty `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersion
func (val *UriFolderDataVersion) Defaults() *UriFolderDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// UriFolderDataVersionInput is an input type that accepts UriFolderDataVersionArgs and UriFolderDataVersionOutput values.
// You can construct a concrete instance of `UriFolderDataVersionInput` via:
//
//	UriFolderDataVersionArgs{...}
type UriFolderDataVersionInput interface {
	pulumi.Input

	ToUriFolderDataVersionOutput() UriFolderDataVersionOutput
	ToUriFolderDataVersionOutputWithContext(context.Context) UriFolderDataVersionOutput
}

// uri-folder data version entity
type UriFolderDataVersionArgs struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty IntellectualPropertyPtrInput `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage pulumi.StringPtrInput `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersionArgs
func (val *UriFolderDataVersionArgs) Defaults() *UriFolderDataVersionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (UriFolderDataVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersion)(nil)).Elem()
}

func (i UriFolderDataVersionArgs) ToUriFolderDataVersionOutput() UriFolderDataVersionOutput {
	return i.ToUriFolderDataVersionOutputWithContext(context.Background())
}

func (i UriFolderDataVersionArgs) ToUriFolderDataVersionOutputWithContext(ctx context.Context) UriFolderDataVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderDataVersionOutput)
}

// uri-folder data version entity
type UriFolderDataVersionOutput struct{ *pulumi.OutputState }

func (UriFolderDataVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersion)(nil)).Elem()
}

func (o UriFolderDataVersionOutput) ToUriFolderDataVersionOutput() UriFolderDataVersionOutput {
	return o
}

func (o UriFolderDataVersionOutput) ToUriFolderDataVersionOutputWithContext(ctx context.Context) UriFolderDataVersionOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o UriFolderDataVersionOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_folder'.
func (o UriFolderDataVersionOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersion) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o UriFolderDataVersionOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersion) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFolderDataVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o UriFolderDataVersionOutput) IntellectualProperty() IntellectualPropertyPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *IntellectualProperty { return v.IntellectualProperty }).(IntellectualPropertyPtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o UriFolderDataVersionOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o UriFolderDataVersionOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFolderDataVersionOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersion) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o UriFolderDataVersionOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFolderDataVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersion) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// uri-folder data version entity
type UriFolderDataVersionResponse struct {
	// Specifies the lifecycle setting of managed data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Enum to determine the type of data.
	// Expected value is 'uri_folder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Intellectual Property details. Used if data is an Intellectual Property.
	IntellectualProperty *IntellectualPropertyResponse `pulumi:"intellectualProperty"`
	// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Stage in the data lifecycle assigned to this data asset
	Stage *string `pulumi:"stage"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersionResponse
func (val *UriFolderDataVersionResponse) Defaults() *UriFolderDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	tmp.IntellectualProperty = tmp.IntellectualProperty.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-folder data version entity
type UriFolderDataVersionResponseOutput struct{ *pulumi.OutputState }

func (UriFolderDataVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersionResponse)(nil)).Elem()
}

func (o UriFolderDataVersionResponseOutput) ToUriFolderDataVersionResponseOutput() UriFolderDataVersionResponseOutput {
	return o
}

func (o UriFolderDataVersionResponseOutput) ToUriFolderDataVersionResponseOutputWithContext(ctx context.Context) UriFolderDataVersionResponseOutput {
	return o
}

// Specifies the lifecycle setting of managed data asset.
func (o UriFolderDataVersionResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Enum to determine the type of data.
// Expected value is 'uri_folder'.
func (o UriFolderDataVersionResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Example: https://go.microsoft.com/fwlink/?linkid=2202330
func (o UriFolderDataVersionResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFolderDataVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Intellectual Property details. Used if data is an Intellectual Property.
func (o UriFolderDataVersionResponseOutput) IntellectualProperty() IntellectualPropertyResponsePtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *IntellectualPropertyResponse { return v.IntellectualProperty }).(IntellectualPropertyResponsePtrOutput)
}

// If the name version are system generated (anonymous registration). For types where Stage is defined, when Stage is provided it will be used to populate IsAnonymous
func (o UriFolderDataVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived? For types where Stage is defined, when Stage is provided it will be used to populate IsArchived
func (o UriFolderDataVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFolderDataVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Stage in the data lifecycle assigned to this data asset
func (o UriFolderDataVersionResponseOutput) Stage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *string { return v.Stage }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFolderDataVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type UriFolderJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_folder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInput
func (val *UriFolderJobInput) Defaults() *UriFolderJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFolderJobInputInput is an input type that accepts UriFolderJobInputArgs and UriFolderJobInputOutput values.
// You can construct a concrete instance of `UriFolderJobInputInput` via:
//
//	UriFolderJobInputArgs{...}
type UriFolderJobInputInput interface {
	pulumi.Input

	ToUriFolderJobInputOutput() UriFolderJobInputOutput
	ToUriFolderJobInputOutputWithContext(context.Context) UriFolderJobInputOutput
}

type UriFolderJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_folder'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInputArgs
func (val *UriFolderJobInputArgs) Defaults() *UriFolderJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (UriFolderJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInput)(nil)).Elem()
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputOutput() UriFolderJobInputOutput {
	return i.ToUriFolderJobInputOutputWithContext(context.Background())
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputOutputWithContext(ctx context.Context) UriFolderJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobInputOutput)
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputPtrOutput() UriFolderJobInputPtrOutput {
	return i.ToUriFolderJobInputPtrOutputWithContext(context.Background())
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputPtrOutputWithContext(ctx context.Context) UriFolderJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobInputOutput).ToUriFolderJobInputPtrOutputWithContext(ctx)
}

// UriFolderJobInputPtrInput is an input type that accepts UriFolderJobInputArgs, UriFolderJobInputPtr and UriFolderJobInputPtrOutput values.
// You can construct a concrete instance of `UriFolderJobInputPtrInput` via:
//
//	        UriFolderJobInputArgs{...}
//
//	or:
//
//	        nil
type UriFolderJobInputPtrInput interface {
	pulumi.Input

	ToUriFolderJobInputPtrOutput() UriFolderJobInputPtrOutput
	ToUriFolderJobInputPtrOutputWithContext(context.Context) UriFolderJobInputPtrOutput
}

type uriFolderJobInputPtrType UriFolderJobInputArgs

func UriFolderJobInputPtr(v *UriFolderJobInputArgs) UriFolderJobInputPtrInput {
	return (*uriFolderJobInputPtrType)(v)
}

func (*uriFolderJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFolderJobInput)(nil)).Elem()
}

func (i *uriFolderJobInputPtrType) ToUriFolderJobInputPtrOutput() UriFolderJobInputPtrOutput {
	return i.ToUriFolderJobInputPtrOutputWithContext(context.Background())
}

func (i *uriFolderJobInputPtrType) ToUriFolderJobInputPtrOutputWithContext(ctx context.Context) UriFolderJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobInputPtrOutput)
}

type UriFolderJobInputOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInput)(nil)).Elem()
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputOutput() UriFolderJobInputOutput {
	return o
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputOutputWithContext(ctx context.Context) UriFolderJobInputOutput {
	return o
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputPtrOutput() UriFolderJobInputPtrOutput {
	return o.ToUriFolderJobInputPtrOutputWithContext(context.Background())
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputPtrOutputWithContext(ctx context.Context) UriFolderJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UriFolderJobInput) *UriFolderJobInput {
		return &v
	}).(UriFolderJobInputPtrOutput)
}

// Description for the input.
func (o UriFolderJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFolderJobInputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFolderJobInputPtrOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFolderJobInput)(nil)).Elem()
}

func (o UriFolderJobInputPtrOutput) ToUriFolderJobInputPtrOutput() UriFolderJobInputPtrOutput {
	return o
}

func (o UriFolderJobInputPtrOutput) ToUriFolderJobInputPtrOutputWithContext(ctx context.Context) UriFolderJobInputPtrOutput {
	return o
}

func (o UriFolderJobInputPtrOutput) Elem() UriFolderJobInputOutput {
	return o.ApplyT(func(v *UriFolderJobInput) UriFolderJobInput {
		if v != nil {
			return *v
		}
		var ret UriFolderJobInput
		return ret
	}).(UriFolderJobInputOutput)
}

// Description for the input.
func (o UriFolderJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFolderJobInputPtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInput) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type UriFolderJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'uri_folder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Input Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInputResponse
func (val *UriFolderJobInputResponse) Defaults() *UriFolderJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobInputResponseOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInputResponse)(nil)).Elem()
}

func (o UriFolderJobInputResponseOutput) ToUriFolderJobInputResponseOutput() UriFolderJobInputResponseOutput {
	return o
}

func (o UriFolderJobInputResponseOutput) ToUriFolderJobInputResponseOutputWithContext(ctx context.Context) UriFolderJobInputResponseOutput {
	return o
}

// Description for the input.
func (o UriFolderJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFolderJobInputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFolderJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UriFolderJobInputResponse)(nil)).Elem()
}

func (o UriFolderJobInputResponsePtrOutput) ToUriFolderJobInputResponsePtrOutput() UriFolderJobInputResponsePtrOutput {
	return o
}

func (o UriFolderJobInputResponsePtrOutput) ToUriFolderJobInputResponsePtrOutputWithContext(ctx context.Context) UriFolderJobInputResponsePtrOutput {
	return o
}

func (o UriFolderJobInputResponsePtrOutput) Elem() UriFolderJobInputResponseOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) UriFolderJobInputResponse {
		if v != nil {
			return *v
		}
		var ret UriFolderJobInputResponse
		return ret
	}).(UriFolderJobInputResponseOutput)
}

// Description for the input.
func (o UriFolderJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Path.
func (o UriFolderJobInputResponsePtrOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.PathOnCompute
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UriFolderJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type UriFolderJobOutput struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSetting `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_folder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutput
func (val *UriFolderJobOutput) Defaults() *UriFolderJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFolderJobOutputInput is an input type that accepts UriFolderJobOutputArgs and UriFolderJobOutputOutput values.
// You can construct a concrete instance of `UriFolderJobOutputInput` via:
//
//	UriFolderJobOutputArgs{...}
type UriFolderJobOutputInput interface {
	pulumi.Input

	ToUriFolderJobOutputOutput() UriFolderJobOutputOutput
	ToUriFolderJobOutputOutputWithContext(context.Context) UriFolderJobOutputOutput
}

type UriFolderJobOutputArgs struct {
	// Output Asset Name.
	AssetName pulumi.StringPtrInput `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion pulumi.StringPtrInput `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting AutoDeleteSettingPtrInput `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_folder'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute pulumi.StringPtrInput `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutputArgs
func (val *UriFolderJobOutputArgs) Defaults() *UriFolderJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (UriFolderJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutput)(nil)).Elem()
}

func (i UriFolderJobOutputArgs) ToUriFolderJobOutputOutput() UriFolderJobOutputOutput {
	return i.ToUriFolderJobOutputOutputWithContext(context.Background())
}

func (i UriFolderJobOutputArgs) ToUriFolderJobOutputOutputWithContext(ctx context.Context) UriFolderJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobOutputOutput)
}

type UriFolderJobOutputOutput struct{ *pulumi.OutputState }

func (UriFolderJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutput)(nil)).Elem()
}

func (o UriFolderJobOutputOutput) ToUriFolderJobOutputOutput() UriFolderJobOutputOutput {
	return o
}

func (o UriFolderJobOutputOutput) ToUriFolderJobOutputOutputWithContext(ctx context.Context) UriFolderJobOutputOutput {
	return o
}

// Output Asset Name.
func (o UriFolderJobOutputOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o UriFolderJobOutputOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o UriFolderJobOutputOutput) AutoDeleteSetting() AutoDeleteSettingPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *AutoDeleteSetting { return v.AutoDeleteSetting }).(AutoDeleteSettingPtrOutput)
}

// Description for the output.
func (o UriFolderJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFolderJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o UriFolderJobOutputOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFolderJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type UriFolderJobOutputResponse struct {
	// Output Asset Name.
	AssetName *string `pulumi:"assetName"`
	// Output Asset Version.
	AssetVersion *string `pulumi:"assetVersion"`
	// Auto delete setting of output data asset.
	AutoDeleteSetting *AutoDeleteSettingResponse `pulumi:"autoDeleteSetting"`
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'uri_folder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset Delivery Path.
	PathOnCompute *string `pulumi:"pathOnCompute"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutputResponse
func (val *UriFolderJobOutputResponse) Defaults() *UriFolderJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.AutoDeleteSetting = tmp.AutoDeleteSetting.Defaults()

	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobOutputResponseOutput struct{ *pulumi.OutputState }

func (UriFolderJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutputResponse)(nil)).Elem()
}

func (o UriFolderJobOutputResponseOutput) ToUriFolderJobOutputResponseOutput() UriFolderJobOutputResponseOutput {
	return o
}

func (o UriFolderJobOutputResponseOutput) ToUriFolderJobOutputResponseOutputWithContext(ctx context.Context) UriFolderJobOutputResponseOutput {
	return o
}

// Output Asset Name.
func (o UriFolderJobOutputResponseOutput) AssetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.AssetName }).(pulumi.StringPtrOutput)
}

// Output Asset Version.
func (o UriFolderJobOutputResponseOutput) AssetVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.AssetVersion }).(pulumi.StringPtrOutput)
}

// Auto delete setting of output data asset.
func (o UriFolderJobOutputResponseOutput) AutoDeleteSetting() AutoDeleteSettingResponsePtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *AutoDeleteSettingResponse { return v.AutoDeleteSetting }).(AutoDeleteSettingResponsePtrOutput)
}

// Description for the output.
func (o UriFolderJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'uri_folder'.
func (o UriFolderJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFolderJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset Delivery Path.
func (o UriFolderJobOutputResponseOutput) PathOnCompute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.PathOnCompute }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFolderJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentials struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName string `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `pulumi:"adminUserSshPublicKey"`
}

// UserAccountCredentialsInput is an input type that accepts UserAccountCredentialsArgs and UserAccountCredentialsOutput values.
// You can construct a concrete instance of `UserAccountCredentialsInput` via:
//
//	UserAccountCredentialsArgs{...}
type UserAccountCredentialsInput interface {
	pulumi.Input

	ToUserAccountCredentialsOutput() UserAccountCredentialsOutput
	ToUserAccountCredentialsOutputWithContext(context.Context) UserAccountCredentialsOutput
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentialsArgs struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName pulumi.StringInput `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword pulumi.StringPtrInput `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey pulumi.StringPtrInput `pulumi:"adminUserSshPublicKey"`
}

func (UserAccountCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountCredentials)(nil)).Elem()
}

func (i UserAccountCredentialsArgs) ToUserAccountCredentialsOutput() UserAccountCredentialsOutput {
	return i.ToUserAccountCredentialsOutputWithContext(context.Background())
}

func (i UserAccountCredentialsArgs) ToUserAccountCredentialsOutputWithContext(ctx context.Context) UserAccountCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountCredentialsOutput)
}

func (i UserAccountCredentialsArgs) ToUserAccountCredentialsPtrOutput() UserAccountCredentialsPtrOutput {
	return i.ToUserAccountCredentialsPtrOutputWithContext(context.Background())
}

func (i UserAccountCredentialsArgs) ToUserAccountCredentialsPtrOutputWithContext(ctx context.Context) UserAccountCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountCredentialsOutput).ToUserAccountCredentialsPtrOutputWithContext(ctx)
}

// UserAccountCredentialsPtrInput is an input type that accepts UserAccountCredentialsArgs, UserAccountCredentialsPtr and UserAccountCredentialsPtrOutput values.
// You can construct a concrete instance of `UserAccountCredentialsPtrInput` via:
//
//	        UserAccountCredentialsArgs{...}
//
//	or:
//
//	        nil
type UserAccountCredentialsPtrInput interface {
	pulumi.Input

	ToUserAccountCredentialsPtrOutput() UserAccountCredentialsPtrOutput
	ToUserAccountCredentialsPtrOutputWithContext(context.Context) UserAccountCredentialsPtrOutput
}

type userAccountCredentialsPtrType UserAccountCredentialsArgs

func UserAccountCredentialsPtr(v *UserAccountCredentialsArgs) UserAccountCredentialsPtrInput {
	return (*userAccountCredentialsPtrType)(v)
}

func (*userAccountCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountCredentials)(nil)).Elem()
}

func (i *userAccountCredentialsPtrType) ToUserAccountCredentialsPtrOutput() UserAccountCredentialsPtrOutput {
	return i.ToUserAccountCredentialsPtrOutputWithContext(context.Background())
}

func (i *userAccountCredentialsPtrType) ToUserAccountCredentialsPtrOutputWithContext(ctx context.Context) UserAccountCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAccountCredentialsPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentialsOutput struct{ *pulumi.OutputState }

func (UserAccountCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountCredentials)(nil)).Elem()
}

func (o UserAccountCredentialsOutput) ToUserAccountCredentialsOutput() UserAccountCredentialsOutput {
	return o
}

func (o UserAccountCredentialsOutput) ToUserAccountCredentialsOutputWithContext(ctx context.Context) UserAccountCredentialsOutput {
	return o
}

func (o UserAccountCredentialsOutput) ToUserAccountCredentialsPtrOutput() UserAccountCredentialsPtrOutput {
	return o.ToUserAccountCredentialsPtrOutputWithContext(context.Background())
}

func (o UserAccountCredentialsOutput) ToUserAccountCredentialsPtrOutputWithContext(ctx context.Context) UserAccountCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserAccountCredentials) *UserAccountCredentials {
		return &v
	}).(UserAccountCredentialsPtrOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountCredentialsOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountCredentials) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Password of the administrator user account.
func (o UserAccountCredentialsOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountCredentials) *string { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountCredentialsOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountCredentials) *string { return v.AdminUserSshPublicKey }).(pulumi.StringPtrOutput)
}

type UserAccountCredentialsPtrOutput struct{ *pulumi.OutputState }

func (UserAccountCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountCredentials)(nil)).Elem()
}

func (o UserAccountCredentialsPtrOutput) ToUserAccountCredentialsPtrOutput() UserAccountCredentialsPtrOutput {
	return o
}

func (o UserAccountCredentialsPtrOutput) ToUserAccountCredentialsPtrOutputWithContext(ctx context.Context) UserAccountCredentialsPtrOutput {
	return o
}

func (o UserAccountCredentialsPtrOutput) Elem() UserAccountCredentialsOutput {
	return o.ApplyT(func(v *UserAccountCredentials) UserAccountCredentials {
		if v != nil {
			return *v
		}
		var ret UserAccountCredentials
		return ret
	}).(UserAccountCredentialsOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountCredentialsPtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentials) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Password of the administrator user account.
func (o UserAccountCredentialsPtrOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserPassword
	}).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountCredentialsPtrOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentials) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserSshPublicKey
	}).(pulumi.StringPtrOutput)
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentialsResponse struct {
	// Name of the administrator user account which can be used to SSH to nodes.
	AdminUserName string `pulumi:"adminUserName"`
	// Password of the administrator user account.
	AdminUserPassword *string `pulumi:"adminUserPassword"`
	// SSH public key of the administrator user account.
	AdminUserSshPublicKey *string `pulumi:"adminUserSshPublicKey"`
}

// Settings for user account that gets created on each on the nodes of a compute.
type UserAccountCredentialsResponseOutput struct{ *pulumi.OutputState }

func (UserAccountCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAccountCredentialsResponse)(nil)).Elem()
}

func (o UserAccountCredentialsResponseOutput) ToUserAccountCredentialsResponseOutput() UserAccountCredentialsResponseOutput {
	return o
}

func (o UserAccountCredentialsResponseOutput) ToUserAccountCredentialsResponseOutputWithContext(ctx context.Context) UserAccountCredentialsResponseOutput {
	return o
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountCredentialsResponseOutput) AdminUserName() pulumi.StringOutput {
	return o.ApplyT(func(v UserAccountCredentialsResponse) string { return v.AdminUserName }).(pulumi.StringOutput)
}

// Password of the administrator user account.
func (o UserAccountCredentialsResponseOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountCredentialsResponse) *string { return v.AdminUserPassword }).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountCredentialsResponseOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAccountCredentialsResponse) *string { return v.AdminUserSshPublicKey }).(pulumi.StringPtrOutput)
}

type UserAccountCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (UserAccountCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserAccountCredentialsResponse)(nil)).Elem()
}

func (o UserAccountCredentialsResponsePtrOutput) ToUserAccountCredentialsResponsePtrOutput() UserAccountCredentialsResponsePtrOutput {
	return o
}

func (o UserAccountCredentialsResponsePtrOutput) ToUserAccountCredentialsResponsePtrOutputWithContext(ctx context.Context) UserAccountCredentialsResponsePtrOutput {
	return o
}

func (o UserAccountCredentialsResponsePtrOutput) Elem() UserAccountCredentialsResponseOutput {
	return o.ApplyT(func(v *UserAccountCredentialsResponse) UserAccountCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret UserAccountCredentialsResponse
		return ret
	}).(UserAccountCredentialsResponseOutput)
}

// Name of the administrator user account which can be used to SSH to nodes.
func (o UserAccountCredentialsResponsePtrOutput) AdminUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AdminUserName
	}).(pulumi.StringPtrOutput)
}

// Password of the administrator user account.
func (o UserAccountCredentialsResponsePtrOutput) AdminUserPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserPassword
	}).(pulumi.StringPtrOutput)
}

// SSH public key of the administrator user account.
func (o UserAccountCredentialsResponsePtrOutput) AdminUserSshPublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserAccountCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdminUserSshPublicKey
	}).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

type UserCreatedAcrAccount struct {
	// ARM ResourceId of a resource
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
}

// UserCreatedAcrAccountInput is an input type that accepts UserCreatedAcrAccountArgs and UserCreatedAcrAccountOutput values.
// You can construct a concrete instance of `UserCreatedAcrAccountInput` via:
//
//	UserCreatedAcrAccountArgs{...}
type UserCreatedAcrAccountInput interface {
	pulumi.Input

	ToUserCreatedAcrAccountOutput() UserCreatedAcrAccountOutput
	ToUserCreatedAcrAccountOutputWithContext(context.Context) UserCreatedAcrAccountOutput
}

type UserCreatedAcrAccountArgs struct {
	// ARM ResourceId of a resource
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
}

func (UserCreatedAcrAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedAcrAccount)(nil)).Elem()
}

func (i UserCreatedAcrAccountArgs) ToUserCreatedAcrAccountOutput() UserCreatedAcrAccountOutput {
	return i.ToUserCreatedAcrAccountOutputWithContext(context.Background())
}

func (i UserCreatedAcrAccountArgs) ToUserCreatedAcrAccountOutputWithContext(ctx context.Context) UserCreatedAcrAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedAcrAccountOutput)
}

func (i UserCreatedAcrAccountArgs) ToUserCreatedAcrAccountPtrOutput() UserCreatedAcrAccountPtrOutput {
	return i.ToUserCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i UserCreatedAcrAccountArgs) ToUserCreatedAcrAccountPtrOutputWithContext(ctx context.Context) UserCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedAcrAccountOutput).ToUserCreatedAcrAccountPtrOutputWithContext(ctx)
}

// UserCreatedAcrAccountPtrInput is an input type that accepts UserCreatedAcrAccountArgs, UserCreatedAcrAccountPtr and UserCreatedAcrAccountPtrOutput values.
// You can construct a concrete instance of `UserCreatedAcrAccountPtrInput` via:
//
//	        UserCreatedAcrAccountArgs{...}
//
//	or:
//
//	        nil
type UserCreatedAcrAccountPtrInput interface {
	pulumi.Input

	ToUserCreatedAcrAccountPtrOutput() UserCreatedAcrAccountPtrOutput
	ToUserCreatedAcrAccountPtrOutputWithContext(context.Context) UserCreatedAcrAccountPtrOutput
}

type userCreatedAcrAccountPtrType UserCreatedAcrAccountArgs

func UserCreatedAcrAccountPtr(v *UserCreatedAcrAccountArgs) UserCreatedAcrAccountPtrInput {
	return (*userCreatedAcrAccountPtrType)(v)
}

func (*userCreatedAcrAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedAcrAccount)(nil)).Elem()
}

func (i *userCreatedAcrAccountPtrType) ToUserCreatedAcrAccountPtrOutput() UserCreatedAcrAccountPtrOutput {
	return i.ToUserCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (i *userCreatedAcrAccountPtrType) ToUserCreatedAcrAccountPtrOutputWithContext(ctx context.Context) UserCreatedAcrAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedAcrAccountPtrOutput)
}

type UserCreatedAcrAccountOutput struct{ *pulumi.OutputState }

func (UserCreatedAcrAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedAcrAccount)(nil)).Elem()
}

func (o UserCreatedAcrAccountOutput) ToUserCreatedAcrAccountOutput() UserCreatedAcrAccountOutput {
	return o
}

func (o UserCreatedAcrAccountOutput) ToUserCreatedAcrAccountOutputWithContext(ctx context.Context) UserCreatedAcrAccountOutput {
	return o
}

func (o UserCreatedAcrAccountOutput) ToUserCreatedAcrAccountPtrOutput() UserCreatedAcrAccountPtrOutput {
	return o.ToUserCreatedAcrAccountPtrOutputWithContext(context.Background())
}

func (o UserCreatedAcrAccountOutput) ToUserCreatedAcrAccountPtrOutputWithContext(ctx context.Context) UserCreatedAcrAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserCreatedAcrAccount) *UserCreatedAcrAccount {
		return &v
	}).(UserCreatedAcrAccountPtrOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedAcrAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v UserCreatedAcrAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

type UserCreatedAcrAccountPtrOutput struct{ *pulumi.OutputState }

func (UserCreatedAcrAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedAcrAccount)(nil)).Elem()
}

func (o UserCreatedAcrAccountPtrOutput) ToUserCreatedAcrAccountPtrOutput() UserCreatedAcrAccountPtrOutput {
	return o
}

func (o UserCreatedAcrAccountPtrOutput) ToUserCreatedAcrAccountPtrOutputWithContext(ctx context.Context) UserCreatedAcrAccountPtrOutput {
	return o
}

func (o UserCreatedAcrAccountPtrOutput) Elem() UserCreatedAcrAccountOutput {
	return o.ApplyT(func(v *UserCreatedAcrAccount) UserCreatedAcrAccount {
		if v != nil {
			return *v
		}
		var ret UserCreatedAcrAccount
		return ret
	}).(UserCreatedAcrAccountOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedAcrAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *UserCreatedAcrAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

type UserCreatedAcrAccountResponse struct {
	// ARM ResourceId of a resource
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
}

type UserCreatedAcrAccountResponseOutput struct{ *pulumi.OutputState }

func (UserCreatedAcrAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedAcrAccountResponse)(nil)).Elem()
}

func (o UserCreatedAcrAccountResponseOutput) ToUserCreatedAcrAccountResponseOutput() UserCreatedAcrAccountResponseOutput {
	return o
}

func (o UserCreatedAcrAccountResponseOutput) ToUserCreatedAcrAccountResponseOutputWithContext(ctx context.Context) UserCreatedAcrAccountResponseOutput {
	return o
}

// ARM ResourceId of a resource
func (o UserCreatedAcrAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v UserCreatedAcrAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

type UserCreatedAcrAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (UserCreatedAcrAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedAcrAccountResponse)(nil)).Elem()
}

func (o UserCreatedAcrAccountResponsePtrOutput) ToUserCreatedAcrAccountResponsePtrOutput() UserCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o UserCreatedAcrAccountResponsePtrOutput) ToUserCreatedAcrAccountResponsePtrOutputWithContext(ctx context.Context) UserCreatedAcrAccountResponsePtrOutput {
	return o
}

func (o UserCreatedAcrAccountResponsePtrOutput) Elem() UserCreatedAcrAccountResponseOutput {
	return o.ApplyT(func(v *UserCreatedAcrAccountResponse) UserCreatedAcrAccountResponse {
		if v != nil {
			return *v
		}
		var ret UserCreatedAcrAccountResponse
		return ret
	}).(UserCreatedAcrAccountResponseOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedAcrAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *UserCreatedAcrAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

type UserCreatedStorageAccount struct {
	// ARM ResourceId of a resource
	ArmResourceId *ArmResourceId `pulumi:"armResourceId"`
}

// UserCreatedStorageAccountInput is an input type that accepts UserCreatedStorageAccountArgs and UserCreatedStorageAccountOutput values.
// You can construct a concrete instance of `UserCreatedStorageAccountInput` via:
//
//	UserCreatedStorageAccountArgs{...}
type UserCreatedStorageAccountInput interface {
	pulumi.Input

	ToUserCreatedStorageAccountOutput() UserCreatedStorageAccountOutput
	ToUserCreatedStorageAccountOutputWithContext(context.Context) UserCreatedStorageAccountOutput
}

type UserCreatedStorageAccountArgs struct {
	// ARM ResourceId of a resource
	ArmResourceId ArmResourceIdPtrInput `pulumi:"armResourceId"`
}

func (UserCreatedStorageAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedStorageAccount)(nil)).Elem()
}

func (i UserCreatedStorageAccountArgs) ToUserCreatedStorageAccountOutput() UserCreatedStorageAccountOutput {
	return i.ToUserCreatedStorageAccountOutputWithContext(context.Background())
}

func (i UserCreatedStorageAccountArgs) ToUserCreatedStorageAccountOutputWithContext(ctx context.Context) UserCreatedStorageAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedStorageAccountOutput)
}

func (i UserCreatedStorageAccountArgs) ToUserCreatedStorageAccountPtrOutput() UserCreatedStorageAccountPtrOutput {
	return i.ToUserCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i UserCreatedStorageAccountArgs) ToUserCreatedStorageAccountPtrOutputWithContext(ctx context.Context) UserCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedStorageAccountOutput).ToUserCreatedStorageAccountPtrOutputWithContext(ctx)
}

// UserCreatedStorageAccountPtrInput is an input type that accepts UserCreatedStorageAccountArgs, UserCreatedStorageAccountPtr and UserCreatedStorageAccountPtrOutput values.
// You can construct a concrete instance of `UserCreatedStorageAccountPtrInput` via:
//
//	        UserCreatedStorageAccountArgs{...}
//
//	or:
//
//	        nil
type UserCreatedStorageAccountPtrInput interface {
	pulumi.Input

	ToUserCreatedStorageAccountPtrOutput() UserCreatedStorageAccountPtrOutput
	ToUserCreatedStorageAccountPtrOutputWithContext(context.Context) UserCreatedStorageAccountPtrOutput
}

type userCreatedStorageAccountPtrType UserCreatedStorageAccountArgs

func UserCreatedStorageAccountPtr(v *UserCreatedStorageAccountArgs) UserCreatedStorageAccountPtrInput {
	return (*userCreatedStorageAccountPtrType)(v)
}

func (*userCreatedStorageAccountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedStorageAccount)(nil)).Elem()
}

func (i *userCreatedStorageAccountPtrType) ToUserCreatedStorageAccountPtrOutput() UserCreatedStorageAccountPtrOutput {
	return i.ToUserCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (i *userCreatedStorageAccountPtrType) ToUserCreatedStorageAccountPtrOutputWithContext(ctx context.Context) UserCreatedStorageAccountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCreatedStorageAccountPtrOutput)
}

type UserCreatedStorageAccountOutput struct{ *pulumi.OutputState }

func (UserCreatedStorageAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedStorageAccount)(nil)).Elem()
}

func (o UserCreatedStorageAccountOutput) ToUserCreatedStorageAccountOutput() UserCreatedStorageAccountOutput {
	return o
}

func (o UserCreatedStorageAccountOutput) ToUserCreatedStorageAccountOutputWithContext(ctx context.Context) UserCreatedStorageAccountOutput {
	return o
}

func (o UserCreatedStorageAccountOutput) ToUserCreatedStorageAccountPtrOutput() UserCreatedStorageAccountPtrOutput {
	return o.ToUserCreatedStorageAccountPtrOutputWithContext(context.Background())
}

func (o UserCreatedStorageAccountOutput) ToUserCreatedStorageAccountPtrOutputWithContext(ctx context.Context) UserCreatedStorageAccountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserCreatedStorageAccount) *UserCreatedStorageAccount {
		return &v
	}).(UserCreatedStorageAccountPtrOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedStorageAccountOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v UserCreatedStorageAccount) *ArmResourceId { return v.ArmResourceId }).(ArmResourceIdPtrOutput)
}

type UserCreatedStorageAccountPtrOutput struct{ *pulumi.OutputState }

func (UserCreatedStorageAccountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedStorageAccount)(nil)).Elem()
}

func (o UserCreatedStorageAccountPtrOutput) ToUserCreatedStorageAccountPtrOutput() UserCreatedStorageAccountPtrOutput {
	return o
}

func (o UserCreatedStorageAccountPtrOutput) ToUserCreatedStorageAccountPtrOutputWithContext(ctx context.Context) UserCreatedStorageAccountPtrOutput {
	return o
}

func (o UserCreatedStorageAccountPtrOutput) Elem() UserCreatedStorageAccountOutput {
	return o.ApplyT(func(v *UserCreatedStorageAccount) UserCreatedStorageAccount {
		if v != nil {
			return *v
		}
		var ret UserCreatedStorageAccount
		return ret
	}).(UserCreatedStorageAccountOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedStorageAccountPtrOutput) ArmResourceId() ArmResourceIdPtrOutput {
	return o.ApplyT(func(v *UserCreatedStorageAccount) *ArmResourceId {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdPtrOutput)
}

type UserCreatedStorageAccountResponse struct {
	// ARM ResourceId of a resource
	ArmResourceId *ArmResourceIdResponse `pulumi:"armResourceId"`
}

type UserCreatedStorageAccountResponseOutput struct{ *pulumi.OutputState }

func (UserCreatedStorageAccountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCreatedStorageAccountResponse)(nil)).Elem()
}

func (o UserCreatedStorageAccountResponseOutput) ToUserCreatedStorageAccountResponseOutput() UserCreatedStorageAccountResponseOutput {
	return o
}

func (o UserCreatedStorageAccountResponseOutput) ToUserCreatedStorageAccountResponseOutputWithContext(ctx context.Context) UserCreatedStorageAccountResponseOutput {
	return o
}

// ARM ResourceId of a resource
func (o UserCreatedStorageAccountResponseOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v UserCreatedStorageAccountResponse) *ArmResourceIdResponse { return v.ArmResourceId }).(ArmResourceIdResponsePtrOutput)
}

type UserCreatedStorageAccountResponsePtrOutput struct{ *pulumi.OutputState }

func (UserCreatedStorageAccountResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCreatedStorageAccountResponse)(nil)).Elem()
}

func (o UserCreatedStorageAccountResponsePtrOutput) ToUserCreatedStorageAccountResponsePtrOutput() UserCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o UserCreatedStorageAccountResponsePtrOutput) ToUserCreatedStorageAccountResponsePtrOutputWithContext(ctx context.Context) UserCreatedStorageAccountResponsePtrOutput {
	return o
}

func (o UserCreatedStorageAccountResponsePtrOutput) Elem() UserCreatedStorageAccountResponseOutput {
	return o.ApplyT(func(v *UserCreatedStorageAccountResponse) UserCreatedStorageAccountResponse {
		if v != nil {
			return *v
		}
		var ret UserCreatedStorageAccountResponse
		return ret
	}).(UserCreatedStorageAccountResponseOutput)
}

// ARM ResourceId of a resource
func (o UserCreatedStorageAccountResponsePtrOutput) ArmResourceId() ArmResourceIdResponsePtrOutput {
	return o.ApplyT(func(v *UserCreatedStorageAccountResponse) *ArmResourceIdResponse {
		if v == nil {
			return nil
		}
		return v.ArmResourceId
	}).(ArmResourceIdResponsePtrOutput)
}

// User identity configuration.
type UserIdentity struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType string `pulumi:"identityType"`
}

// UserIdentityInput is an input type that accepts UserIdentityArgs and UserIdentityOutput values.
// You can construct a concrete instance of `UserIdentityInput` via:
//
//	UserIdentityArgs{...}
type UserIdentityInput interface {
	pulumi.Input

	ToUserIdentityOutput() UserIdentityOutput
	ToUserIdentityOutputWithContext(context.Context) UserIdentityOutput
}

// User identity configuration.
type UserIdentityArgs struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
}

func (UserIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (i UserIdentityArgs) ToUserIdentityOutput() UserIdentityOutput {
	return i.ToUserIdentityOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput)
}

func (i UserIdentityArgs) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput).ToUserIdentityPtrOutputWithContext(ctx)
}

// UserIdentityPtrInput is an input type that accepts UserIdentityArgs, UserIdentityPtr and UserIdentityPtrOutput values.
// You can construct a concrete instance of `UserIdentityPtrInput` via:
//
//	        UserIdentityArgs{...}
//
//	or:
//
//	        nil
type UserIdentityPtrInput interface {
	pulumi.Input

	ToUserIdentityPtrOutput() UserIdentityPtrOutput
	ToUserIdentityPtrOutputWithContext(context.Context) UserIdentityPtrOutput
}

type userIdentityPtrType UserIdentityArgs

func UserIdentityPtr(v *UserIdentityArgs) UserIdentityPtrInput {
	return (*userIdentityPtrType)(v)
}

func (*userIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPtrOutput)
}

// User identity configuration.
type UserIdentityOutput struct{ *pulumi.OutputState }

func (UserIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (o UserIdentityOutput) ToUserIdentityOutput() UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (o UserIdentityOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserIdentity) *UserIdentity {
		return &v
	}).(UserIdentityPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentity) string { return v.IdentityType }).(pulumi.StringOutput)
}

type UserIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) Elem() UserIdentityOutput {
	return o.ApplyT(func(v *UserIdentity) UserIdentity {
		if v != nil {
			return *v
		}
		var ret UserIdentity
		return ret
	}).(UserIdentityOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// User identity configuration.
type UserIdentityResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType string `pulumi:"identityType"`
}

// User identity configuration.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

type UserIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) Elem() UserIdentityResponseOutput {
	return o.ApplyT(func(v *UserIdentityResponse) UserIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserIdentityResponse
		return ret
	}).(UserIdentityResponseOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

type UsernamePasswordAuthTypeWorkspaceConnectionProperties struct {
	// Authentication type of the connection target
	// Expected value is 'UsernamePassword'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category      *string                              `pulumi:"category"`
	Credentials   *WorkspaceConnectionUsernamePassword `pulumi:"credentials"`
	ExpiryTime    *string                              `pulumi:"expiryTime"`
	IsSharedToAll *bool                                `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

// UsernamePasswordAuthTypeWorkspaceConnectionPropertiesInput is an input type that accepts UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs and UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput values.
// You can construct a concrete instance of `UsernamePasswordAuthTypeWorkspaceConnectionPropertiesInput` via:
//
//	UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs{...}
type UsernamePasswordAuthTypeWorkspaceConnectionPropertiesInput interface {
	pulumi.Input

	ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput() UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput
	ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Context) UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput
}

type UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs struct {
	// Authentication type of the connection target
	// Expected value is 'UsernamePassword'.
	AuthType pulumi.StringInput `pulumi:"authType"`
	// Category of the connection
	Category      pulumi.StringPtrInput                       `pulumi:"category"`
	Credentials   WorkspaceConnectionUsernamePasswordPtrInput `pulumi:"credentials"`
	ExpiryTime    pulumi.StringPtrInput                       `pulumi:"expiryTime"`
	IsSharedToAll pulumi.BoolPtrInput                         `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       pulumi.StringMapInput   `pulumi:"metadata"`
	SharedUserList pulumi.StringArrayInput `pulumi:"sharedUserList"`
	Target         pulumi.StringPtrInput   `pulumi:"target"`
}

func (UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (i UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput() UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput {
	return i.ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutputWithContext(context.Background())
}

func (i UsernamePasswordAuthTypeWorkspaceConnectionPropertiesArgs) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput)
}

type UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput struct{ *pulumi.OutputState }

func (UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordAuthTypeWorkspaceConnectionProperties)(nil)).Elem()
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput() UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutputWithContext(ctx context.Context) UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'UsernamePassword'.
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) Credentials() WorkspaceConnectionUsernamePasswordPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) *WorkspaceConnectionUsernamePassword {
		return v.Credentials
	}).(WorkspaceConnectionUsernamePasswordPtrOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) []string { return v.SharedUserList }).(pulumi.StringArrayOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionProperties) *string { return v.Target }).(pulumi.StringPtrOutput)
}

type UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse struct {
	// Authentication type of the connection target
	// Expected value is 'UsernamePassword'.
	AuthType string `pulumi:"authType"`
	// Category of the connection
	Category                *string                                      `pulumi:"category"`
	CreatedByWorkspaceArmId string                                       `pulumi:"createdByWorkspaceArmId"`
	Credentials             *WorkspaceConnectionUsernamePasswordResponse `pulumi:"credentials"`
	ExpiryTime              *string                                      `pulumi:"expiryTime"`
	// Group based on connection category
	Group         string `pulumi:"group"`
	IsSharedToAll *bool  `pulumi:"isSharedToAll"`
	// Store user metadata for this connection
	Metadata       map[string]string `pulumi:"metadata"`
	SharedUserList []string          `pulumi:"sharedUserList"`
	Target         *string           `pulumi:"target"`
}

type UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput struct{ *pulumi.OutputState }

func (UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse)(nil)).Elem()
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput() UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) ToUsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutputWithContext(ctx context.Context) UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput {
	return o
}

// Authentication type of the connection target
// Expected value is 'UsernamePassword'.
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.AuthType }).(pulumi.StringOutput)
}

// Category of the connection
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) CreatedByWorkspaceArmId() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) string {
		return v.CreatedByWorkspaceArmId
	}).(pulumi.StringOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) Credentials() WorkspaceConnectionUsernamePasswordResponsePtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) *WorkspaceConnectionUsernamePasswordResponse {
		return v.Credentials
	}).(WorkspaceConnectionUsernamePasswordResponsePtrOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) ExpiryTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.ExpiryTime }).(pulumi.StringPtrOutput)
}

// Group based on connection category
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) string { return v.Group }).(pulumi.StringOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) IsSharedToAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) *bool { return v.IsSharedToAll }).(pulumi.BoolPtrOutput)
}

// Store user metadata for this connection
func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) map[string]string {
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) SharedUserList() pulumi.StringArrayOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) []string {
		return v.SharedUserList
	}).(pulumi.StringArrayOutput)
}

func (o UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on Azure Virtual Machines.
type VirtualMachine struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'VirtualMachine'.
	ComputeType string `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool                           `pulumi:"disableLocalAuth"`
	Properties       *VirtualMachineSchemaProperties `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// VirtualMachineInput is an input type that accepts VirtualMachineArgs and VirtualMachineOutput values.
// You can construct a concrete instance of `VirtualMachineInput` via:
//
//	VirtualMachineArgs{...}
type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(context.Context) VirtualMachineOutput
}

// A Machine Learning compute based on Azure Virtual Machines.
type VirtualMachineArgs struct {
	// Location for the underlying compute
	ComputeLocation pulumi.StringPtrInput `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'VirtualMachine'.
	ComputeType pulumi.StringInput `pulumi:"computeType"`
	// The description of the Machine Learning compute.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth pulumi.BoolPtrInput                    `pulumi:"disableLocalAuth"`
	Properties       VirtualMachineSchemaPropertiesPtrInput `pulumi:"properties"`
	// ARM resource id of the underlying compute
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArgs) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i VirtualMachineArgs) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput).ToVirtualMachinePtrOutputWithContext(ctx)
}

// VirtualMachinePtrInput is an input type that accepts VirtualMachineArgs, VirtualMachinePtr and VirtualMachinePtrOutput values.
// You can construct a concrete instance of `VirtualMachinePtrInput` via:
//
//	        VirtualMachineArgs{...}
//
//	or:
//
//	        nil
type VirtualMachinePtrInput interface {
	pulumi.Input

	ToVirtualMachinePtrOutput() VirtualMachinePtrOutput
	ToVirtualMachinePtrOutputWithContext(context.Context) VirtualMachinePtrOutput
}

type virtualMachinePtrType VirtualMachineArgs

func VirtualMachinePtr(v *VirtualMachineArgs) VirtualMachinePtrInput {
	return (*virtualMachinePtrType)(v)
}

func (*virtualMachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

// A Machine Learning compute based on Azure Virtual Machines.
type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil)).Elem()
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine) *VirtualMachine {
		return &v
	}).(VirtualMachinePtrOutput)
}

// Location for the underlying compute
func (o VirtualMachineOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'VirtualMachine'.
func (o VirtualMachineOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachine) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o VirtualMachineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o VirtualMachineOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

func (o VirtualMachineOutput) Properties() VirtualMachineSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *VirtualMachineSchemaProperties { return v.Properties }).(VirtualMachineSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o VirtualMachineOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachine) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type VirtualMachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil)).Elem()
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) Elem() VirtualMachineOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachine {
		if v != nil {
			return *v
		}
		var ret VirtualMachine
		return ret
	}).(VirtualMachineOutput)
}

// Location for the underlying compute
func (o VirtualMachinePtrOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *string {
		if v == nil {
			return nil
		}
		return v.ComputeLocation
	}).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'VirtualMachine'.
func (o VirtualMachinePtrOutput) ComputeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *string {
		if v == nil {
			return nil
		}
		return &v.ComputeType
	}).(pulumi.StringPtrOutput)
}

// The description of the Machine Learning compute.
func (o VirtualMachinePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o VirtualMachinePtrOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *bool {
		if v == nil {
			return nil
		}
		return v.DisableLocalAuth
	}).(pulumi.BoolPtrOutput)
}

func (o VirtualMachinePtrOutput) Properties() VirtualMachineSchemaPropertiesPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *VirtualMachineSchemaProperties {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(VirtualMachineSchemaPropertiesPtrOutput)
}

// ARM resource id of the underlying compute
func (o VirtualMachinePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachine) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImage struct {
	// Virtual Machine image path
	Id string `pulumi:"id"`
}

// VirtualMachineImageInput is an input type that accepts VirtualMachineImageArgs and VirtualMachineImageOutput values.
// You can construct a concrete instance of `VirtualMachineImageInput` via:
//
//	VirtualMachineImageArgs{...}
type VirtualMachineImageInput interface {
	pulumi.Input

	ToVirtualMachineImageOutput() VirtualMachineImageOutput
	ToVirtualMachineImageOutputWithContext(context.Context) VirtualMachineImageOutput
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImageArgs struct {
	// Virtual Machine image path
	Id pulumi.StringInput `pulumi:"id"`
}

func (VirtualMachineImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineImage)(nil)).Elem()
}

func (i VirtualMachineImageArgs) ToVirtualMachineImageOutput() VirtualMachineImageOutput {
	return i.ToVirtualMachineImageOutputWithContext(context.Background())
}

func (i VirtualMachineImageArgs) ToVirtualMachineImageOutputWithContext(ctx context.Context) VirtualMachineImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineImageOutput)
}

func (i VirtualMachineImageArgs) ToVirtualMachineImagePtrOutput() VirtualMachineImagePtrOutput {
	return i.ToVirtualMachineImagePtrOutputWithContext(context.Background())
}

func (i VirtualMachineImageArgs) ToVirtualMachineImagePtrOutputWithContext(ctx context.Context) VirtualMachineImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineImageOutput).ToVirtualMachineImagePtrOutputWithContext(ctx)
}

// VirtualMachineImagePtrInput is an input type that accepts VirtualMachineImageArgs, VirtualMachineImagePtr and VirtualMachineImagePtrOutput values.
// You can construct a concrete instance of `VirtualMachineImagePtrInput` via:
//
//	        VirtualMachineImageArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineImagePtrInput interface {
	pulumi.Input

	ToVirtualMachineImagePtrOutput() VirtualMachineImagePtrOutput
	ToVirtualMachineImagePtrOutputWithContext(context.Context) VirtualMachineImagePtrOutput
}

type virtualMachineImagePtrType VirtualMachineImageArgs

func VirtualMachineImagePtr(v *VirtualMachineImageArgs) VirtualMachineImagePtrInput {
	return (*virtualMachineImagePtrType)(v)
}

func (*virtualMachineImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineImage)(nil)).Elem()
}

func (i *virtualMachineImagePtrType) ToVirtualMachineImagePtrOutput() VirtualMachineImagePtrOutput {
	return i.ToVirtualMachineImagePtrOutputWithContext(context.Background())
}

func (i *virtualMachineImagePtrType) ToVirtualMachineImagePtrOutputWithContext(ctx context.Context) VirtualMachineImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineImagePtrOutput)
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImageOutput struct{ *pulumi.OutputState }

func (VirtualMachineImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineImage)(nil)).Elem()
}

func (o VirtualMachineImageOutput) ToVirtualMachineImageOutput() VirtualMachineImageOutput {
	return o
}

func (o VirtualMachineImageOutput) ToVirtualMachineImageOutputWithContext(ctx context.Context) VirtualMachineImageOutput {
	return o
}

func (o VirtualMachineImageOutput) ToVirtualMachineImagePtrOutput() VirtualMachineImagePtrOutput {
	return o.ToVirtualMachineImagePtrOutputWithContext(context.Background())
}

func (o VirtualMachineImageOutput) ToVirtualMachineImagePtrOutputWithContext(ctx context.Context) VirtualMachineImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineImage) *VirtualMachineImage {
		return &v
	}).(VirtualMachineImagePtrOutput)
}

// Virtual Machine image path
func (o VirtualMachineImageOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineImage) string { return v.Id }).(pulumi.StringOutput)
}

type VirtualMachineImagePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineImage)(nil)).Elem()
}

func (o VirtualMachineImagePtrOutput) ToVirtualMachineImagePtrOutput() VirtualMachineImagePtrOutput {
	return o
}

func (o VirtualMachineImagePtrOutput) ToVirtualMachineImagePtrOutputWithContext(ctx context.Context) VirtualMachineImagePtrOutput {
	return o
}

func (o VirtualMachineImagePtrOutput) Elem() VirtualMachineImageOutput {
	return o.ApplyT(func(v *VirtualMachineImage) VirtualMachineImage {
		if v != nil {
			return *v
		}
		var ret VirtualMachineImage
		return ret
	}).(VirtualMachineImageOutput)
}

// Virtual Machine image path
func (o VirtualMachineImagePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineImage) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImageResponse struct {
	// Virtual Machine image path
	Id string `pulumi:"id"`
}

// Virtual Machine image for Windows AML Compute
type VirtualMachineImageResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineImageResponse)(nil)).Elem()
}

func (o VirtualMachineImageResponseOutput) ToVirtualMachineImageResponseOutput() VirtualMachineImageResponseOutput {
	return o
}

func (o VirtualMachineImageResponseOutput) ToVirtualMachineImageResponseOutputWithContext(ctx context.Context) VirtualMachineImageResponseOutput {
	return o
}

// Virtual Machine image path
func (o VirtualMachineImageResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineImageResponse) string { return v.Id }).(pulumi.StringOutput)
}

type VirtualMachineImageResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineImageResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineImageResponse)(nil)).Elem()
}

func (o VirtualMachineImageResponsePtrOutput) ToVirtualMachineImageResponsePtrOutput() VirtualMachineImageResponsePtrOutput {
	return o
}

func (o VirtualMachineImageResponsePtrOutput) ToVirtualMachineImageResponsePtrOutputWithContext(ctx context.Context) VirtualMachineImageResponsePtrOutput {
	return o
}

func (o VirtualMachineImageResponsePtrOutput) Elem() VirtualMachineImageResponseOutput {
	return o.ApplyT(func(v *VirtualMachineImageResponse) VirtualMachineImageResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineImageResponse
		return ret
	}).(VirtualMachineImageResponseOutput)
}

// Virtual Machine image path
func (o VirtualMachineImageResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineImageResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// A Machine Learning compute based on Azure Virtual Machines.
type VirtualMachineResponse struct {
	// Location for the underlying compute
	ComputeLocation *string `pulumi:"computeLocation"`
	// The type of compute
	// Expected value is 'VirtualMachine'.
	ComputeType string `pulumi:"computeType"`
	// The time at which the compute was created.
	CreatedOn string `pulumi:"createdOn"`
	// The description of the Machine Learning compute.
	Description *string `pulumi:"description"`
	// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
	DisableLocalAuth *bool `pulumi:"disableLocalAuth"`
	// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
	IsAttachedCompute bool `pulumi:"isAttachedCompute"`
	// The time at which the compute was last modified.
	ModifiedOn string                                  `pulumi:"modifiedOn"`
	Properties *VirtualMachineSchemaResponseProperties `pulumi:"properties"`
	// Errors during provisioning
	ProvisioningErrors []ErrorResponseResponse `pulumi:"provisioningErrors"`
	// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
	ProvisioningState string `pulumi:"provisioningState"`
	// ARM resource id of the underlying compute
	ResourceId *string `pulumi:"resourceId"`
}

// A Machine Learning compute based on Azure Virtual Machines.
type VirtualMachineResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineResponse)(nil)).Elem()
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutput() VirtualMachineResponseOutput {
	return o
}

func (o VirtualMachineResponseOutput) ToVirtualMachineResponseOutputWithContext(ctx context.Context) VirtualMachineResponseOutput {
	return o
}

// Location for the underlying compute
func (o VirtualMachineResponseOutput) ComputeLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResponse) *string { return v.ComputeLocation }).(pulumi.StringPtrOutput)
}

// The type of compute
// Expected value is 'VirtualMachine'.
func (o VirtualMachineResponseOutput) ComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.ComputeType }).(pulumi.StringOutput)
}

// The time at which the compute was created.
func (o VirtualMachineResponseOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.CreatedOn }).(pulumi.StringOutput)
}

// The description of the Machine Learning compute.
func (o VirtualMachineResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication.
func (o VirtualMachineResponseOutput) DisableLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineResponse) *bool { return v.DisableLocalAuth }).(pulumi.BoolPtrOutput)
}

// Indicating whether the compute was provisioned by user and brought from outside if true, or machine learning service provisioned it if false.
func (o VirtualMachineResponseOutput) IsAttachedCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualMachineResponse) bool { return v.IsAttachedCompute }).(pulumi.BoolOutput)
}

// The time at which the compute was last modified.
func (o VirtualMachineResponseOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.ModifiedOn }).(pulumi.StringOutput)
}

func (o VirtualMachineResponseOutput) Properties() VirtualMachineSchemaResponsePropertiesPtrOutput {
	return o.ApplyT(func(v VirtualMachineResponse) *VirtualMachineSchemaResponseProperties { return v.Properties }).(VirtualMachineSchemaResponsePropertiesPtrOutput)
}

// Errors during provisioning
func (o VirtualMachineResponseOutput) ProvisioningErrors() ErrorResponseResponseArrayOutput {
	return o.ApplyT(func(v VirtualMachineResponse) []ErrorResponseResponse { return v.ProvisioningErrors }).(ErrorResponseResponseArrayOutput)
}

// The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
func (o VirtualMachineResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// ARM resource id of the underlying compute
func (o VirtualMachineResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type VirtualMachineSchemaProperties struct {
	// Public IP address of the virtual machine.
	Address *string `pulumi:"address"`
	// Admin credentials for virtual machine
	AdministratorAccount *VirtualMachineSshCredentials `pulumi:"administratorAccount"`
	// Indicates whether this compute will be used for running notebooks.
	IsNotebookInstanceCompute *bool `pulumi:"isNotebookInstanceCompute"`
	// Notebook server port open for ssh connections.
	NotebookServerPort *int `pulumi:"notebookServerPort"`
	// Port open for ssh connections.
	SshPort *int `pulumi:"sshPort"`
	// Virtual Machine size
	VirtualMachineSize *string `pulumi:"virtualMachineSize"`
}

// VirtualMachineSchemaPropertiesInput is an input type that accepts VirtualMachineSchemaPropertiesArgs and VirtualMachineSchemaPropertiesOutput values.
// You can construct a concrete instance of `VirtualMachineSchemaPropertiesInput` via:
//
//	VirtualMachineSchemaPropertiesArgs{...}
type VirtualMachineSchemaPropertiesInput interface {
	pulumi.Input

	ToVirtualMachineSchemaPropertiesOutput() VirtualMachineSchemaPropertiesOutput
	ToVirtualMachineSchemaPropertiesOutputWithContext(context.Context) VirtualMachineSchemaPropertiesOutput
}

type VirtualMachineSchemaPropertiesArgs struct {
	// Public IP address of the virtual machine.
	Address pulumi.StringPtrInput `pulumi:"address"`
	// Admin credentials for virtual machine
	AdministratorAccount VirtualMachineSshCredentialsPtrInput `pulumi:"administratorAccount"`
	// Indicates whether this compute will be used for running notebooks.
	IsNotebookInstanceCompute pulumi.BoolPtrInput `pulumi:"isNotebookInstanceCompute"`
	// Notebook server port open for ssh connections.
	NotebookServerPort pulumi.IntPtrInput `pulumi:"notebookServerPort"`
	// Port open for ssh connections.
	SshPort pulumi.IntPtrInput `pulumi:"sshPort"`
	// Virtual Machine size
	VirtualMachineSize pulumi.StringPtrInput `pulumi:"virtualMachineSize"`
}

func (VirtualMachineSchemaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSchemaProperties)(nil)).Elem()
}

func (i VirtualMachineSchemaPropertiesArgs) ToVirtualMachineSchemaPropertiesOutput() VirtualMachineSchemaPropertiesOutput {
	return i.ToVirtualMachineSchemaPropertiesOutputWithContext(context.Background())
}

func (i VirtualMachineSchemaPropertiesArgs) ToVirtualMachineSchemaPropertiesOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSchemaPropertiesOutput)
}

func (i VirtualMachineSchemaPropertiesArgs) ToVirtualMachineSchemaPropertiesPtrOutput() VirtualMachineSchemaPropertiesPtrOutput {
	return i.ToVirtualMachineSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i VirtualMachineSchemaPropertiesArgs) ToVirtualMachineSchemaPropertiesPtrOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSchemaPropertiesOutput).ToVirtualMachineSchemaPropertiesPtrOutputWithContext(ctx)
}

// VirtualMachineSchemaPropertiesPtrInput is an input type that accepts VirtualMachineSchemaPropertiesArgs, VirtualMachineSchemaPropertiesPtr and VirtualMachineSchemaPropertiesPtrOutput values.
// You can construct a concrete instance of `VirtualMachineSchemaPropertiesPtrInput` via:
//
//	        VirtualMachineSchemaPropertiesArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineSchemaPropertiesPtrInput interface {
	pulumi.Input

	ToVirtualMachineSchemaPropertiesPtrOutput() VirtualMachineSchemaPropertiesPtrOutput
	ToVirtualMachineSchemaPropertiesPtrOutputWithContext(context.Context) VirtualMachineSchemaPropertiesPtrOutput
}

type virtualMachineSchemaPropertiesPtrType VirtualMachineSchemaPropertiesArgs

func VirtualMachineSchemaPropertiesPtr(v *VirtualMachineSchemaPropertiesArgs) VirtualMachineSchemaPropertiesPtrInput {
	return (*virtualMachineSchemaPropertiesPtrType)(v)
}

func (*virtualMachineSchemaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSchemaProperties)(nil)).Elem()
}

func (i *virtualMachineSchemaPropertiesPtrType) ToVirtualMachineSchemaPropertiesPtrOutput() VirtualMachineSchemaPropertiesPtrOutput {
	return i.ToVirtualMachineSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (i *virtualMachineSchemaPropertiesPtrType) ToVirtualMachineSchemaPropertiesPtrOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSchemaPropertiesPtrOutput)
}

type VirtualMachineSchemaPropertiesOutput struct{ *pulumi.OutputState }

func (VirtualMachineSchemaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSchemaProperties)(nil)).Elem()
}

func (o VirtualMachineSchemaPropertiesOutput) ToVirtualMachineSchemaPropertiesOutput() VirtualMachineSchemaPropertiesOutput {
	return o
}

func (o VirtualMachineSchemaPropertiesOutput) ToVirtualMachineSchemaPropertiesOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesOutput {
	return o
}

func (o VirtualMachineSchemaPropertiesOutput) ToVirtualMachineSchemaPropertiesPtrOutput() VirtualMachineSchemaPropertiesPtrOutput {
	return o.ToVirtualMachineSchemaPropertiesPtrOutputWithContext(context.Background())
}

func (o VirtualMachineSchemaPropertiesOutput) ToVirtualMachineSchemaPropertiesPtrOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineSchemaProperties) *VirtualMachineSchemaProperties {
		return &v
	}).(VirtualMachineSchemaPropertiesPtrOutput)
}

// Public IP address of the virtual machine.
func (o VirtualMachineSchemaPropertiesOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for virtual machine
func (o VirtualMachineSchemaPropertiesOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *VirtualMachineSshCredentials { return v.AdministratorAccount }).(VirtualMachineSshCredentialsPtrOutput)
}

// Indicates whether this compute will be used for running notebooks.
func (o VirtualMachineSchemaPropertiesOutput) IsNotebookInstanceCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *bool { return v.IsNotebookInstanceCompute }).(pulumi.BoolPtrOutput)
}

// Notebook server port open for ssh connections.
func (o VirtualMachineSchemaPropertiesOutput) NotebookServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *int { return v.NotebookServerPort }).(pulumi.IntPtrOutput)
}

// Port open for ssh connections.
func (o VirtualMachineSchemaPropertiesOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

// Virtual Machine size
func (o VirtualMachineSchemaPropertiesOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaProperties) *string { return v.VirtualMachineSize }).(pulumi.StringPtrOutput)
}

type VirtualMachineSchemaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSchemaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSchemaProperties)(nil)).Elem()
}

func (o VirtualMachineSchemaPropertiesPtrOutput) ToVirtualMachineSchemaPropertiesPtrOutput() VirtualMachineSchemaPropertiesPtrOutput {
	return o
}

func (o VirtualMachineSchemaPropertiesPtrOutput) ToVirtualMachineSchemaPropertiesPtrOutputWithContext(ctx context.Context) VirtualMachineSchemaPropertiesPtrOutput {
	return o
}

func (o VirtualMachineSchemaPropertiesPtrOutput) Elem() VirtualMachineSchemaPropertiesOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) VirtualMachineSchemaProperties {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSchemaProperties
		return ret
	}).(VirtualMachineSchemaPropertiesOutput)
}

// Public IP address of the virtual machine.
func (o VirtualMachineSchemaPropertiesPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for virtual machine
func (o VirtualMachineSchemaPropertiesPtrOutput) AdministratorAccount() VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *VirtualMachineSshCredentials {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsPtrOutput)
}

// Indicates whether this compute will be used for running notebooks.
func (o VirtualMachineSchemaPropertiesPtrOutput) IsNotebookInstanceCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsNotebookInstanceCompute
	}).(pulumi.BoolPtrOutput)
}

// Notebook server port open for ssh connections.
func (o VirtualMachineSchemaPropertiesPtrOutput) NotebookServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *int {
		if v == nil {
			return nil
		}
		return v.NotebookServerPort
	}).(pulumi.IntPtrOutput)
}

// Port open for ssh connections.
func (o VirtualMachineSchemaPropertiesPtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// Virtual Machine size
func (o VirtualMachineSchemaPropertiesPtrOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaProperties) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineSize
	}).(pulumi.StringPtrOutput)
}

type VirtualMachineSchemaResponseProperties struct {
	// Public IP address of the virtual machine.
	Address *string `pulumi:"address"`
	// Admin credentials for virtual machine
	AdministratorAccount *VirtualMachineSshCredentialsResponse `pulumi:"administratorAccount"`
	// Indicates whether this compute will be used for running notebooks.
	IsNotebookInstanceCompute *bool `pulumi:"isNotebookInstanceCompute"`
	// Notebook server port open for ssh connections.
	NotebookServerPort *int `pulumi:"notebookServerPort"`
	// Port open for ssh connections.
	SshPort *int `pulumi:"sshPort"`
	// Virtual Machine size
	VirtualMachineSize *string `pulumi:"virtualMachineSize"`
}

type VirtualMachineSchemaResponsePropertiesOutput struct{ *pulumi.OutputState }

func (VirtualMachineSchemaResponsePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSchemaResponseProperties)(nil)).Elem()
}

func (o VirtualMachineSchemaResponsePropertiesOutput) ToVirtualMachineSchemaResponsePropertiesOutput() VirtualMachineSchemaResponsePropertiesOutput {
	return o
}

func (o VirtualMachineSchemaResponsePropertiesOutput) ToVirtualMachineSchemaResponsePropertiesOutputWithContext(ctx context.Context) VirtualMachineSchemaResponsePropertiesOutput {
	return o
}

// Public IP address of the virtual machine.
func (o VirtualMachineSchemaResponsePropertiesOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// Admin credentials for virtual machine
func (o VirtualMachineSchemaResponsePropertiesOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *VirtualMachineSshCredentialsResponse {
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Indicates whether this compute will be used for running notebooks.
func (o VirtualMachineSchemaResponsePropertiesOutput) IsNotebookInstanceCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *bool { return v.IsNotebookInstanceCompute }).(pulumi.BoolPtrOutput)
}

// Notebook server port open for ssh connections.
func (o VirtualMachineSchemaResponsePropertiesOutput) NotebookServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *int { return v.NotebookServerPort }).(pulumi.IntPtrOutput)
}

// Port open for ssh connections.
func (o VirtualMachineSchemaResponsePropertiesOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *int { return v.SshPort }).(pulumi.IntPtrOutput)
}

// Virtual Machine size
func (o VirtualMachineSchemaResponsePropertiesOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSchemaResponseProperties) *string { return v.VirtualMachineSize }).(pulumi.StringPtrOutput)
}

type VirtualMachineSchemaResponsePropertiesPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSchemaResponsePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSchemaResponseProperties)(nil)).Elem()
}

func (o VirtualMachineSchemaResponsePropertiesPtrOutput) ToVirtualMachineSchemaResponsePropertiesPtrOutput() VirtualMachineSchemaResponsePropertiesPtrOutput {
	return o
}

func (o VirtualMachineSchemaResponsePropertiesPtrOutput) ToVirtualMachineSchemaResponsePropertiesPtrOutputWithContext(ctx context.Context) VirtualMachineSchemaResponsePropertiesPtrOutput {
	return o
}

func (o VirtualMachineSchemaResponsePropertiesPtrOutput) Elem() VirtualMachineSchemaResponsePropertiesOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) VirtualMachineSchemaResponseProperties {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSchemaResponseProperties
		return ret
	}).(VirtualMachineSchemaResponsePropertiesOutput)
}

// Public IP address of the virtual machine.
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.Address
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for virtual machine
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) AdministratorAccount() VirtualMachineSshCredentialsResponsePtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *VirtualMachineSshCredentialsResponse {
		if v == nil {
			return nil
		}
		return v.AdministratorAccount
	}).(VirtualMachineSshCredentialsResponsePtrOutput)
}

// Indicates whether this compute will be used for running notebooks.
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) IsNotebookInstanceCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *bool {
		if v == nil {
			return nil
		}
		return v.IsNotebookInstanceCompute
	}).(pulumi.BoolPtrOutput)
}

// Notebook server port open for ssh connections.
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) NotebookServerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.NotebookServerPort
	}).(pulumi.IntPtrOutput)
}

// Port open for ssh connections.
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) SshPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *int {
		if v == nil {
			return nil
		}
		return v.SshPort
	}).(pulumi.IntPtrOutput)
}

// Virtual Machine size
func (o VirtualMachineSchemaResponsePropertiesPtrOutput) VirtualMachineSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSchemaResponseProperties) *string {
		if v == nil {
			return nil
		}
		return v.VirtualMachineSize
	}).(pulumi.StringPtrOutput)
}

// Describes the properties of a VM size.
type VirtualMachineSizeResponse struct {
	// The estimated price information for using a VM.
	EstimatedVMPrices *EstimatedVMPricesResponse `pulumi:"estimatedVMPrices"`
	// The family name of the virtual machine size.
	Family string `pulumi:"family"`
	// The number of gPUs supported by the virtual machine size.
	Gpus int `pulumi:"gpus"`
	// Specifies if the virtual machine size supports low priority VMs.
	LowPriorityCapable bool `pulumi:"lowPriorityCapable"`
	// The resource volume size, in MB, allowed by the virtual machine size.
	MaxResourceVolumeMB int `pulumi:"maxResourceVolumeMB"`
	// The amount of memory, in GB, supported by the virtual machine size.
	MemoryGB float64 `pulumi:"memoryGB"`
	// The name of the virtual machine size.
	Name string `pulumi:"name"`
	// The OS VHD disk size, in MB, allowed by the virtual machine size.
	OsVhdSizeMB int `pulumi:"osVhdSizeMB"`
	// Specifies if the virtual machine size supports premium IO.
	PremiumIO bool `pulumi:"premiumIO"`
	// Specifies the compute types supported by the virtual machine size.
	SupportedComputeTypes []string `pulumi:"supportedComputeTypes"`
	// The number of vCPUs supported by the virtual machine size.
	VCPUs int `pulumi:"vCPUs"`
}

// Describes the properties of a VM size.
type VirtualMachineSizeResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSizeResponse)(nil)).Elem()
}

func (o VirtualMachineSizeResponseOutput) ToVirtualMachineSizeResponseOutput() VirtualMachineSizeResponseOutput {
	return o
}

func (o VirtualMachineSizeResponseOutput) ToVirtualMachineSizeResponseOutputWithContext(ctx context.Context) VirtualMachineSizeResponseOutput {
	return o
}

// The estimated price information for using a VM.
func (o VirtualMachineSizeResponseOutput) EstimatedVMPrices() EstimatedVMPricesResponsePtrOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) *EstimatedVMPricesResponse { return v.EstimatedVMPrices }).(EstimatedVMPricesResponsePtrOutput)
}

// The family name of the virtual machine size.
func (o VirtualMachineSizeResponseOutput) Family() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) string { return v.Family }).(pulumi.StringOutput)
}

// The number of gPUs supported by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) Gpus() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) int { return v.Gpus }).(pulumi.IntOutput)
}

// Specifies if the virtual machine size supports low priority VMs.
func (o VirtualMachineSizeResponseOutput) LowPriorityCapable() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) bool { return v.LowPriorityCapable }).(pulumi.BoolOutput)
}

// The resource volume size, in MB, allowed by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) MaxResourceVolumeMB() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) int { return v.MaxResourceVolumeMB }).(pulumi.IntOutput)
}

// The amount of memory, in GB, supported by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) MemoryGB() pulumi.Float64Output {
	return o.ApplyT(func(v VirtualMachineSizeResponse) float64 { return v.MemoryGB }).(pulumi.Float64Output)
}

// The name of the virtual machine size.
func (o VirtualMachineSizeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The OS VHD disk size, in MB, allowed by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) OsVhdSizeMB() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) int { return v.OsVhdSizeMB }).(pulumi.IntOutput)
}

// Specifies if the virtual machine size supports premium IO.
func (o VirtualMachineSizeResponseOutput) PremiumIO() pulumi.BoolOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) bool { return v.PremiumIO }).(pulumi.BoolOutput)
}

// Specifies the compute types supported by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) SupportedComputeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) []string { return v.SupportedComputeTypes }).(pulumi.StringArrayOutput)
}

// The number of vCPUs supported by the virtual machine size.
func (o VirtualMachineSizeResponseOutput) VCPUs() pulumi.IntOutput {
	return o.ApplyT(func(v VirtualMachineSizeResponse) int { return v.VCPUs }).(pulumi.IntOutput)
}

type VirtualMachineSizeResponseArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineSizeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachineSizeResponse)(nil)).Elem()
}

func (o VirtualMachineSizeResponseArrayOutput) ToVirtualMachineSizeResponseArrayOutput() VirtualMachineSizeResponseArrayOutput {
	return o
}

func (o VirtualMachineSizeResponseArrayOutput) ToVirtualMachineSizeResponseArrayOutputWithContext(ctx context.Context) VirtualMachineSizeResponseArrayOutput {
	return o
}

func (o VirtualMachineSizeResponseArrayOutput) Index(i pulumi.IntInput) VirtualMachineSizeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachineSizeResponse {
		return vs[0].([]VirtualMachineSizeResponse)[vs[1].(int)]
	}).(VirtualMachineSizeResponseOutput)
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentials struct {
	// Password of admin account
	Password *string `pulumi:"password"`
	// Private key data
	PrivateKeyData *string `pulumi:"privateKeyData"`
	// Public key data
	PublicKeyData *string `pulumi:"publicKeyData"`
	// Username of admin account
	Username *string `pulumi:"username"`
}

// VirtualMachineSshCredentialsInput is an input type that accepts VirtualMachineSshCredentialsArgs and VirtualMachineSshCredentialsOutput values.
// You can construct a concrete instance of `VirtualMachineSshCredentialsInput` via:
//
//	VirtualMachineSshCredentialsArgs{...}
type VirtualMachineSshCredentialsInput interface {
	pulumi.Input

	ToVirtualMachineSshCredentialsOutput() VirtualMachineSshCredentialsOutput
	ToVirtualMachineSshCredentialsOutputWithContext(context.Context) VirtualMachineSshCredentialsOutput
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentialsArgs struct {
	// Password of admin account
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Private key data
	PrivateKeyData pulumi.StringPtrInput `pulumi:"privateKeyData"`
	// Public key data
	PublicKeyData pulumi.StringPtrInput `pulumi:"publicKeyData"`
	// Username of admin account
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (VirtualMachineSshCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSshCredentials)(nil)).Elem()
}

func (i VirtualMachineSshCredentialsArgs) ToVirtualMachineSshCredentialsOutput() VirtualMachineSshCredentialsOutput {
	return i.ToVirtualMachineSshCredentialsOutputWithContext(context.Background())
}

func (i VirtualMachineSshCredentialsArgs) ToVirtualMachineSshCredentialsOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSshCredentialsOutput)
}

func (i VirtualMachineSshCredentialsArgs) ToVirtualMachineSshCredentialsPtrOutput() VirtualMachineSshCredentialsPtrOutput {
	return i.ToVirtualMachineSshCredentialsPtrOutputWithContext(context.Background())
}

func (i VirtualMachineSshCredentialsArgs) ToVirtualMachineSshCredentialsPtrOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSshCredentialsOutput).ToVirtualMachineSshCredentialsPtrOutputWithContext(ctx)
}

// VirtualMachineSshCredentialsPtrInput is an input type that accepts VirtualMachineSshCredentialsArgs, VirtualMachineSshCredentialsPtr and VirtualMachineSshCredentialsPtrOutput values.
// You can construct a concrete instance of `VirtualMachineSshCredentialsPtrInput` via:
//
//	        VirtualMachineSshCredentialsArgs{...}
//
//	or:
//
//	        nil
type VirtualMachineSshCredentialsPtrInput interface {
	pulumi.Input

	ToVirtualMachineSshCredentialsPtrOutput() VirtualMachineSshCredentialsPtrOutput
	ToVirtualMachineSshCredentialsPtrOutputWithContext(context.Context) VirtualMachineSshCredentialsPtrOutput
}

type virtualMachineSshCredentialsPtrType VirtualMachineSshCredentialsArgs

func VirtualMachineSshCredentialsPtr(v *VirtualMachineSshCredentialsArgs) VirtualMachineSshCredentialsPtrInput {
	return (*virtualMachineSshCredentialsPtrType)(v)
}

func (*virtualMachineSshCredentialsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSshCredentials)(nil)).Elem()
}

func (i *virtualMachineSshCredentialsPtrType) ToVirtualMachineSshCredentialsPtrOutput() VirtualMachineSshCredentialsPtrOutput {
	return i.ToVirtualMachineSshCredentialsPtrOutputWithContext(context.Background())
}

func (i *virtualMachineSshCredentialsPtrType) ToVirtualMachineSshCredentialsPtrOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineSshCredentialsPtrOutput)
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentialsOutput struct{ *pulumi.OutputState }

func (VirtualMachineSshCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSshCredentials)(nil)).Elem()
}

func (o VirtualMachineSshCredentialsOutput) ToVirtualMachineSshCredentialsOutput() VirtualMachineSshCredentialsOutput {
	return o
}

func (o VirtualMachineSshCredentialsOutput) ToVirtualMachineSshCredentialsOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsOutput {
	return o
}

func (o VirtualMachineSshCredentialsOutput) ToVirtualMachineSshCredentialsPtrOutput() VirtualMachineSshCredentialsPtrOutput {
	return o.ToVirtualMachineSshCredentialsPtrOutputWithContext(context.Background())
}

func (o VirtualMachineSshCredentialsOutput) ToVirtualMachineSshCredentialsPtrOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachineSshCredentials) *VirtualMachineSshCredentials {
		return &v
	}).(VirtualMachineSshCredentialsPtrOutput)
}

// Password of admin account
func (o VirtualMachineSshCredentialsOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentials) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Private key data
func (o VirtualMachineSshCredentialsOutput) PrivateKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentials) *string { return v.PrivateKeyData }).(pulumi.StringPtrOutput)
}

// Public key data
func (o VirtualMachineSshCredentialsOutput) PublicKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentials) *string { return v.PublicKeyData }).(pulumi.StringPtrOutput)
}

// Username of admin account
func (o VirtualMachineSshCredentialsOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentials) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VirtualMachineSshCredentialsPtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSshCredentialsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSshCredentials)(nil)).Elem()
}

func (o VirtualMachineSshCredentialsPtrOutput) ToVirtualMachineSshCredentialsPtrOutput() VirtualMachineSshCredentialsPtrOutput {
	return o
}

func (o VirtualMachineSshCredentialsPtrOutput) ToVirtualMachineSshCredentialsPtrOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsPtrOutput {
	return o
}

func (o VirtualMachineSshCredentialsPtrOutput) Elem() VirtualMachineSshCredentialsOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentials) VirtualMachineSshCredentials {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSshCredentials
		return ret
	}).(VirtualMachineSshCredentialsOutput)
}

// Password of admin account
func (o VirtualMachineSshCredentialsPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Private key data
func (o VirtualMachineSshCredentialsPtrOutput) PrivateKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyData
	}).(pulumi.StringPtrOutput)
}

// Public key data
func (o VirtualMachineSshCredentialsPtrOutput) PublicKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentials) *string {
		if v == nil {
			return nil
		}
		return v.PublicKeyData
	}).(pulumi.StringPtrOutput)
}

// Username of admin account
func (o VirtualMachineSshCredentialsPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentials) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentialsResponse struct {
	// Password of admin account
	Password *string `pulumi:"password"`
	// Private key data
	PrivateKeyData *string `pulumi:"privateKeyData"`
	// Public key data
	PublicKeyData *string `pulumi:"publicKeyData"`
	// Username of admin account
	Username *string `pulumi:"username"`
}

// Admin credentials for virtual machine
type VirtualMachineSshCredentialsResponseOutput struct{ *pulumi.OutputState }

func (VirtualMachineSshCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachineSshCredentialsResponse)(nil)).Elem()
}

func (o VirtualMachineSshCredentialsResponseOutput) ToVirtualMachineSshCredentialsResponseOutput() VirtualMachineSshCredentialsResponseOutput {
	return o
}

func (o VirtualMachineSshCredentialsResponseOutput) ToVirtualMachineSshCredentialsResponseOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsResponseOutput {
	return o
}

// Password of admin account
func (o VirtualMachineSshCredentialsResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentialsResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Private key data
func (o VirtualMachineSshCredentialsResponseOutput) PrivateKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentialsResponse) *string { return v.PrivateKeyData }).(pulumi.StringPtrOutput)
}

// Public key data
func (o VirtualMachineSshCredentialsResponseOutput) PublicKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentialsResponse) *string { return v.PublicKeyData }).(pulumi.StringPtrOutput)
}

// Username of admin account
func (o VirtualMachineSshCredentialsResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualMachineSshCredentialsResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type VirtualMachineSshCredentialsResponsePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachineSshCredentialsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachineSshCredentialsResponse)(nil)).Elem()
}

func (o VirtualMachineSshCredentialsResponsePtrOutput) ToVirtualMachineSshCredentialsResponsePtrOutput() VirtualMachineSshCredentialsResponsePtrOutput {
	return o
}

func (o VirtualMachineSshCredentialsResponsePtrOutput) ToVirtualMachineSshCredentialsResponsePtrOutputWithContext(ctx context.Context) VirtualMachineSshCredentialsResponsePtrOutput {
	return o
}

func (o VirtualMachineSshCredentialsResponsePtrOutput) Elem() VirtualMachineSshCredentialsResponseOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentialsResponse) VirtualMachineSshCredentialsResponse {
		if v != nil {
			return *v
		}
		var ret VirtualMachineSshCredentialsResponse
		return ret
	}).(VirtualMachineSshCredentialsResponseOutput)
}

// Password of admin account
func (o VirtualMachineSshCredentialsResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Private key data
func (o VirtualMachineSshCredentialsResponsePtrOutput) PrivateKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyData
	}).(pulumi.StringPtrOutput)
}

// Public key data
func (o VirtualMachineSshCredentialsResponsePtrOutput) PublicKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PublicKeyData
	}).(pulumi.StringPtrOutput)
}

// Username of admin account
func (o VirtualMachineSshCredentialsResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualMachineSshCredentialsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type VolumeDefinition struct {
	// Bind Options of the mount
	Bind *BindOptions `pulumi:"bind"`
	// Consistency of the volume
	Consistency *string `pulumi:"consistency"`
	// Indicate whether to mount volume as readOnly. Default value for this is false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Source of the mount. For bind mounts this is the host path.
	Source *string `pulumi:"source"`
	// Target of the mount. For bind mounts this is the path in the container.
	Target *string `pulumi:"target"`
	// tmpfs option of the mount
	Tmpfs *TmpfsOptions `pulumi:"tmpfs"`
	// Type of Volume Definition. Possible Values: bind,volume,tmpfs,npipe
	Type *string `pulumi:"type"`
	// Volume Options of the mount
	Volume *VolumeOptions `pulumi:"volume"`
}

// Defaults sets the appropriate defaults for VolumeDefinition
func (val *VolumeDefinition) Defaults() *VolumeDefinition {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "bind"
		tmp.Type = &type_
	}
	return &tmp
}

// VolumeDefinitionInput is an input type that accepts VolumeDefinitionArgs and VolumeDefinitionOutput values.
// You can construct a concrete instance of `VolumeDefinitionInput` via:
//
//	VolumeDefinitionArgs{...}
type VolumeDefinitionInput interface {
	pulumi.Input

	ToVolumeDefinitionOutput() VolumeDefinitionOutput
	ToVolumeDefinitionOutputWithContext(context.Context) VolumeDefinitionOutput
}

type VolumeDefinitionArgs struct {
	// Bind Options of the mount
	Bind BindOptionsPtrInput `pulumi:"bind"`
	// Consistency of the volume
	Consistency pulumi.StringPtrInput `pulumi:"consistency"`
	// Indicate whether to mount volume as readOnly. Default value for this is false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// Source of the mount. For bind mounts this is the host path.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Target of the mount. For bind mounts this is the path in the container.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// tmpfs option of the mount
	Tmpfs TmpfsOptionsPtrInput `pulumi:"tmpfs"`
	// Type of Volume Definition. Possible Values: bind,volume,tmpfs,npipe
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Volume Options of the mount
	Volume VolumeOptionsPtrInput `pulumi:"volume"`
}

// Defaults sets the appropriate defaults for VolumeDefinitionArgs
func (val *VolumeDefinitionArgs) Defaults() *VolumeDefinitionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		tmp.Type = pulumi.StringPtr("bind")
	}
	return &tmp
}
func (VolumeDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDefinition)(nil)).Elem()
}

func (i VolumeDefinitionArgs) ToVolumeDefinitionOutput() VolumeDefinitionOutput {
	return i.ToVolumeDefinitionOutputWithContext(context.Background())
}

func (i VolumeDefinitionArgs) ToVolumeDefinitionOutputWithContext(ctx context.Context) VolumeDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDefinitionOutput)
}

// VolumeDefinitionArrayInput is an input type that accepts VolumeDefinitionArray and VolumeDefinitionArrayOutput values.
// You can construct a concrete instance of `VolumeDefinitionArrayInput` via:
//
//	VolumeDefinitionArray{ VolumeDefinitionArgs{...} }
type VolumeDefinitionArrayInput interface {
	pulumi.Input

	ToVolumeDefinitionArrayOutput() VolumeDefinitionArrayOutput
	ToVolumeDefinitionArrayOutputWithContext(context.Context) VolumeDefinitionArrayOutput
}

type VolumeDefinitionArray []VolumeDefinitionInput

func (VolumeDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDefinition)(nil)).Elem()
}

func (i VolumeDefinitionArray) ToVolumeDefinitionArrayOutput() VolumeDefinitionArrayOutput {
	return i.ToVolumeDefinitionArrayOutputWithContext(context.Background())
}

func (i VolumeDefinitionArray) ToVolumeDefinitionArrayOutputWithContext(ctx context.Context) VolumeDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeDefinitionArrayOutput)
}

type VolumeDefinitionOutput struct{ *pulumi.OutputState }

func (VolumeDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDefinition)(nil)).Elem()
}

func (o VolumeDefinitionOutput) ToVolumeDefinitionOutput() VolumeDefinitionOutput {
	return o
}

func (o VolumeDefinitionOutput) ToVolumeDefinitionOutputWithContext(ctx context.Context) VolumeDefinitionOutput {
	return o
}

// Bind Options of the mount
func (o VolumeDefinitionOutput) Bind() BindOptionsPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *BindOptions { return v.Bind }).(BindOptionsPtrOutput)
}

// Consistency of the volume
func (o VolumeDefinitionOutput) Consistency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *string { return v.Consistency }).(pulumi.StringPtrOutput)
}

// Indicate whether to mount volume as readOnly. Default value for this is false.
func (o VolumeDefinitionOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Source of the mount. For bind mounts this is the host path.
func (o VolumeDefinitionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Target of the mount. For bind mounts this is the path in the container.
func (o VolumeDefinitionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// tmpfs option of the mount
func (o VolumeDefinitionOutput) Tmpfs() TmpfsOptionsPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *TmpfsOptions { return v.Tmpfs }).(TmpfsOptionsPtrOutput)
}

// Type of Volume Definition. Possible Values: bind,volume,tmpfs,npipe
func (o VolumeDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Volume Options of the mount
func (o VolumeDefinitionOutput) Volume() VolumeOptionsPtrOutput {
	return o.ApplyT(func(v VolumeDefinition) *VolumeOptions { return v.Volume }).(VolumeOptionsPtrOutput)
}

type VolumeDefinitionArrayOutput struct{ *pulumi.OutputState }

func (VolumeDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDefinition)(nil)).Elem()
}

func (o VolumeDefinitionArrayOutput) ToVolumeDefinitionArrayOutput() VolumeDefinitionArrayOutput {
	return o
}

func (o VolumeDefinitionArrayOutput) ToVolumeDefinitionArrayOutputWithContext(ctx context.Context) VolumeDefinitionArrayOutput {
	return o
}

func (o VolumeDefinitionArrayOutput) Index(i pulumi.IntInput) VolumeDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeDefinition {
		return vs[0].([]VolumeDefinition)[vs[1].(int)]
	}).(VolumeDefinitionOutput)
}

type VolumeDefinitionResponse struct {
	// Bind Options of the mount
	Bind *BindOptionsResponse `pulumi:"bind"`
	// Consistency of the volume
	Consistency *string `pulumi:"consistency"`
	// Indicate whether to mount volume as readOnly. Default value for this is false.
	ReadOnly *bool `pulumi:"readOnly"`
	// Source of the mount. For bind mounts this is the host path.
	Source *string `pulumi:"source"`
	// Target of the mount. For bind mounts this is the path in the container.
	Target *string `pulumi:"target"`
	// tmpfs option of the mount
	Tmpfs *TmpfsOptionsResponse `pulumi:"tmpfs"`
	// Type of Volume Definition. Possible Values: bind,volume,tmpfs,npipe
	Type *string `pulumi:"type"`
	// Volume Options of the mount
	Volume *VolumeOptionsResponse `pulumi:"volume"`
}

// Defaults sets the appropriate defaults for VolumeDefinitionResponse
func (val *VolumeDefinitionResponse) Defaults() *VolumeDefinitionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Type == nil {
		type_ := "bind"
		tmp.Type = &type_
	}
	return &tmp
}

type VolumeDefinitionResponseOutput struct{ *pulumi.OutputState }

func (VolumeDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeDefinitionResponse)(nil)).Elem()
}

func (o VolumeDefinitionResponseOutput) ToVolumeDefinitionResponseOutput() VolumeDefinitionResponseOutput {
	return o
}

func (o VolumeDefinitionResponseOutput) ToVolumeDefinitionResponseOutputWithContext(ctx context.Context) VolumeDefinitionResponseOutput {
	return o
}

// Bind Options of the mount
func (o VolumeDefinitionResponseOutput) Bind() BindOptionsResponsePtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *BindOptionsResponse { return v.Bind }).(BindOptionsResponsePtrOutput)
}

// Consistency of the volume
func (o VolumeDefinitionResponseOutput) Consistency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *string { return v.Consistency }).(pulumi.StringPtrOutput)
}

// Indicate whether to mount volume as readOnly. Default value for this is false.
func (o VolumeDefinitionResponseOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// Source of the mount. For bind mounts this is the host path.
func (o VolumeDefinitionResponseOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Target of the mount. For bind mounts this is the path in the container.
func (o VolumeDefinitionResponseOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// tmpfs option of the mount
func (o VolumeDefinitionResponseOutput) Tmpfs() TmpfsOptionsResponsePtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *TmpfsOptionsResponse { return v.Tmpfs }).(TmpfsOptionsResponsePtrOutput)
}

// Type of Volume Definition. Possible Values: bind,volume,tmpfs,npipe
func (o VolumeDefinitionResponseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Volume Options of the mount
func (o VolumeDefinitionResponseOutput) Volume() VolumeOptionsResponsePtrOutput {
	return o.ApplyT(func(v VolumeDefinitionResponse) *VolumeOptionsResponse { return v.Volume }).(VolumeOptionsResponsePtrOutput)
}

type VolumeDefinitionResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeDefinitionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeDefinitionResponse)(nil)).Elem()
}

func (o VolumeDefinitionResponseArrayOutput) ToVolumeDefinitionResponseArrayOutput() VolumeDefinitionResponseArrayOutput {
	return o
}

func (o VolumeDefinitionResponseArrayOutput) ToVolumeDefinitionResponseArrayOutputWithContext(ctx context.Context) VolumeDefinitionResponseArrayOutput {
	return o
}

func (o VolumeDefinitionResponseArrayOutput) Index(i pulumi.IntInput) VolumeDefinitionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeDefinitionResponse {
		return vs[0].([]VolumeDefinitionResponse)[vs[1].(int)]
	}).(VolumeDefinitionResponseOutput)
}

type VolumeOptions struct {
	// Indicate whether volume is nocopy
	Nocopy *bool `pulumi:"nocopy"`
}

// VolumeOptionsInput is an input type that accepts VolumeOptionsArgs and VolumeOptionsOutput values.
// You can construct a concrete instance of `VolumeOptionsInput` via:
//
//	VolumeOptionsArgs{...}
type VolumeOptionsInput interface {
	pulumi.Input

	ToVolumeOptionsOutput() VolumeOptionsOutput
	ToVolumeOptionsOutputWithContext(context.Context) VolumeOptionsOutput
}

type VolumeOptionsArgs struct {
	// Indicate whether volume is nocopy
	Nocopy pulumi.BoolPtrInput `pulumi:"nocopy"`
}

func (VolumeOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeOptions)(nil)).Elem()
}

func (i VolumeOptionsArgs) ToVolumeOptionsOutput() VolumeOptionsOutput {
	return i.ToVolumeOptionsOutputWithContext(context.Background())
}

func (i VolumeOptionsArgs) ToVolumeOptionsOutputWithContext(ctx context.Context) VolumeOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOptionsOutput)
}

func (i VolumeOptionsArgs) ToVolumeOptionsPtrOutput() VolumeOptionsPtrOutput {
	return i.ToVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i VolumeOptionsArgs) ToVolumeOptionsPtrOutputWithContext(ctx context.Context) VolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOptionsOutput).ToVolumeOptionsPtrOutputWithContext(ctx)
}

// VolumeOptionsPtrInput is an input type that accepts VolumeOptionsArgs, VolumeOptionsPtr and VolumeOptionsPtrOutput values.
// You can construct a concrete instance of `VolumeOptionsPtrInput` via:
//
//	        VolumeOptionsArgs{...}
//
//	or:
//
//	        nil
type VolumeOptionsPtrInput interface {
	pulumi.Input

	ToVolumeOptionsPtrOutput() VolumeOptionsPtrOutput
	ToVolumeOptionsPtrOutputWithContext(context.Context) VolumeOptionsPtrOutput
}

type volumeOptionsPtrType VolumeOptionsArgs

func VolumeOptionsPtr(v *VolumeOptionsArgs) VolumeOptionsPtrInput {
	return (*volumeOptionsPtrType)(v)
}

func (*volumeOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeOptions)(nil)).Elem()
}

func (i *volumeOptionsPtrType) ToVolumeOptionsPtrOutput() VolumeOptionsPtrOutput {
	return i.ToVolumeOptionsPtrOutputWithContext(context.Background())
}

func (i *volumeOptionsPtrType) ToVolumeOptionsPtrOutputWithContext(ctx context.Context) VolumeOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOptionsPtrOutput)
}

type VolumeOptionsOutput struct{ *pulumi.OutputState }

func (VolumeOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeOptions)(nil)).Elem()
}

func (o VolumeOptionsOutput) ToVolumeOptionsOutput() VolumeOptionsOutput {
	return o
}

func (o VolumeOptionsOutput) ToVolumeOptionsOutputWithContext(ctx context.Context) VolumeOptionsOutput {
	return o
}

func (o VolumeOptionsOutput) ToVolumeOptionsPtrOutput() VolumeOptionsPtrOutput {
	return o.ToVolumeOptionsPtrOutputWithContext(context.Background())
}

func (o VolumeOptionsOutput) ToVolumeOptionsPtrOutputWithContext(ctx context.Context) VolumeOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeOptions) *VolumeOptions {
		return &v
	}).(VolumeOptionsPtrOutput)
}

// Indicate whether volume is nocopy
func (o VolumeOptionsOutput) Nocopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeOptions) *bool { return v.Nocopy }).(pulumi.BoolPtrOutput)
}

type VolumeOptionsPtrOutput struct{ *pulumi.OutputState }

func (VolumeOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeOptions)(nil)).Elem()
}

func (o VolumeOptionsPtrOutput) ToVolumeOptionsPtrOutput() VolumeOptionsPtrOutput {
	return o
}

func (o VolumeOptionsPtrOutput) ToVolumeOptionsPtrOutputWithContext(ctx context.Context) VolumeOptionsPtrOutput {
	return o
}

func (o VolumeOptionsPtrOutput) Elem() VolumeOptionsOutput {
	return o.ApplyT(func(v *VolumeOptions) VolumeOptions {
		if v != nil {
			return *v
		}
		var ret VolumeOptions
		return ret
	}).(VolumeOptionsOutput)
}

// Indicate whether volume is nocopy
func (o VolumeOptionsPtrOutput) Nocopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Nocopy
	}).(pulumi.BoolPtrOutput)
}

type VolumeOptionsResponse struct {
	// Indicate whether volume is nocopy
	Nocopy *bool `pulumi:"nocopy"`
}

type VolumeOptionsResponseOutput struct{ *pulumi.OutputState }

func (VolumeOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeOptionsResponse)(nil)).Elem()
}

func (o VolumeOptionsResponseOutput) ToVolumeOptionsResponseOutput() VolumeOptionsResponseOutput {
	return o
}

func (o VolumeOptionsResponseOutput) ToVolumeOptionsResponseOutputWithContext(ctx context.Context) VolumeOptionsResponseOutput {
	return o
}

// Indicate whether volume is nocopy
func (o VolumeOptionsResponseOutput) Nocopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeOptionsResponse) *bool { return v.Nocopy }).(pulumi.BoolPtrOutput)
}

type VolumeOptionsResponsePtrOutput struct{ *pulumi.OutputState }

func (VolumeOptionsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeOptionsResponse)(nil)).Elem()
}

func (o VolumeOptionsResponsePtrOutput) ToVolumeOptionsResponsePtrOutput() VolumeOptionsResponsePtrOutput {
	return o
}

func (o VolumeOptionsResponsePtrOutput) ToVolumeOptionsResponsePtrOutputWithContext(ctx context.Context) VolumeOptionsResponsePtrOutput {
	return o
}

func (o VolumeOptionsResponsePtrOutput) Elem() VolumeOptionsResponseOutput {
	return o.ApplyT(func(v *VolumeOptionsResponse) VolumeOptionsResponse {
		if v != nil {
			return *v
		}
		var ret VolumeOptionsResponse
		return ret
	}).(VolumeOptionsResponseOutput)
}

// Indicate whether volume is nocopy
func (o VolumeOptionsResponsePtrOutput) Nocopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumeOptionsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nocopy
	}).(pulumi.BoolPtrOutput)
}

type WorkspaceConnectionAccessKey struct {
	AccessKeyId     *string `pulumi:"accessKeyId"`
	SecretAccessKey *string `pulumi:"secretAccessKey"`
}

// WorkspaceConnectionAccessKeyInput is an input type that accepts WorkspaceConnectionAccessKeyArgs and WorkspaceConnectionAccessKeyOutput values.
// You can construct a concrete instance of `WorkspaceConnectionAccessKeyInput` via:
//
//	WorkspaceConnectionAccessKeyArgs{...}
type WorkspaceConnectionAccessKeyInput interface {
	pulumi.Input

	ToWorkspaceConnectionAccessKeyOutput() WorkspaceConnectionAccessKeyOutput
	ToWorkspaceConnectionAccessKeyOutputWithContext(context.Context) WorkspaceConnectionAccessKeyOutput
}

type WorkspaceConnectionAccessKeyArgs struct {
	AccessKeyId     pulumi.StringPtrInput `pulumi:"accessKeyId"`
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
}

func (WorkspaceConnectionAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionAccessKey)(nil)).Elem()
}

func (i WorkspaceConnectionAccessKeyArgs) ToWorkspaceConnectionAccessKeyOutput() WorkspaceConnectionAccessKeyOutput {
	return i.ToWorkspaceConnectionAccessKeyOutputWithContext(context.Background())
}

func (i WorkspaceConnectionAccessKeyArgs) ToWorkspaceConnectionAccessKeyOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionAccessKeyOutput)
}

func (i WorkspaceConnectionAccessKeyArgs) ToWorkspaceConnectionAccessKeyPtrOutput() WorkspaceConnectionAccessKeyPtrOutput {
	return i.ToWorkspaceConnectionAccessKeyPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionAccessKeyArgs) ToWorkspaceConnectionAccessKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionAccessKeyOutput).ToWorkspaceConnectionAccessKeyPtrOutputWithContext(ctx)
}

// WorkspaceConnectionAccessKeyPtrInput is an input type that accepts WorkspaceConnectionAccessKeyArgs, WorkspaceConnectionAccessKeyPtr and WorkspaceConnectionAccessKeyPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionAccessKeyPtrInput` via:
//
//	        WorkspaceConnectionAccessKeyArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionAccessKeyPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionAccessKeyPtrOutput() WorkspaceConnectionAccessKeyPtrOutput
	ToWorkspaceConnectionAccessKeyPtrOutputWithContext(context.Context) WorkspaceConnectionAccessKeyPtrOutput
}

type workspaceConnectionAccessKeyPtrType WorkspaceConnectionAccessKeyArgs

func WorkspaceConnectionAccessKeyPtr(v *WorkspaceConnectionAccessKeyArgs) WorkspaceConnectionAccessKeyPtrInput {
	return (*workspaceConnectionAccessKeyPtrType)(v)
}

func (*workspaceConnectionAccessKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionAccessKey)(nil)).Elem()
}

func (i *workspaceConnectionAccessKeyPtrType) ToWorkspaceConnectionAccessKeyPtrOutput() WorkspaceConnectionAccessKeyPtrOutput {
	return i.ToWorkspaceConnectionAccessKeyPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionAccessKeyPtrType) ToWorkspaceConnectionAccessKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionAccessKeyPtrOutput)
}

type WorkspaceConnectionAccessKeyOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionAccessKey)(nil)).Elem()
}

func (o WorkspaceConnectionAccessKeyOutput) ToWorkspaceConnectionAccessKeyOutput() WorkspaceConnectionAccessKeyOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyOutput) ToWorkspaceConnectionAccessKeyOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyOutput) ToWorkspaceConnectionAccessKeyPtrOutput() WorkspaceConnectionAccessKeyPtrOutput {
	return o.ToWorkspaceConnectionAccessKeyPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionAccessKeyOutput) ToWorkspaceConnectionAccessKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionAccessKey) *WorkspaceConnectionAccessKey {
		return &v
	}).(WorkspaceConnectionAccessKeyPtrOutput)
}

func (o WorkspaceConnectionAccessKeyOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionAccessKey) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionAccessKeyOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionAccessKey) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionAccessKeyPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionAccessKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionAccessKey)(nil)).Elem()
}

func (o WorkspaceConnectionAccessKeyPtrOutput) ToWorkspaceConnectionAccessKeyPtrOutput() WorkspaceConnectionAccessKeyPtrOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyPtrOutput) ToWorkspaceConnectionAccessKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyPtrOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyPtrOutput) Elem() WorkspaceConnectionAccessKeyOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKey) WorkspaceConnectionAccessKey {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionAccessKey
		return ret
	}).(WorkspaceConnectionAccessKeyOutput)
}

func (o WorkspaceConnectionAccessKeyPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKey) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionAccessKeyPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKey) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionAccessKeyResponse struct {
	AccessKeyId     *string `pulumi:"accessKeyId"`
	SecretAccessKey *string `pulumi:"secretAccessKey"`
}

type WorkspaceConnectionAccessKeyResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionAccessKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionAccessKeyResponse)(nil)).Elem()
}

func (o WorkspaceConnectionAccessKeyResponseOutput) ToWorkspaceConnectionAccessKeyResponseOutput() WorkspaceConnectionAccessKeyResponseOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyResponseOutput) ToWorkspaceConnectionAccessKeyResponseOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyResponseOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyResponseOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionAccessKeyResponse) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionAccessKeyResponseOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionAccessKeyResponse) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionAccessKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionAccessKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionAccessKeyResponse)(nil)).Elem()
}

func (o WorkspaceConnectionAccessKeyResponsePtrOutput) ToWorkspaceConnectionAccessKeyResponsePtrOutput() WorkspaceConnectionAccessKeyResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyResponsePtrOutput) ToWorkspaceConnectionAccessKeyResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionAccessKeyResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionAccessKeyResponsePtrOutput) Elem() WorkspaceConnectionAccessKeyResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKeyResponse) WorkspaceConnectionAccessKeyResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionAccessKeyResponse
		return ret
	}).(WorkspaceConnectionAccessKeyResponseOutput)
}

func (o WorkspaceConnectionAccessKeyResponsePtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionAccessKeyResponsePtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionAccessKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// Api key object for workspace connection credential.
type WorkspaceConnectionApiKey struct {
	Key *string `pulumi:"key"`
}

// WorkspaceConnectionApiKeyInput is an input type that accepts WorkspaceConnectionApiKeyArgs and WorkspaceConnectionApiKeyOutput values.
// You can construct a concrete instance of `WorkspaceConnectionApiKeyInput` via:
//
//	WorkspaceConnectionApiKeyArgs{...}
type WorkspaceConnectionApiKeyInput interface {
	pulumi.Input

	ToWorkspaceConnectionApiKeyOutput() WorkspaceConnectionApiKeyOutput
	ToWorkspaceConnectionApiKeyOutputWithContext(context.Context) WorkspaceConnectionApiKeyOutput
}

// Api key object for workspace connection credential.
type WorkspaceConnectionApiKeyArgs struct {
	Key pulumi.StringPtrInput `pulumi:"key"`
}

func (WorkspaceConnectionApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionApiKey)(nil)).Elem()
}

func (i WorkspaceConnectionApiKeyArgs) ToWorkspaceConnectionApiKeyOutput() WorkspaceConnectionApiKeyOutput {
	return i.ToWorkspaceConnectionApiKeyOutputWithContext(context.Background())
}

func (i WorkspaceConnectionApiKeyArgs) ToWorkspaceConnectionApiKeyOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionApiKeyOutput)
}

func (i WorkspaceConnectionApiKeyArgs) ToWorkspaceConnectionApiKeyPtrOutput() WorkspaceConnectionApiKeyPtrOutput {
	return i.ToWorkspaceConnectionApiKeyPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionApiKeyArgs) ToWorkspaceConnectionApiKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionApiKeyOutput).ToWorkspaceConnectionApiKeyPtrOutputWithContext(ctx)
}

// WorkspaceConnectionApiKeyPtrInput is an input type that accepts WorkspaceConnectionApiKeyArgs, WorkspaceConnectionApiKeyPtr and WorkspaceConnectionApiKeyPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionApiKeyPtrInput` via:
//
//	        WorkspaceConnectionApiKeyArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionApiKeyPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionApiKeyPtrOutput() WorkspaceConnectionApiKeyPtrOutput
	ToWorkspaceConnectionApiKeyPtrOutputWithContext(context.Context) WorkspaceConnectionApiKeyPtrOutput
}

type workspaceConnectionApiKeyPtrType WorkspaceConnectionApiKeyArgs

func WorkspaceConnectionApiKeyPtr(v *WorkspaceConnectionApiKeyArgs) WorkspaceConnectionApiKeyPtrInput {
	return (*workspaceConnectionApiKeyPtrType)(v)
}

func (*workspaceConnectionApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionApiKey)(nil)).Elem()
}

func (i *workspaceConnectionApiKeyPtrType) ToWorkspaceConnectionApiKeyPtrOutput() WorkspaceConnectionApiKeyPtrOutput {
	return i.ToWorkspaceConnectionApiKeyPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionApiKeyPtrType) ToWorkspaceConnectionApiKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionApiKeyPtrOutput)
}

// Api key object for workspace connection credential.
type WorkspaceConnectionApiKeyOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionApiKey)(nil)).Elem()
}

func (o WorkspaceConnectionApiKeyOutput) ToWorkspaceConnectionApiKeyOutput() WorkspaceConnectionApiKeyOutput {
	return o
}

func (o WorkspaceConnectionApiKeyOutput) ToWorkspaceConnectionApiKeyOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyOutput {
	return o
}

func (o WorkspaceConnectionApiKeyOutput) ToWorkspaceConnectionApiKeyPtrOutput() WorkspaceConnectionApiKeyPtrOutput {
	return o.ToWorkspaceConnectionApiKeyPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionApiKeyOutput) ToWorkspaceConnectionApiKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionApiKey) *WorkspaceConnectionApiKey {
		return &v
	}).(WorkspaceConnectionApiKeyPtrOutput)
}

func (o WorkspaceConnectionApiKeyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionApiKey) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionApiKeyPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionApiKey)(nil)).Elem()
}

func (o WorkspaceConnectionApiKeyPtrOutput) ToWorkspaceConnectionApiKeyPtrOutput() WorkspaceConnectionApiKeyPtrOutput {
	return o
}

func (o WorkspaceConnectionApiKeyPtrOutput) ToWorkspaceConnectionApiKeyPtrOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyPtrOutput {
	return o
}

func (o WorkspaceConnectionApiKeyPtrOutput) Elem() WorkspaceConnectionApiKeyOutput {
	return o.ApplyT(func(v *WorkspaceConnectionApiKey) WorkspaceConnectionApiKey {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionApiKey
		return ret
	}).(WorkspaceConnectionApiKeyOutput)
}

func (o WorkspaceConnectionApiKeyPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionApiKey) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Api key object for workspace connection credential.
type WorkspaceConnectionApiKeyResponse struct {
	Key *string `pulumi:"key"`
}

// Api key object for workspace connection credential.
type WorkspaceConnectionApiKeyResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionApiKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionApiKeyResponse)(nil)).Elem()
}

func (o WorkspaceConnectionApiKeyResponseOutput) ToWorkspaceConnectionApiKeyResponseOutput() WorkspaceConnectionApiKeyResponseOutput {
	return o
}

func (o WorkspaceConnectionApiKeyResponseOutput) ToWorkspaceConnectionApiKeyResponseOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyResponseOutput {
	return o
}

func (o WorkspaceConnectionApiKeyResponseOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionApiKeyResponse) *string { return v.Key }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionApiKeyResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionApiKeyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionApiKeyResponse)(nil)).Elem()
}

func (o WorkspaceConnectionApiKeyResponsePtrOutput) ToWorkspaceConnectionApiKeyResponsePtrOutput() WorkspaceConnectionApiKeyResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionApiKeyResponsePtrOutput) ToWorkspaceConnectionApiKeyResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionApiKeyResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionApiKeyResponsePtrOutput) Elem() WorkspaceConnectionApiKeyResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionApiKeyResponse) WorkspaceConnectionApiKeyResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionApiKeyResponse
		return ret
	}).(WorkspaceConnectionApiKeyResponseOutput)
}

func (o WorkspaceConnectionApiKeyResponsePtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionApiKeyResponse) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionManagedIdentity struct {
	ClientId   *string `pulumi:"clientId"`
	ResourceId *string `pulumi:"resourceId"`
}

// WorkspaceConnectionManagedIdentityInput is an input type that accepts WorkspaceConnectionManagedIdentityArgs and WorkspaceConnectionManagedIdentityOutput values.
// You can construct a concrete instance of `WorkspaceConnectionManagedIdentityInput` via:
//
//	WorkspaceConnectionManagedIdentityArgs{...}
type WorkspaceConnectionManagedIdentityInput interface {
	pulumi.Input

	ToWorkspaceConnectionManagedIdentityOutput() WorkspaceConnectionManagedIdentityOutput
	ToWorkspaceConnectionManagedIdentityOutputWithContext(context.Context) WorkspaceConnectionManagedIdentityOutput
}

type WorkspaceConnectionManagedIdentityArgs struct {
	ClientId   pulumi.StringPtrInput `pulumi:"clientId"`
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (WorkspaceConnectionManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionManagedIdentity)(nil)).Elem()
}

func (i WorkspaceConnectionManagedIdentityArgs) ToWorkspaceConnectionManagedIdentityOutput() WorkspaceConnectionManagedIdentityOutput {
	return i.ToWorkspaceConnectionManagedIdentityOutputWithContext(context.Background())
}

func (i WorkspaceConnectionManagedIdentityArgs) ToWorkspaceConnectionManagedIdentityOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionManagedIdentityOutput)
}

func (i WorkspaceConnectionManagedIdentityArgs) ToWorkspaceConnectionManagedIdentityPtrOutput() WorkspaceConnectionManagedIdentityPtrOutput {
	return i.ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionManagedIdentityArgs) ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionManagedIdentityOutput).ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(ctx)
}

// WorkspaceConnectionManagedIdentityPtrInput is an input type that accepts WorkspaceConnectionManagedIdentityArgs, WorkspaceConnectionManagedIdentityPtr and WorkspaceConnectionManagedIdentityPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionManagedIdentityPtrInput` via:
//
//	        WorkspaceConnectionManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionManagedIdentityPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionManagedIdentityPtrOutput() WorkspaceConnectionManagedIdentityPtrOutput
	ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(context.Context) WorkspaceConnectionManagedIdentityPtrOutput
}

type workspaceConnectionManagedIdentityPtrType WorkspaceConnectionManagedIdentityArgs

func WorkspaceConnectionManagedIdentityPtr(v *WorkspaceConnectionManagedIdentityArgs) WorkspaceConnectionManagedIdentityPtrInput {
	return (*workspaceConnectionManagedIdentityPtrType)(v)
}

func (*workspaceConnectionManagedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionManagedIdentity)(nil)).Elem()
}

func (i *workspaceConnectionManagedIdentityPtrType) ToWorkspaceConnectionManagedIdentityPtrOutput() WorkspaceConnectionManagedIdentityPtrOutput {
	return i.ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionManagedIdentityPtrType) ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionManagedIdentityPtrOutput)
}

type WorkspaceConnectionManagedIdentityOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionManagedIdentity)(nil)).Elem()
}

func (o WorkspaceConnectionManagedIdentityOutput) ToWorkspaceConnectionManagedIdentityOutput() WorkspaceConnectionManagedIdentityOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityOutput) ToWorkspaceConnectionManagedIdentityOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityOutput) ToWorkspaceConnectionManagedIdentityPtrOutput() WorkspaceConnectionManagedIdentityPtrOutput {
	return o.ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionManagedIdentityOutput) ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionManagedIdentity) *WorkspaceConnectionManagedIdentity {
		return &v
	}).(WorkspaceConnectionManagedIdentityPtrOutput)
}

func (o WorkspaceConnectionManagedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionManagedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionManagedIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionManagedIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionManagedIdentity)(nil)).Elem()
}

func (o WorkspaceConnectionManagedIdentityPtrOutput) ToWorkspaceConnectionManagedIdentityPtrOutput() WorkspaceConnectionManagedIdentityPtrOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityPtrOutput) ToWorkspaceConnectionManagedIdentityPtrOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityPtrOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityPtrOutput) Elem() WorkspaceConnectionManagedIdentityOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentity) WorkspaceConnectionManagedIdentity {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionManagedIdentity
		return ret
	}).(WorkspaceConnectionManagedIdentityOutput)
}

func (o WorkspaceConnectionManagedIdentityPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionManagedIdentityPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionManagedIdentityResponse struct {
	ClientId   *string `pulumi:"clientId"`
	ResourceId *string `pulumi:"resourceId"`
}

type WorkspaceConnectionManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionManagedIdentityResponse)(nil)).Elem()
}

func (o WorkspaceConnectionManagedIdentityResponseOutput) ToWorkspaceConnectionManagedIdentityResponseOutput() WorkspaceConnectionManagedIdentityResponseOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityResponseOutput) ToWorkspaceConnectionManagedIdentityResponseOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityResponseOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionManagedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionManagedIdentityResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionManagedIdentityResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionManagedIdentityResponse)(nil)).Elem()
}

func (o WorkspaceConnectionManagedIdentityResponsePtrOutput) ToWorkspaceConnectionManagedIdentityResponsePtrOutput() WorkspaceConnectionManagedIdentityResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityResponsePtrOutput) ToWorkspaceConnectionManagedIdentityResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionManagedIdentityResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionManagedIdentityResponsePtrOutput) Elem() WorkspaceConnectionManagedIdentityResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentityResponse) WorkspaceConnectionManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionManagedIdentityResponse
		return ret
	}).(WorkspaceConnectionManagedIdentityResponseOutput)
}

func (o WorkspaceConnectionManagedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionManagedIdentityResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
type WorkspaceConnectionOAuth2 struct {
	// Required by Concur connection category
	AuthUrl *string `pulumi:"authUrl"`
	// Client id in the format of UUID
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	// Required by GoogleAdWords connection category
	DeveloperToken *string `pulumi:"developerToken"`
	Password       *string `pulumi:"password"`
	// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
	// where user needs to get RefreshToken offline
	RefreshToken *string `pulumi:"refreshToken"`
	// Required by QuickBooks and Xero connection categories
	TenantId *string `pulumi:"tenantId"`
	// Concur, ServiceNow auth server AccessToken grant type is 'Password'
	// which requires UsernamePassword
	Username *string `pulumi:"username"`
}

// WorkspaceConnectionOAuth2Input is an input type that accepts WorkspaceConnectionOAuth2Args and WorkspaceConnectionOAuth2Output values.
// You can construct a concrete instance of `WorkspaceConnectionOAuth2Input` via:
//
//	WorkspaceConnectionOAuth2Args{...}
type WorkspaceConnectionOAuth2Input interface {
	pulumi.Input

	ToWorkspaceConnectionOAuth2Output() WorkspaceConnectionOAuth2Output
	ToWorkspaceConnectionOAuth2OutputWithContext(context.Context) WorkspaceConnectionOAuth2Output
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
type WorkspaceConnectionOAuth2Args struct {
	// Required by Concur connection category
	AuthUrl pulumi.StringPtrInput `pulumi:"authUrl"`
	// Client id in the format of UUID
	ClientId     pulumi.StringPtrInput `pulumi:"clientId"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Required by GoogleAdWords connection category
	DeveloperToken pulumi.StringPtrInput `pulumi:"developerToken"`
	Password       pulumi.StringPtrInput `pulumi:"password"`
	// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
	// where user needs to get RefreshToken offline
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// Required by QuickBooks and Xero connection categories
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
	// Concur, ServiceNow auth server AccessToken grant type is 'Password'
	// which requires UsernamePassword
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (WorkspaceConnectionOAuth2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionOAuth2)(nil)).Elem()
}

func (i WorkspaceConnectionOAuth2Args) ToWorkspaceConnectionOAuth2Output() WorkspaceConnectionOAuth2Output {
	return i.ToWorkspaceConnectionOAuth2OutputWithContext(context.Background())
}

func (i WorkspaceConnectionOAuth2Args) ToWorkspaceConnectionOAuth2OutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2Output {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionOAuth2Output)
}

func (i WorkspaceConnectionOAuth2Args) ToWorkspaceConnectionOAuth2PtrOutput() WorkspaceConnectionOAuth2PtrOutput {
	return i.ToWorkspaceConnectionOAuth2PtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionOAuth2Args) ToWorkspaceConnectionOAuth2PtrOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionOAuth2Output).ToWorkspaceConnectionOAuth2PtrOutputWithContext(ctx)
}

// WorkspaceConnectionOAuth2PtrInput is an input type that accepts WorkspaceConnectionOAuth2Args, WorkspaceConnectionOAuth2Ptr and WorkspaceConnectionOAuth2PtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionOAuth2PtrInput` via:
//
//	        WorkspaceConnectionOAuth2Args{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionOAuth2PtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionOAuth2PtrOutput() WorkspaceConnectionOAuth2PtrOutput
	ToWorkspaceConnectionOAuth2PtrOutputWithContext(context.Context) WorkspaceConnectionOAuth2PtrOutput
}

type workspaceConnectionOAuth2PtrType WorkspaceConnectionOAuth2Args

func WorkspaceConnectionOAuth2Ptr(v *WorkspaceConnectionOAuth2Args) WorkspaceConnectionOAuth2PtrInput {
	return (*workspaceConnectionOAuth2PtrType)(v)
}

func (*workspaceConnectionOAuth2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionOAuth2)(nil)).Elem()
}

func (i *workspaceConnectionOAuth2PtrType) ToWorkspaceConnectionOAuth2PtrOutput() WorkspaceConnectionOAuth2PtrOutput {
	return i.ToWorkspaceConnectionOAuth2PtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionOAuth2PtrType) ToWorkspaceConnectionOAuth2PtrOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionOAuth2PtrOutput)
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
type WorkspaceConnectionOAuth2Output struct{ *pulumi.OutputState }

func (WorkspaceConnectionOAuth2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionOAuth2)(nil)).Elem()
}

func (o WorkspaceConnectionOAuth2Output) ToWorkspaceConnectionOAuth2Output() WorkspaceConnectionOAuth2Output {
	return o
}

func (o WorkspaceConnectionOAuth2Output) ToWorkspaceConnectionOAuth2OutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2Output {
	return o
}

func (o WorkspaceConnectionOAuth2Output) ToWorkspaceConnectionOAuth2PtrOutput() WorkspaceConnectionOAuth2PtrOutput {
	return o.ToWorkspaceConnectionOAuth2PtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionOAuth2Output) ToWorkspaceConnectionOAuth2PtrOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionOAuth2) *WorkspaceConnectionOAuth2 {
		return &v
	}).(WorkspaceConnectionOAuth2PtrOutput)
}

// Required by Concur connection category
func (o WorkspaceConnectionOAuth2Output) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

// Client id in the format of UUID
func (o WorkspaceConnectionOAuth2Output) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2Output) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Required by GoogleAdWords connection category
func (o WorkspaceConnectionOAuth2Output) DeveloperToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.DeveloperToken }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2Output) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
// where user needs to get RefreshToken offline
func (o WorkspaceConnectionOAuth2Output) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// Required by QuickBooks and Xero connection categories
func (o WorkspaceConnectionOAuth2Output) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Concur, ServiceNow auth server AccessToken grant type is 'Password'
// which requires UsernamePassword
func (o WorkspaceConnectionOAuth2Output) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionOAuth2PtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionOAuth2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionOAuth2)(nil)).Elem()
}

func (o WorkspaceConnectionOAuth2PtrOutput) ToWorkspaceConnectionOAuth2PtrOutput() WorkspaceConnectionOAuth2PtrOutput {
	return o
}

func (o WorkspaceConnectionOAuth2PtrOutput) ToWorkspaceConnectionOAuth2PtrOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2PtrOutput {
	return o
}

func (o WorkspaceConnectionOAuth2PtrOutput) Elem() WorkspaceConnectionOAuth2Output {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) WorkspaceConnectionOAuth2 {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionOAuth2
		return ret
	}).(WorkspaceConnectionOAuth2Output)
}

// Required by Concur connection category
func (o WorkspaceConnectionOAuth2PtrOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.AuthUrl
	}).(pulumi.StringPtrOutput)
}

// Client id in the format of UUID
func (o WorkspaceConnectionOAuth2PtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2PtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Required by GoogleAdWords connection category
func (o WorkspaceConnectionOAuth2PtrOutput) DeveloperToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.DeveloperToken
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2PtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
// where user needs to get RefreshToken offline
func (o WorkspaceConnectionOAuth2PtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// Required by QuickBooks and Xero connection categories
func (o WorkspaceConnectionOAuth2PtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Concur, ServiceNow auth server AccessToken grant type is 'Password'
// which requires UsernamePassword
func (o WorkspaceConnectionOAuth2PtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
type WorkspaceConnectionOAuth2Response struct {
	// Required by Concur connection category
	AuthUrl *string `pulumi:"authUrl"`
	// Client id in the format of UUID
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	// Required by GoogleAdWords connection category
	DeveloperToken *string `pulumi:"developerToken"`
	Password       *string `pulumi:"password"`
	// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
	// where user needs to get RefreshToken offline
	RefreshToken *string `pulumi:"refreshToken"`
	// Required by QuickBooks and Xero connection categories
	TenantId *string `pulumi:"tenantId"`
	// Concur, ServiceNow auth server AccessToken grant type is 'Password'
	// which requires UsernamePassword
	Username *string `pulumi:"username"`
}

// ClientId and ClientSecret are required. Other properties are optional
// depending on each OAuth2 provider's implementation.
type WorkspaceConnectionOAuth2ResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionOAuth2ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionOAuth2Response)(nil)).Elem()
}

func (o WorkspaceConnectionOAuth2ResponseOutput) ToWorkspaceConnectionOAuth2ResponseOutput() WorkspaceConnectionOAuth2ResponseOutput {
	return o
}

func (o WorkspaceConnectionOAuth2ResponseOutput) ToWorkspaceConnectionOAuth2ResponseOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2ResponseOutput {
	return o
}

// Required by Concur connection category
func (o WorkspaceConnectionOAuth2ResponseOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

// Client id in the format of UUID
func (o WorkspaceConnectionOAuth2ResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2ResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Required by GoogleAdWords connection category
func (o WorkspaceConnectionOAuth2ResponseOutput) DeveloperToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.DeveloperToken }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2ResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
// where user needs to get RefreshToken offline
func (o WorkspaceConnectionOAuth2ResponseOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// Required by QuickBooks and Xero connection categories
func (o WorkspaceConnectionOAuth2ResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

// Concur, ServiceNow auth server AccessToken grant type is 'Password'
// which requires UsernamePassword
func (o WorkspaceConnectionOAuth2ResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionOAuth2Response) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionOAuth2ResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionOAuth2ResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionOAuth2Response)(nil)).Elem()
}

func (o WorkspaceConnectionOAuth2ResponsePtrOutput) ToWorkspaceConnectionOAuth2ResponsePtrOutput() WorkspaceConnectionOAuth2ResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionOAuth2ResponsePtrOutput) ToWorkspaceConnectionOAuth2ResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionOAuth2ResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionOAuth2ResponsePtrOutput) Elem() WorkspaceConnectionOAuth2ResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) WorkspaceConnectionOAuth2Response {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionOAuth2Response
		return ret
	}).(WorkspaceConnectionOAuth2ResponseOutput)
}

// Required by Concur connection category
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.AuthUrl
	}).(pulumi.StringPtrOutput)
}

// Client id in the format of UUID
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2ResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Required by GoogleAdWords connection category
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) DeveloperToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.DeveloperToken
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionOAuth2ResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero, Zoho
// where user needs to get RefreshToken offline
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.RefreshToken
	}).(pulumi.StringPtrOutput)
}

// Required by QuickBooks and Xero connection categories
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Concur, ServiceNow auth server AccessToken grant type is 'Password'
// which requires UsernamePassword
func (o WorkspaceConnectionOAuth2ResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionOAuth2Response) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionPersonalAccessToken struct {
	Pat *string `pulumi:"pat"`
}

// WorkspaceConnectionPersonalAccessTokenInput is an input type that accepts WorkspaceConnectionPersonalAccessTokenArgs and WorkspaceConnectionPersonalAccessTokenOutput values.
// You can construct a concrete instance of `WorkspaceConnectionPersonalAccessTokenInput` via:
//
//	WorkspaceConnectionPersonalAccessTokenArgs{...}
type WorkspaceConnectionPersonalAccessTokenInput interface {
	pulumi.Input

	ToWorkspaceConnectionPersonalAccessTokenOutput() WorkspaceConnectionPersonalAccessTokenOutput
	ToWorkspaceConnectionPersonalAccessTokenOutputWithContext(context.Context) WorkspaceConnectionPersonalAccessTokenOutput
}

type WorkspaceConnectionPersonalAccessTokenArgs struct {
	Pat pulumi.StringPtrInput `pulumi:"pat"`
}

func (WorkspaceConnectionPersonalAccessTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionPersonalAccessToken)(nil)).Elem()
}

func (i WorkspaceConnectionPersonalAccessTokenArgs) ToWorkspaceConnectionPersonalAccessTokenOutput() WorkspaceConnectionPersonalAccessTokenOutput {
	return i.ToWorkspaceConnectionPersonalAccessTokenOutputWithContext(context.Background())
}

func (i WorkspaceConnectionPersonalAccessTokenArgs) ToWorkspaceConnectionPersonalAccessTokenOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionPersonalAccessTokenOutput)
}

func (i WorkspaceConnectionPersonalAccessTokenArgs) ToWorkspaceConnectionPersonalAccessTokenPtrOutput() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return i.ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionPersonalAccessTokenArgs) ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionPersonalAccessTokenOutput).ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(ctx)
}

// WorkspaceConnectionPersonalAccessTokenPtrInput is an input type that accepts WorkspaceConnectionPersonalAccessTokenArgs, WorkspaceConnectionPersonalAccessTokenPtr and WorkspaceConnectionPersonalAccessTokenPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionPersonalAccessTokenPtrInput` via:
//
//	        WorkspaceConnectionPersonalAccessTokenArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionPersonalAccessTokenPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionPersonalAccessTokenPtrOutput() WorkspaceConnectionPersonalAccessTokenPtrOutput
	ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(context.Context) WorkspaceConnectionPersonalAccessTokenPtrOutput
}

type workspaceConnectionPersonalAccessTokenPtrType WorkspaceConnectionPersonalAccessTokenArgs

func WorkspaceConnectionPersonalAccessTokenPtr(v *WorkspaceConnectionPersonalAccessTokenArgs) WorkspaceConnectionPersonalAccessTokenPtrInput {
	return (*workspaceConnectionPersonalAccessTokenPtrType)(v)
}

func (*workspaceConnectionPersonalAccessTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionPersonalAccessToken)(nil)).Elem()
}

func (i *workspaceConnectionPersonalAccessTokenPtrType) ToWorkspaceConnectionPersonalAccessTokenPtrOutput() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return i.ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionPersonalAccessTokenPtrType) ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionPersonalAccessTokenPtrOutput)
}

type WorkspaceConnectionPersonalAccessTokenOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionPersonalAccessTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionPersonalAccessToken)(nil)).Elem()
}

func (o WorkspaceConnectionPersonalAccessTokenOutput) ToWorkspaceConnectionPersonalAccessTokenOutput() WorkspaceConnectionPersonalAccessTokenOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenOutput) ToWorkspaceConnectionPersonalAccessTokenOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenOutput) ToWorkspaceConnectionPersonalAccessTokenPtrOutput() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o.ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionPersonalAccessTokenOutput) ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionPersonalAccessToken) *WorkspaceConnectionPersonalAccessToken {
		return &v
	}).(WorkspaceConnectionPersonalAccessTokenPtrOutput)
}

func (o WorkspaceConnectionPersonalAccessTokenOutput) Pat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionPersonalAccessToken) *string { return v.Pat }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionPersonalAccessTokenPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionPersonalAccessTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionPersonalAccessToken)(nil)).Elem()
}

func (o WorkspaceConnectionPersonalAccessTokenPtrOutput) ToWorkspaceConnectionPersonalAccessTokenPtrOutput() WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenPtrOutput) ToWorkspaceConnectionPersonalAccessTokenPtrOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenPtrOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenPtrOutput) Elem() WorkspaceConnectionPersonalAccessTokenOutput {
	return o.ApplyT(func(v *WorkspaceConnectionPersonalAccessToken) WorkspaceConnectionPersonalAccessToken {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionPersonalAccessToken
		return ret
	}).(WorkspaceConnectionPersonalAccessTokenOutput)
}

func (o WorkspaceConnectionPersonalAccessTokenPtrOutput) Pat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionPersonalAccessToken) *string {
		if v == nil {
			return nil
		}
		return v.Pat
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionPersonalAccessTokenResponse struct {
	Pat *string `pulumi:"pat"`
}

type WorkspaceConnectionPersonalAccessTokenResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionPersonalAccessTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionPersonalAccessTokenResponse)(nil)).Elem()
}

func (o WorkspaceConnectionPersonalAccessTokenResponseOutput) ToWorkspaceConnectionPersonalAccessTokenResponseOutput() WorkspaceConnectionPersonalAccessTokenResponseOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenResponseOutput) ToWorkspaceConnectionPersonalAccessTokenResponseOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenResponseOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenResponseOutput) Pat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionPersonalAccessTokenResponse) *string { return v.Pat }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionPersonalAccessTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionPersonalAccessTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionPersonalAccessTokenResponse)(nil)).Elem()
}

func (o WorkspaceConnectionPersonalAccessTokenResponsePtrOutput) ToWorkspaceConnectionPersonalAccessTokenResponsePtrOutput() WorkspaceConnectionPersonalAccessTokenResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenResponsePtrOutput) ToWorkspaceConnectionPersonalAccessTokenResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionPersonalAccessTokenResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionPersonalAccessTokenResponsePtrOutput) Elem() WorkspaceConnectionPersonalAccessTokenResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionPersonalAccessTokenResponse) WorkspaceConnectionPersonalAccessTokenResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionPersonalAccessTokenResponse
		return ret
	}).(WorkspaceConnectionPersonalAccessTokenResponseOutput)
}

func (o WorkspaceConnectionPersonalAccessTokenResponsePtrOutput) Pat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionPersonalAccessTokenResponse) *string {
		if v == nil {
			return nil
		}
		return v.Pat
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionServicePrincipal struct {
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	TenantId     *string `pulumi:"tenantId"`
}

// WorkspaceConnectionServicePrincipalInput is an input type that accepts WorkspaceConnectionServicePrincipalArgs and WorkspaceConnectionServicePrincipalOutput values.
// You can construct a concrete instance of `WorkspaceConnectionServicePrincipalInput` via:
//
//	WorkspaceConnectionServicePrincipalArgs{...}
type WorkspaceConnectionServicePrincipalInput interface {
	pulumi.Input

	ToWorkspaceConnectionServicePrincipalOutput() WorkspaceConnectionServicePrincipalOutput
	ToWorkspaceConnectionServicePrincipalOutputWithContext(context.Context) WorkspaceConnectionServicePrincipalOutput
}

type WorkspaceConnectionServicePrincipalArgs struct {
	ClientId     pulumi.StringPtrInput `pulumi:"clientId"`
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	TenantId     pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (WorkspaceConnectionServicePrincipalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionServicePrincipal)(nil)).Elem()
}

func (i WorkspaceConnectionServicePrincipalArgs) ToWorkspaceConnectionServicePrincipalOutput() WorkspaceConnectionServicePrincipalOutput {
	return i.ToWorkspaceConnectionServicePrincipalOutputWithContext(context.Background())
}

func (i WorkspaceConnectionServicePrincipalArgs) ToWorkspaceConnectionServicePrincipalOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionServicePrincipalOutput)
}

func (i WorkspaceConnectionServicePrincipalArgs) ToWorkspaceConnectionServicePrincipalPtrOutput() WorkspaceConnectionServicePrincipalPtrOutput {
	return i.ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionServicePrincipalArgs) ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionServicePrincipalOutput).ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(ctx)
}

// WorkspaceConnectionServicePrincipalPtrInput is an input type that accepts WorkspaceConnectionServicePrincipalArgs, WorkspaceConnectionServicePrincipalPtr and WorkspaceConnectionServicePrincipalPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionServicePrincipalPtrInput` via:
//
//	        WorkspaceConnectionServicePrincipalArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionServicePrincipalPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionServicePrincipalPtrOutput() WorkspaceConnectionServicePrincipalPtrOutput
	ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(context.Context) WorkspaceConnectionServicePrincipalPtrOutput
}

type workspaceConnectionServicePrincipalPtrType WorkspaceConnectionServicePrincipalArgs

func WorkspaceConnectionServicePrincipalPtr(v *WorkspaceConnectionServicePrincipalArgs) WorkspaceConnectionServicePrincipalPtrInput {
	return (*workspaceConnectionServicePrincipalPtrType)(v)
}

func (*workspaceConnectionServicePrincipalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionServicePrincipal)(nil)).Elem()
}

func (i *workspaceConnectionServicePrincipalPtrType) ToWorkspaceConnectionServicePrincipalPtrOutput() WorkspaceConnectionServicePrincipalPtrOutput {
	return i.ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionServicePrincipalPtrType) ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionServicePrincipalPtrOutput)
}

type WorkspaceConnectionServicePrincipalOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionServicePrincipalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionServicePrincipal)(nil)).Elem()
}

func (o WorkspaceConnectionServicePrincipalOutput) ToWorkspaceConnectionServicePrincipalOutput() WorkspaceConnectionServicePrincipalOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalOutput) ToWorkspaceConnectionServicePrincipalOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalOutput) ToWorkspaceConnectionServicePrincipalPtrOutput() WorkspaceConnectionServicePrincipalPtrOutput {
	return o.ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionServicePrincipalOutput) ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionServicePrincipal) *WorkspaceConnectionServicePrincipal {
		return &v
	}).(WorkspaceConnectionServicePrincipalPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipal) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipal) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipal) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionServicePrincipalPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionServicePrincipalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionServicePrincipal)(nil)).Elem()
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) ToWorkspaceConnectionServicePrincipalPtrOutput() WorkspaceConnectionServicePrincipalPtrOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) ToWorkspaceConnectionServicePrincipalPtrOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalPtrOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) Elem() WorkspaceConnectionServicePrincipalOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipal) WorkspaceConnectionServicePrincipal {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionServicePrincipal
		return ret
	}).(WorkspaceConnectionServicePrincipalOutput)
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipal) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionServicePrincipalResponse struct {
	ClientId     *string `pulumi:"clientId"`
	ClientSecret *string `pulumi:"clientSecret"`
	TenantId     *string `pulumi:"tenantId"`
}

type WorkspaceConnectionServicePrincipalResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionServicePrincipalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionServicePrincipalResponse)(nil)).Elem()
}

func (o WorkspaceConnectionServicePrincipalResponseOutput) ToWorkspaceConnectionServicePrincipalResponseOutput() WorkspaceConnectionServicePrincipalResponseOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalResponseOutput) ToWorkspaceConnectionServicePrincipalResponseOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalResponseOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipalResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalResponseOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipalResponse) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalResponseOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionServicePrincipalResponse) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionServicePrincipalResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionServicePrincipalResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionServicePrincipalResponse)(nil)).Elem()
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) ToWorkspaceConnectionServicePrincipalResponsePtrOutput() WorkspaceConnectionServicePrincipalResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) ToWorkspaceConnectionServicePrincipalResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionServicePrincipalResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) Elem() WorkspaceConnectionServicePrincipalResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipalResponse) WorkspaceConnectionServicePrincipalResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionServicePrincipalResponse
		return ret
	}).(WorkspaceConnectionServicePrincipalResponseOutput)
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionServicePrincipalResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionServicePrincipalResponse) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionSharedAccessSignature struct {
	Sas *string `pulumi:"sas"`
}

// WorkspaceConnectionSharedAccessSignatureInput is an input type that accepts WorkspaceConnectionSharedAccessSignatureArgs and WorkspaceConnectionSharedAccessSignatureOutput values.
// You can construct a concrete instance of `WorkspaceConnectionSharedAccessSignatureInput` via:
//
//	WorkspaceConnectionSharedAccessSignatureArgs{...}
type WorkspaceConnectionSharedAccessSignatureInput interface {
	pulumi.Input

	ToWorkspaceConnectionSharedAccessSignatureOutput() WorkspaceConnectionSharedAccessSignatureOutput
	ToWorkspaceConnectionSharedAccessSignatureOutputWithContext(context.Context) WorkspaceConnectionSharedAccessSignatureOutput
}

type WorkspaceConnectionSharedAccessSignatureArgs struct {
	Sas pulumi.StringPtrInput `pulumi:"sas"`
}

func (WorkspaceConnectionSharedAccessSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionSharedAccessSignature)(nil)).Elem()
}

func (i WorkspaceConnectionSharedAccessSignatureArgs) ToWorkspaceConnectionSharedAccessSignatureOutput() WorkspaceConnectionSharedAccessSignatureOutput {
	return i.ToWorkspaceConnectionSharedAccessSignatureOutputWithContext(context.Background())
}

func (i WorkspaceConnectionSharedAccessSignatureArgs) ToWorkspaceConnectionSharedAccessSignatureOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionSharedAccessSignatureOutput)
}

func (i WorkspaceConnectionSharedAccessSignatureArgs) ToWorkspaceConnectionSharedAccessSignaturePtrOutput() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return i.ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionSharedAccessSignatureArgs) ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionSharedAccessSignatureOutput).ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(ctx)
}

// WorkspaceConnectionSharedAccessSignaturePtrInput is an input type that accepts WorkspaceConnectionSharedAccessSignatureArgs, WorkspaceConnectionSharedAccessSignaturePtr and WorkspaceConnectionSharedAccessSignaturePtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionSharedAccessSignaturePtrInput` via:
//
//	        WorkspaceConnectionSharedAccessSignatureArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionSharedAccessSignaturePtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionSharedAccessSignaturePtrOutput() WorkspaceConnectionSharedAccessSignaturePtrOutput
	ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(context.Context) WorkspaceConnectionSharedAccessSignaturePtrOutput
}

type workspaceConnectionSharedAccessSignaturePtrType WorkspaceConnectionSharedAccessSignatureArgs

func WorkspaceConnectionSharedAccessSignaturePtr(v *WorkspaceConnectionSharedAccessSignatureArgs) WorkspaceConnectionSharedAccessSignaturePtrInput {
	return (*workspaceConnectionSharedAccessSignaturePtrType)(v)
}

func (*workspaceConnectionSharedAccessSignaturePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionSharedAccessSignature)(nil)).Elem()
}

func (i *workspaceConnectionSharedAccessSignaturePtrType) ToWorkspaceConnectionSharedAccessSignaturePtrOutput() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return i.ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionSharedAccessSignaturePtrType) ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionSharedAccessSignaturePtrOutput)
}

type WorkspaceConnectionSharedAccessSignatureOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionSharedAccessSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionSharedAccessSignature)(nil)).Elem()
}

func (o WorkspaceConnectionSharedAccessSignatureOutput) ToWorkspaceConnectionSharedAccessSignatureOutput() WorkspaceConnectionSharedAccessSignatureOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureOutput) ToWorkspaceConnectionSharedAccessSignatureOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignatureOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureOutput) ToWorkspaceConnectionSharedAccessSignaturePtrOutput() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o.ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionSharedAccessSignatureOutput) ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionSharedAccessSignature) *WorkspaceConnectionSharedAccessSignature {
		return &v
	}).(WorkspaceConnectionSharedAccessSignaturePtrOutput)
}

func (o WorkspaceConnectionSharedAccessSignatureOutput) Sas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionSharedAccessSignature) *string { return v.Sas }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionSharedAccessSignaturePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionSharedAccessSignaturePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionSharedAccessSignature)(nil)).Elem()
}

func (o WorkspaceConnectionSharedAccessSignaturePtrOutput) ToWorkspaceConnectionSharedAccessSignaturePtrOutput() WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignaturePtrOutput) ToWorkspaceConnectionSharedAccessSignaturePtrOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignaturePtrOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignaturePtrOutput) Elem() WorkspaceConnectionSharedAccessSignatureOutput {
	return o.ApplyT(func(v *WorkspaceConnectionSharedAccessSignature) WorkspaceConnectionSharedAccessSignature {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionSharedAccessSignature
		return ret
	}).(WorkspaceConnectionSharedAccessSignatureOutput)
}

func (o WorkspaceConnectionSharedAccessSignaturePtrOutput) Sas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionSharedAccessSignature) *string {
		if v == nil {
			return nil
		}
		return v.Sas
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionSharedAccessSignatureResponse struct {
	Sas *string `pulumi:"sas"`
}

type WorkspaceConnectionSharedAccessSignatureResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionSharedAccessSignatureResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionSharedAccessSignatureResponse)(nil)).Elem()
}

func (o WorkspaceConnectionSharedAccessSignatureResponseOutput) ToWorkspaceConnectionSharedAccessSignatureResponseOutput() WorkspaceConnectionSharedAccessSignatureResponseOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureResponseOutput) ToWorkspaceConnectionSharedAccessSignatureResponseOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignatureResponseOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureResponseOutput) Sas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionSharedAccessSignatureResponse) *string { return v.Sas }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionSharedAccessSignatureResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionSharedAccessSignatureResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionSharedAccessSignatureResponse)(nil)).Elem()
}

func (o WorkspaceConnectionSharedAccessSignatureResponsePtrOutput) ToWorkspaceConnectionSharedAccessSignatureResponsePtrOutput() WorkspaceConnectionSharedAccessSignatureResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureResponsePtrOutput) ToWorkspaceConnectionSharedAccessSignatureResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionSharedAccessSignatureResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionSharedAccessSignatureResponsePtrOutput) Elem() WorkspaceConnectionSharedAccessSignatureResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionSharedAccessSignatureResponse) WorkspaceConnectionSharedAccessSignatureResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionSharedAccessSignatureResponse
		return ret
	}).(WorkspaceConnectionSharedAccessSignatureResponseOutput)
}

func (o WorkspaceConnectionSharedAccessSignatureResponsePtrOutput) Sas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionSharedAccessSignatureResponse) *string {
		if v == nil {
			return nil
		}
		return v.Sas
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionUsernamePassword struct {
	Password *string `pulumi:"password"`
	// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
	SecurityToken *string `pulumi:"securityToken"`
	Username      *string `pulumi:"username"`
}

// WorkspaceConnectionUsernamePasswordInput is an input type that accepts WorkspaceConnectionUsernamePasswordArgs and WorkspaceConnectionUsernamePasswordOutput values.
// You can construct a concrete instance of `WorkspaceConnectionUsernamePasswordInput` via:
//
//	WorkspaceConnectionUsernamePasswordArgs{...}
type WorkspaceConnectionUsernamePasswordInput interface {
	pulumi.Input

	ToWorkspaceConnectionUsernamePasswordOutput() WorkspaceConnectionUsernamePasswordOutput
	ToWorkspaceConnectionUsernamePasswordOutputWithContext(context.Context) WorkspaceConnectionUsernamePasswordOutput
}

type WorkspaceConnectionUsernamePasswordArgs struct {
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
	SecurityToken pulumi.StringPtrInput `pulumi:"securityToken"`
	Username      pulumi.StringPtrInput `pulumi:"username"`
}

func (WorkspaceConnectionUsernamePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionUsernamePassword)(nil)).Elem()
}

func (i WorkspaceConnectionUsernamePasswordArgs) ToWorkspaceConnectionUsernamePasswordOutput() WorkspaceConnectionUsernamePasswordOutput {
	return i.ToWorkspaceConnectionUsernamePasswordOutputWithContext(context.Background())
}

func (i WorkspaceConnectionUsernamePasswordArgs) ToWorkspaceConnectionUsernamePasswordOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionUsernamePasswordOutput)
}

func (i WorkspaceConnectionUsernamePasswordArgs) ToWorkspaceConnectionUsernamePasswordPtrOutput() WorkspaceConnectionUsernamePasswordPtrOutput {
	return i.ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i WorkspaceConnectionUsernamePasswordArgs) ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionUsernamePasswordOutput).ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(ctx)
}

// WorkspaceConnectionUsernamePasswordPtrInput is an input type that accepts WorkspaceConnectionUsernamePasswordArgs, WorkspaceConnectionUsernamePasswordPtr and WorkspaceConnectionUsernamePasswordPtrOutput values.
// You can construct a concrete instance of `WorkspaceConnectionUsernamePasswordPtrInput` via:
//
//	        WorkspaceConnectionUsernamePasswordArgs{...}
//
//	or:
//
//	        nil
type WorkspaceConnectionUsernamePasswordPtrInput interface {
	pulumi.Input

	ToWorkspaceConnectionUsernamePasswordPtrOutput() WorkspaceConnectionUsernamePasswordPtrOutput
	ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(context.Context) WorkspaceConnectionUsernamePasswordPtrOutput
}

type workspaceConnectionUsernamePasswordPtrType WorkspaceConnectionUsernamePasswordArgs

func WorkspaceConnectionUsernamePasswordPtr(v *WorkspaceConnectionUsernamePasswordArgs) WorkspaceConnectionUsernamePasswordPtrInput {
	return (*workspaceConnectionUsernamePasswordPtrType)(v)
}

func (*workspaceConnectionUsernamePasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionUsernamePassword)(nil)).Elem()
}

func (i *workspaceConnectionUsernamePasswordPtrType) ToWorkspaceConnectionUsernamePasswordPtrOutput() WorkspaceConnectionUsernamePasswordPtrOutput {
	return i.ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i *workspaceConnectionUsernamePasswordPtrType) ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceConnectionUsernamePasswordPtrOutput)
}

type WorkspaceConnectionUsernamePasswordOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionUsernamePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionUsernamePassword)(nil)).Elem()
}

func (o WorkspaceConnectionUsernamePasswordOutput) ToWorkspaceConnectionUsernamePasswordOutput() WorkspaceConnectionUsernamePasswordOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordOutput) ToWorkspaceConnectionUsernamePasswordOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordOutput) ToWorkspaceConnectionUsernamePasswordPtrOutput() WorkspaceConnectionUsernamePasswordPtrOutput {
	return o.ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(context.Background())
}

func (o WorkspaceConnectionUsernamePasswordOutput) ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceConnectionUsernamePassword) *WorkspaceConnectionUsernamePassword {
		return &v
	}).(WorkspaceConnectionUsernamePasswordPtrOutput)
}

func (o WorkspaceConnectionUsernamePasswordOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePassword) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
func (o WorkspaceConnectionUsernamePasswordOutput) SecurityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePassword) *string { return v.SecurityToken }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionUsernamePasswordOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePassword) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionUsernamePasswordPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionUsernamePasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionUsernamePassword)(nil)).Elem()
}

func (o WorkspaceConnectionUsernamePasswordPtrOutput) ToWorkspaceConnectionUsernamePasswordPtrOutput() WorkspaceConnectionUsernamePasswordPtrOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordPtrOutput) ToWorkspaceConnectionUsernamePasswordPtrOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordPtrOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordPtrOutput) Elem() WorkspaceConnectionUsernamePasswordOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePassword) WorkspaceConnectionUsernamePassword {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionUsernamePassword
		return ret
	}).(WorkspaceConnectionUsernamePasswordOutput)
}

func (o WorkspaceConnectionUsernamePasswordPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
func (o WorkspaceConnectionUsernamePasswordPtrOutput) SecurityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.SecurityToken
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionUsernamePasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionUsernamePasswordResponse struct {
	Password *string `pulumi:"password"`
	// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
	SecurityToken *string `pulumi:"securityToken"`
	Username      *string `pulumi:"username"`
}

type WorkspaceConnectionUsernamePasswordResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionUsernamePasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceConnectionUsernamePasswordResponse)(nil)).Elem()
}

func (o WorkspaceConnectionUsernamePasswordResponseOutput) ToWorkspaceConnectionUsernamePasswordResponseOutput() WorkspaceConnectionUsernamePasswordResponseOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordResponseOutput) ToWorkspaceConnectionUsernamePasswordResponseOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordResponseOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordResponseOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePasswordResponse) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
func (o WorkspaceConnectionUsernamePasswordResponseOutput) SecurityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePasswordResponse) *string { return v.SecurityToken }).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionUsernamePasswordResponseOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceConnectionUsernamePasswordResponse) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type WorkspaceConnectionUsernamePasswordResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceConnectionUsernamePasswordResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceConnectionUsernamePasswordResponse)(nil)).Elem()
}

func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) ToWorkspaceConnectionUsernamePasswordResponsePtrOutput() WorkspaceConnectionUsernamePasswordResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) ToWorkspaceConnectionUsernamePasswordResponsePtrOutputWithContext(ctx context.Context) WorkspaceConnectionUsernamePasswordResponsePtrOutput {
	return o
}

func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) Elem() WorkspaceConnectionUsernamePasswordResponseOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePasswordResponse) WorkspaceConnectionUsernamePasswordResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceConnectionUsernamePasswordResponse
		return ret
	}).(WorkspaceConnectionUsernamePasswordResponseOutput)
}

func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePasswordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Optional, required by connections like SalesForce for extra security in addition to UsernamePassword
func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) SecurityToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePasswordResponse) *string {
		if v == nil {
			return nil
		}
		return v.SecurityToken
	}).(pulumi.StringPtrOutput)
}

func (o WorkspaceConnectionUsernamePasswordResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceConnectionUsernamePasswordResponse) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfig struct {
	AdditionalWorkspaceStorageAccounts []string `pulumi:"additionalWorkspaceStorageAccounts"`
	DefaultWorkspaceResourceGroup      *string  `pulumi:"defaultWorkspaceResourceGroup"`
}

// WorkspaceHubConfigInput is an input type that accepts WorkspaceHubConfigArgs and WorkspaceHubConfigOutput values.
// You can construct a concrete instance of `WorkspaceHubConfigInput` via:
//
//	WorkspaceHubConfigArgs{...}
type WorkspaceHubConfigInput interface {
	pulumi.Input

	ToWorkspaceHubConfigOutput() WorkspaceHubConfigOutput
	ToWorkspaceHubConfigOutputWithContext(context.Context) WorkspaceHubConfigOutput
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfigArgs struct {
	AdditionalWorkspaceStorageAccounts pulumi.StringArrayInput `pulumi:"additionalWorkspaceStorageAccounts"`
	DefaultWorkspaceResourceGroup      pulumi.StringPtrInput   `pulumi:"defaultWorkspaceResourceGroup"`
}

func (WorkspaceHubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceHubConfig)(nil)).Elem()
}

func (i WorkspaceHubConfigArgs) ToWorkspaceHubConfigOutput() WorkspaceHubConfigOutput {
	return i.ToWorkspaceHubConfigOutputWithContext(context.Background())
}

func (i WorkspaceHubConfigArgs) ToWorkspaceHubConfigOutputWithContext(ctx context.Context) WorkspaceHubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHubConfigOutput)
}

func (i WorkspaceHubConfigArgs) ToWorkspaceHubConfigPtrOutput() WorkspaceHubConfigPtrOutput {
	return i.ToWorkspaceHubConfigPtrOutputWithContext(context.Background())
}

func (i WorkspaceHubConfigArgs) ToWorkspaceHubConfigPtrOutputWithContext(ctx context.Context) WorkspaceHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHubConfigOutput).ToWorkspaceHubConfigPtrOutputWithContext(ctx)
}

// WorkspaceHubConfigPtrInput is an input type that accepts WorkspaceHubConfigArgs, WorkspaceHubConfigPtr and WorkspaceHubConfigPtrOutput values.
// You can construct a concrete instance of `WorkspaceHubConfigPtrInput` via:
//
//	        WorkspaceHubConfigArgs{...}
//
//	or:
//
//	        nil
type WorkspaceHubConfigPtrInput interface {
	pulumi.Input

	ToWorkspaceHubConfigPtrOutput() WorkspaceHubConfigPtrOutput
	ToWorkspaceHubConfigPtrOutputWithContext(context.Context) WorkspaceHubConfigPtrOutput
}

type workspaceHubConfigPtrType WorkspaceHubConfigArgs

func WorkspaceHubConfigPtr(v *WorkspaceHubConfigArgs) WorkspaceHubConfigPtrInput {
	return (*workspaceHubConfigPtrType)(v)
}

func (*workspaceHubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHubConfig)(nil)).Elem()
}

func (i *workspaceHubConfigPtrType) ToWorkspaceHubConfigPtrOutput() WorkspaceHubConfigPtrOutput {
	return i.ToWorkspaceHubConfigPtrOutputWithContext(context.Background())
}

func (i *workspaceHubConfigPtrType) ToWorkspaceHubConfigPtrOutputWithContext(ctx context.Context) WorkspaceHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceHubConfigPtrOutput)
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfigOutput struct{ *pulumi.OutputState }

func (WorkspaceHubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceHubConfig)(nil)).Elem()
}

func (o WorkspaceHubConfigOutput) ToWorkspaceHubConfigOutput() WorkspaceHubConfigOutput {
	return o
}

func (o WorkspaceHubConfigOutput) ToWorkspaceHubConfigOutputWithContext(ctx context.Context) WorkspaceHubConfigOutput {
	return o
}

func (o WorkspaceHubConfigOutput) ToWorkspaceHubConfigPtrOutput() WorkspaceHubConfigPtrOutput {
	return o.ToWorkspaceHubConfigPtrOutputWithContext(context.Background())
}

func (o WorkspaceHubConfigOutput) ToWorkspaceHubConfigPtrOutputWithContext(ctx context.Context) WorkspaceHubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceHubConfig) *WorkspaceHubConfig {
		return &v
	}).(WorkspaceHubConfigPtrOutput)
}

func (o WorkspaceHubConfigOutput) AdditionalWorkspaceStorageAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkspaceHubConfig) []string { return v.AdditionalWorkspaceStorageAccounts }).(pulumi.StringArrayOutput)
}

func (o WorkspaceHubConfigOutput) DefaultWorkspaceResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceHubConfig) *string { return v.DefaultWorkspaceResourceGroup }).(pulumi.StringPtrOutput)
}

type WorkspaceHubConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceHubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHubConfig)(nil)).Elem()
}

func (o WorkspaceHubConfigPtrOutput) ToWorkspaceHubConfigPtrOutput() WorkspaceHubConfigPtrOutput {
	return o
}

func (o WorkspaceHubConfigPtrOutput) ToWorkspaceHubConfigPtrOutputWithContext(ctx context.Context) WorkspaceHubConfigPtrOutput {
	return o
}

func (o WorkspaceHubConfigPtrOutput) Elem() WorkspaceHubConfigOutput {
	return o.ApplyT(func(v *WorkspaceHubConfig) WorkspaceHubConfig {
		if v != nil {
			return *v
		}
		var ret WorkspaceHubConfig
		return ret
	}).(WorkspaceHubConfigOutput)
}

func (o WorkspaceHubConfigPtrOutput) AdditionalWorkspaceStorageAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceHubConfig) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalWorkspaceStorageAccounts
	}).(pulumi.StringArrayOutput)
}

func (o WorkspaceHubConfigPtrOutput) DefaultWorkspaceResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceHubConfig) *string {
		if v == nil {
			return nil
		}
		return v.DefaultWorkspaceResourceGroup
	}).(pulumi.StringPtrOutput)
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfigResponse struct {
	AdditionalWorkspaceStorageAccounts []string `pulumi:"additionalWorkspaceStorageAccounts"`
	DefaultWorkspaceResourceGroup      *string  `pulumi:"defaultWorkspaceResourceGroup"`
}

// WorkspaceHub's configuration object.
type WorkspaceHubConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkspaceHubConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceHubConfigResponse)(nil)).Elem()
}

func (o WorkspaceHubConfigResponseOutput) ToWorkspaceHubConfigResponseOutput() WorkspaceHubConfigResponseOutput {
	return o
}

func (o WorkspaceHubConfigResponseOutput) ToWorkspaceHubConfigResponseOutputWithContext(ctx context.Context) WorkspaceHubConfigResponseOutput {
	return o
}

func (o WorkspaceHubConfigResponseOutput) AdditionalWorkspaceStorageAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkspaceHubConfigResponse) []string { return v.AdditionalWorkspaceStorageAccounts }).(pulumi.StringArrayOutput)
}

func (o WorkspaceHubConfigResponseOutput) DefaultWorkspaceResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceHubConfigResponse) *string { return v.DefaultWorkspaceResourceGroup }).(pulumi.StringPtrOutput)
}

type WorkspaceHubConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceHubConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceHubConfigResponse)(nil)).Elem()
}

func (o WorkspaceHubConfigResponsePtrOutput) ToWorkspaceHubConfigResponsePtrOutput() WorkspaceHubConfigResponsePtrOutput {
	return o
}

func (o WorkspaceHubConfigResponsePtrOutput) ToWorkspaceHubConfigResponsePtrOutputWithContext(ctx context.Context) WorkspaceHubConfigResponsePtrOutput {
	return o
}

func (o WorkspaceHubConfigResponsePtrOutput) Elem() WorkspaceHubConfigResponseOutput {
	return o.ApplyT(func(v *WorkspaceHubConfigResponse) WorkspaceHubConfigResponse {
		if v != nil {
			return *v
		}
		var ret WorkspaceHubConfigResponse
		return ret
	}).(WorkspaceHubConfigResponseOutput)
}

func (o WorkspaceHubConfigResponsePtrOutput) AdditionalWorkspaceStorageAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceHubConfigResponse) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalWorkspaceStorageAccounts
	}).(pulumi.StringArrayOutput)
}

func (o WorkspaceHubConfigResponsePtrOutput) DefaultWorkspaceResourceGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceHubConfigResponse) *string {
		if v == nil {
			return nil
		}
		return v.DefaultWorkspaceResourceGroup
	}).(pulumi.StringPtrOutput)
}

// The Private Endpoint resource.
type WorkspacePrivateEndpointResourceResponse struct {
	// e.g. /subscriptions/{networkSubscriptionId}/resourceGroups/{rgName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
	Id string `pulumi:"id"`
	// The subnetId that the private endpoint is connected to.
	SubnetArmId string `pulumi:"subnetArmId"`
}

// The Private Endpoint resource.
type WorkspacePrivateEndpointResourceResponseOutput struct{ *pulumi.OutputState }

func (WorkspacePrivateEndpointResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspacePrivateEndpointResourceResponse)(nil)).Elem()
}

func (o WorkspacePrivateEndpointResourceResponseOutput) ToWorkspacePrivateEndpointResourceResponseOutput() WorkspacePrivateEndpointResourceResponseOutput {
	return o
}

func (o WorkspacePrivateEndpointResourceResponseOutput) ToWorkspacePrivateEndpointResourceResponseOutputWithContext(ctx context.Context) WorkspacePrivateEndpointResourceResponseOutput {
	return o
}

// e.g. /subscriptions/{networkSubscriptionId}/resourceGroups/{rgName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
func (o WorkspacePrivateEndpointResourceResponseOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacePrivateEndpointResourceResponse) string { return v.Id }).(pulumi.StringOutput)
}

// The subnetId that the private endpoint is connected to.
func (o WorkspacePrivateEndpointResourceResponseOutput) SubnetArmId() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacePrivateEndpointResourceResponse) string { return v.SubnetArmId }).(pulumi.StringOutput)
}

type WorkspacePrivateEndpointResourceResponsePtrOutput struct{ *pulumi.OutputState }

func (WorkspacePrivateEndpointResourceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspacePrivateEndpointResourceResponse)(nil)).Elem()
}

func (o WorkspacePrivateEndpointResourceResponsePtrOutput) ToWorkspacePrivateEndpointResourceResponsePtrOutput() WorkspacePrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o WorkspacePrivateEndpointResourceResponsePtrOutput) ToWorkspacePrivateEndpointResourceResponsePtrOutputWithContext(ctx context.Context) WorkspacePrivateEndpointResourceResponsePtrOutput {
	return o
}

func (o WorkspacePrivateEndpointResourceResponsePtrOutput) Elem() WorkspacePrivateEndpointResourceResponseOutput {
	return o.ApplyT(func(v *WorkspacePrivateEndpointResourceResponse) WorkspacePrivateEndpointResourceResponse {
		if v != nil {
			return *v
		}
		var ret WorkspacePrivateEndpointResourceResponse
		return ret
	}).(WorkspacePrivateEndpointResourceResponseOutput)
}

// e.g. /subscriptions/{networkSubscriptionId}/resourceGroups/{rgName}/providers/Microsoft.Network/privateEndpoints/{privateEndpointName}
func (o WorkspacePrivateEndpointResourceResponsePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspacePrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The subnetId that the private endpoint is connected to.
func (o WorkspacePrivateEndpointResourceResponsePtrOutput) SubnetArmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspacePrivateEndpointResourceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetArmId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsPtrOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponseOutput{})
	pulumi.RegisterOutputType(PersonalComputeInstanceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
	pulumi.RegisterOutputType(PipelineJobResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolEnvironmentConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationPtrOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationResponseOutput{})
	pulumi.RegisterOutputType(PoolModelConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(PredictionDriftMonitoringSignalOutput{})
	pulumi.RegisterOutputType(PredictionDriftMonitoringSignalResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationPtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutboundRuleOutput{})
	pulumi.RegisterOutputType(PrivateEndpointOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourcePtrOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponseOutput{})
	pulumi.RegisterOutputType(PrivateEndpointResourceResponsePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(PrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ProbeSettingsOutput{})
	pulumi.RegisterOutputType(ProbeSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ProgressMetricsResponseOutput{})
	pulumi.RegisterOutputType(PyTorchOutput{})
	pulumi.RegisterOutputType(PyTorchPtrOutput{})
	pulumi.RegisterOutputType(PyTorchResponseOutput{})
	pulumi.RegisterOutputType(PyTorchResponsePtrOutput{})
	pulumi.RegisterOutputType(QueueSettingsOutput{})
	pulumi.RegisterOutputType(QueueSettingsPtrOutput{})
	pulumi.RegisterOutputType(QueueSettingsResponseOutput{})
	pulumi.RegisterOutputType(QueueSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RaiBlocklistConfigOutput{})
	pulumi.RegisterOutputType(RaiBlocklistConfigArrayOutput{})
	pulumi.RegisterOutputType(RaiBlocklistConfigResponseOutput{})
	pulumi.RegisterOutputType(RaiBlocklistConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(RaiBlocklistItemPropertiesOutput{})
	pulumi.RegisterOutputType(RaiBlocklistItemPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RaiBlocklistPropertiesOutput{})
	pulumi.RegisterOutputType(RaiBlocklistPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RaiPolicyContentFilterOutput{})
	pulumi.RegisterOutputType(RaiPolicyContentFilterArrayOutput{})
	pulumi.RegisterOutputType(RaiPolicyContentFilterResponseOutput{})
	pulumi.RegisterOutputType(RaiPolicyContentFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(RaiPolicyPropertiesOutput{})
	pulumi.RegisterOutputType(RaiPolicyPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(RayOutput{})
	pulumi.RegisterOutputType(RayPtrOutput{})
	pulumi.RegisterOutputType(RayResponseOutput{})
	pulumi.RegisterOutputType(RayResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceOutput{})
	pulumi.RegisterOutputType(RecurrencePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerPtrOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceTriggerResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryTypeOutput{})
	pulumi.RegisterOutputType(RegistryListCredentialsResultResponseOutput{})
	pulumi.RegisterOutputType(RegistryListCredentialsResultResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesPtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateEndpointConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStatePtrOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponseOutput{})
	pulumi.RegisterOutputType(RegistryPrivateLinkServiceConnectionStateResponsePtrOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsArrayOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseOutput{})
	pulumi.RegisterOutputType(RegistryRegionArmDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(RegistryResponseOutput{})
	pulumi.RegisterOutputType(RegressionOutput{})
	pulumi.RegisterOutputType(RegressionModelPerformanceMetricThresholdOutput{})
	pulumi.RegisterOutputType(RegressionModelPerformanceMetricThresholdResponseOutput{})
	pulumi.RegisterOutputType(RegressionResponseOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(RegressionTrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(RequestConfigurationOutput{})
	pulumi.RegisterOutputType(RequestConfigurationPtrOutput{})
	pulumi.RegisterOutputType(RequestConfigurationResponseOutput{})
	pulumi.RegisterOutputType(RequestConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RequestLoggingOutput{})
	pulumi.RegisterOutputType(RequestLoggingPtrOutput{})
	pulumi.RegisterOutputType(RequestLoggingResponseOutput{})
	pulumi.RegisterOutputType(RequestLoggingResponsePtrOutput{})
	pulumi.RegisterOutputType(RequestMatchPatternResponseOutput{})
	pulumi.RegisterOutputType(RequestMatchPatternResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceIdOutput{})
	pulumi.RegisterOutputType(ResourceIdPtrOutput{})
	pulumi.RegisterOutputType(ResourceIdResponseOutput{})
	pulumi.RegisterOutputType(ResourceIdResponsePtrOutput{})
	pulumi.RegisterOutputType(RollingInputDataOutput{})
	pulumi.RegisterOutputType(RollingInputDataResponseOutput{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RoutePtrOutput{})
	pulumi.RegisterOutputType(RouteResponseOutput{})
	pulumi.RegisterOutputType(RouteResponsePtrOutput{})
	pulumi.RegisterOutputType(SASAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(SASAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(SasDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsOutput{})
	pulumi.RegisterOutputType(ScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(ScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleTypeOutput{})
	pulumi.RegisterOutputType(ScheduleBaseOutput{})
	pulumi.RegisterOutputType(ScheduleBasePtrOutput{})
	pulumi.RegisterOutputType(ScheduleBaseResponseOutput{})
	pulumi.RegisterOutputType(ScheduleBaseResponsePtrOutput{})
	pulumi.RegisterOutputType(ScheduleResponseOutput{})
	pulumi.RegisterOutputType(ScriptReferenceOutput{})
	pulumi.RegisterOutputType(ScriptReferencePtrOutput{})
	pulumi.RegisterOutputType(ScriptReferenceResponseOutput{})
	pulumi.RegisterOutputType(ScriptReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteOutput{})
	pulumi.RegisterOutputType(ScriptsToExecutePtrOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteResponseOutput{})
	pulumi.RegisterOutputType(ScriptsToExecuteResponsePtrOutput{})
	pulumi.RegisterOutputType(SecretConfigurationOutput{})
	pulumi.RegisterOutputType(SecretConfigurationMapOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SecretConfigurationResponseMapOutput{})
	pulumi.RegisterOutputType(ServerlessComputeSettingsOutput{})
	pulumi.RegisterOutputType(ServerlessComputeSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServerlessComputeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServerlessComputeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointTypeOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationPtrOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationResponseOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointCapacityReservationResponsePtrOutput{})
	pulumi.RegisterOutputType(ServerlessEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServerlessInferenceEndpointResponseOutput{})
	pulumi.RegisterOutputType(ServerlessOfferOutput{})
	pulumi.RegisterOutputType(ServerlessOfferPtrOutput{})
	pulumi.RegisterOutputType(ServerlessOfferResponseOutput{})
	pulumi.RegisterOutputType(ServerlessOfferResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsPtrOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponseOutput{})
	pulumi.RegisterOutputType(ServiceManagedResourcesSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ServicePrincipalAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(ServicePrincipalAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationPtrOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationResponseOutput{})
	pulumi.RegisterOutputType(ServiceTagDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceTagOutboundRuleOutput{})
	pulumi.RegisterOutputType(ServiceTagOutboundRuleResponseOutput{})
	pulumi.RegisterOutputType(SetupScriptsOutput{})
	pulumi.RegisterOutputType(SetupScriptsPtrOutput{})
	pulumi.RegisterOutputType(SetupScriptsResponseOutput{})
	pulumi.RegisterOutputType(SetupScriptsResponsePtrOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceArrayOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseOutput{})
	pulumi.RegisterOutputType(SharedPrivateLinkResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(SparkJobOutput{})
	pulumi.RegisterOutputType(SparkJobPythonEntryOutput{})
	pulumi.RegisterOutputType(SparkJobPythonEntryResponseOutput{})
	pulumi.RegisterOutputType(SparkJobResponseOutput{})
	pulumi.RegisterOutputType(SparkJobScalaEntryOutput{})
	pulumi.RegisterOutputType(SparkJobScalaEntryResponseOutput{})
	pulumi.RegisterOutputType(SparkResourceConfigurationOutput{})
	pulumi.RegisterOutputType(SparkResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SparkResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SparkResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(SpeechEndpointDeploymentResourcePropertiesOutput{})
	pulumi.RegisterOutputType(SpeechEndpointDeploymentResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(SslConfigurationOutput{})
	pulumi.RegisterOutputType(SslConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SslConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SslConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsPtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponseOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticInputDataOutput{})
	pulumi.RegisterOutputType(StaticInputDataResponseOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseOutput{})
	pulumi.RegisterOutputType(StatusMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsArrayOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseOutput{})
	pulumi.RegisterOutputType(StorageAccountDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(SweepJobOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(SweepJobResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkOutput{})
	pulumi.RegisterOutputType(SynapseSparkPtrOutput{})
	pulumi.RegisterOutputType(SynapseSparkPropertiesOutput{})
	pulumi.RegisterOutputType(SynapseSparkPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponseOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponsePropertiesOutput{})
	pulumi.RegisterOutputType(SynapseSparkResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedAcrAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponseOutput{})
	pulumi.RegisterOutputType(SystemCreatedStorageAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(SystemServiceResponseOutput{})
	pulumi.RegisterOutputType(SystemServiceResponseArrayOutput{})
	pulumi.RegisterOutputType(TableFixedParametersOutput{})
	pulumi.RegisterOutputType(TableFixedParametersPtrOutput{})
	pulumi.RegisterOutputType(TableFixedParametersResponseOutput{})
	pulumi.RegisterOutputType(TableFixedParametersResponsePtrOutput{})
	pulumi.RegisterOutputType(TableParameterSubspaceOutput{})
	pulumi.RegisterOutputType(TableParameterSubspaceArrayOutput{})
	pulumi.RegisterOutputType(TableParameterSubspaceResponseOutput{})
	pulumi.RegisterOutputType(TableParameterSubspaceResponseArrayOutput{})
	pulumi.RegisterOutputType(TableSweepSettingsOutput{})
	pulumi.RegisterOutputType(TableSweepSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableSweepSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableSweepSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TensorFlowOutput{})
	pulumi.RegisterOutputType(TensorFlowPtrOutput{})
	pulumi.RegisterOutputType(TensorFlowResponseOutput{})
	pulumi.RegisterOutputType(TensorFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(TextClassificationOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(TextClassificationResponseOutput{})
	pulumi.RegisterOutputType(TextNerOutput{})
	pulumi.RegisterOutputType(TextNerResponseOutput{})
	pulumi.RegisterOutputType(ThrottlingRuleResponseOutput{})
	pulumi.RegisterOutputType(ThrottlingRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(TmpfsOptionsOutput{})
	pulumi.RegisterOutputType(TmpfsOptionsPtrOutput{})
	pulumi.RegisterOutputType(TmpfsOptionsResponseOutput{})
	pulumi.RegisterOutputType(TmpfsOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(TopNFeaturesByAttributionOutput{})
	pulumi.RegisterOutputType(TopNFeaturesByAttributionPtrOutput{})
	pulumi.RegisterOutputType(TopNFeaturesByAttributionResponseOutput{})
	pulumi.RegisterOutputType(TopNFeaturesByAttributionResponsePtrOutput{})
	pulumi.RegisterOutputType(TrialComponentOutput{})
	pulumi.RegisterOutputType(TrialComponentResponseOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputPtrOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(TritonModelJobOutputOutput{})
	pulumi.RegisterOutputType(TritonModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UriFileDataVersionOutput{})
	pulumi.RegisterOutputType(UriFileDataVersionResponseOutput{})
	pulumi.RegisterOutputType(UriFileJobInputOutput{})
	pulumi.RegisterOutputType(UriFileJobInputPtrOutput{})
	pulumi.RegisterOutputType(UriFileJobInputResponseOutput{})
	pulumi.RegisterOutputType(UriFileJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(UriFileJobOutputOutput{})
	pulumi.RegisterOutputType(UriFileJobOutputResponseOutput{})
	pulumi.RegisterOutputType(UriFolderDataVersionOutput{})
	pulumi.RegisterOutputType(UriFolderDataVersionResponseOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputPtrOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputResponseOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(UriFolderJobOutputOutput{})
	pulumi.RegisterOutputType(UriFolderJobOutputResponseOutput{})
	pulumi.RegisterOutputType(UserAccountCredentialsOutput{})
	pulumi.RegisterOutputType(UserAccountCredentialsPtrOutput{})
	pulumi.RegisterOutputType(UserAccountCredentialsResponseOutput{})
	pulumi.RegisterOutputType(UserAccountCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserCreatedAcrAccountOutput{})
	pulumi.RegisterOutputType(UserCreatedAcrAccountPtrOutput{})
	pulumi.RegisterOutputType(UserCreatedAcrAccountResponseOutput{})
	pulumi.RegisterOutputType(UserCreatedAcrAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(UserCreatedStorageAccountOutput{})
	pulumi.RegisterOutputType(UserCreatedStorageAccountPtrOutput{})
	pulumi.RegisterOutputType(UserCreatedStorageAccountResponseOutput{})
	pulumi.RegisterOutputType(UserCreatedStorageAccountResponsePtrOutput{})
	pulumi.RegisterOutputType(UserIdentityOutput{})
	pulumi.RegisterOutputType(UserIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(UsernamePasswordAuthTypeWorkspaceConnectionPropertiesOutput{})
	pulumi.RegisterOutputType(UsernamePasswordAuthTypeWorkspaceConnectionPropertiesResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineImageOutput{})
	pulumi.RegisterOutputType(VirtualMachineImagePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineImageResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineImageResponsePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineSchemaPropertiesOutput{})
	pulumi.RegisterOutputType(VirtualMachineSchemaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineSchemaResponsePropertiesOutput{})
	pulumi.RegisterOutputType(VirtualMachineSchemaResponsePropertiesPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineSizeResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineSizeResponseArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineSshCredentialsOutput{})
	pulumi.RegisterOutputType(VirtualMachineSshCredentialsPtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineSshCredentialsResponseOutput{})
	pulumi.RegisterOutputType(VirtualMachineSshCredentialsResponsePtrOutput{})
	pulumi.RegisterOutputType(VolumeDefinitionOutput{})
	pulumi.RegisterOutputType(VolumeDefinitionArrayOutput{})
	pulumi.RegisterOutputType(VolumeDefinitionResponseOutput{})
	pulumi.RegisterOutputType(VolumeDefinitionResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeOptionsOutput{})
	pulumi.RegisterOutputType(VolumeOptionsPtrOutput{})
	pulumi.RegisterOutputType(VolumeOptionsResponseOutput{})
	pulumi.RegisterOutputType(VolumeOptionsResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionAccessKeyOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionAccessKeyPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionAccessKeyResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionAccessKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionApiKeyOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionApiKeyPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionApiKeyResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionApiKeyResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionManagedIdentityOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionOAuth2Output{})
	pulumi.RegisterOutputType(WorkspaceConnectionOAuth2PtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionOAuth2ResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionOAuth2ResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionPersonalAccessTokenOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionPersonalAccessTokenPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionPersonalAccessTokenResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionPersonalAccessTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionServicePrincipalOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionServicePrincipalPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionServicePrincipalResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionServicePrincipalResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionSharedAccessSignatureOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionSharedAccessSignaturePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionSharedAccessSignatureResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionSharedAccessSignatureResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionUsernamePasswordOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionUsernamePasswordPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionUsernamePasswordResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceConnectionUsernamePasswordResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceHubConfigOutput{})
	pulumi.RegisterOutputType(WorkspaceHubConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceHubConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkspaceHubConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(WorkspacePrivateEndpointResourceResponseOutput{})
	pulumi.RegisterOutputType(WorkspacePrivateEndpointResourceResponsePtrOutput{})
}
