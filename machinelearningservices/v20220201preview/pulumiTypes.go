// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20220201preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecrets `pulumi:"secrets"`
}

// AccountKeyDatastoreCredentialsInput is an input type that accepts AccountKeyDatastoreCredentialsArgs and AccountKeyDatastoreCredentialsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreCredentialsInput` via:
//
//	AccountKeyDatastoreCredentialsArgs{...}
type AccountKeyDatastoreCredentialsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput
	ToAccountKeyDatastoreCredentialsOutputWithContext(context.Context) AccountKeyDatastoreCredentialsOutput
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage account secrets.
	Secrets AccountKeyDatastoreSecretsInput `pulumi:"secrets"`
}

func (AccountKeyDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return i.ToAccountKeyDatastoreCredentialsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreCredentialsArgs) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreCredentialsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentials)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutput() AccountKeyDatastoreCredentialsOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsOutput) ToAccountKeyDatastoreCredentialsOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage account secrets.
func (o AccountKeyDatastoreCredentialsOutput) Secrets() AccountKeyDatastoreSecretsOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentials) AccountKeyDatastoreSecrets { return v.Secrets }).(AccountKeyDatastoreSecretsOutput)
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'AccountKey'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Account key datastore credentials configuration.
type AccountKeyDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreCredentialsResponse)(nil)).Elem()
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutput() AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

func (o AccountKeyDatastoreCredentialsResponseOutput) ToAccountKeyDatastoreCredentialsResponseOutputWithContext(ctx context.Context) AccountKeyDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecrets struct {
	// Storage account key.
	Key *string `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType string `pulumi:"secretsType"`
}

// AccountKeyDatastoreSecretsInput is an input type that accepts AccountKeyDatastoreSecretsArgs and AccountKeyDatastoreSecretsOutput values.
// You can construct a concrete instance of `AccountKeyDatastoreSecretsInput` via:
//
//	AccountKeyDatastoreSecretsArgs{...}
type AccountKeyDatastoreSecretsInput interface {
	pulumi.Input

	ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput
	ToAccountKeyDatastoreSecretsOutputWithContext(context.Context) AccountKeyDatastoreSecretsOutput
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsArgs struct {
	// Storage account key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'AccountKey'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (AccountKeyDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return i.ToAccountKeyDatastoreSecretsOutputWithContext(context.Background())
}

func (i AccountKeyDatastoreSecretsArgs) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountKeyDatastoreSecretsOutput)
}

// Datastore account key secrets.
type AccountKeyDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (AccountKeyDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountKeyDatastoreSecrets)(nil)).Elem()
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutput() AccountKeyDatastoreSecretsOutput {
	return o
}

func (o AccountKeyDatastoreSecretsOutput) ToAccountKeyDatastoreSecretsOutputWithContext(ctx context.Context) AccountKeyDatastoreSecretsOutput {
	return o
}

// Storage account key.
func (o AccountKeyDatastoreSecretsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'AccountKey'.
func (o AccountKeyDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountKeyDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// AML Token identity configuration.
type AmlToken struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AmlTokenInput is an input type that accepts AmlTokenArgs and AmlTokenOutput values.
// You can construct a concrete instance of `AmlTokenInput` via:
//
//	AmlTokenArgs{...}
type AmlTokenInput interface {
	pulumi.Input

	ToAmlTokenOutput() AmlTokenOutput
	ToAmlTokenOutputWithContext(context.Context) AmlTokenOutput
}

// AML Token identity configuration.
type AmlTokenArgs struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
}

func (AmlTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (i AmlTokenArgs) ToAmlTokenOutput() AmlTokenOutput {
	return i.ToAmlTokenOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput)
}

func (i AmlTokenArgs) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i AmlTokenArgs) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenOutput).ToAmlTokenPtrOutputWithContext(ctx)
}

// AmlTokenPtrInput is an input type that accepts AmlTokenArgs, AmlTokenPtr and AmlTokenPtrOutput values.
// You can construct a concrete instance of `AmlTokenPtrInput` via:
//
//	        AmlTokenArgs{...}
//
//	or:
//
//	        nil
type AmlTokenPtrInput interface {
	pulumi.Input

	ToAmlTokenPtrOutput() AmlTokenPtrOutput
	ToAmlTokenPtrOutputWithContext(context.Context) AmlTokenPtrOutput
}

type amlTokenPtrType AmlTokenArgs

func AmlTokenPtr(v *AmlTokenArgs) AmlTokenPtrInput {
	return (*amlTokenPtrType)(v)
}

func (*amlTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return i.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (i *amlTokenPtrType) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AmlTokenPtrOutput)
}

// AML Token identity configuration.
type AmlTokenOutput struct{ *pulumi.OutputState }

func (AmlTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlToken)(nil)).Elem()
}

func (o AmlTokenOutput) ToAmlTokenOutput() AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenOutputWithContext(ctx context.Context) AmlTokenOutput {
	return o
}

func (o AmlTokenOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o.ToAmlTokenPtrOutputWithContext(context.Background())
}

func (o AmlTokenOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AmlToken) *AmlToken {
		return &v
	}).(AmlTokenPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlToken) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenPtrOutput struct{ *pulumi.OutputState }

func (AmlTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlToken)(nil)).Elem()
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutput() AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) ToAmlTokenPtrOutputWithContext(ctx context.Context) AmlTokenPtrOutput {
	return o
}

func (o AmlTokenPtrOutput) Elem() AmlTokenOutput {
	return o.ApplyT(func(v *AmlToken) AmlToken {
		if v != nil {
			return *v
		}
		var ret AmlToken
		return ret
	}).(AmlTokenOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlToken) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// AML Token identity configuration.
type AmlTokenResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'AMLToken'.
	IdentityType string `pulumi:"identityType"`
}

// AML Token identity configuration.
type AmlTokenResponseOutput struct{ *pulumi.OutputState }

func (AmlTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutput() AmlTokenResponseOutput {
	return o
}

func (o AmlTokenResponseOutput) ToAmlTokenResponseOutputWithContext(ctx context.Context) AmlTokenResponseOutput {
	return o
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v AmlTokenResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

type AmlTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (AmlTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AmlTokenResponse)(nil)).Elem()
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutput() AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) ToAmlTokenResponsePtrOutputWithContext(ctx context.Context) AmlTokenResponsePtrOutput {
	return o
}

func (o AmlTokenResponsePtrOutput) Elem() AmlTokenResponseOutput {
	return o.ApplyT(func(v *AmlTokenResponse) AmlTokenResponse {
		if v != nil {
			return *v
		}
		var ret AmlTokenResponse
		return ret
	}).(AmlTokenResponseOutput)
}

// Enum to determine identity framework.
// Expected value is 'AMLToken'.
func (o AmlTokenResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AmlTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoForecastHorizonInput is an input type that accepts AutoForecastHorizonArgs and AutoForecastHorizonOutput values.
// You can construct a concrete instance of `AutoForecastHorizonInput` via:
//
//	AutoForecastHorizonArgs{...}
type AutoForecastHorizonInput interface {
	pulumi.Input

	ToAutoForecastHorizonOutput() AutoForecastHorizonOutput
	ToAutoForecastHorizonOutputWithContext(context.Context) AutoForecastHorizonOutput
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return i.ToAutoForecastHorizonOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput)
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i AutoForecastHorizonArgs) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonOutput).ToAutoForecastHorizonPtrOutputWithContext(ctx)
}

// AutoForecastHorizonPtrInput is an input type that accepts AutoForecastHorizonArgs, AutoForecastHorizonPtr and AutoForecastHorizonPtrOutput values.
// You can construct a concrete instance of `AutoForecastHorizonPtrInput` via:
//
//	        AutoForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type AutoForecastHorizonPtrInput interface {
	pulumi.Input

	ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput
	ToAutoForecastHorizonPtrOutputWithContext(context.Context) AutoForecastHorizonPtrOutput
}

type autoForecastHorizonPtrType AutoForecastHorizonArgs

func AutoForecastHorizonPtr(v *AutoForecastHorizonArgs) AutoForecastHorizonPtrInput {
	return (*autoForecastHorizonPtrType)(v)
}

func (*autoForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return i.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *autoForecastHorizonPtrType) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoForecastHorizonPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutput() AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonOutputWithContext(ctx context.Context) AutoForecastHorizonOutput {
	return o
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o.ToAutoForecastHorizonPtrOutputWithContext(context.Background())
}

func (o AutoForecastHorizonOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoForecastHorizon) *AutoForecastHorizon {
		return &v
	}).(AutoForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizon)(nil)).Elem()
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutput() AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) ToAutoForecastHorizonPtrOutputWithContext(ctx context.Context) AutoForecastHorizonPtrOutput {
	return o
}

func (o AutoForecastHorizonPtrOutput) Elem() AutoForecastHorizonOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) AutoForecastHorizon {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizon
		return ret
	}).(AutoForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Forecast horizon determined automatically by system.
type AutoForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutput() AutoForecastHorizonResponseOutput {
	return o
}

func (o AutoForecastHorizonResponseOutput) ToAutoForecastHorizonResponseOutputWithContext(ctx context.Context) AutoForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoForecastHorizonResponse)(nil)).Elem()
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutput() AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) ToAutoForecastHorizonResponsePtrOutputWithContext(ctx context.Context) AutoForecastHorizonResponsePtrOutput {
	return o
}

func (o AutoForecastHorizonResponsePtrOutput) Elem() AutoForecastHorizonResponseOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) AutoForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret AutoForecastHorizonResponse
		return ret
	}).(AutoForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Auto'.
func (o AutoForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJob struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfiguration `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJob
func (val *AutoMLJob) Defaults() *AutoMLJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJobInput is an input type that accepts AutoMLJobArgs and AutoMLJobOutput values.
// You can construct a concrete instance of `AutoMLJobInput` via:
//
//	AutoMLJobArgs{...}
type AutoMLJobInput interface {
	pulumi.Input

	ToAutoMLJobOutput() AutoMLJobOutput
	ToAutoMLJobOutputWithContext(context.Context) AutoMLJobOutput
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobArgs struct {
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources ResourceConfigurationPtrInput `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule pulumi.Input `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails pulumi.Input `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobArgs
func (val *AutoMLJobArgs) Defaults() *AutoMLJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (AutoMLJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (i AutoMLJobArgs) ToAutoMLJobOutput() AutoMLJobOutput {
	return i.ToAutoMLJobOutputWithContext(context.Background())
}

func (i AutoMLJobArgs) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoMLJobOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobOutput struct{ *pulumi.OutputState }

func (AutoMLJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJob)(nil)).Elem()
}

func (o AutoMLJobOutput) ToAutoMLJobOutput() AutoMLJobOutput {
	return o
}

func (o AutoMLJobOutput) ToAutoMLJobOutputWithContext(ctx context.Context) AutoMLJobOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o AutoMLJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobOutput) Resources() ResourceConfigurationPtrOutput {
	return o.ApplyT(func(v AutoMLJob) *ResourceConfiguration { return v.Resources }).(ResourceConfigurationPtrOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o AutoMLJobOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJob) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponse struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The ARM resource ID of the Environment specification for the job.
	// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'AutoML'.
	JobType string `pulumi:"jobType"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfigurationResponse `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] This represents scenario which can be one of Tables/NLP/Image
	TaskDetails interface{} `pulumi:"taskDetails"`
}

// Defaults sets the appropriate defaults for AutoMLJobResponse
func (val *AutoMLJobResponse) Defaults() *AutoMLJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// AutoMLJob class.
// Use this class for executing AutoML tasks like Classification/Regression etc.
// See TaskType enum for all the tasks supported.
type AutoMLJobResponseOutput struct{ *pulumi.OutputState }

func (AutoMLJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoMLJobResponse)(nil)).Elem()
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutput() AutoMLJobResponseOutput {
	return o
}

func (o AutoMLJobResponseOutput) ToAutoMLJobResponseOutputWithContext(ctx context.Context) AutoMLJobResponseOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o AutoMLJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o AutoMLJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o AutoMLJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the Environment specification for the job.
// This is optional value to provide, if not provided, AutoML will default this to Production AutoML curated environment version when running the job.
func (o AutoMLJobResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables included in the job.
func (o AutoMLJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o AutoMLJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o AutoMLJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Is the asset archived?
func (o AutoMLJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'AutoML'.
func (o AutoMLJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Mapping of output data bindings used in the job.
func (o AutoMLJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o AutoMLJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o AutoMLJobResponseOutput) Resources() ResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v AutoMLJobResponse) *ResourceConfigurationResponse { return v.Resources }).(ResourceConfigurationResponsePtrOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o AutoMLJobResponseOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o AutoMLJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o AutoMLJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AutoMLJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AutoMLJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AutoMLJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] This represents scenario which can be one of Tables/NLP/Image
func (o AutoMLJobResponseOutput) TaskDetails() pulumi.AnyOutput {
	return o.ApplyT(func(v AutoMLJobResponse) interface{} { return v.TaskDetails }).(pulumi.AnyOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoNCrossValidationsInput is an input type that accepts AutoNCrossValidationsArgs and AutoNCrossValidationsOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsInput` via:
//
//	AutoNCrossValidationsArgs{...}
type AutoNCrossValidationsInput interface {
	pulumi.Input

	ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput
	ToAutoNCrossValidationsOutputWithContext(context.Context) AutoNCrossValidationsOutput
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return i.ToAutoNCrossValidationsOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput)
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i AutoNCrossValidationsArgs) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsOutput).ToAutoNCrossValidationsPtrOutputWithContext(ctx)
}

// AutoNCrossValidationsPtrInput is an input type that accepts AutoNCrossValidationsArgs, AutoNCrossValidationsPtr and AutoNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `AutoNCrossValidationsPtrInput` via:
//
//	        AutoNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type AutoNCrossValidationsPtrInput interface {
	pulumi.Input

	ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput
	ToAutoNCrossValidationsPtrOutputWithContext(context.Context) AutoNCrossValidationsPtrOutput
}

type autoNCrossValidationsPtrType AutoNCrossValidationsArgs

func AutoNCrossValidationsPtr(v *AutoNCrossValidationsArgs) AutoNCrossValidationsPtrInput {
	return (*autoNCrossValidationsPtrType)(v)
}

func (*autoNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return i.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *autoNCrossValidationsPtrType) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoNCrossValidationsPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutput() AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsOutputWithContext(ctx context.Context) AutoNCrossValidationsOutput {
	return o
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o.ToAutoNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o AutoNCrossValidationsOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoNCrossValidations) *AutoNCrossValidations {
		return &v
	}).(AutoNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidations)(nil)).Elem()
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutput() AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) ToAutoNCrossValidationsPtrOutputWithContext(ctx context.Context) AutoNCrossValidationsPtrOutput {
	return o
}

func (o AutoNCrossValidationsPtrOutput) Elem() AutoNCrossValidationsOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) AutoNCrossValidations {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidations
		return ret
	}).(AutoNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// N-Cross validations determined automatically.
type AutoNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutput() AutoNCrossValidationsResponseOutput {
	return o
}

func (o AutoNCrossValidationsResponseOutput) ToAutoNCrossValidationsResponseOutputWithContext(ctx context.Context) AutoNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoNCrossValidationsResponse)(nil)).Elem()
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutput() AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) ToAutoNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) AutoNCrossValidationsResponsePtrOutput {
	return o
}

func (o AutoNCrossValidationsResponsePtrOutput) Elem() AutoNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) AutoNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret AutoNCrossValidationsResponse
		return ret
	}).(AutoNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Auto'.
func (o AutoNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoSeasonalityInput is an input type that accepts AutoSeasonalityArgs and AutoSeasonalityOutput values.
// You can construct a concrete instance of `AutoSeasonalityInput` via:
//
//	AutoSeasonalityArgs{...}
type AutoSeasonalityInput interface {
	pulumi.Input

	ToAutoSeasonalityOutput() AutoSeasonalityOutput
	ToAutoSeasonalityOutputWithContext(context.Context) AutoSeasonalityOutput
}

type AutoSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return i.ToAutoSeasonalityOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput)
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i AutoSeasonalityArgs) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityOutput).ToAutoSeasonalityPtrOutputWithContext(ctx)
}

// AutoSeasonalityPtrInput is an input type that accepts AutoSeasonalityArgs, AutoSeasonalityPtr and AutoSeasonalityPtrOutput values.
// You can construct a concrete instance of `AutoSeasonalityPtrInput` via:
//
//	        AutoSeasonalityArgs{...}
//
//	or:
//
//	        nil
type AutoSeasonalityPtrInput interface {
	pulumi.Input

	ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput
	ToAutoSeasonalityPtrOutputWithContext(context.Context) AutoSeasonalityPtrOutput
}

type autoSeasonalityPtrType AutoSeasonalityArgs

func AutoSeasonalityPtr(v *AutoSeasonalityArgs) AutoSeasonalityPtrInput {
	return (*autoSeasonalityPtrType)(v)
}

func (*autoSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return i.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (i *autoSeasonalityPtrType) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSeasonalityPtrOutput)
}

type AutoSeasonalityOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutput() AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityOutputWithContext(ctx context.Context) AutoSeasonalityOutput {
	return o
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o.ToAutoSeasonalityPtrOutputWithContext(context.Background())
}

func (o AutoSeasonalityOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoSeasonality) *AutoSeasonality {
		return &v
	}).(AutoSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonality)(nil)).Elem()
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutput() AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) ToAutoSeasonalityPtrOutputWithContext(ctx context.Context) AutoSeasonalityPtrOutput {
	return o
}

func (o AutoSeasonalityPtrOutput) Elem() AutoSeasonalityOutput {
	return o.ApplyT(func(v *AutoSeasonality) AutoSeasonality {
		if v != nil {
			return *v
		}
		var ret AutoSeasonality
		return ret
	}).(AutoSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutput() AutoSeasonalityResponseOutput {
	return o
}

func (o AutoSeasonalityResponseOutput) ToAutoSeasonalityResponseOutputWithContext(ctx context.Context) AutoSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSeasonalityResponse)(nil)).Elem()
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutput() AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) ToAutoSeasonalityResponsePtrOutputWithContext(ctx context.Context) AutoSeasonalityResponsePtrOutput {
	return o
}

func (o AutoSeasonalityResponsePtrOutput) Elem() AutoSeasonalityResponseOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) AutoSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret AutoSeasonalityResponse
		return ret
	}).(AutoSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Auto'.
func (o AutoSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetLagsInput is an input type that accepts AutoTargetLagsArgs and AutoTargetLagsOutput values.
// You can construct a concrete instance of `AutoTargetLagsInput` via:
//
//	AutoTargetLagsArgs{...}
type AutoTargetLagsInput interface {
	pulumi.Input

	ToAutoTargetLagsOutput() AutoTargetLagsOutput
	ToAutoTargetLagsOutputWithContext(context.Context) AutoTargetLagsOutput
}

type AutoTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return i.ToAutoTargetLagsOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput)
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i AutoTargetLagsArgs) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsOutput).ToAutoTargetLagsPtrOutputWithContext(ctx)
}

// AutoTargetLagsPtrInput is an input type that accepts AutoTargetLagsArgs, AutoTargetLagsPtr and AutoTargetLagsPtrOutput values.
// You can construct a concrete instance of `AutoTargetLagsPtrInput` via:
//
//	        AutoTargetLagsArgs{...}
//
//	or:
//
//	        nil
type AutoTargetLagsPtrInput interface {
	pulumi.Input

	ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput
	ToAutoTargetLagsPtrOutputWithContext(context.Context) AutoTargetLagsPtrOutput
}

type autoTargetLagsPtrType AutoTargetLagsArgs

func AutoTargetLagsPtr(v *AutoTargetLagsArgs) AutoTargetLagsPtrInput {
	return (*autoTargetLagsPtrType)(v)
}

func (*autoTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return i.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (i *autoTargetLagsPtrType) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetLagsPtrOutput)
}

type AutoTargetLagsOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutput() AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsOutputWithContext(ctx context.Context) AutoTargetLagsOutput {
	return o
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o.ToAutoTargetLagsPtrOutputWithContext(context.Background())
}

func (o AutoTargetLagsOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetLags) *AutoTargetLags {
		return &v
	}).(AutoTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLags)(nil)).Elem()
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutput() AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) ToAutoTargetLagsPtrOutputWithContext(ctx context.Context) AutoTargetLagsPtrOutput {
	return o
}

func (o AutoTargetLagsPtrOutput) Elem() AutoTargetLagsOutput {
	return o.ApplyT(func(v *AutoTargetLags) AutoTargetLags {
		if v != nil {
			return *v
		}
		var ret AutoTargetLags
		return ret
	}).(AutoTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

type AutoTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

type AutoTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutput() AutoTargetLagsResponseOutput {
	return o
}

func (o AutoTargetLagsResponseOutput) ToAutoTargetLagsResponseOutputWithContext(ctx context.Context) AutoTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetLagsResponse)(nil)).Elem()
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutput() AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) ToAutoTargetLagsResponsePtrOutputWithContext(ctx context.Context) AutoTargetLagsResponsePtrOutput {
	return o
}

func (o AutoTargetLagsResponsePtrOutput) Elem() AutoTargetLagsResponseOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) AutoTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetLagsResponse
		return ret
	}).(AutoTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Auto'.
func (o AutoTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// AutoTargetRollingWindowSizeInput is an input type that accepts AutoTargetRollingWindowSizeArgs and AutoTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizeInput` via:
//
//	AutoTargetRollingWindowSizeArgs{...}
type AutoTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput
	ToAutoTargetRollingWindowSizeOutputWithContext(context.Context) AutoTargetRollingWindowSizeOutput
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode pulumi.StringInput `pulumi:"mode"`
}

func (AutoTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return i.ToAutoTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput)
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i AutoTargetRollingWindowSizeArgs) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizeOutput).ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// AutoTargetRollingWindowSizePtrInput is an input type that accepts AutoTargetRollingWindowSizeArgs, AutoTargetRollingWindowSizePtr and AutoTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `AutoTargetRollingWindowSizePtrInput` via:
//
//	        AutoTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type AutoTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput
	ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Context) AutoTargetRollingWindowSizePtrOutput
}

type autoTargetRollingWindowSizePtrType AutoTargetRollingWindowSizeArgs

func AutoTargetRollingWindowSizePtr(v *AutoTargetRollingWindowSizeArgs) AutoTargetRollingWindowSizePtrInput {
	return (*autoTargetRollingWindowSizePtrType)(v)
}

func (*autoTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return i.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *autoTargetRollingWindowSizePtrType) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoTargetRollingWindowSizePtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutput() AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizeOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeOutput {
	return o
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o.ToAutoTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o AutoTargetRollingWindowSizeOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoTargetRollingWindowSize) *AutoTargetRollingWindowSize {
		return &v
	}).(AutoTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSize)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutput() AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) ToAutoTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizePtrOutput) Elem() AutoTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) AutoTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSize
		return ret
	}).(AutoTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Auto'.
	Mode string `pulumi:"mode"`
}

// Target lags rolling window determined automatically.
type AutoTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutput() AutoTargetRollingWindowSizeResponseOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponseOutput) ToAutoTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v AutoTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

type AutoTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (AutoTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutput() AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) ToAutoTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) AutoTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o AutoTargetRollingWindowSizeResponsePtrOutput) Elem() AutoTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) AutoTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret AutoTargetRollingWindowSizeResponse
		return ret
	}).(AutoTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Auto'.
func (o AutoTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AutoTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastore struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastore
func (val *AzureBlobDatastore) Defaults() *AzureBlobDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureBlobDatastoreInput is an input type that accepts AzureBlobDatastoreArgs and AzureBlobDatastoreOutput values.
// You can construct a concrete instance of `AzureBlobDatastoreInput` via:
//
//	AzureBlobDatastoreArgs{...}
type AzureBlobDatastoreInput interface {
	pulumi.Input

	ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput
	ToAzureBlobDatastoreOutputWithContext(context.Context) AzureBlobDatastoreOutput
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreArgs struct {
	// Storage account name.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Storage account container name.
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreArgs
func (val *AzureBlobDatastoreArgs) Defaults() *AzureBlobDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureBlobDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return i.ToAzureBlobDatastoreOutputWithContext(context.Background())
}

func (i AzureBlobDatastoreArgs) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureBlobDatastoreOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastore)(nil)).Elem()
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutput() AzureBlobDatastoreOutput {
	return o
}

func (o AzureBlobDatastoreOutput) ToAzureBlobDatastoreOutputWithContext(ctx context.Context) AzureBlobDatastoreOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponse struct {
	// Storage account name.
	AccountName *string `pulumi:"accountName"`
	// Storage account container name.
	ContainerName *string `pulumi:"containerName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureBlob'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureBlobDatastoreResponse
func (val *AzureBlobDatastoreResponse) Defaults() *AzureBlobDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Blob datastore configuration.
type AzureBlobDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureBlobDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureBlobDatastoreResponse)(nil)).Elem()
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutput() AzureBlobDatastoreResponseOutput {
	return o
}

func (o AzureBlobDatastoreResponseOutput) ToAzureBlobDatastoreResponseOutputWithContext(ctx context.Context) AzureBlobDatastoreResponseOutput {
	return o
}

// Storage account name.
func (o AzureBlobDatastoreResponseOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Storage account container name.
func (o AzureBlobDatastoreResponseOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// [Required] Account credentials.
func (o AzureBlobDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureBlob'.
func (o AzureBlobDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureBlobDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureBlobDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureBlobDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureBlobDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureBlobDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureBlobDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureBlobDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureBlobDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1Datastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1Datastore
func (val *AzureDataLakeGen1Datastore) Defaults() *AzureDataLakeGen1Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen1DatastoreInput is an input type that accepts AzureDataLakeGen1DatastoreArgs and AzureDataLakeGen1DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen1DatastoreInput` via:
//
//	AzureDataLakeGen1DatastoreArgs{...}
type AzureDataLakeGen1DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput
	ToAzureDataLakeGen1DatastoreOutputWithContext(context.Context) AzureDataLakeGen1DatastoreOutput
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreArgs struct {
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName pulumi.StringInput `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreArgs
func (val *AzureDataLakeGen1DatastoreArgs) Defaults() *AzureDataLakeGen1DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen1DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return i.ToAzureDataLakeGen1DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen1DatastoreArgs) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen1DatastoreOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutput() AzureDataLakeGen1DatastoreOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreOutput) ToAzureDataLakeGen1DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) string { return v.StoreName }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen1'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// [Required] Azure Data Lake store name.
	StoreName string `pulumi:"storeName"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen1DatastoreResponse
func (val *AzureDataLakeGen1DatastoreResponse) Defaults() *AzureDataLakeGen1DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen1 datastore configuration.
type AzureDataLakeGen1DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen1DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen1DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutput() AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen1DatastoreResponseOutput) ToAzureDataLakeGen1DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen1DatastoreResponseOutput {
	return o
}

// [Required] Account credentials.
func (o AzureDataLakeGen1DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen1'.
func (o AzureDataLakeGen1DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen1DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen1DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen1DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen1DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// [Required] Azure Data Lake store name.
func (o AzureDataLakeGen1DatastoreResponseOutput) StoreName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) string { return v.StoreName }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen1DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen1DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2Datastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2Datastore
func (val *AzureDataLakeGen2Datastore) Defaults() *AzureDataLakeGen2Datastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureDataLakeGen2DatastoreInput is an input type that accepts AzureDataLakeGen2DatastoreArgs and AzureDataLakeGen2DatastoreOutput values.
// You can construct a concrete instance of `AzureDataLakeGen2DatastoreInput` via:
//
//	AzureDataLakeGen2DatastoreArgs{...}
type AzureDataLakeGen2DatastoreInput interface {
	pulumi.Input

	ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput
	ToAzureDataLakeGen2DatastoreOutputWithContext(context.Context) AzureDataLakeGen2DatastoreOutput
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem pulumi.StringInput `pulumi:"filesystem"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreArgs
func (val *AzureDataLakeGen2DatastoreArgs) Defaults() *AzureDataLakeGen2DatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureDataLakeGen2DatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return i.ToAzureDataLakeGen2DatastoreOutputWithContext(context.Background())
}

func (i AzureDataLakeGen2DatastoreArgs) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureDataLakeGen2DatastoreOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2Datastore)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutput() AzureDataLakeGen2DatastoreOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreOutput) ToAzureDataLakeGen2DatastoreOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) string { return v.Filesystem }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2Datastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureDataLakeGen2'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Data Lake Gen2 filesystem.
	Filesystem string `pulumi:"filesystem"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureDataLakeGen2DatastoreResponse
func (val *AzureDataLakeGen2DatastoreResponse) Defaults() *AzureDataLakeGen2DatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure Data Lake Gen2 datastore configuration.
type AzureDataLakeGen2DatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureDataLakeGen2DatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureDataLakeGen2DatastoreResponse)(nil)).Elem()
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutput() AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

func (o AzureDataLakeGen2DatastoreResponseOutput) ToAzureDataLakeGen2DatastoreResponseOutputWithContext(ctx context.Context) AzureDataLakeGen2DatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureDataLakeGen2DatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureDataLakeGen2DatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureDataLakeGen2'.
func (o AzureDataLakeGen2DatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureDataLakeGen2DatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Data Lake Gen2 filesystem.
func (o AzureDataLakeGen2DatastoreResponseOutput) Filesystem() pulumi.StringOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) string { return v.Filesystem }).(pulumi.StringOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureDataLakeGen2DatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureDataLakeGen2DatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureDataLakeGen2DatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureDataLakeGen2DatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureDataLakeGen2DatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureDataLakeGen2DatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure File datastore configuration.
type AzureFileDatastore struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastore
func (val *AzureFileDatastore) Defaults() *AzureFileDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// AzureFileDatastoreInput is an input type that accepts AzureFileDatastoreArgs and AzureFileDatastoreOutput values.
// You can construct a concrete instance of `AzureFileDatastoreInput` via:
//
//	AzureFileDatastoreArgs{...}
type AzureFileDatastoreInput interface {
	pulumi.Input

	ToAzureFileDatastoreOutput() AzureFileDatastoreOutput
	ToAzureFileDatastoreOutputWithContext(context.Context) AzureFileDatastoreOutput
}

// Azure File datastore configuration.
type AzureFileDatastoreArgs struct {
	// [Required] Storage account name.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName pulumi.StringInput `pulumi:"fileShareName"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity pulumi.StringPtrInput `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreArgs
func (val *AzureFileDatastoreArgs) Defaults() *AzureFileDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		tmp.ServiceDataAccessAuthIdentity = pulumi.StringPtr("None")
	}
	return &tmp
}
func (AzureFileDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return i.ToAzureFileDatastoreOutputWithContext(context.Background())
}

func (i AzureFileDatastoreArgs) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzureFileDatastoreOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastore)(nil)).Elem()
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutput() AzureFileDatastoreOutput {
	return o
}

func (o AzureFileDatastoreOutput) ToAzureFileDatastoreOutputWithContext(ctx context.Context) AzureFileDatastoreOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastore) string { return v.FileShareName }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastore) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Azure File datastore configuration.
type AzureFileDatastoreResponse struct {
	// [Required] Storage account name.
	AccountName string `pulumi:"accountName"`
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'AzureFile'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Azure cloud endpoint for the storage account.
	Endpoint *string `pulumi:"endpoint"`
	// [Required] The name of the Azure file share that the datastore points to.
	FileShareName string `pulumi:"fileShareName"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account.
	Protocol *string `pulumi:"protocol"`
	// Indicates which identity to use to authenticate service data access to customer's storage.
	ServiceDataAccessAuthIdentity *string `pulumi:"serviceDataAccessAuthIdentity"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for AzureFileDatastoreResponse
func (val *AzureFileDatastoreResponse) Defaults() *AzureFileDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ServiceDataAccessAuthIdentity == nil {
		serviceDataAccessAuthIdentity_ := "None"
		tmp.ServiceDataAccessAuthIdentity = &serviceDataAccessAuthIdentity_
	}
	return &tmp
}

// Azure File datastore configuration.
type AzureFileDatastoreResponseOutput struct{ *pulumi.OutputState }

func (AzureFileDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureFileDatastoreResponse)(nil)).Elem()
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutput() AzureFileDatastoreResponseOutput {
	return o
}

func (o AzureFileDatastoreResponseOutput) ToAzureFileDatastoreResponseOutputWithContext(ctx context.Context) AzureFileDatastoreResponseOutput {
	return o
}

// [Required] Storage account name.
func (o AzureFileDatastoreResponseOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.AccountName }).(pulumi.StringOutput)
}

// [Required] Account credentials.
func (o AzureFileDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'AzureFile'.
func (o AzureFileDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o AzureFileDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Azure cloud endpoint for the storage account.
func (o AzureFileDatastoreResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// [Required] The name of the Azure file share that the datastore points to.
func (o AzureFileDatastoreResponseOutput) FileShareName() pulumi.StringOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) string { return v.FileShareName }).(pulumi.StringOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o AzureFileDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// The asset property dictionary.
func (o AzureFileDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account.
func (o AzureFileDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Indicates which identity to use to authenticate service data access to customer's storage.
func (o AzureFileDatastoreResponseOutput) ServiceDataAccessAuthIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) *string { return v.ServiceDataAccessAuthIdentity }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o AzureFileDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v AzureFileDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicy
func (val *BanditPolicy) Defaults() *BanditPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// BanditPolicyInput is an input type that accepts BanditPolicyArgs and BanditPolicyOutput values.
// You can construct a concrete instance of `BanditPolicyInput` via:
//
//	BanditPolicyArgs{...}
type BanditPolicyInput interface {
	pulumi.Input

	ToBanditPolicyOutput() BanditPolicyOutput
	ToBanditPolicyOutputWithContext(context.Context) BanditPolicyOutput
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount pulumi.Float64PtrInput `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor pulumi.Float64PtrInput `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyArgs
func (val *BanditPolicyArgs) Defaults() *BanditPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	if tmp.SlackAmount == nil {
		tmp.SlackAmount = pulumi.Float64Ptr(0.0)
	}
	if tmp.SlackFactor == nil {
		tmp.SlackFactor = pulumi.Float64Ptr(0.0)
	}
	return &tmp
}
func (BanditPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (i BanditPolicyArgs) ToBanditPolicyOutput() BanditPolicyOutput {
	return i.ToBanditPolicyOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput)
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i BanditPolicyArgs) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyOutput).ToBanditPolicyPtrOutputWithContext(ctx)
}

// BanditPolicyPtrInput is an input type that accepts BanditPolicyArgs, BanditPolicyPtr and BanditPolicyPtrOutput values.
// You can construct a concrete instance of `BanditPolicyPtrInput` via:
//
//	        BanditPolicyArgs{...}
//
//	or:
//
//	        nil
type BanditPolicyPtrInput interface {
	pulumi.Input

	ToBanditPolicyPtrOutput() BanditPolicyPtrOutput
	ToBanditPolicyPtrOutputWithContext(context.Context) BanditPolicyPtrOutput
}

type banditPolicyPtrType BanditPolicyArgs

func BanditPolicyPtr(v *BanditPolicyArgs) BanditPolicyPtrInput {
	return (*banditPolicyPtrType)(v)
}

func (*banditPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return i.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (i *banditPolicyPtrType) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BanditPolicyPtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyOutput struct{ *pulumi.OutputState }

func (BanditPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyOutput) ToBanditPolicyOutput() BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyOutputWithContext(ctx context.Context) BanditPolicyOutput {
	return o
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o.ToBanditPolicyPtrOutputWithContext(context.Background())
}

func (o BanditPolicyOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BanditPolicy) *BanditPolicy {
		return &v
	}).(BanditPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicy) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyPtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicy)(nil)).Elem()
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutput() BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) ToBanditPolicyPtrOutputWithContext(ctx context.Context) BanditPolicyPtrOutput {
	return o
}

func (o BanditPolicyPtrOutput) Elem() BanditPolicyOutput {
	return o.ApplyT(func(v *BanditPolicy) BanditPolicy {
		if v != nil {
			return *v
		}
		var ret BanditPolicy
		return ret
	}).(BanditPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyPtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyPtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicy) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'Bandit'.
	PolicyType string `pulumi:"policyType"`
	// Absolute distance allowed from the best performing run.
	SlackAmount *float64 `pulumi:"slackAmount"`
	// Ratio of the allowed distance from the best performing run.
	SlackFactor *float64 `pulumi:"slackFactor"`
}

// Defaults sets the appropriate defaults for BanditPolicyResponse
func (val *BanditPolicyResponse) Defaults() *BanditPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.SlackAmount == nil {
		slackAmount_ := 0.0
		tmp.SlackAmount = &slackAmount_
	}
	if tmp.SlackFactor == nil {
		slackFactor_ := 0.0
		tmp.SlackFactor = &slackFactor_
	}
	return &tmp
}

// Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation
type BanditPolicyResponseOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutput() BanditPolicyResponseOutput {
	return o
}

func (o BanditPolicyResponseOutput) ToBanditPolicyResponseOutputWithContext(ctx context.Context) BanditPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v BanditPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponseOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackAmount }).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponseOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BanditPolicyResponse) *float64 { return v.SlackFactor }).(pulumi.Float64PtrOutput)
}

type BanditPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (BanditPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BanditPolicyResponse)(nil)).Elem()
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutput() BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) ToBanditPolicyResponsePtrOutputWithContext(ctx context.Context) BanditPolicyResponsePtrOutput {
	return o
}

func (o BanditPolicyResponsePtrOutput) Elem() BanditPolicyResponseOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) BanditPolicyResponse {
		if v != nil {
			return *v
		}
		var ret BanditPolicyResponse
		return ret
	}).(BanditPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o BanditPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o BanditPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'Bandit'.
func (o BanditPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Absolute distance allowed from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackAmount() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackAmount
	}).(pulumi.Float64PtrOutput)
}

// Ratio of the allowed distance from the best performing run.
func (o BanditPolicyResponsePtrOutput) SlackFactor() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BanditPolicyResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SlackFactor
	}).(pulumi.Float64PtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentType struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *ResourceConfiguration `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettings `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentType
func (val *BatchDeploymentType) Defaults() *BatchDeploymentType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// BatchDeploymentTypeInput is an input type that accepts BatchDeploymentTypeArgs and BatchDeploymentTypeOutput values.
// You can construct a concrete instance of `BatchDeploymentTypeInput` via:
//
//	BatchDeploymentTypeArgs{...}
type BatchDeploymentTypeInput interface {
	pulumi.Input

	ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput
	ToBatchDeploymentTypeOutputWithContext(context.Context) BatchDeploymentTypeOutput
}

// Batch inference settings per deployment.
type BatchDeploymentTypeArgs struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel pulumi.StringPtrInput `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize pulumi.Float64PtrInput `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model pulumi.Input `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction pulumi.StringPtrInput `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName pulumi.StringPtrInput `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources ResourceConfigurationPtrInput `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings BatchRetrySettingsPtrInput `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentTypeArgs
func (val *BatchDeploymentTypeArgs) Defaults() *BatchDeploymentTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		tmp.ErrorThreshold = pulumi.IntPtr(-1)
	}
	if tmp.LoggingLevel == nil {
		tmp.LoggingLevel = pulumi.StringPtr("Info")
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		tmp.MaxConcurrencyPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MiniBatchSize == nil {
		tmp.MiniBatchSize = pulumi.Float64Ptr(10.0)
	}
	if tmp.OutputAction == nil {
		tmp.OutputAction = pulumi.StringPtr("AppendRow")
	}
	if tmp.OutputFileName == nil {
		tmp.OutputFileName = pulumi.StringPtr("predictions.csv")
	}

	return &tmp
}
func (BatchDeploymentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return i.ToBatchDeploymentTypeOutputWithContext(context.Background())
}

func (i BatchDeploymentTypeArgs) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchDeploymentTypeOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentTypeOutput struct{ *pulumi.OutputState }

func (BatchDeploymentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentType)(nil)).Elem()
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutput() BatchDeploymentTypeOutput {
	return o
}

func (o BatchDeploymentTypeOutput) ToBatchDeploymentTypeOutputWithContext(ctx context.Context) BatchDeploymentTypeOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentTypeOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o BatchDeploymentTypeOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentTypeOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentTypeOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentTypeOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentTypeOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentTypeOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentTypeOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentType) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentTypeOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentTypeOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentTypeOutput) Resources() ResourceConfigurationPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *ResourceConfiguration { return v.Resources }).(ResourceConfigurationPtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentTypeOutput) RetrySettings() BatchRetrySettingsPtrOutput {
	return o.ApplyT(func(v BatchDeploymentType) *BatchRetrySettings { return v.RetrySettings }).(BatchRetrySettingsPtrOutput)
}

// Batch inference settings per deployment.
type BatchDeploymentResponse struct {
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Compute target for batch inference operation.
	Compute *string `pulumi:"compute"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Error threshold, if the error count for the entire input goes above this value,
	// the batch inference will be aborted. Range is [-1, int.MaxValue].
	// For FileDataset, this value is the count of file failures.
	// For TabularDataset, this value is the count of record failures.
	// If set to -1 (the lower bound), all failures during batch inference will be ignored.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// Logging level for batch inference operation.
	LoggingLevel *string `pulumi:"loggingLevel"`
	// Indicates maximum number of parallelism per instance.
	MaxConcurrencyPerInstance *int `pulumi:"maxConcurrencyPerInstance"`
	// Size of the mini-batch passed to each batch invocation.
	// For FileDataset, this is the number of files per mini-batch.
	// For TabularDataset, this is the size of the records in bytes, per mini-batch.
	MiniBatchSize *float64 `pulumi:"miniBatchSize"`
	// Reference to the model asset for the endpoint deployment.
	Model interface{} `pulumi:"model"`
	// Indicates how the output will be organized.
	OutputAction *string `pulumi:"outputAction"`
	// Customized output file name for append_row output action.
	OutputFileName *string `pulumi:"outputFileName"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Indicates compute configuration for the job.
	// If not provided, will default to the defaults defined in ResourceConfiguration.
	Resources *ResourceConfigurationResponse `pulumi:"resources"`
	// Retry Settings for the batch inference operation.
	// If not provided, will default to the defaults defined in BatchRetrySettings.
	RetrySettings *BatchRetrySettingsResponse `pulumi:"retrySettings"`
}

// Defaults sets the appropriate defaults for BatchDeploymentResponse
func (val *BatchDeploymentResponse) Defaults() *BatchDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ErrorThreshold == nil {
		errorThreshold_ := -1
		tmp.ErrorThreshold = &errorThreshold_
	}
	if tmp.LoggingLevel == nil {
		loggingLevel_ := "Info"
		tmp.LoggingLevel = &loggingLevel_
	}
	if tmp.MaxConcurrencyPerInstance == nil {
		maxConcurrencyPerInstance_ := 1
		tmp.MaxConcurrencyPerInstance = &maxConcurrencyPerInstance_
	}
	if tmp.MiniBatchSize == nil {
		miniBatchSize_ := 10.0
		tmp.MiniBatchSize = &miniBatchSize_
	}
	if tmp.OutputAction == nil {
		outputAction_ := "AppendRow"
		tmp.OutputAction = &outputAction_
	}
	if tmp.OutputFileName == nil {
		outputFileName_ := "predictions.csv"
		tmp.OutputFileName = &outputFileName_
	}
	tmp.Resources = tmp.Resources.Defaults()

	tmp.RetrySettings = tmp.RetrySettings.Defaults()

	return &tmp
}

// Batch inference settings per deployment.
type BatchDeploymentResponseOutput struct{ *pulumi.OutputState }

func (BatchDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchDeploymentResponse)(nil)).Elem()
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutput() BatchDeploymentResponseOutput {
	return o
}

func (o BatchDeploymentResponseOutput) ToBatchDeploymentResponseOutputWithContext(ctx context.Context) BatchDeploymentResponseOutput {
	return o
}

// Code configuration for the endpoint deployment.
func (o BatchDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Compute target for batch inference operation.
func (o BatchDeploymentResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the endpoint deployment.
func (o BatchDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o BatchDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o BatchDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Error threshold, if the error count for the entire input goes above this value,
// the batch inference will be aborted. Range is [-1, int.MaxValue].
// For FileDataset, this value is the count of file failures.
// For TabularDataset, this value is the count of record failures.
// If set to -1 (the lower bound), all failures during batch inference will be ignored.
func (o BatchDeploymentResponseOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// Logging level for batch inference operation.
func (o BatchDeploymentResponseOutput) LoggingLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.LoggingLevel }).(pulumi.StringPtrOutput)
}

// Indicates maximum number of parallelism per instance.
func (o BatchDeploymentResponseOutput) MaxConcurrencyPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *int { return v.MaxConcurrencyPerInstance }).(pulumi.IntPtrOutput)
}

// Size of the mini-batch passed to each batch invocation.
// For FileDataset, this is the number of files per mini-batch.
// For TabularDataset, this is the size of the records in bytes, per mini-batch.
func (o BatchDeploymentResponseOutput) MiniBatchSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *float64 { return v.MiniBatchSize }).(pulumi.Float64PtrOutput)
}

// Reference to the model asset for the endpoint deployment.
func (o BatchDeploymentResponseOutput) Model() pulumi.AnyOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) interface{} { return v.Model }).(pulumi.AnyOutput)
}

// Indicates how the output will be organized.
func (o BatchDeploymentResponseOutput) OutputAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputAction }).(pulumi.StringPtrOutput)
}

// Customized output file name for append_row output action.
func (o BatchDeploymentResponseOutput) OutputFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *string { return v.OutputFileName }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o BatchDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Indicates compute configuration for the job.
// If not provided, will default to the defaults defined in ResourceConfiguration.
func (o BatchDeploymentResponseOutput) Resources() ResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *ResourceConfigurationResponse { return v.Resources }).(ResourceConfigurationResponsePtrOutput)
}

// Retry Settings for the batch inference operation.
// If not provided, will default to the defaults defined in BatchRetrySettings.
func (o BatchDeploymentResponseOutput) RetrySettings() BatchRetrySettingsResponsePtrOutput {
	return o.ApplyT(func(v BatchDeploymentResponse) *BatchRetrySettingsResponse { return v.RetrySettings }).(BatchRetrySettingsResponsePtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaults `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
}

// BatchEndpointTypeInput is an input type that accepts BatchEndpointTypeArgs and BatchEndpointTypeOutput values.
// You can construct a concrete instance of `BatchEndpointTypeInput` via:
//
//	BatchEndpointTypeArgs{...}
type BatchEndpointTypeInput interface {
	pulumi.Input

	ToBatchEndpointTypeOutput() BatchEndpointTypeOutput
	ToBatchEndpointTypeOutputWithContext(context.Context) BatchEndpointTypeOutput
}

// Batch endpoint configuration.
type BatchEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults BatchEndpointDefaultsPtrInput `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (BatchEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return i.ToBatchEndpointTypeOutputWithContext(context.Background())
}

func (i BatchEndpointTypeArgs) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointTypeOutput)
}

// Batch endpoint configuration.
type BatchEndpointTypeOutput struct{ *pulumi.OutputState }

func (BatchEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointType)(nil)).Elem()
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutput() BatchEndpointTypeOutput {
	return o
}

func (o BatchEndpointTypeOutput) ToBatchEndpointTypeOutputWithContext(ctx context.Context) BatchEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointTypeOutput) Defaults() BatchEndpointDefaultsPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *BatchEndpointDefaults { return v.Defaults }).(BatchEndpointDefaultsPtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o BatchEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v BatchEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Batch endpoint default values
type BatchEndpointDefaults struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// BatchEndpointDefaultsInput is an input type that accepts BatchEndpointDefaultsArgs and BatchEndpointDefaultsOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsInput` via:
//
//	BatchEndpointDefaultsArgs{...}
type BatchEndpointDefaultsInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput
	ToBatchEndpointDefaultsOutputWithContext(context.Context) BatchEndpointDefaultsOutput
}

// Batch endpoint default values
type BatchEndpointDefaultsArgs struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName pulumi.StringPtrInput `pulumi:"deploymentName"`
}

func (BatchEndpointDefaultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return i.ToBatchEndpointDefaultsOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput)
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i BatchEndpointDefaultsArgs) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsOutput).ToBatchEndpointDefaultsPtrOutputWithContext(ctx)
}

// BatchEndpointDefaultsPtrInput is an input type that accepts BatchEndpointDefaultsArgs, BatchEndpointDefaultsPtr and BatchEndpointDefaultsPtrOutput values.
// You can construct a concrete instance of `BatchEndpointDefaultsPtrInput` via:
//
//	        BatchEndpointDefaultsArgs{...}
//
//	or:
//
//	        nil
type BatchEndpointDefaultsPtrInput interface {
	pulumi.Input

	ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput
	ToBatchEndpointDefaultsPtrOutputWithContext(context.Context) BatchEndpointDefaultsPtrOutput
}

type batchEndpointDefaultsPtrType BatchEndpointDefaultsArgs

func BatchEndpointDefaultsPtr(v *BatchEndpointDefaultsArgs) BatchEndpointDefaultsPtrInput {
	return (*batchEndpointDefaultsPtrType)(v)
}

func (*batchEndpointDefaultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return i.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (i *batchEndpointDefaultsPtrType) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEndpointDefaultsPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutput() BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsOutputWithContext(ctx context.Context) BatchEndpointDefaultsOutput {
	return o
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o.ToBatchEndpointDefaultsPtrOutputWithContext(context.Background())
}

func (o BatchEndpointDefaultsOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchEndpointDefaults) *BatchEndpointDefaults {
		return &v
	}).(BatchEndpointDefaultsPtrOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaults) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsPtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaults)(nil)).Elem()
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutput() BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) ToBatchEndpointDefaultsPtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsPtrOutput {
	return o
}

func (o BatchEndpointDefaultsPtrOutput) Elem() BatchEndpointDefaultsOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) BatchEndpointDefaults {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaults
		return ret
	}).(BatchEndpointDefaultsOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsPtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaults) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint default values
type BatchEndpointDefaultsResponse struct {
	// Name of the deployment that will be default for the endpoint.
	// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
	DeploymentName *string `pulumi:"deploymentName"`
}

// Batch endpoint default values
type BatchEndpointDefaultsResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutput() BatchEndpointDefaultsResponseOutput {
	return o
}

func (o BatchEndpointDefaultsResponseOutput) ToBatchEndpointDefaultsResponseOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponseOutput {
	return o
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponseOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointDefaultsResponse) *string { return v.DeploymentName }).(pulumi.StringPtrOutput)
}

type BatchEndpointDefaultsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchEndpointDefaultsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEndpointDefaultsResponse)(nil)).Elem()
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutput() BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) ToBatchEndpointDefaultsResponsePtrOutputWithContext(ctx context.Context) BatchEndpointDefaultsResponsePtrOutput {
	return o
}

func (o BatchEndpointDefaultsResponsePtrOutput) Elem() BatchEndpointDefaultsResponseOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) BatchEndpointDefaultsResponse {
		if v != nil {
			return *v
		}
		var ret BatchEndpointDefaultsResponse
		return ret
	}).(BatchEndpointDefaultsResponseOutput)
}

// Name of the deployment that will be default for the endpoint.
// This deployment will end up getting 100% traffic when the endpoint scoring URL is invoked.
func (o BatchEndpointDefaultsResponsePtrOutput) DeploymentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEndpointDefaultsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DeploymentName
	}).(pulumi.StringPtrOutput)
}

// Batch endpoint configuration.
type BatchEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// Default values for Batch Endpoint
	Defaults *BatchEndpointDefaultsResponse `pulumi:"defaults"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
}

// Batch endpoint configuration.
type BatchEndpointResponseOutput struct{ *pulumi.OutputState }

func (BatchEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchEndpointResponse)(nil)).Elem()
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutput() BatchEndpointResponseOutput {
	return o
}

func (o BatchEndpointResponseOutput) ToBatchEndpointResponseOutputWithContext(ctx context.Context) BatchEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o BatchEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// Default values for Batch Endpoint
func (o BatchEndpointResponseOutput) Defaults() BatchEndpointDefaultsResponsePtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *BatchEndpointDefaultsResponse { return v.Defaults }).(BatchEndpointDefaultsResponsePtrOutput)
}

// Description of the inference endpoint.
func (o BatchEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o BatchEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v BatchEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o BatchEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Endpoint URI.
func (o BatchEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o BatchEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v BatchEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettings struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettings
func (val *BatchRetrySettings) Defaults() *BatchRetrySettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// BatchRetrySettingsInput is an input type that accepts BatchRetrySettingsArgs and BatchRetrySettingsOutput values.
// You can construct a concrete instance of `BatchRetrySettingsInput` via:
//
//	BatchRetrySettingsArgs{...}
type BatchRetrySettingsInput interface {
	pulumi.Input

	ToBatchRetrySettingsOutput() BatchRetrySettingsOutput
	ToBatchRetrySettingsOutputWithContext(context.Context) BatchRetrySettingsOutput
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsArgs struct {
	// Maximum retry count for a mini-batch
	MaxRetries pulumi.IntPtrInput `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsArgs
func (val *BatchRetrySettingsArgs) Defaults() *BatchRetrySettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		tmp.MaxRetries = pulumi.IntPtr(3)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT30S")
	}
	return &tmp
}
func (BatchRetrySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return i.ToBatchRetrySettingsOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput)
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i BatchRetrySettingsArgs) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsOutput).ToBatchRetrySettingsPtrOutputWithContext(ctx)
}

// BatchRetrySettingsPtrInput is an input type that accepts BatchRetrySettingsArgs, BatchRetrySettingsPtr and BatchRetrySettingsPtrOutput values.
// You can construct a concrete instance of `BatchRetrySettingsPtrInput` via:
//
//	        BatchRetrySettingsArgs{...}
//
//	or:
//
//	        nil
type BatchRetrySettingsPtrInput interface {
	pulumi.Input

	ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput
	ToBatchRetrySettingsPtrOutputWithContext(context.Context) BatchRetrySettingsPtrOutput
}

type batchRetrySettingsPtrType BatchRetrySettingsArgs

func BatchRetrySettingsPtr(v *BatchRetrySettingsArgs) BatchRetrySettingsPtrInput {
	return (*batchRetrySettingsPtrType)(v)
}

func (*batchRetrySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return i.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (i *batchRetrySettingsPtrType) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchRetrySettingsPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutput() BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsOutputWithContext(ctx context.Context) BatchRetrySettingsOutput {
	return o
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o.ToBatchRetrySettingsPtrOutputWithContext(context.Background())
}

func (o BatchRetrySettingsOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchRetrySettings) *BatchRetrySettings {
		return &v
	}).(BatchRetrySettingsPtrOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsPtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettings)(nil)).Elem()
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutput() BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) ToBatchRetrySettingsPtrOutputWithContext(ctx context.Context) BatchRetrySettingsPtrOutput {
	return o
}

func (o BatchRetrySettingsPtrOutput) Elem() BatchRetrySettingsOutput {
	return o.ApplyT(func(v *BatchRetrySettings) BatchRetrySettings {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettings
		return ret
	}).(BatchRetrySettingsOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsPtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponse struct {
	// Maximum retry count for a mini-batch
	MaxRetries *int `pulumi:"maxRetries"`
	// Invocation timeout for a mini-batch, in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for BatchRetrySettingsResponse
func (val *BatchRetrySettingsResponse) Defaults() *BatchRetrySettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxRetries == nil {
		maxRetries_ := 3
		tmp.MaxRetries = &maxRetries_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT30S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Retry settings for a batch inference operation.
type BatchRetrySettingsResponseOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutput() BatchRetrySettingsResponseOutput {
	return o
}

func (o BatchRetrySettingsResponseOutput) ToBatchRetrySettingsResponseOutputWithContext(ctx context.Context) BatchRetrySettingsResponseOutput {
	return o
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponseOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *int { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BatchRetrySettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BatchRetrySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (BatchRetrySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchRetrySettingsResponse)(nil)).Elem()
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutput() BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) ToBatchRetrySettingsResponsePtrOutputWithContext(ctx context.Context) BatchRetrySettingsResponsePtrOutput {
	return o
}

func (o BatchRetrySettingsResponsePtrOutput) Elem() BatchRetrySettingsResponseOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) BatchRetrySettingsResponse {
		if v != nil {
			return *v
		}
		var ret BatchRetrySettingsResponse
		return ret
	}).(BatchRetrySettingsResponseOutput)
}

// Maximum retry count for a mini-batch
func (o BatchRetrySettingsResponsePtrOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxRetries
	}).(pulumi.IntPtrOutput)
}

// Invocation timeout for a mini-batch, in ISO 8601 format.
func (o BatchRetrySettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchRetrySettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithm struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// BayesianSamplingAlgorithmInput is an input type that accepts BayesianSamplingAlgorithmArgs and BayesianSamplingAlgorithmOutput values.
// You can construct a concrete instance of `BayesianSamplingAlgorithmInput` via:
//
//	BayesianSamplingAlgorithmArgs{...}
type BayesianSamplingAlgorithmInput interface {
	pulumi.Input

	ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput
	ToBayesianSamplingAlgorithmOutputWithContext(context.Context) BayesianSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmArgs struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (BayesianSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return i.ToBayesianSamplingAlgorithmOutputWithContext(context.Background())
}

func (i BayesianSamplingAlgorithmArgs) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BayesianSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithm)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutput() BayesianSamplingAlgorithmOutput {
	return o
}

func (o BayesianSamplingAlgorithmOutput) ToBayesianSamplingAlgorithmOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponse struct {
	// Expected value is 'Bayesian'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that generates values based on previous values
type BayesianSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (BayesianSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BayesianSamplingAlgorithmResponse)(nil)).Elem()
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutput() BayesianSamplingAlgorithmResponseOutput {
	return o
}

func (o BayesianSamplingAlgorithmResponseOutput) ToBayesianSamplingAlgorithmResponseOutputWithContext(ctx context.Context) BayesianSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Bayesian'.
func (o BayesianSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v BayesianSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Configuration settings for Docker build context
type BuildContext struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContext
func (val *BuildContext) Defaults() *BuildContext {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// BuildContextInput is an input type that accepts BuildContextArgs and BuildContextOutput values.
// You can construct a concrete instance of `BuildContextInput` via:
//
//	BuildContextArgs{...}
type BuildContextInput interface {
	pulumi.Input

	ToBuildContextOutput() BuildContextOutput
	ToBuildContextOutputWithContext(context.Context) BuildContextOutput
}

// Configuration settings for Docker build context
type BuildContextArgs struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri pulumi.StringInput `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath pulumi.StringPtrInput `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextArgs
func (val *BuildContextArgs) Defaults() *BuildContextArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		tmp.DockerfilePath = pulumi.StringPtr("Dockerfile")
	}
	return &tmp
}
func (BuildContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (i BuildContextArgs) ToBuildContextOutput() BuildContextOutput {
	return i.ToBuildContextOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput)
}

func (i BuildContextArgs) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i BuildContextArgs) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextOutput).ToBuildContextPtrOutputWithContext(ctx)
}

// BuildContextPtrInput is an input type that accepts BuildContextArgs, BuildContextPtr and BuildContextPtrOutput values.
// You can construct a concrete instance of `BuildContextPtrInput` via:
//
//	        BuildContextArgs{...}
//
//	or:
//
//	        nil
type BuildContextPtrInput interface {
	pulumi.Input

	ToBuildContextPtrOutput() BuildContextPtrOutput
	ToBuildContextPtrOutputWithContext(context.Context) BuildContextPtrOutput
}

type buildContextPtrType BuildContextArgs

func BuildContextPtr(v *BuildContextArgs) BuildContextPtrInput {
	return (*buildContextPtrType)(v)
}

func (*buildContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (i *buildContextPtrType) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return i.ToBuildContextPtrOutputWithContext(context.Background())
}

func (i *buildContextPtrType) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildContextPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextOutput struct{ *pulumi.OutputState }

func (BuildContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContext)(nil)).Elem()
}

func (o BuildContextOutput) ToBuildContextOutput() BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextOutputWithContext(ctx context.Context) BuildContextOutput {
	return o
}

func (o BuildContextOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o.ToBuildContextPtrOutputWithContext(context.Background())
}

func (o BuildContextOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildContext) *BuildContext {
		return &v
	}).(BuildContextPtrOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContext) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContext) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextPtrOutput struct{ *pulumi.OutputState }

func (BuildContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContext)(nil)).Elem()
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutput() BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) ToBuildContextPtrOutputWithContext(ctx context.Context) BuildContextPtrOutput {
	return o
}

func (o BuildContextPtrOutput) Elem() BuildContextOutput {
	return o.ApplyT(func(v *BuildContext) BuildContext {
		if v != nil {
			return *v
		}
		var ret BuildContext
		return ret
	}).(BuildContextOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextPtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextPtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContext) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Configuration settings for Docker build context
type BuildContextResponse struct {
	// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
	// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
	ContextUri string `pulumi:"contextUri"`
	// Path to the Dockerfile in the build context.
	// <seealso href="https://docs.docker.com/engine/reference/builder/" />
	DockerfilePath *string `pulumi:"dockerfilePath"`
}

// Defaults sets the appropriate defaults for BuildContextResponse
func (val *BuildContextResponse) Defaults() *BuildContextResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DockerfilePath == nil {
		dockerfilePath_ := "Dockerfile"
		tmp.DockerfilePath = &dockerfilePath_
	}
	return &tmp
}

// Configuration settings for Docker build context
type BuildContextResponseOutput struct{ *pulumi.OutputState }

func (BuildContextResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutput() BuildContextResponseOutput {
	return o
}

func (o BuildContextResponseOutput) ToBuildContextResponseOutputWithContext(ctx context.Context) BuildContextResponseOutput {
	return o
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponseOutput) ContextUri() pulumi.StringOutput {
	return o.ApplyT(func(v BuildContextResponse) string { return v.ContextUri }).(pulumi.StringOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponseOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildContextResponse) *string { return v.DockerfilePath }).(pulumi.StringPtrOutput)
}

type BuildContextResponsePtrOutput struct{ *pulumi.OutputState }

func (BuildContextResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildContextResponse)(nil)).Elem()
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutput() BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) ToBuildContextResponsePtrOutputWithContext(ctx context.Context) BuildContextResponsePtrOutput {
	return o
}

func (o BuildContextResponsePtrOutput) Elem() BuildContextResponseOutput {
	return o.ApplyT(func(v *BuildContextResponse) BuildContextResponse {
		if v != nil {
			return *v
		}
		var ret BuildContextResponse
		return ret
	}).(BuildContextResponseOutput)
}

// [Required] URI of the Docker build context used to build the image. Supports blob URIs on environment creation and may return blob or Git URIs.
// <seealso href="https://docs.docker.com/engine/reference/commandline/build/#extended-description" />
func (o BuildContextResponsePtrOutput) ContextUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContextUri
	}).(pulumi.StringPtrOutput)
}

// Path to the Dockerfile in the build context.
// <seealso href="https://docs.docker.com/engine/reference/builder/" />
func (o BuildContextResponsePtrOutput) DockerfilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildContextResponse) *string {
		if v == nil {
			return nil
		}
		return v.DockerfilePath
	}).(pulumi.StringPtrOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// CertificateDatastoreCredentialsInput is an input type that accepts CertificateDatastoreCredentialsArgs and CertificateDatastoreCredentialsOutput values.
// You can construct a concrete instance of `CertificateDatastoreCredentialsInput` via:
//
//	CertificateDatastoreCredentialsArgs{...}
type CertificateDatastoreCredentialsInput interface {
	pulumi.Input

	ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput
	ToCertificateDatastoreCredentialsOutputWithContext(context.Context) CertificateDatastoreCredentialsOutput
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets CertificateDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint pulumi.StringInput `pulumi:"thumbprint"`
}

func (CertificateDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return i.ToCertificateDatastoreCredentialsOutputWithContext(context.Background())
}

func (i CertificateDatastoreCredentialsArgs) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreCredentialsOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentials)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutput() CertificateDatastoreCredentialsOutput {
	return o
}

func (o CertificateDatastoreCredentialsOutput) ToCertificateDatastoreCredentialsOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o CertificateDatastoreCredentialsOutput) Secrets() CertificateDatastoreSecretsOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) CertificateDatastoreSecrets { return v.Secrets }).(CertificateDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentials) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'Certificate'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
	// [Required] Thumbprint of the certificate used for authentication.
	Thumbprint string `pulumi:"thumbprint"`
}

// Certificate datastore credentials configuration.
type CertificateDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreCredentialsResponse)(nil)).Elem()
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutput() CertificateDatastoreCredentialsResponseOutput {
	return o
}

func (o CertificateDatastoreCredentialsResponseOutput) ToCertificateDatastoreCredentialsResponseOutputWithContext(ctx context.Context) CertificateDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o CertificateDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o CertificateDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o CertificateDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// [Required] Thumbprint of the certificate used for authentication.
func (o CertificateDatastoreCredentialsResponseOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreCredentialsResponse) string { return v.Thumbprint }).(pulumi.StringOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecrets struct {
	// Service principal certificate.
	Certificate *string `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType string `pulumi:"secretsType"`
}

// CertificateDatastoreSecretsInput is an input type that accepts CertificateDatastoreSecretsArgs and CertificateDatastoreSecretsOutput values.
// You can construct a concrete instance of `CertificateDatastoreSecretsInput` via:
//
//	CertificateDatastoreSecretsArgs{...}
type CertificateDatastoreSecretsInput interface {
	pulumi.Input

	ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput
	ToCertificateDatastoreSecretsOutputWithContext(context.Context) CertificateDatastoreSecretsOutput
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsArgs struct {
	// Service principal certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Certificate'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (CertificateDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return i.ToCertificateDatastoreSecretsOutputWithContext(context.Background())
}

func (i CertificateDatastoreSecretsArgs) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateDatastoreSecretsOutput)
}

// Datastore certificate secrets.
type CertificateDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (CertificateDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateDatastoreSecrets)(nil)).Elem()
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutput() CertificateDatastoreSecretsOutput {
	return o
}

func (o CertificateDatastoreSecretsOutput) ToCertificateDatastoreSecretsOutputWithContext(ctx context.Context) CertificateDatastoreSecretsOutput {
	return o
}

// Service principal certificate.
func (o CertificateDatastoreSecretsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Certificate'.
func (o CertificateDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Classification task in AutoML Table vertical.
type Classification struct {
	// Allowed models for classification task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for classification task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettings `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for Classification
func (val *Classification) Defaults() *Classification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// ClassificationInput is an input type that accepts ClassificationArgs and ClassificationOutput values.
// You can construct a concrete instance of `ClassificationInput` via:
//
//	ClassificationArgs{...}
type ClassificationInput interface {
	pulumi.Input

	ToClassificationOutput() ClassificationOutput
	ToClassificationOutputWithContext(context.Context) ClassificationOutput
}

// Classification task in AutoML Table vertical.
type ClassificationArgs struct {
	// Allowed models for classification task.
	AllowedModels pulumi.StringArrayInput `pulumi:"allowedModels"`
	// Blocked models for classification task.
	BlockedModels pulumi.StringArrayInput `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings TableVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for the task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings TrainingSettingsPtrInput `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for ClassificationArgs
func (val *ClassificationArgs) Defaults() *ClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("AUCWeighted")
	}

	return &tmp
}
func (ClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (i ClassificationArgs) ToClassificationOutput() ClassificationOutput {
	return i.ToClassificationOutputWithContext(context.Background())
}

func (i ClassificationArgs) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassificationOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationOutput struct{ *pulumi.OutputState }

func (ClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Classification)(nil)).Elem()
}

func (o ClassificationOutput) ToClassificationOutput() ClassificationOutput {
	return o
}

func (o ClassificationOutput) ToClassificationOutputWithContext(ctx context.Context) ClassificationOutput {
	return o
}

// Allowed models for classification task.
func (o ClassificationOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Classification) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Classification) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o ClassificationOutput) DataSettings() TableVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalDataSettings { return v.DataSettings }).(TableVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Classification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Classification) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationOutput) TrainingSettings() TrainingSettingsPtrOutput {
	return o.ApplyT(func(v Classification) *TrainingSettings { return v.TrainingSettings }).(TrainingSettingsPtrOutput)
}

// Classification task in AutoML Table vertical.
type ClassificationResponse struct {
	// Allowed models for classification task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for classification task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for the task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Classification'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettingsResponse `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for ClassificationResponse
func (val *ClassificationResponse) Defaults() *ClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "AUCWeighted"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// Classification task in AutoML Table vertical.
type ClassificationResponseOutput struct{ *pulumi.OutputState }

func (ClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassificationResponse)(nil)).Elem()
}

func (o ClassificationResponseOutput) ToClassificationResponseOutput() ClassificationResponseOutput {
	return o
}

func (o ClassificationResponseOutput) ToClassificationResponseOutputWithContext(ctx context.Context) ClassificationResponseOutput {
	return o
}

// Allowed models for classification task.
func (o ClassificationResponseOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationResponse) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for classification task.
func (o ClassificationResponseOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClassificationResponse) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o ClassificationResponseOutput) DataSettings() TableVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalDataSettingsResponse { return v.DataSettings }).(TableVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o ClassificationResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ClassificationResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for the task.
func (o ClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Classification'.
func (o ClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ClassificationResponseOutput) TrainingSettings() TrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ClassificationResponse) *TrainingSettingsResponse { return v.TrainingSettings }).(TrainingSettingsResponsePtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfiguration struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// CodeConfigurationInput is an input type that accepts CodeConfigurationArgs and CodeConfigurationOutput values.
// You can construct a concrete instance of `CodeConfigurationInput` via:
//
//	CodeConfigurationArgs{...}
type CodeConfigurationInput interface {
	pulumi.Input

	ToCodeConfigurationOutput() CodeConfigurationOutput
	ToCodeConfigurationOutputWithContext(context.Context) CodeConfigurationOutput
}

// Configuration for a scoring code asset.
type CodeConfigurationArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript pulumi.StringInput `pulumi:"scoringScript"`
}

func (CodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return i.ToCodeConfigurationOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput)
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i CodeConfigurationArgs) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationOutput).ToCodeConfigurationPtrOutputWithContext(ctx)
}

// CodeConfigurationPtrInput is an input type that accepts CodeConfigurationArgs, CodeConfigurationPtr and CodeConfigurationPtrOutput values.
// You can construct a concrete instance of `CodeConfigurationPtrInput` via:
//
//	        CodeConfigurationArgs{...}
//
//	or:
//
//	        nil
type CodeConfigurationPtrInput interface {
	pulumi.Input

	ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput
	ToCodeConfigurationPtrOutputWithContext(context.Context) CodeConfigurationPtrOutput
}

type codeConfigurationPtrType CodeConfigurationArgs

func CodeConfigurationPtr(v *CodeConfigurationArgs) CodeConfigurationPtrInput {
	return (*codeConfigurationPtrType)(v)
}

func (*codeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return i.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (i *codeConfigurationPtrType) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeConfigurationPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationOutput struct{ *pulumi.OutputState }

func (CodeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutput() CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationOutputWithContext(ctx context.Context) CodeConfigurationOutput {
	return o
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o.ToCodeConfigurationPtrOutputWithContext(context.Background())
}

func (o CodeConfigurationOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CodeConfiguration) *CodeConfiguration {
		return &v
	}).(CodeConfigurationPtrOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfiguration) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfiguration) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfiguration)(nil)).Elem()
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutput() CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) ToCodeConfigurationPtrOutputWithContext(ctx context.Context) CodeConfigurationPtrOutput {
	return o
}

func (o CodeConfigurationPtrOutput) Elem() CodeConfigurationOutput {
	return o.ApplyT(func(v *CodeConfiguration) CodeConfiguration {
		if v != nil {
			return *v
		}
		var ret CodeConfiguration
		return ret
	}).(CodeConfigurationOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationPtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationPtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Configuration for a scoring code asset.
type CodeConfigurationResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The script to execute on startup. eg. "score.py"
	ScoringScript string `pulumi:"scoringScript"`
}

// Configuration for a scoring code asset.
type CodeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutput() CodeConfigurationResponseOutput {
	return o
}

func (o CodeConfigurationResponseOutput) ToCodeConfigurationResponseOutputWithContext(ctx context.Context) CodeConfigurationResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponseOutput) ScoringScript() pulumi.StringOutput {
	return o.ApplyT(func(v CodeConfigurationResponse) string { return v.ScoringScript }).(pulumi.StringOutput)
}

type CodeConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (CodeConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CodeConfigurationResponse)(nil)).Elem()
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutput() CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) ToCodeConfigurationResponsePtrOutputWithContext(ctx context.Context) CodeConfigurationResponsePtrOutput {
	return o
}

func (o CodeConfigurationResponsePtrOutput) Elem() CodeConfigurationResponseOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) CodeConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret CodeConfigurationResponse
		return ret
	}).(CodeConfigurationResponseOutput)
}

// ARM resource ID of the code asset.
func (o CodeConfigurationResponsePtrOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CodeId
	}).(pulumi.StringPtrOutput)
}

// [Required] The script to execute on startup. eg. "score.py"
func (o CodeConfigurationResponsePtrOutput) ScoringScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CodeConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScoringScript
	}).(pulumi.StringPtrOutput)
}

// Container for code asset versions.
type CodeContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerType
func (val *CodeContainerType) Defaults() *CodeContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeContainerTypeInput is an input type that accepts CodeContainerTypeArgs and CodeContainerTypeOutput values.
// You can construct a concrete instance of `CodeContainerTypeInput` via:
//
//	CodeContainerTypeArgs{...}
type CodeContainerTypeInput interface {
	pulumi.Input

	ToCodeContainerTypeOutput() CodeContainerTypeOutput
	ToCodeContainerTypeOutputWithContext(context.Context) CodeContainerTypeOutput
}

// Container for code asset versions.
type CodeContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerTypeArgs
func (val *CodeContainerTypeArgs) Defaults() *CodeContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return i.ToCodeContainerTypeOutputWithContext(context.Background())
}

func (i CodeContainerTypeArgs) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeContainerTypeOutput)
}

// Container for code asset versions.
type CodeContainerTypeOutput struct{ *pulumi.OutputState }

func (CodeContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerType)(nil)).Elem()
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutput() CodeContainerTypeOutput {
	return o
}

func (o CodeContainerTypeOutput) ToCodeContainerTypeOutputWithContext(ctx context.Context) CodeContainerTypeOutput {
	return o
}

// The asset description text.
func (o CodeContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for code asset versions.
type CodeContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeContainerResponse
func (val *CodeContainerResponse) Defaults() *CodeContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for code asset versions.
type CodeContainerResponseOutput struct{ *pulumi.OutputState }

func (CodeContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeContainerResponse)(nil)).Elem()
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutput() CodeContainerResponseOutput {
	return o
}

func (o CodeContainerResponseOutput) ToCodeContainerResponseOutputWithContext(ctx context.Context) CodeContainerResponseOutput {
	return o
}

// The asset description text.
func (o CodeContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o CodeContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o CodeContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o CodeContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v CodeContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o CodeContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionType struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionType
func (val *CodeVersionType) Defaults() *CodeVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// CodeVersionTypeInput is an input type that accepts CodeVersionTypeArgs and CodeVersionTypeOutput values.
// You can construct a concrete instance of `CodeVersionTypeInput` via:
//
//	CodeVersionTypeArgs{...}
type CodeVersionTypeInput interface {
	pulumi.Input

	ToCodeVersionTypeOutput() CodeVersionTypeOutput
	ToCodeVersionTypeOutputWithContext(context.Context) CodeVersionTypeOutput
}

// Code asset version details.
type CodeVersionTypeArgs struct {
	// Uri where code is located
	CodeUri pulumi.StringPtrInput `pulumi:"codeUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionTypeArgs
func (val *CodeVersionTypeArgs) Defaults() *CodeVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (CodeVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return i.ToCodeVersionTypeOutputWithContext(context.Background())
}

func (i CodeVersionTypeArgs) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CodeVersionTypeOutput)
}

// Code asset version details.
type CodeVersionTypeOutput struct{ *pulumi.OutputState }

func (CodeVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionType)(nil)).Elem()
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutput() CodeVersionTypeOutput {
	return o
}

func (o CodeVersionTypeOutput) ToCodeVersionTypeOutputWithContext(ctx context.Context) CodeVersionTypeOutput {
	return o
}

// Uri where code is located
func (o CodeVersionTypeOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Code asset version details.
type CodeVersionResponse struct {
	// Uri where code is located
	CodeUri *string `pulumi:"codeUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CodeVersionResponse
func (val *CodeVersionResponse) Defaults() *CodeVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Code asset version details.
type CodeVersionResponseOutput struct{ *pulumi.OutputState }

func (CodeVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CodeVersionResponse)(nil)).Elem()
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutput() CodeVersionResponseOutput {
	return o
}

func (o CodeVersionResponseOutput) ToCodeVersionResponseOutputWithContext(ctx context.Context) CodeVersionResponseOutput {
	return o
}

// Uri where code is located
func (o CodeVersionResponseOutput) CodeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.CodeUri }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CodeVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o CodeVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o CodeVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CodeVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o CodeVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CodeVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CodeVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Column transformer parameters.
type ColumnTransformer struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// ColumnTransformerInput is an input type that accepts ColumnTransformerArgs and ColumnTransformerOutput values.
// You can construct a concrete instance of `ColumnTransformerInput` via:
//
//	ColumnTransformerArgs{...}
type ColumnTransformerInput interface {
	pulumi.Input

	ToColumnTransformerOutput() ColumnTransformerOutput
	ToColumnTransformerOutputWithContext(context.Context) ColumnTransformerOutput
}

// Column transformer parameters.
type ColumnTransformerArgs struct {
	// Fields to apply transformer logic on.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters pulumi.Input `pulumi:"parameters"`
}

func (ColumnTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArgs) ToColumnTransformerOutput() ColumnTransformerOutput {
	return i.ToColumnTransformerOutputWithContext(context.Background())
}

func (i ColumnTransformerArgs) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerOutput)
}

// ColumnTransformerArrayInput is an input type that accepts ColumnTransformerArray and ColumnTransformerArrayOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayInput` via:
//
//	ColumnTransformerArray{ ColumnTransformerArgs{...} }
type ColumnTransformerArrayInput interface {
	pulumi.Input

	ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput
	ToColumnTransformerArrayOutputWithContext(context.Context) ColumnTransformerArrayOutput
}

type ColumnTransformerArray []ColumnTransformerInput

func (ColumnTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return i.ToColumnTransformerArrayOutputWithContext(context.Background())
}

func (i ColumnTransformerArray) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayOutput)
}

// Column transformer parameters.
type ColumnTransformerOutput struct{ *pulumi.OutputState }

func (ColumnTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerOutput) ToColumnTransformerOutput() ColumnTransformerOutput {
	return o
}

func (o ColumnTransformerOutput) ToColumnTransformerOutputWithContext(ctx context.Context) ColumnTransformerOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformer) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformer) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutput() ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) ToColumnTransformerArrayOutputWithContext(ctx context.Context) ColumnTransformerArrayOutput {
	return o
}

func (o ColumnTransformerArrayOutput) Index(i pulumi.IntInput) ColumnTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformer {
		return vs[0].([]ColumnTransformer)[vs[1].(int)]
	}).(ColumnTransformerOutput)
}

// Column transformer parameters.
type ColumnTransformerResponse struct {
	// Fields to apply transformer logic on.
	Fields []string `pulumi:"fields"`
	// Different properties to be passed to transformer.
	// Input expected is dictionary of key,value pairs in JSON format.
	Parameters interface{} `pulumi:"parameters"`
}

// Column transformer parameters.
type ColumnTransformerResponseOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutput() ColumnTransformerResponseOutput {
	return o
}

func (o ColumnTransformerResponseOutput) ToColumnTransformerResponseOutputWithContext(ctx context.Context) ColumnTransformerResponseOutput {
	return o
}

// Fields to apply transformer logic on.
func (o ColumnTransformerResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Different properties to be passed to transformer.
// Input expected is dictionary of key,value pairs in JSON format.
func (o ColumnTransformerResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v ColumnTransformerResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

type ColumnTransformerResponseArrayOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutput() ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) ToColumnTransformerResponseArrayOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayOutput {
	return o
}

func (o ColumnTransformerResponseArrayOutput) Index(i pulumi.IntInput) ColumnTransformerResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ColumnTransformerResponse {
		return vs[0].([]ColumnTransformerResponse)[vs[1].(int)]
	}).(ColumnTransformerResponseOutput)
}

// Command job definition.
type CommandJob struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimits `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfiguration `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJob
func (val *CommandJob) Defaults() *CommandJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// CommandJobInput is an input type that accepts CommandJobArgs and CommandJobOutput values.
// You can construct a concrete instance of `CommandJobInput` via:
//
//	CommandJobArgs{...}
type CommandJobInput interface {
	pulumi.Input

	ToCommandJobOutput() CommandJobOutput
	ToCommandJobOutputWithContext(context.Context) CommandJobOutput
}

// Command job definition.
type CommandJobArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command pulumi.StringInput `pulumi:"command"`
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution pulumi.Input `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Command Job limit.
	Limits CommandJobLimitsPtrInput `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources ResourceConfigurationPtrInput `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule pulumi.Input `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobArgs
func (val *CommandJobArgs) Defaults() *CommandJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (CommandJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (i CommandJobArgs) ToCommandJobOutput() CommandJobOutput {
	return i.ToCommandJobOutputWithContext(context.Background())
}

func (i CommandJobArgs) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobOutput)
}

// Command job definition.
type CommandJobOutput struct{ *pulumi.OutputState }

func (CommandJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJob)(nil)).Elem()
}

func (o CommandJobOutput) ToCommandJobOutput() CommandJobOutput {
	return o
}

func (o CommandJobOutput) ToCommandJobOutputWithContext(ctx context.Context) CommandJobOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CommandJobOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobOutput) Limits() CommandJobLimitsPtrOutput {
	return o.ApplyT(func(v CommandJob) *CommandJobLimits { return v.Limits }).(CommandJobLimitsPtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o CommandJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobOutput) Resources() ResourceConfigurationPtrOutput {
	return o.ApplyT(func(v CommandJob) *ResourceConfiguration { return v.Resources }).(ResourceConfigurationPtrOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o CommandJobOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJob) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Command Job limit class.
type CommandJobLimits struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// CommandJobLimitsInput is an input type that accepts CommandJobLimitsArgs and CommandJobLimitsOutput values.
// You can construct a concrete instance of `CommandJobLimitsInput` via:
//
//	CommandJobLimitsArgs{...}
type CommandJobLimitsInput interface {
	pulumi.Input

	ToCommandJobLimitsOutput() CommandJobLimitsOutput
	ToCommandJobLimitsOutputWithContext(context.Context) CommandJobLimitsOutput
}

// Command Job limit class.
type CommandJobLimitsArgs struct {
	// Expected value is 'Command'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (CommandJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return i.ToCommandJobLimitsOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput)
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i CommandJobLimitsArgs) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsOutput).ToCommandJobLimitsPtrOutputWithContext(ctx)
}

// CommandJobLimitsPtrInput is an input type that accepts CommandJobLimitsArgs, CommandJobLimitsPtr and CommandJobLimitsPtrOutput values.
// You can construct a concrete instance of `CommandJobLimitsPtrInput` via:
//
//	        CommandJobLimitsArgs{...}
//
//	or:
//
//	        nil
type CommandJobLimitsPtrInput interface {
	pulumi.Input

	ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput
	ToCommandJobLimitsPtrOutputWithContext(context.Context) CommandJobLimitsPtrOutput
}

type commandJobLimitsPtrType CommandJobLimitsArgs

func CommandJobLimitsPtr(v *CommandJobLimitsArgs) CommandJobLimitsPtrInput {
	return (*commandJobLimitsPtrType)(v)
}

func (*commandJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return i.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (i *commandJobLimitsPtrType) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandJobLimitsPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutput() CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsOutputWithContext(ctx context.Context) CommandJobLimitsOutput {
	return o
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o.ToCommandJobLimitsPtrOutputWithContext(context.Background())
}

func (o CommandJobLimitsOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommandJobLimits) *CommandJobLimits {
		return &v
	}).(CommandJobLimitsPtrOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimits)(nil)).Elem()
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutput() CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) ToCommandJobLimitsPtrOutputWithContext(ctx context.Context) CommandJobLimitsPtrOutput {
	return o
}

func (o CommandJobLimitsPtrOutput) Elem() CommandJobLimitsOutput {
	return o.ApplyT(func(v *CommandJobLimits) CommandJobLimits {
		if v != nil {
			return *v
		}
		var ret CommandJobLimits
		return ret
	}).(CommandJobLimitsOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command Job limit class.
type CommandJobLimitsResponse struct {
	// Expected value is 'Command'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
}

// Command Job limit class.
type CommandJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutput() CommandJobLimitsResponseOutput {
	return o
}

func (o CommandJobLimitsResponseOutput) ToCommandJobLimitsResponseOutputWithContext(ctx context.Context) CommandJobLimitsResponseOutput {
	return o
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type CommandJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (CommandJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommandJobLimitsResponse)(nil)).Elem()
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutput() CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) ToCommandJobLimitsResponsePtrOutputWithContext(ctx context.Context) CommandJobLimitsResponsePtrOutput {
	return o
}

func (o CommandJobLimitsResponsePtrOutput) Elem() CommandJobLimitsResponseOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) CommandJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret CommandJobLimitsResponse
		return ret
	}).(CommandJobLimitsResponseOutput)
}

// Expected value is 'Command'.
func (o CommandJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o CommandJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CommandJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Command job definition.
type CommandJobResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Command'.
	JobType string `pulumi:"jobType"`
	// Command Job limit.
	Limits *CommandJobLimitsResponse `pulumi:"limits"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// Input parameters.
	Parameters interface{} `pulumi:"parameters"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfigurationResponse `pulumi:"resources"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for CommandJobResponse
func (val *CommandJobResponse) Defaults() *CommandJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Command job definition.
type CommandJobResponseOutput struct{ *pulumi.OutputState }

func (CommandJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandJobResponse)(nil)).Elem()
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutput() CommandJobResponseOutput {
	return o
}

func (o CommandJobResponseOutput) ToCommandJobResponseOutputWithContext(ctx context.Context) CommandJobResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o CommandJobResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o CommandJobResponseOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Command }).(pulumi.StringOutput)
}

// ARM resource ID of the compute resource.
func (o CommandJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o CommandJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o CommandJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o CommandJobResponseOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o CommandJobResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o CommandJobResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o CommandJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o CommandJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o CommandJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o CommandJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Command'.
func (o CommandJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Command Job limit.
func (o CommandJobResponseOutput) Limits() CommandJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *CommandJobLimitsResponse { return v.Limits }).(CommandJobLimitsResponsePtrOutput)
}

// Mapping of output data bindings used in the job.
func (o CommandJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// Input parameters.
func (o CommandJobResponseOutput) Parameters() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Parameters }).(pulumi.AnyOutput)
}

// The asset property dictionary.
func (o CommandJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o CommandJobResponseOutput) Resources() ResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v CommandJobResponse) *ResourceConfigurationResponse { return v.Resources }).(ResourceConfigurationResponsePtrOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o CommandJobResponseOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v CommandJobResponse) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o CommandJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o CommandJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CommandJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o CommandJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v CommandJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerType
func (val *ComponentContainerType) Defaults() *ComponentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentContainerTypeInput is an input type that accepts ComponentContainerTypeArgs and ComponentContainerTypeOutput values.
// You can construct a concrete instance of `ComponentContainerTypeInput` via:
//
//	ComponentContainerTypeArgs{...}
type ComponentContainerTypeInput interface {
	pulumi.Input

	ToComponentContainerTypeOutput() ComponentContainerTypeOutput
	ToComponentContainerTypeOutputWithContext(context.Context) ComponentContainerTypeOutput
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerTypeArgs
func (val *ComponentContainerTypeArgs) Defaults() *ComponentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return i.ToComponentContainerTypeOutputWithContext(context.Background())
}

func (i ComponentContainerTypeArgs) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentContainerTypeOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerTypeOutput struct{ *pulumi.OutputState }

func (ComponentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerType)(nil)).Elem()
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutput() ComponentContainerTypeOutput {
	return o
}

func (o ComponentContainerTypeOutput) ToComponentContainerTypeOutputWithContext(ctx context.Context) ComponentContainerTypeOutput {
	return o
}

// The asset description text.
func (o ComponentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentContainerResponse
func (val *ComponentContainerResponse) Defaults() *ComponentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Component container definition.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
type ComponentContainerResponseOutput struct{ *pulumi.OutputState }

func (ComponentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentContainerResponse)(nil)).Elem()
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutput() ComponentContainerResponseOutput {
	return o
}

func (o ComponentContainerResponseOutput) ToComponentContainerResponseOutputWithContext(ctx context.Context) ComponentContainerResponseOutput {
	return o
}

// The asset description text.
func (o ComponentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ComponentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ComponentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ComponentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ComponentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionType struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionType
func (val *ComponentVersionType) Defaults() *ComponentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ComponentVersionTypeInput is an input type that accepts ComponentVersionTypeArgs and ComponentVersionTypeOutput values.
// You can construct a concrete instance of `ComponentVersionTypeInput` via:
//
//	ComponentVersionTypeArgs{...}
type ComponentVersionTypeInput interface {
	pulumi.Input

	ToComponentVersionTypeOutput() ComponentVersionTypeOutput
	ToComponentVersionTypeOutputWithContext(context.Context) ComponentVersionTypeOutput
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeArgs struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec pulumi.Input `pulumi:"componentSpec"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionTypeArgs
func (val *ComponentVersionTypeArgs) Defaults() *ComponentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ComponentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return i.ToComponentVersionTypeOutputWithContext(context.Background())
}

func (i ComponentVersionTypeArgs) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentVersionTypeOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionTypeOutput struct{ *pulumi.OutputState }

func (ComponentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionType)(nil)).Elem()
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutput() ComponentVersionTypeOutput {
	return o
}

func (o ComponentVersionTypeOutput) ToComponentVersionTypeOutputWithContext(ctx context.Context) ComponentVersionTypeOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionTypeOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionType) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponse struct {
	// Defines Component definition details.
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
	ComponentSpec interface{} `pulumi:"componentSpec"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ComponentVersionResponse
func (val *ComponentVersionResponse) Defaults() *ComponentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Definition of a component version: defines resources that span component types.
type ComponentVersionResponseOutput struct{ *pulumi.OutputState }

func (ComponentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentVersionResponse)(nil)).Elem()
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutput() ComponentVersionResponseOutput {
	return o
}

func (o ComponentVersionResponseOutput) ToComponentVersionResponseOutputWithContext(ctx context.Context) ComponentVersionResponseOutput {
	return o
}

// Defines Component definition details.
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/reference-yaml-component-command" />
func (o ComponentVersionResponseOutput) ComponentSpec() pulumi.AnyOutput {
	return o.ApplyT(func(v ComponentVersionResponse) interface{} { return v.ComponentSpec }).(pulumi.AnyOutput)
}

// The asset description text.
func (o ComponentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o ComponentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ComponentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ComponentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ComponentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ComponentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ComponentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirements struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettings `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettings `pulumi:"containerResourceRequests"`
}

// ContainerResourceRequirementsInput is an input type that accepts ContainerResourceRequirementsArgs and ContainerResourceRequirementsOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsInput` via:
//
//	ContainerResourceRequirementsArgs{...}
type ContainerResourceRequirementsInput interface {
	pulumi.Input

	ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput
	ToContainerResourceRequirementsOutputWithContext(context.Context) ContainerResourceRequirementsOutput
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsArgs struct {
	// Container resource limit info:
	ContainerResourceLimits ContainerResourceSettingsPtrInput `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests ContainerResourceSettingsPtrInput `pulumi:"containerResourceRequests"`
}

func (ContainerResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return i.ToContainerResourceRequirementsOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput)
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceRequirementsArgs) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsOutput).ToContainerResourceRequirementsPtrOutputWithContext(ctx)
}

// ContainerResourceRequirementsPtrInput is an input type that accepts ContainerResourceRequirementsArgs, ContainerResourceRequirementsPtr and ContainerResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceRequirementsPtrInput` via:
//
//	        ContainerResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceRequirementsPtrInput interface {
	pulumi.Input

	ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput
	ToContainerResourceRequirementsPtrOutputWithContext(context.Context) ContainerResourceRequirementsPtrOutput
}

type containerResourceRequirementsPtrType ContainerResourceRequirementsArgs

func ContainerResourceRequirementsPtr(v *ContainerResourceRequirementsArgs) ContainerResourceRequirementsPtrInput {
	return (*containerResourceRequirementsPtrType)(v)
}

func (*containerResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return i.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *containerResourceRequirementsPtrType) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceRequirementsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutput() ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsOutputWithContext(ctx context.Context) ContainerResourceRequirementsOutput {
	return o
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o.ToContainerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceRequirementsOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceRequirements) *ContainerResourceRequirements {
		return &v
	}).(ContainerResourceRequirementsPtrOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceLimits }).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirements) *ContainerResourceSettings { return v.ContainerResourceRequests }).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirements)(nil)).Elem()
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutput() ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) ToContainerResourceRequirementsPtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsPtrOutput {
	return o
}

func (o ContainerResourceRequirementsPtrOutput) Elem() ContainerResourceRequirementsOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) ContainerResourceRequirements {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirements
		return ret
	}).(ContainerResourceRequirementsOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceLimits() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsPtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsPtrOutput) ContainerResourceRequests() ContainerResourceSettingsPtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirements) *ContainerResourceSettings {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsPtrOutput)
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponse struct {
	// Container resource limit info:
	ContainerResourceLimits *ContainerResourceSettingsResponse `pulumi:"containerResourceLimits"`
	// Container resource request info:
	ContainerResourceRequests *ContainerResourceSettingsResponse `pulumi:"containerResourceRequests"`
}

// Resource requirements for each container instance within an online deployment.
type ContainerResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutput() ContainerResourceRequirementsResponseOutput {
	return o
}

func (o ContainerResourceRequirementsResponseOutput) ToContainerResourceRequirementsResponseOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponseOutput {
	return o
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponseOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceRequirementsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceRequirementsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceRequirementsResponse)(nil)).Elem()
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutput() ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) ToContainerResourceRequirementsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceRequirementsResponsePtrOutput {
	return o
}

func (o ContainerResourceRequirementsResponsePtrOutput) Elem() ContainerResourceRequirementsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) ContainerResourceRequirementsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceRequirementsResponse
		return ret
	}).(ContainerResourceRequirementsResponseOutput)
}

// Container resource limit info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceLimits() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceLimits
	}).(ContainerResourceSettingsResponsePtrOutput)
}

// Container resource request info:
func (o ContainerResourceRequirementsResponsePtrOutput) ContainerResourceRequests() ContainerResourceSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ContainerResourceRequirementsResponse) *ContainerResourceSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ContainerResourceRequests
	}).(ContainerResourceSettingsResponsePtrOutput)
}

type ContainerResourceSettings struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

// ContainerResourceSettingsInput is an input type that accepts ContainerResourceSettingsArgs and ContainerResourceSettingsOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsInput` via:
//
//	ContainerResourceSettingsArgs{...}
type ContainerResourceSettingsInput interface {
	pulumi.Input

	ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput
	ToContainerResourceSettingsOutputWithContext(context.Context) ContainerResourceSettingsOutput
}

type ContainerResourceSettingsArgs struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu pulumi.StringPtrInput `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (ContainerResourceSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return i.ToContainerResourceSettingsOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput)
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i ContainerResourceSettingsArgs) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsOutput).ToContainerResourceSettingsPtrOutputWithContext(ctx)
}

// ContainerResourceSettingsPtrInput is an input type that accepts ContainerResourceSettingsArgs, ContainerResourceSettingsPtr and ContainerResourceSettingsPtrOutput values.
// You can construct a concrete instance of `ContainerResourceSettingsPtrInput` via:
//
//	        ContainerResourceSettingsArgs{...}
//
//	or:
//
//	        nil
type ContainerResourceSettingsPtrInput interface {
	pulumi.Input

	ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput
	ToContainerResourceSettingsPtrOutputWithContext(context.Context) ContainerResourceSettingsPtrOutput
}

type containerResourceSettingsPtrType ContainerResourceSettingsArgs

func ContainerResourceSettingsPtr(v *ContainerResourceSettingsArgs) ContainerResourceSettingsPtrInput {
	return (*containerResourceSettingsPtrType)(v)
}

func (*containerResourceSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return i.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (i *containerResourceSettingsPtrType) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerResourceSettingsPtrOutput)
}

type ContainerResourceSettingsOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutput() ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsOutputWithContext(ctx context.Context) ContainerResourceSettingsOutput {
	return o
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o.ToContainerResourceSettingsPtrOutputWithContext(context.Background())
}

func (o ContainerResourceSettingsOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContainerResourceSettings) *ContainerResourceSettings {
		return &v
	}).(ContainerResourceSettingsPtrOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettings) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsPtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettings)(nil)).Elem()
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutput() ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) ToContainerResourceSettingsPtrOutputWithContext(ctx context.Context) ContainerResourceSettingsPtrOutput {
	return o
}

func (o ContainerResourceSettingsPtrOutput) Elem() ContainerResourceSettingsOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) ContainerResourceSettings {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettings
		return ret
	}).(ContainerResourceSettingsOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettings) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponse struct {
	// Number of vCPUs request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Cpu *string `pulumi:"cpu"`
	// Number of Nvidia GPU cards request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Gpu *string `pulumi:"gpu"`
	// Memory size request/limit for container. More info:
	// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
	Memory *string `pulumi:"memory"`
}

type ContainerResourceSettingsResponseOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutput() ContainerResourceSettingsResponseOutput {
	return o
}

func (o ContainerResourceSettingsResponseOutput) ToContainerResourceSettingsResponseOutputWithContext(ctx context.Context) ContainerResourceSettingsResponseOutput {
	return o
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Gpu }).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponseOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContainerResourceSettingsResponse) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type ContainerResourceSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ContainerResourceSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerResourceSettingsResponse)(nil)).Elem()
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutput() ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) ToContainerResourceSettingsResponsePtrOutputWithContext(ctx context.Context) ContainerResourceSettingsResponsePtrOutput {
	return o
}

func (o ContainerResourceSettingsResponsePtrOutput) Elem() ContainerResourceSettingsResponseOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) ContainerResourceSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ContainerResourceSettingsResponse
		return ret
	}).(ContainerResourceSettingsResponseOutput)
}

// Number of vCPUs request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Number of Nvidia GPU cards request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Gpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Gpu
	}).(pulumi.StringPtrOutput)
}

// Memory size request/limit for container. More info:
// https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
func (o ContainerResourceSettingsResponsePtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContainerResourceSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// Cron schedule definition
type CronSchedule struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies the schedule's status
	ScheduleStatus *string `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Cron'.
	ScheduleType string `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronSchedule
func (val *CronSchedule) Defaults() *CronSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		scheduleStatus_ := "Enabled"
		tmp.ScheduleStatus = &scheduleStatus_
	}
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// CronScheduleInput is an input type that accepts CronScheduleArgs and CronScheduleOutput values.
// You can construct a concrete instance of `CronScheduleInput` via:
//
//	CronScheduleArgs{...}
type CronScheduleInput interface {
	pulumi.Input

	ToCronScheduleOutput() CronScheduleOutput
	ToCronScheduleOutputWithContext(context.Context) CronScheduleOutput
}

// Cron schedule definition
type CronScheduleArgs struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Specifies the schedule's status
	ScheduleStatus pulumi.StringPtrInput `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Cron'.
	ScheduleType pulumi.StringInput `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronScheduleArgs
func (val *CronScheduleArgs) Defaults() *CronScheduleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		tmp.ScheduleStatus = pulumi.StringPtr("Enabled")
	}
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (CronScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CronSchedule)(nil)).Elem()
}

func (i CronScheduleArgs) ToCronScheduleOutput() CronScheduleOutput {
	return i.ToCronScheduleOutputWithContext(context.Background())
}

func (i CronScheduleArgs) ToCronScheduleOutputWithContext(ctx context.Context) CronScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronScheduleOutput)
}

func (i CronScheduleArgs) ToCronSchedulePtrOutput() CronSchedulePtrOutput {
	return i.ToCronSchedulePtrOutputWithContext(context.Background())
}

func (i CronScheduleArgs) ToCronSchedulePtrOutputWithContext(ctx context.Context) CronSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronScheduleOutput).ToCronSchedulePtrOutputWithContext(ctx)
}

// CronSchedulePtrInput is an input type that accepts CronScheduleArgs, CronSchedulePtr and CronSchedulePtrOutput values.
// You can construct a concrete instance of `CronSchedulePtrInput` via:
//
//	        CronScheduleArgs{...}
//
//	or:
//
//	        nil
type CronSchedulePtrInput interface {
	pulumi.Input

	ToCronSchedulePtrOutput() CronSchedulePtrOutput
	ToCronSchedulePtrOutputWithContext(context.Context) CronSchedulePtrOutput
}

type cronSchedulePtrType CronScheduleArgs

func CronSchedulePtr(v *CronScheduleArgs) CronSchedulePtrInput {
	return (*cronSchedulePtrType)(v)
}

func (*cronSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CronSchedule)(nil)).Elem()
}

func (i *cronSchedulePtrType) ToCronSchedulePtrOutput() CronSchedulePtrOutput {
	return i.ToCronSchedulePtrOutputWithContext(context.Background())
}

func (i *cronSchedulePtrType) ToCronSchedulePtrOutputWithContext(ctx context.Context) CronSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronSchedulePtrOutput)
}

// Cron schedule definition
type CronScheduleOutput struct{ *pulumi.OutputState }

func (CronScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronSchedule)(nil)).Elem()
}

func (o CronScheduleOutput) ToCronScheduleOutput() CronScheduleOutput {
	return o
}

func (o CronScheduleOutput) ToCronScheduleOutputWithContext(ctx context.Context) CronScheduleOutput {
	return o
}

func (o CronScheduleOutput) ToCronSchedulePtrOutput() CronSchedulePtrOutput {
	return o.ToCronSchedulePtrOutputWithContext(context.Background())
}

func (o CronScheduleOutput) ToCronSchedulePtrOutputWithContext(ctx context.Context) CronSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CronSchedule) *CronSchedule {
		return &v
	}).(CronSchedulePtrOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o CronScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronScheduleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronSchedule) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies the schedule's status
func (o CronScheduleOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronSchedule) *string { return v.ScheduleStatus }).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Cron'.
func (o CronScheduleOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v CronSchedule) string { return v.ScheduleType }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o CronScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o CronScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronSchedule) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronSchedulePtrOutput struct{ *pulumi.OutputState }

func (CronSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronSchedule)(nil)).Elem()
}

func (o CronSchedulePtrOutput) ToCronSchedulePtrOutput() CronSchedulePtrOutput {
	return o
}

func (o CronSchedulePtrOutput) ToCronSchedulePtrOutputWithContext(ctx context.Context) CronSchedulePtrOutput {
	return o
}

func (o CronSchedulePtrOutput) Elem() CronScheduleOutput {
	return o.ApplyT(func(v *CronSchedule) CronSchedule {
		if v != nil {
			return *v
		}
		var ret CronSchedule
		return ret
	}).(CronScheduleOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o CronSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronSchedulePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Specifies the schedule's status
func (o CronSchedulePtrOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleStatus
	}).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Cron'.
func (o CronSchedulePtrOutput) ScheduleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleType
	}).(pulumi.StringPtrOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o CronSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o CronSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronSchedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Cron schedule definition
type CronScheduleResponse struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies cron expression of schedule.
	// The expression should follow NCronTab format.
	Expression string `pulumi:"expression"`
	// Specifies the schedule's status
	ScheduleStatus *string `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Cron'.
	ScheduleType string `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for CronScheduleResponse
func (val *CronScheduleResponse) Defaults() *CronScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		scheduleStatus_ := "Enabled"
		tmp.ScheduleStatus = &scheduleStatus_
	}
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// Cron schedule definition
type CronScheduleResponseOutput struct{ *pulumi.OutputState }

func (CronScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CronScheduleResponse)(nil)).Elem()
}

func (o CronScheduleResponseOutput) ToCronScheduleResponseOutput() CronScheduleResponseOutput {
	return o
}

func (o CronScheduleResponseOutput) ToCronScheduleResponseOutputWithContext(ctx context.Context) CronScheduleResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o CronScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronScheduleResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v CronScheduleResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Specifies the schedule's status
func (o CronScheduleResponseOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronScheduleResponse) *string { return v.ScheduleStatus }).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Cron'.
func (o CronScheduleResponseOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v CronScheduleResponse) string { return v.ScheduleType }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o CronScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o CronScheduleResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CronScheduleResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type CronScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (CronScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronScheduleResponse)(nil)).Elem()
}

func (o CronScheduleResponsePtrOutput) ToCronScheduleResponsePtrOutput() CronScheduleResponsePtrOutput {
	return o
}

func (o CronScheduleResponsePtrOutput) ToCronScheduleResponsePtrOutputWithContext(ctx context.Context) CronScheduleResponsePtrOutput {
	return o
}

func (o CronScheduleResponsePtrOutput) Elem() CronScheduleResponseOutput {
	return o.ApplyT(func(v *CronScheduleResponse) CronScheduleResponse {
		if v != nil {
			return *v
		}
		var ret CronScheduleResponse
		return ret
	}).(CronScheduleResponseOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o CronScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies cron expression of schedule.
// The expression should follow NCronTab format.
func (o CronScheduleResponsePtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Expression
	}).(pulumi.StringPtrOutput)
}

// Specifies the schedule's status
func (o CronScheduleResponsePtrOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleStatus
	}).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Cron'.
func (o CronScheduleResponsePtrOutput) ScheduleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleType
	}).(pulumi.StringPtrOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o CronScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o CronScheduleResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CronScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizon struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// CustomForecastHorizonInput is an input type that accepts CustomForecastHorizonArgs and CustomForecastHorizonOutput values.
// You can construct a concrete instance of `CustomForecastHorizonInput` via:
//
//	CustomForecastHorizonArgs{...}
type CustomForecastHorizonInput interface {
	pulumi.Input

	ToCustomForecastHorizonOutput() CustomForecastHorizonOutput
	ToCustomForecastHorizonOutputWithContext(context.Context) CustomForecastHorizonOutput
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonArgs struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomForecastHorizonArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return i.ToCustomForecastHorizonOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput)
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i CustomForecastHorizonArgs) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonOutput).ToCustomForecastHorizonPtrOutputWithContext(ctx)
}

// CustomForecastHorizonPtrInput is an input type that accepts CustomForecastHorizonArgs, CustomForecastHorizonPtr and CustomForecastHorizonPtrOutput values.
// You can construct a concrete instance of `CustomForecastHorizonPtrInput` via:
//
//	        CustomForecastHorizonArgs{...}
//
//	or:
//
//	        nil
type CustomForecastHorizonPtrInput interface {
	pulumi.Input

	ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput
	ToCustomForecastHorizonPtrOutputWithContext(context.Context) CustomForecastHorizonPtrOutput
}

type customForecastHorizonPtrType CustomForecastHorizonArgs

func CustomForecastHorizonPtr(v *CustomForecastHorizonArgs) CustomForecastHorizonPtrInput {
	return (*customForecastHorizonPtrType)(v)
}

func (*customForecastHorizonPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return i.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (i *customForecastHorizonPtrType) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomForecastHorizonPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutput() CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonOutputWithContext(ctx context.Context) CustomForecastHorizonOutput {
	return o
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o.ToCustomForecastHorizonPtrOutputWithContext(context.Background())
}

func (o CustomForecastHorizonOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomForecastHorizon) *CustomForecastHorizon {
		return &v
	}).(CustomForecastHorizonPtrOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizon) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizon) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonPtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizon)(nil)).Elem()
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutput() CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) ToCustomForecastHorizonPtrOutputWithContext(ctx context.Context) CustomForecastHorizonPtrOutput {
	return o
}

func (o CustomForecastHorizonPtrOutput) Elem() CustomForecastHorizonOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) CustomForecastHorizon {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizon
		return ret
	}).(CustomForecastHorizonOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizon) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponse struct {
	// Enum to determine forecast horizon selection mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Forecast horizon value.
	Value int `pulumi:"value"`
}

// The desired maximum forecast horizon in units of time-series frequency.
type CustomForecastHorizonResponseOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutput() CustomForecastHorizonResponseOutput {
	return o
}

func (o CustomForecastHorizonResponseOutput) ToCustomForecastHorizonResponseOutputWithContext(ctx context.Context) CustomForecastHorizonResponseOutput {
	return o
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomForecastHorizonResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomForecastHorizonResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomForecastHorizonResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomForecastHorizonResponse)(nil)).Elem()
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutput() CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) ToCustomForecastHorizonResponsePtrOutputWithContext(ctx context.Context) CustomForecastHorizonResponsePtrOutput {
	return o
}

func (o CustomForecastHorizonResponsePtrOutput) Elem() CustomForecastHorizonResponseOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) CustomForecastHorizonResponse {
		if v != nil {
			return *v
		}
		var ret CustomForecastHorizonResponse
		return ret
	}).(CustomForecastHorizonResponseOutput)
}

// Enum to determine forecast horizon selection mode.
// Expected value is 'Custom'.
func (o CustomForecastHorizonResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Forecast horizon value.
func (o CustomForecastHorizonResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomForecastHorizonResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'CustomModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInput
func (val *CustomModelJobInput) Defaults() *CustomModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobInputInput is an input type that accepts CustomModelJobInputArgs and CustomModelJobInputOutput values.
// You can construct a concrete instance of `CustomModelJobInputInput` via:
//
//	CustomModelJobInputArgs{...}
type CustomModelJobInputInput interface {
	pulumi.Input

	ToCustomModelJobInputOutput() CustomModelJobInputOutput
	ToCustomModelJobInputOutputWithContext(context.Context) CustomModelJobInputOutput
}

type CustomModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'CustomModel'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputArgs
func (val *CustomModelJobInputArgs) Defaults() *CustomModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (CustomModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return i.ToCustomModelJobInputOutputWithContext(context.Background())
}

func (i CustomModelJobInputArgs) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobInputOutput)
}

type CustomModelJobInputOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInput)(nil)).Elem()
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutput() CustomModelJobInputOutput {
	return o
}

func (o CustomModelJobInputOutput) ToCustomModelJobInputOutputWithContext(ctx context.Context) CustomModelJobInputOutput {
	return o
}

// Description for the input.
func (o CustomModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'CustomModel'.
func (o CustomModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'CustomModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobInputResponse
func (val *CustomModelJobInputResponse) Defaults() *CustomModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobInputResponse)(nil)).Elem()
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutput() CustomModelJobInputResponseOutput {
	return o
}

func (o CustomModelJobInputResponseOutput) ToCustomModelJobInputResponseOutputWithContext(ctx context.Context) CustomModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o CustomModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'CustomModel'.
func (o CustomModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o CustomModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o CustomModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type CustomModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'CustomModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutput
func (val *CustomModelJobOutput) Defaults() *CustomModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// CustomModelJobOutputInput is an input type that accepts CustomModelJobOutputArgs and CustomModelJobOutputOutput values.
// You can construct a concrete instance of `CustomModelJobOutputInput` via:
//
//	CustomModelJobOutputArgs{...}
type CustomModelJobOutputInput interface {
	pulumi.Input

	ToCustomModelJobOutputOutput() CustomModelJobOutputOutput
	ToCustomModelJobOutputOutputWithContext(context.Context) CustomModelJobOutputOutput
}

type CustomModelJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'CustomModel'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputArgs
func (val *CustomModelJobOutputArgs) Defaults() *CustomModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (CustomModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return i.ToCustomModelJobOutputOutputWithContext(context.Background())
}

func (i CustomModelJobOutputArgs) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomModelJobOutputOutput)
}

type CustomModelJobOutputOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutput)(nil)).Elem()
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutput() CustomModelJobOutputOutput {
	return o
}

func (o CustomModelJobOutputOutput) ToCustomModelJobOutputOutputWithContext(ctx context.Context) CustomModelJobOutputOutput {
	return o
}

// Description for the output.
func (o CustomModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'CustomModel'.
func (o CustomModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type CustomModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'CustomModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for CustomModelJobOutputResponse
func (val *CustomModelJobOutputResponse) Defaults() *CustomModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type CustomModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (CustomModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomModelJobOutputResponse)(nil)).Elem()
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutput() CustomModelJobOutputResponseOutput {
	return o
}

func (o CustomModelJobOutputResponseOutput) ToCustomModelJobOutputResponseOutputWithContext(ctx context.Context) CustomModelJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o CustomModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'CustomModel'.
func (o CustomModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o CustomModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o CustomModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidations struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// CustomNCrossValidationsInput is an input type that accepts CustomNCrossValidationsArgs and CustomNCrossValidationsOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsInput` via:
//
//	CustomNCrossValidationsArgs{...}
type CustomNCrossValidationsInput interface {
	pulumi.Input

	ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput
	ToCustomNCrossValidationsOutputWithContext(context.Context) CustomNCrossValidationsOutput
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsArgs struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomNCrossValidationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return i.ToCustomNCrossValidationsOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput)
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i CustomNCrossValidationsArgs) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsOutput).ToCustomNCrossValidationsPtrOutputWithContext(ctx)
}

// CustomNCrossValidationsPtrInput is an input type that accepts CustomNCrossValidationsArgs, CustomNCrossValidationsPtr and CustomNCrossValidationsPtrOutput values.
// You can construct a concrete instance of `CustomNCrossValidationsPtrInput` via:
//
//	        CustomNCrossValidationsArgs{...}
//
//	or:
//
//	        nil
type CustomNCrossValidationsPtrInput interface {
	pulumi.Input

	ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput
	ToCustomNCrossValidationsPtrOutputWithContext(context.Context) CustomNCrossValidationsPtrOutput
}

type customNCrossValidationsPtrType CustomNCrossValidationsArgs

func CustomNCrossValidationsPtr(v *CustomNCrossValidationsArgs) CustomNCrossValidationsPtrInput {
	return (*customNCrossValidationsPtrType)(v)
}

func (*customNCrossValidationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return i.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (i *customNCrossValidationsPtrType) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomNCrossValidationsPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutput() CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsOutputWithContext(ctx context.Context) CustomNCrossValidationsOutput {
	return o
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o.ToCustomNCrossValidationsPtrOutputWithContext(context.Background())
}

func (o CustomNCrossValidationsOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomNCrossValidations) *CustomNCrossValidations {
		return &v
	}).(CustomNCrossValidationsPtrOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidations) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidations) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsPtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidations)(nil)).Elem()
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutput() CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) ToCustomNCrossValidationsPtrOutputWithContext(ctx context.Context) CustomNCrossValidationsPtrOutput {
	return o
}

func (o CustomNCrossValidationsPtrOutput) Elem() CustomNCrossValidationsOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) CustomNCrossValidations {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidations
		return ret
	}).(CustomNCrossValidationsOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidations) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponse struct {
	// Determines how N-Cross validations value is determined.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] N-Cross validations value.
	Value int `pulumi:"value"`
}

// N-Cross validations are specified by user.
type CustomNCrossValidationsResponseOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutput() CustomNCrossValidationsResponseOutput {
	return o
}

func (o CustomNCrossValidationsResponseOutput) ToCustomNCrossValidationsResponseOutputWithContext(ctx context.Context) CustomNCrossValidationsResponseOutput {
	return o
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomNCrossValidationsResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomNCrossValidationsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomNCrossValidationsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomNCrossValidationsResponse)(nil)).Elem()
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutput() CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) ToCustomNCrossValidationsResponsePtrOutputWithContext(ctx context.Context) CustomNCrossValidationsResponsePtrOutput {
	return o
}

func (o CustomNCrossValidationsResponsePtrOutput) Elem() CustomNCrossValidationsResponseOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) CustomNCrossValidationsResponse {
		if v != nil {
			return *v
		}
		var ret CustomNCrossValidationsResponse
		return ret
	}).(CustomNCrossValidationsResponseOutput)
}

// Determines how N-Cross validations value is determined.
// Expected value is 'Custom'.
func (o CustomNCrossValidationsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] N-Cross validations value.
func (o CustomNCrossValidationsResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomNCrossValidationsResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonality struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

// CustomSeasonalityInput is an input type that accepts CustomSeasonalityArgs and CustomSeasonalityOutput values.
// You can construct a concrete instance of `CustomSeasonalityInput` via:
//
//	CustomSeasonalityArgs{...}
type CustomSeasonalityInput interface {
	pulumi.Input

	ToCustomSeasonalityOutput() CustomSeasonalityOutput
	ToCustomSeasonalityOutputWithContext(context.Context) CustomSeasonalityOutput
}

type CustomSeasonalityArgs struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Seasonality value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomSeasonalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return i.ToCustomSeasonalityOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput)
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i CustomSeasonalityArgs) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityOutput).ToCustomSeasonalityPtrOutputWithContext(ctx)
}

// CustomSeasonalityPtrInput is an input type that accepts CustomSeasonalityArgs, CustomSeasonalityPtr and CustomSeasonalityPtrOutput values.
// You can construct a concrete instance of `CustomSeasonalityPtrInput` via:
//
//	        CustomSeasonalityArgs{...}
//
//	or:
//
//	        nil
type CustomSeasonalityPtrInput interface {
	pulumi.Input

	ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput
	ToCustomSeasonalityPtrOutputWithContext(context.Context) CustomSeasonalityPtrOutput
}

type customSeasonalityPtrType CustomSeasonalityArgs

func CustomSeasonalityPtr(v *CustomSeasonalityArgs) CustomSeasonalityPtrInput {
	return (*customSeasonalityPtrType)(v)
}

func (*customSeasonalityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return i.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (i *customSeasonalityPtrType) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomSeasonalityPtrOutput)
}

type CustomSeasonalityOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutput() CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityOutputWithContext(ctx context.Context) CustomSeasonalityOutput {
	return o
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o.ToCustomSeasonalityPtrOutputWithContext(context.Background())
}

func (o CustomSeasonalityOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomSeasonality) *CustomSeasonality {
		return &v
	}).(CustomSeasonalityPtrOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonality) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonality) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityPtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonality)(nil)).Elem()
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutput() CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) ToCustomSeasonalityPtrOutputWithContext(ctx context.Context) CustomSeasonalityPtrOutput {
	return o
}

func (o CustomSeasonalityPtrOutput) Elem() CustomSeasonalityOutput {
	return o.ApplyT(func(v *CustomSeasonality) CustomSeasonality {
		if v != nil {
			return *v
		}
		var ret CustomSeasonality
		return ret
	}).(CustomSeasonalityOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonality) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomSeasonalityResponse struct {
	// Forecasting seasonality mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Seasonality value.
	Value int `pulumi:"value"`
}

type CustomSeasonalityResponseOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutput() CustomSeasonalityResponseOutput {
	return o
}

func (o CustomSeasonalityResponseOutput) ToCustomSeasonalityResponseOutputWithContext(ctx context.Context) CustomSeasonalityResponseOutput {
	return o
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomSeasonalityResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomSeasonalityResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomSeasonalityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomSeasonalityResponse)(nil)).Elem()
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutput() CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) ToCustomSeasonalityResponsePtrOutputWithContext(ctx context.Context) CustomSeasonalityResponsePtrOutput {
	return o
}

func (o CustomSeasonalityResponsePtrOutput) Elem() CustomSeasonalityResponseOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) CustomSeasonalityResponse {
		if v != nil {
			return *v
		}
		var ret CustomSeasonalityResponse
		return ret
	}).(CustomSeasonalityResponseOutput)
}

// Forecasting seasonality mode.
// Expected value is 'Custom'.
func (o CustomSeasonalityResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Seasonality value.
func (o CustomSeasonalityResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomSeasonalityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomTargetLags struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

// CustomTargetLagsInput is an input type that accepts CustomTargetLagsArgs and CustomTargetLagsOutput values.
// You can construct a concrete instance of `CustomTargetLagsInput` via:
//
//	CustomTargetLagsArgs{...}
type CustomTargetLagsInput interface {
	pulumi.Input

	ToCustomTargetLagsOutput() CustomTargetLagsOutput
	ToCustomTargetLagsOutputWithContext(context.Context) CustomTargetLagsOutput
}

type CustomTargetLagsArgs struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] Set target lags values.
	Values pulumi.IntArrayInput `pulumi:"values"`
}

func (CustomTargetLagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return i.ToCustomTargetLagsOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput)
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i CustomTargetLagsArgs) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsOutput).ToCustomTargetLagsPtrOutputWithContext(ctx)
}

// CustomTargetLagsPtrInput is an input type that accepts CustomTargetLagsArgs, CustomTargetLagsPtr and CustomTargetLagsPtrOutput values.
// You can construct a concrete instance of `CustomTargetLagsPtrInput` via:
//
//	        CustomTargetLagsArgs{...}
//
//	or:
//
//	        nil
type CustomTargetLagsPtrInput interface {
	pulumi.Input

	ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput
	ToCustomTargetLagsPtrOutputWithContext(context.Context) CustomTargetLagsPtrOutput
}

type customTargetLagsPtrType CustomTargetLagsArgs

func CustomTargetLagsPtr(v *CustomTargetLagsArgs) CustomTargetLagsPtrInput {
	return (*customTargetLagsPtrType)(v)
}

func (*customTargetLagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return i.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (i *customTargetLagsPtrType) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetLagsPtrOutput)
}

type CustomTargetLagsOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutput() CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsOutputWithContext(ctx context.Context) CustomTargetLagsOutput {
	return o
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o.ToCustomTargetLagsPtrOutputWithContext(context.Background())
}

func (o CustomTargetLagsOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetLags) *CustomTargetLags {
		return &v
	}).(CustomTargetLagsPtrOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLags) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLags) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsPtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLags)(nil)).Elem()
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutput() CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) ToCustomTargetLagsPtrOutputWithContext(ctx context.Context) CustomTargetLagsPtrOutput {
	return o
}

func (o CustomTargetLagsPtrOutput) Elem() CustomTargetLagsOutput {
	return o.ApplyT(func(v *CustomTargetLags) CustomTargetLags {
		if v != nil {
			return *v
		}
		var ret CustomTargetLags
		return ret
	}).(CustomTargetLagsOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLags) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsPtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLags) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponse struct {
	// Target lags selection modes.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] Set target lags values.
	Values []int `pulumi:"values"`
}

type CustomTargetLagsResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutput() CustomTargetLagsResponseOutput {
	return o
}

func (o CustomTargetLagsResponseOutput) ToCustomTargetLagsResponseOutputWithContext(ctx context.Context) CustomTargetLagsResponseOutput {
	return o
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponseOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CustomTargetLagsResponse) []int { return v.Values }).(pulumi.IntArrayOutput)
}

type CustomTargetLagsResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetLagsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetLagsResponse)(nil)).Elem()
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutput() CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) ToCustomTargetLagsResponsePtrOutputWithContext(ctx context.Context) CustomTargetLagsResponsePtrOutput {
	return o
}

func (o CustomTargetLagsResponsePtrOutput) Elem() CustomTargetLagsResponseOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) CustomTargetLagsResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetLagsResponse
		return ret
	}).(CustomTargetLagsResponseOutput)
}

// Target lags selection modes.
// Expected value is 'Custom'.
func (o CustomTargetLagsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Set target lags values.
func (o CustomTargetLagsResponsePtrOutput) Values() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CustomTargetLagsResponse) []int {
		if v == nil {
			return nil
		}
		return v.Values
	}).(pulumi.IntArrayOutput)
}

type CustomTargetRollingWindowSize struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

// CustomTargetRollingWindowSizeInput is an input type that accepts CustomTargetRollingWindowSizeArgs and CustomTargetRollingWindowSizeOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizeInput` via:
//
//	CustomTargetRollingWindowSizeArgs{...}
type CustomTargetRollingWindowSizeInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput
	ToCustomTargetRollingWindowSizeOutputWithContext(context.Context) CustomTargetRollingWindowSizeOutput
}

type CustomTargetRollingWindowSizeArgs struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode pulumi.StringInput `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value pulumi.IntInput `pulumi:"value"`
}

func (CustomTargetRollingWindowSizeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return i.ToCustomTargetRollingWindowSizeOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput)
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i CustomTargetRollingWindowSizeArgs) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizeOutput).ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx)
}

// CustomTargetRollingWindowSizePtrInput is an input type that accepts CustomTargetRollingWindowSizeArgs, CustomTargetRollingWindowSizePtr and CustomTargetRollingWindowSizePtrOutput values.
// You can construct a concrete instance of `CustomTargetRollingWindowSizePtrInput` via:
//
//	        CustomTargetRollingWindowSizeArgs{...}
//
//	or:
//
//	        nil
type CustomTargetRollingWindowSizePtrInput interface {
	pulumi.Input

	ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput
	ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Context) CustomTargetRollingWindowSizePtrOutput
}

type customTargetRollingWindowSizePtrType CustomTargetRollingWindowSizeArgs

func CustomTargetRollingWindowSizePtr(v *CustomTargetRollingWindowSizeArgs) CustomTargetRollingWindowSizePtrInput {
	return (*customTargetRollingWindowSizePtrType)(v)
}

func (*customTargetRollingWindowSizePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return i.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (i *customTargetRollingWindowSizePtrType) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomTargetRollingWindowSizePtrOutput)
}

type CustomTargetRollingWindowSizeOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutput() CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizeOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeOutput {
	return o
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o.ToCustomTargetRollingWindowSizePtrOutputWithContext(context.Background())
}

func (o CustomTargetRollingWindowSizeOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomTargetRollingWindowSize) *CustomTargetRollingWindowSize {
		return &v
	}).(CustomTargetRollingWindowSizePtrOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSize) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSize)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutput() CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) ToCustomTargetRollingWindowSizePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizePtrOutput) Elem() CustomTargetRollingWindowSizeOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) CustomTargetRollingWindowSize {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSize
		return ret
	}).(CustomTargetRollingWindowSizeOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSize) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type CustomTargetRollingWindowSizeResponse struct {
	// Target rolling windows size mode.
	// Expected value is 'Custom'.
	Mode string `pulumi:"mode"`
	// [Required] TargetRollingWindowSize value.
	Value int `pulumi:"value"`
}

type CustomTargetRollingWindowSizeResponseOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutput() CustomTargetRollingWindowSizeResponseOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponseOutput) ToCustomTargetRollingWindowSizeResponseOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponseOutput {
	return o
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponseOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v CustomTargetRollingWindowSizeResponse) int { return v.Value }).(pulumi.IntOutput)
}

type CustomTargetRollingWindowSizeResponsePtrOutput struct{ *pulumi.OutputState }

func (CustomTargetRollingWindowSizeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomTargetRollingWindowSizeResponse)(nil)).Elem()
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutput() CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) ToCustomTargetRollingWindowSizeResponsePtrOutputWithContext(ctx context.Context) CustomTargetRollingWindowSizeResponsePtrOutput {
	return o
}

func (o CustomTargetRollingWindowSizeResponsePtrOutput) Elem() CustomTargetRollingWindowSizeResponseOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) CustomTargetRollingWindowSizeResponse {
		if v != nil {
			return *v
		}
		var ret CustomTargetRollingWindowSizeResponse
		return ret
	}).(CustomTargetRollingWindowSizeResponseOutput)
}

// Target rolling windows size mode.
// Expected value is 'Custom'.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] TargetRollingWindowSize value.
func (o CustomTargetRollingWindowSizeResponsePtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CustomTargetRollingWindowSizeResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

// Container for data asset versions.
type DataContainerType struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerType
func (val *DataContainerType) Defaults() *DataContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// DataContainerTypeInput is an input type that accepts DataContainerTypeArgs and DataContainerTypeOutput values.
// You can construct a concrete instance of `DataContainerTypeInput` via:
//
//	DataContainerTypeArgs{...}
type DataContainerTypeInput interface {
	pulumi.Input

	ToDataContainerTypeOutput() DataContainerTypeOutput
	ToDataContainerTypeOutputWithContext(context.Context) DataContainerTypeOutput
}

// Container for data asset versions.
type DataContainerTypeArgs struct {
	// [Required] Specifies the type of data.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerTypeArgs
func (val *DataContainerTypeArgs) Defaults() *DataContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (DataContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return i.ToDataContainerTypeOutputWithContext(context.Background())
}

func (i DataContainerTypeArgs) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataContainerTypeOutput)
}

// Container for data asset versions.
type DataContainerTypeOutput struct{ *pulumi.OutputState }

func (DataContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerType)(nil)).Elem()
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutput() DataContainerTypeOutput {
	return o
}

func (o DataContainerTypeOutput) ToDataContainerTypeOutputWithContext(ctx context.Context) DataContainerTypeOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerTypeOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerType) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o DataContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for data asset versions.
type DataContainerResponse struct {
	// [Required] Specifies the type of data.
	DataType string `pulumi:"dataType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for DataContainerResponse
func (val *DataContainerResponse) Defaults() *DataContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for data asset versions.
type DataContainerResponseOutput struct{ *pulumi.OutputState }

func (DataContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataContainerResponse)(nil)).Elem()
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutput() DataContainerResponseOutput {
	return o
}

func (o DataContainerResponseOutput) ToDataContainerResponseOutputWithContext(ctx context.Context) DataContainerResponseOutput {
	return o
}

// [Required] Specifies the type of data.
func (o DataContainerResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// The asset description text.
func (o DataContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o DataContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DataContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o DataContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o DataContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v DataContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o DataContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o DataContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v DataContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReference struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// DataPathAssetReferenceInput is an input type that accepts DataPathAssetReferenceArgs and DataPathAssetReferenceOutput values.
// You can construct a concrete instance of `DataPathAssetReferenceInput` via:
//
//	DataPathAssetReferenceArgs{...}
type DataPathAssetReferenceInput interface {
	pulumi.Input

	ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput
	ToDataPathAssetReferenceOutputWithContext(context.Context) DataPathAssetReferenceOutput
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceArgs struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId pulumi.StringPtrInput `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (DataPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return i.ToDataPathAssetReferenceOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput)
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i DataPathAssetReferenceArgs) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferenceOutput).ToDataPathAssetReferencePtrOutputWithContext(ctx)
}

// DataPathAssetReferencePtrInput is an input type that accepts DataPathAssetReferenceArgs, DataPathAssetReferencePtr and DataPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `DataPathAssetReferencePtrInput` via:
//
//	        DataPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type DataPathAssetReferencePtrInput interface {
	pulumi.Input

	ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput
	ToDataPathAssetReferencePtrOutputWithContext(context.Context) DataPathAssetReferencePtrOutput
}

type dataPathAssetReferencePtrType DataPathAssetReferenceArgs

func DataPathAssetReferencePtr(v *DataPathAssetReferenceArgs) DataPathAssetReferencePtrInput {
	return (*dataPathAssetReferencePtrType)(v)
}

func (*dataPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return i.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *dataPathAssetReferencePtrType) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutput() DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferenceOutputWithContext(ctx context.Context) DataPathAssetReferenceOutput {
	return o
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o.ToDataPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o DataPathAssetReferenceOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataPathAssetReference) *DataPathAssetReference {
		return &v
	}).(DataPathAssetReferencePtrOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReference)(nil)).Elem()
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutput() DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) ToDataPathAssetReferencePtrOutputWithContext(ctx context.Context) DataPathAssetReferencePtrOutput {
	return o
}

func (o DataPathAssetReferencePtrOutput) Elem() DataPathAssetReferenceOutput {
	return o.ApplyT(func(v *DataPathAssetReference) DataPathAssetReference {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReference
		return ret
	}).(DataPathAssetReferenceOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferencePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponse struct {
	// ARM resource ID of the datastore where the asset is located.
	DatastoreId *string `pulumi:"datastoreId"`
	// The path of the file/directory in the datastore.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'DataPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a datastore.
type DataPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutput() DataPathAssetReferenceResponseOutput {
	return o
}

func (o DataPathAssetReferenceResponseOutput) ToDataPathAssetReferenceResponseOutputWithContext(ctx context.Context) DataPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponseOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.DatastoreId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v DataPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type DataPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (DataPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataPathAssetReferenceResponse)(nil)).Elem()
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutput() DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) ToDataPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) DataPathAssetReferenceResponsePtrOutput {
	return o
}

func (o DataPathAssetReferenceResponsePtrOutput) Elem() DataPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) DataPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret DataPathAssetReferenceResponse
		return ret
	}).(DataPathAssetReferenceResponseOutput)
}

// ARM resource ID of the datastore where the asset is located.
func (o DataPathAssetReferenceResponsePtrOutput) DatastoreId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatastoreId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the datastore.
func (o DataPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'DataPath'.
func (o DataPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

type DefaultScaleSettings struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

// DefaultScaleSettingsInput is an input type that accepts DefaultScaleSettingsArgs and DefaultScaleSettingsOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsInput` via:
//
//	DefaultScaleSettingsArgs{...}
type DefaultScaleSettingsInput interface {
	pulumi.Input

	ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput
	ToDefaultScaleSettingsOutputWithContext(context.Context) DefaultScaleSettingsOutput
}

type DefaultScaleSettingsArgs struct {
	// Expected value is 'Default'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
}

func (DefaultScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return i.ToDefaultScaleSettingsOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput)
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i DefaultScaleSettingsArgs) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsOutput).ToDefaultScaleSettingsPtrOutputWithContext(ctx)
}

// DefaultScaleSettingsPtrInput is an input type that accepts DefaultScaleSettingsArgs, DefaultScaleSettingsPtr and DefaultScaleSettingsPtrOutput values.
// You can construct a concrete instance of `DefaultScaleSettingsPtrInput` via:
//
//	        DefaultScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type DefaultScaleSettingsPtrInput interface {
	pulumi.Input

	ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput
	ToDefaultScaleSettingsPtrOutputWithContext(context.Context) DefaultScaleSettingsPtrOutput
}

type defaultScaleSettingsPtrType DefaultScaleSettingsArgs

func DefaultScaleSettingsPtr(v *DefaultScaleSettingsArgs) DefaultScaleSettingsPtrInput {
	return (*defaultScaleSettingsPtrType)(v)
}

func (*defaultScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return i.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *defaultScaleSettingsPtrType) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultScaleSettingsPtrOutput)
}

type DefaultScaleSettingsOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutput() DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsOutputWithContext(ctx context.Context) DefaultScaleSettingsOutput {
	return o
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o.ToDefaultScaleSettingsPtrOutputWithContext(context.Background())
}

func (o DefaultScaleSettingsOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultScaleSettings) *DefaultScaleSettings {
		return &v
	}).(DefaultScaleSettingsPtrOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettings)(nil)).Elem()
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutput() DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) ToDefaultScaleSettingsPtrOutputWithContext(ctx context.Context) DefaultScaleSettingsPtrOutput {
	return o
}

func (o DefaultScaleSettingsPtrOutput) Elem() DefaultScaleSettingsOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) DefaultScaleSettings {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettings
		return ret
	}).(DefaultScaleSettingsOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

type DefaultScaleSettingsResponse struct {
	// Expected value is 'Default'.
	ScaleType string `pulumi:"scaleType"`
}

type DefaultScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutput() DefaultScaleSettingsResponseOutput {
	return o
}

func (o DefaultScaleSettingsResponseOutput) ToDefaultScaleSettingsResponseOutputWithContext(ctx context.Context) DefaultScaleSettingsResponseOutput {
	return o
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v DefaultScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

type DefaultScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (DefaultScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultScaleSettingsResponse)(nil)).Elem()
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutput() DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) ToDefaultScaleSettingsResponsePtrOutputWithContext(ctx context.Context) DefaultScaleSettingsResponsePtrOutput {
	return o
}

func (o DefaultScaleSettingsResponsePtrOutput) Elem() DefaultScaleSettingsResponseOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) DefaultScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret DefaultScaleSettingsResponse
		return ret
	}).(DefaultScaleSettingsResponseOutput)
}

// Expected value is 'Default'.
func (o DefaultScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DefaultScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeys struct {
	// The primary key.
	PrimaryKey *string `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey *string `pulumi:"secondaryKey"`
}

// EndpointAuthKeysInput is an input type that accepts EndpointAuthKeysArgs and EndpointAuthKeysOutput values.
// You can construct a concrete instance of `EndpointAuthKeysInput` via:
//
//	EndpointAuthKeysArgs{...}
type EndpointAuthKeysInput interface {
	pulumi.Input

	ToEndpointAuthKeysOutput() EndpointAuthKeysOutput
	ToEndpointAuthKeysOutputWithContext(context.Context) EndpointAuthKeysOutput
}

// Keys for endpoint authentication.
type EndpointAuthKeysArgs struct {
	// The primary key.
	PrimaryKey pulumi.StringPtrInput `pulumi:"primaryKey"`
	// The secondary key.
	SecondaryKey pulumi.StringPtrInput `pulumi:"secondaryKey"`
}

func (EndpointAuthKeysArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return i.ToEndpointAuthKeysOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput)
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i EndpointAuthKeysArgs) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysOutput).ToEndpointAuthKeysPtrOutputWithContext(ctx)
}

// EndpointAuthKeysPtrInput is an input type that accepts EndpointAuthKeysArgs, EndpointAuthKeysPtr and EndpointAuthKeysPtrOutput values.
// You can construct a concrete instance of `EndpointAuthKeysPtrInput` via:
//
//	        EndpointAuthKeysArgs{...}
//
//	or:
//
//	        nil
type EndpointAuthKeysPtrInput interface {
	pulumi.Input

	ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput
	ToEndpointAuthKeysPtrOutputWithContext(context.Context) EndpointAuthKeysPtrOutput
}

type endpointAuthKeysPtrType EndpointAuthKeysArgs

func EndpointAuthKeysPtr(v *EndpointAuthKeysArgs) EndpointAuthKeysPtrInput {
	return (*endpointAuthKeysPtrType)(v)
}

func (*endpointAuthKeysPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return i.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (i *endpointAuthKeysPtrType) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAuthKeysPtrOutput)
}

// Keys for endpoint authentication.
type EndpointAuthKeysOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutput() EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysOutputWithContext(ctx context.Context) EndpointAuthKeysOutput {
	return o
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o.ToEndpointAuthKeysPtrOutputWithContext(context.Background())
}

func (o EndpointAuthKeysOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointAuthKeys) *EndpointAuthKeys {
		return &v
	}).(EndpointAuthKeysPtrOutput)
}

// The primary key.
func (o EndpointAuthKeysOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.PrimaryKey }).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAuthKeys) *string { return v.SecondaryKey }).(pulumi.StringPtrOutput)
}

type EndpointAuthKeysPtrOutput struct{ *pulumi.OutputState }

func (EndpointAuthKeysPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthKeys)(nil)).Elem()
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutput() EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) ToEndpointAuthKeysPtrOutputWithContext(ctx context.Context) EndpointAuthKeysPtrOutput {
	return o
}

func (o EndpointAuthKeysPtrOutput) Elem() EndpointAuthKeysOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) EndpointAuthKeys {
		if v != nil {
			return *v
		}
		var ret EndpointAuthKeys
		return ret
	}).(EndpointAuthKeysOutput)
}

// The primary key.
func (o EndpointAuthKeysPtrOutput) PrimaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(pulumi.StringPtrOutput)
}

// The secondary key.
func (o EndpointAuthKeysPtrOutput) SecondaryKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EndpointAuthKeys) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryKey
	}).(pulumi.StringPtrOutput)
}

// Container for environment specification versions.
type EnvironmentContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerType
func (val *EnvironmentContainerType) Defaults() *EnvironmentContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// EnvironmentContainerTypeInput is an input type that accepts EnvironmentContainerTypeArgs and EnvironmentContainerTypeOutput values.
// You can construct a concrete instance of `EnvironmentContainerTypeInput` via:
//
//	EnvironmentContainerTypeArgs{...}
type EnvironmentContainerTypeInput interface {
	pulumi.Input

	ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput
	ToEnvironmentContainerTypeOutputWithContext(context.Context) EnvironmentContainerTypeOutput
}

// Container for environment specification versions.
type EnvironmentContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerTypeArgs
func (val *EnvironmentContainerTypeArgs) Defaults() *EnvironmentContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (EnvironmentContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return i.ToEnvironmentContainerTypeOutputWithContext(context.Background())
}

func (i EnvironmentContainerTypeArgs) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentContainerTypeOutput)
}

// Container for environment specification versions.
type EnvironmentContainerTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerType)(nil)).Elem()
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutput() EnvironmentContainerTypeOutput {
	return o
}

func (o EnvironmentContainerTypeOutput) ToEnvironmentContainerTypeOutputWithContext(ctx context.Context) EnvironmentContainerTypeOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Container for environment specification versions.
type EnvironmentContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentContainerResponse
func (val *EnvironmentContainerResponse) Defaults() *EnvironmentContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Container for environment specification versions.
type EnvironmentContainerResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentContainerResponse)(nil)).Elem()
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutput() EnvironmentContainerResponseOutput {
	return o
}

func (o EnvironmentContainerResponseOutput) ToEnvironmentContainerResponseOutputWithContext(ctx context.Context) EnvironmentContainerResponseOutput {
	return o
}

// The asset description text.
func (o EnvironmentContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o EnvironmentContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o EnvironmentContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o EnvironmentContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o EnvironmentContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment version details.
type EnvironmentVersionType struct {
	// Configuration settings for Docker build context.
	Build *BuildContext `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerProperties `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionType
func (val *EnvironmentVersionType) Defaults() *EnvironmentVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// EnvironmentVersionTypeInput is an input type that accepts EnvironmentVersionTypeArgs and EnvironmentVersionTypeOutput values.
// You can construct a concrete instance of `EnvironmentVersionTypeInput` via:
//
//	EnvironmentVersionTypeArgs{...}
type EnvironmentVersionTypeInput interface {
	pulumi.Input

	ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput
	ToEnvironmentVersionTypeOutputWithContext(context.Context) EnvironmentVersionTypeOutput
}

// Environment version details.
type EnvironmentVersionTypeArgs struct {
	// Configuration settings for Docker build context.
	Build BuildContextPtrInput `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile pulumi.StringPtrInput `pulumi:"condaFile"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig InferenceContainerPropertiesPtrInput `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionTypeArgs
func (val *EnvironmentVersionTypeArgs) Defaults() *EnvironmentVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	if tmp.OsType == nil {
		tmp.OsType = pulumi.StringPtr("Linux")
	}
	return &tmp
}
func (EnvironmentVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return i.ToEnvironmentVersionTypeOutputWithContext(context.Background())
}

func (i EnvironmentVersionTypeArgs) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentVersionTypeOutput)
}

// Environment version details.
type EnvironmentVersionTypeOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionType)(nil)).Elem()
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutput() EnvironmentVersionTypeOutput {
	return o
}

func (o EnvironmentVersionTypeOutput) ToEnvironmentVersionTypeOutputWithContext(ctx context.Context) EnvironmentVersionTypeOutput {
	return o
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionTypeOutput) Build() BuildContextPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *BuildContext { return v.Build }).(BuildContextPtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionTypeOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionTypeOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionTypeOutput) InferenceConfig() InferenceContainerPropertiesPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *InferenceContainerProperties { return v.InferenceConfig }).(InferenceContainerPropertiesPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionTypeOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionType) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Environment version details.
type EnvironmentVersionResponse struct {
	// Configuration settings for Docker build context.
	Build *BuildContextResponse `pulumi:"build"`
	// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
	// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
	CondaFile *string `pulumi:"condaFile"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Environment type is either user managed or curated by the Azure ML service
	// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
	EnvironmentType string `pulumi:"environmentType"`
	// Name of the image that will be used for the environment.
	// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
	Image *string `pulumi:"image"`
	// Defines configuration specific to inference.
	InferenceConfig *InferenceContainerPropertiesResponse `pulumi:"inferenceConfig"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The OS type of the environment.
	OsType *string `pulumi:"osType"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for EnvironmentVersionResponse
func (val *EnvironmentVersionResponse) Defaults() *EnvironmentVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Build = tmp.Build.Defaults()

	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.OsType == nil {
		osType_ := "Linux"
		tmp.OsType = &osType_
	}
	return &tmp
}

// Environment version details.
type EnvironmentVersionResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentVersionResponse)(nil)).Elem()
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutput() EnvironmentVersionResponseOutput {
	return o
}

func (o EnvironmentVersionResponseOutput) ToEnvironmentVersionResponseOutputWithContext(ctx context.Context) EnvironmentVersionResponseOutput {
	return o
}

// Configuration settings for Docker build context.
func (o EnvironmentVersionResponseOutput) Build() BuildContextResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *BuildContextResponse { return v.Build }).(BuildContextResponsePtrOutput)
}

// Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
// <see href="https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment" />
func (o EnvironmentVersionResponseOutput) CondaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.CondaFile }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o EnvironmentVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Environment type is either user managed or curated by the Azure ML service
// <see href="https://docs.microsoft.com/en-us/azure/machine-learning/resource-curated-environments" />
func (o EnvironmentVersionResponseOutput) EnvironmentType() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) string { return v.EnvironmentType }).(pulumi.StringOutput)
}

// Name of the image that will be used for the environment.
// <seealso href="https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-custom-docker-image#use-a-custom-base-image" />
func (o EnvironmentVersionResponseOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Defines configuration specific to inference.
func (o EnvironmentVersionResponseOutput) InferenceConfig() InferenceContainerPropertiesResponsePtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *InferenceContainerPropertiesResponse { return v.InferenceConfig }).(InferenceContainerPropertiesResponsePtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o EnvironmentVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o EnvironmentVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The OS type of the environment.
func (o EnvironmentVersionResponseOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o EnvironmentVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o EnvironmentVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v EnvironmentVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type FlavorData struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

// FlavorDataInput is an input type that accepts FlavorDataArgs and FlavorDataOutput values.
// You can construct a concrete instance of `FlavorDataInput` via:
//
//	FlavorDataArgs{...}
type FlavorDataInput interface {
	pulumi.Input

	ToFlavorDataOutput() FlavorDataOutput
	ToFlavorDataOutputWithContext(context.Context) FlavorDataOutput
}

type FlavorDataArgs struct {
	// Model flavor-specific data.
	Data pulumi.StringMapInput `pulumi:"data"`
}

func (FlavorDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (i FlavorDataArgs) ToFlavorDataOutput() FlavorDataOutput {
	return i.ToFlavorDataOutputWithContext(context.Background())
}

func (i FlavorDataArgs) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataOutput)
}

// FlavorDataMapInput is an input type that accepts FlavorDataMap and FlavorDataMapOutput values.
// You can construct a concrete instance of `FlavorDataMapInput` via:
//
//	FlavorDataMap{ "key": FlavorDataArgs{...} }
type FlavorDataMapInput interface {
	pulumi.Input

	ToFlavorDataMapOutput() FlavorDataMapOutput
	ToFlavorDataMapOutputWithContext(context.Context) FlavorDataMapOutput
}

type FlavorDataMap map[string]FlavorDataInput

func (FlavorDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (i FlavorDataMap) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return i.ToFlavorDataMapOutputWithContext(context.Background())
}

func (i FlavorDataMap) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlavorDataMapOutput)
}

type FlavorDataOutput struct{ *pulumi.OutputState }

func (FlavorDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorData)(nil)).Elem()
}

func (o FlavorDataOutput) ToFlavorDataOutput() FlavorDataOutput {
	return o
}

func (o FlavorDataOutput) ToFlavorDataOutputWithContext(ctx context.Context) FlavorDataOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorData) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataMapOutput struct{ *pulumi.OutputState }

func (FlavorDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorData)(nil)).Elem()
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutput() FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) ToFlavorDataMapOutputWithContext(ctx context.Context) FlavorDataMapOutput {
	return o
}

func (o FlavorDataMapOutput) MapIndex(k pulumi.StringInput) FlavorDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorData {
		return vs[0].(map[string]FlavorData)[vs[1].(string)]
	}).(FlavorDataOutput)
}

type FlavorDataResponse struct {
	// Model flavor-specific data.
	Data map[string]string `pulumi:"data"`
}

type FlavorDataResponseOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutput() FlavorDataResponseOutput {
	return o
}

func (o FlavorDataResponseOutput) ToFlavorDataResponseOutputWithContext(ctx context.Context) FlavorDataResponseOutput {
	return o
}

// Model flavor-specific data.
func (o FlavorDataResponseOutput) Data() pulumi.StringMapOutput {
	return o.ApplyT(func(v FlavorDataResponse) map[string]string { return v.Data }).(pulumi.StringMapOutput)
}

type FlavorDataResponseMapOutput struct{ *pulumi.OutputState }

func (FlavorDataResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FlavorDataResponse)(nil)).Elem()
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutput() FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) ToFlavorDataResponseMapOutputWithContext(ctx context.Context) FlavorDataResponseMapOutput {
	return o
}

func (o FlavorDataResponseMapOutput) MapIndex(k pulumi.StringInput) FlavorDataResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FlavorDataResponse {
		return vs[0].(map[string]FlavorDataResponse)[vs[1].(string)]
	}).(FlavorDataResponseOutput)
}

// Forecasting task in AutoML Table vertical.
type Forecasting struct {
	// Allowed models for forecasting task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for forecasting task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettings `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettings `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for Forecasting
func (val *Forecasting) Defaults() *Forecasting {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// ForecastingInput is an input type that accepts ForecastingArgs and ForecastingOutput values.
// You can construct a concrete instance of `ForecastingInput` via:
//
//	ForecastingArgs{...}
type ForecastingInput interface {
	pulumi.Input

	ToForecastingOutput() ForecastingOutput
	ToForecastingOutputWithContext(context.Context) ForecastingOutput
}

// Forecasting task in AutoML Table vertical.
type ForecastingArgs struct {
	// Allowed models for forecasting task.
	AllowedModels pulumi.StringArrayInput `pulumi:"allowedModels"`
	// Blocked models for forecasting task.
	BlockedModels pulumi.StringArrayInput `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings TableVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings ForecastingSettingsPtrInput `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for forecasting task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings TrainingSettingsPtrInput `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for ForecastingArgs
func (val *ForecastingArgs) Defaults() *ForecastingArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (ForecastingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (i ForecastingArgs) ToForecastingOutput() ForecastingOutput {
	return i.ToForecastingOutputWithContext(context.Background())
}

func (i ForecastingArgs) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingOutput struct{ *pulumi.OutputState }

func (ForecastingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Forecasting)(nil)).Elem()
}

func (o ForecastingOutput) ToForecastingOutput() ForecastingOutput {
	return o
}

func (o ForecastingOutput) ToForecastingOutputWithContext(ctx context.Context) ForecastingOutput {
	return o
}

// Allowed models for forecasting task.
func (o ForecastingOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Forecasting) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Forecasting) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o ForecastingOutput) DataSettings() TableVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalDataSettings { return v.DataSettings }).(TableVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingOutput) ForecastingSettings() ForecastingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *ForecastingSettings { return v.ForecastingSettings }).(ForecastingSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o ForecastingOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for forecasting task.
func (o ForecastingOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Forecasting) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Forecasting) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingOutput) TrainingSettings() TrainingSettingsPtrOutput {
	return o.ApplyT(func(v Forecasting) *TrainingSettings { return v.TrainingSettings }).(TrainingSettingsPtrOutput)
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponse struct {
	// Allowed models for forecasting task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for forecasting task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Forecasting task specific inputs.
	ForecastingSettings *ForecastingSettingsResponse `pulumi:"forecastingSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for forecasting task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Forecasting'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettingsResponse `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for ForecastingResponse
func (val *ForecastingResponse) Defaults() *ForecastingResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.ForecastingSettings = tmp.ForecastingSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// Forecasting task in AutoML Table vertical.
type ForecastingResponseOutput struct{ *pulumi.OutputState }

func (ForecastingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingResponse)(nil)).Elem()
}

func (o ForecastingResponseOutput) ToForecastingResponseOutput() ForecastingResponseOutput {
	return o
}

func (o ForecastingResponseOutput) ToForecastingResponseOutputWithContext(ctx context.Context) ForecastingResponseOutput {
	return o
}

// Allowed models for forecasting task.
func (o ForecastingResponseOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingResponse) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for forecasting task.
func (o ForecastingResponseOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingResponse) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o ForecastingResponseOutput) DataSettings() TableVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalDataSettingsResponse { return v.DataSettings }).(TableVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o ForecastingResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Forecasting task specific inputs.
func (o ForecastingResponseOutput) ForecastingSettings() ForecastingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *ForecastingSettingsResponse { return v.ForecastingSettings }).(ForecastingSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o ForecastingResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o ForecastingResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for forecasting task.
func (o ForecastingResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Forecasting'.
func (o ForecastingResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ForecastingResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o ForecastingResponseOutput) TrainingSettings() TrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v ForecastingResponse) *TrainingSettingsResponse { return v.TrainingSettings }).(TrainingSettingsResponsePtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettings struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettings
func (val *ForecastingSettings) Defaults() *ForecastingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// ForecastingSettingsInput is an input type that accepts ForecastingSettingsArgs and ForecastingSettingsOutput values.
// You can construct a concrete instance of `ForecastingSettingsInput` via:
//
//	ForecastingSettingsArgs{...}
type ForecastingSettingsInput interface {
	pulumi.Input

	ToForecastingSettingsOutput() ForecastingSettingsOutput
	ToForecastingSettingsOutputWithContext(context.Context) ForecastingSettingsOutput
}

// Forecasting specific parameters.
type ForecastingSettingsArgs struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays pulumi.StringPtrInput `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize pulumi.IntPtrInput `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags pulumi.StringPtrInput `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon pulumi.Input `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency pulumi.StringPtrInput `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality pulumi.Input `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig pulumi.StringPtrInput `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction pulumi.StringPtrInput `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags pulumi.Input `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize pulumi.Input `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName pulumi.StringPtrInput `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames pulumi.StringArrayInput `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl pulumi.StringPtrInput `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsArgs
func (val *ForecastingSettingsArgs) Defaults() *ForecastingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		tmp.FeatureLags = pulumi.StringPtr("None")
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		tmp.ShortSeriesHandlingConfig = pulumi.StringPtr("Auto")
	}
	if tmp.TargetAggregateFunction == nil {
		tmp.TargetAggregateFunction = pulumi.StringPtr("None")
	}
	if tmp.UseStl == nil {
		tmp.UseStl = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ForecastingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return i.ToForecastingSettingsOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput)
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i ForecastingSettingsArgs) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsOutput).ToForecastingSettingsPtrOutputWithContext(ctx)
}

// ForecastingSettingsPtrInput is an input type that accepts ForecastingSettingsArgs, ForecastingSettingsPtr and ForecastingSettingsPtrOutput values.
// You can construct a concrete instance of `ForecastingSettingsPtrInput` via:
//
//	        ForecastingSettingsArgs{...}
//
//	or:
//
//	        nil
type ForecastingSettingsPtrInput interface {
	pulumi.Input

	ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput
	ToForecastingSettingsPtrOutputWithContext(context.Context) ForecastingSettingsPtrOutput
}

type forecastingSettingsPtrType ForecastingSettingsArgs

func ForecastingSettingsPtr(v *ForecastingSettingsArgs) ForecastingSettingsPtrInput {
	return (*forecastingSettingsPtrType)(v)
}

func (*forecastingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return i.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (i *forecastingSettingsPtrType) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForecastingSettingsPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutput() ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsOutputWithContext(ctx context.Context) ForecastingSettingsOutput {
	return o
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o.ToForecastingSettingsPtrOutputWithContext(context.Background())
}

func (o ForecastingSettingsOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForecastingSettings) *ForecastingSettings {
		return &v
	}).(ForecastingSettingsPtrOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettings) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettings) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettings) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsPtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettings)(nil)).Elem()
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutput() ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) ToForecastingSettingsPtrOutputWithContext(ctx context.Context) ForecastingSettingsPtrOutput {
	return o
}

func (o ForecastingSettingsPtrOutput) Elem() ForecastingSettingsOutput {
	return o.ApplyT(func(v *ForecastingSettings) ForecastingSettings {
		if v != nil {
			return *v
		}
		var ret ForecastingSettings
		return ret
	}).(ForecastingSettingsOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsPtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsPtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsPtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsPtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsPtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsPtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsPtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsPtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsPtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsPtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsPtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsPtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettings) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsPtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettings) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Forecasting specific parameters.
type ForecastingSettingsResponse struct {
	// Country or region for holidays for forecasting tasks.
	// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
	CountryOrRegionForHolidays *string `pulumi:"countryOrRegionForHolidays"`
	// Number of periods between the origin time of one CV fold and the next fold. For
	// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
	// three days apart.
	CvStepSize *int `pulumi:"cvStepSize"`
	// Flag for generating lags for the numeric features with 'auto' or null.
	FeatureLags *string `pulumi:"featureLags"`
	// The desired maximum forecast horizon in units of time-series frequency.
	ForecastHorizon interface{} `pulumi:"forecastHorizon"`
	// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
	Frequency *string `pulumi:"frequency"`
	// Set time series seasonality as an integer multiple of the series frequency.
	// If seasonality is set to 'auto', it will be inferred.
	Seasonality interface{} `pulumi:"seasonality"`
	// The parameter defining how if AutoML should handle short time series.
	ShortSeriesHandlingConfig *string `pulumi:"shortSeriesHandlingConfig"`
	// The function to be used to aggregate the time series target column to conform to a user specified frequency.
	// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
	TargetAggregateFunction *string `pulumi:"targetAggregateFunction"`
	// The number of past periods to lag from the target column.
	TargetLags interface{} `pulumi:"targetLags"`
	// The number of past periods used to create a rolling window average of the target column.
	TargetRollingWindowSize interface{} `pulumi:"targetRollingWindowSize"`
	// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
	TimeColumnName *string `pulumi:"timeColumnName"`
	// The names of columns used to group a timeseries. It can be used to create multiple series.
	// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
	TimeSeriesIdColumnNames []string `pulumi:"timeSeriesIdColumnNames"`
	// Configure STL Decomposition of the time-series target column.
	UseStl *string `pulumi:"useStl"`
}

// Defaults sets the appropriate defaults for ForecastingSettingsResponse
func (val *ForecastingSettingsResponse) Defaults() *ForecastingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FeatureLags == nil {
		featureLags_ := "None"
		tmp.FeatureLags = &featureLags_
	}
	if tmp.ShortSeriesHandlingConfig == nil {
		shortSeriesHandlingConfig_ := "Auto"
		tmp.ShortSeriesHandlingConfig = &shortSeriesHandlingConfig_
	}
	if tmp.TargetAggregateFunction == nil {
		targetAggregateFunction_ := "None"
		tmp.TargetAggregateFunction = &targetAggregateFunction_
	}
	if tmp.UseStl == nil {
		useStl_ := "None"
		tmp.UseStl = &useStl_
	}
	return &tmp
}

// Forecasting specific parameters.
type ForecastingSettingsResponseOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutput() ForecastingSettingsResponseOutput {
	return o
}

func (o ForecastingSettingsResponseOutput) ToForecastingSettingsResponseOutputWithContext(ctx context.Context) ForecastingSettingsResponseOutput {
	return o
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponseOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.CountryOrRegionForHolidays }).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponseOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *int { return v.CvStepSize }).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponseOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.FeatureLags }).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponseOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.ForecastHorizon }).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponseOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.Frequency }).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponseOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.Seasonality }).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponseOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.ShortSeriesHandlingConfig }).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponseOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TargetAggregateFunction }).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponseOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetLags }).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponseOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) interface{} { return v.TargetRollingWindowSize }).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponseOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.TimeColumnName }).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponseOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) []string { return v.TimeSeriesIdColumnNames }).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponseOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForecastingSettingsResponse) *string { return v.UseStl }).(pulumi.StringPtrOutput)
}

type ForecastingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ForecastingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForecastingSettingsResponse)(nil)).Elem()
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutput() ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) ToForecastingSettingsResponsePtrOutputWithContext(ctx context.Context) ForecastingSettingsResponsePtrOutput {
	return o
}

func (o ForecastingSettingsResponsePtrOutput) Elem() ForecastingSettingsResponseOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) ForecastingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ForecastingSettingsResponse
		return ret
	}).(ForecastingSettingsResponseOutput)
}

// Country or region for holidays for forecasting tasks.
// These should be ISO 3166 two-letter country/region codes, for example 'US' or 'GB'.
func (o ForecastingSettingsResponsePtrOutput) CountryOrRegionForHolidays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.CountryOrRegionForHolidays
	}).(pulumi.StringPtrOutput)
}

// Number of periods between the origin time of one CV fold and the next fold. For
// example, if `CVStepSize` = 3 for daily data, the origin time for each fold will be
// three days apart.
func (o ForecastingSettingsResponsePtrOutput) CvStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.CvStepSize
	}).(pulumi.IntPtrOutput)
}

// Flag for generating lags for the numeric features with 'auto' or null.
func (o ForecastingSettingsResponsePtrOutput) FeatureLags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.FeatureLags
	}).(pulumi.StringPtrOutput)
}

// The desired maximum forecast horizon in units of time-series frequency.
func (o ForecastingSettingsResponsePtrOutput) ForecastHorizon() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.ForecastHorizon
	}).(pulumi.AnyOutput)
}

// When forecasting, this parameter represents the period with which the forecast is desired, for example daily, weekly, yearly, etc. The forecast frequency is dataset frequency by default.
func (o ForecastingSettingsResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Set time series seasonality as an integer multiple of the series frequency.
// If seasonality is set to 'auto', it will be inferred.
func (o ForecastingSettingsResponsePtrOutput) Seasonality() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.Seasonality
	}).(pulumi.AnyOutput)
}

// The parameter defining how if AutoML should handle short time series.
func (o ForecastingSettingsResponsePtrOutput) ShortSeriesHandlingConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.ShortSeriesHandlingConfig
	}).(pulumi.StringPtrOutput)
}

// The function to be used to aggregate the time series target column to conform to a user specified frequency.
// If the TargetAggregateFunction is set i.e. not 'None', but the freq parameter is not set, the error is raised. The possible target aggregation functions are: "sum", "max", "min" and "mean".
func (o ForecastingSettingsResponsePtrOutput) TargetAggregateFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TargetAggregateFunction
	}).(pulumi.StringPtrOutput)
}

// The number of past periods to lag from the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetLags() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetLags
	}).(pulumi.AnyOutput)
}

// The number of past periods used to create a rolling window average of the target column.
func (o ForecastingSettingsResponsePtrOutput) TargetRollingWindowSize() pulumi.AnyOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.TargetRollingWindowSize
	}).(pulumi.AnyOutput)
}

// The name of the time column. This parameter is required when forecasting to specify the datetime column in the input data used for building the time series and inferring its frequency.
func (o ForecastingSettingsResponsePtrOutput) TimeColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeColumnName
	}).(pulumi.StringPtrOutput)
}

// The names of columns used to group a timeseries. It can be used to create multiple series.
// If grain is not defined, the data set is assumed to be one time-series. This parameter is used with task type forecasting.
func (o ForecastingSettingsResponsePtrOutput) TimeSeriesIdColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.TimeSeriesIdColumnNames
	}).(pulumi.StringArrayOutput)
}

// Configure STL Decomposition of the time-series target column.
func (o ForecastingSettingsResponsePtrOutput) UseStl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForecastingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.UseStl
	}).(pulumi.StringPtrOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithm struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// GridSamplingAlgorithmInput is an input type that accepts GridSamplingAlgorithmArgs and GridSamplingAlgorithmOutput values.
// You can construct a concrete instance of `GridSamplingAlgorithmInput` via:
//
//	GridSamplingAlgorithmArgs{...}
type GridSamplingAlgorithmInput interface {
	pulumi.Input

	ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput
	ToGridSamplingAlgorithmOutputWithContext(context.Context) GridSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmArgs struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
}

func (GridSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return i.ToGridSamplingAlgorithmOutputWithContext(context.Background())
}

func (i GridSamplingAlgorithmArgs) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GridSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithm)(nil)).Elem()
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutput() GridSamplingAlgorithmOutput {
	return o
}

func (o GridSamplingAlgorithmOutput) ToGridSamplingAlgorithmOutputWithContext(ctx context.Context) GridSamplingAlgorithmOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponse struct {
	// Expected value is 'Grid'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
}

// Defines a Sampling Algorithm that exhaustively generates every value combination in the space
type GridSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (GridSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GridSamplingAlgorithmResponse)(nil)).Elem()
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutput() GridSamplingAlgorithmResponseOutput {
	return o
}

func (o GridSamplingAlgorithmResponseOutput) ToGridSamplingAlgorithmResponseOutputWithContext(ctx context.Context) GridSamplingAlgorithmResponseOutput {
	return o
}

// Expected value is 'Grid'.
func (o GridSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v GridSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

type HdfsDatastore struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate *string `pulumi:"hdfsServerCertificate"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress string `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol *string `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastore
func (val *HdfsDatastore) Defaults() *HdfsDatastore {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "http"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

// HdfsDatastoreInput is an input type that accepts HdfsDatastoreArgs and HdfsDatastoreOutput values.
// You can construct a concrete instance of `HdfsDatastoreInput` via:
//
//	HdfsDatastoreArgs{...}
type HdfsDatastoreInput interface {
	pulumi.Input

	ToHdfsDatastoreOutput() HdfsDatastoreOutput
	ToHdfsDatastoreOutputWithContext(context.Context) HdfsDatastoreOutput
}

type HdfsDatastoreArgs struct {
	// [Required] Account credentials.
	Credentials pulumi.Input `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType pulumi.StringInput `pulumi:"datastoreType"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate pulumi.StringPtrInput `pulumi:"hdfsServerCertificate"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress pulumi.StringInput `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastoreArgs
func (val *HdfsDatastoreArgs) Defaults() *HdfsDatastoreArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		tmp.Protocol = pulumi.StringPtr("http")
	}
	return &tmp
}
func (HdfsDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastore)(nil)).Elem()
}

func (i HdfsDatastoreArgs) ToHdfsDatastoreOutput() HdfsDatastoreOutput {
	return i.ToHdfsDatastoreOutputWithContext(context.Background())
}

func (i HdfsDatastoreArgs) ToHdfsDatastoreOutputWithContext(ctx context.Context) HdfsDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HdfsDatastoreOutput)
}

type HdfsDatastoreOutput struct{ *pulumi.OutputState }

func (HdfsDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastore)(nil)).Elem()
}

func (o HdfsDatastoreOutput) ToHdfsDatastoreOutput() HdfsDatastoreOutput {
	return o
}

func (o HdfsDatastoreOutput) ToHdfsDatastoreOutputWithContext(ctx context.Context) HdfsDatastoreOutput {
	return o
}

// [Required] Account credentials.
func (o HdfsDatastoreOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsDatastore) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'Hdfs'.
func (o HdfsDatastoreOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastore) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o HdfsDatastoreOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
func (o HdfsDatastoreOutput) HdfsServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.HdfsServerCertificate }).(pulumi.StringPtrOutput)
}

// [Required] IP Address or DNS HostName.
func (o HdfsDatastoreOutput) NameNodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastore) string { return v.NameNodeAddress }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o HdfsDatastoreOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastore) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account (Https/Http).
func (o HdfsDatastoreOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastore) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o HdfsDatastoreOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastore) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type HdfsDatastoreResponse struct {
	// [Required] Account credentials.
	Credentials interface{} `pulumi:"credentials"`
	// Enum to determine the datastore contents type.
	// Expected value is 'Hdfs'.
	DatastoreType string `pulumi:"datastoreType"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
	HdfsServerCertificate *string `pulumi:"hdfsServerCertificate"`
	// Readonly property to indicate if datastore is the workspace default datastore
	IsDefault bool `pulumi:"isDefault"`
	// [Required] IP Address or DNS HostName.
	NameNodeAddress string `pulumi:"nameNodeAddress"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Protocol used to communicate with the storage account (Https/Http).
	Protocol *string `pulumi:"protocol"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for HdfsDatastoreResponse
func (val *HdfsDatastoreResponse) Defaults() *HdfsDatastoreResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Protocol == nil {
		protocol_ := "http"
		tmp.Protocol = &protocol_
	}
	return &tmp
}

type HdfsDatastoreResponseOutput struct{ *pulumi.OutputState }

func (HdfsDatastoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HdfsDatastoreResponse)(nil)).Elem()
}

func (o HdfsDatastoreResponseOutput) ToHdfsDatastoreResponseOutput() HdfsDatastoreResponseOutput {
	return o
}

func (o HdfsDatastoreResponseOutput) ToHdfsDatastoreResponseOutputWithContext(ctx context.Context) HdfsDatastoreResponseOutput {
	return o
}

// [Required] Account credentials.
func (o HdfsDatastoreResponseOutput) Credentials() pulumi.AnyOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) interface{} { return v.Credentials }).(pulumi.AnyOutput)
}

// Enum to determine the datastore contents type.
// Expected value is 'Hdfs'.
func (o HdfsDatastoreResponseOutput) DatastoreType() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) string { return v.DatastoreType }).(pulumi.StringOutput)
}

// The asset description text.
func (o HdfsDatastoreResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The TLS cert of the HDFS server. Needs to be a base64 encoded string. Required if "Https" protocol is selected.
func (o HdfsDatastoreResponseOutput) HdfsServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.HdfsServerCertificate }).(pulumi.StringPtrOutput)
}

// Readonly property to indicate if datastore is the workspace default datastore
func (o HdfsDatastoreResponseOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// [Required] IP Address or DNS HostName.
func (o HdfsDatastoreResponseOutput) NameNodeAddress() pulumi.StringOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) string { return v.NameNodeAddress }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o HdfsDatastoreResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Protocol used to communicate with the storage account (Https/Http).
func (o HdfsDatastoreResponseOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o HdfsDatastoreResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v HdfsDatastoreResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReference struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// IdAssetReferenceInput is an input type that accepts IdAssetReferenceArgs and IdAssetReferenceOutput values.
// You can construct a concrete instance of `IdAssetReferenceInput` via:
//
//	IdAssetReferenceArgs{...}
type IdAssetReferenceInput interface {
	pulumi.Input

	ToIdAssetReferenceOutput() IdAssetReferenceOutput
	ToIdAssetReferenceOutputWithContext(context.Context) IdAssetReferenceOutput
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceArgs struct {
	// [Required] ARM resource ID of the asset.
	AssetId pulumi.StringInput `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (IdAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return i.ToIdAssetReferenceOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput)
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i IdAssetReferenceArgs) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferenceOutput).ToIdAssetReferencePtrOutputWithContext(ctx)
}

// IdAssetReferencePtrInput is an input type that accepts IdAssetReferenceArgs, IdAssetReferencePtr and IdAssetReferencePtrOutput values.
// You can construct a concrete instance of `IdAssetReferencePtrInput` via:
//
//	        IdAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type IdAssetReferencePtrInput interface {
	pulumi.Input

	ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput
	ToIdAssetReferencePtrOutputWithContext(context.Context) IdAssetReferencePtrOutput
}

type idAssetReferencePtrType IdAssetReferenceArgs

func IdAssetReferencePtr(v *IdAssetReferenceArgs) IdAssetReferencePtrInput {
	return (*idAssetReferencePtrType)(v)
}

func (*idAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return i.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (i *idAssetReferencePtrType) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdAssetReferencePtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutput() IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferenceOutputWithContext(ctx context.Context) IdAssetReferenceOutput {
	return o
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o.ToIdAssetReferencePtrOutputWithContext(context.Background())
}

func (o IdAssetReferenceOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdAssetReference) *IdAssetReference {
		return &v
	}).(IdAssetReferencePtrOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReference)(nil)).Elem()
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutput() IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) ToIdAssetReferencePtrOutputWithContext(ctx context.Context) IdAssetReferencePtrOutput {
	return o
}

func (o IdAssetReferencePtrOutput) Elem() IdAssetReferenceOutput {
	return o.ApplyT(func(v *IdAssetReference) IdAssetReference {
		if v != nil {
			return *v
		}
		var ret IdAssetReference
		return ret
	}).(IdAssetReferenceOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferencePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponse struct {
	// [Required] ARM resource ID of the asset.
	AssetId string `pulumi:"assetId"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'Id'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its ARM resource ID.
type IdAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutput() IdAssetReferenceResponseOutput {
	return o
}

func (o IdAssetReferenceResponseOutput) ToIdAssetReferenceResponseOutputWithContext(ctx context.Context) IdAssetReferenceResponseOutput {
	return o
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponseOutput) AssetId() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.AssetId }).(pulumi.StringOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v IdAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type IdAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (IdAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdAssetReferenceResponse)(nil)).Elem()
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutput() IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) ToIdAssetReferenceResponsePtrOutputWithContext(ctx context.Context) IdAssetReferenceResponsePtrOutput {
	return o
}

func (o IdAssetReferenceResponsePtrOutput) Elem() IdAssetReferenceResponseOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) IdAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret IdAssetReferenceResponse
		return ret
	}).(IdAssetReferenceResponseOutput)
}

// [Required] ARM resource ID of the asset.
func (o IdAssetReferenceResponsePtrOutput) AssetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.AssetId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'Id'.
func (o IdAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassification struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettings `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassification
func (val *ImageClassification) Defaults() *ImageClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// ImageClassificationInput is an input type that accepts ImageClassificationArgs and ImageClassificationOutput values.
// You can construct a concrete instance of `ImageClassificationInput` via:
//
//	ImageClassificationArgs{...}
type ImageClassificationInput interface {
	pulumi.Input

	ToImageClassificationOutput() ImageClassificationOutput
	ToImageClassificationOutputWithContext(context.Context) ImageClassificationOutput
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationArgs struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsInput `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassificationArgs
func (val *ImageClassificationArgs) Defaults() *ImageClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}
	return &tmp
}
func (ImageClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (i ImageClassificationArgs) ToImageClassificationOutput() ImageClassificationOutput {
	return i.ToImageClassificationOutputWithContext(context.Background())
}

func (i ImageClassificationArgs) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationOutput struct{ *pulumi.OutputState }

func (ImageClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassification)(nil)).Elem()
}

func (o ImageClassificationOutput) ToImageClassificationOutput() ImageClassificationOutput {
	return o
}

func (o ImageClassificationOutput) ToImageClassificationOutputWithContext(ctx context.Context) ImageClassificationOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageClassificationOutput) DataSettings() ImageVerticalDataSettingsOutput {
	return o.ApplyT(func(v ImageClassification) ImageVerticalDataSettings { return v.DataSettings }).(ImageVerticalDataSettingsOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassification) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassification) []ImageModelDistributionSettingsClassification { return v.SearchSpace }).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassification) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabel struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettings `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassification `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassification `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabel
func (val *ImageClassificationMultilabel) Defaults() *ImageClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// ImageClassificationMultilabelInput is an input type that accepts ImageClassificationMultilabelArgs and ImageClassificationMultilabelOutput values.
// You can construct a concrete instance of `ImageClassificationMultilabelInput` via:
//
//	ImageClassificationMultilabelArgs{...}
type ImageClassificationMultilabelInput interface {
	pulumi.Input

	ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput
	ToImageClassificationMultilabelOutputWithContext(context.Context) ImageClassificationMultilabelOutput
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelArgs struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsInput `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsClassificationPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsClassificationArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelArgs
func (val *ImageClassificationMultilabelArgs) Defaults() *ImageClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("IOU")
	}
	return &tmp
}
func (ImageClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return i.ToImageClassificationMultilabelOutputWithContext(context.Background())
}

func (i ImageClassificationMultilabelArgs) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageClassificationMultilabelOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabel)(nil)).Elem()
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutput() ImageClassificationMultilabelOutput {
	return o
}

func (o ImageClassificationMultilabelOutput) ToImageClassificationMultilabelOutputWithContext(ctx context.Context) ImageClassificationMultilabelOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageClassificationMultilabelOutput) DataSettings() ImageVerticalDataSettingsOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) ImageVerticalDataSettings { return v.DataSettings }).(ImageVerticalDataSettingsOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelOutput) ModelSettings() ImageModelSettingsClassificationPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageModelSettingsClassification { return v.ModelSettings }).(ImageModelSettingsClassificationPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelOutput) SearchSpace() ImageModelDistributionSettingsClassificationArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) []ImageModelDistributionSettingsClassification {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponse struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassificationMultilabelResponse
func (val *ImageClassificationMultilabelResponse) Defaults() *ImageClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "IOU"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// Image Classification Multilabel. Multi-label image classification is used when an image could have one or more labels
// from a set of labels - e.g. an image could be labeled with both 'cat' and 'dog'.
type ImageClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationMultilabelResponse)(nil)).Elem()
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutput() ImageClassificationMultilabelResponseOutput {
	return o
}

func (o ImageClassificationMultilabelResponseOutput) ToImageClassificationMultilabelResponseOutputWithContext(ctx context.Context) ImageClassificationMultilabelResponseOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageClassificationMultilabelResponseOutput) DataSettings() ImageVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) ImageVerticalDataSettingsResponse { return v.DataSettings }).(ImageVerticalDataSettingsResponseOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationMultilabelResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationMultilabelResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageModelSettingsClassificationResponse {
		return v.ModelSettings
	}).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationMultilabelResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationMultilabelResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassificationMultilabel'.
func (o ImageClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponse struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsClassificationResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsClassificationResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageClassification'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageClassificationResponse
func (val *ImageClassificationResponse) Defaults() *ImageClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// Image Classification. Multi-class image classification is used when an image is classified with only a single label
// from a set of classes - e.g. each image is classified as either an image of a 'cat' or a 'dog' or a 'duck'.
type ImageClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageClassificationResponse)(nil)).Elem()
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutput() ImageClassificationResponseOutput {
	return o
}

func (o ImageClassificationResponseOutput) ToImageClassificationResponseOutputWithContext(ctx context.Context) ImageClassificationResponseOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageClassificationResponseOutput) DataSettings() ImageVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) ImageVerticalDataSettingsResponse { return v.DataSettings }).(ImageVerticalDataSettingsResponseOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageClassificationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageClassificationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageClassificationResponseOutput) ModelSettings() ImageModelSettingsClassificationResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageModelSettingsClassificationResponse { return v.ModelSettings }).(ImageModelSettingsClassificationResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageClassificationResponseOutput) SearchSpace() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o.ApplyT(func(v ImageClassificationResponse) []ImageModelDistributionSettingsClassificationResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsClassificationResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageClassificationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageClassificationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageClassification'.
func (o ImageClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentation struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettings `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentation
func (val *ImageInstanceSegmentation) Defaults() *ImageInstanceSegmentation {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// ImageInstanceSegmentationInput is an input type that accepts ImageInstanceSegmentationArgs and ImageInstanceSegmentationOutput values.
// You can construct a concrete instance of `ImageInstanceSegmentationInput` via:
//
//	ImageInstanceSegmentationArgs{...}
type ImageInstanceSegmentationInput interface {
	pulumi.Input

	ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput
	ToImageInstanceSegmentationOutputWithContext(context.Context) ImageInstanceSegmentationOutput
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationArgs struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsInput `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationArgs
func (val *ImageInstanceSegmentationArgs) Defaults() *ImageInstanceSegmentationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}
	return &tmp
}
func (ImageInstanceSegmentationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return i.ToImageInstanceSegmentationOutputWithContext(context.Background())
}

func (i ImageInstanceSegmentationArgs) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageInstanceSegmentationOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentation)(nil)).Elem()
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutput() ImageInstanceSegmentationOutput {
	return o
}

func (o ImageInstanceSegmentationOutput) ToImageInstanceSegmentationOutputWithContext(ctx context.Context) ImageInstanceSegmentationOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageInstanceSegmentationOutput) DataSettings() ImageVerticalDataSettingsOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) ImageVerticalDataSettings { return v.DataSettings }).(ImageVerticalDataSettingsOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) []ImageModelDistributionSettingsObjectDetection {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentation) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponse struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageInstanceSegmentation'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageInstanceSegmentationResponse
func (val *ImageInstanceSegmentationResponse) Defaults() *ImageInstanceSegmentationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// Image Instance Segmentation. Instance segmentation is used to identify objects in an image at the pixel level,
// drawing a polygon around each object in the image.
type ImageInstanceSegmentationResponseOutput struct{ *pulumi.OutputState }

func (ImageInstanceSegmentationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageInstanceSegmentationResponse)(nil)).Elem()
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutput() ImageInstanceSegmentationResponseOutput {
	return o
}

func (o ImageInstanceSegmentationResponseOutput) ToImageInstanceSegmentationResponseOutputWithContext(ctx context.Context) ImageInstanceSegmentationResponseOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageInstanceSegmentationResponseOutput) DataSettings() ImageVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) ImageVerticalDataSettingsResponse { return v.DataSettings }).(ImageVerticalDataSettingsResponseOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageInstanceSegmentationResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageInstanceSegmentationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageInstanceSegmentationResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageInstanceSegmentationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageInstanceSegmentationResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageInstanceSegmentationResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageInstanceSegmentation'.
func (o ImageInstanceSegmentationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageInstanceSegmentationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettings struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettings
func (val *ImageLimitSettings) Defaults() *ImageLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	return &tmp
}

// ImageLimitSettingsInput is an input type that accepts ImageLimitSettingsArgs and ImageLimitSettingsOutput values.
// You can construct a concrete instance of `ImageLimitSettingsInput` via:
//
//	ImageLimitSettingsArgs{...}
type ImageLimitSettingsInput interface {
	pulumi.Input

	ToImageLimitSettingsOutput() ImageLimitSettingsOutput
	ToImageLimitSettingsOutputWithContext(context.Context) ImageLimitSettingsOutput
}

// Limit settings for the AutoML job.
type ImageLimitSettingsArgs struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsArgs
func (val *ImageLimitSettingsArgs) Defaults() *ImageLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	return &tmp
}
func (ImageLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return i.ToImageLimitSettingsOutputWithContext(context.Background())
}

func (i ImageLimitSettingsArgs) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageLimitSettingsOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettings)(nil)).Elem()
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutput() ImageLimitSettingsOutput {
	return o
}

func (o ImageLimitSettingsOutput) ToImageLimitSettingsOutputWithContext(ctx context.Context) ImageLimitSettingsOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponse struct {
	// Maximum number of concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ImageLimitSettingsResponse
func (val *ImageLimitSettingsResponse) Defaults() *ImageLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	return &tmp
}

// Limit settings for the AutoML job.
type ImageLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageLimitSettingsResponse)(nil)).Elem()
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutput() ImageLimitSettingsResponseOutput {
	return o
}

func (o ImageLimitSettingsResponseOutput) ToImageLimitSettingsResponseOutputWithContext(ctx context.Context) ImageLimitSettingsResponseOutput {
	return o
}

// Maximum number of concurrent AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of AutoML iterations.
func (o ImageLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o ImageLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsClassification struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *string `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// ImageModelDistributionSettingsClassificationInput is an input type that accepts ImageModelDistributionSettingsClassificationArgs and ImageModelDistributionSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationInput` via:
//
//	ImageModelDistributionSettingsClassificationArgs{...}
type ImageModelDistributionSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput
	ToImageModelDistributionSettingsClassificationOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsClassificationArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio pulumi.StringPtrInput `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.StringPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.StringPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.StringPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.StringPtrInput `pulumi:"weightedLoss"`
}

func (ImageModelDistributionSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return i.ToImageModelDistributionSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArgs) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationOutput)
}

// ImageModelDistributionSettingsClassificationArrayInput is an input type that accepts ImageModelDistributionSettingsClassificationArray and ImageModelDistributionSettingsClassificationArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsClassificationArrayInput` via:
//
//	ImageModelDistributionSettingsClassificationArray{ ImageModelDistributionSettingsClassificationArgs{...} }
type ImageModelDistributionSettingsClassificationArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput
	ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Context) ImageModelDistributionSettingsClassificationArrayOutput
}

type ImageModelDistributionSettingsClassificationArray []ImageModelDistributionSettingsClassificationInput

func (ImageModelDistributionSettingsClassificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return i.ToImageModelDistributionSettingsClassificationArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsClassificationArray) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsClassificationArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutput() ImageModelDistributionSettingsClassificationOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationOutput) ToImageModelDistributionSettingsClassificationOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassification) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassification)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutput() ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) ToImageModelDistributionSettingsClassificationArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassification {
		return vs[0].([]ImageModelDistributionSettingsClassification)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsClassificationResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *string `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *string `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *string `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *string `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *string `pulumi:"weightedLoss"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutput() ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseOutput) ToImageModelDistributionSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsClassificationResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) TrainingCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.TrainingCropSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationCropSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationCropSize }).(pulumi.StringPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.ValidationResizeSize }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelDistributionSettingsClassificationResponseOutput) WeightedLoss() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsClassificationResponse) *string { return v.WeightedLoss }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsClassificationResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsClassificationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutput() ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) ToImageModelDistributionSettingsClassificationResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsClassificationResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsClassificationResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsClassificationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsClassificationResponse {
		return vs[0].([]ImageModelDistributionSettingsClassificationResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsClassificationResponseOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsObjectDetection struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *string `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// ImageModelDistributionSettingsObjectDetectionInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArgs and ImageModelDistributionSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArgs{...}
type ImageModelDistributionSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput
	ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionOutput
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsObjectDetectionArgs struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.StringPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.StringPtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.StringPtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.StringPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.StringPtrInput `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed pulumi.StringPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.StringPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.StringPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.StringPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.StringPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.StringPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.StringPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.StringPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.StringPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.StringPtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.StringPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.StringPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.StringPtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.StringPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.StringPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold pulumi.StringPtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.StringPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.StringPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.StringPtrInput `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio pulumi.StringPtrInput `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.StringPtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.StringPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.StringPtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold pulumi.StringPtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.StringPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.StringPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.StringPtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.StringPtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.StringPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.StringPtrInput `pulumi:"weightDecay"`
}

func (ImageModelDistributionSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArgs) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// ImageModelDistributionSettingsObjectDetectionArrayInput is an input type that accepts ImageModelDistributionSettingsObjectDetectionArray and ImageModelDistributionSettingsObjectDetectionArrayOutput values.
// You can construct a concrete instance of `ImageModelDistributionSettingsObjectDetectionArrayInput` via:
//
//	ImageModelDistributionSettingsObjectDetectionArray{ ImageModelDistributionSettingsObjectDetectionArgs{...} }
type ImageModelDistributionSettingsObjectDetectionArrayInput interface {
	pulumi.Input

	ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput
	ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput
}

type ImageModelDistributionSettingsObjectDetectionArray []ImageModelDistributionSettingsObjectDetectionInput

func (ImageModelDistributionSettingsObjectDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return i.ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(context.Background())
}

func (i ImageModelDistributionSettingsObjectDetectionArray) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutput() ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionOutput) ToImageModelDistributionSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EnableOnnxNormalization }).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.GradientAccumulationStep }).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TilePredictionsNmsThreshold }).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WarmupCosineLRWarmupEpochs }).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetection) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutput() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) ToImageModelDistributionSettingsObjectDetectionArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetection {
		return vs[0].([]ImageModelDistributionSettingsObjectDetection)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionOutput)
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsObjectDetectionResponse struct {
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *string `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *string `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *string `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *string `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *string `pulumi:"boxScoreThreshold"`
	// Whether to use distributer training.
	Distributed *string `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *string `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *string `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *string `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *string `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *string `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *string `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *string `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *string `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *string `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *string `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *string `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *string `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *string `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *string `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
	NmsIouThreshold *string `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *string `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *string `pulumi:"numberOfWorkers"`
	// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *string `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *string `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *string `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *string `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *string `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	// NMS: Non-maximum suppression
	TilePredictionsNmsThreshold *string `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *string `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *string `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *string `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *string `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *string `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *string `pulumi:"weightDecay"`
}

// Distribution expressions to sweep over values of model settings.
// <example>
// Some examples are:
// <code>
// ModelName = "choice('seresnext', 'resnest50')";
// LearningRate = "uniform(0.001, 0.01)";
// LayersToFreeze = "choice(0, 2)";
// </code></example>
// For more details on how to compose distribution expressions please check the documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-tune-hyperparameters
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelDistributionSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutput() ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ToImageModelDistributionSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return o
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.AmsGradient }).(pulumi.StringPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta1 }).(pulumi.StringPtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Beta2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Beta2 }).(pulumi.StringPtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxDetectionsPerImage }).(pulumi.StringPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.BoxScoreThreshold }).(pulumi.StringPtrOutput)
}

// Whether to use distributer training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Distributed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Distributed }).(pulumi.StringPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStopping }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingDelay }).(pulumi.StringPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EarlyStoppingPatience }).(pulumi.StringPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.EnableOnnxNormalization
	}).(pulumi.StringPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.EvaluationFrequency }).(pulumi.StringPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.GradientAccumulationStep
	}).(pulumi.StringPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ImageSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ImageSize }).(pulumi.StringPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LayersToFreeze }).(pulumi.StringPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRate }).(pulumi.StringPtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MaxSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MaxSize }).(pulumi.StringPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MinSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MinSize }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Momentum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Momentum }).(pulumi.StringPtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) MultiScale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.MultiScale }).(pulumi.StringPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Nesterov() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Nesterov }).(pulumi.StringPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NmsIouThreshold }).(pulumi.StringPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfEpochs }).(pulumi.StringPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.NumberOfWorkers }).(pulumi.StringPtrOutput)
}

// Type of optimizer. Must be either 'sgd', 'adam', or 'adamw'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.RandomSeed }).(pulumi.StringPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) SplitRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.SplitRatio }).(pulumi.StringPtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRGamma }).(pulumi.StringPtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.StepLRStepSize }).(pulumi.StringPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TileOverlapRatio }).(pulumi.StringPtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
// NMS: Non-maximum suppression
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.TilePredictionsNmsThreshold
	}).(pulumi.StringPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.TrainingBatchSize }).(pulumi.StringPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationBatchSize }).(pulumi.StringPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationIouThreshold }).(pulumi.StringPtrOutput)
}

// Metric computation method to use for validation metrics. Must be 'none', 'coco', 'voc', or 'coco_voc'.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WarmupCosineLRCycles }).(pulumi.StringPtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string {
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.StringPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelDistributionSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelDistributionSettingsObjectDetectionResponse) *string { return v.WeightDecay }).(pulumi.StringPtrOutput)
}

type ImageModelDistributionSettingsObjectDetectionResponseArrayOutput struct{ *pulumi.OutputState }

func (ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageModelDistributionSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutput() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) ToImageModelDistributionSettingsObjectDetectionResponseArrayOutputWithContext(ctx context.Context) ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o
}

func (o ImageModelDistributionSettingsObjectDetectionResponseArrayOutput) Index(i pulumi.IntInput) ImageModelDistributionSettingsObjectDetectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageModelDistributionSettingsObjectDetectionResponse {
		return vs[0].([]ImageModelDistributionSettingsObjectDetectionResponse)[vs[1].(int)]
	}).(ImageModelDistributionSettingsObjectDetectionResponseOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassification struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId *string `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename *string `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *float64 `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassification
func (val *ImageModelSettingsClassification) Defaults() *ImageModelSettingsClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// ImageModelSettingsClassificationInput is an input type that accepts ImageModelSettingsClassificationArgs and ImageModelSettingsClassificationOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationInput` via:
//
//	ImageModelSettingsClassificationArgs{...}
type ImageModelSettingsClassificationInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput
	ToImageModelSettingsClassificationOutputWithContext(context.Context) ImageModelSettingsClassificationOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId pulumi.StringPtrInput `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename pulumi.StringPtrInput `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio pulumi.Float64PtrInput `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize pulumi.IntPtrInput `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize pulumi.IntPtrInput `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize pulumi.IntPtrInput `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss pulumi.IntPtrInput `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationArgs
func (val *ImageModelSettingsClassificationArgs) Defaults() *ImageModelSettingsClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return i.ToImageModelSettingsClassificationOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput)
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsClassificationArgs) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationOutput).ToImageModelSettingsClassificationPtrOutputWithContext(ctx)
}

// ImageModelSettingsClassificationPtrInput is an input type that accepts ImageModelSettingsClassificationArgs, ImageModelSettingsClassificationPtr and ImageModelSettingsClassificationPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsClassificationPtrInput` via:
//
//	        ImageModelSettingsClassificationArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsClassificationPtrInput interface {
	pulumi.Input

	ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput
	ToImageModelSettingsClassificationPtrOutputWithContext(context.Context) ImageModelSettingsClassificationPtrOutput
}

type imageModelSettingsClassificationPtrType ImageModelSettingsClassificationArgs

func ImageModelSettingsClassificationPtr(v *ImageModelSettingsClassificationArgs) ImageModelSettingsClassificationPtrInput {
	return (*imageModelSettingsClassificationPtrType)(v)
}

func (*imageModelSettingsClassificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return i.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsClassificationPtrType) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsClassificationPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutput() ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationOutputWithContext(ctx context.Context) ImageModelSettingsClassificationOutput {
	return o
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o.ToImageModelSettingsClassificationPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsClassificationOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsClassification) *ImageModelSettingsClassification {
		return &v
	}).(ImageModelSettingsClassificationPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsClassificationOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.CheckpointDatasetId }).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsClassificationOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.CheckpointFilename }).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.SplitRatio }).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassification) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassification)(nil)).Elem()
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutput() ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) ToImageModelSettingsClassificationPtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationPtrOutput {
	return o
}

func (o ImageModelSettingsClassificationPtrOutput) Elem() ImageModelSettingsClassificationOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) ImageModelSettingsClassification {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassification
		return ret
	}).(ImageModelSettingsClassificationOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointDatasetId
	}).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointFilename
	}).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.SplitRatio
	}).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationPtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassification) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId *string `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename *string `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *float64 `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
	TrainingCropSize *int `pulumi:"trainingCropSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
	ValidationCropSize *int `pulumi:"validationCropSize"`
	// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
	ValidationResizeSize *int `pulumi:"validationResizeSize"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
	// Weighted loss. The accepted values are 0 for no weighted loss.
	// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
	WeightedLoss *int `pulumi:"weightedLoss"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsClassificationResponse
func (val *ImageModelSettingsClassificationResponse) Defaults() *ImageModelSettingsClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsClassificationResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutput() ImageModelSettingsClassificationResponseOutput {
	return o
}

func (o ImageModelSettingsClassificationResponseOutput) ToImageModelSettingsClassificationResponseOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.CheckpointDatasetId }).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.CheckpointFilename }).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.SplitRatio }).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.TrainingCropSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationCropSize }).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.ValidationResizeSize }).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponseOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsClassificationResponse) *int { return v.WeightedLoss }).(pulumi.IntPtrOutput)
}

type ImageModelSettingsClassificationResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsClassificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsClassificationResponse)(nil)).Elem()
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutput() ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) ToImageModelSettingsClassificationResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsClassificationResponsePtrOutput {
	return o
}

func (o ImageModelSettingsClassificationResponsePtrOutput) Elem() ImageModelSettingsClassificationResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) ImageModelSettingsClassificationResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsClassificationResponse
		return ret
	}).(ImageModelSettingsClassificationResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsClassificationResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsClassificationResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsClassificationResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointDatasetId
	}).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointFilename
	}).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsClassificationResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsClassificationResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsClassificationResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsClassificationResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsClassificationResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsClassificationResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsClassificationResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsClassificationResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SplitRatio
	}).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the training dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) TrainingCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingCropSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// Image crop size that is input to the neural network for the validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationCropSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationCropSize
	}).(pulumi.IntPtrOutput)
}

// Image size to which to resize before cropping for validation dataset. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) ValidationResizeSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationResizeSize
	}).(pulumi.IntPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsClassificationResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Weighted loss. The accepted values are 0 for no weighted loss.
// 1 for weighted loss with sqrt.(class_weights). 2 for weighted loss with class_weights. Must be 0 or 1 or 2.
func (o ImageModelSettingsClassificationResponsePtrOutput) WeightedLoss() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsClassificationResponse) *int {
		if v == nil {
			return nil
		}
		return v.WeightedLoss
	}).(pulumi.IntPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetection struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId *string `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename *string `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *float64 `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetection
func (val *ImageModelSettingsObjectDetection) Defaults() *ImageModelSettingsObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// ImageModelSettingsObjectDetectionInput is an input type that accepts ImageModelSettingsObjectDetectionArgs and ImageModelSettingsObjectDetectionOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionInput` via:
//
//	ImageModelSettingsObjectDetectionArgs{...}
type ImageModelSettingsObjectDetectionInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput
	ToImageModelSettingsObjectDetectionOutputWithContext(context.Context) ImageModelSettingsObjectDetectionOutput
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionArgs struct {
	// Settings for advanced scenarios.
	AdvancedSettings pulumi.StringPtrInput `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient pulumi.BoolPtrInput `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations pulumi.StringPtrInput `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 pulumi.Float64PtrInput `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 pulumi.Float64PtrInput `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage pulumi.IntPtrInput `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold pulumi.Float64PtrInput `pulumi:"boxScoreThreshold"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId pulumi.StringPtrInput `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename pulumi.StringPtrInput `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency pulumi.IntPtrInput `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId pulumi.StringPtrInput `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping pulumi.BoolPtrInput `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay pulumi.IntPtrInput `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience pulumi.IntPtrInput `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization pulumi.BoolPtrInput `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency pulumi.IntPtrInput `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep pulumi.IntPtrInput `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize pulumi.IntPtrInput `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze pulumi.IntPtrInput `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate pulumi.Float64PtrInput `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler pulumi.StringPtrInput `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize pulumi.IntPtrInput `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize pulumi.IntPtrInput `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName pulumi.StringPtrInput `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize pulumi.StringPtrInput `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum pulumi.Float64PtrInput `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale pulumi.BoolPtrInput `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov pulumi.BoolPtrInput `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold pulumi.Float64PtrInput `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs pulumi.IntPtrInput `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers pulumi.IntPtrInput `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer pulumi.StringPtrInput `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed pulumi.IntPtrInput `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio pulumi.Float64PtrInput `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma pulumi.Float64PtrInput `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize pulumi.IntPtrInput `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize pulumi.StringPtrInput `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio pulumi.Float64PtrInput `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold pulumi.Float64PtrInput `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize pulumi.IntPtrInput `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize pulumi.IntPtrInput `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold pulumi.Float64PtrInput `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType pulumi.StringPtrInput `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles pulumi.Float64PtrInput `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs pulumi.IntPtrInput `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay pulumi.Float64PtrInput `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionArgs
func (val *ImageModelSettingsObjectDetectionArgs) Defaults() *ImageModelSettingsObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		tmp.LearningRateScheduler = pulumi.StringPtr("None")
	}
	if tmp.ModelSize == nil {
		tmp.ModelSize = pulumi.StringPtr("None")
	}
	if tmp.Optimizer == nil {
		tmp.Optimizer = pulumi.StringPtr("None")
	}
	if tmp.ValidationMetricType == nil {
		tmp.ValidationMetricType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (ImageModelSettingsObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return i.ToImageModelSettingsObjectDetectionOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput)
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i ImageModelSettingsObjectDetectionArgs) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionOutput).ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx)
}

// ImageModelSettingsObjectDetectionPtrInput is an input type that accepts ImageModelSettingsObjectDetectionArgs, ImageModelSettingsObjectDetectionPtr and ImageModelSettingsObjectDetectionPtrOutput values.
// You can construct a concrete instance of `ImageModelSettingsObjectDetectionPtrInput` via:
//
//	        ImageModelSettingsObjectDetectionArgs{...}
//
//	or:
//
//	        nil
type ImageModelSettingsObjectDetectionPtrInput interface {
	pulumi.Input

	ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput
	ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Context) ImageModelSettingsObjectDetectionPtrOutput
}

type imageModelSettingsObjectDetectionPtrType ImageModelSettingsObjectDetectionArgs

func ImageModelSettingsObjectDetectionPtr(v *ImageModelSettingsObjectDetectionArgs) ImageModelSettingsObjectDetectionPtrInput {
	return (*imageModelSettingsObjectDetectionPtrType)(v)
}

func (*imageModelSettingsObjectDetectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return i.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (i *imageModelSettingsObjectDetectionPtrType) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutput() ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ToImageModelSettingsObjectDetectionPtrOutputWithContext(context.Background())
}

func (o ImageModelSettingsObjectDetectionOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageModelSettingsObjectDetection) *ImageModelSettingsObjectDetection {
		return &v
	}).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.CheckpointDatasetId }).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.CheckpointFilename }).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.SplitRatio }).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetection) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionPtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetection)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutput() ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) ToImageModelSettingsObjectDetectionPtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionPtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionPtrOutput) Elem() ImageModelSettingsObjectDetectionOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) ImageModelSettingsObjectDetection {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetection
		return ret
	}).(ImageModelSettingsObjectDetectionOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionPtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionPtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionPtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointDatasetId
	}).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointFilename
	}).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionPtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionPtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionPtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionPtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionPtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionPtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionPtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.SplitRatio
	}).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionPtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionPtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionPtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionPtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetection) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponse struct {
	// Settings for advanced scenarios.
	AdvancedSettings *string `pulumi:"advancedSettings"`
	// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
	AmsGradient *bool `pulumi:"amsGradient"`
	// Settings for using Augmentations.
	Augmentations *string `pulumi:"augmentations"`
	// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta1 *float64 `pulumi:"beta1"`
	// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
	Beta2 *float64 `pulumi:"beta2"`
	// Maximum number of detections per image, for all classes. Must be a positive integer.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	BoxDetectionsPerImage *int `pulumi:"boxDetectionsPerImage"`
	// During inference, only return proposals with a classification score greater than
	// BoxScoreThreshold. Must be a float in the range[0, 1].
	BoxScoreThreshold *float64 `pulumi:"boxScoreThreshold"`
	// FileDataset id for pretrained checkpoint(s) for incremental training.
	// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
	CheckpointDatasetId *string `pulumi:"checkpointDatasetId"`
	// The pretrained checkpoint filename in FileDataset for incremental training.
	// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
	CheckpointFilename *string `pulumi:"checkpointFilename"`
	// Frequency to store model checkpoints. Must be a positive integer.
	CheckpointFrequency *int `pulumi:"checkpointFrequency"`
	// The id of a previous run that has a pretrained checkpoint for incremental training.
	CheckpointRunId *string `pulumi:"checkpointRunId"`
	// Whether to use distributed training.
	Distributed *bool `pulumi:"distributed"`
	// Enable early stopping logic during training.
	EarlyStopping *bool `pulumi:"earlyStopping"`
	// Minimum number of epochs or validation evaluations to wait before primary metric improvement
	// is tracked for early stopping. Must be a positive integer.
	EarlyStoppingDelay *int `pulumi:"earlyStoppingDelay"`
	// Minimum number of epochs or validation evaluations with no primary metric improvement before
	// the run is stopped. Must be a positive integer.
	EarlyStoppingPatience *int `pulumi:"earlyStoppingPatience"`
	// Enable normalization when exporting ONNX model.
	EnableOnnxNormalization *bool `pulumi:"enableOnnxNormalization"`
	// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
	EvaluationFrequency *int `pulumi:"evaluationFrequency"`
	// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
	// updating the model weights while accumulating the gradients of those steps, and then using
	// the accumulated gradients to compute the weight updates. Must be a positive integer.
	GradientAccumulationStep *int `pulumi:"gradientAccumulationStep"`
	// Image size for train and validation. Must be a positive integer.
	// Note: The training run may get into CUDA OOM if the size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ImageSize *int `pulumi:"imageSize"`
	// Number of layers to freeze for the model. Must be a positive integer.
	// For instance, passing 2 as value for 'seresnext' means
	// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
	// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	LayersToFreeze *int `pulumi:"layersToFreeze"`
	// Initial learning rate. Must be a float in the range [0, 1].
	LearningRate *float64 `pulumi:"learningRate"`
	// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
	LearningRateScheduler *string `pulumi:"learningRateScheduler"`
	// Maximum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MaxSize *int `pulumi:"maxSize"`
	// Minimum size of the image to be rescaled before feeding it to the backbone.
	// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	MinSize *int `pulumi:"minSize"`
	// Name of the model to use for training.
	// For more information on the available models please visit the official documentation:
	// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
	ModelName *string `pulumi:"modelName"`
	// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
	// Note: training run may get into CUDA OOM if the model size is too big.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	ModelSize *string `pulumi:"modelSize"`
	// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
	Momentum *float64 `pulumi:"momentum"`
	// Enable multi-scale image by varying image size by +/- 50%.
	// Note: training run may get into CUDA OOM if no sufficient GPU memory.
	// Note: This settings is only supported for the 'yolov5' algorithm.
	MultiScale *bool `pulumi:"multiScale"`
	// Enable nesterov when optimizer is 'sgd'.
	Nesterov *bool `pulumi:"nesterov"`
	// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
	NmsIouThreshold *float64 `pulumi:"nmsIouThreshold"`
	// Number of training epochs. Must be a positive integer.
	NumberOfEpochs *int `pulumi:"numberOfEpochs"`
	// Number of data loader workers. Must be a non-negative integer.
	NumberOfWorkers *int `pulumi:"numberOfWorkers"`
	// Type of optimizer.
	Optimizer *string `pulumi:"optimizer"`
	// Random seed to be used when using deterministic training.
	RandomSeed *int `pulumi:"randomSeed"`
	// If validation data is not defined, this specifies the split ratio for splitting
	// train data into random train and validation subsets. Must be a float in the range [0, 1].
	SplitRatio *float64 `pulumi:"splitRatio"`
	// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
	StepLRGamma *float64 `pulumi:"stepLRGamma"`
	// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
	StepLRStepSize *int `pulumi:"stepLRStepSize"`
	// The grid size to use for tiling each image. Note: TileGridSize must not be
	// None to enable small object detection logic. A string containing two integers in mxn format.
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileGridSize *string `pulumi:"tileGridSize"`
	// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TileOverlapRatio *float64 `pulumi:"tileOverlapRatio"`
	// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
	// Used in validation/ inference. Must be float in the range [0, 1].
	// Note: This settings is not supported for the 'yolov5' algorithm.
	TilePredictionsNmsThreshold *float64 `pulumi:"tilePredictionsNmsThreshold"`
	// Training batch size. Must be a positive integer.
	TrainingBatchSize *int `pulumi:"trainingBatchSize"`
	// Validation batch size. Must be a positive integer.
	ValidationBatchSize *int `pulumi:"validationBatchSize"`
	// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
	ValidationIouThreshold *float64 `pulumi:"validationIouThreshold"`
	// Metric computation method to use for validation metrics.
	ValidationMetricType *string `pulumi:"validationMetricType"`
	// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
	WarmupCosineLRCycles *float64 `pulumi:"warmupCosineLRCycles"`
	// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
	WarmupCosineLRWarmupEpochs *int `pulumi:"warmupCosineLRWarmupEpochs"`
	// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
	WeightDecay *float64 `pulumi:"weightDecay"`
}

// Defaults sets the appropriate defaults for ImageModelSettingsObjectDetectionResponse
func (val *ImageModelSettingsObjectDetectionResponse) Defaults() *ImageModelSettingsObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.LearningRateScheduler == nil {
		learningRateScheduler_ := "None"
		tmp.LearningRateScheduler = &learningRateScheduler_
	}
	if tmp.ModelSize == nil {
		modelSize_ := "None"
		tmp.ModelSize = &modelSize_
	}
	if tmp.Optimizer == nil {
		optimizer_ := "None"
		tmp.Optimizer = &optimizer_
	}
	if tmp.ValidationMetricType == nil {
		validationMetricType_ := "None"
		tmp.ValidationMetricType = &validationMetricType_
	}
	return &tmp
}

// Settings used for training the model.
// For more information on the available settings please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
type ImageModelSettingsObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutput() ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponseOutput) ToImageModelSettingsObjectDetectionResponseOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponseOutput {
	return o
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponseOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.AdvancedSettings }).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponseOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.AmsGradient }).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponseOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Augmentations }).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta1 }).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Beta2 }).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.BoxDetectionsPerImage }).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.BoxScoreThreshold }).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.CheckpointDatasetId }).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.CheckpointFilename }).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.CheckpointFrequency }).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponseOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.CheckpointRunId }).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponseOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EarlyStopping }).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingDelay }).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EarlyStoppingPatience }).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponseOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.EnableOnnxNormalization }).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.EvaluationFrequency }).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.GradientAccumulationStep }).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ImageSize }).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.LayersToFreeze }).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.LearningRate }).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponseOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.LearningRateScheduler }).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MaxSize }).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.MinSize }).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelName }).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ModelSize }).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.Momentum }).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.MultiScale }).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponseOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *bool { return v.Nesterov }).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.NmsIouThreshold }).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfEpochs }).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.NumberOfWorkers }).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponseOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.Optimizer }).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponseOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.RandomSeed }).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.SplitRatio }).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.StepLRGamma }).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.StepLRStepSize }).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.TileGridSize }).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TileOverlapRatio }).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponseOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.TilePredictionsNmsThreshold }).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.TrainingBatchSize }).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.ValidationBatchSize }).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.ValidationIouThreshold }).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponseOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *string { return v.ValidationMetricType }).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WarmupCosineLRCycles }).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponseOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *int { return v.WarmupCosineLRWarmupEpochs }).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponseOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageModelSettingsObjectDetectionResponse) *float64 { return v.WeightDecay }).(pulumi.Float64PtrOutput)
}

type ImageModelSettingsObjectDetectionResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageModelSettingsObjectDetectionResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageModelSettingsObjectDetectionResponse)(nil)).Elem()
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutput() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ToImageModelSettingsObjectDetectionResponsePtrOutputWithContext(ctx context.Context) ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o
}

func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Elem() ImageModelSettingsObjectDetectionResponseOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) ImageModelSettingsObjectDetectionResponse {
		if v != nil {
			return *v
		}
		var ret ImageModelSettingsObjectDetectionResponse
		return ret
	}).(ImageModelSettingsObjectDetectionResponseOutput)
}

// Settings for advanced scenarios.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AdvancedSettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.AdvancedSettings
	}).(pulumi.StringPtrOutput)
}

// Enable AMSGrad when optimizer is 'adam' or 'adamw'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) AmsGradient() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.AmsGradient
	}).(pulumi.BoolPtrOutput)
}

// Settings for using Augmentations.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Augmentations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Augmentations
	}).(pulumi.StringPtrOutput)
}

// Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta1() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta1
	}).(pulumi.Float64PtrOutput)
}

// Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Beta2() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Beta2
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of detections per image, for all classes. Must be a positive integer.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxDetectionsPerImage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.BoxDetectionsPerImage
	}).(pulumi.IntPtrOutput)
}

// During inference, only return proposals with a classification score greater than
// BoxScoreThreshold. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) BoxScoreThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.BoxScoreThreshold
	}).(pulumi.Float64PtrOutput)
}

// FileDataset id for pretrained checkpoint(s) for incremental training.
// Make sure to pass CheckpointFilename along with CheckpointDatasetId.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointDatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointDatasetId
	}).(pulumi.StringPtrOutput)
}

// The pretrained checkpoint filename in FileDataset for incremental training.
// Make sure to pass CheckpointDatasetId along with CheckpointFilename.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointFilename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointFilename
	}).(pulumi.StringPtrOutput)
}

// Frequency to store model checkpoints. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.CheckpointFrequency
	}).(pulumi.IntPtrOutput)
}

// The id of a previous run that has a pretrained checkpoint for incremental training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) CheckpointRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.CheckpointRunId
	}).(pulumi.StringPtrOutput)
}

// Whether to use distributed training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Distributed
	}).(pulumi.BoolPtrOutput)
}

// Enable early stopping logic during training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStopping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStopping
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of epochs or validation evaluations to wait before primary metric improvement
// is tracked for early stopping. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingDelay
	}).(pulumi.IntPtrOutput)
}

// Minimum number of epochs or validation evaluations with no primary metric improvement before
// the run is stopped. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EarlyStoppingPatience() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EarlyStoppingPatience
	}).(pulumi.IntPtrOutput)
}

// Enable normalization when exporting ONNX model.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EnableOnnxNormalization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxNormalization
	}).(pulumi.BoolPtrOutput)
}

// Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) EvaluationFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationFrequency
	}).(pulumi.IntPtrOutput)
}

// Gradient accumulation means running a configured number of "GradAccumulationStep" steps without
// updating the model weights while accumulating the gradients of those steps, and then using
// the accumulated gradients to compute the weight updates. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) GradientAccumulationStep() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.GradientAccumulationStep
	}).(pulumi.IntPtrOutput)
}

// Image size for train and validation. Must be a positive integer.
// Note: The training run may get into CUDA OOM if the size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ImageSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ImageSize
	}).(pulumi.IntPtrOutput)
}

// Number of layers to freeze for the model. Must be a positive integer.
// For instance, passing 2 as value for 'seresnext' means
// freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please
// see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LayersToFreeze() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.LayersToFreeze
	}).(pulumi.IntPtrOutput)
}

// Initial learning rate. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.LearningRate
	}).(pulumi.Float64PtrOutput)
}

// Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) LearningRateScheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.LearningRateScheduler
	}).(pulumi.StringPtrOutput)
}

// Maximum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxSize
	}).(pulumi.IntPtrOutput)
}

// Minimum size of the image to be rescaled before feeding it to the backbone.
// Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinSize
	}).(pulumi.IntPtrOutput)
}

// Name of the model to use for training.
// For more information on the available models please visit the official documentation:
// https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelName
	}).(pulumi.StringPtrOutput)
}

// Model size. Must be 'small', 'medium', 'large', or 'xlarge'.
// Note: training run may get into CUDA OOM if the model size is too big.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ModelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ModelSize
	}).(pulumi.StringPtrOutput)
}

// Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Momentum() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.Momentum
	}).(pulumi.Float64PtrOutput)
}

// Enable multi-scale image by varying image size by +/- 50%.
// Note: training run may get into CUDA OOM if no sufficient GPU memory.
// Note: This settings is only supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) MultiScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.MultiScale
	}).(pulumi.BoolPtrOutput)
}

// Enable nesterov when optimizer is 'sgd'.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Nesterov() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *bool {
		if v == nil {
			return nil
		}
		return v.Nesterov
	}).(pulumi.BoolPtrOutput)
}

// IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NmsIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.NmsIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Number of training epochs. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfEpochs
	}).(pulumi.IntPtrOutput)
}

// Number of data loader workers. Must be a non-negative integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) NumberOfWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.NumberOfWorkers
	}).(pulumi.IntPtrOutput)
}

// Type of optimizer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) Optimizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.Optimizer
	}).(pulumi.StringPtrOutput)
}

// Random seed to be used when using deterministic training.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) RandomSeed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.RandomSeed
	}).(pulumi.IntPtrOutput)
}

// If validation data is not defined, this specifies the split ratio for splitting
// train data into random train and validation subsets. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) SplitRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.SplitRatio
	}).(pulumi.Float64PtrOutput)
}

// Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRGamma() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StepLRGamma
	}).(pulumi.Float64PtrOutput)
}

// Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) StepLRStepSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.StepLRStepSize
	}).(pulumi.IntPtrOutput)
}

// The grid size to use for tiling each image. Note: TileGridSize must not be
// None to enable small object detection logic. A string containing two integers in mxn format.
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileGridSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.TileGridSize
	}).(pulumi.StringPtrOutput)
}

// Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TileOverlapRatio() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TileOverlapRatio
	}).(pulumi.Float64PtrOutput)
}

// The IOU threshold to use to perform NMS while merging predictions from tiles and image.
// Used in validation/ inference. Must be float in the range [0, 1].
// Note: This settings is not supported for the 'yolov5' algorithm.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TilePredictionsNmsThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TilePredictionsNmsThreshold
	}).(pulumi.Float64PtrOutput)
}

// Training batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) TrainingBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.TrainingBatchSize
	}).(pulumi.IntPtrOutput)
}

// Validation batch size. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationBatchSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.ValidationBatchSize
	}).(pulumi.IntPtrOutput)
}

// IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationIouThreshold() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationIouThreshold
	}).(pulumi.Float64PtrOutput)
}

// Metric computation method to use for validation metrics.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) ValidationMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *string {
		if v == nil {
			return nil
		}
		return v.ValidationMetricType
	}).(pulumi.StringPtrOutput)
}

// Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRCycles() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRCycles
	}).(pulumi.Float64PtrOutput)
}

// Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WarmupCosineLRWarmupEpochs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *int {
		if v == nil {
			return nil
		}
		return v.WarmupCosineLRWarmupEpochs
	}).(pulumi.IntPtrOutput)
}

// Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
func (o ImageModelSettingsObjectDetectionResponsePtrOutput) WeightDecay() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageModelSettingsObjectDetectionResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.WeightDecay
	}).(pulumi.Float64PtrOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetection struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettings `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetection `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetection `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettings `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageObjectDetection
func (val *ImageObjectDetection) Defaults() *ImageObjectDetection {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// ImageObjectDetectionInput is an input type that accepts ImageObjectDetectionArgs and ImageObjectDetectionOutput values.
// You can construct a concrete instance of `ImageObjectDetectionInput` via:
//
//	ImageObjectDetectionArgs{...}
type ImageObjectDetectionInput interface {
	pulumi.Input

	ToImageObjectDetectionOutput() ImageObjectDetectionOutput
	ToImageObjectDetectionOutputWithContext(context.Context) ImageObjectDetectionOutput
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionArgs struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsInput `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings ImageModelSettingsObjectDetectionPtrInput `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace ImageModelDistributionSettingsObjectDetectionArrayInput `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings ImageSweepSettingsPtrInput `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionArgs
func (val *ImageObjectDetectionArgs) Defaults() *ImageObjectDetectionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}

	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("MeanAveragePrecision")
	}
	return &tmp
}
func (ImageObjectDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return i.ToImageObjectDetectionOutputWithContext(context.Background())
}

func (i ImageObjectDetectionArgs) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageObjectDetectionOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetection)(nil)).Elem()
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutput() ImageObjectDetectionOutput {
	return o
}

func (o ImageObjectDetectionOutput) ToImageObjectDetectionOutputWithContext(ctx context.Context) ImageObjectDetectionOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageObjectDetectionOutput) DataSettings() ImageVerticalDataSettingsOutput {
	return o.ApplyT(func(v ImageObjectDetection) ImageVerticalDataSettings { return v.DataSettings }).(ImageVerticalDataSettingsOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionOutput) LimitSettings() ImageLimitSettingsOutput {
	return o.ApplyT(func(v ImageObjectDetection) ImageLimitSettings { return v.LimitSettings }).(ImageLimitSettingsOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionOutput) ModelSettings() ImageModelSettingsObjectDetectionPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageModelSettingsObjectDetection { return v.ModelSettings }).(ImageModelSettingsObjectDetectionPtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionArrayOutput {
	return o.ApplyT(func(v ImageObjectDetection) []ImageModelDistributionSettingsObjectDetection { return v.SearchSpace }).(ImageModelDistributionSettingsObjectDetectionArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionOutput) SweepSettings() ImageSweepSettingsPtrOutput {
	return o.ApplyT(func(v ImageObjectDetection) *ImageSweepSettings { return v.SweepSettings }).(ImageSweepSettingsPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetection) string { return v.TaskType }).(pulumi.StringOutput)
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponse struct {
	// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
	DataSettings ImageVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// [Required] Limit settings for the AutoML job.
	LimitSettings ImageLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Settings used for training the model.
	ModelSettings *ImageModelSettingsObjectDetectionResponse `pulumi:"modelSettings"`
	// Primary metric to optimize for this task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// Search space for sampling different combinations of models and their hyperparameters.
	SearchSpace []ImageModelDistributionSettingsObjectDetectionResponse `pulumi:"searchSpace"`
	// Model sweeping and hyperparameter sweeping related settings.
	SweepSettings *ImageSweepSettingsResponse `pulumi:"sweepSettings"`
	// AutoMLJob Task type.
	// Expected value is 'ImageObjectDetection'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for ImageObjectDetectionResponse
func (val *ImageObjectDetectionResponse) Defaults() *ImageObjectDetectionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = *tmp.DataSettings.Defaults()

	tmp.LimitSettings = *tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	tmp.ModelSettings = tmp.ModelSettings.Defaults()

	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "MeanAveragePrecision"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// Image Object Detection. Object detection is used to identify objects in an image and locate each object with a
// bounding box e.g. locate all dogs and cats in an image and draw a bounding box around each.
type ImageObjectDetectionResponseOutput struct{ *pulumi.OutputState }

func (ImageObjectDetectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageObjectDetectionResponse)(nil)).Elem()
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutput() ImageObjectDetectionResponseOutput {
	return o
}

func (o ImageObjectDetectionResponseOutput) ToImageObjectDetectionResponseOutputWithContext(ctx context.Context) ImageObjectDetectionResponseOutput {
	return o
}

// [Required] Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
func (o ImageObjectDetectionResponseOutput) DataSettings() ImageVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) ImageVerticalDataSettingsResponse { return v.DataSettings }).(ImageVerticalDataSettingsResponseOutput)
}

// [Required] Limit settings for the AutoML job.
func (o ImageObjectDetectionResponseOutput) LimitSettings() ImageLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) ImageLimitSettingsResponse { return v.LimitSettings }).(ImageLimitSettingsResponseOutput)
}

// Log verbosity for the job.
func (o ImageObjectDetectionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Settings used for training the model.
func (o ImageObjectDetectionResponseOutput) ModelSettings() ImageModelSettingsObjectDetectionResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageModelSettingsObjectDetectionResponse {
		return v.ModelSettings
	}).(ImageModelSettingsObjectDetectionResponsePtrOutput)
}

// Primary metric to optimize for this task.
func (o ImageObjectDetectionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// Search space for sampling different combinations of models and their hyperparameters.
func (o ImageObjectDetectionResponseOutput) SearchSpace() ImageModelDistributionSettingsObjectDetectionResponseArrayOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) []ImageModelDistributionSettingsObjectDetectionResponse {
		return v.SearchSpace
	}).(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
func (o ImageObjectDetectionResponseOutput) SweepSettings() ImageSweepSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) *ImageSweepSettingsResponse { return v.SweepSettings }).(ImageSweepSettingsResponsePtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'ImageObjectDetection'.
func (o ImageObjectDetectionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v ImageObjectDetectionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Limit settings for model sweeping and hyperparameter sweeping.
type ImageSweepLimitSettings struct {
	// Maximum number of concurrent iterations for the underlying Sweep job.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of iterations for the underlying Sweep job.
	MaxTrials *int `pulumi:"maxTrials"`
}

// ImageSweepLimitSettingsInput is an input type that accepts ImageSweepLimitSettingsArgs and ImageSweepLimitSettingsOutput values.
// You can construct a concrete instance of `ImageSweepLimitSettingsInput` via:
//
//	ImageSweepLimitSettingsArgs{...}
type ImageSweepLimitSettingsInput interface {
	pulumi.Input

	ToImageSweepLimitSettingsOutput() ImageSweepLimitSettingsOutput
	ToImageSweepLimitSettingsOutputWithContext(context.Context) ImageSweepLimitSettingsOutput
}

// Limit settings for model sweeping and hyperparameter sweeping.
type ImageSweepLimitSettingsArgs struct {
	// Maximum number of concurrent iterations for the underlying Sweep job.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Maximum number of iterations for the underlying Sweep job.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
}

func (ImageSweepLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepLimitSettings)(nil)).Elem()
}

func (i ImageSweepLimitSettingsArgs) ToImageSweepLimitSettingsOutput() ImageSweepLimitSettingsOutput {
	return i.ToImageSweepLimitSettingsOutputWithContext(context.Background())
}

func (i ImageSweepLimitSettingsArgs) ToImageSweepLimitSettingsOutputWithContext(ctx context.Context) ImageSweepLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepLimitSettingsOutput)
}

func (i ImageSweepLimitSettingsArgs) ToImageSweepLimitSettingsPtrOutput() ImageSweepLimitSettingsPtrOutput {
	return i.ToImageSweepLimitSettingsPtrOutputWithContext(context.Background())
}

func (i ImageSweepLimitSettingsArgs) ToImageSweepLimitSettingsPtrOutputWithContext(ctx context.Context) ImageSweepLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepLimitSettingsOutput).ToImageSweepLimitSettingsPtrOutputWithContext(ctx)
}

// ImageSweepLimitSettingsPtrInput is an input type that accepts ImageSweepLimitSettingsArgs, ImageSweepLimitSettingsPtr and ImageSweepLimitSettingsPtrOutput values.
// You can construct a concrete instance of `ImageSweepLimitSettingsPtrInput` via:
//
//	        ImageSweepLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type ImageSweepLimitSettingsPtrInput interface {
	pulumi.Input

	ToImageSweepLimitSettingsPtrOutput() ImageSweepLimitSettingsPtrOutput
	ToImageSweepLimitSettingsPtrOutputWithContext(context.Context) ImageSweepLimitSettingsPtrOutput
}

type imageSweepLimitSettingsPtrType ImageSweepLimitSettingsArgs

func ImageSweepLimitSettingsPtr(v *ImageSweepLimitSettingsArgs) ImageSweepLimitSettingsPtrInput {
	return (*imageSweepLimitSettingsPtrType)(v)
}

func (*imageSweepLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepLimitSettings)(nil)).Elem()
}

func (i *imageSweepLimitSettingsPtrType) ToImageSweepLimitSettingsPtrOutput() ImageSweepLimitSettingsPtrOutput {
	return i.ToImageSweepLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *imageSweepLimitSettingsPtrType) ToImageSweepLimitSettingsPtrOutputWithContext(ctx context.Context) ImageSweepLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepLimitSettingsPtrOutput)
}

// Limit settings for model sweeping and hyperparameter sweeping.
type ImageSweepLimitSettingsOutput struct{ *pulumi.OutputState }

func (ImageSweepLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepLimitSettings)(nil)).Elem()
}

func (o ImageSweepLimitSettingsOutput) ToImageSweepLimitSettingsOutput() ImageSweepLimitSettingsOutput {
	return o
}

func (o ImageSweepLimitSettingsOutput) ToImageSweepLimitSettingsOutputWithContext(ctx context.Context) ImageSweepLimitSettingsOutput {
	return o
}

func (o ImageSweepLimitSettingsOutput) ToImageSweepLimitSettingsPtrOutput() ImageSweepLimitSettingsPtrOutput {
	return o.ToImageSweepLimitSettingsPtrOutputWithContext(context.Background())
}

func (o ImageSweepLimitSettingsOutput) ToImageSweepLimitSettingsPtrOutputWithContext(ctx context.Context) ImageSweepLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageSweepLimitSettings) *ImageSweepLimitSettings {
		return &v
	}).(ImageSweepLimitSettingsPtrOutput)
}

// Maximum number of concurrent iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSweepLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSweepLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

type ImageSweepLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (ImageSweepLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepLimitSettings)(nil)).Elem()
}

func (o ImageSweepLimitSettingsPtrOutput) ToImageSweepLimitSettingsPtrOutput() ImageSweepLimitSettingsPtrOutput {
	return o
}

func (o ImageSweepLimitSettingsPtrOutput) ToImageSweepLimitSettingsPtrOutputWithContext(ctx context.Context) ImageSweepLimitSettingsPtrOutput {
	return o
}

func (o ImageSweepLimitSettingsPtrOutput) Elem() ImageSweepLimitSettingsOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettings) ImageSweepLimitSettings {
		if v != nil {
			return *v
		}
		var ret ImageSweepLimitSettings
		return ret
	}).(ImageSweepLimitSettingsOutput)
}

// Maximum number of concurrent iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Maximum number of iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// Limit settings for model sweeping and hyperparameter sweeping.
type ImageSweepLimitSettingsResponse struct {
	// Maximum number of concurrent iterations for the underlying Sweep job.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Maximum number of iterations for the underlying Sweep job.
	MaxTrials *int `pulumi:"maxTrials"`
}

// Limit settings for model sweeping and hyperparameter sweeping.
type ImageSweepLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageSweepLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepLimitSettingsResponse)(nil)).Elem()
}

func (o ImageSweepLimitSettingsResponseOutput) ToImageSweepLimitSettingsResponseOutput() ImageSweepLimitSettingsResponseOutput {
	return o
}

func (o ImageSweepLimitSettingsResponseOutput) ToImageSweepLimitSettingsResponseOutputWithContext(ctx context.Context) ImageSweepLimitSettingsResponseOutput {
	return o
}

// Maximum number of concurrent iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSweepLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Maximum number of iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSweepLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

type ImageSweepLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageSweepLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepLimitSettingsResponse)(nil)).Elem()
}

func (o ImageSweepLimitSettingsResponsePtrOutput) ToImageSweepLimitSettingsResponsePtrOutput() ImageSweepLimitSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepLimitSettingsResponsePtrOutput) ToImageSweepLimitSettingsResponsePtrOutputWithContext(ctx context.Context) ImageSweepLimitSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepLimitSettingsResponsePtrOutput) Elem() ImageSweepLimitSettingsResponseOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettingsResponse) ImageSweepLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ImageSweepLimitSettingsResponse
		return ret
	}).(ImageSweepLimitSettingsResponseOutput)
}

// Maximum number of concurrent iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Maximum number of iterations for the underlying Sweep job.
func (o ImageSweepLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSweepLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettings struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Limit settings for model sweeping and hyperparameter sweeping.
	Limits ImageSweepLimitSettings `pulumi:"limits"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// ImageSweepSettingsInput is an input type that accepts ImageSweepSettingsArgs and ImageSweepSettingsOutput values.
// You can construct a concrete instance of `ImageSweepSettingsInput` via:
//
//	ImageSweepSettingsArgs{...}
type ImageSweepSettingsInput interface {
	pulumi.Input

	ToImageSweepSettingsOutput() ImageSweepSettingsOutput
	ToImageSweepSettingsOutputWithContext(context.Context) ImageSweepSettingsOutput
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsArgs struct {
	// Type of early termination policy.
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// [Required] Limit settings for model sweeping and hyperparameter sweeping.
	Limits ImageSweepLimitSettingsInput `pulumi:"limits"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm pulumi.StringInput `pulumi:"samplingAlgorithm"`
}

func (ImageSweepSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return i.ToImageSweepSettingsOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput)
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i ImageSweepSettingsArgs) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsOutput).ToImageSweepSettingsPtrOutputWithContext(ctx)
}

// ImageSweepSettingsPtrInput is an input type that accepts ImageSweepSettingsArgs, ImageSweepSettingsPtr and ImageSweepSettingsPtrOutput values.
// You can construct a concrete instance of `ImageSweepSettingsPtrInput` via:
//
//	        ImageSweepSettingsArgs{...}
//
//	or:
//
//	        nil
type ImageSweepSettingsPtrInput interface {
	pulumi.Input

	ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput
	ToImageSweepSettingsPtrOutputWithContext(context.Context) ImageSweepSettingsPtrOutput
}

type imageSweepSettingsPtrType ImageSweepSettingsArgs

func ImageSweepSettingsPtr(v *ImageSweepSettingsArgs) ImageSweepSettingsPtrInput {
	return (*imageSweepSettingsPtrType)(v)
}

func (*imageSweepSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return i.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (i *imageSweepSettingsPtrType) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSweepSettingsPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutput() ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsOutputWithContext(ctx context.Context) ImageSweepSettingsOutput {
	return o
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o.ToImageSweepSettingsPtrOutputWithContext(context.Background())
}

func (o ImageSweepSettingsOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageSweepSettings) *ImageSweepSettings {
		return &v
	}).(ImageSweepSettingsPtrOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettings) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Limit settings for model sweeping and hyperparameter sweeping.
func (o ImageSweepSettingsOutput) Limits() ImageSweepLimitSettingsOutput {
	return o.ApplyT(func(v ImageSweepSettings) ImageSweepLimitSettings { return v.Limits }).(ImageSweepLimitSettingsOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettings) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsPtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettings)(nil)).Elem()
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutput() ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) ToImageSweepSettingsPtrOutputWithContext(ctx context.Context) ImageSweepSettingsPtrOutput {
	return o
}

func (o ImageSweepSettingsPtrOutput) Elem() ImageSweepSettingsOutput {
	return o.ApplyT(func(v *ImageSweepSettings) ImageSweepSettings {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettings
		return ret
	}).(ImageSweepSettingsOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsPtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Limit settings for model sweeping and hyperparameter sweeping.
func (o ImageSweepSettingsPtrOutput) Limits() ImageSweepLimitSettingsPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettings) *ImageSweepLimitSettings {
		if v == nil {
			return nil
		}
		return &v.Limits
	}).(ImageSweepLimitSettingsPtrOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsPtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettings) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponse struct {
	// Type of early termination policy.
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// [Required] Limit settings for model sweeping and hyperparameter sweeping.
	Limits ImageSweepLimitSettingsResponse `pulumi:"limits"`
	// [Required] Type of the hyperparameter sampling algorithms.
	SamplingAlgorithm string `pulumi:"samplingAlgorithm"`
}

// Model sweeping and hyperparameter sweeping related settings.
type ImageSweepSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutput() ImageSweepSettingsResponseOutput {
	return o
}

func (o ImageSweepSettingsResponseOutput) ToImageSweepSettingsResponseOutputWithContext(ctx context.Context) ImageSweepSettingsResponseOutput {
	return o
}

// Type of early termination policy.
func (o ImageSweepSettingsResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// [Required] Limit settings for model sweeping and hyperparameter sweeping.
func (o ImageSweepSettingsResponseOutput) Limits() ImageSweepLimitSettingsResponseOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) ImageSweepLimitSettingsResponse { return v.Limits }).(ImageSweepLimitSettingsResponseOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponseOutput) SamplingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSweepSettingsResponse) string { return v.SamplingAlgorithm }).(pulumi.StringOutput)
}

type ImageSweepSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageSweepSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSweepSettingsResponse)(nil)).Elem()
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutput() ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) ToImageSweepSettingsResponsePtrOutputWithContext(ctx context.Context) ImageSweepSettingsResponsePtrOutput {
	return o
}

func (o ImageSweepSettingsResponsePtrOutput) Elem() ImageSweepSettingsResponseOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) ImageSweepSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ImageSweepSettingsResponse
		return ret
	}).(ImageSweepSettingsResponseOutput)
}

// Type of early termination policy.
func (o ImageSweepSettingsResponsePtrOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.EarlyTermination
	}).(pulumi.AnyOutput)
}

// [Required] Limit settings for model sweeping and hyperparameter sweeping.
func (o ImageSweepSettingsResponsePtrOutput) Limits() ImageSweepLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) *ImageSweepLimitSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.Limits
	}).(ImageSweepLimitSettingsResponsePtrOutput)
}

// [Required] Type of the hyperparameter sampling algorithms.
func (o ImageSweepSettingsResponsePtrOutput) SamplingAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSweepSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SamplingAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
type ImageVerticalDataSettings struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettings `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettings `pulumi:"trainingData"`
	// Settings for the validation dataset.
	ValidationData *ImageVerticalValidationDataSettings `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for ImageVerticalDataSettings
func (val *ImageVerticalDataSettings) Defaults() *ImageVerticalDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// ImageVerticalDataSettingsInput is an input type that accepts ImageVerticalDataSettingsArgs and ImageVerticalDataSettingsOutput values.
// You can construct a concrete instance of `ImageVerticalDataSettingsInput` via:
//
//	ImageVerticalDataSettingsArgs{...}
type ImageVerticalDataSettingsInput interface {
	pulumi.Input

	ToImageVerticalDataSettingsOutput() ImageVerticalDataSettingsOutput
	ToImageVerticalDataSettingsOutputWithContext(context.Context) ImageVerticalDataSettingsOutput
}

// Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
type ImageVerticalDataSettingsArgs struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringInput `pulumi:"targetColumnName"`
	// Test data input.
	TestData TestDataSettingsPtrInput `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsInput `pulumi:"trainingData"`
	// Settings for the validation dataset.
	ValidationData ImageVerticalValidationDataSettingsPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for ImageVerticalDataSettingsArgs
func (val *ImageVerticalDataSettingsArgs) Defaults() *ImageVerticalDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ImageVerticalDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalDataSettings)(nil)).Elem()
}

func (i ImageVerticalDataSettingsArgs) ToImageVerticalDataSettingsOutput() ImageVerticalDataSettingsOutput {
	return i.ToImageVerticalDataSettingsOutputWithContext(context.Background())
}

func (i ImageVerticalDataSettingsArgs) ToImageVerticalDataSettingsOutputWithContext(ctx context.Context) ImageVerticalDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVerticalDataSettingsOutput)
}

// Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
type ImageVerticalDataSettingsOutput struct{ *pulumi.OutputState }

func (ImageVerticalDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalDataSettings)(nil)).Elem()
}

func (o ImageVerticalDataSettingsOutput) ToImageVerticalDataSettingsOutput() ImageVerticalDataSettingsOutput {
	return o
}

func (o ImageVerticalDataSettingsOutput) ToImageVerticalDataSettingsOutputWithContext(ctx context.Context) ImageVerticalDataSettingsOutput {
	return o
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageVerticalDataSettingsOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageVerticalDataSettings) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o ImageVerticalDataSettingsOutput) TestData() TestDataSettingsPtrOutput {
	return o.ApplyT(func(v ImageVerticalDataSettings) *TestDataSettings { return v.TestData }).(TestDataSettingsPtrOutput)
}

// [Required] Training data input.
func (o ImageVerticalDataSettingsOutput) TrainingData() TrainingDataSettingsOutput {
	return o.ApplyT(func(v ImageVerticalDataSettings) TrainingDataSettings { return v.TrainingData }).(TrainingDataSettingsOutput)
}

// Settings for the validation dataset.
func (o ImageVerticalDataSettingsOutput) ValidationData() ImageVerticalValidationDataSettingsPtrOutput {
	return o.ApplyT(func(v ImageVerticalDataSettings) *ImageVerticalValidationDataSettings { return v.ValidationData }).(ImageVerticalValidationDataSettingsPtrOutput)
}

// Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
type ImageVerticalDataSettingsResponse struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettingsResponse `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsResponse `pulumi:"trainingData"`
	// Settings for the validation dataset.
	ValidationData *ImageVerticalValidationDataSettingsResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for ImageVerticalDataSettingsResponse
func (val *ImageVerticalDataSettingsResponse) Defaults() *ImageVerticalDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Collection of registered Tabular Dataset Ids and other data settings required for training and validating models.
type ImageVerticalDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageVerticalDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalDataSettingsResponse)(nil)).Elem()
}

func (o ImageVerticalDataSettingsResponseOutput) ToImageVerticalDataSettingsResponseOutput() ImageVerticalDataSettingsResponseOutput {
	return o
}

func (o ImageVerticalDataSettingsResponseOutput) ToImageVerticalDataSettingsResponseOutputWithContext(ctx context.Context) ImageVerticalDataSettingsResponseOutput {
	return o
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o ImageVerticalDataSettingsResponseOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v ImageVerticalDataSettingsResponse) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o ImageVerticalDataSettingsResponseOutput) TestData() TestDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageVerticalDataSettingsResponse) *TestDataSettingsResponse { return v.TestData }).(TestDataSettingsResponsePtrOutput)
}

// [Required] Training data input.
func (o ImageVerticalDataSettingsResponseOutput) TrainingData() TrainingDataSettingsResponseOutput {
	return o.ApplyT(func(v ImageVerticalDataSettingsResponse) TrainingDataSettingsResponse { return v.TrainingData }).(TrainingDataSettingsResponseOutput)
}

// Settings for the validation dataset.
func (o ImageVerticalDataSettingsResponseOutput) ValidationData() ImageVerticalValidationDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v ImageVerticalDataSettingsResponse) *ImageVerticalValidationDataSettingsResponse {
		return v.ValidationData
	}).(ImageVerticalValidationDataSettingsResponsePtrOutput)
}

type ImageVerticalValidationDataSettings struct {
	// Validation data MLTable.
	Data *MLTableJobInput `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageVerticalValidationDataSettings
func (val *ImageVerticalValidationDataSettings) Defaults() *ImageVerticalValidationDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// ImageVerticalValidationDataSettingsInput is an input type that accepts ImageVerticalValidationDataSettingsArgs and ImageVerticalValidationDataSettingsOutput values.
// You can construct a concrete instance of `ImageVerticalValidationDataSettingsInput` via:
//
//	ImageVerticalValidationDataSettingsArgs{...}
type ImageVerticalValidationDataSettingsInput interface {
	pulumi.Input

	ToImageVerticalValidationDataSettingsOutput() ImageVerticalValidationDataSettingsOutput
	ToImageVerticalValidationDataSettingsOutputWithContext(context.Context) ImageVerticalValidationDataSettingsOutput
}

type ImageVerticalValidationDataSettingsArgs struct {
	// Validation data MLTable.
	Data MLTableJobInputPtrInput `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageVerticalValidationDataSettingsArgs
func (val *ImageVerticalValidationDataSettingsArgs) Defaults() *ImageVerticalValidationDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (ImageVerticalValidationDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalValidationDataSettings)(nil)).Elem()
}

func (i ImageVerticalValidationDataSettingsArgs) ToImageVerticalValidationDataSettingsOutput() ImageVerticalValidationDataSettingsOutput {
	return i.ToImageVerticalValidationDataSettingsOutputWithContext(context.Background())
}

func (i ImageVerticalValidationDataSettingsArgs) ToImageVerticalValidationDataSettingsOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVerticalValidationDataSettingsOutput)
}

func (i ImageVerticalValidationDataSettingsArgs) ToImageVerticalValidationDataSettingsPtrOutput() ImageVerticalValidationDataSettingsPtrOutput {
	return i.ToImageVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i ImageVerticalValidationDataSettingsArgs) ToImageVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVerticalValidationDataSettingsOutput).ToImageVerticalValidationDataSettingsPtrOutputWithContext(ctx)
}

// ImageVerticalValidationDataSettingsPtrInput is an input type that accepts ImageVerticalValidationDataSettingsArgs, ImageVerticalValidationDataSettingsPtr and ImageVerticalValidationDataSettingsPtrOutput values.
// You can construct a concrete instance of `ImageVerticalValidationDataSettingsPtrInput` via:
//
//	        ImageVerticalValidationDataSettingsArgs{...}
//
//	or:
//
//	        nil
type ImageVerticalValidationDataSettingsPtrInput interface {
	pulumi.Input

	ToImageVerticalValidationDataSettingsPtrOutput() ImageVerticalValidationDataSettingsPtrOutput
	ToImageVerticalValidationDataSettingsPtrOutputWithContext(context.Context) ImageVerticalValidationDataSettingsPtrOutput
}

type imageVerticalValidationDataSettingsPtrType ImageVerticalValidationDataSettingsArgs

func ImageVerticalValidationDataSettingsPtr(v *ImageVerticalValidationDataSettingsArgs) ImageVerticalValidationDataSettingsPtrInput {
	return (*imageVerticalValidationDataSettingsPtrType)(v)
}

func (*imageVerticalValidationDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVerticalValidationDataSettings)(nil)).Elem()
}

func (i *imageVerticalValidationDataSettingsPtrType) ToImageVerticalValidationDataSettingsPtrOutput() ImageVerticalValidationDataSettingsPtrOutput {
	return i.ToImageVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i *imageVerticalValidationDataSettingsPtrType) ToImageVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageVerticalValidationDataSettingsPtrOutput)
}

type ImageVerticalValidationDataSettingsOutput struct{ *pulumi.OutputState }

func (ImageVerticalValidationDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalValidationDataSettings)(nil)).Elem()
}

func (o ImageVerticalValidationDataSettingsOutput) ToImageVerticalValidationDataSettingsOutput() ImageVerticalValidationDataSettingsOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsOutput) ToImageVerticalValidationDataSettingsOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsOutput) ToImageVerticalValidationDataSettingsPtrOutput() ImageVerticalValidationDataSettingsPtrOutput {
	return o.ToImageVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (o ImageVerticalValidationDataSettingsOutput) ToImageVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageVerticalValidationDataSettings) *ImageVerticalValidationDataSettings {
		return &v
	}).(ImageVerticalValidationDataSettingsPtrOutput)
}

// Validation data MLTable.
func (o ImageVerticalValidationDataSettingsOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v ImageVerticalValidationDataSettings) *MLTableJobInput { return v.Data }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageVerticalValidationDataSettingsOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageVerticalValidationDataSettings) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type ImageVerticalValidationDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (ImageVerticalValidationDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVerticalValidationDataSettings)(nil)).Elem()
}

func (o ImageVerticalValidationDataSettingsPtrOutput) ToImageVerticalValidationDataSettingsPtrOutput() ImageVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsPtrOutput) ToImageVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsPtrOutput) Elem() ImageVerticalValidationDataSettingsOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettings) ImageVerticalValidationDataSettings {
		if v != nil {
			return *v
		}
		var ret ImageVerticalValidationDataSettings
		return ret
	}).(ImageVerticalValidationDataSettingsOutput)
}

// Validation data MLTable.
func (o ImageVerticalValidationDataSettingsPtrOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettings) *MLTableJobInput {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageVerticalValidationDataSettingsPtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

type ImageVerticalValidationDataSettingsResponse struct {
	// Validation data MLTable.
	Data *MLTableJobInputResponse `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for ImageVerticalValidationDataSettingsResponse
func (val *ImageVerticalValidationDataSettingsResponse) Defaults() *ImageVerticalValidationDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

type ImageVerticalValidationDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (ImageVerticalValidationDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o ImageVerticalValidationDataSettingsResponseOutput) ToImageVerticalValidationDataSettingsResponseOutput() ImageVerticalValidationDataSettingsResponseOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsResponseOutput) ToImageVerticalValidationDataSettingsResponseOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsResponseOutput {
	return o
}

// Validation data MLTable.
func (o ImageVerticalValidationDataSettingsResponseOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v ImageVerticalValidationDataSettingsResponse) *MLTableJobInputResponse { return v.Data }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageVerticalValidationDataSettingsResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ImageVerticalValidationDataSettingsResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type ImageVerticalValidationDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ImageVerticalValidationDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o ImageVerticalValidationDataSettingsResponsePtrOutput) ToImageVerticalValidationDataSettingsResponsePtrOutput() ImageVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsResponsePtrOutput) ToImageVerticalValidationDataSettingsResponsePtrOutputWithContext(ctx context.Context) ImageVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o ImageVerticalValidationDataSettingsResponsePtrOutput) Elem() ImageVerticalValidationDataSettingsResponseOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettingsResponse) ImageVerticalValidationDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ImageVerticalValidationDataSettingsResponse
		return ret
	}).(ImageVerticalValidationDataSettingsResponseOutput)
}

// Validation data MLTable.
func (o ImageVerticalValidationDataSettingsResponsePtrOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettingsResponse) *MLTableJobInputResponse {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o ImageVerticalValidationDataSettingsResponsePtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ImageVerticalValidationDataSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

type InferenceContainerProperties struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *Route `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *Route `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *Route `pulumi:"scoringRoute"`
}

// InferenceContainerPropertiesInput is an input type that accepts InferenceContainerPropertiesArgs and InferenceContainerPropertiesOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesInput` via:
//
//	InferenceContainerPropertiesArgs{...}
type InferenceContainerPropertiesInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput
	ToInferenceContainerPropertiesOutputWithContext(context.Context) InferenceContainerPropertiesOutput
}

type InferenceContainerPropertiesArgs struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute RoutePtrInput `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute RoutePtrInput `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute RoutePtrInput `pulumi:"scoringRoute"`
}

func (InferenceContainerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return i.ToInferenceContainerPropertiesOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput)
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i InferenceContainerPropertiesArgs) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesOutput).ToInferenceContainerPropertiesPtrOutputWithContext(ctx)
}

// InferenceContainerPropertiesPtrInput is an input type that accepts InferenceContainerPropertiesArgs, InferenceContainerPropertiesPtr and InferenceContainerPropertiesPtrOutput values.
// You can construct a concrete instance of `InferenceContainerPropertiesPtrInput` via:
//
//	        InferenceContainerPropertiesArgs{...}
//
//	or:
//
//	        nil
type InferenceContainerPropertiesPtrInput interface {
	pulumi.Input

	ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput
	ToInferenceContainerPropertiesPtrOutputWithContext(context.Context) InferenceContainerPropertiesPtrOutput
}

type inferenceContainerPropertiesPtrType InferenceContainerPropertiesArgs

func InferenceContainerPropertiesPtr(v *InferenceContainerPropertiesArgs) InferenceContainerPropertiesPtrInput {
	return (*inferenceContainerPropertiesPtrType)(v)
}

func (*inferenceContainerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return i.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (i *inferenceContainerPropertiesPtrType) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InferenceContainerPropertiesPtrOutput)
}

type InferenceContainerPropertiesOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutput() InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesOutputWithContext(ctx context.Context) InferenceContainerPropertiesOutput {
	return o
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o.ToInferenceContainerPropertiesPtrOutputWithContext(context.Background())
}

func (o InferenceContainerPropertiesOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InferenceContainerProperties) *InferenceContainerProperties {
		return &v
	}).(InferenceContainerPropertiesPtrOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.LivenessRoute }).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ReadinessRoute }).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v InferenceContainerProperties) *Route { return v.ScoringRoute }).(RoutePtrOutput)
}

type InferenceContainerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerProperties)(nil)).Elem()
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutput() InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) ToInferenceContainerPropertiesPtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesPtrOutput {
	return o
}

func (o InferenceContainerPropertiesPtrOutput) Elem() InferenceContainerPropertiesOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) InferenceContainerProperties {
		if v != nil {
			return *v
		}
		var ret InferenceContainerProperties
		return ret
	}).(InferenceContainerPropertiesOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) LivenessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RoutePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ReadinessRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RoutePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesPtrOutput) ScoringRoute() RoutePtrOutput {
	return o.ApplyT(func(v *InferenceContainerProperties) *Route {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RoutePtrOutput)
}

type InferenceContainerPropertiesResponse struct {
	// The route to check the liveness of the inference server container.
	LivenessRoute *RouteResponse `pulumi:"livenessRoute"`
	// The route to check the readiness of the inference server container.
	ReadinessRoute *RouteResponse `pulumi:"readinessRoute"`
	// The port to send the scoring requests to, within the inference server container.
	ScoringRoute *RouteResponse `pulumi:"scoringRoute"`
}

type InferenceContainerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutput() InferenceContainerPropertiesResponseOutput {
	return o
}

func (o InferenceContainerPropertiesResponseOutput) ToInferenceContainerPropertiesResponseOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponseOutput {
	return o
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.LivenessRoute }).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ReadinessRoute }).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponseOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v InferenceContainerPropertiesResponse) *RouteResponse { return v.ScoringRoute }).(RouteResponsePtrOutput)
}

type InferenceContainerPropertiesResponsePtrOutput struct{ *pulumi.OutputState }

func (InferenceContainerPropertiesResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InferenceContainerPropertiesResponse)(nil)).Elem()
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutput() InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) ToInferenceContainerPropertiesResponsePtrOutputWithContext(ctx context.Context) InferenceContainerPropertiesResponsePtrOutput {
	return o
}

func (o InferenceContainerPropertiesResponsePtrOutput) Elem() InferenceContainerPropertiesResponseOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) InferenceContainerPropertiesResponse {
		if v != nil {
			return *v
		}
		var ret InferenceContainerPropertiesResponse
		return ret
	}).(InferenceContainerPropertiesResponseOutput)
}

// The route to check the liveness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) LivenessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.LivenessRoute
	}).(RouteResponsePtrOutput)
}

// The route to check the readiness of the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ReadinessRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ReadinessRoute
	}).(RouteResponsePtrOutput)
}

// The port to send the scoring requests to, within the inference server container.
func (o InferenceContainerPropertiesResponsePtrOutput) ScoringRoute() RouteResponsePtrOutput {
	return o.ApplyT(func(v *InferenceContainerPropertiesResponse) *RouteResponse {
		if v == nil {
			return nil
		}
		return v.ScoringRoute
	}).(RouteResponsePtrOutput)
}

// Job endpoint definition
type JobService struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
}

// JobServiceInput is an input type that accepts JobServiceArgs and JobServiceOutput values.
// You can construct a concrete instance of `JobServiceInput` via:
//
//	JobServiceArgs{...}
type JobServiceInput interface {
	pulumi.Input

	ToJobServiceOutput() JobServiceOutput
	ToJobServiceOutputWithContext(context.Context) JobServiceOutput
}

// Job endpoint definition
type JobServiceArgs struct {
	// Url for endpoint.
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Endpoint type.
	JobServiceType pulumi.StringPtrInput `pulumi:"jobServiceType"`
	// Port for endpoint.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties pulumi.StringMapInput `pulumi:"properties"`
}

func (JobServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (i JobServiceArgs) ToJobServiceOutput() JobServiceOutput {
	return i.ToJobServiceOutputWithContext(context.Background())
}

func (i JobServiceArgs) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceOutput)
}

// JobServiceMapInput is an input type that accepts JobServiceMap and JobServiceMapOutput values.
// You can construct a concrete instance of `JobServiceMapInput` via:
//
//	JobServiceMap{ "key": JobServiceArgs{...} }
type JobServiceMapInput interface {
	pulumi.Input

	ToJobServiceMapOutput() JobServiceMapOutput
	ToJobServiceMapOutputWithContext(context.Context) JobServiceMapOutput
}

type JobServiceMap map[string]JobServiceInput

func (JobServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (i JobServiceMap) ToJobServiceMapOutput() JobServiceMapOutput {
	return i.ToJobServiceMapOutputWithContext(context.Background())
}

func (i JobServiceMap) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobServiceMapOutput)
}

// Job endpoint definition
type JobServiceOutput struct{ *pulumi.OutputState }

func (JobServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobService)(nil)).Elem()
}

func (o JobServiceOutput) ToJobServiceOutput() JobServiceOutput {
	return o
}

func (o JobServiceOutput) ToJobServiceOutputWithContext(ctx context.Context) JobServiceOutput {
	return o
}

// Url for endpoint.
func (o JobServiceOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Endpoint type.
func (o JobServiceOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobService) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Port for endpoint.
func (o JobServiceOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobService) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobService) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

type JobServiceMapOutput struct{ *pulumi.OutputState }

func (JobServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobService)(nil)).Elem()
}

func (o JobServiceMapOutput) ToJobServiceMapOutput() JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) ToJobServiceMapOutputWithContext(ctx context.Context) JobServiceMapOutput {
	return o
}

func (o JobServiceMapOutput) MapIndex(k pulumi.StringInput) JobServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobService {
		return vs[0].(map[string]JobService)[vs[1].(string)]
	}).(JobServiceOutput)
}

// Job endpoint definition
type JobServiceResponse struct {
	// Url for endpoint.
	Endpoint *string `pulumi:"endpoint"`
	// Any error in the service.
	ErrorMessage string `pulumi:"errorMessage"`
	// Endpoint type.
	JobServiceType *string `pulumi:"jobServiceType"`
	// Port for endpoint.
	Port *int `pulumi:"port"`
	// Additional properties to set on the endpoint.
	Properties map[string]string `pulumi:"properties"`
	// Status of endpoint.
	Status string `pulumi:"status"`
}

// Job endpoint definition
type JobServiceResponseOutput struct{ *pulumi.OutputState }

func (JobServiceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutput() JobServiceResponseOutput {
	return o
}

func (o JobServiceResponseOutput) ToJobServiceResponseOutputWithContext(ctx context.Context) JobServiceResponseOutput {
	return o
}

// Url for endpoint.
func (o JobServiceResponseOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Any error in the service.
func (o JobServiceResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Endpoint type.
func (o JobServiceResponseOutput) JobServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *string { return v.JobServiceType }).(pulumi.StringPtrOutput)
}

// Port for endpoint.
func (o JobServiceResponseOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobServiceResponse) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Additional properties to set on the endpoint.
func (o JobServiceResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobServiceResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Status of endpoint.
func (o JobServiceResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v JobServiceResponse) string { return v.Status }).(pulumi.StringOutput)
}

type JobServiceResponseMapOutput struct{ *pulumi.OutputState }

func (JobServiceResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobServiceResponse)(nil)).Elem()
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutput() JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) ToJobServiceResponseMapOutputWithContext(ctx context.Context) JobServiceResponseMapOutput {
	return o
}

func (o JobServiceResponseMapOutput) MapIndex(k pulumi.StringInput) JobServiceResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobServiceResponse {
		return vs[0].(map[string]JobServiceResponse)[vs[1].(string)]
	}).(JobServiceResponseOutput)
}

type KerberosKeytabCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
	// [Required] Keytab secrets.
	Secrets KerberosKeytabSecrets `pulumi:"secrets"`
}

// KerberosKeytabCredentialsInput is an input type that accepts KerberosKeytabCredentialsArgs and KerberosKeytabCredentialsOutput values.
// You can construct a concrete instance of `KerberosKeytabCredentialsInput` via:
//
//	KerberosKeytabCredentialsArgs{...}
type KerberosKeytabCredentialsInput interface {
	pulumi.Input

	ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput
	ToKerberosKeytabCredentialsOutputWithContext(context.Context) KerberosKeytabCredentialsOutput
}

type KerberosKeytabCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress pulumi.StringInput `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal pulumi.StringInput `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm pulumi.StringInput `pulumi:"kerberosRealm"`
	// [Required] Keytab secrets.
	Secrets KerberosKeytabSecretsInput `pulumi:"secrets"`
}

func (KerberosKeytabCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentials)(nil)).Elem()
}

func (i KerberosKeytabCredentialsArgs) ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput {
	return i.ToKerberosKeytabCredentialsOutputWithContext(context.Background())
}

func (i KerberosKeytabCredentialsArgs) ToKerberosKeytabCredentialsOutputWithContext(ctx context.Context) KerberosKeytabCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosKeytabCredentialsOutput)
}

type KerberosKeytabCredentialsOutput struct{ *pulumi.OutputState }

func (KerberosKeytabCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentials)(nil)).Elem()
}

func (o KerberosKeytabCredentialsOutput) ToKerberosKeytabCredentialsOutput() KerberosKeytabCredentialsOutput {
	return o
}

func (o KerberosKeytabCredentialsOutput) ToKerberosKeytabCredentialsOutputWithContext(ctx context.Context) KerberosKeytabCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosKeytabCredentialsOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosKeytabCredentialsOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosKeytabCredentialsOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

// [Required] Keytab secrets.
func (o KerberosKeytabCredentialsOutput) Secrets() KerberosKeytabSecretsOutput {
	return o.ApplyT(func(v KerberosKeytabCredentials) KerberosKeytabSecrets { return v.Secrets }).(KerberosKeytabSecretsOutput)
}

type KerberosKeytabCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosKeytab'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
}

type KerberosKeytabCredentialsResponseOutput struct{ *pulumi.OutputState }

func (KerberosKeytabCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabCredentialsResponse)(nil)).Elem()
}

func (o KerberosKeytabCredentialsResponseOutput) ToKerberosKeytabCredentialsResponseOutput() KerberosKeytabCredentialsResponseOutput {
	return o
}

func (o KerberosKeytabCredentialsResponseOutput) ToKerberosKeytabCredentialsResponseOutputWithContext(ctx context.Context) KerberosKeytabCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosKeytabCredentialsResponseOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosKeytabCredentialsResponseOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosKeytabCredentialsResponseOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabCredentialsResponse) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

type KerberosKeytabSecrets struct {
	// Kerberos keytab secret.
	KerberosKeytab *string `pulumi:"kerberosKeytab"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosKeytab'.
	SecretsType string `pulumi:"secretsType"`
}

// KerberosKeytabSecretsInput is an input type that accepts KerberosKeytabSecretsArgs and KerberosKeytabSecretsOutput values.
// You can construct a concrete instance of `KerberosKeytabSecretsInput` via:
//
//	KerberosKeytabSecretsArgs{...}
type KerberosKeytabSecretsInput interface {
	pulumi.Input

	ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput
	ToKerberosKeytabSecretsOutputWithContext(context.Context) KerberosKeytabSecretsOutput
}

type KerberosKeytabSecretsArgs struct {
	// Kerberos keytab secret.
	KerberosKeytab pulumi.StringPtrInput `pulumi:"kerberosKeytab"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosKeytab'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (KerberosKeytabSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabSecrets)(nil)).Elem()
}

func (i KerberosKeytabSecretsArgs) ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput {
	return i.ToKerberosKeytabSecretsOutputWithContext(context.Background())
}

func (i KerberosKeytabSecretsArgs) ToKerberosKeytabSecretsOutputWithContext(ctx context.Context) KerberosKeytabSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosKeytabSecretsOutput)
}

type KerberosKeytabSecretsOutput struct{ *pulumi.OutputState }

func (KerberosKeytabSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosKeytabSecrets)(nil)).Elem()
}

func (o KerberosKeytabSecretsOutput) ToKerberosKeytabSecretsOutput() KerberosKeytabSecretsOutput {
	return o
}

func (o KerberosKeytabSecretsOutput) ToKerberosKeytabSecretsOutputWithContext(ctx context.Context) KerberosKeytabSecretsOutput {
	return o
}

// Kerberos keytab secret.
func (o KerberosKeytabSecretsOutput) KerberosKeytab() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosKeytabSecrets) *string { return v.KerberosKeytab }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'KerberosKeytab'.
func (o KerberosKeytabSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosKeytabSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

type KerberosPasswordCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
	// [Required] Kerberos password secrets.
	Secrets KerberosPasswordSecrets `pulumi:"secrets"`
}

// KerberosPasswordCredentialsInput is an input type that accepts KerberosPasswordCredentialsArgs and KerberosPasswordCredentialsOutput values.
// You can construct a concrete instance of `KerberosPasswordCredentialsInput` via:
//
//	KerberosPasswordCredentialsArgs{...}
type KerberosPasswordCredentialsInput interface {
	pulumi.Input

	ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput
	ToKerberosPasswordCredentialsOutputWithContext(context.Context) KerberosPasswordCredentialsOutput
}

type KerberosPasswordCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress pulumi.StringInput `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal pulumi.StringInput `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm pulumi.StringInput `pulumi:"kerberosRealm"`
	// [Required] Kerberos password secrets.
	Secrets KerberosPasswordSecretsInput `pulumi:"secrets"`
}

func (KerberosPasswordCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentials)(nil)).Elem()
}

func (i KerberosPasswordCredentialsArgs) ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput {
	return i.ToKerberosPasswordCredentialsOutputWithContext(context.Background())
}

func (i KerberosPasswordCredentialsArgs) ToKerberosPasswordCredentialsOutputWithContext(ctx context.Context) KerberosPasswordCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosPasswordCredentialsOutput)
}

type KerberosPasswordCredentialsOutput struct{ *pulumi.OutputState }

func (KerberosPasswordCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentials)(nil)).Elem()
}

func (o KerberosPasswordCredentialsOutput) ToKerberosPasswordCredentialsOutput() KerberosPasswordCredentialsOutput {
	return o
}

func (o KerberosPasswordCredentialsOutput) ToKerberosPasswordCredentialsOutputWithContext(ctx context.Context) KerberosPasswordCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosPasswordCredentialsOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosPasswordCredentialsOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosPasswordCredentialsOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

// [Required] Kerberos password secrets.
func (o KerberosPasswordCredentialsOutput) Secrets() KerberosPasswordSecretsOutput {
	return o.ApplyT(func(v KerberosPasswordCredentials) KerberosPasswordSecrets { return v.Secrets }).(KerberosPasswordSecretsOutput)
}

type KerberosPasswordCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'KerberosPassword'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] IP Address or DNS HostName.
	KerberosKdcAddress string `pulumi:"kerberosKdcAddress"`
	// [Required] Kerberos Username
	KerberosPrincipal string `pulumi:"kerberosPrincipal"`
	// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
	KerberosRealm string `pulumi:"kerberosRealm"`
}

type KerberosPasswordCredentialsResponseOutput struct{ *pulumi.OutputState }

func (KerberosPasswordCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordCredentialsResponse)(nil)).Elem()
}

func (o KerberosPasswordCredentialsResponseOutput) ToKerberosPasswordCredentialsResponseOutput() KerberosPasswordCredentialsResponseOutput {
	return o
}

func (o KerberosPasswordCredentialsResponseOutput) ToKerberosPasswordCredentialsResponseOutputWithContext(ctx context.Context) KerberosPasswordCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] IP Address or DNS HostName.
func (o KerberosPasswordCredentialsResponseOutput) KerberosKdcAddress() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosKdcAddress }).(pulumi.StringOutput)
}

// [Required] Kerberos Username
func (o KerberosPasswordCredentialsResponseOutput) KerberosPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosPrincipal }).(pulumi.StringOutput)
}

// [Required] Domain over which a Kerberos authentication server has the authority to authenticate a user, host or service.
func (o KerberosPasswordCredentialsResponseOutput) KerberosRealm() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordCredentialsResponse) string { return v.KerberosRealm }).(pulumi.StringOutput)
}

type KerberosPasswordSecrets struct {
	// Kerberos password secret.
	KerberosPassword *string `pulumi:"kerberosPassword"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosPassword'.
	SecretsType string `pulumi:"secretsType"`
}

// KerberosPasswordSecretsInput is an input type that accepts KerberosPasswordSecretsArgs and KerberosPasswordSecretsOutput values.
// You can construct a concrete instance of `KerberosPasswordSecretsInput` via:
//
//	KerberosPasswordSecretsArgs{...}
type KerberosPasswordSecretsInput interface {
	pulumi.Input

	ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput
	ToKerberosPasswordSecretsOutputWithContext(context.Context) KerberosPasswordSecretsOutput
}

type KerberosPasswordSecretsArgs struct {
	// Kerberos password secret.
	KerberosPassword pulumi.StringPtrInput `pulumi:"kerberosPassword"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'KerberosPassword'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (KerberosPasswordSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordSecrets)(nil)).Elem()
}

func (i KerberosPasswordSecretsArgs) ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput {
	return i.ToKerberosPasswordSecretsOutputWithContext(context.Background())
}

func (i KerberosPasswordSecretsArgs) ToKerberosPasswordSecretsOutputWithContext(ctx context.Context) KerberosPasswordSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KerberosPasswordSecretsOutput)
}

type KerberosPasswordSecretsOutput struct{ *pulumi.OutputState }

func (KerberosPasswordSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KerberosPasswordSecrets)(nil)).Elem()
}

func (o KerberosPasswordSecretsOutput) ToKerberosPasswordSecretsOutput() KerberosPasswordSecretsOutput {
	return o
}

func (o KerberosPasswordSecretsOutput) ToKerberosPasswordSecretsOutputWithContext(ctx context.Context) KerberosPasswordSecretsOutput {
	return o
}

// Kerberos password secret.
func (o KerberosPasswordSecretsOutput) KerberosPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KerberosPasswordSecrets) *string { return v.KerberosPassword }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'KerberosPassword'.
func (o KerberosPasswordSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v KerberosPasswordSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirements `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection *bool `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeployment
func (val *KubernetesOnlineDeployment) Defaults() *KubernetesOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	if tmp.PrivateNetworkConnection == nil {
		privateNetworkConnection_ := false
		tmp.PrivateNetworkConnection = &privateNetworkConnection_
	}
	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// KubernetesOnlineDeploymentInput is an input type that accepts KubernetesOnlineDeploymentArgs and KubernetesOnlineDeploymentOutput values.
// You can construct a concrete instance of `KubernetesOnlineDeploymentInput` via:
//
//	KubernetesOnlineDeploymentArgs{...}
type KubernetesOnlineDeploymentInput interface {
	pulumi.Input

	ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput
	ToKubernetesOnlineDeploymentOutputWithContext(context.Context) KubernetesOnlineDeploymentOutput
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements ContainerResourceRequirementsPtrInput `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection pulumi.BoolPtrInput `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentArgs
func (val *KubernetesOnlineDeploymentArgs) Defaults() *KubernetesOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}
	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	if tmp.PrivateNetworkConnection == nil {
		tmp.PrivateNetworkConnection = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (KubernetesOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return i.ToKubernetesOnlineDeploymentOutputWithContext(context.Background())
}

func (i KubernetesOnlineDeploymentArgs) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesOnlineDeploymentOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeployment)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutput() KubernetesOnlineDeploymentOutput {
	return o
}

func (o KubernetesOnlineDeploymentOutput) ToKubernetesOnlineDeploymentOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentOutput) ContainerResourceRequirements() ContainerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ContainerResourceRequirements {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsPtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// If true, enable private network connection.
// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
func (o KubernetesOnlineDeploymentOutput) PrivateNetworkConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *bool { return v.PrivateNetworkConnection }).(pulumi.BoolPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// The resource requirements for the container (cpu and memory).
	ContainerResourceRequirements *ContainerResourceRequirementsResponse `pulumi:"containerResourceRequirements"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Kubernetes'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection *bool `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for KubernetesOnlineDeploymentResponse
func (val *KubernetesOnlineDeploymentResponse) Defaults() *KubernetesOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	if tmp.PrivateNetworkConnection == nil {
		privateNetworkConnection_ := false
		tmp.PrivateNetworkConnection = &privateNetworkConnection_
	}
	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a KubernetesOnlineDeployment.
type KubernetesOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (KubernetesOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesOnlineDeploymentResponse)(nil)).Elem()
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutput() KubernetesOnlineDeploymentResponseOutput {
	return o
}

func (o KubernetesOnlineDeploymentResponseOutput) ToKubernetesOnlineDeploymentResponseOutputWithContext(ctx context.Context) KubernetesOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o KubernetesOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// The resource requirements for the container (cpu and memory).
func (o KubernetesOnlineDeploymentResponseOutput) ContainerResourceRequirements() ContainerResourceRequirementsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ContainerResourceRequirementsResponse {
		return v.ContainerResourceRequirements
	}).(ContainerResourceRequirementsResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o KubernetesOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Kubernetes'.
func (o KubernetesOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o KubernetesOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o KubernetesOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o KubernetesOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o KubernetesOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// If true, enable private network connection.
// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
func (o KubernetesOnlineDeploymentResponseOutput) PrivateNetworkConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *bool { return v.PrivateNetworkConnection }).(pulumi.BoolPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o KubernetesOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o KubernetesOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o KubernetesOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o KubernetesOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o KubernetesOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v KubernetesOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Literal input type.
type LiteralJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'Literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// LiteralJobInputInput is an input type that accepts LiteralJobInputArgs and LiteralJobInputOutput values.
// You can construct a concrete instance of `LiteralJobInputInput` via:
//
//	LiteralJobInputArgs{...}
type LiteralJobInputInput interface {
	pulumi.Input

	ToLiteralJobInputOutput() LiteralJobInputOutput
	ToLiteralJobInputOutputWithContext(context.Context) LiteralJobInputOutput
}

// Literal input type.
type LiteralJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'Literal'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value pulumi.StringInput `pulumi:"value"`
}

func (LiteralJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return i.ToLiteralJobInputOutputWithContext(context.Background())
}

func (i LiteralJobInputArgs) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiteralJobInputOutput)
}

// Literal input type.
type LiteralJobInputOutput struct{ *pulumi.OutputState }

func (LiteralJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInput)(nil)).Elem()
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutput() LiteralJobInputOutput {
	return o
}

func (o LiteralJobInputOutput) ToLiteralJobInputOutputWithContext(ctx context.Context) LiteralJobInputOutput {
	return o
}

// Description for the input.
func (o LiteralJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'Literal'.
func (o LiteralJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInput) string { return v.Value }).(pulumi.StringOutput)
}

// Literal input type.
type LiteralJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'Literal'.
	JobInputType string `pulumi:"jobInputType"`
	// [Required] Literal value for the input.
	Value string `pulumi:"value"`
}

// Literal input type.
type LiteralJobInputResponseOutput struct{ *pulumi.OutputState }

func (LiteralJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LiteralJobInputResponse)(nil)).Elem()
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutput() LiteralJobInputResponseOutput {
	return o
}

func (o LiteralJobInputResponseOutput) ToLiteralJobInputResponseOutputWithContext(ctx context.Context) LiteralJobInputResponseOutput {
	return o
}

// Description for the input.
func (o LiteralJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'Literal'.
func (o LiteralJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// [Required] Literal value for the input.
func (o LiteralJobInputResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LiteralJobInputResponse) string { return v.Value }).(pulumi.StringOutput)
}

type MLFlowModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLFlowModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInput
func (val *MLFlowModelJobInput) Defaults() *MLFlowModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobInputInput is an input type that accepts MLFlowModelJobInputArgs and MLFlowModelJobInputOutput values.
// You can construct a concrete instance of `MLFlowModelJobInputInput` via:
//
//	MLFlowModelJobInputArgs{...}
type MLFlowModelJobInputInput interface {
	pulumi.Input

	ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput
	ToMLFlowModelJobInputOutputWithContext(context.Context) MLFlowModelJobInputOutput
}

type MLFlowModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLFlowModel'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputArgs
func (val *MLFlowModelJobInputArgs) Defaults() *MLFlowModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLFlowModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return i.ToMLFlowModelJobInputOutputWithContext(context.Background())
}

func (i MLFlowModelJobInputArgs) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobInputOutput)
}

type MLFlowModelJobInputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInput)(nil)).Elem()
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutput() MLFlowModelJobInputOutput {
	return o
}

func (o MLFlowModelJobInputOutput) ToMLFlowModelJobInputOutputWithContext(ctx context.Context) MLFlowModelJobInputOutput {
	return o
}

// Description for the input.
func (o MLFlowModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLFlowModel'.
func (o MLFlowModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLFlowModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobInputResponse
func (val *MLFlowModelJobInputResponse) Defaults() *MLFlowModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobInputResponse)(nil)).Elem()
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutput() MLFlowModelJobInputResponseOutput {
	return o
}

func (o MLFlowModelJobInputResponseOutput) ToMLFlowModelJobInputResponseOutputWithContext(ctx context.Context) MLFlowModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLFlowModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLFlowModel'.
func (o MLFlowModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLFlowModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLFlowModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLFlowModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLFlowModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutput
func (val *MLFlowModelJobOutput) Defaults() *MLFlowModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLFlowModelJobOutputInput is an input type that accepts MLFlowModelJobOutputArgs and MLFlowModelJobOutputOutput values.
// You can construct a concrete instance of `MLFlowModelJobOutputInput` via:
//
//	MLFlowModelJobOutputArgs{...}
type MLFlowModelJobOutputInput interface {
	pulumi.Input

	ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput
	ToMLFlowModelJobOutputOutputWithContext(context.Context) MLFlowModelJobOutputOutput
}

type MLFlowModelJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLFlowModel'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputArgs
func (val *MLFlowModelJobOutputArgs) Defaults() *MLFlowModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLFlowModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return i.ToMLFlowModelJobOutputOutputWithContext(context.Background())
}

func (i MLFlowModelJobOutputArgs) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLFlowModelJobOutputOutput)
}

type MLFlowModelJobOutputOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutput)(nil)).Elem()
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutput() MLFlowModelJobOutputOutput {
	return o
}

func (o MLFlowModelJobOutputOutput) ToMLFlowModelJobOutputOutputWithContext(ctx context.Context) MLFlowModelJobOutputOutput {
	return o
}

// Description for the output.
func (o MLFlowModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'MLFlowModel'.
func (o MLFlowModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLFlowModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLFlowModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLFlowModelJobOutputResponse
func (val *MLFlowModelJobOutputResponse) Defaults() *MLFlowModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLFlowModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLFlowModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLFlowModelJobOutputResponse)(nil)).Elem()
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutput() MLFlowModelJobOutputResponseOutput {
	return o
}

func (o MLFlowModelJobOutputResponseOutput) ToMLFlowModelJobOutputResponseOutputWithContext(ctx context.Context) MLFlowModelJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o MLFlowModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'MLFlowModel'.
func (o MLFlowModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLFlowModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLFlowModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLFlowModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// MLTable data definition
type MLTableData struct {
	// Enum to determine the type of data.
	// Expected value is 'MLTable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableData
func (val *MLTableData) Defaults() *MLTableData {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTableDataInput is an input type that accepts MLTableDataArgs and MLTableDataOutput values.
// You can construct a concrete instance of `MLTableDataInput` via:
//
//	MLTableDataArgs{...}
type MLTableDataInput interface {
	pulumi.Input

	ToMLTableDataOutput() MLTableDataOutput
	ToMLTableDataOutputWithContext(context.Context) MLTableDataOutput
}

// MLTable data definition
type MLTableDataArgs struct {
	// Enum to determine the type of data.
	// Expected value is 'MLTable'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris pulumi.StringArrayInput `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataArgs
func (val *MLTableDataArgs) Defaults() *MLTableDataArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (MLTableDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (i MLTableDataArgs) ToMLTableDataOutput() MLTableDataOutput {
	return i.ToMLTableDataOutputWithContext(context.Background())
}

func (i MLTableDataArgs) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableDataOutput)
}

// MLTable data definition
type MLTableDataOutput struct{ *pulumi.OutputState }

func (MLTableDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableData)(nil)).Elem()
}

func (o MLTableDataOutput) ToMLTableDataOutput() MLTableDataOutput {
	return o
}

func (o MLTableDataOutput) ToMLTableDataOutputWithContext(ctx context.Context) MLTableDataOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'MLTable'.
func (o MLTableDataOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o MLTableDataOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableData) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableData) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o MLTableDataOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o MLTableDataOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableData) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableData) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableData) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MLTable data definition
type MLTableDataResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'MLTable'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Uris referenced in the MLTable definition (required for lineage)
	ReferencedUris []string `pulumi:"referencedUris"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for MLTableDataResponse
func (val *MLTableDataResponse) Defaults() *MLTableDataResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// MLTable data definition
type MLTableDataResponseOutput struct{ *pulumi.OutputState }

func (MLTableDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableDataResponse)(nil)).Elem()
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutput() MLTableDataResponseOutput {
	return o
}

func (o MLTableDataResponseOutput) ToMLTableDataResponseOutputWithContext(ctx context.Context) MLTableDataResponseOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'MLTable'.
func (o MLTableDataResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o MLTableDataResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableDataResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o MLTableDataResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o MLTableDataResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o MLTableDataResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MLTableDataResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o MLTableDataResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Uris referenced in the MLTable definition (required for lineage)
func (o MLTableDataResponseOutput) ReferencedUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MLTableDataResponse) []string { return v.ReferencedUris }).(pulumi.StringArrayOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o MLTableDataResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v MLTableDataResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type MLTableJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLTable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInput
func (val *MLTableJobInput) Defaults() *MLTableJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobInputInput is an input type that accepts MLTableJobInputArgs and MLTableJobInputOutput values.
// You can construct a concrete instance of `MLTableJobInputInput` via:
//
//	MLTableJobInputArgs{...}
type MLTableJobInputInput interface {
	pulumi.Input

	ToMLTableJobInputOutput() MLTableJobInputOutput
	ToMLTableJobInputOutputWithContext(context.Context) MLTableJobInputOutput
}

type MLTableJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLTable'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputArgs
func (val *MLTableJobInputArgs) Defaults() *MLTableJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (MLTableJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return i.ToMLTableJobInputOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput)
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i MLTableJobInputArgs) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputOutput).ToMLTableJobInputPtrOutputWithContext(ctx)
}

// MLTableJobInputPtrInput is an input type that accepts MLTableJobInputArgs, MLTableJobInputPtr and MLTableJobInputPtrOutput values.
// You can construct a concrete instance of `MLTableJobInputPtrInput` via:
//
//	        MLTableJobInputArgs{...}
//
//	or:
//
//	        nil
type MLTableJobInputPtrInput interface {
	pulumi.Input

	ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput
	ToMLTableJobInputPtrOutputWithContext(context.Context) MLTableJobInputPtrOutput
}

type mltableJobInputPtrType MLTableJobInputArgs

func MLTableJobInputPtr(v *MLTableJobInputArgs) MLTableJobInputPtrInput {
	return (*mltableJobInputPtrType)(v)
}

func (*mltableJobInputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return i.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (i *mltableJobInputPtrType) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobInputPtrOutput)
}

type MLTableJobInputOutput struct{ *pulumi.OutputState }

func (MLTableJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutput() MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputOutputWithContext(ctx context.Context) MLTableJobInputOutput {
	return o
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o.ToMLTableJobInputPtrOutputWithContext(context.Background())
}

func (o MLTableJobInputOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MLTableJobInput) *MLTableJobInput {
		return &v
	}).(MLTableJobInputPtrOutput)
}

// Description for the input.
func (o MLTableJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLTable'.
func (o MLTableJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputPtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInput)(nil)).Elem()
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutput() MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) ToMLTableJobInputPtrOutputWithContext(ctx context.Context) MLTableJobInputPtrOutput {
	return o
}

func (o MLTableJobInputPtrOutput) Elem() MLTableJobInputOutput {
	return o.ApplyT(func(v *MLTableJobInput) MLTableJobInput {
		if v != nil {
			return *v
		}
		var ret MLTableJobInput
		return ret
	}).(MLTableJobInputOutput)
}

// Description for the input.
func (o MLTableJobInputPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLTable'.
func (o MLTableJobInputPtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInput) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'MLTable'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobInputResponse
func (val *MLTableJobInputResponse) Defaults() *MLTableJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobInputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutput() MLTableJobInputResponseOutput {
	return o
}

func (o MLTableJobInputResponseOutput) ToMLTableJobInputResponseOutputWithContext(ctx context.Context) MLTableJobInputResponseOutput {
	return o
}

// Description for the input.
func (o MLTableJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLTable'.
func (o MLTableJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type MLTableJobInputResponsePtrOutput struct{ *pulumi.OutputState }

func (MLTableJobInputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MLTableJobInputResponse)(nil)).Elem()
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutput() MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) ToMLTableJobInputResponsePtrOutputWithContext(ctx context.Context) MLTableJobInputResponsePtrOutput {
	return o
}

func (o MLTableJobInputResponsePtrOutput) Elem() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) MLTableJobInputResponse {
		if v != nil {
			return *v
		}
		var ret MLTableJobInputResponse
		return ret
	}).(MLTableJobInputResponseOutput)
}

// Description for the input.
func (o MLTableJobInputResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'MLTable'.
func (o MLTableJobInputResponsePtrOutput) JobInputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobInputType
	}).(pulumi.StringPtrOutput)
}

// Input Asset Delivery Mode.
func (o MLTableJobInputResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o MLTableJobInputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MLTableJobInputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type MLTableJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLTable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutput
func (val *MLTableJobOutput) Defaults() *MLTableJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// MLTableJobOutputInput is an input type that accepts MLTableJobOutputArgs and MLTableJobOutputOutput values.
// You can construct a concrete instance of `MLTableJobOutputInput` via:
//
//	MLTableJobOutputArgs{...}
type MLTableJobOutputInput interface {
	pulumi.Input

	ToMLTableJobOutputOutput() MLTableJobOutputOutput
	ToMLTableJobOutputOutputWithContext(context.Context) MLTableJobOutputOutput
}

type MLTableJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLTable'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputArgs
func (val *MLTableJobOutputArgs) Defaults() *MLTableJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (MLTableJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return i.ToMLTableJobOutputOutputWithContext(context.Background())
}

func (i MLTableJobOutputArgs) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MLTableJobOutputOutput)
}

type MLTableJobOutputOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutput)(nil)).Elem()
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutput() MLTableJobOutputOutput {
	return o
}

func (o MLTableJobOutputOutput) ToMLTableJobOutputOutputWithContext(ctx context.Context) MLTableJobOutputOutput {
	return o
}

// Description for the output.
func (o MLTableJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'MLTable'.
func (o MLTableJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type MLTableJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'MLTable'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for MLTableJobOutputResponse
func (val *MLTableJobOutputResponse) Defaults() *MLTableJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type MLTableJobOutputResponseOutput struct{ *pulumi.OutputState }

func (MLTableJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MLTableJobOutputResponse)(nil)).Elem()
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutput() MLTableJobOutputResponseOutput {
	return o
}

func (o MLTableJobOutputResponseOutput) ToMLTableJobOutputResponseOutputWithContext(ctx context.Context) MLTableJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o MLTableJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'MLTable'.
func (o MLTableJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o MLTableJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o MLTableJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MLTableJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Managed identity configuration.
type ManagedIdentity struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// ManagedIdentityInput is an input type that accepts ManagedIdentityArgs and ManagedIdentityOutput values.
// You can construct a concrete instance of `ManagedIdentityInput` via:
//
//	ManagedIdentityArgs{...}
type ManagedIdentityInput interface {
	pulumi.Input

	ToManagedIdentityOutput() ManagedIdentityOutput
	ToManagedIdentityOutputWithContext(context.Context) ManagedIdentityOutput
}

// Managed identity configuration.
type ManagedIdentityArgs struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId pulumi.StringPtrInput `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (ManagedIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (i ManagedIdentityArgs) ToManagedIdentityOutput() ManagedIdentityOutput {
	return i.ToManagedIdentityOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput)
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedIdentityArgs) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityOutput).ToManagedIdentityPtrOutputWithContext(ctx)
}

// ManagedIdentityPtrInput is an input type that accepts ManagedIdentityArgs, ManagedIdentityPtr and ManagedIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedIdentityPtrInput` via:
//
//	        ManagedIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedIdentityPtrInput interface {
	pulumi.Input

	ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput
	ToManagedIdentityPtrOutputWithContext(context.Context) ManagedIdentityPtrOutput
}

type managedIdentityPtrType ManagedIdentityArgs

func ManagedIdentityPtr(v *ManagedIdentityArgs) ManagedIdentityPtrInput {
	return (*managedIdentityPtrType)(v)
}

func (*managedIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return i.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (i *managedIdentityPtrType) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedIdentityPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityOutput struct{ *pulumi.OutputState }

func (ManagedIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityOutput) ToManagedIdentityOutput() ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityOutputWithContext(ctx context.Context) ManagedIdentityOutput {
	return o
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o.ToManagedIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedIdentityOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedIdentity) *ManagedIdentity {
		return &v
	}).(ManagedIdentityPtrOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentity) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentity) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentity)(nil)).Elem()
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutput() ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) ToManagedIdentityPtrOutputWithContext(ctx context.Context) ManagedIdentityPtrOutput {
	return o
}

func (o ManagedIdentityPtrOutput) Elem() ManagedIdentityOutput {
	return o.ApplyT(func(v *ManagedIdentity) ManagedIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedIdentity
		return ret
	}).(ManagedIdentityOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityPtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentity) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Managed identity configuration.
type ManagedIdentityResponse struct {
	// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
	ClientId *string `pulumi:"clientId"`
	// Enum to determine identity framework.
	// Expected value is 'Managed'.
	IdentityType string `pulumi:"identityType"`
	// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
	ObjectId *string `pulumi:"objectId"`
	// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
	ResourceId *string `pulumi:"resourceId"`
}

// Managed identity configuration.
type ManagedIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutput() ManagedIdentityResponseOutput {
	return o
}

func (o ManagedIdentityResponseOutput) ToManagedIdentityResponseOutputWithContext(ctx context.Context) ManagedIdentityResponseOutput {
	return o
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ObjectId }).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponseOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedIdentityResponse) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type ManagedIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedIdentityResponse)(nil)).Elem()
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutput() ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) ToManagedIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedIdentityResponsePtrOutput {
	return o
}

func (o ManagedIdentityResponsePtrOutput) Elem() ManagedIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) ManagedIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedIdentityResponse
		return ret
	}).(ManagedIdentityResponseOutput)
}

// Specifies a user-assigned identity by client ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'Managed'.
func (o ManagedIdentityResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by object ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ObjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ObjectId
	}).(pulumi.StringPtrOutput)
}

// Specifies a user-assigned identity by ARM resource ID. For system-assigned, do not set this field.
func (o ManagedIdentityResponsePtrOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return v.ResourceId
	}).(pulumi.StringPtrOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeployment struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfiguration `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettings `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection *bool `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettings `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettings `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeployment
func (val *ManagedOnlineDeployment) Defaults() *ManagedOnlineDeployment {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	if tmp.PrivateNetworkConnection == nil {
		privateNetworkConnection_ := false
		tmp.PrivateNetworkConnection = &privateNetworkConnection_
	}
	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// ManagedOnlineDeploymentInput is an input type that accepts ManagedOnlineDeploymentArgs and ManagedOnlineDeploymentOutput values.
// You can construct a concrete instance of `ManagedOnlineDeploymentInput` via:
//
//	ManagedOnlineDeploymentArgs{...}
type ManagedOnlineDeploymentInput interface {
	pulumi.Input

	ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput
	ToManagedOnlineDeploymentOutputWithContext(context.Context) ManagedOnlineDeploymentOutput
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentArgs struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled pulumi.BoolPtrInput `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration CodeConfigurationPtrInput `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess pulumi.StringPtrInput `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType pulumi.StringInput `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe ProbeSettingsPtrInput `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model pulumi.StringPtrInput `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath pulumi.StringPtrInput `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection pulumi.BoolPtrInput `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe ProbeSettingsPtrInput `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings OnlineRequestSettingsPtrInput `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings pulumi.Input `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentArgs
func (val *ManagedOnlineDeploymentArgs) Defaults() *ManagedOnlineDeploymentArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		tmp.AppInsightsEnabled = pulumi.BoolPtr(false)
	}
	if tmp.EgressPublicNetworkAccess == nil {
		tmp.EgressPublicNetworkAccess = pulumi.StringPtr("Enabled")
	}

	if tmp.PrivateNetworkConnection == nil {
		tmp.PrivateNetworkConnection = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (ManagedOnlineDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return i.ToManagedOnlineDeploymentOutputWithContext(context.Background())
}

func (i ManagedOnlineDeploymentArgs) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedOnlineDeploymentOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeployment)(nil)).Elem()
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutput() ManagedOnlineDeploymentOutput {
	return o
}

func (o ManagedOnlineDeploymentOutput) ToManagedOnlineDeploymentOutputWithContext(ctx context.Context) ManagedOnlineDeploymentOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) CodeConfiguration() CodeConfigurationPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *CodeConfiguration { return v.CodeConfiguration }).(CodeConfigurationPtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentOutput) LivenessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.LivenessProbe }).(ProbeSettingsPtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// If true, enable private network connection.
// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
func (o ManagedOnlineDeploymentOutput) PrivateNetworkConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *bool { return v.PrivateNetworkConnection }).(pulumi.BoolPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentOutput) ReadinessProbe() ProbeSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *ProbeSettings { return v.ReadinessProbe }).(ProbeSettingsPtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentOutput) RequestSettings() OnlineRequestSettingsPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) *OnlineRequestSettings { return v.RequestSettings }).(OnlineRequestSettingsPtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeployment) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponse struct {
	// If true, enables Application Insights logging.
	AppInsightsEnabled *bool `pulumi:"appInsightsEnabled"`
	// Code configuration for the endpoint deployment.
	CodeConfiguration *CodeConfigurationResponse `pulumi:"codeConfiguration"`
	// Description of the endpoint deployment.
	Description *string `pulumi:"description"`
	// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
	EgressPublicNetworkAccess *string `pulumi:"egressPublicNetworkAccess"`
	// Enum to determine endpoint compute type.
	// Expected value is 'Managed'.
	EndpointComputeType string `pulumi:"endpointComputeType"`
	// ARM resource ID of the environment specification for the endpoint deployment.
	EnvironmentId *string `pulumi:"environmentId"`
	// Environment variables configuration for the deployment.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute instance type.
	InstanceType *string `pulumi:"instanceType"`
	// Liveness probe monitors the health of the container regularly.
	LivenessProbe *ProbeSettingsResponse `pulumi:"livenessProbe"`
	// The URI path to the model.
	Model *string `pulumi:"model"`
	// The path to mount the model in custom container.
	ModelMountPath *string `pulumi:"modelMountPath"`
	// If true, enable private network connection.
	// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
	PrivateNetworkConnection *bool `pulumi:"privateNetworkConnection"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint deployment.
	ProvisioningState string `pulumi:"provisioningState"`
	// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
	ReadinessProbe *ProbeSettingsResponse `pulumi:"readinessProbe"`
	// Request settings for the deployment.
	RequestSettings *OnlineRequestSettingsResponse `pulumi:"requestSettings"`
	// Scale settings for the deployment.
	// If it is null or not provided,
	// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
	// and to DefaultScaleSettings for ManagedOnlineDeployment.
	ScaleSettings interface{} `pulumi:"scaleSettings"`
}

// Defaults sets the appropriate defaults for ManagedOnlineDeploymentResponse
func (val *ManagedOnlineDeploymentResponse) Defaults() *ManagedOnlineDeploymentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.AppInsightsEnabled == nil {
		appInsightsEnabled_ := false
		tmp.AppInsightsEnabled = &appInsightsEnabled_
	}
	if tmp.EgressPublicNetworkAccess == nil {
		egressPublicNetworkAccess_ := "Enabled"
		tmp.EgressPublicNetworkAccess = &egressPublicNetworkAccess_
	}
	tmp.LivenessProbe = tmp.LivenessProbe.Defaults()

	if tmp.PrivateNetworkConnection == nil {
		privateNetworkConnection_ := false
		tmp.PrivateNetworkConnection = &privateNetworkConnection_
	}
	tmp.ReadinessProbe = tmp.ReadinessProbe.Defaults()

	tmp.RequestSettings = tmp.RequestSettings.Defaults()

	return &tmp
}

// Properties specific to a ManagedOnlineDeployment.
type ManagedOnlineDeploymentResponseOutput struct{ *pulumi.OutputState }

func (ManagedOnlineDeploymentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedOnlineDeploymentResponse)(nil)).Elem()
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutput() ManagedOnlineDeploymentResponseOutput {
	return o
}

func (o ManagedOnlineDeploymentResponseOutput) ToManagedOnlineDeploymentResponseOutputWithContext(ctx context.Context) ManagedOnlineDeploymentResponseOutput {
	return o
}

// If true, enables Application Insights logging.
func (o ManagedOnlineDeploymentResponseOutput) AppInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *bool { return v.AppInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Code configuration for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) CodeConfiguration() CodeConfigurationResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *CodeConfigurationResponse { return v.CodeConfiguration }).(CodeConfigurationResponsePtrOutput)
}

// Description of the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If Enabled, allow egress public network access. If Disabled, this will create secure egress. Default: Enabled.
func (o ManagedOnlineDeploymentResponseOutput) EgressPublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EgressPublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Enum to determine endpoint compute type.
// Expected value is 'Managed'.
func (o ManagedOnlineDeploymentResponseOutput) EndpointComputeType() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.EndpointComputeType }).(pulumi.StringOutput)
}

// ARM resource ID of the environment specification for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// Environment variables configuration for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute instance type.
func (o ManagedOnlineDeploymentResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Liveness probe monitors the health of the container regularly.
func (o ManagedOnlineDeploymentResponseOutput) LivenessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.LivenessProbe }).(ProbeSettingsResponsePtrOutput)
}

// The URI path to the model.
func (o ManagedOnlineDeploymentResponseOutput) Model() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.Model }).(pulumi.StringPtrOutput)
}

// The path to mount the model in custom container.
func (o ManagedOnlineDeploymentResponseOutput) ModelMountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *string { return v.ModelMountPath }).(pulumi.StringPtrOutput)
}

// If true, enable private network connection.
// DEPRECATED for future API versions. Use EgressPublicNetworkAccess.
func (o ManagedOnlineDeploymentResponseOutput) PrivateNetworkConnection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *bool { return v.PrivateNetworkConnection }).(pulumi.BoolPtrOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o ManagedOnlineDeploymentResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint deployment.
func (o ManagedOnlineDeploymentResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Readiness probe validates if the container is ready to serve traffic. The properties and defaults are the same as liveness probe.
func (o ManagedOnlineDeploymentResponseOutput) ReadinessProbe() ProbeSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *ProbeSettingsResponse { return v.ReadinessProbe }).(ProbeSettingsResponsePtrOutput)
}

// Request settings for the deployment.
func (o ManagedOnlineDeploymentResponseOutput) RequestSettings() OnlineRequestSettingsResponsePtrOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) *OnlineRequestSettingsResponse { return v.RequestSettings }).(OnlineRequestSettingsResponsePtrOutput)
}

// Scale settings for the deployment.
// If it is null or not provided,
// it defaults to TargetUtilizationScaleSettings for KubernetesOnlineDeployment
// and to DefaultScaleSettings for ManagedOnlineDeployment.
func (o ManagedOnlineDeploymentResponseOutput) ScaleSettings() pulumi.AnyOutput {
	return o.ApplyT(func(v ManagedOnlineDeploymentResponse) interface{} { return v.ScaleSettings }).(pulumi.AnyOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentity struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities []string `pulumi:"userAssignedIdentities"`
}

// ManagedServiceIdentityInput is an input type that accepts ManagedServiceIdentityArgs and ManagedServiceIdentityOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityInput` via:
//
//	ManagedServiceIdentityArgs{...}
type ManagedServiceIdentityInput interface {
	pulumi.Input

	ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput
	ToManagedServiceIdentityOutputWithContext(context.Context) ManagedServiceIdentityOutput
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityArgs struct {
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type pulumi.StringInput `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities pulumi.StringArrayInput `pulumi:"userAssignedIdentities"`
}

func (ManagedServiceIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return i.ToManagedServiceIdentityOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput)
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i ManagedServiceIdentityArgs) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityOutput).ToManagedServiceIdentityPtrOutputWithContext(ctx)
}

// ManagedServiceIdentityPtrInput is an input type that accepts ManagedServiceIdentityArgs, ManagedServiceIdentityPtr and ManagedServiceIdentityPtrOutput values.
// You can construct a concrete instance of `ManagedServiceIdentityPtrInput` via:
//
//	        ManagedServiceIdentityArgs{...}
//
//	or:
//
//	        nil
type ManagedServiceIdentityPtrInput interface {
	pulumi.Input

	ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput
	ToManagedServiceIdentityPtrOutputWithContext(context.Context) ManagedServiceIdentityPtrOutput
}

type managedServiceIdentityPtrType ManagedServiceIdentityArgs

func ManagedServiceIdentityPtr(v *ManagedServiceIdentityArgs) ManagedServiceIdentityPtrInput {
	return (*managedServiceIdentityPtrType)(v)
}

func (*managedServiceIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return i.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (i *managedServiceIdentityPtrType) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedServiceIdentityPtrOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutput() ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityOutputWithContext(ctx context.Context) ManagedServiceIdentityOutput {
	return o
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o.ToManagedServiceIdentityPtrOutputWithContext(context.Background())
}

func (o ManagedServiceIdentityOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedServiceIdentity) *ManagedServiceIdentity {
		return &v
	}).(ManagedServiceIdentityPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedServiceIdentity) []string { return v.UserAssignedIdentities }).(pulumi.StringArrayOutput)
}

type ManagedServiceIdentityPtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentity)(nil)).Elem()
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutput() ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) ToManagedServiceIdentityPtrOutputWithContext(ctx context.Context) ManagedServiceIdentityPtrOutput {
	return o
}

func (o ManagedServiceIdentityPtrOutput) Elem() ManagedServiceIdentityOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) ManagedServiceIdentity {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentity
		return ret
	}).(ManagedServiceIdentityOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityPtrOutput) UserAssignedIdentities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedServiceIdentity) []string {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(pulumi.StringArrayOutput)
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponse struct {
	// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
	PrincipalId string `pulumi:"principalId"`
	// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantId string `pulumi:"tenantId"`
	// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
	Type string `pulumi:"type"`
	// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
	UserAssignedIdentities map[string]UserAssignedIdentityResponse `pulumi:"userAssignedIdentities"`
}

// Managed service identity (system assigned and/or user assigned identities)
type ManagedServiceIdentityResponseOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutput() ManagedServiceIdentityResponseOutput {
	return o
}

func (o ManagedServiceIdentityResponseOutput) ToManagedServiceIdentityResponseOutputWithContext(ctx context.Context) ManagedServiceIdentityResponseOutput {
	return o
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponseOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

type ManagedServiceIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (ManagedServiceIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedServiceIdentityResponse)(nil)).Elem()
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutput() ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) ToManagedServiceIdentityResponsePtrOutputWithContext(ctx context.Context) ManagedServiceIdentityResponsePtrOutput {
	return o
}

func (o ManagedServiceIdentityResponsePtrOutput) Elem() ManagedServiceIdentityResponseOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) ManagedServiceIdentityResponse {
		if v != nil {
			return *v
		}
		var ret ManagedServiceIdentityResponse
		return ret
	}).(ManagedServiceIdentityResponseOutput)
}

// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
func (o ManagedServiceIdentityResponsePtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
func (o ManagedServiceIdentityResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.
func (o ManagedServiceIdentityResponsePtrOutput) UserAssignedIdentities() UserAssignedIdentityResponseMapOutput {
	return o.ApplyT(func(v *ManagedServiceIdentityResponse) map[string]UserAssignedIdentityResponse {
		if v == nil {
			return nil
		}
		return v.UserAssignedIdentities
	}).(UserAssignedIdentityResponseMapOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicy
func (val *MedianStoppingPolicy) Defaults() *MedianStoppingPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// MedianStoppingPolicyInput is an input type that accepts MedianStoppingPolicyArgs and MedianStoppingPolicyOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyInput` via:
//
//	MedianStoppingPolicyArgs{...}
type MedianStoppingPolicyInput interface {
	pulumi.Input

	ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput
	ToMedianStoppingPolicyOutputWithContext(context.Context) MedianStoppingPolicyOutput
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyArgs
func (val *MedianStoppingPolicyArgs) Defaults() *MedianStoppingPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	return &tmp
}
func (MedianStoppingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return i.ToMedianStoppingPolicyOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput)
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i MedianStoppingPolicyArgs) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyOutput).ToMedianStoppingPolicyPtrOutputWithContext(ctx)
}

// MedianStoppingPolicyPtrInput is an input type that accepts MedianStoppingPolicyArgs, MedianStoppingPolicyPtr and MedianStoppingPolicyPtrOutput values.
// You can construct a concrete instance of `MedianStoppingPolicyPtrInput` via:
//
//	        MedianStoppingPolicyArgs{...}
//
//	or:
//
//	        nil
type MedianStoppingPolicyPtrInput interface {
	pulumi.Input

	ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput
	ToMedianStoppingPolicyPtrOutputWithContext(context.Context) MedianStoppingPolicyPtrOutput
}

type medianStoppingPolicyPtrType MedianStoppingPolicyArgs

func MedianStoppingPolicyPtr(v *MedianStoppingPolicyArgs) MedianStoppingPolicyPtrInput {
	return (*medianStoppingPolicyPtrType)(v)
}

func (*medianStoppingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return i.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (i *medianStoppingPolicyPtrType) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MedianStoppingPolicyPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutput() MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyOutputWithContext(ctx context.Context) MedianStoppingPolicyOutput {
	return o
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o.ToMedianStoppingPolicyPtrOutputWithContext(context.Background())
}

func (o MedianStoppingPolicyOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MedianStoppingPolicy) *MedianStoppingPolicy {
		return &v
	}).(MedianStoppingPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyPtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicy)(nil)).Elem()
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutput() MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) ToMedianStoppingPolicyPtrOutputWithContext(ctx context.Context) MedianStoppingPolicyPtrOutput {
	return o
}

func (o MedianStoppingPolicyPtrOutput) Elem() MedianStoppingPolicyOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) MedianStoppingPolicy {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicy
		return ret
	}).(MedianStoppingPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'MedianStopping'.
	PolicyType string `pulumi:"policyType"`
}

// Defaults sets the appropriate defaults for MedianStoppingPolicyResponse
func (val *MedianStoppingPolicyResponse) Defaults() *MedianStoppingPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	return &tmp
}

// Defines an early termination policy based on running averages of the primary metric of all runs
type MedianStoppingPolicyResponseOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutput() MedianStoppingPolicyResponseOutput {
	return o
}

func (o MedianStoppingPolicyResponseOutput) ToMedianStoppingPolicyResponseOutputWithContext(ctx context.Context) MedianStoppingPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v MedianStoppingPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

type MedianStoppingPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (MedianStoppingPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MedianStoppingPolicyResponse)(nil)).Elem()
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutput() MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) ToMedianStoppingPolicyResponsePtrOutputWithContext(ctx context.Context) MedianStoppingPolicyResponsePtrOutput {
	return o
}

func (o MedianStoppingPolicyResponsePtrOutput) Elem() MedianStoppingPolicyResponseOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) MedianStoppingPolicyResponse {
		if v != nil {
			return *v
		}
		var ret MedianStoppingPolicyResponse
		return ret
	}).(MedianStoppingPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o MedianStoppingPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o MedianStoppingPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'MedianStopping'.
func (o MedianStoppingPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MedianStoppingPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

type ModelContainerType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerType
func (val *ModelContainerType) Defaults() *ModelContainerType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// ModelContainerTypeInput is an input type that accepts ModelContainerTypeArgs and ModelContainerTypeOutput values.
// You can construct a concrete instance of `ModelContainerTypeInput` via:
//
//	ModelContainerTypeArgs{...}
type ModelContainerTypeInput interface {
	pulumi.Input

	ToModelContainerTypeOutput() ModelContainerTypeOutput
	ToModelContainerTypeOutputWithContext(context.Context) ModelContainerTypeOutput
}

type ModelContainerTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerTypeArgs
func (val *ModelContainerTypeArgs) Defaults() *ModelContainerTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (ModelContainerTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return i.ToModelContainerTypeOutputWithContext(context.Background())
}

func (i ModelContainerTypeArgs) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelContainerTypeOutput)
}

type ModelContainerTypeOutput struct{ *pulumi.OutputState }

func (ModelContainerTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerType)(nil)).Elem()
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutput() ModelContainerTypeOutput {
	return o
}

func (o ModelContainerTypeOutput) ToModelContainerTypeOutputWithContext(ctx context.Context) ModelContainerTypeOutput {
	return o
}

// The asset description text.
func (o ModelContainerTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o ModelContainerTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type ModelContainerResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The latest version inside this container.
	LatestVersion string `pulumi:"latestVersion"`
	// The next auto incremental version
	NextVersion string `pulumi:"nextVersion"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelContainerResponse
func (val *ModelContainerResponse) Defaults() *ModelContainerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

type ModelContainerResponseOutput struct{ *pulumi.OutputState }

func (ModelContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelContainerResponse)(nil)).Elem()
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutput() ModelContainerResponseOutput {
	return o
}

func (o ModelContainerResponseOutput) ToModelContainerResponseOutputWithContext(ctx context.Context) ModelContainerResponseOutput {
	return o
}

// The asset description text.
func (o ModelContainerResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Is the asset archived?
func (o ModelContainerResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelContainerResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The latest version inside this container.
func (o ModelContainerResponseOutput) LatestVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.LatestVersion }).(pulumi.StringOutput)
}

// The next auto incremental version
func (o ModelContainerResponseOutput) NextVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ModelContainerResponse) string { return v.NextVersion }).(pulumi.StringOutput)
}

// The asset property dictionary.
func (o ModelContainerResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelContainerResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelContainerResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionType struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorData `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionType
func (val *ModelVersionType) Defaults() *ModelVersionType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.ModelType == nil {
		modelType_ := "CustomModel"
		tmp.ModelType = &modelType_
	}
	return &tmp
}

// ModelVersionTypeInput is an input type that accepts ModelVersionTypeArgs and ModelVersionTypeOutput values.
// You can construct a concrete instance of `ModelVersionTypeInput` via:
//
//	ModelVersionTypeArgs{...}
type ModelVersionTypeInput interface {
	pulumi.Input

	ToModelVersionTypeOutput() ModelVersionTypeOutput
	ToModelVersionTypeOutputWithContext(context.Context) ModelVersionTypeOutput
}

// Model asset version details.
type ModelVersionTypeArgs struct {
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors FlavorDataMapInput `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName pulumi.StringPtrInput `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType pulumi.StringPtrInput `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri pulumi.StringPtrInput `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionTypeArgs
func (val *ModelVersionTypeArgs) Defaults() *ModelVersionTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	if tmp.ModelType == nil {
		tmp.ModelType = pulumi.StringPtr("CustomModel")
	}
	return &tmp
}
func (ModelVersionTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return i.ToModelVersionTypeOutputWithContext(context.Background())
}

func (i ModelVersionTypeArgs) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelVersionTypeOutput)
}

// Model asset version details.
type ModelVersionTypeOutput struct{ *pulumi.OutputState }

func (ModelVersionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionType)(nil)).Elem()
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutput() ModelVersionTypeOutput {
	return o
}

func (o ModelVersionTypeOutput) ToModelVersionTypeOutputWithContext(ctx context.Context) ModelVersionTypeOutput {
	return o
}

// The asset description text.
func (o ModelVersionTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionTypeOutput) Flavors() FlavorDataMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]FlavorData { return v.Flavors }).(FlavorDataMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionTypeOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionTypeOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionTypeOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionTypeOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionTypeOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionType) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionTypeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionType) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Model asset version details.
type ModelVersionResponse struct {
	// The asset description text.
	Description *string `pulumi:"description"`
	// Mapping of model flavors to their properties.
	Flavors map[string]FlavorDataResponse `pulumi:"flavors"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Name of the training job which produced this model
	JobName *string `pulumi:"jobName"`
	// The storage format for this entity. Used for NCD.
	ModelType *string `pulumi:"modelType"`
	// The URI path to the model contents.
	ModelUri *string `pulumi:"modelUri"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for ModelVersionResponse
func (val *ModelVersionResponse) Defaults() *ModelVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	if tmp.ModelType == nil {
		modelType_ := "CustomModel"
		tmp.ModelType = &modelType_
	}
	return &tmp
}

// Model asset version details.
type ModelVersionResponseOutput struct{ *pulumi.OutputState }

func (ModelVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelVersionResponse)(nil)).Elem()
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutput() ModelVersionResponseOutput {
	return o
}

func (o ModelVersionResponseOutput) ToModelVersionResponseOutputWithContext(ctx context.Context) ModelVersionResponseOutput {
	return o
}

// The asset description text.
func (o ModelVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Mapping of model flavors to their properties.
func (o ModelVersionResponseOutput) Flavors() FlavorDataResponseMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]FlavorDataResponse { return v.Flavors }).(FlavorDataResponseMapOutput)
}

// If the name version are system generated (anonymous registration).
func (o ModelVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o ModelVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Name of the training job which produced this model
func (o ModelVersionResponseOutput) JobName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.JobName }).(pulumi.StringPtrOutput)
}

// The storage format for this entity. Used for NCD.
func (o ModelVersionResponseOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

// The URI path to the model contents.
func (o ModelVersionResponseOutput) ModelUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelVersionResponse) *string { return v.ModelUri }).(pulumi.StringPtrOutput)
}

// The asset property dictionary.
func (o ModelVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o ModelVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v ModelVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// MPI distribution configuration.
type Mpi struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MpiInput is an input type that accepts MpiArgs and MpiOutput values.
// You can construct a concrete instance of `MpiInput` via:
//
//	MpiArgs{...}
type MpiInput interface {
	pulumi.Input

	ToMpiOutput() MpiOutput
	ToMpiOutputWithContext(context.Context) MpiOutput
}

// MPI distribution configuration.
type MpiArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (MpiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (i MpiArgs) ToMpiOutput() MpiOutput {
	return i.ToMpiOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput)
}

func (i MpiArgs) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i MpiArgs) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiOutput).ToMpiPtrOutputWithContext(ctx)
}

// MpiPtrInput is an input type that accepts MpiArgs, MpiPtr and MpiPtrOutput values.
// You can construct a concrete instance of `MpiPtrInput` via:
//
//	        MpiArgs{...}
//
//	or:
//
//	        nil
type MpiPtrInput interface {
	pulumi.Input

	ToMpiPtrOutput() MpiPtrOutput
	ToMpiPtrOutputWithContext(context.Context) MpiPtrOutput
}

type mpiPtrType MpiArgs

func MpiPtr(v *MpiArgs) MpiPtrInput {
	return (*mpiPtrType)(v)
}

func (*mpiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (i *mpiPtrType) ToMpiPtrOutput() MpiPtrOutput {
	return i.ToMpiPtrOutputWithContext(context.Background())
}

func (i *mpiPtrType) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpiPtrOutput)
}

// MPI distribution configuration.
type MpiOutput struct{ *pulumi.OutputState }

func (MpiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Mpi)(nil)).Elem()
}

func (o MpiOutput) ToMpiOutput() MpiOutput {
	return o
}

func (o MpiOutput) ToMpiOutputWithContext(ctx context.Context) MpiOutput {
	return o
}

func (o MpiOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o.ToMpiPtrOutputWithContext(context.Background())
}

func (o MpiOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Mpi) *Mpi {
		return &v
	}).(MpiPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v Mpi) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Mpi) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiPtrOutput struct{ *pulumi.OutputState }

func (MpiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mpi)(nil)).Elem()
}

func (o MpiPtrOutput) ToMpiPtrOutput() MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) ToMpiPtrOutputWithContext(ctx context.Context) MpiPtrOutput {
	return o
}

func (o MpiPtrOutput) Elem() MpiOutput {
	return o.ApplyT(func(v *Mpi) Mpi {
		if v != nil {
			return *v
		}
		var ret Mpi
		return ret
	}).(MpiOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mpi) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Mpi) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// MPI distribution configuration.
type MpiResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'Mpi'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per MPI node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// MPI distribution configuration.
type MpiResponseOutput struct{ *pulumi.OutputState }

func (MpiResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpiResponse)(nil)).Elem()
}

func (o MpiResponseOutput) ToMpiResponseOutput() MpiResponseOutput {
	return o
}

func (o MpiResponseOutput) ToMpiResponseOutputWithContext(ctx context.Context) MpiResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v MpiResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per MPI node.
func (o MpiResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MpiResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type MpiResponsePtrOutput struct{ *pulumi.OutputState }

func (MpiResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MpiResponse)(nil)).Elem()
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutput() MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) ToMpiResponsePtrOutputWithContext(ctx context.Context) MpiResponsePtrOutput {
	return o
}

func (o MpiResponsePtrOutput) Elem() MpiResponseOutput {
	return o.ApplyT(func(v *MpiResponse) MpiResponse {
		if v != nil {
			return *v
		}
		var ret MpiResponse
		return ret
	}).(MpiResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'Mpi'.
func (o MpiResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per MPI node.
func (o MpiResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MpiResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// Class for data inputs.
// NLP - Natural Language Processing.
type NlpVerticalDataSettings struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettings `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettings `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *NlpVerticalValidationDataSettings `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for NlpVerticalDataSettings
func (val *NlpVerticalDataSettings) Defaults() *NlpVerticalDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// NlpVerticalDataSettingsInput is an input type that accepts NlpVerticalDataSettingsArgs and NlpVerticalDataSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalDataSettingsInput` via:
//
//	NlpVerticalDataSettingsArgs{...}
type NlpVerticalDataSettingsInput interface {
	pulumi.Input

	ToNlpVerticalDataSettingsOutput() NlpVerticalDataSettingsOutput
	ToNlpVerticalDataSettingsOutputWithContext(context.Context) NlpVerticalDataSettingsOutput
}

// Class for data inputs.
// NLP - Natural Language Processing.
type NlpVerticalDataSettingsArgs struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringInput `pulumi:"targetColumnName"`
	// Test data input.
	TestData TestDataSettingsPtrInput `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData NlpVerticalValidationDataSettingsPtrInput `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for NlpVerticalDataSettingsArgs
func (val *NlpVerticalDataSettingsArgs) Defaults() *NlpVerticalDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (NlpVerticalDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalDataSettings)(nil)).Elem()
}

func (i NlpVerticalDataSettingsArgs) ToNlpVerticalDataSettingsOutput() NlpVerticalDataSettingsOutput {
	return i.ToNlpVerticalDataSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalDataSettingsArgs) ToNlpVerticalDataSettingsOutputWithContext(ctx context.Context) NlpVerticalDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalDataSettingsOutput)
}

func (i NlpVerticalDataSettingsArgs) ToNlpVerticalDataSettingsPtrOutput() NlpVerticalDataSettingsPtrOutput {
	return i.ToNlpVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalDataSettingsArgs) ToNlpVerticalDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalDataSettingsOutput).ToNlpVerticalDataSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalDataSettingsPtrInput is an input type that accepts NlpVerticalDataSettingsArgs, NlpVerticalDataSettingsPtr and NlpVerticalDataSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalDataSettingsPtrInput` via:
//
//	        NlpVerticalDataSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalDataSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalDataSettingsPtrOutput() NlpVerticalDataSettingsPtrOutput
	ToNlpVerticalDataSettingsPtrOutputWithContext(context.Context) NlpVerticalDataSettingsPtrOutput
}

type nlpVerticalDataSettingsPtrType NlpVerticalDataSettingsArgs

func NlpVerticalDataSettingsPtr(v *NlpVerticalDataSettingsArgs) NlpVerticalDataSettingsPtrInput {
	return (*nlpVerticalDataSettingsPtrType)(v)
}

func (*nlpVerticalDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalDataSettings)(nil)).Elem()
}

func (i *nlpVerticalDataSettingsPtrType) ToNlpVerticalDataSettingsPtrOutput() NlpVerticalDataSettingsPtrOutput {
	return i.ToNlpVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalDataSettingsPtrType) ToNlpVerticalDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalDataSettingsPtrOutput)
}

// Class for data inputs.
// NLP - Natural Language Processing.
type NlpVerticalDataSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalDataSettings)(nil)).Elem()
}

func (o NlpVerticalDataSettingsOutput) ToNlpVerticalDataSettingsOutput() NlpVerticalDataSettingsOutput {
	return o
}

func (o NlpVerticalDataSettingsOutput) ToNlpVerticalDataSettingsOutputWithContext(ctx context.Context) NlpVerticalDataSettingsOutput {
	return o
}

func (o NlpVerticalDataSettingsOutput) ToNlpVerticalDataSettingsPtrOutput() NlpVerticalDataSettingsPtrOutput {
	return o.ToNlpVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalDataSettingsOutput) ToNlpVerticalDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalDataSettings) *NlpVerticalDataSettings {
		return &v
	}).(NlpVerticalDataSettingsPtrOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o NlpVerticalDataSettingsOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v NlpVerticalDataSettings) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o NlpVerticalDataSettingsOutput) TestData() TestDataSettingsPtrOutput {
	return o.ApplyT(func(v NlpVerticalDataSettings) *TestDataSettings { return v.TestData }).(TestDataSettingsPtrOutput)
}

// [Required] Training data input.
func (o NlpVerticalDataSettingsOutput) TrainingData() TrainingDataSettingsOutput {
	return o.ApplyT(func(v NlpVerticalDataSettings) TrainingDataSettings { return v.TrainingData }).(TrainingDataSettingsOutput)
}

// Validation data inputs.
func (o NlpVerticalDataSettingsOutput) ValidationData() NlpVerticalValidationDataSettingsPtrOutput {
	return o.ApplyT(func(v NlpVerticalDataSettings) *NlpVerticalValidationDataSettings { return v.ValidationData }).(NlpVerticalValidationDataSettingsPtrOutput)
}

type NlpVerticalDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalDataSettings)(nil)).Elem()
}

func (o NlpVerticalDataSettingsPtrOutput) ToNlpVerticalDataSettingsPtrOutput() NlpVerticalDataSettingsPtrOutput {
	return o
}

func (o NlpVerticalDataSettingsPtrOutput) ToNlpVerticalDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalDataSettingsPtrOutput {
	return o
}

func (o NlpVerticalDataSettingsPtrOutput) Elem() NlpVerticalDataSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettings) NlpVerticalDataSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalDataSettings
		return ret
	}).(NlpVerticalDataSettingsOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o NlpVerticalDataSettingsPtrOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettings) *string {
		if v == nil {
			return nil
		}
		return &v.TargetColumnName
	}).(pulumi.StringPtrOutput)
}

// Test data input.
func (o NlpVerticalDataSettingsPtrOutput) TestData() TestDataSettingsPtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettings) *TestDataSettings {
		if v == nil {
			return nil
		}
		return v.TestData
	}).(TestDataSettingsPtrOutput)
}

// [Required] Training data input.
func (o NlpVerticalDataSettingsPtrOutput) TrainingData() TrainingDataSettingsPtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettings) *TrainingDataSettings {
		if v == nil {
			return nil
		}
		return &v.TrainingData
	}).(TrainingDataSettingsPtrOutput)
}

// Validation data inputs.
func (o NlpVerticalDataSettingsPtrOutput) ValidationData() NlpVerticalValidationDataSettingsPtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettings) *NlpVerticalValidationDataSettings {
		if v == nil {
			return nil
		}
		return v.ValidationData
	}).(NlpVerticalValidationDataSettingsPtrOutput)
}

// Class for data inputs.
// NLP - Natural Language Processing.
type NlpVerticalDataSettingsResponse struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettingsResponse `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *NlpVerticalValidationDataSettingsResponse `pulumi:"validationData"`
}

// Defaults sets the appropriate defaults for NlpVerticalDataSettingsResponse
func (val *NlpVerticalDataSettingsResponse) Defaults() *NlpVerticalDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Class for data inputs.
// NLP - Natural Language Processing.
type NlpVerticalDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalDataSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalDataSettingsResponseOutput) ToNlpVerticalDataSettingsResponseOutput() NlpVerticalDataSettingsResponseOutput {
	return o
}

func (o NlpVerticalDataSettingsResponseOutput) ToNlpVerticalDataSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalDataSettingsResponseOutput {
	return o
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o NlpVerticalDataSettingsResponseOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v NlpVerticalDataSettingsResponse) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o NlpVerticalDataSettingsResponseOutput) TestData() TestDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v NlpVerticalDataSettingsResponse) *TestDataSettingsResponse { return v.TestData }).(TestDataSettingsResponsePtrOutput)
}

// [Required] Training data input.
func (o NlpVerticalDataSettingsResponseOutput) TrainingData() TrainingDataSettingsResponseOutput {
	return o.ApplyT(func(v NlpVerticalDataSettingsResponse) TrainingDataSettingsResponse { return v.TrainingData }).(TrainingDataSettingsResponseOutput)
}

// Validation data inputs.
func (o NlpVerticalDataSettingsResponseOutput) ValidationData() NlpVerticalValidationDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v NlpVerticalDataSettingsResponse) *NlpVerticalValidationDataSettingsResponse {
		return v.ValidationData
	}).(NlpVerticalValidationDataSettingsResponsePtrOutput)
}

type NlpVerticalDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalDataSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalDataSettingsResponsePtrOutput) ToNlpVerticalDataSettingsResponsePtrOutput() NlpVerticalDataSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalDataSettingsResponsePtrOutput) ToNlpVerticalDataSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalDataSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalDataSettingsResponsePtrOutput) Elem() NlpVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettingsResponse) NlpVerticalDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalDataSettingsResponse
		return ret
	}).(NlpVerticalDataSettingsResponseOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o NlpVerticalDataSettingsResponsePtrOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetColumnName
	}).(pulumi.StringPtrOutput)
}

// Test data input.
func (o NlpVerticalDataSettingsResponsePtrOutput) TestData() TestDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettingsResponse) *TestDataSettingsResponse {
		if v == nil {
			return nil
		}
		return v.TestData
	}).(TestDataSettingsResponsePtrOutput)
}

// [Required] Training data input.
func (o NlpVerticalDataSettingsResponsePtrOutput) TrainingData() TrainingDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettingsResponse) *TrainingDataSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.TrainingData
	}).(TrainingDataSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o NlpVerticalDataSettingsResponsePtrOutput) ValidationData() NlpVerticalValidationDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *NlpVerticalDataSettingsResponse) *NlpVerticalValidationDataSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationData
	}).(NlpVerticalValidationDataSettingsResponsePtrOutput)
}

type NlpVerticalFeaturizationSettings struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

// NlpVerticalFeaturizationSettingsInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs and NlpVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsInput` via:
//
//	NlpVerticalFeaturizationSettingsArgs{...}
type NlpVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput
	ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsOutput
}

type NlpVerticalFeaturizationSettingsArgs struct {
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
}

func (NlpVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return i.ToNlpVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput)
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalFeaturizationSettingsArgs) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsOutput).ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalFeaturizationSettingsPtrInput is an input type that accepts NlpVerticalFeaturizationSettingsArgs, NlpVerticalFeaturizationSettingsPtr and NlpVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalFeaturizationSettingsPtrInput` via:
//
//	        NlpVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput
	ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) NlpVerticalFeaturizationSettingsPtrOutput
}

type nlpVerticalFeaturizationSettingsPtrType NlpVerticalFeaturizationSettingsArgs

func NlpVerticalFeaturizationSettingsPtr(v *NlpVerticalFeaturizationSettingsArgs) NlpVerticalFeaturizationSettingsPtrInput {
	return (*nlpVerticalFeaturizationSettingsPtrType)(v)
}

func (*nlpVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return i.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalFeaturizationSettingsPtrType) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalFeaturizationSettingsPtrOutput)
}

type NlpVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutput() NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalFeaturizationSettingsOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalFeaturizationSettings) *NlpVerticalFeaturizationSettings {
		return &v
	}).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettings)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutput() NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) ToNlpVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsPtrOutput) Elem() NlpVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) NlpVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettings
		return ret
	}).(NlpVerticalFeaturizationSettingsOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponse struct {
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
}

type NlpVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutput() NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponseOutput) ToNlpVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponseOutput {
	return o
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

type NlpVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutput() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) ToNlpVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) Elem() NlpVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) NlpVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalFeaturizationSettingsResponse
		return ret
	}).(NlpVerticalFeaturizationSettingsResponseOutput)
}

// Dataset language, useful for the text data.
func (o NlpVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettings struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettings
func (val *NlpVerticalLimitSettings) Defaults() *NlpVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	return &tmp
}

// NlpVerticalLimitSettingsInput is an input type that accepts NlpVerticalLimitSettingsArgs and NlpVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsInput` via:
//
//	NlpVerticalLimitSettingsArgs{...}
type NlpVerticalLimitSettingsInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput
	ToNlpVerticalLimitSettingsOutputWithContext(context.Context) NlpVerticalLimitSettingsOutput
}

// Job execution constraints.
type NlpVerticalLimitSettingsArgs struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsArgs
func (val *NlpVerticalLimitSettingsArgs) Defaults() *NlpVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1)
	}
	return &tmp
}
func (NlpVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return i.ToNlpVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput)
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalLimitSettingsArgs) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsOutput).ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalLimitSettingsPtrInput is an input type that accepts NlpVerticalLimitSettingsArgs, NlpVerticalLimitSettingsPtr and NlpVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalLimitSettingsPtrInput` via:
//
//	        NlpVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput
	ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Context) NlpVerticalLimitSettingsPtrOutput
}

type nlpVerticalLimitSettingsPtrType NlpVerticalLimitSettingsArgs

func NlpVerticalLimitSettingsPtr(v *NlpVerticalLimitSettingsArgs) NlpVerticalLimitSettingsPtrInput {
	return (*nlpVerticalLimitSettingsPtrType)(v)
}

func (*nlpVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return i.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalLimitSettingsPtrType) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutput() NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsOutput {
	return o
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o.ToNlpVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalLimitSettingsOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalLimitSettings) *NlpVerticalLimitSettings {
		return &v
	}).(NlpVerticalLimitSettingsPtrOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettings)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutput() NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) ToNlpVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsPtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsPtrOutput) Elem() NlpVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) NlpVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettings
		return ret
	}).(NlpVerticalLimitSettingsOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponse struct {
	// Maximum Concurrent AutoML iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Number of AutoML iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for NlpVerticalLimitSettingsResponse
func (val *NlpVerticalLimitSettingsResponse) Defaults() *NlpVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1
		tmp.MaxTrials = &maxTrials_
	}
	return &tmp
}

// Job execution constraints.
type NlpVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutput() NlpVerticalLimitSettingsResponseOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponseOutput) ToNlpVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponseOutput {
	return o
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlpVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type NlpVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutput() NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) ToNlpVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalLimitSettingsResponsePtrOutput) Elem() NlpVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) NlpVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalLimitSettingsResponse
		return ret
	}).(NlpVerticalLimitSettingsResponseOutput)
}

// Maximum Concurrent AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Number of AutoML iterations.
func (o NlpVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o NlpVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlpVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type NlpVerticalValidationDataSettings struct {
	// Validation data MLTable.
	Data *MLTableJobInput `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for NlpVerticalValidationDataSettings
func (val *NlpVerticalValidationDataSettings) Defaults() *NlpVerticalValidationDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// NlpVerticalValidationDataSettingsInput is an input type that accepts NlpVerticalValidationDataSettingsArgs and NlpVerticalValidationDataSettingsOutput values.
// You can construct a concrete instance of `NlpVerticalValidationDataSettingsInput` via:
//
//	NlpVerticalValidationDataSettingsArgs{...}
type NlpVerticalValidationDataSettingsInput interface {
	pulumi.Input

	ToNlpVerticalValidationDataSettingsOutput() NlpVerticalValidationDataSettingsOutput
	ToNlpVerticalValidationDataSettingsOutputWithContext(context.Context) NlpVerticalValidationDataSettingsOutput
}

type NlpVerticalValidationDataSettingsArgs struct {
	// Validation data MLTable.
	Data MLTableJobInputPtrInput `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for NlpVerticalValidationDataSettingsArgs
func (val *NlpVerticalValidationDataSettingsArgs) Defaults() *NlpVerticalValidationDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (NlpVerticalValidationDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalValidationDataSettings)(nil)).Elem()
}

func (i NlpVerticalValidationDataSettingsArgs) ToNlpVerticalValidationDataSettingsOutput() NlpVerticalValidationDataSettingsOutput {
	return i.ToNlpVerticalValidationDataSettingsOutputWithContext(context.Background())
}

func (i NlpVerticalValidationDataSettingsArgs) ToNlpVerticalValidationDataSettingsOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalValidationDataSettingsOutput)
}

func (i NlpVerticalValidationDataSettingsArgs) ToNlpVerticalValidationDataSettingsPtrOutput() NlpVerticalValidationDataSettingsPtrOutput {
	return i.ToNlpVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i NlpVerticalValidationDataSettingsArgs) ToNlpVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalValidationDataSettingsOutput).ToNlpVerticalValidationDataSettingsPtrOutputWithContext(ctx)
}

// NlpVerticalValidationDataSettingsPtrInput is an input type that accepts NlpVerticalValidationDataSettingsArgs, NlpVerticalValidationDataSettingsPtr and NlpVerticalValidationDataSettingsPtrOutput values.
// You can construct a concrete instance of `NlpVerticalValidationDataSettingsPtrInput` via:
//
//	        NlpVerticalValidationDataSettingsArgs{...}
//
//	or:
//
//	        nil
type NlpVerticalValidationDataSettingsPtrInput interface {
	pulumi.Input

	ToNlpVerticalValidationDataSettingsPtrOutput() NlpVerticalValidationDataSettingsPtrOutput
	ToNlpVerticalValidationDataSettingsPtrOutputWithContext(context.Context) NlpVerticalValidationDataSettingsPtrOutput
}

type nlpVerticalValidationDataSettingsPtrType NlpVerticalValidationDataSettingsArgs

func NlpVerticalValidationDataSettingsPtr(v *NlpVerticalValidationDataSettingsArgs) NlpVerticalValidationDataSettingsPtrInput {
	return (*nlpVerticalValidationDataSettingsPtrType)(v)
}

func (*nlpVerticalValidationDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalValidationDataSettings)(nil)).Elem()
}

func (i *nlpVerticalValidationDataSettingsPtrType) ToNlpVerticalValidationDataSettingsPtrOutput() NlpVerticalValidationDataSettingsPtrOutput {
	return i.ToNlpVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i *nlpVerticalValidationDataSettingsPtrType) ToNlpVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlpVerticalValidationDataSettingsPtrOutput)
}

type NlpVerticalValidationDataSettingsOutput struct{ *pulumi.OutputState }

func (NlpVerticalValidationDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalValidationDataSettings)(nil)).Elem()
}

func (o NlpVerticalValidationDataSettingsOutput) ToNlpVerticalValidationDataSettingsOutput() NlpVerticalValidationDataSettingsOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsOutput) ToNlpVerticalValidationDataSettingsOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsOutput) ToNlpVerticalValidationDataSettingsPtrOutput() NlpVerticalValidationDataSettingsPtrOutput {
	return o.ToNlpVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (o NlpVerticalValidationDataSettingsOutput) ToNlpVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlpVerticalValidationDataSettings) *NlpVerticalValidationDataSettings {
		return &v
	}).(NlpVerticalValidationDataSettingsPtrOutput)
}

// Validation data MLTable.
func (o NlpVerticalValidationDataSettingsOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v NlpVerticalValidationDataSettings) *MLTableJobInput { return v.Data }).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o NlpVerticalValidationDataSettingsOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpVerticalValidationDataSettings) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type NlpVerticalValidationDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalValidationDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalValidationDataSettings)(nil)).Elem()
}

func (o NlpVerticalValidationDataSettingsPtrOutput) ToNlpVerticalValidationDataSettingsPtrOutput() NlpVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsPtrOutput) ToNlpVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsPtrOutput) Elem() NlpVerticalValidationDataSettingsOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettings) NlpVerticalValidationDataSettings {
		if v != nil {
			return *v
		}
		var ret NlpVerticalValidationDataSettings
		return ret
	}).(NlpVerticalValidationDataSettingsOutput)
}

// Validation data MLTable.
func (o NlpVerticalValidationDataSettingsPtrOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettings) *MLTableJobInput {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputPtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o NlpVerticalValidationDataSettingsPtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

type NlpVerticalValidationDataSettingsResponse struct {
	// Validation data MLTable.
	Data *MLTableJobInputResponse `pulumi:"data"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for NlpVerticalValidationDataSettingsResponse
func (val *NlpVerticalValidationDataSettingsResponse) Defaults() *NlpVerticalValidationDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

type NlpVerticalValidationDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (NlpVerticalValidationDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlpVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalValidationDataSettingsResponseOutput) ToNlpVerticalValidationDataSettingsResponseOutput() NlpVerticalValidationDataSettingsResponseOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsResponseOutput) ToNlpVerticalValidationDataSettingsResponseOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsResponseOutput {
	return o
}

// Validation data MLTable.
func (o NlpVerticalValidationDataSettingsResponseOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v NlpVerticalValidationDataSettingsResponse) *MLTableJobInputResponse { return v.Data }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o NlpVerticalValidationDataSettingsResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NlpVerticalValidationDataSettingsResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type NlpVerticalValidationDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NlpVerticalValidationDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlpVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o NlpVerticalValidationDataSettingsResponsePtrOutput) ToNlpVerticalValidationDataSettingsResponsePtrOutput() NlpVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsResponsePtrOutput) ToNlpVerticalValidationDataSettingsResponsePtrOutputWithContext(ctx context.Context) NlpVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o NlpVerticalValidationDataSettingsResponsePtrOutput) Elem() NlpVerticalValidationDataSettingsResponseOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettingsResponse) NlpVerticalValidationDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret NlpVerticalValidationDataSettingsResponse
		return ret
	}).(NlpVerticalValidationDataSettingsResponseOutput)
}

// Validation data MLTable.
func (o NlpVerticalValidationDataSettingsResponsePtrOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettingsResponse) *MLTableJobInputResponse {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputResponsePtrOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o NlpVerticalValidationDataSettingsResponsePtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NlpVerticalValidationDataSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// NoneDatastoreCredentialsInput is an input type that accepts NoneDatastoreCredentialsArgs and NoneDatastoreCredentialsOutput values.
// You can construct a concrete instance of `NoneDatastoreCredentialsInput` via:
//
//	NoneDatastoreCredentialsArgs{...}
type NoneDatastoreCredentialsInput interface {
	pulumi.Input

	ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput
	ToNoneDatastoreCredentialsOutputWithContext(context.Context) NoneDatastoreCredentialsOutput
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
}

func (NoneDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return i.ToNoneDatastoreCredentialsOutputWithContext(context.Background())
}

func (i NoneDatastoreCredentialsArgs) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoneDatastoreCredentialsOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentials)(nil)).Elem()
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutput() NoneDatastoreCredentialsOutput {
	return o
}

func (o NoneDatastoreCredentialsOutput) ToNoneDatastoreCredentialsOutputWithContext(ctx context.Context) NoneDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'None'.
	CredentialsType string `pulumi:"credentialsType"`
}

// Empty/none datastore credentials.
type NoneDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (NoneDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoneDatastoreCredentialsResponse)(nil)).Elem()
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutput() NoneDatastoreCredentialsResponseOutput {
	return o
}

func (o NoneDatastoreCredentialsResponseOutput) ToNoneDatastoreCredentialsResponseOutputWithContext(ctx context.Context) NoneDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'None'.
func (o NoneDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v NoneDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Optimization objective.
type Objective struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// ObjectiveInput is an input type that accepts ObjectiveArgs and ObjectiveOutput values.
// You can construct a concrete instance of `ObjectiveInput` via:
//
//	ObjectiveArgs{...}
type ObjectiveInput interface {
	pulumi.Input

	ToObjectiveOutput() ObjectiveOutput
	ToObjectiveOutputWithContext(context.Context) ObjectiveOutput
}

// Optimization objective.
type ObjectiveArgs struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal pulumi.StringInput `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric pulumi.StringInput `pulumi:"primaryMetric"`
}

func (ObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (i ObjectiveArgs) ToObjectiveOutput() ObjectiveOutput {
	return i.ToObjectiveOutputWithContext(context.Background())
}

func (i ObjectiveArgs) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectiveOutput)
}

// Optimization objective.
type ObjectiveOutput struct{ *pulumi.OutputState }

func (ObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Objective)(nil)).Elem()
}

func (o ObjectiveOutput) ToObjectiveOutput() ObjectiveOutput {
	return o
}

func (o ObjectiveOutput) ToObjectiveOutputWithContext(ctx context.Context) ObjectiveOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v Objective) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Optimization objective.
type ObjectiveResponse struct {
	// [Required] Defines supported metric goals for hyperparameter tuning
	Goal string `pulumi:"goal"`
	// [Required] Name of the metric to optimize.
	PrimaryMetric string `pulumi:"primaryMetric"`
}

// Optimization objective.
type ObjectiveResponseOutput struct{ *pulumi.OutputState }

func (ObjectiveResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectiveResponse)(nil)).Elem()
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutput() ObjectiveResponseOutput {
	return o
}

func (o ObjectiveResponseOutput) ToObjectiveResponseOutputWithContext(ctx context.Context) ObjectiveResponseOutput {
	return o
}

// [Required] Defines supported metric goals for hyperparameter tuning
func (o ObjectiveResponseOutput) Goal() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.Goal }).(pulumi.StringOutput)
}

// [Required] Name of the metric to optimize.
func (o ObjectiveResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v ObjectiveResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// Online endpoint configuration
type OnlineEndpointType struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys *EndpointAuthKeys `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointType
func (val *OnlineEndpointType) Defaults() *OnlineEndpointType {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// OnlineEndpointTypeInput is an input type that accepts OnlineEndpointTypeArgs and OnlineEndpointTypeOutput values.
// You can construct a concrete instance of `OnlineEndpointTypeInput` via:
//
//	OnlineEndpointTypeArgs{...}
type OnlineEndpointTypeInput interface {
	pulumi.Input

	ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput
	ToOnlineEndpointTypeOutputWithContext(context.Context) OnlineEndpointTypeOutput
}

// Online endpoint configuration
type OnlineEndpointTypeArgs struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode pulumi.StringInput `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute pulumi.StringPtrInput `pulumi:"compute"`
	// Description of the inference endpoint.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// EndpointAuthKeys to set initially on an Endpoint.
	// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
	Keys EndpointAuthKeysPtrInput `pulumi:"keys"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic pulumi.IntMapInput `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess pulumi.StringPtrInput `pulumi:"publicNetworkAccess"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic pulumi.IntMapInput `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointTypeArgs
func (val *OnlineEndpointTypeArgs) Defaults() *OnlineEndpointTypeArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		tmp.PublicNetworkAccess = pulumi.StringPtr("Enabled")
	}
	return &tmp
}
func (OnlineEndpointTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return i.ToOnlineEndpointTypeOutputWithContext(context.Background())
}

func (i OnlineEndpointTypeArgs) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineEndpointTypeOutput)
}

// Online endpoint configuration
type OnlineEndpointTypeOutput struct{ *pulumi.OutputState }

func (OnlineEndpointTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointType)(nil)).Elem()
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutput() OnlineEndpointTypeOutput {
	return o
}

func (o OnlineEndpointTypeOutput) ToOnlineEndpointTypeOutputWithContext(ctx context.Context) OnlineEndpointTypeOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointTypeOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointType) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointTypeOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// EndpointAuthKeys to set initially on an Endpoint.
// This property will always be returned as null. AuthKey values must be retrieved using the ListKeys API.
func (o OnlineEndpointTypeOutput) Keys() EndpointAuthKeysPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *EndpointAuthKeys { return v.Keys }).(EndpointAuthKeysPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointTypeOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointTypeOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointTypeOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointType) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointTypeOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointType) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online endpoint configuration
type OnlineEndpointResponse struct {
	// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
	AuthMode string `pulumi:"authMode"`
	// ARM resource ID of the compute if it exists.
	// optional
	Compute *string `pulumi:"compute"`
	// Description of the inference endpoint.
	Description *string `pulumi:"description"`
	// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
	MirrorTraffic map[string]int `pulumi:"mirrorTraffic"`
	// Property dictionary. Properties can be added, but not removed or altered.
	Properties map[string]string `pulumi:"properties"`
	// Provisioning state for the endpoint.
	ProvisioningState string `pulumi:"provisioningState"`
	// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
	PublicNetworkAccess *string `pulumi:"publicNetworkAccess"`
	// Endpoint URI.
	ScoringUri string `pulumi:"scoringUri"`
	// Endpoint Swagger URI.
	SwaggerUri string `pulumi:"swaggerUri"`
	// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
	Traffic map[string]int `pulumi:"traffic"`
}

// Defaults sets the appropriate defaults for OnlineEndpointResponse
func (val *OnlineEndpointResponse) Defaults() *OnlineEndpointResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.PublicNetworkAccess == nil {
		publicNetworkAccess_ := "Enabled"
		tmp.PublicNetworkAccess = &publicNetworkAccess_
	}
	return &tmp
}

// Online endpoint configuration
type OnlineEndpointResponseOutput struct{ *pulumi.OutputState }

func (OnlineEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineEndpointResponse)(nil)).Elem()
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutput() OnlineEndpointResponseOutput {
	return o
}

func (o OnlineEndpointResponseOutput) ToOnlineEndpointResponseOutputWithContext(ctx context.Context) OnlineEndpointResponseOutput {
	return o
}

// [Required] Use 'Key' for key based authentication and 'AMLToken' for Azure Machine Learning token-based authentication. 'Key' doesn't expire but 'AMLToken' does.
func (o OnlineEndpointResponseOutput) AuthMode() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.AuthMode }).(pulumi.StringOutput)
}

// ARM resource ID of the compute if it exists.
// optional
func (o OnlineEndpointResponseOutput) Compute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Compute }).(pulumi.StringPtrOutput)
}

// Description of the inference endpoint.
func (o OnlineEndpointResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Percentage of traffic to be mirrored to each deployment without using returned scoring. Traffic values need to sum to utmost 50.
func (o OnlineEndpointResponseOutput) MirrorTraffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.MirrorTraffic }).(pulumi.IntMapOutput)
}

// Property dictionary. Properties can be added, but not removed or altered.
func (o OnlineEndpointResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Provisioning state for the endpoint.
func (o OnlineEndpointResponseOutput) ProvisioningState() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ProvisioningState }).(pulumi.StringOutput)
}

// Set to "Enabled" for endpoints that should allow public access when Private Link is enabled.
func (o OnlineEndpointResponseOutput) PublicNetworkAccess() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) *string { return v.PublicNetworkAccess }).(pulumi.StringPtrOutput)
}

// Endpoint URI.
func (o OnlineEndpointResponseOutput) ScoringUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.ScoringUri }).(pulumi.StringOutput)
}

// Endpoint Swagger URI.
func (o OnlineEndpointResponseOutput) SwaggerUri() pulumi.StringOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) string { return v.SwaggerUri }).(pulumi.StringOutput)
}

// Percentage of traffic from endpoint to divert to each deployment. Traffic values need to sum to 100.
func (o OnlineEndpointResponseOutput) Traffic() pulumi.IntMapOutput {
	return o.ApplyT(func(v OnlineEndpointResponse) map[string]int { return v.Traffic }).(pulumi.IntMapOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettings struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettings
func (val *OnlineRequestSettings) Defaults() *OnlineRequestSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// OnlineRequestSettingsInput is an input type that accepts OnlineRequestSettingsArgs and OnlineRequestSettingsOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsInput` via:
//
//	OnlineRequestSettingsArgs{...}
type OnlineRequestSettingsInput interface {
	pulumi.Input

	ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput
	ToOnlineRequestSettingsOutputWithContext(context.Context) OnlineRequestSettingsOutput
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsArgs struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance pulumi.IntPtrInput `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait pulumi.StringPtrInput `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout pulumi.StringPtrInput `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsArgs
func (val *OnlineRequestSettingsArgs) Defaults() *OnlineRequestSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		tmp.MaxConcurrentRequestsPerInstance = pulumi.IntPtr(1)
	}
	if tmp.MaxQueueWait == nil {
		tmp.MaxQueueWait = pulumi.StringPtr("PT0.5S")
	}
	if tmp.RequestTimeout == nil {
		tmp.RequestTimeout = pulumi.StringPtr("PT5S")
	}
	return &tmp
}
func (OnlineRequestSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return i.ToOnlineRequestSettingsOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput)
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i OnlineRequestSettingsArgs) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsOutput).ToOnlineRequestSettingsPtrOutputWithContext(ctx)
}

// OnlineRequestSettingsPtrInput is an input type that accepts OnlineRequestSettingsArgs, OnlineRequestSettingsPtr and OnlineRequestSettingsPtrOutput values.
// You can construct a concrete instance of `OnlineRequestSettingsPtrInput` via:
//
//	        OnlineRequestSettingsArgs{...}
//
//	or:
//
//	        nil
type OnlineRequestSettingsPtrInput interface {
	pulumi.Input

	ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput
	ToOnlineRequestSettingsPtrOutputWithContext(context.Context) OnlineRequestSettingsPtrOutput
}

type onlineRequestSettingsPtrType OnlineRequestSettingsArgs

func OnlineRequestSettingsPtr(v *OnlineRequestSettingsArgs) OnlineRequestSettingsPtrInput {
	return (*onlineRequestSettingsPtrType)(v)
}

func (*onlineRequestSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return i.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (i *onlineRequestSettingsPtrType) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnlineRequestSettingsPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutput() OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsOutputWithContext(ctx context.Context) OnlineRequestSettingsOutput {
	return o
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o.ToOnlineRequestSettingsPtrOutputWithContext(context.Background())
}

func (o OnlineRequestSettingsOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnlineRequestSettings) *OnlineRequestSettings {
		return &v
	}).(OnlineRequestSettingsPtrOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettings) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsPtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettings)(nil)).Elem()
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutput() OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) ToOnlineRequestSettingsPtrOutputWithContext(ctx context.Context) OnlineRequestSettingsPtrOutput {
	return o
}

func (o OnlineRequestSettingsPtrOutput) Elem() OnlineRequestSettingsOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) OnlineRequestSettings {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettings
		return ret
	}).(OnlineRequestSettingsOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsPtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsPtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsPtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettings) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponse struct {
	// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
	MaxConcurrentRequestsPerInstance *int `pulumi:"maxConcurrentRequestsPerInstance"`
	// The maximum amount of time a request will stay in the queue in ISO 8601 format.
	// Defaults to 500ms.
	MaxQueueWait *string `pulumi:"maxQueueWait"`
	// The scoring timeout in ISO 8601 format.
	// Defaults to 5000ms.
	RequestTimeout *string `pulumi:"requestTimeout"`
}

// Defaults sets the appropriate defaults for OnlineRequestSettingsResponse
func (val *OnlineRequestSettingsResponse) Defaults() *OnlineRequestSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxConcurrentRequestsPerInstance == nil {
		maxConcurrentRequestsPerInstance_ := 1
		tmp.MaxConcurrentRequestsPerInstance = &maxConcurrentRequestsPerInstance_
	}
	if tmp.MaxQueueWait == nil {
		maxQueueWait_ := "PT0.5S"
		tmp.MaxQueueWait = &maxQueueWait_
	}
	if tmp.RequestTimeout == nil {
		requestTimeout_ := "PT5S"
		tmp.RequestTimeout = &requestTimeout_
	}
	return &tmp
}

// Online deployment scoring requests configuration.
type OnlineRequestSettingsResponseOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutput() OnlineRequestSettingsResponseOutput {
	return o
}

func (o OnlineRequestSettingsResponseOutput) ToOnlineRequestSettingsResponseOutputWithContext(ctx context.Context) OnlineRequestSettingsResponseOutput {
	return o
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponseOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *int { return v.MaxConcurrentRequestsPerInstance }).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsResponseOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.MaxQueueWait }).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponseOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnlineRequestSettingsResponse) *string { return v.RequestTimeout }).(pulumi.StringPtrOutput)
}

type OnlineRequestSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (OnlineRequestSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnlineRequestSettingsResponse)(nil)).Elem()
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutput() OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) ToOnlineRequestSettingsResponsePtrOutputWithContext(ctx context.Context) OnlineRequestSettingsResponsePtrOutput {
	return o
}

func (o OnlineRequestSettingsResponsePtrOutput) Elem() OnlineRequestSettingsResponseOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) OnlineRequestSettingsResponse {
		if v != nil {
			return *v
		}
		var ret OnlineRequestSettingsResponse
		return ret
	}).(OnlineRequestSettingsResponseOutput)
}

// The number of maximum concurrent requests per node allowed per deployment. Defaults to 1.
func (o OnlineRequestSettingsResponsePtrOutput) MaxConcurrentRequestsPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentRequestsPerInstance
	}).(pulumi.IntPtrOutput)
}

// The maximum amount of time a request will stay in the queue in ISO 8601 format.
// Defaults to 500ms.
func (o OnlineRequestSettingsResponsePtrOutput) MaxQueueWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.MaxQueueWait
	}).(pulumi.StringPtrOutput)
}

// The scoring timeout in ISO 8601 format.
// Defaults to 5000ms.
func (o OnlineRequestSettingsResponsePtrOutput) RequestTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnlineRequestSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.RequestTimeout
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReference struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// OutputPathAssetReferenceInput is an input type that accepts OutputPathAssetReferenceArgs and OutputPathAssetReferenceOutput values.
// You can construct a concrete instance of `OutputPathAssetReferenceInput` via:
//
//	OutputPathAssetReferenceArgs{...}
type OutputPathAssetReferenceInput interface {
	pulumi.Input

	ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput
	ToOutputPathAssetReferenceOutputWithContext(context.Context) OutputPathAssetReferenceOutput
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceArgs struct {
	// ARM resource ID of the job.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType pulumi.StringInput `pulumi:"referenceType"`
}

func (OutputPathAssetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return i.ToOutputPathAssetReferenceOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput)
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i OutputPathAssetReferenceArgs) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferenceOutput).ToOutputPathAssetReferencePtrOutputWithContext(ctx)
}

// OutputPathAssetReferencePtrInput is an input type that accepts OutputPathAssetReferenceArgs, OutputPathAssetReferencePtr and OutputPathAssetReferencePtrOutput values.
// You can construct a concrete instance of `OutputPathAssetReferencePtrInput` via:
//
//	        OutputPathAssetReferenceArgs{...}
//
//	or:
//
//	        nil
type OutputPathAssetReferencePtrInput interface {
	pulumi.Input

	ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput
	ToOutputPathAssetReferencePtrOutputWithContext(context.Context) OutputPathAssetReferencePtrOutput
}

type outputPathAssetReferencePtrType OutputPathAssetReferenceArgs

func OutputPathAssetReferencePtr(v *OutputPathAssetReferenceArgs) OutputPathAssetReferencePtrInput {
	return (*outputPathAssetReferencePtrType)(v)
}

func (*outputPathAssetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return i.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (i *outputPathAssetReferencePtrType) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPathAssetReferencePtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutput() OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferenceOutputWithContext(ctx context.Context) OutputPathAssetReferenceOutput {
	return o
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o.ToOutputPathAssetReferencePtrOutputWithContext(context.Background())
}

func (o OutputPathAssetReferenceOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputPathAssetReference) *OutputPathAssetReference {
		return &v
	}).(OutputPathAssetReferencePtrOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReference) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReference) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferencePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReference)(nil)).Elem()
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutput() OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) ToOutputPathAssetReferencePtrOutputWithContext(ctx context.Context) OutputPathAssetReferencePtrOutput {
	return o
}

func (o OutputPathAssetReferencePtrOutput) Elem() OutputPathAssetReferenceOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) OutputPathAssetReference {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReference
		return ret
	}).(OutputPathAssetReferenceOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferencePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferencePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponse struct {
	// ARM resource ID of the job.
	JobId *string `pulumi:"jobId"`
	// The path of the file/directory in the job output.
	Path *string `pulumi:"path"`
	// Enum to determine which reference method to use for an asset.
	// Expected value is 'OutputPath'.
	ReferenceType string `pulumi:"referenceType"`
}

// Reference to an asset via its path in a job output.
type OutputPathAssetReferenceResponseOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutput() OutputPathAssetReferenceResponseOutput {
	return o
}

func (o OutputPathAssetReferenceResponseOutput) ToOutputPathAssetReferenceResponseOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponseOutput {
	return o
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponseOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponseOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponseOutput) ReferenceType() pulumi.StringOutput {
	return o.ApplyT(func(v OutputPathAssetReferenceResponse) string { return v.ReferenceType }).(pulumi.StringOutput)
}

type OutputPathAssetReferenceResponsePtrOutput struct{ *pulumi.OutputState }

func (OutputPathAssetReferenceResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputPathAssetReferenceResponse)(nil)).Elem()
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutput() OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) ToOutputPathAssetReferenceResponsePtrOutputWithContext(ctx context.Context) OutputPathAssetReferenceResponsePtrOutput {
	return o
}

func (o OutputPathAssetReferenceResponsePtrOutput) Elem() OutputPathAssetReferenceResponseOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) OutputPathAssetReferenceResponse {
		if v != nil {
			return *v
		}
		var ret OutputPathAssetReferenceResponse
		return ret
	}).(OutputPathAssetReferenceResponseOutput)
}

// ARM resource ID of the job.
func (o OutputPathAssetReferenceResponsePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The path of the file/directory in the job output.
func (o OutputPathAssetReferenceResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Enum to determine which reference method to use for an asset.
// Expected value is 'OutputPath'.
func (o OutputPathAssetReferenceResponsePtrOutput) ReferenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputPathAssetReferenceResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ReferenceType
	}).(pulumi.StringPtrOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJob struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJob
func (val *PipelineJob) Defaults() *PipelineJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// PipelineJobInput is an input type that accepts PipelineJobArgs and PipelineJobOutput values.
// You can construct a concrete instance of `PipelineJobInput` via:
//
//	PipelineJobArgs{...}
type PipelineJobInput interface {
	pulumi.Input

	ToPipelineJobOutput() PipelineJobOutput
	ToPipelineJobOutputWithContext(context.Context) PipelineJobOutput
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobArgs struct {
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs pulumi.MapInput `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule pulumi.Input `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings pulumi.Input `pulumi:"settings"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobArgs
func (val *PipelineJobArgs) Defaults() *PipelineJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (PipelineJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (i PipelineJobArgs) ToPipelineJobOutput() PipelineJobOutput {
	return i.ToPipelineJobOutputWithContext(context.Background())
}

func (i PipelineJobArgs) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineJobOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobOutput struct{ *pulumi.OutputState }

func (PipelineJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJob)(nil)).Elem()
}

func (o PipelineJobOutput) ToPipelineJobOutput() PipelineJobOutput {
	return o
}

func (o PipelineJobOutput) ToPipelineJobOutputWithContext(ctx context.Context) PipelineJobOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o PipelineJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Outputs for the pipeline job
func (o PipelineJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o PipelineJobOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJob) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponse struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Inputs for the pipeline job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Pipeline'.
	JobType string `pulumi:"jobType"`
	// Jobs construct the Pipeline Job.
	Jobs map[string]interface{} `pulumi:"jobs"`
	// Outputs for the pipeline job
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Pipeline settings, for things like ContinueRunOnStepFailure etc.
	Settings interface{} `pulumi:"settings"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for PipelineJobResponse
func (val *PipelineJobResponse) Defaults() *PipelineJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// Pipeline Job definition: defines generic to MFE attributes.
type PipelineJobResponseOutput struct{ *pulumi.OutputState }

func (PipelineJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineJobResponse)(nil)).Elem()
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutput() PipelineJobResponseOutput {
	return o
}

func (o PipelineJobResponseOutput) ToPipelineJobResponseOutputWithContext(ctx context.Context) PipelineJobResponseOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o PipelineJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o PipelineJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o PipelineJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o PipelineJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o PipelineJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Inputs for the pipeline job.
func (o PipelineJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o PipelineJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PipelineJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Pipeline'.
func (o PipelineJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Jobs construct the Pipeline Job.
func (o PipelineJobResponseOutput) Jobs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Jobs }).(pulumi.MapOutput)
}

// Outputs for the pipeline job
func (o PipelineJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o PipelineJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o PipelineJobResponseOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o PipelineJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Pipeline settings, for things like ContinueRunOnStepFailure etc.
func (o PipelineJobResponseOutput) Settings() pulumi.AnyOutput {
	return o.ApplyT(func(v PipelineJobResponse) interface{} { return v.Settings }).(pulumi.AnyOutput)
}

// Status of the job.
func (o PipelineJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o PipelineJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v PipelineJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettings struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettings
func (val *ProbeSettings) Defaults() *ProbeSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// ProbeSettingsInput is an input type that accepts ProbeSettingsArgs and ProbeSettingsOutput values.
// You can construct a concrete instance of `ProbeSettingsInput` via:
//
//	ProbeSettingsArgs{...}
type ProbeSettingsInput interface {
	pulumi.Input

	ToProbeSettingsOutput() ProbeSettingsOutput
	ToProbeSettingsOutputWithContext(context.Context) ProbeSettingsOutput
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsArgs struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold pulumi.IntPtrInput `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay pulumi.StringPtrInput `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period pulumi.StringPtrInput `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold pulumi.IntPtrInput `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsArgs
func (val *ProbeSettingsArgs) Defaults() *ProbeSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		tmp.FailureThreshold = pulumi.IntPtr(30)
	}
	if tmp.Period == nil {
		tmp.Period = pulumi.StringPtr("PT10S")
	}
	if tmp.SuccessThreshold == nil {
		tmp.SuccessThreshold = pulumi.IntPtr(1)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT2S")
	}
	return &tmp
}
func (ProbeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (i ProbeSettingsArgs) ToProbeSettingsOutput() ProbeSettingsOutput {
	return i.ToProbeSettingsOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput)
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i ProbeSettingsArgs) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsOutput).ToProbeSettingsPtrOutputWithContext(ctx)
}

// ProbeSettingsPtrInput is an input type that accepts ProbeSettingsArgs, ProbeSettingsPtr and ProbeSettingsPtrOutput values.
// You can construct a concrete instance of `ProbeSettingsPtrInput` via:
//
//	        ProbeSettingsArgs{...}
//
//	or:
//
//	        nil
type ProbeSettingsPtrInput interface {
	pulumi.Input

	ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput
	ToProbeSettingsPtrOutputWithContext(context.Context) ProbeSettingsPtrOutput
}

type probeSettingsPtrType ProbeSettingsArgs

func ProbeSettingsPtr(v *ProbeSettingsArgs) ProbeSettingsPtrInput {
	return (*probeSettingsPtrType)(v)
}

func (*probeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return i.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (i *probeSettingsPtrType) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeSettingsPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsOutput struct{ *pulumi.OutputState }

func (ProbeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsOutput) ToProbeSettingsOutput() ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsOutputWithContext(ctx context.Context) ProbeSettingsOutput {
	return o
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o.ToProbeSettingsPtrOutputWithContext(context.Background())
}

func (o ProbeSettingsOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProbeSettings) *ProbeSettings {
		return &v
	}).(ProbeSettingsPtrOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettings)(nil)).Elem()
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutput() ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) ToProbeSettingsPtrOutputWithContext(ctx context.Context) ProbeSettingsPtrOutput {
	return o
}

func (o ProbeSettingsPtrOutput) Elem() ProbeSettingsOutput {
	return o.ApplyT(func(v *ProbeSettings) ProbeSettings {
		if v != nil {
			return *v
		}
		var ret ProbeSettings
		return ret
	}).(ProbeSettingsOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsPtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponse struct {
	// The number of failures to allow before returning an unhealthy status.
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The delay before the first probe in ISO 8601 format.
	InitialDelay *string `pulumi:"initialDelay"`
	// The length of time between probes in ISO 8601 format.
	Period *string `pulumi:"period"`
	// The number of successful probes before returning a healthy status.
	SuccessThreshold *int `pulumi:"successThreshold"`
	// The probe timeout in ISO 8601 format.
	Timeout *string `pulumi:"timeout"`
}

// Defaults sets the appropriate defaults for ProbeSettingsResponse
func (val *ProbeSettingsResponse) Defaults() *ProbeSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.FailureThreshold == nil {
		failureThreshold_ := 30
		tmp.FailureThreshold = &failureThreshold_
	}
	if tmp.Period == nil {
		period_ := "PT10S"
		tmp.Period = &period_
	}
	if tmp.SuccessThreshold == nil {
		successThreshold_ := 1
		tmp.SuccessThreshold = &successThreshold_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT2S"
		tmp.Timeout = &timeout_
	}
	return &tmp
}

// Deployment container liveness/readiness probe configuration.
type ProbeSettingsResponseOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutput() ProbeSettingsResponseOutput {
	return o
}

func (o ProbeSettingsResponseOutput) ToProbeSettingsResponseOutputWithContext(ctx context.Context) ProbeSettingsResponseOutput {
	return o
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponseOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponseOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.InitialDelay }).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Period }).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponseOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProbeSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type ProbeSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (ProbeSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeSettingsResponse)(nil)).Elem()
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutput() ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) ToProbeSettingsResponsePtrOutputWithContext(ctx context.Context) ProbeSettingsResponsePtrOutput {
	return o
}

func (o ProbeSettingsResponsePtrOutput) Elem() ProbeSettingsResponseOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) ProbeSettingsResponse {
		if v != nil {
			return *v
		}
		var ret ProbeSettingsResponse
		return ret
	}).(ProbeSettingsResponseOutput)
}

// The number of failures to allow before returning an unhealthy status.
func (o ProbeSettingsResponsePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

// The delay before the first probe in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) InitialDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.InitialDelay
	}).(pulumi.StringPtrOutput)
}

// The length of time between probes in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

// The number of successful probes before returning a healthy status.
func (o ProbeSettingsResponsePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

// The probe timeout in ISO 8601 format.
func (o ProbeSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbeSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// PyTorch distribution configuration.
type PyTorch struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorchInput is an input type that accepts PyTorchArgs and PyTorchOutput values.
// You can construct a concrete instance of `PyTorchInput` via:
//
//	PyTorchArgs{...}
type PyTorchInput interface {
	pulumi.Input

	ToPyTorchOutput() PyTorchOutput
	ToPyTorchOutputWithContext(context.Context) PyTorchOutput
}

// PyTorch distribution configuration.
type PyTorchArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance pulumi.IntPtrInput `pulumi:"processCountPerInstance"`
}

func (PyTorchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (i PyTorchArgs) ToPyTorchOutput() PyTorchOutput {
	return i.ToPyTorchOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput)
}

func (i PyTorchArgs) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i PyTorchArgs) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchOutput).ToPyTorchPtrOutputWithContext(ctx)
}

// PyTorchPtrInput is an input type that accepts PyTorchArgs, PyTorchPtr and PyTorchPtrOutput values.
// You can construct a concrete instance of `PyTorchPtrInput` via:
//
//	        PyTorchArgs{...}
//
//	or:
//
//	        nil
type PyTorchPtrInput interface {
	pulumi.Input

	ToPyTorchPtrOutput() PyTorchPtrOutput
	ToPyTorchPtrOutputWithContext(context.Context) PyTorchPtrOutput
}

type pyTorchPtrType PyTorchArgs

func PyTorchPtr(v *PyTorchArgs) PyTorchPtrInput {
	return (*pyTorchPtrType)(v)
}

func (*pyTorchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (i *pyTorchPtrType) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return i.ToPyTorchPtrOutputWithContext(context.Background())
}

func (i *pyTorchPtrType) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PyTorchPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchOutput struct{ *pulumi.OutputState }

func (PyTorchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorch)(nil)).Elem()
}

func (o PyTorchOutput) ToPyTorchOutput() PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchOutputWithContext(ctx context.Context) PyTorchOutput {
	return o
}

func (o PyTorchOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o.ToPyTorchPtrOutputWithContext(context.Background())
}

func (o PyTorchOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PyTorch) *PyTorch {
		return &v
	}).(PyTorchPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorch) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorch) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchPtrOutput struct{ *pulumi.OutputState }

func (PyTorchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorch)(nil)).Elem()
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutput() PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) ToPyTorchPtrOutputWithContext(ctx context.Context) PyTorchPtrOutput {
	return o
}

func (o PyTorchPtrOutput) Elem() PyTorchOutput {
	return o.ApplyT(func(v *PyTorch) PyTorch {
		if v != nil {
			return *v
		}
		var ret PyTorch
		return ret
	}).(PyTorchOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorch) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchPtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorch) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// PyTorch distribution configuration.
type PyTorchResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'PyTorch'.
	DistributionType string `pulumi:"distributionType"`
	// Number of processes per node.
	ProcessCountPerInstance *int `pulumi:"processCountPerInstance"`
}

// PyTorch distribution configuration.
type PyTorchResponseOutput struct{ *pulumi.OutputState }

func (PyTorchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutput() PyTorchResponseOutput {
	return o
}

func (o PyTorchResponseOutput) ToPyTorchResponseOutputWithContext(ctx context.Context) PyTorchResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v PyTorchResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of processes per node.
func (o PyTorchResponseOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PyTorchResponse) *int { return v.ProcessCountPerInstance }).(pulumi.IntPtrOutput)
}

type PyTorchResponsePtrOutput struct{ *pulumi.OutputState }

func (PyTorchResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PyTorchResponse)(nil)).Elem()
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutput() PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) ToPyTorchResponsePtrOutputWithContext(ctx context.Context) PyTorchResponsePtrOutput {
	return o
}

func (o PyTorchResponsePtrOutput) Elem() PyTorchResponseOutput {
	return o.ApplyT(func(v *PyTorchResponse) PyTorchResponse {
		if v != nil {
			return *v
		}
		var ret PyTorchResponse
		return ret
	}).(PyTorchResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'PyTorch'.
func (o PyTorchResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of processes per node.
func (o PyTorchResponsePtrOutput) ProcessCountPerInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PyTorchResponse) *int {
		if v == nil {
			return nil
		}
		return v.ProcessCountPerInstance
	}).(pulumi.IntPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithm struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithm
func (val *RandomSamplingAlgorithm) Defaults() *RandomSamplingAlgorithm {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// RandomSamplingAlgorithmInput is an input type that accepts RandomSamplingAlgorithmArgs and RandomSamplingAlgorithmOutput values.
// You can construct a concrete instance of `RandomSamplingAlgorithmInput` via:
//
//	RandomSamplingAlgorithmArgs{...}
type RandomSamplingAlgorithmInput interface {
	pulumi.Input

	ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput
	ToRandomSamplingAlgorithmOutputWithContext(context.Context) RandomSamplingAlgorithmOutput
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmArgs struct {
	// The specific type of random algorithm
	Rule pulumi.StringPtrInput `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType pulumi.StringInput `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed pulumi.IntPtrInput `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmArgs
func (val *RandomSamplingAlgorithmArgs) Defaults() *RandomSamplingAlgorithmArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		tmp.Rule = pulumi.StringPtr("Random")
	}
	return &tmp
}
func (RandomSamplingAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return i.ToRandomSamplingAlgorithmOutputWithContext(context.Background())
}

func (i RandomSamplingAlgorithmArgs) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RandomSamplingAlgorithmOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithm)(nil)).Elem()
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutput() RandomSamplingAlgorithmOutput {
	return o
}

func (o RandomSamplingAlgorithmOutput) ToRandomSamplingAlgorithmOutputWithContext(ctx context.Context) RandomSamplingAlgorithmOutput {
	return o
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithm) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponse struct {
	// The specific type of random algorithm
	Rule *string `pulumi:"rule"`
	// Expected value is 'Random'.
	SamplingAlgorithmType string `pulumi:"samplingAlgorithmType"`
	// An optional integer to use as the seed for random number generation
	Seed *int `pulumi:"seed"`
}

// Defaults sets the appropriate defaults for RandomSamplingAlgorithmResponse
func (val *RandomSamplingAlgorithmResponse) Defaults() *RandomSamplingAlgorithmResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Rule == nil {
		rule_ := "Random"
		tmp.Rule = &rule_
	}
	return &tmp
}

// Defines a Sampling Algorithm that generates values randomly
type RandomSamplingAlgorithmResponseOutput struct{ *pulumi.OutputState }

func (RandomSamplingAlgorithmResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RandomSamplingAlgorithmResponse)(nil)).Elem()
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutput() RandomSamplingAlgorithmResponseOutput {
	return o
}

func (o RandomSamplingAlgorithmResponseOutput) ToRandomSamplingAlgorithmResponseOutputWithContext(ctx context.Context) RandomSamplingAlgorithmResponseOutput {
	return o
}

// The specific type of random algorithm
func (o RandomSamplingAlgorithmResponseOutput) Rule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *string { return v.Rule }).(pulumi.StringPtrOutput)
}

// Expected value is 'Random'.
func (o RandomSamplingAlgorithmResponseOutput) SamplingAlgorithmType() pulumi.StringOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) string { return v.SamplingAlgorithmType }).(pulumi.StringOutput)
}

// An optional integer to use as the seed for random number generation
func (o RandomSamplingAlgorithmResponseOutput) Seed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RandomSamplingAlgorithmResponse) *int { return v.Seed }).(pulumi.IntPtrOutput)
}

// Recurrence schedule pattern definition
type RecurrencePattern struct {
	// [Required] List of hours for recurrence schedule pattern
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for recurrence schedule pattern
	Minutes []int `pulumi:"minutes"`
	// List of weekdays for recurrence schedule pattern
	Weekdays []string `pulumi:"weekdays"`
}

// RecurrencePatternInput is an input type that accepts RecurrencePatternArgs and RecurrencePatternOutput values.
// You can construct a concrete instance of `RecurrencePatternInput` via:
//
//	RecurrencePatternArgs{...}
type RecurrencePatternInput interface {
	pulumi.Input

	ToRecurrencePatternOutput() RecurrencePatternOutput
	ToRecurrencePatternOutputWithContext(context.Context) RecurrencePatternOutput
}

// Recurrence schedule pattern definition
type RecurrencePatternArgs struct {
	// [Required] List of hours for recurrence schedule pattern
	Hours pulumi.IntArrayInput `pulumi:"hours"`
	// [Required] List of minutes for recurrence schedule pattern
	Minutes pulumi.IntArrayInput `pulumi:"minutes"`
	// List of weekdays for recurrence schedule pattern
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
}

func (RecurrencePatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return i.ToRecurrencePatternOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput)
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i RecurrencePatternArgs) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternOutput).ToRecurrencePatternPtrOutputWithContext(ctx)
}

// RecurrencePatternPtrInput is an input type that accepts RecurrencePatternArgs, RecurrencePatternPtr and RecurrencePatternPtrOutput values.
// You can construct a concrete instance of `RecurrencePatternPtrInput` via:
//
//	        RecurrencePatternArgs{...}
//
//	or:
//
//	        nil
type RecurrencePatternPtrInput interface {
	pulumi.Input

	ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput
	ToRecurrencePatternPtrOutputWithContext(context.Context) RecurrencePatternPtrOutput
}

type recurrencePatternPtrType RecurrencePatternArgs

func RecurrencePatternPtr(v *RecurrencePatternArgs) RecurrencePatternPtrInput {
	return (*recurrencePatternPtrType)(v)
}

func (*recurrencePatternPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return i.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (i *recurrencePatternPtrType) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrencePatternPtrOutput)
}

// Recurrence schedule pattern definition
type RecurrencePatternOutput struct{ *pulumi.OutputState }

func (RecurrencePatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutput() RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternOutputWithContext(ctx context.Context) RecurrencePatternOutput {
	return o
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o.ToRecurrencePatternPtrOutputWithContext(context.Background())
}

func (o RecurrencePatternOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrencePattern) *RecurrencePattern {
		return &v
	}).(RecurrencePatternPtrOutput)
}

// [Required] List of hours for recurrence schedule pattern
func (o RecurrencePatternOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrencePattern) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for recurrence schedule pattern
func (o RecurrencePatternOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrencePattern) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of weekdays for recurrence schedule pattern
func (o RecurrencePatternOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrencePattern) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type RecurrencePatternPtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePattern)(nil)).Elem()
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutput() RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) ToRecurrencePatternPtrOutputWithContext(ctx context.Context) RecurrencePatternPtrOutput {
	return o
}

func (o RecurrencePatternPtrOutput) Elem() RecurrencePatternOutput {
	return o.ApplyT(func(v *RecurrencePattern) RecurrencePattern {
		if v != nil {
			return *v
		}
		var ret RecurrencePattern
		return ret
	}).(RecurrencePatternOutput)
}

// [Required] List of hours for recurrence schedule pattern
func (o RecurrencePatternPtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrencePattern) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for recurrence schedule pattern
func (o RecurrencePatternPtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrencePattern) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of weekdays for recurrence schedule pattern
func (o RecurrencePatternPtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrencePattern) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// Recurrence schedule pattern definition
type RecurrencePatternResponse struct {
	// [Required] List of hours for recurrence schedule pattern
	Hours []int `pulumi:"hours"`
	// [Required] List of minutes for recurrence schedule pattern
	Minutes []int `pulumi:"minutes"`
	// List of weekdays for recurrence schedule pattern
	Weekdays []string `pulumi:"weekdays"`
}

// Recurrence schedule pattern definition
type RecurrencePatternResponseOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutput() RecurrencePatternResponseOutput {
	return o
}

func (o RecurrencePatternResponseOutput) ToRecurrencePatternResponseOutputWithContext(ctx context.Context) RecurrencePatternResponseOutput {
	return o
}

// [Required] List of hours for recurrence schedule pattern
func (o RecurrencePatternResponseOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) []int { return v.Hours }).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for recurrence schedule pattern
func (o RecurrencePatternResponseOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) []int { return v.Minutes }).(pulumi.IntArrayOutput)
}

// List of weekdays for recurrence schedule pattern
func (o RecurrencePatternResponseOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecurrencePatternResponse) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

type RecurrencePatternResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrencePatternResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrencePatternResponse)(nil)).Elem()
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutput() RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) ToRecurrencePatternResponsePtrOutputWithContext(ctx context.Context) RecurrencePatternResponsePtrOutput {
	return o
}

func (o RecurrencePatternResponsePtrOutput) Elem() RecurrencePatternResponseOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) RecurrencePatternResponse {
		if v != nil {
			return *v
		}
		var ret RecurrencePatternResponse
		return ret
	}).(RecurrencePatternResponseOutput)
}

// [Required] List of hours for recurrence schedule pattern
func (o RecurrencePatternResponsePtrOutput) Hours() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) []int {
		if v == nil {
			return nil
		}
		return v.Hours
	}).(pulumi.IntArrayOutput)
}

// [Required] List of minutes for recurrence schedule pattern
func (o RecurrencePatternResponsePtrOutput) Minutes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) []int {
		if v == nil {
			return nil
		}
		return v.Minutes
	}).(pulumi.IntArrayOutput)
}

// List of weekdays for recurrence schedule pattern
func (o RecurrencePatternResponsePtrOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RecurrencePatternResponse) []string {
		if v == nil {
			return nil
		}
		return v.Weekdays
	}).(pulumi.StringArrayOutput)
}

// Recurrence schedule definition
type RecurrenceSchedule struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies frequency with with which to trigger schedule
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// Specifies the recurrence schedule pattern
	Pattern *RecurrencePattern `pulumi:"pattern"`
	// Specifies the schedule's status
	ScheduleStatus *string `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Recurrence'.
	ScheduleType string `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceSchedule
func (val *RecurrenceSchedule) Defaults() *RecurrenceSchedule {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		scheduleStatus_ := "Enabled"
		tmp.ScheduleStatus = &scheduleStatus_
	}
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// RecurrenceScheduleInput is an input type that accepts RecurrenceScheduleArgs and RecurrenceScheduleOutput values.
// You can construct a concrete instance of `RecurrenceScheduleInput` via:
//
//	RecurrenceScheduleArgs{...}
type RecurrenceScheduleInput interface {
	pulumi.Input

	ToRecurrenceScheduleOutput() RecurrenceScheduleOutput
	ToRecurrenceScheduleOutputWithContext(context.Context) RecurrenceScheduleOutput
}

// Recurrence schedule definition
type RecurrenceScheduleArgs struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// [Required] Specifies frequency with with which to trigger schedule
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval pulumi.IntInput `pulumi:"interval"`
	// Specifies the recurrence schedule pattern
	Pattern RecurrencePatternPtrInput `pulumi:"pattern"`
	// Specifies the schedule's status
	ScheduleStatus pulumi.StringPtrInput `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Recurrence'.
	ScheduleType pulumi.StringInput `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceScheduleArgs
func (val *RecurrenceScheduleArgs) Defaults() *RecurrenceScheduleArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		tmp.ScheduleStatus = pulumi.StringPtr("Enabled")
	}
	if tmp.TimeZone == nil {
		tmp.TimeZone = pulumi.StringPtr("UTC")
	}
	return &tmp
}
func (RecurrenceScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return i.ToRecurrenceScheduleOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput)
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i RecurrenceScheduleArgs) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceScheduleOutput).ToRecurrenceSchedulePtrOutputWithContext(ctx)
}

// RecurrenceSchedulePtrInput is an input type that accepts RecurrenceScheduleArgs, RecurrenceSchedulePtr and RecurrenceSchedulePtrOutput values.
// You can construct a concrete instance of `RecurrenceSchedulePtrInput` via:
//
//	        RecurrenceScheduleArgs{...}
//
//	or:
//
//	        nil
type RecurrenceSchedulePtrInput interface {
	pulumi.Input

	ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput
	ToRecurrenceSchedulePtrOutputWithContext(context.Context) RecurrenceSchedulePtrOutput
}

type recurrenceSchedulePtrType RecurrenceScheduleArgs

func RecurrenceSchedulePtr(v *RecurrenceScheduleArgs) RecurrenceSchedulePtrInput {
	return (*recurrenceSchedulePtrType)(v)
}

func (*recurrenceSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return i.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (i *recurrenceSchedulePtrType) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecurrenceSchedulePtrOutput)
}

// Recurrence schedule definition
type RecurrenceScheduleOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutput() RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceScheduleOutputWithContext(ctx context.Context) RecurrenceScheduleOutput {
	return o
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o.ToRecurrenceSchedulePtrOutputWithContext(context.Background())
}

func (o RecurrenceScheduleOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RecurrenceSchedule) *RecurrenceSchedule {
		return &v
	}).(RecurrenceSchedulePtrOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o RecurrenceScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies frequency with with which to trigger schedule
func (o RecurrenceScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceScheduleOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceSchedule) int { return v.Interval }).(pulumi.IntOutput)
}

// Specifies the recurrence schedule pattern
func (o RecurrenceScheduleOutput) Pattern() RecurrencePatternPtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *RecurrencePattern { return v.Pattern }).(RecurrencePatternPtrOutput)
}

// Specifies the schedule's status
func (o RecurrenceScheduleOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *string { return v.ScheduleStatus }).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Recurrence'.
func (o RecurrenceScheduleOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceSchedule) string { return v.ScheduleType }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o RecurrenceScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o RecurrenceScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceSchedule) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrenceSchedulePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceSchedule)(nil)).Elem()
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutput() RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) ToRecurrenceSchedulePtrOutputWithContext(ctx context.Context) RecurrenceSchedulePtrOutput {
	return o
}

func (o RecurrenceSchedulePtrOutput) Elem() RecurrenceScheduleOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) RecurrenceSchedule {
		if v != nil {
			return *v
		}
		var ret RecurrenceSchedule
		return ret
	}).(RecurrenceScheduleOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o RecurrenceSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies frequency with with which to trigger schedule
func (o RecurrenceSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceSchedulePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Specifies the recurrence schedule pattern
func (o RecurrenceSchedulePtrOutput) Pattern() RecurrencePatternPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *RecurrencePattern {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(RecurrencePatternPtrOutput)
}

// Specifies the schedule's status
func (o RecurrenceSchedulePtrOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleStatus
	}).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Recurrence'.
func (o RecurrenceSchedulePtrOutput) ScheduleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleType
	}).(pulumi.StringPtrOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o RecurrenceSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o RecurrenceSchedulePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceSchedule) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Recurrence schedule definition
type RecurrenceScheduleResponse struct {
	// Specifies end time of schedule in ISO 8601 format.
	// If not present, the schedule will run indefinitely
	EndTime *string `pulumi:"endTime"`
	// [Required] Specifies frequency with with which to trigger schedule
	Frequency string `pulumi:"frequency"`
	// [Required] Specifies schedule interval in conjunction with frequency
	Interval int `pulumi:"interval"`
	// Specifies the recurrence schedule pattern
	Pattern *RecurrencePatternResponse `pulumi:"pattern"`
	// Specifies the schedule's status
	ScheduleStatus *string `pulumi:"scheduleStatus"`
	// Enum to describe type of schedule
	// Expected value is 'Recurrence'.
	ScheduleType string `pulumi:"scheduleType"`
	// Specifies start time of schedule in ISO 8601 format.
	StartTime *string `pulumi:"startTime"`
	// Specifies time zone in which the schedule runs.
	// TimeZone should follow Windows time zone format.
	TimeZone *string `pulumi:"timeZone"`
}

// Defaults sets the appropriate defaults for RecurrenceScheduleResponse
func (val *RecurrenceScheduleResponse) Defaults() *RecurrenceScheduleResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ScheduleStatus == nil {
		scheduleStatus_ := "Enabled"
		tmp.ScheduleStatus = &scheduleStatus_
	}
	if tmp.TimeZone == nil {
		timeZone_ := "UTC"
		tmp.TimeZone = &timeZone_
	}
	return &tmp
}

// Recurrence schedule definition
type RecurrenceScheduleResponseOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutput() RecurrenceScheduleResponseOutput {
	return o
}

func (o RecurrenceScheduleResponseOutput) ToRecurrenceScheduleResponseOutputWithContext(ctx context.Context) RecurrenceScheduleResponseOutput {
	return o
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o RecurrenceScheduleResponseOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// [Required] Specifies frequency with with which to trigger schedule
func (o RecurrenceScheduleResponseOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) string { return v.Frequency }).(pulumi.StringOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceScheduleResponseOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) int { return v.Interval }).(pulumi.IntOutput)
}

// Specifies the recurrence schedule pattern
func (o RecurrenceScheduleResponseOutput) Pattern() RecurrencePatternResponsePtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *RecurrencePatternResponse { return v.Pattern }).(RecurrencePatternResponsePtrOutput)
}

// Specifies the schedule's status
func (o RecurrenceScheduleResponseOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *string { return v.ScheduleStatus }).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Recurrence'.
func (o RecurrenceScheduleResponseOutput) ScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) string { return v.ScheduleType }).(pulumi.StringOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o RecurrenceScheduleResponseOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o RecurrenceScheduleResponseOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RecurrenceScheduleResponse) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

type RecurrenceScheduleResponsePtrOutput struct{ *pulumi.OutputState }

func (RecurrenceScheduleResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecurrenceScheduleResponse)(nil)).Elem()
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutput() RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) ToRecurrenceScheduleResponsePtrOutputWithContext(ctx context.Context) RecurrenceScheduleResponsePtrOutput {
	return o
}

func (o RecurrenceScheduleResponsePtrOutput) Elem() RecurrenceScheduleResponseOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) RecurrenceScheduleResponse {
		if v != nil {
			return *v
		}
		var ret RecurrenceScheduleResponse
		return ret
	}).(RecurrenceScheduleResponseOutput)
}

// Specifies end time of schedule in ISO 8601 format.
// If not present, the schedule will run indefinitely
func (o RecurrenceScheduleResponsePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies frequency with with which to trigger schedule
func (o RecurrenceScheduleResponsePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// [Required] Specifies schedule interval in conjunction with frequency
func (o RecurrenceScheduleResponsePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.IntPtrOutput)
}

// Specifies the recurrence schedule pattern
func (o RecurrenceScheduleResponsePtrOutput) Pattern() RecurrencePatternResponsePtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *RecurrencePatternResponse {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(RecurrencePatternResponsePtrOutput)
}

// Specifies the schedule's status
func (o RecurrenceScheduleResponsePtrOutput) ScheduleStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleStatus
	}).(pulumi.StringPtrOutput)
}

// Enum to describe type of schedule
// Expected value is 'Recurrence'.
func (o RecurrenceScheduleResponsePtrOutput) ScheduleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScheduleType
	}).(pulumi.StringPtrOutput)
}

// Specifies start time of schedule in ISO 8601 format.
func (o RecurrenceScheduleResponsePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Specifies time zone in which the schedule runs.
// TimeZone should follow Windows time zone format.
func (o RecurrenceScheduleResponsePtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecurrenceScheduleResponse) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// Regression task in AutoML Table vertical.
type Regression struct {
	// Allowed models for regression task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for regression task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettings `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for Regression
func (val *Regression) Defaults() *Regression {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// RegressionInput is an input type that accepts RegressionArgs and RegressionOutput values.
// You can construct a concrete instance of `RegressionInput` via:
//
//	RegressionArgs{...}
type RegressionInput interface {
	pulumi.Input

	ToRegressionOutput() RegressionOutput
	ToRegressionOutputWithContext(context.Context) RegressionOutput
}

// Regression task in AutoML Table vertical.
type RegressionArgs struct {
	// Allowed models for regression task.
	AllowedModels pulumi.StringArrayInput `pulumi:"allowedModels"`
	// Blocked models for regression task.
	BlockedModels pulumi.StringArrayInput `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings TableVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings TableVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings TableVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for regression task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings TrainingSettingsPtrInput `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for RegressionArgs
func (val *RegressionArgs) Defaults() *RegressionArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("NormalizedRootMeanSquaredError")
	}

	return &tmp
}
func (RegressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (i RegressionArgs) ToRegressionOutput() RegressionOutput {
	return i.ToRegressionOutputWithContext(context.Background())
}

func (i RegressionArgs) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegressionOutput)
}

// Regression task in AutoML Table vertical.
type RegressionOutput struct{ *pulumi.OutputState }

func (RegressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Regression)(nil)).Elem()
}

func (o RegressionOutput) ToRegressionOutput() RegressionOutput {
	return o
}

func (o RegressionOutput) ToRegressionOutputWithContext(ctx context.Context) RegressionOutput {
	return o
}

// Allowed models for regression task.
func (o RegressionOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Regression) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Regression) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o RegressionOutput) DataSettings() TableVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalDataSettings { return v.DataSettings }).(TableVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalFeaturizationSettings { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionOutput) LimitSettings() TableVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TableVerticalLimitSettings { return v.LimitSettings }).(TableVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o RegressionOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for regression task.
func (o RegressionOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Regression) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v Regression) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionOutput) TrainingSettings() TrainingSettingsPtrOutput {
	return o.ApplyT(func(v Regression) *TrainingSettings { return v.TrainingSettings }).(TrainingSettingsPtrOutput)
}

// Regression task in AutoML Table vertical.
type RegressionResponse struct {
	// Allowed models for regression task.
	AllowedModels []string `pulumi:"allowedModels"`
	// Blocked models for regression task.
	BlockedModels []string `pulumi:"blockedModels"`
	// Data inputs for AutoMLJob.
	DataSettings *TableVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *TableVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *TableVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for regression task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'Regression'.
	TaskType string `pulumi:"taskType"`
	// Inputs for training phase for an AutoML Job.
	TrainingSettings *TrainingSettingsResponse `pulumi:"trainingSettings"`
}

// Defaults sets the appropriate defaults for RegressionResponse
func (val *RegressionResponse) Defaults() *RegressionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.FeaturizationSettings = tmp.FeaturizationSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "NormalizedRootMeanSquaredError"
		tmp.PrimaryMetric = &primaryMetric_
	}
	tmp.TrainingSettings = tmp.TrainingSettings.Defaults()

	return &tmp
}

// Regression task in AutoML Table vertical.
type RegressionResponseOutput struct{ *pulumi.OutputState }

func (RegressionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionResponse)(nil)).Elem()
}

func (o RegressionResponseOutput) ToRegressionResponseOutput() RegressionResponseOutput {
	return o
}

func (o RegressionResponseOutput) ToRegressionResponseOutputWithContext(ctx context.Context) RegressionResponseOutput {
	return o
}

// Allowed models for regression task.
func (o RegressionResponseOutput) AllowedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionResponse) []string { return v.AllowedModels }).(pulumi.StringArrayOutput)
}

// Blocked models for regression task.
func (o RegressionResponseOutput) BlockedModels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegressionResponse) []string { return v.BlockedModels }).(pulumi.StringArrayOutput)
}

// Data inputs for AutoMLJob.
func (o RegressionResponseOutput) DataSettings() TableVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalDataSettingsResponse { return v.DataSettings }).(TableVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o RegressionResponseOutput) FeaturizationSettings() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalFeaturizationSettingsResponse { return v.FeaturizationSettings }).(TableVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o RegressionResponseOutput) LimitSettings() TableVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TableVerticalLimitSettingsResponse { return v.LimitSettings }).(TableVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o RegressionResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for regression task.
func (o RegressionResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegressionResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'Regression'.
func (o RegressionResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v RegressionResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Inputs for training phase for an AutoML Job.
func (o RegressionResponseOutput) TrainingSettings() TrainingSettingsResponsePtrOutput {
	return o.ApplyT(func(v RegressionResponse) *TrainingSettingsResponse { return v.TrainingSettings }).(TrainingSettingsResponsePtrOutput)
}

type ResourceConfiguration struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for ResourceConfiguration
func (val *ResourceConfiguration) Defaults() *ResourceConfiguration {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

// ResourceConfigurationInput is an input type that accepts ResourceConfigurationArgs and ResourceConfigurationOutput values.
// You can construct a concrete instance of `ResourceConfigurationInput` via:
//
//	ResourceConfigurationArgs{...}
type ResourceConfigurationInput interface {
	pulumi.Input

	ToResourceConfigurationOutput() ResourceConfigurationOutput
	ToResourceConfigurationOutputWithContext(context.Context) ResourceConfigurationOutput
}

type ResourceConfigurationArgs struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount pulumi.IntPtrInput `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// Additional properties bag.
	Properties pulumi.MapInput `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for ResourceConfigurationArgs
func (val *ResourceConfigurationArgs) Defaults() *ResourceConfigurationArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		tmp.InstanceCount = pulumi.IntPtr(1)
	}
	return &tmp
}
func (ResourceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfiguration)(nil)).Elem()
}

func (i ResourceConfigurationArgs) ToResourceConfigurationOutput() ResourceConfigurationOutput {
	return i.ToResourceConfigurationOutputWithContext(context.Background())
}

func (i ResourceConfigurationArgs) ToResourceConfigurationOutputWithContext(ctx context.Context) ResourceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationOutput)
}

func (i ResourceConfigurationArgs) ToResourceConfigurationPtrOutput() ResourceConfigurationPtrOutput {
	return i.ToResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i ResourceConfigurationArgs) ToResourceConfigurationPtrOutputWithContext(ctx context.Context) ResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationOutput).ToResourceConfigurationPtrOutputWithContext(ctx)
}

// ResourceConfigurationPtrInput is an input type that accepts ResourceConfigurationArgs, ResourceConfigurationPtr and ResourceConfigurationPtrOutput values.
// You can construct a concrete instance of `ResourceConfigurationPtrInput` via:
//
//	        ResourceConfigurationArgs{...}
//
//	or:
//
//	        nil
type ResourceConfigurationPtrInput interface {
	pulumi.Input

	ToResourceConfigurationPtrOutput() ResourceConfigurationPtrOutput
	ToResourceConfigurationPtrOutputWithContext(context.Context) ResourceConfigurationPtrOutput
}

type resourceConfigurationPtrType ResourceConfigurationArgs

func ResourceConfigurationPtr(v *ResourceConfigurationArgs) ResourceConfigurationPtrInput {
	return (*resourceConfigurationPtrType)(v)
}

func (*resourceConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfiguration)(nil)).Elem()
}

func (i *resourceConfigurationPtrType) ToResourceConfigurationPtrOutput() ResourceConfigurationPtrOutput {
	return i.ToResourceConfigurationPtrOutputWithContext(context.Background())
}

func (i *resourceConfigurationPtrType) ToResourceConfigurationPtrOutputWithContext(ctx context.Context) ResourceConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceConfigurationPtrOutput)
}

type ResourceConfigurationOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfiguration)(nil)).Elem()
}

func (o ResourceConfigurationOutput) ToResourceConfigurationOutput() ResourceConfigurationOutput {
	return o
}

func (o ResourceConfigurationOutput) ToResourceConfigurationOutputWithContext(ctx context.Context) ResourceConfigurationOutput {
	return o
}

func (o ResourceConfigurationOutput) ToResourceConfigurationPtrOutput() ResourceConfigurationPtrOutput {
	return o.ToResourceConfigurationPtrOutputWithContext(context.Background())
}

func (o ResourceConfigurationOutput) ToResourceConfigurationPtrOutputWithContext(ctx context.Context) ResourceConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceConfiguration) *ResourceConfiguration {
		return &v
	}).(ResourceConfigurationPtrOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o ResourceConfigurationOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceConfiguration) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o ResourceConfigurationOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceConfiguration) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o ResourceConfigurationOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceConfiguration) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type ResourceConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfiguration)(nil)).Elem()
}

func (o ResourceConfigurationPtrOutput) ToResourceConfigurationPtrOutput() ResourceConfigurationPtrOutput {
	return o
}

func (o ResourceConfigurationPtrOutput) ToResourceConfigurationPtrOutputWithContext(ctx context.Context) ResourceConfigurationPtrOutput {
	return o
}

func (o ResourceConfigurationPtrOutput) Elem() ResourceConfigurationOutput {
	return o.ApplyT(func(v *ResourceConfiguration) ResourceConfiguration {
		if v != nil {
			return *v
		}
		var ret ResourceConfiguration
		return ret
	}).(ResourceConfigurationOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o ResourceConfigurationPtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o ResourceConfigurationPtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o ResourceConfigurationPtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *ResourceConfiguration) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type ResourceConfigurationResponse struct {
	// Optional number of instances or nodes used by the compute target.
	InstanceCount *int `pulumi:"instanceCount"`
	// Optional type of VM used as supported by the compute target.
	InstanceType *string `pulumi:"instanceType"`
	// Additional properties bag.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defaults sets the appropriate defaults for ResourceConfigurationResponse
func (val *ResourceConfigurationResponse) Defaults() *ResourceConfigurationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.InstanceCount == nil {
		instanceCount_ := 1
		tmp.InstanceCount = &instanceCount_
	}
	return &tmp
}

type ResourceConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceConfigurationResponse)(nil)).Elem()
}

func (o ResourceConfigurationResponseOutput) ToResourceConfigurationResponseOutput() ResourceConfigurationResponseOutput {
	return o
}

func (o ResourceConfigurationResponseOutput) ToResourceConfigurationResponseOutputWithContext(ctx context.Context) ResourceConfigurationResponseOutput {
	return o
}

// Optional number of instances or nodes used by the compute target.
func (o ResourceConfigurationResponseOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResourceConfigurationResponse) *int { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o ResourceConfigurationResponseOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceConfigurationResponse) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o ResourceConfigurationResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v ResourceConfigurationResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type ResourceConfigurationResponsePtrOutput struct{ *pulumi.OutputState }

func (ResourceConfigurationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceConfigurationResponse)(nil)).Elem()
}

func (o ResourceConfigurationResponsePtrOutput) ToResourceConfigurationResponsePtrOutput() ResourceConfigurationResponsePtrOutput {
	return o
}

func (o ResourceConfigurationResponsePtrOutput) ToResourceConfigurationResponsePtrOutputWithContext(ctx context.Context) ResourceConfigurationResponsePtrOutput {
	return o
}

func (o ResourceConfigurationResponsePtrOutput) Elem() ResourceConfigurationResponseOutput {
	return o.ApplyT(func(v *ResourceConfigurationResponse) ResourceConfigurationResponse {
		if v != nil {
			return *v
		}
		var ret ResourceConfigurationResponse
		return ret
	}).(ResourceConfigurationResponseOutput)
}

// Optional number of instances or nodes used by the compute target.
func (o ResourceConfigurationResponsePtrOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ResourceConfigurationResponse) *int {
		if v == nil {
			return nil
		}
		return v.InstanceCount
	}).(pulumi.IntPtrOutput)
}

// Optional type of VM used as supported by the compute target.
func (o ResourceConfigurationResponsePtrOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceConfigurationResponse) *string {
		if v == nil {
			return nil
		}
		return v.InstanceType
	}).(pulumi.StringPtrOutput)
}

// Additional properties bag.
func (o ResourceConfigurationResponsePtrOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v *ResourceConfigurationResponse) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.MapOutput)
}

type Route struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

// RouteInput is an input type that accepts RouteArgs and RouteOutput values.
// You can construct a concrete instance of `RouteInput` via:
//
//	RouteArgs{...}
type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(context.Context) RouteOutput
}

type RouteArgs struct {
	// [Required] The path for the route.
	Path pulumi.StringInput `pulumi:"path"`
	// [Required] The port for the route.
	Port pulumi.IntInput `pulumi:"port"`
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (i RouteArgs) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i RouteArgs) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

func (i RouteArgs) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i RouteArgs) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput).ToRoutePtrOutputWithContext(ctx)
}

// RoutePtrInput is an input type that accepts RouteArgs, RoutePtr and RoutePtrOutput values.
// You can construct a concrete instance of `RoutePtrInput` via:
//
//	        RouteArgs{...}
//
//	or:
//
//	        nil
type RoutePtrInput interface {
	pulumi.Input

	ToRoutePtrOutput() RoutePtrOutput
	ToRoutePtrOutputWithContext(context.Context) RoutePtrOutput
}

type routePtrType RouteArgs

func RoutePtr(v *RouteArgs) RoutePtrInput {
	return (*routePtrType)(v)
}

func (*routePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *routePtrType) ToRoutePtrOutput() RoutePtrOutput {
	return i.ToRoutePtrOutputWithContext(context.Background())
}

func (i *routePtrType) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePtrOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

func (o RouteOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o.ToRoutePtrOutputWithContext(context.Background())
}

func (o RouteOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Route) *Route {
		return &v
	}).(RoutePtrOutput)
}

// [Required] The path for the route.
func (o RouteOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Route) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Route) int { return v.Port }).(pulumi.IntOutput)
}

type RoutePtrOutput struct{ *pulumi.OutputState }

func (RoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RoutePtrOutput) ToRoutePtrOutput() RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) ToRoutePtrOutputWithContext(ctx context.Context) RoutePtrOutput {
	return o
}

func (o RoutePtrOutput) Elem() RouteOutput {
	return o.ApplyT(func(v *Route) Route {
		if v != nil {
			return *v
		}
		var ret Route
		return ret
	}).(RouteOutput)
}

// [Required] The path for the route.
func (o RoutePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RoutePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Route) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

type RouteResponse struct {
	// [Required] The path for the route.
	Path string `pulumi:"path"`
	// [Required] The port for the route.
	Port int `pulumi:"port"`
}

type RouteResponseOutput struct{ *pulumi.OutputState }

func (RouteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteResponse)(nil)).Elem()
}

func (o RouteResponseOutput) ToRouteResponseOutput() RouteResponseOutput {
	return o
}

func (o RouteResponseOutput) ToRouteResponseOutputWithContext(ctx context.Context) RouteResponseOutput {
	return o
}

// [Required] The path for the route.
func (o RouteResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RouteResponse) string { return v.Path }).(pulumi.StringOutput)
}

// [Required] The port for the route.
func (o RouteResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v RouteResponse) int { return v.Port }).(pulumi.IntOutput)
}

type RouteResponsePtrOutput struct{ *pulumi.OutputState }

func (RouteResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteResponse)(nil)).Elem()
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutput() RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) ToRouteResponsePtrOutputWithContext(ctx context.Context) RouteResponsePtrOutput {
	return o
}

func (o RouteResponsePtrOutput) Elem() RouteResponseOutput {
	return o.ApplyT(func(v *RouteResponse) RouteResponse {
		if v != nil {
			return *v
		}
		var ret RouteResponse
		return ret
	}).(RouteResponseOutput)
}

// [Required] The path for the route.
func (o RouteResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// [Required] The port for the route.
func (o RouteResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RouteResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentials struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecrets `pulumi:"secrets"`
}

// SasDatastoreCredentialsInput is an input type that accepts SasDatastoreCredentialsArgs and SasDatastoreCredentialsOutput values.
// You can construct a concrete instance of `SasDatastoreCredentialsInput` via:
//
//	SasDatastoreCredentialsArgs{...}
type SasDatastoreCredentialsInput interface {
	pulumi.Input

	ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput
	ToSasDatastoreCredentialsOutputWithContext(context.Context) SasDatastoreCredentialsOutput
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsArgs struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// [Required] Storage container secrets.
	Secrets SasDatastoreSecretsInput `pulumi:"secrets"`
}

func (SasDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return i.ToSasDatastoreCredentialsOutputWithContext(context.Background())
}

func (i SasDatastoreCredentialsArgs) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreCredentialsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentials)(nil)).Elem()
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutput() SasDatastoreCredentialsOutput {
	return o
}

func (o SasDatastoreCredentialsOutput) ToSasDatastoreCredentialsOutputWithContext(ctx context.Context) SasDatastoreCredentialsOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// [Required] Storage container secrets.
func (o SasDatastoreCredentialsOutput) Secrets() SasDatastoreSecretsOutput {
	return o.ApplyT(func(v SasDatastoreCredentials) SasDatastoreSecrets { return v.Secrets }).(SasDatastoreSecretsOutput)
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponse struct {
	// Enum to determine the datastore credentials type.
	// Expected value is 'Sas'.
	CredentialsType string `pulumi:"credentialsType"`
}

// SAS datastore credentials configuration.
type SasDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (SasDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreCredentialsResponse)(nil)).Elem()
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutput() SasDatastoreCredentialsResponseOutput {
	return o
}

func (o SasDatastoreCredentialsResponseOutput) ToSasDatastoreCredentialsResponseOutputWithContext(ctx context.Context) SasDatastoreCredentialsResponseOutput {
	return o
}

// Enum to determine the datastore credentials type.
// Expected value is 'Sas'.
func (o SasDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecrets struct {
	// Storage container SAS token.
	SasToken *string `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType string `pulumi:"secretsType"`
}

// SasDatastoreSecretsInput is an input type that accepts SasDatastoreSecretsArgs and SasDatastoreSecretsOutput values.
// You can construct a concrete instance of `SasDatastoreSecretsInput` via:
//
//	SasDatastoreSecretsArgs{...}
type SasDatastoreSecretsInput interface {
	pulumi.Input

	ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput
	ToSasDatastoreSecretsOutputWithContext(context.Context) SasDatastoreSecretsOutput
}

// Datastore SAS secrets.
type SasDatastoreSecretsArgs struct {
	// Storage container SAS token.
	SasToken pulumi.StringPtrInput `pulumi:"sasToken"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'Sas'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (SasDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return i.ToSasDatastoreSecretsOutputWithContext(context.Background())
}

func (i SasDatastoreSecretsArgs) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SasDatastoreSecretsOutput)
}

// Datastore SAS secrets.
type SasDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (SasDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SasDatastoreSecrets)(nil)).Elem()
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutput() SasDatastoreSecretsOutput {
	return o
}

func (o SasDatastoreSecretsOutput) ToSasDatastoreSecretsOutputWithContext(ctx context.Context) SasDatastoreSecretsOutput {
	return o
}

// Storage container SAS token.
func (o SasDatastoreSecretsOutput) SasToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) *string { return v.SasToken }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'Sas'.
func (o SasDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v SasDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentials struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecrets `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// ServicePrincipalDatastoreCredentialsInput is an input type that accepts ServicePrincipalDatastoreCredentialsArgs and ServicePrincipalDatastoreCredentialsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreCredentialsInput` via:
//
//	ServicePrincipalDatastoreCredentialsArgs{...}
type ServicePrincipalDatastoreCredentialsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput
	ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Context) ServicePrincipalDatastoreCredentialsOutput
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsArgs struct {
	// Authority URL used for authentication.
	AuthorityUrl pulumi.StringPtrInput `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType pulumi.StringInput `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl pulumi.StringPtrInput `pulumi:"resourceUrl"`
	// [Required] Service principal secrets.
	Secrets ServicePrincipalDatastoreSecretsInput `pulumi:"secrets"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (ServicePrincipalDatastoreCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return i.ToServicePrincipalDatastoreCredentialsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreCredentialsArgs) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreCredentialsOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentials)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutput() ServicePrincipalDatastoreCredentialsOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsOutput) ToServicePrincipalDatastoreCredentialsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal secrets.
func (o ServicePrincipalDatastoreCredentialsOutput) Secrets() ServicePrincipalDatastoreSecretsOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) ServicePrincipalDatastoreSecrets { return v.Secrets }).(ServicePrincipalDatastoreSecretsOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentials) string { return v.TenantId }).(pulumi.StringOutput)
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponse struct {
	// Authority URL used for authentication.
	AuthorityUrl *string `pulumi:"authorityUrl"`
	// [Required] Service principal client ID.
	ClientId string `pulumi:"clientId"`
	// Enum to determine the datastore credentials type.
	// Expected value is 'ServicePrincipal'.
	CredentialsType string `pulumi:"credentialsType"`
	// Resource the service principal has access to.
	ResourceUrl *string `pulumi:"resourceUrl"`
	// [Required] ID of the tenant to which the service principal belongs.
	TenantId string `pulumi:"tenantId"`
}

// Service Principal datastore credentials configuration.
type ServicePrincipalDatastoreCredentialsResponseOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreCredentialsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreCredentialsResponse)(nil)).Elem()
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutput() ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

func (o ServicePrincipalDatastoreCredentialsResponseOutput) ToServicePrincipalDatastoreCredentialsResponseOutputWithContext(ctx context.Context) ServicePrincipalDatastoreCredentialsResponseOutput {
	return o
}

// Authority URL used for authentication.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) AuthorityUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.AuthorityUrl }).(pulumi.StringPtrOutput)
}

// [Required] Service principal client ID.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Enum to determine the datastore credentials type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) CredentialsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.CredentialsType }).(pulumi.StringOutput)
}

// Resource the service principal has access to.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) ResourceUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) *string { return v.ResourceUrl }).(pulumi.StringPtrOutput)
}

// [Required] ID of the tenant to which the service principal belongs.
func (o ServicePrincipalDatastoreCredentialsResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreCredentialsResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecrets struct {
	// Service principal secret.
	ClientSecret *string `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType string `pulumi:"secretsType"`
}

// ServicePrincipalDatastoreSecretsInput is an input type that accepts ServicePrincipalDatastoreSecretsArgs and ServicePrincipalDatastoreSecretsOutput values.
// You can construct a concrete instance of `ServicePrincipalDatastoreSecretsInput` via:
//
//	ServicePrincipalDatastoreSecretsArgs{...}
type ServicePrincipalDatastoreSecretsInput interface {
	pulumi.Input

	ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput
	ToServicePrincipalDatastoreSecretsOutputWithContext(context.Context) ServicePrincipalDatastoreSecretsOutput
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsArgs struct {
	// Service principal secret.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Enum to determine the datastore secrets type.
	// Expected value is 'ServicePrincipal'.
	SecretsType pulumi.StringInput `pulumi:"secretsType"`
}

func (ServicePrincipalDatastoreSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return i.ToServicePrincipalDatastoreSecretsOutputWithContext(context.Background())
}

func (i ServicePrincipalDatastoreSecretsArgs) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServicePrincipalDatastoreSecretsOutput)
}

// Datastore Service Principal secrets.
type ServicePrincipalDatastoreSecretsOutput struct{ *pulumi.OutputState }

func (ServicePrincipalDatastoreSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServicePrincipalDatastoreSecrets)(nil)).Elem()
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutput() ServicePrincipalDatastoreSecretsOutput {
	return o
}

func (o ServicePrincipalDatastoreSecretsOutput) ToServicePrincipalDatastoreSecretsOutputWithContext(ctx context.Context) ServicePrincipalDatastoreSecretsOutput {
	return o
}

// Service principal secret.
func (o ServicePrincipalDatastoreSecretsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Enum to determine the datastore secrets type.
// Expected value is 'ServicePrincipal'.
func (o ServicePrincipalDatastoreSecretsOutput) SecretsType() pulumi.StringOutput {
	return o.ApplyT(func(v ServicePrincipalDatastoreSecrets) string { return v.SecretsType }).(pulumi.StringOutput)
}

// The resource model definition representing SKU
type Sku struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *SkuTier `pulumi:"tier"`
}

// SkuInput is an input type that accepts SkuArgs and SkuOutput values.
// You can construct a concrete instance of `SkuInput` via:
//
//	SkuArgs{...}
type SkuInput interface {
	pulumi.Input

	ToSkuOutput() SkuOutput
	ToSkuOutputWithContext(context.Context) SkuOutput
}

// The resource model definition representing SKU
type SkuArgs struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family pulumi.StringPtrInput `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name pulumi.StringInput `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size pulumi.StringPtrInput `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier SkuTierPtrInput `pulumi:"tier"`
}

func (SkuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (i SkuArgs) ToSkuOutput() SkuOutput {
	return i.ToSkuOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput)
}

func (i SkuArgs) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i SkuArgs) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuOutput).ToSkuPtrOutputWithContext(ctx)
}

// SkuPtrInput is an input type that accepts SkuArgs, SkuPtr and SkuPtrOutput values.
// You can construct a concrete instance of `SkuPtrInput` via:
//
//	        SkuArgs{...}
//
//	or:
//
//	        nil
type SkuPtrInput interface {
	pulumi.Input

	ToSkuPtrOutput() SkuPtrOutput
	ToSkuPtrOutputWithContext(context.Context) SkuPtrOutput
}

type skuPtrType SkuArgs

func SkuPtr(v *SkuArgs) SkuPtrInput {
	return (*skuPtrType)(v)
}

func (*skuPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (i *skuPtrType) ToSkuPtrOutput() SkuPtrOutput {
	return i.ToSkuPtrOutputWithContext(context.Background())
}

func (i *skuPtrType) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SkuPtrOutput)
}

// The resource model definition representing SKU
type SkuOutput struct{ *pulumi.OutputState }

func (SkuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sku)(nil)).Elem()
}

func (o SkuOutput) ToSkuOutput() SkuOutput {
	return o
}

func (o SkuOutput) ToSkuOutputWithContext(ctx context.Context) SkuOutput {
	return o
}

func (o SkuOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o.ToSkuPtrOutputWithContext(context.Background())
}

func (o SkuOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Sku) *Sku {
		return &v
	}).(SkuPtrOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Sku) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Sku) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Sku) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v Sku) *SkuTier { return v.Tier }).(SkuTierPtrOutput)
}

type SkuPtrOutput struct{ *pulumi.OutputState }

func (SkuPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sku)(nil)).Elem()
}

func (o SkuPtrOutput) ToSkuPtrOutput() SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) ToSkuPtrOutputWithContext(ctx context.Context) SkuPtrOutput {
	return o
}

func (o SkuPtrOutput) Elem() SkuOutput {
	return o.ApplyT(func(v *Sku) Sku {
		if v != nil {
			return *v
		}
		var ret Sku
		return ret
	}).(SkuOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuPtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Sku) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuPtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuPtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sku) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuPtrOutput) Tier() SkuTierPtrOutput {
	return o.ApplyT(func(v *Sku) *SkuTier {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(SkuTierPtrOutput)
}

// The resource model definition representing SKU
type SkuResponse struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
	Capacity *int `pulumi:"capacity"`
	// If the service has different generations of hardware, for the same SKU, then that can be captured here.
	Family *string `pulumi:"family"`
	// The name of the SKU. Ex - P3. It is typically a letter+number code
	Name string `pulumi:"name"`
	// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
	Size *string `pulumi:"size"`
	// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
	Tier *string `pulumi:"tier"`
}

// The resource model definition representing SKU
type SkuResponseOutput struct{ *pulumi.OutputState }

func (SkuResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SkuResponse)(nil)).Elem()
}

func (o SkuResponseOutput) ToSkuResponseOutput() SkuResponseOutput {
	return o
}

func (o SkuResponseOutput) ToSkuResponseOutputWithContext(ctx context.Context) SkuResponseOutput {
	return o
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponseOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SkuResponse) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponseOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Family }).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SkuResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponseOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Size }).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponseOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SkuResponse) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

type SkuResponsePtrOutput struct{ *pulumi.OutputState }

func (SkuResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SkuResponse)(nil)).Elem()
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutput() SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) ToSkuResponsePtrOutputWithContext(ctx context.Context) SkuResponsePtrOutput {
	return o
}

func (o SkuResponsePtrOutput) Elem() SkuResponseOutput {
	return o.ApplyT(func(v *SkuResponse) SkuResponse {
		if v != nil {
			return *v
		}
		var ret SkuResponse
		return ret
	}).(SkuResponseOutput)
}

// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
func (o SkuResponsePtrOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *int {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.IntPtrOutput)
}

// If the service has different generations of hardware, for the same SKU, then that can be captured here.
func (o SkuResponsePtrOutput) Family() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Family
	}).(pulumi.StringPtrOutput)
}

// The name of the SKU. Ex - P3. It is typically a letter+number code
func (o SkuResponsePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
func (o SkuResponsePtrOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.StringPtrOutput)
}

// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
func (o SkuResponsePtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SkuResponse) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettings struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettings
func (val *StackEnsembleSettings) Defaults() *StackEnsembleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// StackEnsembleSettingsInput is an input type that accepts StackEnsembleSettingsArgs and StackEnsembleSettingsOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsInput` via:
//
//	StackEnsembleSettingsArgs{...}
type StackEnsembleSettingsInput interface {
	pulumi.Input

	ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput
	ToStackEnsembleSettingsOutputWithContext(context.Context) StackEnsembleSettingsOutput
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsArgs struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs pulumi.Input `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage pulumi.Float64PtrInput `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType pulumi.StringPtrInput `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsArgs
func (val *StackEnsembleSettingsArgs) Defaults() *StackEnsembleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		tmp.StackMetaLearnerTrainPercentage = pulumi.Float64Ptr(0.2)
	}
	if tmp.StackMetaLearnerType == nil {
		tmp.StackMetaLearnerType = pulumi.StringPtr("None")
	}
	return &tmp
}
func (StackEnsembleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return i.ToStackEnsembleSettingsOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput)
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i StackEnsembleSettingsArgs) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsOutput).ToStackEnsembleSettingsPtrOutputWithContext(ctx)
}

// StackEnsembleSettingsPtrInput is an input type that accepts StackEnsembleSettingsArgs, StackEnsembleSettingsPtr and StackEnsembleSettingsPtrOutput values.
// You can construct a concrete instance of `StackEnsembleSettingsPtrInput` via:
//
//	        StackEnsembleSettingsArgs{...}
//
//	or:
//
//	        nil
type StackEnsembleSettingsPtrInput interface {
	pulumi.Input

	ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput
	ToStackEnsembleSettingsPtrOutputWithContext(context.Context) StackEnsembleSettingsPtrOutput
}

type stackEnsembleSettingsPtrType StackEnsembleSettingsArgs

func StackEnsembleSettingsPtr(v *StackEnsembleSettingsArgs) StackEnsembleSettingsPtrInput {
	return (*stackEnsembleSettingsPtrType)(v)
}

func (*stackEnsembleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return i.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (i *stackEnsembleSettingsPtrType) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StackEnsembleSettingsPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutput() StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsOutputWithContext(ctx context.Context) StackEnsembleSettingsOutput {
	return o
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o.ToStackEnsembleSettingsPtrOutputWithContext(context.Background())
}

func (o StackEnsembleSettingsOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StackEnsembleSettings) *StackEnsembleSettings {
		return &v
	}).(StackEnsembleSettingsPtrOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettings) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettings) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsPtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettings)(nil)).Elem()
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutput() StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) ToStackEnsembleSettingsPtrOutputWithContext(ctx context.Context) StackEnsembleSettingsPtrOutput {
	return o
}

func (o StackEnsembleSettingsPtrOutput) Elem() StackEnsembleSettingsOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) StackEnsembleSettings {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettings
		return ret
	}).(StackEnsembleSettingsOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsPtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettings) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponse struct {
	// Optional parameters to pass to the initializer of the meta-learner.
	StackMetaLearnerKWargs interface{} `pulumi:"stackMetaLearnerKWargs"`
	// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
	StackMetaLearnerTrainPercentage *float64 `pulumi:"stackMetaLearnerTrainPercentage"`
	// The meta-learner is a model trained on the output of the individual heterogeneous models.
	StackMetaLearnerType *string `pulumi:"stackMetaLearnerType"`
}

// Defaults sets the appropriate defaults for StackEnsembleSettingsResponse
func (val *StackEnsembleSettingsResponse) Defaults() *StackEnsembleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.StackMetaLearnerTrainPercentage == nil {
		stackMetaLearnerTrainPercentage_ := 0.2
		tmp.StackMetaLearnerTrainPercentage = &stackMetaLearnerTrainPercentage_
	}
	if tmp.StackMetaLearnerType == nil {
		stackMetaLearnerType_ := "None"
		tmp.StackMetaLearnerType = &stackMetaLearnerType_
	}
	return &tmp
}

// Advances setting to customize StackEnsemble run.
type StackEnsembleSettingsResponseOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutput() StackEnsembleSettingsResponseOutput {
	return o
}

func (o StackEnsembleSettingsResponseOutput) ToStackEnsembleSettingsResponseOutputWithContext(ctx context.Context) StackEnsembleSettingsResponseOutput {
	return o
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) interface{} { return v.StackMetaLearnerKWargs }).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *float64 { return v.StackMetaLearnerTrainPercentage }).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponseOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StackEnsembleSettingsResponse) *string { return v.StackMetaLearnerType }).(pulumi.StringPtrOutput)
}

type StackEnsembleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (StackEnsembleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StackEnsembleSettingsResponse)(nil)).Elem()
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutput() StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) ToStackEnsembleSettingsResponsePtrOutputWithContext(ctx context.Context) StackEnsembleSettingsResponsePtrOutput {
	return o
}

func (o StackEnsembleSettingsResponsePtrOutput) Elem() StackEnsembleSettingsResponseOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) StackEnsembleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret StackEnsembleSettingsResponse
		return ret
	}).(StackEnsembleSettingsResponseOutput)
}

// Optional parameters to pass to the initializer of the meta-learner.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerKWargs() pulumi.AnyOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerKWargs
	}).(pulumi.AnyOutput)
}

// Specifies the proportion of the training set (when choosing train and validation type of training) to be reserved for training the meta-learner. Default value is 0.2.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerTrainPercentage() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerTrainPercentage
	}).(pulumi.Float64PtrOutput)
}

// The meta-learner is a model trained on the output of the individual heterogeneous models.
func (o StackEnsembleSettingsResponsePtrOutput) StackMetaLearnerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StackEnsembleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.StackMetaLearnerType
	}).(pulumi.StringPtrOutput)
}

// Sweep job definition.
type SweepJob struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimits `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective Objective `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobService `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponent `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJob
func (val *SweepJob) Defaults() *SweepJob {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// SweepJobInput is an input type that accepts SweepJobArgs and SweepJobOutput values.
// You can construct a concrete instance of `SweepJobInput` via:
//
//	SweepJobArgs{...}
type SweepJobInput interface {
	pulumi.Input

	ToSweepJobOutput() SweepJobOutput
	ToSweepJobOutputWithContext(context.Context) SweepJobOutput
}

// Sweep job definition.
type SweepJobArgs struct {
	// ARM resource ID of the compute resource.
	ComputeId pulumi.StringPtrInput `pulumi:"computeId"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Display name of job.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination pulumi.Input `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName pulumi.StringPtrInput `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity pulumi.Input `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs pulumi.MapInput `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType pulumi.StringInput `pulumi:"jobType"`
	// Sweep Job limit.
	Limits SweepJobLimitsPtrInput `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective ObjectiveInput `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs pulumi.MapInput `pulumi:"outputs"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm pulumi.Input `pulumi:"samplingAlgorithm"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule pulumi.Input `pulumi:"schedule"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace pulumi.Input `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services JobServiceMapInput `pulumi:"services"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentInput `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobArgs
func (val *SweepJobArgs) Defaults() *SweepJobArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		tmp.ExperimentName = pulumi.StringPtr("Default")
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}

	return &tmp
}
func (SweepJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (i SweepJobArgs) ToSweepJobOutput() SweepJobOutput {
	return i.ToSweepJobOutputWithContext(context.Background())
}

func (i SweepJobArgs) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobOutput)
}

// Sweep job definition.
type SweepJobOutput struct{ *pulumi.OutputState }

func (SweepJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJob)(nil)).Elem()
}

func (o SweepJobOutput) ToSweepJobOutput() SweepJobOutput {
	return o
}

func (o SweepJobOutput) ToSweepJobOutputWithContext(ctx context.Context) SweepJobOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o SweepJobOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJob) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJob) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJob) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobOutput) Limits() SweepJobLimitsPtrOutput {
	return o.ApplyT(func(v SweepJob) *SweepJobLimits { return v.Limits }).(SweepJobLimitsPtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobOutput) Objective() ObjectiveOutput {
	return o.ApplyT(func(v SweepJob) Objective { return v.Objective }).(ObjectiveOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJob) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o SweepJobOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJob) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobOutput) Services() JobServiceMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]JobService { return v.Services }).(JobServiceMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJob) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobOutput) Trial() TrialComponentOutput {
	return o.ApplyT(func(v SweepJob) TrialComponent { return v.Trial }).(TrialComponentOutput)
}

// Sweep Job limit class.
type SweepJobLimits struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// SweepJobLimitsInput is an input type that accepts SweepJobLimitsArgs and SweepJobLimitsOutput values.
// You can construct a concrete instance of `SweepJobLimitsInput` via:
//
//	SweepJobLimitsArgs{...}
type SweepJobLimitsInput interface {
	pulumi.Input

	ToSweepJobLimitsOutput() SweepJobLimitsOutput
	ToSweepJobLimitsOutputWithContext(context.Context) SweepJobLimitsOutput
}

// Sweep Job limit class.
type SweepJobLimitsArgs struct {
	// Expected value is 'Sweep'.
	JobLimitsType pulumi.StringInput `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials pulumi.IntPtrInput `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

func (SweepJobLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return i.ToSweepJobLimitsOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput)
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i SweepJobLimitsArgs) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsOutput).ToSweepJobLimitsPtrOutputWithContext(ctx)
}

// SweepJobLimitsPtrInput is an input type that accepts SweepJobLimitsArgs, SweepJobLimitsPtr and SweepJobLimitsPtrOutput values.
// You can construct a concrete instance of `SweepJobLimitsPtrInput` via:
//
//	        SweepJobLimitsArgs{...}
//
//	or:
//
//	        nil
type SweepJobLimitsPtrInput interface {
	pulumi.Input

	ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput
	ToSweepJobLimitsPtrOutputWithContext(context.Context) SweepJobLimitsPtrOutput
}

type sweepJobLimitsPtrType SweepJobLimitsArgs

func SweepJobLimitsPtr(v *SweepJobLimitsArgs) SweepJobLimitsPtrInput {
	return (*sweepJobLimitsPtrType)(v)
}

func (*sweepJobLimitsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return i.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (i *sweepJobLimitsPtrType) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SweepJobLimitsPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutput() SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsOutputWithContext(ctx context.Context) SweepJobLimitsOutput {
	return o
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o.ToSweepJobLimitsPtrOutputWithContext(context.Background())
}

func (o SweepJobLimitsOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SweepJobLimits) *SweepJobLimits {
		return &v
	}).(SweepJobLimitsPtrOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimits) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimits) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsPtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimits)(nil)).Elem()
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutput() SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) ToSweepJobLimitsPtrOutputWithContext(ctx context.Context) SweepJobLimitsPtrOutput {
	return o
}

func (o SweepJobLimitsPtrOutput) Elem() SweepJobLimitsOutput {
	return o.ApplyT(func(v *SweepJobLimits) SweepJobLimits {
		if v != nil {
			return *v
		}
		var ret SweepJobLimits
		return ret
	}).(SweepJobLimitsOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsPtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsPtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimits) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job limit class.
type SweepJobLimitsResponse struct {
	// Expected value is 'Sweep'.
	JobLimitsType string `pulumi:"jobLimitsType"`
	// Sweep Job max concurrent trials.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Sweep Job max total trials.
	MaxTotalTrials *int `pulumi:"maxTotalTrials"`
	// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
	Timeout *string `pulumi:"timeout"`
	// Sweep Job Trial timeout value.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Sweep Job limit class.
type SweepJobLimitsResponseOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutput() SweepJobLimitsResponseOutput {
	return o
}

func (o SweepJobLimitsResponseOutput) ToSweepJobLimitsResponseOutputWithContext(ctx context.Context) SweepJobLimitsResponseOutput {
	return o
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponseOutput) JobLimitsType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) string { return v.JobLimitsType }).(pulumi.StringOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponseOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *int { return v.MaxTotalTrials }).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobLimitsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type SweepJobLimitsResponsePtrOutput struct{ *pulumi.OutputState }

func (SweepJobLimitsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SweepJobLimitsResponse)(nil)).Elem()
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutput() SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) ToSweepJobLimitsResponsePtrOutputWithContext(ctx context.Context) SweepJobLimitsResponsePtrOutput {
	return o
}

func (o SweepJobLimitsResponsePtrOutput) Elem() SweepJobLimitsResponseOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) SweepJobLimitsResponse {
		if v != nil {
			return *v
		}
		var ret SweepJobLimitsResponse
		return ret
	}).(SweepJobLimitsResponseOutput)
}

// Expected value is 'Sweep'.
func (o SweepJobLimitsResponsePtrOutput) JobLimitsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.JobLimitsType
	}).(pulumi.StringPtrOutput)
}

// Sweep Job max concurrent trials.
func (o SweepJobLimitsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Sweep Job max total trials.
func (o SweepJobLimitsResponsePtrOutput) MaxTotalTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTotalTrials
	}).(pulumi.IntPtrOutput)
}

// The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
func (o SweepJobLimitsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Sweep Job Trial timeout value.
func (o SweepJobLimitsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SweepJobLimitsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Sweep job definition.
type SweepJobResponse struct {
	// ARM resource ID of the compute resource.
	ComputeId *string `pulumi:"computeId"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// Display name of job.
	DisplayName *string `pulumi:"displayName"`
	// Early termination policies enable canceling poor-performing runs before they complete
	EarlyTermination interface{} `pulumi:"earlyTermination"`
	// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
	ExperimentName *string `pulumi:"experimentName"`
	// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
	// Defaults to AmlToken if null.
	Identity interface{} `pulumi:"identity"`
	// Mapping of input data bindings used in the job.
	Inputs map[string]interface{} `pulumi:"inputs"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// Enum to determine the type of job.
	// Expected value is 'Sweep'.
	JobType string `pulumi:"jobType"`
	// Sweep Job limit.
	Limits *SweepJobLimitsResponse `pulumi:"limits"`
	// [Required] Optimization objective.
	Objective ObjectiveResponse `pulumi:"objective"`
	// Mapping of output data bindings used in the job.
	Outputs map[string]interface{} `pulumi:"outputs"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// [Required] The hyperparameter sampling algorithm
	SamplingAlgorithm interface{} `pulumi:"samplingAlgorithm"`
	// Schedule definition of job.
	// If no schedule is provided, the job is run once and immediately after submission.
	Schedule interface{} `pulumi:"schedule"`
	// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
	SearchSpace interface{} `pulumi:"searchSpace"`
	// List of JobEndpoints.
	// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
	Services map[string]JobServiceResponse `pulumi:"services"`
	// Status of the job.
	Status string `pulumi:"status"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
	// [Required] Trial component definition.
	Trial TrialComponentResponse `pulumi:"trial"`
}

// Defaults sets the appropriate defaults for SweepJobResponse
func (val *SweepJobResponse) Defaults() *SweepJobResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ExperimentName == nil {
		experimentName_ := "Default"
		tmp.ExperimentName = &experimentName_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	tmp.Trial = *tmp.Trial.Defaults()

	return &tmp
}

// Sweep job definition.
type SweepJobResponseOutput struct{ *pulumi.OutputState }

func (SweepJobResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SweepJobResponse)(nil)).Elem()
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutput() SweepJobResponseOutput {
	return o
}

func (o SweepJobResponseOutput) ToSweepJobResponseOutputWithContext(ctx context.Context) SweepJobResponseOutput {
	return o
}

// ARM resource ID of the compute resource.
func (o SweepJobResponseOutput) ComputeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ComputeId }).(pulumi.StringPtrOutput)
}

// The asset description text.
func (o SweepJobResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Display name of job.
func (o SweepJobResponseOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Early termination policies enable canceling poor-performing runs before they complete
func (o SweepJobResponseOutput) EarlyTermination() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.EarlyTermination }).(pulumi.AnyOutput)
}

// The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
func (o SweepJobResponseOutput) ExperimentName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *string { return v.ExperimentName }).(pulumi.StringPtrOutput)
}

// Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, UserIdentity or null.
// Defaults to AmlToken if null.
func (o SweepJobResponseOutput) Identity() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.Identity }).(pulumi.AnyOutput)
}

// Mapping of input data bindings used in the job.
func (o SweepJobResponseOutput) Inputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Inputs }).(pulumi.MapOutput)
}

// Is the asset archived?
func (o SweepJobResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// Enum to determine the type of job.
// Expected value is 'Sweep'.
func (o SweepJobResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// Sweep Job limit.
func (o SweepJobResponseOutput) Limits() SweepJobLimitsResponsePtrOutput {
	return o.ApplyT(func(v SweepJobResponse) *SweepJobLimitsResponse { return v.Limits }).(SweepJobLimitsResponsePtrOutput)
}

// [Required] Optimization objective.
func (o SweepJobResponseOutput) Objective() ObjectiveResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) ObjectiveResponse { return v.Objective }).(ObjectiveResponseOutput)
}

// Mapping of output data bindings used in the job.
func (o SweepJobResponseOutput) Outputs() pulumi.MapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]interface{} { return v.Outputs }).(pulumi.MapOutput)
}

// The asset property dictionary.
func (o SweepJobResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// [Required] The hyperparameter sampling algorithm
func (o SweepJobResponseOutput) SamplingAlgorithm() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SamplingAlgorithm }).(pulumi.AnyOutput)
}

// Schedule definition of job.
// If no schedule is provided, the job is run once and immediately after submission.
func (o SweepJobResponseOutput) Schedule() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.Schedule }).(pulumi.AnyOutput)
}

// [Required] A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
func (o SweepJobResponseOutput) SearchSpace() pulumi.AnyOutput {
	return o.ApplyT(func(v SweepJobResponse) interface{} { return v.SearchSpace }).(pulumi.AnyOutput)
}

// List of JobEndpoints.
// For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
func (o SweepJobResponseOutput) Services() JobServiceResponseMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]JobServiceResponse { return v.Services }).(JobServiceResponseMapOutput)
}

// Status of the job.
func (o SweepJobResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SweepJobResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o SweepJobResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v SweepJobResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// [Required] Trial component definition.
func (o SweepJobResponseOutput) Trial() TrialComponentResponseOutput {
	return o.ApplyT(func(v SweepJobResponse) TrialComponentResponse { return v.Trial }).(TrialComponentResponseOutput)
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponse struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *string `pulumi:"createdAt"`
	// The identity that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The type of identity that created the resource.
	CreatedByType *string `pulumi:"createdByType"`
	// The timestamp of resource last modification (UTC)
	LastModifiedAt *string `pulumi:"lastModifiedAt"`
	// The identity that last modified the resource.
	LastModifiedBy *string `pulumi:"lastModifiedBy"`
	// The type of identity that last modified the resource.
	LastModifiedByType *string `pulumi:"lastModifiedByType"`
}

// Metadata pertaining to creation and last modification of the resource.
type SystemDataResponseOutput struct{ *pulumi.OutputState }

func (SystemDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemDataResponse)(nil)).Elem()
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutput() SystemDataResponseOutput {
	return o
}

func (o SystemDataResponseOutput) ToSystemDataResponseOutputWithContext(ctx context.Context) SystemDataResponseOutput {
	return o
}

// The timestamp of resource creation (UTC).
func (o SystemDataResponseOutput) CreatedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedAt }).(pulumi.StringPtrOutput)
}

// The identity that created the resource.
func (o SystemDataResponseOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that created the resource.
func (o SystemDataResponseOutput) CreatedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.CreatedByType }).(pulumi.StringPtrOutput)
}

// The timestamp of resource last modification (UTC)
func (o SystemDataResponseOutput) LastModifiedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedAt }).(pulumi.StringPtrOutput)
}

// The identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedBy }).(pulumi.StringPtrOutput)
}

// The type of identity that last modified the resource.
func (o SystemDataResponseOutput) LastModifiedByType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SystemDataResponse) *string { return v.LastModifiedByType }).(pulumi.StringPtrOutput)
}

// Class for data inputs.
type TableVerticalDataSettings struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettings `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettings `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *TableVerticalValidationDataSettings `pulumi:"validationData"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for TableVerticalDataSettings
func (val *TableVerticalDataSettings) Defaults() *TableVerticalDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// TableVerticalDataSettingsInput is an input type that accepts TableVerticalDataSettingsArgs and TableVerticalDataSettingsOutput values.
// You can construct a concrete instance of `TableVerticalDataSettingsInput` via:
//
//	TableVerticalDataSettingsArgs{...}
type TableVerticalDataSettingsInput interface {
	pulumi.Input

	ToTableVerticalDataSettingsOutput() TableVerticalDataSettingsOutput
	ToTableVerticalDataSettingsOutputWithContext(context.Context) TableVerticalDataSettingsOutput
}

// Class for data inputs.
type TableVerticalDataSettingsArgs struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName pulumi.StringInput `pulumi:"targetColumnName"`
	// Test data input.
	TestData TestDataSettingsPtrInput `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsInput `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData TableVerticalValidationDataSettingsPtrInput `pulumi:"validationData"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName pulumi.StringPtrInput `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for TableVerticalDataSettingsArgs
func (val *TableVerticalDataSettingsArgs) Defaults() *TableVerticalDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TableVerticalDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalDataSettings)(nil)).Elem()
}

func (i TableVerticalDataSettingsArgs) ToTableVerticalDataSettingsOutput() TableVerticalDataSettingsOutput {
	return i.ToTableVerticalDataSettingsOutputWithContext(context.Background())
}

func (i TableVerticalDataSettingsArgs) ToTableVerticalDataSettingsOutputWithContext(ctx context.Context) TableVerticalDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalDataSettingsOutput)
}

func (i TableVerticalDataSettingsArgs) ToTableVerticalDataSettingsPtrOutput() TableVerticalDataSettingsPtrOutput {
	return i.ToTableVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalDataSettingsArgs) ToTableVerticalDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalDataSettingsOutput).ToTableVerticalDataSettingsPtrOutputWithContext(ctx)
}

// TableVerticalDataSettingsPtrInput is an input type that accepts TableVerticalDataSettingsArgs, TableVerticalDataSettingsPtr and TableVerticalDataSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalDataSettingsPtrInput` via:
//
//	        TableVerticalDataSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalDataSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalDataSettingsPtrOutput() TableVerticalDataSettingsPtrOutput
	ToTableVerticalDataSettingsPtrOutputWithContext(context.Context) TableVerticalDataSettingsPtrOutput
}

type tableVerticalDataSettingsPtrType TableVerticalDataSettingsArgs

func TableVerticalDataSettingsPtr(v *TableVerticalDataSettingsArgs) TableVerticalDataSettingsPtrInput {
	return (*tableVerticalDataSettingsPtrType)(v)
}

func (*tableVerticalDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalDataSettings)(nil)).Elem()
}

func (i *tableVerticalDataSettingsPtrType) ToTableVerticalDataSettingsPtrOutput() TableVerticalDataSettingsPtrOutput {
	return i.ToTableVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalDataSettingsPtrType) ToTableVerticalDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalDataSettingsPtrOutput)
}

// Class for data inputs.
type TableVerticalDataSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalDataSettings)(nil)).Elem()
}

func (o TableVerticalDataSettingsOutput) ToTableVerticalDataSettingsOutput() TableVerticalDataSettingsOutput {
	return o
}

func (o TableVerticalDataSettingsOutput) ToTableVerticalDataSettingsOutputWithContext(ctx context.Context) TableVerticalDataSettingsOutput {
	return o
}

func (o TableVerticalDataSettingsOutput) ToTableVerticalDataSettingsPtrOutput() TableVerticalDataSettingsPtrOutput {
	return o.ToTableVerticalDataSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalDataSettingsOutput) ToTableVerticalDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalDataSettings) *TableVerticalDataSettings {
		return &v
	}).(TableVerticalDataSettingsPtrOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TableVerticalDataSettingsOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TableVerticalDataSettings) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o TableVerticalDataSettingsOutput) TestData() TestDataSettingsPtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettings) *TestDataSettings { return v.TestData }).(TestDataSettingsPtrOutput)
}

// [Required] Training data input.
func (o TableVerticalDataSettingsOutput) TrainingData() TrainingDataSettingsOutput {
	return o.ApplyT(func(v TableVerticalDataSettings) TrainingDataSettings { return v.TrainingData }).(TrainingDataSettingsOutput)
}

// Validation data inputs.
func (o TableVerticalDataSettingsOutput) ValidationData() TableVerticalValidationDataSettingsPtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettings) *TableVerticalValidationDataSettings { return v.ValidationData }).(TableVerticalValidationDataSettingsPtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o TableVerticalDataSettingsOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettings) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

type TableVerticalDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalDataSettings)(nil)).Elem()
}

func (o TableVerticalDataSettingsPtrOutput) ToTableVerticalDataSettingsPtrOutput() TableVerticalDataSettingsPtrOutput {
	return o
}

func (o TableVerticalDataSettingsPtrOutput) ToTableVerticalDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalDataSettingsPtrOutput {
	return o
}

func (o TableVerticalDataSettingsPtrOutput) Elem() TableVerticalDataSettingsOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) TableVerticalDataSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalDataSettings
		return ret
	}).(TableVerticalDataSettingsOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TableVerticalDataSettingsPtrOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) *string {
		if v == nil {
			return nil
		}
		return &v.TargetColumnName
	}).(pulumi.StringPtrOutput)
}

// Test data input.
func (o TableVerticalDataSettingsPtrOutput) TestData() TestDataSettingsPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) *TestDataSettings {
		if v == nil {
			return nil
		}
		return v.TestData
	}).(TestDataSettingsPtrOutput)
}

// [Required] Training data input.
func (o TableVerticalDataSettingsPtrOutput) TrainingData() TrainingDataSettingsPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) *TrainingDataSettings {
		if v == nil {
			return nil
		}
		return &v.TrainingData
	}).(TrainingDataSettingsPtrOutput)
}

// Validation data inputs.
func (o TableVerticalDataSettingsPtrOutput) ValidationData() TableVerticalValidationDataSettingsPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) *TableVerticalValidationDataSettings {
		if v == nil {
			return nil
		}
		return v.ValidationData
	}).(TableVerticalValidationDataSettingsPtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o TableVerticalDataSettingsPtrOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettings) *string {
		if v == nil {
			return nil
		}
		return v.WeightColumnName
	}).(pulumi.StringPtrOutput)
}

// Class for data inputs.
type TableVerticalDataSettingsResponse struct {
	// [Required] Target column name: This is prediction values column.
	// Also known as label column name in context of classification tasks.
	TargetColumnName string `pulumi:"targetColumnName"`
	// Test data input.
	TestData *TestDataSettingsResponse `pulumi:"testData"`
	// [Required] Training data input.
	TrainingData TrainingDataSettingsResponse `pulumi:"trainingData"`
	// Validation data inputs.
	ValidationData *TableVerticalValidationDataSettingsResponse `pulumi:"validationData"`
	// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
	WeightColumnName *string `pulumi:"weightColumnName"`
}

// Defaults sets the appropriate defaults for TableVerticalDataSettingsResponse
func (val *TableVerticalDataSettingsResponse) Defaults() *TableVerticalDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.TestData = tmp.TestData.Defaults()

	tmp.TrainingData = *tmp.TrainingData.Defaults()

	tmp.ValidationData = tmp.ValidationData.Defaults()

	return &tmp
}

// Class for data inputs.
type TableVerticalDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalDataSettingsResponse)(nil)).Elem()
}

func (o TableVerticalDataSettingsResponseOutput) ToTableVerticalDataSettingsResponseOutput() TableVerticalDataSettingsResponseOutput {
	return o
}

func (o TableVerticalDataSettingsResponseOutput) ToTableVerticalDataSettingsResponseOutputWithContext(ctx context.Context) TableVerticalDataSettingsResponseOutput {
	return o
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TableVerticalDataSettingsResponseOutput) TargetColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v TableVerticalDataSettingsResponse) string { return v.TargetColumnName }).(pulumi.StringOutput)
}

// Test data input.
func (o TableVerticalDataSettingsResponseOutput) TestData() TestDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettingsResponse) *TestDataSettingsResponse { return v.TestData }).(TestDataSettingsResponsePtrOutput)
}

// [Required] Training data input.
func (o TableVerticalDataSettingsResponseOutput) TrainingData() TrainingDataSettingsResponseOutput {
	return o.ApplyT(func(v TableVerticalDataSettingsResponse) TrainingDataSettingsResponse { return v.TrainingData }).(TrainingDataSettingsResponseOutput)
}

// Validation data inputs.
func (o TableVerticalDataSettingsResponseOutput) ValidationData() TableVerticalValidationDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettingsResponse) *TableVerticalValidationDataSettingsResponse {
		return v.ValidationData
	}).(TableVerticalValidationDataSettingsResponsePtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o TableVerticalDataSettingsResponseOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalDataSettingsResponse) *string { return v.WeightColumnName }).(pulumi.StringPtrOutput)
}

type TableVerticalDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalDataSettingsResponse)(nil)).Elem()
}

func (o TableVerticalDataSettingsResponsePtrOutput) ToTableVerticalDataSettingsResponsePtrOutput() TableVerticalDataSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalDataSettingsResponsePtrOutput) ToTableVerticalDataSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalDataSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalDataSettingsResponsePtrOutput) Elem() TableVerticalDataSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) TableVerticalDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalDataSettingsResponse
		return ret
	}).(TableVerticalDataSettingsResponseOutput)
}

// [Required] Target column name: This is prediction values column.
// Also known as label column name in context of classification tasks.
func (o TableVerticalDataSettingsResponsePtrOutput) TargetColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TargetColumnName
	}).(pulumi.StringPtrOutput)
}

// Test data input.
func (o TableVerticalDataSettingsResponsePtrOutput) TestData() TestDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) *TestDataSettingsResponse {
		if v == nil {
			return nil
		}
		return v.TestData
	}).(TestDataSettingsResponsePtrOutput)
}

// [Required] Training data input.
func (o TableVerticalDataSettingsResponsePtrOutput) TrainingData() TrainingDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) *TrainingDataSettingsResponse {
		if v == nil {
			return nil
		}
		return &v.TrainingData
	}).(TrainingDataSettingsResponsePtrOutput)
}

// Validation data inputs.
func (o TableVerticalDataSettingsResponsePtrOutput) ValidationData() TableVerticalValidationDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) *TableVerticalValidationDataSettingsResponse {
		if v == nil {
			return nil
		}
		return v.ValidationData
	}).(TableVerticalValidationDataSettingsResponsePtrOutput)
}

// The name of the sample weight column. Automated ML supports a weighted column as an input, causing rows in the data to be weighted up or down.
func (o TableVerticalDataSettingsResponsePtrOutput) WeightColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalDataSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.WeightColumnName
	}).(pulumi.StringPtrOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettings struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Columns to be dropped from data during featurization.
	DropColumns []string `pulumi:"dropColumns"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformer `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettings
func (val *TableVerticalFeaturizationSettings) Defaults() *TableVerticalFeaturizationSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TableVerticalFeaturizationSettingsInput is an input type that accepts TableVerticalFeaturizationSettingsArgs and TableVerticalFeaturizationSettingsOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsInput` via:
//
//	TableVerticalFeaturizationSettingsArgs{...}
type TableVerticalFeaturizationSettingsInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput
	ToTableVerticalFeaturizationSettingsOutputWithContext(context.Context) TableVerticalFeaturizationSettingsOutput
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsArgs struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers pulumi.StringArrayInput `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes pulumi.StringMapInput `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage pulumi.StringPtrInput `pulumi:"datasetLanguage"`
	// Columns to be dropped from data during featurization.
	DropColumns pulumi.StringArrayInput `pulumi:"dropColumns"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization pulumi.BoolPtrInput `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams ColumnTransformerArrayMapInput `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsArgs
func (val *TableVerticalFeaturizationSettingsArgs) Defaults() *TableVerticalFeaturizationSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		tmp.EnableDnnFeaturization = pulumi.BoolPtr(false)
	}
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("Auto")
	}
	return &tmp
}
func (TableVerticalFeaturizationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return i.ToTableVerticalFeaturizationSettingsOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput)
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalFeaturizationSettingsArgs) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsOutput).ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx)
}

// TableVerticalFeaturizationSettingsPtrInput is an input type that accepts TableVerticalFeaturizationSettingsArgs, TableVerticalFeaturizationSettingsPtr and TableVerticalFeaturizationSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalFeaturizationSettingsPtrInput` via:
//
//	        TableVerticalFeaturizationSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalFeaturizationSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput
	ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Context) TableVerticalFeaturizationSettingsPtrOutput
}

type tableVerticalFeaturizationSettingsPtrType TableVerticalFeaturizationSettingsArgs

func TableVerticalFeaturizationSettingsPtr(v *TableVerticalFeaturizationSettingsArgs) TableVerticalFeaturizationSettingsPtrInput {
	return (*tableVerticalFeaturizationSettingsPtrType)(v)
}

func (*tableVerticalFeaturizationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return i.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalFeaturizationSettingsPtrType) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalFeaturizationSettingsPtrOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutput() TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o.ToTableVerticalFeaturizationSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalFeaturizationSettingsOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalFeaturizationSettings) *TableVerticalFeaturizationSettings {
		return &v
	}).(TableVerticalFeaturizationSettingsPtrOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Columns to be dropped from data during featurization.
func (o TableVerticalFeaturizationSettingsOutput) DropColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) []string { return v.DropColumns }).(pulumi.StringArrayOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettings) map[string][]ColumnTransformer { return v.TransformerParams }).(ColumnTransformerArrayMapOutput)
}

type TableVerticalFeaturizationSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettings)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutput() TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) ToTableVerticalFeaturizationSettingsPtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsPtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsPtrOutput) Elem() TableVerticalFeaturizationSettingsOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) TableVerticalFeaturizationSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettings
		return ret
	}).(TableVerticalFeaturizationSettingsOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsPtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsPtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Columns to be dropped from data during featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) DropColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) []string {
		if v == nil {
			return nil
		}
		return v.DropColumns
	}).(pulumi.StringArrayOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsPtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsPtrOutput) TransformerParams() ColumnTransformerArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettings) map[string][]ColumnTransformer {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerArrayMapOutput)
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponse struct {
	// These transformers shall not be used in featurization.
	BlockedTransformers []string `pulumi:"blockedTransformers"`
	// Dictionary of column name and its type (int, float, string, datetime etc).
	ColumnNameAndTypes map[string]string `pulumi:"columnNameAndTypes"`
	// Dataset language, useful for the text data.
	DatasetLanguage *string `pulumi:"datasetLanguage"`
	// Columns to be dropped from data during featurization.
	DropColumns []string `pulumi:"dropColumns"`
	// Determines whether to use Dnn based featurizers for data featurization.
	EnableDnnFeaturization *bool `pulumi:"enableDnnFeaturization"`
	// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
	// If 'Off' is selected then no featurization is done.
	// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
	Mode *string `pulumi:"mode"`
	// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
	TransformerParams map[string][]ColumnTransformerResponse `pulumi:"transformerParams"`
}

// Defaults sets the appropriate defaults for TableVerticalFeaturizationSettingsResponse
func (val *TableVerticalFeaturizationSettingsResponse) Defaults() *TableVerticalFeaturizationSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnFeaturization == nil {
		enableDnnFeaturization_ := false
		tmp.EnableDnnFeaturization = &enableDnnFeaturization_
	}
	if tmp.Mode == nil {
		mode_ := "Auto"
		tmp.Mode = &mode_
	}
	return &tmp
}

// Featurization Configuration.
type TableVerticalFeaturizationSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutput() TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponseOutput) ToTableVerticalFeaturizationSettingsResponseOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponseOutput {
	return o
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) []string { return v.BlockedTransformers }).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponseOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string]string { return v.ColumnNameAndTypes }).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponseOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.DatasetLanguage }).(pulumi.StringPtrOutput)
}

// Columns to be dropped from data during featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) DropColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) []string { return v.DropColumns }).(pulumi.StringArrayOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponseOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *bool { return v.EnableDnnFeaturization }).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponseOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

type TableVerticalFeaturizationSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalFeaturizationSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalFeaturizationSettingsResponse)(nil)).Elem()
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutput() TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ToTableVerticalFeaturizationSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalFeaturizationSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Elem() TableVerticalFeaturizationSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) TableVerticalFeaturizationSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalFeaturizationSettingsResponse
		return ret
	}).(TableVerticalFeaturizationSettingsResponseOutput)
}

// These transformers shall not be used in featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) BlockedTransformers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.BlockedTransformers
	}).(pulumi.StringArrayOutput)
}

// Dictionary of column name and its type (int, float, string, datetime etc).
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) ColumnNameAndTypes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ColumnNameAndTypes
	}).(pulumi.StringMapOutput)
}

// Dataset language, useful for the text data.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) DatasetLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.DatasetLanguage
	}).(pulumi.StringPtrOutput)
}

// Columns to be dropped from data during featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) DropColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.DropColumns
	}).(pulumi.StringArrayOutput)
}

// Determines whether to use Dnn based featurizers for data featurization.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) EnableDnnFeaturization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnFeaturization
	}).(pulumi.BoolPtrOutput)
}

// Featurization mode - User can keep the default 'Auto' mode and AutoML will take care of necessary transformation of the data in featurization phase.
// If 'Off' is selected then no featurization is done.
// If 'Custom' is selected then user can specify additional inputs to customize how featurization is done.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// User can specify additional transformers to be used along with the columns to which it would be applied and parameters for the transformer constructor.
func (o TableVerticalFeaturizationSettingsResponsePtrOutput) TransformerParams() ColumnTransformerResponseArrayMapOutput {
	return o.ApplyT(func(v *TableVerticalFeaturizationSettingsResponse) map[string][]ColumnTransformerResponse {
		if v == nil {
			return nil
		}
		return v.TransformerParams
	}).(ColumnTransformerResponseArrayMapOutput)
}

// Job execution constraints.
type TableVerticalLimitSettings struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettings
func (val *TableVerticalLimitSettings) Defaults() *TableVerticalLimitSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// TableVerticalLimitSettingsInput is an input type that accepts TableVerticalLimitSettingsArgs and TableVerticalLimitSettingsOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsInput` via:
//
//	TableVerticalLimitSettingsArgs{...}
type TableVerticalLimitSettingsInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput
	ToTableVerticalLimitSettingsOutputWithContext(context.Context) TableVerticalLimitSettingsOutput
}

// Job execution constraints.
type TableVerticalLimitSettingsArgs struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination pulumi.BoolPtrInput `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore pulumi.Float64PtrInput `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials pulumi.IntPtrInput `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial pulumi.IntPtrInput `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials pulumi.IntPtrInput `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout pulumi.StringPtrInput `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsArgs
func (val *TableVerticalLimitSettingsArgs) Defaults() *TableVerticalLimitSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		tmp.EnableEarlyTermination = pulumi.BoolPtr(true)
	}
	if tmp.MaxConcurrentTrials == nil {
		tmp.MaxConcurrentTrials = pulumi.IntPtr(1)
	}
	if tmp.MaxCoresPerTrial == nil {
		tmp.MaxCoresPerTrial = pulumi.IntPtr(-1)
	}
	if tmp.MaxTrials == nil {
		tmp.MaxTrials = pulumi.IntPtr(1000)
	}
	if tmp.Timeout == nil {
		tmp.Timeout = pulumi.StringPtr("PT6H")
	}
	if tmp.TrialTimeout == nil {
		tmp.TrialTimeout = pulumi.StringPtr("PT30M")
	}
	return &tmp
}
func (TableVerticalLimitSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return i.ToTableVerticalLimitSettingsOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput)
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalLimitSettingsArgs) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsOutput).ToTableVerticalLimitSettingsPtrOutputWithContext(ctx)
}

// TableVerticalLimitSettingsPtrInput is an input type that accepts TableVerticalLimitSettingsArgs, TableVerticalLimitSettingsPtr and TableVerticalLimitSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalLimitSettingsPtrInput` via:
//
//	        TableVerticalLimitSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalLimitSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput
	ToTableVerticalLimitSettingsPtrOutputWithContext(context.Context) TableVerticalLimitSettingsPtrOutput
}

type tableVerticalLimitSettingsPtrType TableVerticalLimitSettingsArgs

func TableVerticalLimitSettingsPtr(v *TableVerticalLimitSettingsArgs) TableVerticalLimitSettingsPtrInput {
	return (*tableVerticalLimitSettingsPtrType)(v)
}

func (*tableVerticalLimitSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return i.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalLimitSettingsPtrType) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalLimitSettingsPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutput() TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsOutputWithContext(ctx context.Context) TableVerticalLimitSettingsOutput {
	return o
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o.ToTableVerticalLimitSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalLimitSettingsOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalLimitSettings) *TableVerticalLimitSettings {
		return &v
	}).(TableVerticalLimitSettingsPtrOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettings) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettings)(nil)).Elem()
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutput() TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) ToTableVerticalLimitSettingsPtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsPtrOutput {
	return o
}

func (o TableVerticalLimitSettingsPtrOutput) Elem() TableVerticalLimitSettingsOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) TableVerticalLimitSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettings
		return ret
	}).(TableVerticalLimitSettingsOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsPtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsPtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsPtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsPtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsPtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettings) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Job execution constraints.
type TableVerticalLimitSettingsResponse struct {
	// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
	EnableEarlyTermination *bool `pulumi:"enableEarlyTermination"`
	// Exit score for the AutoML job.
	ExitScore *float64 `pulumi:"exitScore"`
	// Maximum Concurrent iterations.
	MaxConcurrentTrials *int `pulumi:"maxConcurrentTrials"`
	// Max cores per iteration.
	MaxCoresPerTrial *int `pulumi:"maxCoresPerTrial"`
	// Number of iterations.
	MaxTrials *int `pulumi:"maxTrials"`
	// AutoML job timeout.
	Timeout *string `pulumi:"timeout"`
	// Iteration timeout.
	TrialTimeout *string `pulumi:"trialTimeout"`
}

// Defaults sets the appropriate defaults for TableVerticalLimitSettingsResponse
func (val *TableVerticalLimitSettingsResponse) Defaults() *TableVerticalLimitSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableEarlyTermination == nil {
		enableEarlyTermination_ := true
		tmp.EnableEarlyTermination = &enableEarlyTermination_
	}
	if tmp.MaxConcurrentTrials == nil {
		maxConcurrentTrials_ := 1
		tmp.MaxConcurrentTrials = &maxConcurrentTrials_
	}
	if tmp.MaxCoresPerTrial == nil {
		maxCoresPerTrial_ := -1
		tmp.MaxCoresPerTrial = &maxCoresPerTrial_
	}
	if tmp.MaxTrials == nil {
		maxTrials_ := 1000
		tmp.MaxTrials = &maxTrials_
	}
	if tmp.Timeout == nil {
		timeout_ := "PT6H"
		tmp.Timeout = &timeout_
	}
	if tmp.TrialTimeout == nil {
		trialTimeout_ := "PT30M"
		tmp.TrialTimeout = &trialTimeout_
	}
	return &tmp
}

// Job execution constraints.
type TableVerticalLimitSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutput() TableVerticalLimitSettingsResponseOutput {
	return o
}

func (o TableVerticalLimitSettingsResponseOutput) ToTableVerticalLimitSettingsResponseOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponseOutput {
	return o
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponseOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *bool { return v.EnableEarlyTermination }).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponseOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *float64 { return v.ExitScore }).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxConcurrentTrials }).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponseOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxCoresPerTrial }).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponseOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *int { return v.MaxTrials }).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponseOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponseOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableVerticalLimitSettingsResponse) *string { return v.TrialTimeout }).(pulumi.StringPtrOutput)
}

type TableVerticalLimitSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalLimitSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalLimitSettingsResponse)(nil)).Elem()
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutput() TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) ToTableVerticalLimitSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalLimitSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalLimitSettingsResponsePtrOutput) Elem() TableVerticalLimitSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) TableVerticalLimitSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalLimitSettingsResponse
		return ret
	}).(TableVerticalLimitSettingsResponseOutput)
}

// Enable early termination, determines whether or not if AutoMLJob will terminate early if there is no score improvement in last 20 iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) EnableEarlyTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableEarlyTermination
	}).(pulumi.BoolPtrOutput)
}

// Exit score for the AutoML job.
func (o TableVerticalLimitSettingsResponsePtrOutput) ExitScore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ExitScore
	}).(pulumi.Float64PtrOutput)
}

// Maximum Concurrent iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxConcurrentTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentTrials
	}).(pulumi.IntPtrOutput)
}

// Max cores per iteration.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxCoresPerTrial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxCoresPerTrial
	}).(pulumi.IntPtrOutput)
}

// Number of iterations.
func (o TableVerticalLimitSettingsResponsePtrOutput) MaxTrials() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxTrials
	}).(pulumi.IntPtrOutput)
}

// AutoML job timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// Iteration timeout.
func (o TableVerticalLimitSettingsResponsePtrOutput) TrialTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableVerticalLimitSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.TrialTimeout
	}).(pulumi.StringPtrOutput)
}

// Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting.
type TableVerticalValidationDataSettings struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Validation data MLTable.
	Data *MLTableJobInput `pulumi:"data"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for TableVerticalValidationDataSettings
func (val *TableVerticalValidationDataSettings) Defaults() *TableVerticalValidationDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// TableVerticalValidationDataSettingsInput is an input type that accepts TableVerticalValidationDataSettingsArgs and TableVerticalValidationDataSettingsOutput values.
// You can construct a concrete instance of `TableVerticalValidationDataSettingsInput` via:
//
//	TableVerticalValidationDataSettingsArgs{...}
type TableVerticalValidationDataSettingsInput interface {
	pulumi.Input

	ToTableVerticalValidationDataSettingsOutput() TableVerticalValidationDataSettingsOutput
	ToTableVerticalValidationDataSettingsOutputWithContext(context.Context) TableVerticalValidationDataSettingsOutput
}

// Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting.
type TableVerticalValidationDataSettingsArgs struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames pulumi.StringArrayInput `pulumi:"cvSplitColumnNames"`
	// Validation data MLTable.
	Data MLTableJobInputPtrInput `pulumi:"data"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations pulumi.Input `pulumi:"nCrossValidations"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize pulumi.Float64PtrInput `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for TableVerticalValidationDataSettingsArgs
func (val *TableVerticalValidationDataSettingsArgs) Defaults() *TableVerticalValidationDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TableVerticalValidationDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalValidationDataSettings)(nil)).Elem()
}

func (i TableVerticalValidationDataSettingsArgs) ToTableVerticalValidationDataSettingsOutput() TableVerticalValidationDataSettingsOutput {
	return i.ToTableVerticalValidationDataSettingsOutputWithContext(context.Background())
}

func (i TableVerticalValidationDataSettingsArgs) ToTableVerticalValidationDataSettingsOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalValidationDataSettingsOutput)
}

func (i TableVerticalValidationDataSettingsArgs) ToTableVerticalValidationDataSettingsPtrOutput() TableVerticalValidationDataSettingsPtrOutput {
	return i.ToTableVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i TableVerticalValidationDataSettingsArgs) ToTableVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalValidationDataSettingsOutput).ToTableVerticalValidationDataSettingsPtrOutputWithContext(ctx)
}

// TableVerticalValidationDataSettingsPtrInput is an input type that accepts TableVerticalValidationDataSettingsArgs, TableVerticalValidationDataSettingsPtr and TableVerticalValidationDataSettingsPtrOutput values.
// You can construct a concrete instance of `TableVerticalValidationDataSettingsPtrInput` via:
//
//	        TableVerticalValidationDataSettingsArgs{...}
//
//	or:
//
//	        nil
type TableVerticalValidationDataSettingsPtrInput interface {
	pulumi.Input

	ToTableVerticalValidationDataSettingsPtrOutput() TableVerticalValidationDataSettingsPtrOutput
	ToTableVerticalValidationDataSettingsPtrOutputWithContext(context.Context) TableVerticalValidationDataSettingsPtrOutput
}

type tableVerticalValidationDataSettingsPtrType TableVerticalValidationDataSettingsArgs

func TableVerticalValidationDataSettingsPtr(v *TableVerticalValidationDataSettingsArgs) TableVerticalValidationDataSettingsPtrInput {
	return (*tableVerticalValidationDataSettingsPtrType)(v)
}

func (*tableVerticalValidationDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalValidationDataSettings)(nil)).Elem()
}

func (i *tableVerticalValidationDataSettingsPtrType) ToTableVerticalValidationDataSettingsPtrOutput() TableVerticalValidationDataSettingsPtrOutput {
	return i.ToTableVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (i *tableVerticalValidationDataSettingsPtrType) ToTableVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableVerticalValidationDataSettingsPtrOutput)
}

// Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting.
type TableVerticalValidationDataSettingsOutput struct{ *pulumi.OutputState }

func (TableVerticalValidationDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalValidationDataSettings)(nil)).Elem()
}

func (o TableVerticalValidationDataSettingsOutput) ToTableVerticalValidationDataSettingsOutput() TableVerticalValidationDataSettingsOutput {
	return o
}

func (o TableVerticalValidationDataSettingsOutput) ToTableVerticalValidationDataSettingsOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsOutput {
	return o
}

func (o TableVerticalValidationDataSettingsOutput) ToTableVerticalValidationDataSettingsPtrOutput() TableVerticalValidationDataSettingsPtrOutput {
	return o.ToTableVerticalValidationDataSettingsPtrOutputWithContext(context.Background())
}

func (o TableVerticalValidationDataSettingsOutput) ToTableVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableVerticalValidationDataSettings) *TableVerticalValidationDataSettings {
		return &v
	}).(TableVerticalValidationDataSettingsPtrOutput)
}

// Columns to use for CVSplit data.
func (o TableVerticalValidationDataSettingsOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettings) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Validation data MLTable.
func (o TableVerticalValidationDataSettingsOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettings) *MLTableJobInput { return v.Data }).(MLTableJobInputPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettings) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettings) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type TableVerticalValidationDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (TableVerticalValidationDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalValidationDataSettings)(nil)).Elem()
}

func (o TableVerticalValidationDataSettingsPtrOutput) ToTableVerticalValidationDataSettingsPtrOutput() TableVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o TableVerticalValidationDataSettingsPtrOutput) ToTableVerticalValidationDataSettingsPtrOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsPtrOutput {
	return o
}

func (o TableVerticalValidationDataSettingsPtrOutput) Elem() TableVerticalValidationDataSettingsOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettings) TableVerticalValidationDataSettings {
		if v != nil {
			return *v
		}
		var ret TableVerticalValidationDataSettings
		return ret
	}).(TableVerticalValidationDataSettingsOutput)
}

// Columns to use for CVSplit data.
func (o TableVerticalValidationDataSettingsPtrOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettings) []string {
		if v == nil {
			return nil
		}
		return v.CvSplitColumnNames
	}).(pulumi.StringArrayOutput)
}

// Validation data MLTable.
func (o TableVerticalValidationDataSettingsPtrOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettings) *MLTableJobInput {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputPtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsPtrOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettings) interface{} {
		if v == nil {
			return nil
		}
		return v.NCrossValidations
	}).(pulumi.AnyOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsPtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

// Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting.
type TableVerticalValidationDataSettingsResponse struct {
	// Columns to use for CVSplit data.
	CvSplitColumnNames []string `pulumi:"cvSplitColumnNames"`
	// Validation data MLTable.
	Data *MLTableJobInputResponse `pulumi:"data"`
	// Number of cross validation folds to be applied on training dataset
	// when validation dataset is not provided.
	NCrossValidations interface{} `pulumi:"nCrossValidations"`
	// The fraction of training dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	ValidationDataSize *float64 `pulumi:"validationDataSize"`
}

// Defaults sets the appropriate defaults for TableVerticalValidationDataSettingsResponse
func (val *TableVerticalValidationDataSettingsResponse) Defaults() *TableVerticalValidationDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// Validation settings for AutoML Table vertical tasks - Classification/Regression/Forecasting.
type TableVerticalValidationDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (TableVerticalValidationDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o TableVerticalValidationDataSettingsResponseOutput) ToTableVerticalValidationDataSettingsResponseOutput() TableVerticalValidationDataSettingsResponseOutput {
	return o
}

func (o TableVerticalValidationDataSettingsResponseOutput) ToTableVerticalValidationDataSettingsResponseOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsResponseOutput {
	return o
}

// Columns to use for CVSplit data.
func (o TableVerticalValidationDataSettingsResponseOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettingsResponse) []string { return v.CvSplitColumnNames }).(pulumi.StringArrayOutput)
}

// Validation data MLTable.
func (o TableVerticalValidationDataSettingsResponseOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettingsResponse) *MLTableJobInputResponse { return v.Data }).(MLTableJobInputResponsePtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsResponseOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettingsResponse) interface{} { return v.NCrossValidations }).(pulumi.AnyOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsResponseOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TableVerticalValidationDataSettingsResponse) *float64 { return v.ValidationDataSize }).(pulumi.Float64PtrOutput)
}

type TableVerticalValidationDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TableVerticalValidationDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableVerticalValidationDataSettingsResponse)(nil)).Elem()
}

func (o TableVerticalValidationDataSettingsResponsePtrOutput) ToTableVerticalValidationDataSettingsResponsePtrOutput() TableVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalValidationDataSettingsResponsePtrOutput) ToTableVerticalValidationDataSettingsResponsePtrOutputWithContext(ctx context.Context) TableVerticalValidationDataSettingsResponsePtrOutput {
	return o
}

func (o TableVerticalValidationDataSettingsResponsePtrOutput) Elem() TableVerticalValidationDataSettingsResponseOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettingsResponse) TableVerticalValidationDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TableVerticalValidationDataSettingsResponse
		return ret
	}).(TableVerticalValidationDataSettingsResponseOutput)
}

// Columns to use for CVSplit data.
func (o TableVerticalValidationDataSettingsResponsePtrOutput) CvSplitColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettingsResponse) []string {
		if v == nil {
			return nil
		}
		return v.CvSplitColumnNames
	}).(pulumi.StringArrayOutput)
}

// Validation data MLTable.
func (o TableVerticalValidationDataSettingsResponsePtrOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettingsResponse) *MLTableJobInputResponse {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputResponsePtrOutput)
}

// Number of cross validation folds to be applied on training dataset
// when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsResponsePtrOutput) NCrossValidations() pulumi.AnyOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettingsResponse) interface{} {
		if v == nil {
			return nil
		}
		return v.NCrossValidations
	}).(pulumi.AnyOutput)
}

// The fraction of training dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TableVerticalValidationDataSettingsResponsePtrOutput) ValidationDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TableVerticalValidationDataSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.ValidationDataSize
	}).(pulumi.Float64PtrOutput)
}

type TargetUtilizationScaleSettings struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettings
func (val *TargetUtilizationScaleSettings) Defaults() *TargetUtilizationScaleSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

// TargetUtilizationScaleSettingsInput is an input type that accepts TargetUtilizationScaleSettingsArgs and TargetUtilizationScaleSettingsOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsInput` via:
//
//	TargetUtilizationScaleSettingsArgs{...}
type TargetUtilizationScaleSettingsInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput
	ToTargetUtilizationScaleSettingsOutputWithContext(context.Context) TargetUtilizationScaleSettingsOutput
}

type TargetUtilizationScaleSettingsArgs struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances pulumi.IntPtrInput `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances pulumi.IntPtrInput `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval pulumi.StringPtrInput `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType pulumi.StringInput `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage pulumi.IntPtrInput `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsArgs
func (val *TargetUtilizationScaleSettingsArgs) Defaults() *TargetUtilizationScaleSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		tmp.MaxInstances = pulumi.IntPtr(1)
	}
	if tmp.MinInstances == nil {
		tmp.MinInstances = pulumi.IntPtr(1)
	}
	if tmp.PollingInterval == nil {
		tmp.PollingInterval = pulumi.StringPtr("PT1S")
	}
	if tmp.TargetUtilizationPercentage == nil {
		tmp.TargetUtilizationPercentage = pulumi.IntPtr(70)
	}
	return &tmp
}
func (TargetUtilizationScaleSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return i.ToTargetUtilizationScaleSettingsOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput)
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i TargetUtilizationScaleSettingsArgs) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsOutput).ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx)
}

// TargetUtilizationScaleSettingsPtrInput is an input type that accepts TargetUtilizationScaleSettingsArgs, TargetUtilizationScaleSettingsPtr and TargetUtilizationScaleSettingsPtrOutput values.
// You can construct a concrete instance of `TargetUtilizationScaleSettingsPtrInput` via:
//
//	        TargetUtilizationScaleSettingsArgs{...}
//
//	or:
//
//	        nil
type TargetUtilizationScaleSettingsPtrInput interface {
	pulumi.Input

	ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput
	ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Context) TargetUtilizationScaleSettingsPtrOutput
}

type targetUtilizationScaleSettingsPtrType TargetUtilizationScaleSettingsArgs

func TargetUtilizationScaleSettingsPtr(v *TargetUtilizationScaleSettingsArgs) TargetUtilizationScaleSettingsPtrInput {
	return (*targetUtilizationScaleSettingsPtrType)(v)
}

func (*targetUtilizationScaleSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return i.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (i *targetUtilizationScaleSettingsPtrType) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TargetUtilizationScaleSettingsPtrOutput)
}

type TargetUtilizationScaleSettingsOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutput() TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsOutput {
	return o
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o.ToTargetUtilizationScaleSettingsPtrOutputWithContext(context.Background())
}

func (o TargetUtilizationScaleSettingsOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TargetUtilizationScaleSettings) *TargetUtilizationScaleSettings {
		return &v
	}).(TargetUtilizationScaleSettingsPtrOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettings) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsPtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettings)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutput() TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) ToTargetUtilizationScaleSettingsPtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsPtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsPtrOutput) Elem() TargetUtilizationScaleSettingsOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) TargetUtilizationScaleSettings {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettings
		return ret
	}).(TargetUtilizationScaleSettingsOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsPtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsPtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsPtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsPtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsPtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettings) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponse struct {
	// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
	MaxInstances *int `pulumi:"maxInstances"`
	// The minimum number of instances to always be present.
	MinInstances *int `pulumi:"minInstances"`
	// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
	PollingInterval *string `pulumi:"pollingInterval"`
	// Expected value is 'TargetUtilization'.
	ScaleType string `pulumi:"scaleType"`
	// Target CPU usage for the autoscaler.
	TargetUtilizationPercentage *int `pulumi:"targetUtilizationPercentage"`
}

// Defaults sets the appropriate defaults for TargetUtilizationScaleSettingsResponse
func (val *TargetUtilizationScaleSettingsResponse) Defaults() *TargetUtilizationScaleSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.MaxInstances == nil {
		maxInstances_ := 1
		tmp.MaxInstances = &maxInstances_
	}
	if tmp.MinInstances == nil {
		minInstances_ := 1
		tmp.MinInstances = &minInstances_
	}
	if tmp.PollingInterval == nil {
		pollingInterval_ := "PT1S"
		tmp.PollingInterval = &pollingInterval_
	}
	if tmp.TargetUtilizationPercentage == nil {
		targetUtilizationPercentage_ := 70
		tmp.TargetUtilizationPercentage = &targetUtilizationPercentage_
	}
	return &tmp
}

type TargetUtilizationScaleSettingsResponseOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutput() TargetUtilizationScaleSettingsResponseOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponseOutput) ToTargetUtilizationScaleSettingsResponseOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponseOutput {
	return o
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponseOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MaxInstances }).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponseOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.MinInstances }).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponseOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *string { return v.PollingInterval }).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponseOutput) ScaleType() pulumi.StringOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) string { return v.ScaleType }).(pulumi.StringOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponseOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TargetUtilizationScaleSettingsResponse) *int { return v.TargetUtilizationPercentage }).(pulumi.IntPtrOutput)
}

type TargetUtilizationScaleSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TargetUtilizationScaleSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TargetUtilizationScaleSettingsResponse)(nil)).Elem()
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutput() TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) ToTargetUtilizationScaleSettingsResponsePtrOutputWithContext(ctx context.Context) TargetUtilizationScaleSettingsResponsePtrOutput {
	return o
}

func (o TargetUtilizationScaleSettingsResponsePtrOutput) Elem() TargetUtilizationScaleSettingsResponseOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) TargetUtilizationScaleSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TargetUtilizationScaleSettingsResponse
		return ret
	}).(TargetUtilizationScaleSettingsResponseOutput)
}

// The maximum number of instances that the deployment can scale to. The quota will be reserved for max_instances.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MaxInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstances
	}).(pulumi.IntPtrOutput)
}

// The minimum number of instances to always be present.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) MinInstances() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.MinInstances
	}).(pulumi.IntPtrOutput)
}

// The polling interval in ISO 8691 format. Only supports duration with precision as low as Seconds.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) PollingInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.PollingInterval
	}).(pulumi.StringPtrOutput)
}

// Expected value is 'TargetUtilization'.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) ScaleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ScaleType
	}).(pulumi.StringPtrOutput)
}

// Target CPU usage for the autoscaler.
func (o TargetUtilizationScaleSettingsResponsePtrOutput) TargetUtilizationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TargetUtilizationScaleSettingsResponse) *int {
		if v == nil {
			return nil
		}
		return v.TargetUtilizationPercentage
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlow struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlow
func (val *TensorFlow) Defaults() *TensorFlow {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlowInput is an input type that accepts TensorFlowArgs and TensorFlowOutput values.
// You can construct a concrete instance of `TensorFlowInput` via:
//
//	TensorFlowArgs{...}
type TensorFlowInput interface {
	pulumi.Input

	ToTensorFlowOutput() TensorFlowOutput
	ToTensorFlowOutputWithContext(context.Context) TensorFlowOutput
}

// TensorFlow distribution configuration.
type TensorFlowArgs struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType pulumi.StringInput `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount pulumi.IntPtrInput `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount pulumi.IntPtrInput `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowArgs
func (val *TensorFlowArgs) Defaults() *TensorFlowArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		tmp.ParameterServerCount = pulumi.IntPtr(0)
	}
	return &tmp
}
func (TensorFlowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (i TensorFlowArgs) ToTensorFlowOutput() TensorFlowOutput {
	return i.ToTensorFlowOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput)
}

func (i TensorFlowArgs) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i TensorFlowArgs) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowOutput).ToTensorFlowPtrOutputWithContext(ctx)
}

// TensorFlowPtrInput is an input type that accepts TensorFlowArgs, TensorFlowPtr and TensorFlowPtrOutput values.
// You can construct a concrete instance of `TensorFlowPtrInput` via:
//
//	        TensorFlowArgs{...}
//
//	or:
//
//	        nil
type TensorFlowPtrInput interface {
	pulumi.Input

	ToTensorFlowPtrOutput() TensorFlowPtrOutput
	ToTensorFlowPtrOutputWithContext(context.Context) TensorFlowPtrOutput
}

type tensorFlowPtrType TensorFlowArgs

func TensorFlowPtr(v *TensorFlowArgs) TensorFlowPtrInput {
	return (*tensorFlowPtrType)(v)
}

func (*tensorFlowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return i.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (i *tensorFlowPtrType) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TensorFlowPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowOutput struct{ *pulumi.OutputState }

func (TensorFlowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlow)(nil)).Elem()
}

func (o TensorFlowOutput) ToTensorFlowOutput() TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowOutputWithContext(ctx context.Context) TensorFlowOutput {
	return o
}

func (o TensorFlowOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o.ToTensorFlowPtrOutputWithContext(context.Background())
}

func (o TensorFlowOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TensorFlow) *TensorFlow {
		return &v
	}).(TensorFlowPtrOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlow) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlow) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowPtrOutput struct{ *pulumi.OutputState }

func (TensorFlowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlow)(nil)).Elem()
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutput() TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) ToTensorFlowPtrOutputWithContext(ctx context.Context) TensorFlowPtrOutput {
	return o
}

func (o TensorFlowPtrOutput) Elem() TensorFlowOutput {
	return o.ApplyT(func(v *TensorFlow) TensorFlow {
		if v != nil {
			return *v
		}
		var ret TensorFlow
		return ret
	}).(TensorFlowOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowPtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowPtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowPtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlow) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// TensorFlow distribution configuration.
type TensorFlowResponse struct {
	// Enum to determine the job distribution type.
	// Expected value is 'TensorFlow'.
	DistributionType string `pulumi:"distributionType"`
	// Number of parameter server tasks.
	ParameterServerCount *int `pulumi:"parameterServerCount"`
	// Number of workers. If not specified, will default to the instance count.
	WorkerCount *int `pulumi:"workerCount"`
}

// Defaults sets the appropriate defaults for TensorFlowResponse
func (val *TensorFlowResponse) Defaults() *TensorFlowResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ParameterServerCount == nil {
		parameterServerCount_ := 0
		tmp.ParameterServerCount = &parameterServerCount_
	}
	return &tmp
}

// TensorFlow distribution configuration.
type TensorFlowResponseOutput struct{ *pulumi.OutputState }

func (TensorFlowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutput() TensorFlowResponseOutput {
	return o
}

func (o TensorFlowResponseOutput) ToTensorFlowResponseOutputWithContext(ctx context.Context) TensorFlowResponseOutput {
	return o
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponseOutput) DistributionType() pulumi.StringOutput {
	return o.ApplyT(func(v TensorFlowResponse) string { return v.DistributionType }).(pulumi.StringOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponseOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.ParameterServerCount }).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponseOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TensorFlowResponse) *int { return v.WorkerCount }).(pulumi.IntPtrOutput)
}

type TensorFlowResponsePtrOutput struct{ *pulumi.OutputState }

func (TensorFlowResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TensorFlowResponse)(nil)).Elem()
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutput() TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) ToTensorFlowResponsePtrOutputWithContext(ctx context.Context) TensorFlowResponsePtrOutput {
	return o
}

func (o TensorFlowResponsePtrOutput) Elem() TensorFlowResponseOutput {
	return o.ApplyT(func(v *TensorFlowResponse) TensorFlowResponse {
		if v != nil {
			return *v
		}
		var ret TensorFlowResponse
		return ret
	}).(TensorFlowResponseOutput)
}

// Enum to determine the job distribution type.
// Expected value is 'TensorFlow'.
func (o TensorFlowResponsePtrOutput) DistributionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DistributionType
	}).(pulumi.StringPtrOutput)
}

// Number of parameter server tasks.
func (o TensorFlowResponsePtrOutput) ParameterServerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.ParameterServerCount
	}).(pulumi.IntPtrOutput)
}

// Number of workers. If not specified, will default to the instance count.
func (o TensorFlowResponsePtrOutput) WorkerCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TensorFlowResponse) *int {
		if v == nil {
			return nil
		}
		return v.WorkerCount
	}).(pulumi.IntPtrOutput)
}

// Test data inputs.
type TestDataSettings struct {
	// Test data MLTable.
	Data *MLTableJobInput `pulumi:"data"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
}

// Defaults sets the appropriate defaults for TestDataSettings
func (val *TestDataSettings) Defaults() *TestDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// TestDataSettingsInput is an input type that accepts TestDataSettingsArgs and TestDataSettingsOutput values.
// You can construct a concrete instance of `TestDataSettingsInput` via:
//
//	TestDataSettingsArgs{...}
type TestDataSettingsInput interface {
	pulumi.Input

	ToTestDataSettingsOutput() TestDataSettingsOutput
	ToTestDataSettingsOutputWithContext(context.Context) TestDataSettingsOutput
}

// Test data inputs.
type TestDataSettingsArgs struct {
	// Test data MLTable.
	Data MLTableJobInputPtrInput `pulumi:"data"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize pulumi.Float64PtrInput `pulumi:"testDataSize"`
}

// Defaults sets the appropriate defaults for TestDataSettingsArgs
func (val *TestDataSettingsArgs) Defaults() *TestDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TestDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TestDataSettings)(nil)).Elem()
}

func (i TestDataSettingsArgs) ToTestDataSettingsOutput() TestDataSettingsOutput {
	return i.ToTestDataSettingsOutputWithContext(context.Background())
}

func (i TestDataSettingsArgs) ToTestDataSettingsOutputWithContext(ctx context.Context) TestDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDataSettingsOutput)
}

func (i TestDataSettingsArgs) ToTestDataSettingsPtrOutput() TestDataSettingsPtrOutput {
	return i.ToTestDataSettingsPtrOutputWithContext(context.Background())
}

func (i TestDataSettingsArgs) ToTestDataSettingsPtrOutputWithContext(ctx context.Context) TestDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDataSettingsOutput).ToTestDataSettingsPtrOutputWithContext(ctx)
}

// TestDataSettingsPtrInput is an input type that accepts TestDataSettingsArgs, TestDataSettingsPtr and TestDataSettingsPtrOutput values.
// You can construct a concrete instance of `TestDataSettingsPtrInput` via:
//
//	        TestDataSettingsArgs{...}
//
//	or:
//
//	        nil
type TestDataSettingsPtrInput interface {
	pulumi.Input

	ToTestDataSettingsPtrOutput() TestDataSettingsPtrOutput
	ToTestDataSettingsPtrOutputWithContext(context.Context) TestDataSettingsPtrOutput
}

type testDataSettingsPtrType TestDataSettingsArgs

func TestDataSettingsPtr(v *TestDataSettingsArgs) TestDataSettingsPtrInput {
	return (*testDataSettingsPtrType)(v)
}

func (*testDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TestDataSettings)(nil)).Elem()
}

func (i *testDataSettingsPtrType) ToTestDataSettingsPtrOutput() TestDataSettingsPtrOutput {
	return i.ToTestDataSettingsPtrOutputWithContext(context.Background())
}

func (i *testDataSettingsPtrType) ToTestDataSettingsPtrOutputWithContext(ctx context.Context) TestDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestDataSettingsPtrOutput)
}

// Test data inputs.
type TestDataSettingsOutput struct{ *pulumi.OutputState }

func (TestDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestDataSettings)(nil)).Elem()
}

func (o TestDataSettingsOutput) ToTestDataSettingsOutput() TestDataSettingsOutput {
	return o
}

func (o TestDataSettingsOutput) ToTestDataSettingsOutputWithContext(ctx context.Context) TestDataSettingsOutput {
	return o
}

func (o TestDataSettingsOutput) ToTestDataSettingsPtrOutput() TestDataSettingsPtrOutput {
	return o.ToTestDataSettingsPtrOutputWithContext(context.Background())
}

func (o TestDataSettingsOutput) ToTestDataSettingsPtrOutputWithContext(ctx context.Context) TestDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TestDataSettings) *TestDataSettings {
		return &v
	}).(TestDataSettingsPtrOutput)
}

// Test data MLTable.
func (o TestDataSettingsOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v TestDataSettings) *MLTableJobInput { return v.Data }).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TestDataSettingsOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TestDataSettings) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

type TestDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (TestDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestDataSettings)(nil)).Elem()
}

func (o TestDataSettingsPtrOutput) ToTestDataSettingsPtrOutput() TestDataSettingsPtrOutput {
	return o
}

func (o TestDataSettingsPtrOutput) ToTestDataSettingsPtrOutputWithContext(ctx context.Context) TestDataSettingsPtrOutput {
	return o
}

func (o TestDataSettingsPtrOutput) Elem() TestDataSettingsOutput {
	return o.ApplyT(func(v *TestDataSettings) TestDataSettings {
		if v != nil {
			return *v
		}
		var ret TestDataSettings
		return ret
	}).(TestDataSettingsOutput)
}

// Test data MLTable.
func (o TestDataSettingsPtrOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v *TestDataSettings) *MLTableJobInput {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputPtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TestDataSettingsPtrOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TestDataSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.TestDataSize
	}).(pulumi.Float64PtrOutput)
}

// Test data inputs.
type TestDataSettingsResponse struct {
	// Test data MLTable.
	Data *MLTableJobInputResponse `pulumi:"data"`
	// The fraction of test dataset that needs to be set aside for validation purpose.
	// Values between (0.0 , 1.0)
	// Applied when validation dataset is not provided.
	TestDataSize *float64 `pulumi:"testDataSize"`
}

// Defaults sets the appropriate defaults for TestDataSettingsResponse
func (val *TestDataSettingsResponse) Defaults() *TestDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = tmp.Data.Defaults()

	return &tmp
}

// Test data inputs.
type TestDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (TestDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestDataSettingsResponse)(nil)).Elem()
}

func (o TestDataSettingsResponseOutput) ToTestDataSettingsResponseOutput() TestDataSettingsResponseOutput {
	return o
}

func (o TestDataSettingsResponseOutput) ToTestDataSettingsResponseOutputWithContext(ctx context.Context) TestDataSettingsResponseOutput {
	return o
}

// Test data MLTable.
func (o TestDataSettingsResponseOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v TestDataSettingsResponse) *MLTableJobInputResponse { return v.Data }).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TestDataSettingsResponseOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TestDataSettingsResponse) *float64 { return v.TestDataSize }).(pulumi.Float64PtrOutput)
}

type TestDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TestDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestDataSettingsResponse)(nil)).Elem()
}

func (o TestDataSettingsResponsePtrOutput) ToTestDataSettingsResponsePtrOutput() TestDataSettingsResponsePtrOutput {
	return o
}

func (o TestDataSettingsResponsePtrOutput) ToTestDataSettingsResponsePtrOutputWithContext(ctx context.Context) TestDataSettingsResponsePtrOutput {
	return o
}

func (o TestDataSettingsResponsePtrOutput) Elem() TestDataSettingsResponseOutput {
	return o.ApplyT(func(v *TestDataSettingsResponse) TestDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TestDataSettingsResponse
		return ret
	}).(TestDataSettingsResponseOutput)
}

// Test data MLTable.
func (o TestDataSettingsResponsePtrOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v *TestDataSettingsResponse) *MLTableJobInputResponse {
		if v == nil {
			return nil
		}
		return v.Data
	}).(MLTableJobInputResponsePtrOutput)
}

// The fraction of test dataset that needs to be set aside for validation purpose.
// Values between (0.0 , 1.0)
// Applied when validation dataset is not provided.
func (o TestDataSettingsResponsePtrOutput) TestDataSize() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TestDataSettingsResponse) *float64 {
		if v == nil {
			return nil
		}
		return v.TestDataSize
	}).(pulumi.Float64PtrOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassification struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassification
func (val *TextClassification) Defaults() *TextClassification {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// TextClassificationInput is an input type that accepts TextClassificationArgs and TextClassificationOutput values.
// You can construct a concrete instance of `TextClassificationInput` via:
//
//	TextClassificationArgs{...}
type TextClassificationInput interface {
	pulumi.Input

	ToTextClassificationOutput() TextClassificationOutput
	ToTextClassificationOutputWithContext(context.Context) TextClassificationOutput
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationArgs struct {
	// Data inputs for AutoMLJob.
	DataSettings NlpVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric pulumi.StringPtrInput `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassificationArgs
func (val *TextClassificationArgs) Defaults() *TextClassificationArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	if tmp.PrimaryMetric == nil {
		tmp.PrimaryMetric = pulumi.StringPtr("Accuracy")
	}
	return &tmp
}
func (TextClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (i TextClassificationArgs) ToTextClassificationOutput() TextClassificationOutput {
	return i.ToTextClassificationOutputWithContext(context.Background())
}

func (i TextClassificationArgs) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationOutput struct{ *pulumi.OutputState }

func (TextClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassification)(nil)).Elem()
}

func (o TextClassificationOutput) ToTextClassificationOutput() TextClassificationOutput {
	return o
}

func (o TextClassificationOutput) ToTextClassificationOutputWithContext(ctx context.Context) TextClassificationOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextClassificationOutput) DataSettings() NlpVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalDataSettings { return v.DataSettings }).(NlpVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassification) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassification) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassification) string { return v.TaskType }).(pulumi.StringOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabel struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabel
func (val *TextClassificationMultilabel) Defaults() *TextClassificationMultilabel {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	return &tmp
}

// TextClassificationMultilabelInput is an input type that accepts TextClassificationMultilabelArgs and TextClassificationMultilabelOutput values.
// You can construct a concrete instance of `TextClassificationMultilabelInput` via:
//
//	TextClassificationMultilabelArgs{...}
type TextClassificationMultilabelInput interface {
	pulumi.Input

	ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput
	ToTextClassificationMultilabelOutputWithContext(context.Context) TextClassificationMultilabelOutput
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelArgs struct {
	// Data inputs for AutoMLJob.
	DataSettings NlpVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelArgs
func (val *TextClassificationMultilabelArgs) Defaults() *TextClassificationMultilabelArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	return &tmp
}
func (TextClassificationMultilabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return i.ToTextClassificationMultilabelOutputWithContext(context.Background())
}

func (i TextClassificationMultilabelArgs) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextClassificationMultilabelOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabel)(nil)).Elem()
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutput() TextClassificationMultilabelOutput {
	return o
}

func (o TextClassificationMultilabelOutput) ToTextClassificationMultilabelOutputWithContext(ctx context.Context) TextClassificationMultilabelOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextClassificationMultilabelOutput) DataSettings() NlpVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalDataSettings { return v.DataSettings }).(NlpVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabel) string { return v.TaskType }).(pulumi.StringOutput)
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponse struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification-Multilabel task.
	// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassificationMultilabel'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassificationMultilabelResponse
func (val *TextClassificationMultilabelResponse) Defaults() *TextClassificationMultilabelResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	return &tmp
}

// Text Classification Multilabel task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationMultilabelResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationMultilabelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationMultilabelResponse)(nil)).Elem()
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutput() TextClassificationMultilabelResponseOutput {
	return o
}

func (o TextClassificationMultilabelResponseOutput) ToTextClassificationMultilabelResponseOutputWithContext(ctx context.Context) TextClassificationMultilabelResponseOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextClassificationMultilabelResponseOutput) DataSettings() NlpVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalDataSettingsResponse { return v.DataSettings }).(NlpVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationMultilabelResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationMultilabelResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationMultilabelResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification-Multilabel task.
// Currently only Accuracy is supported as primary metric, hence user need not set it explicitly.
func (o TextClassificationMultilabelResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassificationMultilabel'.
func (o TextClassificationMultilabelResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationMultilabelResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponse struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-Classification task.
	PrimaryMetric *string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'TextClassification'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextClassificationResponse
func (val *TextClassificationResponse) Defaults() *TextClassificationResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	if tmp.PrimaryMetric == nil {
		primaryMetric_ := "Accuracy"
		tmp.PrimaryMetric = &primaryMetric_
	}
	return &tmp
}

// Text Classification task in AutoML NLP vertical.
// NLP - Natural Language Processing.
type TextClassificationResponseOutput struct{ *pulumi.OutputState }

func (TextClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextClassificationResponse)(nil)).Elem()
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutput() TextClassificationResponseOutput {
	return o
}

func (o TextClassificationResponseOutput) ToTextClassificationResponseOutputWithContext(ctx context.Context) TextClassificationResponseOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextClassificationResponseOutput) DataSettings() NlpVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalDataSettingsResponse { return v.DataSettings }).(NlpVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextClassificationResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalFeaturizationSettingsResponse {
		return v.FeaturizationSettings
	}).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextClassificationResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextClassificationResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-Classification task.
func (o TextClassificationResponseOutput) PrimaryMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextClassificationResponse) *string { return v.PrimaryMetric }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextClassification'.
func (o TextClassificationResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextClassificationResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNer struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettings `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettings `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettings `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextNer
func (val *TextNer) Defaults() *TextNer {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	return &tmp
}

// TextNerInput is an input type that accepts TextNerArgs and TextNerOutput values.
// You can construct a concrete instance of `TextNerInput` via:
//
//	TextNerArgs{...}
type TextNerInput interface {
	pulumi.Input

	ToTextNerOutput() TextNerOutput
	ToTextNerOutputWithContext(context.Context) TextNerOutput
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerArgs struct {
	// Data inputs for AutoMLJob.
	DataSettings NlpVerticalDataSettingsPtrInput `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings NlpVerticalFeaturizationSettingsPtrInput `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings NlpVerticalLimitSettingsPtrInput `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity pulumi.StringPtrInput `pulumi:"logVerbosity"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType pulumi.StringInput `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextNerArgs
func (val *TextNerArgs) Defaults() *TextNerArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	if tmp.LogVerbosity == nil {
		tmp.LogVerbosity = pulumi.StringPtr("Info")
	}
	return &tmp
}
func (TextNerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNer)(nil)).Elem()
}

func (i TextNerArgs) ToTextNerOutput() TextNerOutput {
	return i.ToTextNerOutputWithContext(context.Background())
}

func (i TextNerArgs) ToTextNerOutputWithContext(ctx context.Context) TextNerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextNerOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerOutput struct{ *pulumi.OutputState }

func (TextNerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNer)(nil)).Elem()
}

func (o TextNerOutput) ToTextNerOutput() TextNerOutput {
	return o
}

func (o TextNerOutput) ToTextNerOutputWithContext(ctx context.Context) TextNerOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextNerOutput) DataSettings() NlpVerticalDataSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpVerticalDataSettings { return v.DataSettings }).(NlpVerticalDataSettingsPtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextNerOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpVerticalFeaturizationSettings { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsPtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextNerOutput) LimitSettings() NlpVerticalLimitSettingsPtrOutput {
	return o.ApplyT(func(v TextNer) *NlpVerticalLimitSettings { return v.LimitSettings }).(NlpVerticalLimitSettingsPtrOutput)
}

// Log verbosity for the job.
func (o TextNerOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNer) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextNER'.
func (o TextNerOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextNer) string { return v.TaskType }).(pulumi.StringOutput)
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerResponse struct {
	// Data inputs for AutoMLJob.
	DataSettings *NlpVerticalDataSettingsResponse `pulumi:"dataSettings"`
	// Featurization inputs needed for AutoML job.
	FeaturizationSettings *NlpVerticalFeaturizationSettingsResponse `pulumi:"featurizationSettings"`
	// Execution constraints for AutoMLJob.
	LimitSettings *NlpVerticalLimitSettingsResponse `pulumi:"limitSettings"`
	// Log verbosity for the job.
	LogVerbosity *string `pulumi:"logVerbosity"`
	// Primary metric for Text-NER task.
	// Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
	PrimaryMetric string `pulumi:"primaryMetric"`
	// AutoMLJob Task type.
	// Expected value is 'TextNER'.
	TaskType string `pulumi:"taskType"`
}

// Defaults sets the appropriate defaults for TextNerResponse
func (val *TextNerResponse) Defaults() *TextNerResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.DataSettings = tmp.DataSettings.Defaults()

	tmp.LimitSettings = tmp.LimitSettings.Defaults()

	if tmp.LogVerbosity == nil {
		logVerbosity_ := "Info"
		tmp.LogVerbosity = &logVerbosity_
	}
	return &tmp
}

// Text-NER task in AutoML NLP vertical.
// NER - Named Entity Recognition.
// NLP - Natural Language Processing.
type TextNerResponseOutput struct{ *pulumi.OutputState }

func (TextNerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextNerResponse)(nil)).Elem()
}

func (o TextNerResponseOutput) ToTextNerResponseOutput() TextNerResponseOutput {
	return o
}

func (o TextNerResponseOutput) ToTextNerResponseOutputWithContext(ctx context.Context) TextNerResponseOutput {
	return o
}

// Data inputs for AutoMLJob.
func (o TextNerResponseOutput) DataSettings() NlpVerticalDataSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpVerticalDataSettingsResponse { return v.DataSettings }).(NlpVerticalDataSettingsResponsePtrOutput)
}

// Featurization inputs needed for AutoML job.
func (o TextNerResponseOutput) FeaturizationSettings() NlpVerticalFeaturizationSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpVerticalFeaturizationSettingsResponse { return v.FeaturizationSettings }).(NlpVerticalFeaturizationSettingsResponsePtrOutput)
}

// Execution constraints for AutoMLJob.
func (o TextNerResponseOutput) LimitSettings() NlpVerticalLimitSettingsResponsePtrOutput {
	return o.ApplyT(func(v TextNerResponse) *NlpVerticalLimitSettingsResponse { return v.LimitSettings }).(NlpVerticalLimitSettingsResponsePtrOutput)
}

// Log verbosity for the job.
func (o TextNerResponseOutput) LogVerbosity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextNerResponse) *string { return v.LogVerbosity }).(pulumi.StringPtrOutput)
}

// Primary metric for Text-NER task.
// Only 'Accuracy' is supported for Text-NER, so user need not set this explicitly.
func (o TextNerResponseOutput) PrimaryMetric() pulumi.StringOutput {
	return o.ApplyT(func(v TextNerResponse) string { return v.PrimaryMetric }).(pulumi.StringOutput)
}

// AutoMLJob Task type.
// Expected value is 'TextNER'.
func (o TextNerResponseOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v TextNerResponse) string { return v.TaskType }).(pulumi.StringOutput)
}

// Training data input.
type TrainingDataSettings struct {
	// [Required] Training data MLTable.
	Data MLTableJobInput `pulumi:"data"`
}

// Defaults sets the appropriate defaults for TrainingDataSettings
func (val *TrainingDataSettings) Defaults() *TrainingDataSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = *tmp.Data.Defaults()

	return &tmp
}

// TrainingDataSettingsInput is an input type that accepts TrainingDataSettingsArgs and TrainingDataSettingsOutput values.
// You can construct a concrete instance of `TrainingDataSettingsInput` via:
//
//	TrainingDataSettingsArgs{...}
type TrainingDataSettingsInput interface {
	pulumi.Input

	ToTrainingDataSettingsOutput() TrainingDataSettingsOutput
	ToTrainingDataSettingsOutputWithContext(context.Context) TrainingDataSettingsOutput
}

// Training data input.
type TrainingDataSettingsArgs struct {
	// [Required] Training data MLTable.
	Data MLTableJobInputInput `pulumi:"data"`
}

// Defaults sets the appropriate defaults for TrainingDataSettingsArgs
func (val *TrainingDataSettingsArgs) Defaults() *TrainingDataSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrainingDataSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDataSettings)(nil)).Elem()
}

func (i TrainingDataSettingsArgs) ToTrainingDataSettingsOutput() TrainingDataSettingsOutput {
	return i.ToTrainingDataSettingsOutputWithContext(context.Background())
}

func (i TrainingDataSettingsArgs) ToTrainingDataSettingsOutputWithContext(ctx context.Context) TrainingDataSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDataSettingsOutput)
}

func (i TrainingDataSettingsArgs) ToTrainingDataSettingsPtrOutput() TrainingDataSettingsPtrOutput {
	return i.ToTrainingDataSettingsPtrOutputWithContext(context.Background())
}

func (i TrainingDataSettingsArgs) ToTrainingDataSettingsPtrOutputWithContext(ctx context.Context) TrainingDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDataSettingsOutput).ToTrainingDataSettingsPtrOutputWithContext(ctx)
}

// TrainingDataSettingsPtrInput is an input type that accepts TrainingDataSettingsArgs, TrainingDataSettingsPtr and TrainingDataSettingsPtrOutput values.
// You can construct a concrete instance of `TrainingDataSettingsPtrInput` via:
//
//	        TrainingDataSettingsArgs{...}
//
//	or:
//
//	        nil
type TrainingDataSettingsPtrInput interface {
	pulumi.Input

	ToTrainingDataSettingsPtrOutput() TrainingDataSettingsPtrOutput
	ToTrainingDataSettingsPtrOutputWithContext(context.Context) TrainingDataSettingsPtrOutput
}

type trainingDataSettingsPtrType TrainingDataSettingsArgs

func TrainingDataSettingsPtr(v *TrainingDataSettingsArgs) TrainingDataSettingsPtrInput {
	return (*trainingDataSettingsPtrType)(v)
}

func (*trainingDataSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDataSettings)(nil)).Elem()
}

func (i *trainingDataSettingsPtrType) ToTrainingDataSettingsPtrOutput() TrainingDataSettingsPtrOutput {
	return i.ToTrainingDataSettingsPtrOutputWithContext(context.Background())
}

func (i *trainingDataSettingsPtrType) ToTrainingDataSettingsPtrOutputWithContext(ctx context.Context) TrainingDataSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingDataSettingsPtrOutput)
}

// Training data input.
type TrainingDataSettingsOutput struct{ *pulumi.OutputState }

func (TrainingDataSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDataSettings)(nil)).Elem()
}

func (o TrainingDataSettingsOutput) ToTrainingDataSettingsOutput() TrainingDataSettingsOutput {
	return o
}

func (o TrainingDataSettingsOutput) ToTrainingDataSettingsOutputWithContext(ctx context.Context) TrainingDataSettingsOutput {
	return o
}

func (o TrainingDataSettingsOutput) ToTrainingDataSettingsPtrOutput() TrainingDataSettingsPtrOutput {
	return o.ToTrainingDataSettingsPtrOutputWithContext(context.Background())
}

func (o TrainingDataSettingsOutput) ToTrainingDataSettingsPtrOutputWithContext(ctx context.Context) TrainingDataSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrainingDataSettings) *TrainingDataSettings {
		return &v
	}).(TrainingDataSettingsPtrOutput)
}

// [Required] Training data MLTable.
func (o TrainingDataSettingsOutput) Data() MLTableJobInputOutput {
	return o.ApplyT(func(v TrainingDataSettings) MLTableJobInput { return v.Data }).(MLTableJobInputOutput)
}

type TrainingDataSettingsPtrOutput struct{ *pulumi.OutputState }

func (TrainingDataSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDataSettings)(nil)).Elem()
}

func (o TrainingDataSettingsPtrOutput) ToTrainingDataSettingsPtrOutput() TrainingDataSettingsPtrOutput {
	return o
}

func (o TrainingDataSettingsPtrOutput) ToTrainingDataSettingsPtrOutputWithContext(ctx context.Context) TrainingDataSettingsPtrOutput {
	return o
}

func (o TrainingDataSettingsPtrOutput) Elem() TrainingDataSettingsOutput {
	return o.ApplyT(func(v *TrainingDataSettings) TrainingDataSettings {
		if v != nil {
			return *v
		}
		var ret TrainingDataSettings
		return ret
	}).(TrainingDataSettingsOutput)
}

// [Required] Training data MLTable.
func (o TrainingDataSettingsPtrOutput) Data() MLTableJobInputPtrOutput {
	return o.ApplyT(func(v *TrainingDataSettings) *MLTableJobInput {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(MLTableJobInputPtrOutput)
}

// Training data input.
type TrainingDataSettingsResponse struct {
	// [Required] Training data MLTable.
	Data MLTableJobInputResponse `pulumi:"data"`
}

// Defaults sets the appropriate defaults for TrainingDataSettingsResponse
func (val *TrainingDataSettingsResponse) Defaults() *TrainingDataSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Data = *tmp.Data.Defaults()

	return &tmp
}

// Training data input.
type TrainingDataSettingsResponseOutput struct{ *pulumi.OutputState }

func (TrainingDataSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingDataSettingsResponse)(nil)).Elem()
}

func (o TrainingDataSettingsResponseOutput) ToTrainingDataSettingsResponseOutput() TrainingDataSettingsResponseOutput {
	return o
}

func (o TrainingDataSettingsResponseOutput) ToTrainingDataSettingsResponseOutputWithContext(ctx context.Context) TrainingDataSettingsResponseOutput {
	return o
}

// [Required] Training data MLTable.
func (o TrainingDataSettingsResponseOutput) Data() MLTableJobInputResponseOutput {
	return o.ApplyT(func(v TrainingDataSettingsResponse) MLTableJobInputResponse { return v.Data }).(MLTableJobInputResponseOutput)
}

type TrainingDataSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TrainingDataSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingDataSettingsResponse)(nil)).Elem()
}

func (o TrainingDataSettingsResponsePtrOutput) ToTrainingDataSettingsResponsePtrOutput() TrainingDataSettingsResponsePtrOutput {
	return o
}

func (o TrainingDataSettingsResponsePtrOutput) ToTrainingDataSettingsResponsePtrOutputWithContext(ctx context.Context) TrainingDataSettingsResponsePtrOutput {
	return o
}

func (o TrainingDataSettingsResponsePtrOutput) Elem() TrainingDataSettingsResponseOutput {
	return o.ApplyT(func(v *TrainingDataSettingsResponse) TrainingDataSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TrainingDataSettingsResponse
		return ret
	}).(TrainingDataSettingsResponseOutput)
}

// [Required] Training data MLTable.
func (o TrainingDataSettingsResponsePtrOutput) Data() MLTableJobInputResponsePtrOutput {
	return o.ApplyT(func(v *TrainingDataSettingsResponse) *MLTableJobInputResponse {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(MLTableJobInputResponsePtrOutput)
}

// Training related configuration.
type TrainingSettings struct {
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettings `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for TrainingSettings
func (val *TrainingSettings) Defaults() *TrainingSettings {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := false
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// TrainingSettingsInput is an input type that accepts TrainingSettingsArgs and TrainingSettingsOutput values.
// You can construct a concrete instance of `TrainingSettingsInput` via:
//
//	TrainingSettingsArgs{...}
type TrainingSettingsInput interface {
	pulumi.Input

	ToTrainingSettingsOutput() TrainingSettingsOutput
	ToTrainingSettingsOutputWithContext(context.Context) TrainingSettingsOutput
}

// Training related configuration.
type TrainingSettingsArgs struct {
	// Enable recommendation of DNN models.
	EnableDnnTraining pulumi.BoolPtrInput `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability pulumi.BoolPtrInput `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels pulumi.BoolPtrInput `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble pulumi.BoolPtrInput `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble pulumi.BoolPtrInput `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout pulumi.StringPtrInput `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings StackEnsembleSettingsPtrInput `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for TrainingSettingsArgs
func (val *TrainingSettingsArgs) Defaults() *TrainingSettingsArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		tmp.EnableDnnTraining = pulumi.BoolPtr(false)
	}
	if tmp.EnableModelExplainability == nil {
		tmp.EnableModelExplainability = pulumi.BoolPtr(false)
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		tmp.EnableOnnxCompatibleModels = pulumi.BoolPtr(false)
	}
	if tmp.EnableStackEnsemble == nil {
		tmp.EnableStackEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnableVoteEnsemble == nil {
		tmp.EnableVoteEnsemble = pulumi.BoolPtr(true)
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		tmp.EnsembleModelDownloadTimeout = pulumi.StringPtr("PT5M")
	}

	return &tmp
}
func (TrainingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingSettings)(nil)).Elem()
}

func (i TrainingSettingsArgs) ToTrainingSettingsOutput() TrainingSettingsOutput {
	return i.ToTrainingSettingsOutputWithContext(context.Background())
}

func (i TrainingSettingsArgs) ToTrainingSettingsOutputWithContext(ctx context.Context) TrainingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingSettingsOutput)
}

func (i TrainingSettingsArgs) ToTrainingSettingsPtrOutput() TrainingSettingsPtrOutput {
	return i.ToTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i TrainingSettingsArgs) ToTrainingSettingsPtrOutputWithContext(ctx context.Context) TrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingSettingsOutput).ToTrainingSettingsPtrOutputWithContext(ctx)
}

// TrainingSettingsPtrInput is an input type that accepts TrainingSettingsArgs, TrainingSettingsPtr and TrainingSettingsPtrOutput values.
// You can construct a concrete instance of `TrainingSettingsPtrInput` via:
//
//	        TrainingSettingsArgs{...}
//
//	or:
//
//	        nil
type TrainingSettingsPtrInput interface {
	pulumi.Input

	ToTrainingSettingsPtrOutput() TrainingSettingsPtrOutput
	ToTrainingSettingsPtrOutputWithContext(context.Context) TrainingSettingsPtrOutput
}

type trainingSettingsPtrType TrainingSettingsArgs

func TrainingSettingsPtr(v *TrainingSettingsArgs) TrainingSettingsPtrInput {
	return (*trainingSettingsPtrType)(v)
}

func (*trainingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingSettings)(nil)).Elem()
}

func (i *trainingSettingsPtrType) ToTrainingSettingsPtrOutput() TrainingSettingsPtrOutput {
	return i.ToTrainingSettingsPtrOutputWithContext(context.Background())
}

func (i *trainingSettingsPtrType) ToTrainingSettingsPtrOutputWithContext(ctx context.Context) TrainingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrainingSettingsPtrOutput)
}

// Training related configuration.
type TrainingSettingsOutput struct{ *pulumi.OutputState }

func (TrainingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingSettings)(nil)).Elem()
}

func (o TrainingSettingsOutput) ToTrainingSettingsOutput() TrainingSettingsOutput {
	return o
}

func (o TrainingSettingsOutput) ToTrainingSettingsOutputWithContext(ctx context.Context) TrainingSettingsOutput {
	return o
}

func (o TrainingSettingsOutput) ToTrainingSettingsPtrOutput() TrainingSettingsPtrOutput {
	return o.ToTrainingSettingsPtrOutputWithContext(context.Background())
}

func (o TrainingSettingsOutput) ToTrainingSettingsPtrOutputWithContext(ctx context.Context) TrainingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrainingSettings) *TrainingSettings {
		return &v
	}).(TrainingSettingsPtrOutput)
}

// Enable recommendation of DNN models.
func (o TrainingSettingsOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o TrainingSettingsOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o TrainingSettingsOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o TrainingSettingsOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o TrainingSettingsOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o TrainingSettingsOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o TrainingSettingsOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v TrainingSettings) *StackEnsembleSettings { return v.StackEnsembleSettings }).(StackEnsembleSettingsPtrOutput)
}

type TrainingSettingsPtrOutput struct{ *pulumi.OutputState }

func (TrainingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingSettings)(nil)).Elem()
}

func (o TrainingSettingsPtrOutput) ToTrainingSettingsPtrOutput() TrainingSettingsPtrOutput {
	return o
}

func (o TrainingSettingsPtrOutput) ToTrainingSettingsPtrOutputWithContext(ctx context.Context) TrainingSettingsPtrOutput {
	return o
}

func (o TrainingSettingsPtrOutput) Elem() TrainingSettingsOutput {
	return o.ApplyT(func(v *TrainingSettings) TrainingSettings {
		if v != nil {
			return *v
		}
		var ret TrainingSettings
		return ret
	}).(TrainingSettingsOutput)
}

// Enable recommendation of DNN models.
func (o TrainingSettingsPtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o TrainingSettingsPtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o TrainingSettingsPtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o TrainingSettingsPtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o TrainingSettingsPtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o TrainingSettingsPtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o TrainingSettingsPtrOutput) StackEnsembleSettings() StackEnsembleSettingsPtrOutput {
	return o.ApplyT(func(v *TrainingSettings) *StackEnsembleSettings {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsPtrOutput)
}

// Training related configuration.
type TrainingSettingsResponse struct {
	// Enable recommendation of DNN models.
	EnableDnnTraining *bool `pulumi:"enableDnnTraining"`
	// Flag to turn on explainability on best model.
	EnableModelExplainability *bool `pulumi:"enableModelExplainability"`
	// Flag for enabling onnx compatible models.
	EnableOnnxCompatibleModels *bool `pulumi:"enableOnnxCompatibleModels"`
	// Enable stack ensemble run.
	EnableStackEnsemble *bool `pulumi:"enableStackEnsemble"`
	// Enable voting ensemble run.
	EnableVoteEnsemble *bool `pulumi:"enableVoteEnsemble"`
	// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
	// Configure this parameter with a higher value than 300 secs, if more time is needed.
	EnsembleModelDownloadTimeout *string `pulumi:"ensembleModelDownloadTimeout"`
	// Stack ensemble settings for stack ensemble run.
	StackEnsembleSettings *StackEnsembleSettingsResponse `pulumi:"stackEnsembleSettings"`
}

// Defaults sets the appropriate defaults for TrainingSettingsResponse
func (val *TrainingSettingsResponse) Defaults() *TrainingSettingsResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.EnableDnnTraining == nil {
		enableDnnTraining_ := false
		tmp.EnableDnnTraining = &enableDnnTraining_
	}
	if tmp.EnableModelExplainability == nil {
		enableModelExplainability_ := false
		tmp.EnableModelExplainability = &enableModelExplainability_
	}
	if tmp.EnableOnnxCompatibleModels == nil {
		enableOnnxCompatibleModels_ := false
		tmp.EnableOnnxCompatibleModels = &enableOnnxCompatibleModels_
	}
	if tmp.EnableStackEnsemble == nil {
		enableStackEnsemble_ := true
		tmp.EnableStackEnsemble = &enableStackEnsemble_
	}
	if tmp.EnableVoteEnsemble == nil {
		enableVoteEnsemble_ := true
		tmp.EnableVoteEnsemble = &enableVoteEnsemble_
	}
	if tmp.EnsembleModelDownloadTimeout == nil {
		ensembleModelDownloadTimeout_ := "PT5M"
		tmp.EnsembleModelDownloadTimeout = &ensembleModelDownloadTimeout_
	}
	tmp.StackEnsembleSettings = tmp.StackEnsembleSettings.Defaults()

	return &tmp
}

// Training related configuration.
type TrainingSettingsResponseOutput struct{ *pulumi.OutputState }

func (TrainingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingSettingsResponse)(nil)).Elem()
}

func (o TrainingSettingsResponseOutput) ToTrainingSettingsResponseOutput() TrainingSettingsResponseOutput {
	return o
}

func (o TrainingSettingsResponseOutput) ToTrainingSettingsResponseOutputWithContext(ctx context.Context) TrainingSettingsResponseOutput {
	return o
}

// Enable recommendation of DNN models.
func (o TrainingSettingsResponseOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *bool { return v.EnableDnnTraining }).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o TrainingSettingsResponseOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *bool { return v.EnableModelExplainability }).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o TrainingSettingsResponseOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *bool { return v.EnableOnnxCompatibleModels }).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o TrainingSettingsResponseOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *bool { return v.EnableStackEnsemble }).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o TrainingSettingsResponseOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *bool { return v.EnableVoteEnsemble }).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o TrainingSettingsResponseOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *string { return v.EnsembleModelDownloadTimeout }).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o TrainingSettingsResponseOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v TrainingSettingsResponse) *StackEnsembleSettingsResponse { return v.StackEnsembleSettings }).(StackEnsembleSettingsResponsePtrOutput)
}

type TrainingSettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (TrainingSettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrainingSettingsResponse)(nil)).Elem()
}

func (o TrainingSettingsResponsePtrOutput) ToTrainingSettingsResponsePtrOutput() TrainingSettingsResponsePtrOutput {
	return o
}

func (o TrainingSettingsResponsePtrOutput) ToTrainingSettingsResponsePtrOutputWithContext(ctx context.Context) TrainingSettingsResponsePtrOutput {
	return o
}

func (o TrainingSettingsResponsePtrOutput) Elem() TrainingSettingsResponseOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) TrainingSettingsResponse {
		if v != nil {
			return *v
		}
		var ret TrainingSettingsResponse
		return ret
	}).(TrainingSettingsResponseOutput)
}

// Enable recommendation of DNN models.
func (o TrainingSettingsResponsePtrOutput) EnableDnnTraining() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableDnnTraining
	}).(pulumi.BoolPtrOutput)
}

// Flag to turn on explainability on best model.
func (o TrainingSettingsResponsePtrOutput) EnableModelExplainability() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableModelExplainability
	}).(pulumi.BoolPtrOutput)
}

// Flag for enabling onnx compatible models.
func (o TrainingSettingsResponsePtrOutput) EnableOnnxCompatibleModels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableOnnxCompatibleModels
	}).(pulumi.BoolPtrOutput)
}

// Enable stack ensemble run.
func (o TrainingSettingsResponsePtrOutput) EnableStackEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackEnsemble
	}).(pulumi.BoolPtrOutput)
}

// Enable voting ensemble run.
func (o TrainingSettingsResponsePtrOutput) EnableVoteEnsemble() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVoteEnsemble
	}).(pulumi.BoolPtrOutput)
}

// During VotingEnsemble and StackEnsemble model generation, multiple fitted models from the previous child runs are downloaded.
// Configure this parameter with a higher value than 300 secs, if more time is needed.
func (o TrainingSettingsResponsePtrOutput) EnsembleModelDownloadTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *string {
		if v == nil {
			return nil
		}
		return v.EnsembleModelDownloadTimeout
	}).(pulumi.StringPtrOutput)
}

// Stack ensemble settings for stack ensemble run.
func (o TrainingSettingsResponsePtrOutput) StackEnsembleSettings() StackEnsembleSettingsResponsePtrOutput {
	return o.ApplyT(func(v *TrainingSettingsResponse) *StackEnsembleSettingsResponse {
		if v == nil {
			return nil
		}
		return v.StackEnsembleSettings
	}).(StackEnsembleSettingsResponsePtrOutput)
}

// Trial component definition.
type TrialComponent struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfiguration `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponent
func (val *TrialComponent) Defaults() *TrialComponent {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// TrialComponentInput is an input type that accepts TrialComponentArgs and TrialComponentOutput values.
// You can construct a concrete instance of `TrialComponentInput` via:
//
//	TrialComponentArgs{...}
type TrialComponentInput interface {
	pulumi.Input

	ToTrialComponentOutput() TrialComponentOutput
	ToTrialComponentOutputWithContext(context.Context) TrialComponentOutput
}

// Trial component definition.
type TrialComponentArgs struct {
	// ARM resource ID of the code asset.
	CodeId pulumi.StringPtrInput `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command pulumi.StringInput `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution pulumi.Input `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables pulumi.StringMapInput `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources ResourceConfigurationPtrInput `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponentArgs
func (val *TrialComponentArgs) Defaults() *TrialComponentArgs {
	if val == nil {
		return nil
	}
	tmp := *val

	return &tmp
}
func (TrialComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponent)(nil)).Elem()
}

func (i TrialComponentArgs) ToTrialComponentOutput() TrialComponentOutput {
	return i.ToTrialComponentOutputWithContext(context.Background())
}

func (i TrialComponentArgs) ToTrialComponentOutputWithContext(ctx context.Context) TrialComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrialComponentOutput)
}

// Trial component definition.
type TrialComponentOutput struct{ *pulumi.OutputState }

func (TrialComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponent)(nil)).Elem()
}

func (o TrialComponentOutput) ToTrialComponentOutput() TrialComponentOutput {
	return o
}

func (o TrialComponentOutput) ToTrialComponentOutputWithContext(ctx context.Context) TrialComponentOutput {
	return o
}

// ARM resource ID of the code asset.
func (o TrialComponentOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrialComponent) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o TrialComponentOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponent) string { return v.Command }).(pulumi.StringOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o TrialComponentOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v TrialComponent) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o TrialComponentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponent) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o TrialComponentOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrialComponent) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o TrialComponentOutput) Resources() ResourceConfigurationPtrOutput {
	return o.ApplyT(func(v TrialComponent) *ResourceConfiguration { return v.Resources }).(ResourceConfigurationPtrOutput)
}

// Trial component definition.
type TrialComponentResponse struct {
	// ARM resource ID of the code asset.
	CodeId *string `pulumi:"codeId"`
	// [Required] The command to execute on startup of the job. eg. "python train.py"
	Command string `pulumi:"command"`
	// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
	Distribution interface{} `pulumi:"distribution"`
	// [Required] The ARM resource ID of the Environment specification for the job.
	EnvironmentId string `pulumi:"environmentId"`
	// Environment variables included in the job.
	EnvironmentVariables map[string]string `pulumi:"environmentVariables"`
	// Compute Resource configuration for the job.
	Resources *ResourceConfigurationResponse `pulumi:"resources"`
}

// Defaults sets the appropriate defaults for TrialComponentResponse
func (val *TrialComponentResponse) Defaults() *TrialComponentResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	tmp.Resources = tmp.Resources.Defaults()

	return &tmp
}

// Trial component definition.
type TrialComponentResponseOutput struct{ *pulumi.OutputState }

func (TrialComponentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrialComponentResponse)(nil)).Elem()
}

func (o TrialComponentResponseOutput) ToTrialComponentResponseOutput() TrialComponentResponseOutput {
	return o
}

func (o TrialComponentResponseOutput) ToTrialComponentResponseOutputWithContext(ctx context.Context) TrialComponentResponseOutput {
	return o
}

// ARM resource ID of the code asset.
func (o TrialComponentResponseOutput) CodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrialComponentResponse) *string { return v.CodeId }).(pulumi.StringPtrOutput)
}

// [Required] The command to execute on startup of the job. eg. "python train.py"
func (o TrialComponentResponseOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponentResponse) string { return v.Command }).(pulumi.StringOutput)
}

// Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
func (o TrialComponentResponseOutput) Distribution() pulumi.AnyOutput {
	return o.ApplyT(func(v TrialComponentResponse) interface{} { return v.Distribution }).(pulumi.AnyOutput)
}

// [Required] The ARM resource ID of the Environment specification for the job.
func (o TrialComponentResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v TrialComponentResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Environment variables included in the job.
func (o TrialComponentResponseOutput) EnvironmentVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrialComponentResponse) map[string]string { return v.EnvironmentVariables }).(pulumi.StringMapOutput)
}

// Compute Resource configuration for the job.
func (o TrialComponentResponseOutput) Resources() ResourceConfigurationResponsePtrOutput {
	return o.ApplyT(func(v TrialComponentResponse) *ResourceConfigurationResponse { return v.Resources }).(ResourceConfigurationResponsePtrOutput)
}

type TritonModelJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'TritonModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInput
func (val *TritonModelJobInput) Defaults() *TritonModelJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TritonModelJobInputInput is an input type that accepts TritonModelJobInputArgs and TritonModelJobInputOutput values.
// You can construct a concrete instance of `TritonModelJobInputInput` via:
//
//	TritonModelJobInputArgs{...}
type TritonModelJobInputInput interface {
	pulumi.Input

	ToTritonModelJobInputOutput() TritonModelJobInputOutput
	ToTritonModelJobInputOutputWithContext(context.Context) TritonModelJobInputOutput
}

type TritonModelJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'TritonModel'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInputArgs
func (val *TritonModelJobInputArgs) Defaults() *TritonModelJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (TritonModelJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInput)(nil)).Elem()
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputOutput() TritonModelJobInputOutput {
	return i.ToTritonModelJobInputOutputWithContext(context.Background())
}

func (i TritonModelJobInputArgs) ToTritonModelJobInputOutputWithContext(ctx context.Context) TritonModelJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobInputOutput)
}

type TritonModelJobInputOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInput)(nil)).Elem()
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputOutput() TritonModelJobInputOutput {
	return o
}

func (o TritonModelJobInputOutput) ToTritonModelJobInputOutputWithContext(ctx context.Context) TritonModelJobInputOutput {
	return o
}

// Description for the input.
func (o TritonModelJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'TritonModel'.
func (o TritonModelJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type TritonModelJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'TritonModel'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobInputResponse
func (val *TritonModelJobInputResponse) Defaults() *TritonModelJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobInputResponseOutput struct{ *pulumi.OutputState }

func (TritonModelJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobInputResponse)(nil)).Elem()
}

func (o TritonModelJobInputResponseOutput) ToTritonModelJobInputResponseOutput() TritonModelJobInputResponseOutput {
	return o
}

func (o TritonModelJobInputResponseOutput) ToTritonModelJobInputResponseOutputWithContext(ctx context.Context) TritonModelJobInputResponseOutput {
	return o
}

// Description for the input.
func (o TritonModelJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'TritonModel'.
func (o TritonModelJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o TritonModelJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o TritonModelJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type TritonModelJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'TritonModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutput
func (val *TritonModelJobOutput) Defaults() *TritonModelJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// TritonModelJobOutputInput is an input type that accepts TritonModelJobOutputArgs and TritonModelJobOutputOutput values.
// You can construct a concrete instance of `TritonModelJobOutputInput` via:
//
//	TritonModelJobOutputArgs{...}
type TritonModelJobOutputInput interface {
	pulumi.Input

	ToTritonModelJobOutputOutput() TritonModelJobOutputOutput
	ToTritonModelJobOutputOutputWithContext(context.Context) TritonModelJobOutputOutput
}

type TritonModelJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'TritonModel'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutputArgs
func (val *TritonModelJobOutputArgs) Defaults() *TritonModelJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (TritonModelJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutput)(nil)).Elem()
}

func (i TritonModelJobOutputArgs) ToTritonModelJobOutputOutput() TritonModelJobOutputOutput {
	return i.ToTritonModelJobOutputOutputWithContext(context.Background())
}

func (i TritonModelJobOutputArgs) ToTritonModelJobOutputOutputWithContext(ctx context.Context) TritonModelJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TritonModelJobOutputOutput)
}

type TritonModelJobOutputOutput struct{ *pulumi.OutputState }

func (TritonModelJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutput)(nil)).Elem()
}

func (o TritonModelJobOutputOutput) ToTritonModelJobOutputOutput() TritonModelJobOutputOutput {
	return o
}

func (o TritonModelJobOutputOutput) ToTritonModelJobOutputOutputWithContext(ctx context.Context) TritonModelJobOutputOutput {
	return o
}

// Description for the output.
func (o TritonModelJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'TritonModel'.
func (o TritonModelJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o TritonModelJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o TritonModelJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type TritonModelJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'TritonModel'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for TritonModelJobOutputResponse
func (val *TritonModelJobOutputResponse) Defaults() *TritonModelJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type TritonModelJobOutputResponseOutput struct{ *pulumi.OutputState }

func (TritonModelJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TritonModelJobOutputResponse)(nil)).Elem()
}

func (o TritonModelJobOutputResponseOutput) ToTritonModelJobOutputResponseOutput() TritonModelJobOutputResponseOutput {
	return o
}

func (o TritonModelJobOutputResponseOutput) ToTritonModelJobOutputResponseOutputWithContext(ctx context.Context) TritonModelJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o TritonModelJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'TritonModel'.
func (o TritonModelJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o TritonModelJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o TritonModelJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TritonModelJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicy struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicy
func (val *TruncationSelectionPolicy) Defaults() *TruncationSelectionPolicy {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// TruncationSelectionPolicyInput is an input type that accepts TruncationSelectionPolicyArgs and TruncationSelectionPolicyOutput values.
// You can construct a concrete instance of `TruncationSelectionPolicyInput` via:
//
//	TruncationSelectionPolicyArgs{...}
type TruncationSelectionPolicyInput interface {
	pulumi.Input

	ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput
	ToTruncationSelectionPolicyOutputWithContext(context.Context) TruncationSelectionPolicyOutput
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyArgs struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation pulumi.IntPtrInput `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval pulumi.IntPtrInput `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage pulumi.IntPtrInput `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicyArgs
func (val *TruncationSelectionPolicyArgs) Defaults() *TruncationSelectionPolicyArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		tmp.DelayEvaluation = pulumi.IntPtr(0)
	}
	if tmp.EvaluationInterval == nil {
		tmp.EvaluationInterval = pulumi.IntPtr(0)
	}
	if tmp.TruncationPercentage == nil {
		tmp.TruncationPercentage = pulumi.IntPtr(0)
	}
	return &tmp
}
func (TruncationSelectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicy)(nil)).Elem()
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput {
	return i.ToTruncationSelectionPolicyOutputWithContext(context.Background())
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyOutputWithContext(ctx context.Context) TruncationSelectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyOutput)
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return i.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (i TruncationSelectionPolicyArgs) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyOutput).ToTruncationSelectionPolicyPtrOutputWithContext(ctx)
}

// TruncationSelectionPolicyPtrInput is an input type that accepts TruncationSelectionPolicyArgs, TruncationSelectionPolicyPtr and TruncationSelectionPolicyPtrOutput values.
// You can construct a concrete instance of `TruncationSelectionPolicyPtrInput` via:
//
//	        TruncationSelectionPolicyArgs{...}
//
//	or:
//
//	        nil
type TruncationSelectionPolicyPtrInput interface {
	pulumi.Input

	ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput
	ToTruncationSelectionPolicyPtrOutputWithContext(context.Context) TruncationSelectionPolicyPtrOutput
}

type truncationSelectionPolicyPtrType TruncationSelectionPolicyArgs

func TruncationSelectionPolicyPtr(v *TruncationSelectionPolicyArgs) TruncationSelectionPolicyPtrInput {
	return (*truncationSelectionPolicyPtrType)(v)
}

func (*truncationSelectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicy)(nil)).Elem()
}

func (i *truncationSelectionPolicyPtrType) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return i.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (i *truncationSelectionPolicyPtrType) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TruncationSelectionPolicyPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicy)(nil)).Elem()
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyOutput() TruncationSelectionPolicyOutput {
	return o
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyOutputWithContext(ctx context.Context) TruncationSelectionPolicyOutput {
	return o
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return o.ToTruncationSelectionPolicyPtrOutputWithContext(context.Background())
}

func (o TruncationSelectionPolicyOutput) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TruncationSelectionPolicy) *TruncationSelectionPolicy {
		return &v
	}).(TruncationSelectionPolicyPtrOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicy) *int { return v.TruncationPercentage }).(pulumi.IntPtrOutput)
}

type TruncationSelectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicy)(nil)).Elem()
}

func (o TruncationSelectionPolicyPtrOutput) ToTruncationSelectionPolicyPtrOutput() TruncationSelectionPolicyPtrOutput {
	return o
}

func (o TruncationSelectionPolicyPtrOutput) ToTruncationSelectionPolicyPtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyPtrOutput {
	return o
}

func (o TruncationSelectionPolicyPtrOutput) Elem() TruncationSelectionPolicyOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) TruncationSelectionPolicy {
		if v != nil {
			return *v
		}
		var ret TruncationSelectionPolicy
		return ret
	}).(TruncationSelectionPolicyOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyPtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyPtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyPtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyPtrOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicy) *int {
		if v == nil {
			return nil
		}
		return v.TruncationPercentage
	}).(pulumi.IntPtrOutput)
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyResponse struct {
	// Number of intervals by which to delay the first evaluation.
	DelayEvaluation *int `pulumi:"delayEvaluation"`
	// Interval (number of runs) between policy evaluations.
	EvaluationInterval *int `pulumi:"evaluationInterval"`
	// Expected value is 'TruncationSelection'.
	PolicyType string `pulumi:"policyType"`
	// The percentage of runs to cancel at each evaluation interval.
	TruncationPercentage *int `pulumi:"truncationPercentage"`
}

// Defaults sets the appropriate defaults for TruncationSelectionPolicyResponse
func (val *TruncationSelectionPolicyResponse) Defaults() *TruncationSelectionPolicyResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.DelayEvaluation == nil {
		delayEvaluation_ := 0
		tmp.DelayEvaluation = &delayEvaluation_
	}
	if tmp.EvaluationInterval == nil {
		evaluationInterval_ := 0
		tmp.EvaluationInterval = &evaluationInterval_
	}
	if tmp.TruncationPercentage == nil {
		truncationPercentage_ := 0
		tmp.TruncationPercentage = &truncationPercentage_
	}
	return &tmp
}

// Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
type TruncationSelectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TruncationSelectionPolicyResponse)(nil)).Elem()
}

func (o TruncationSelectionPolicyResponseOutput) ToTruncationSelectionPolicyResponseOutput() TruncationSelectionPolicyResponseOutput {
	return o
}

func (o TruncationSelectionPolicyResponseOutput) ToTruncationSelectionPolicyResponseOutputWithContext(ctx context.Context) TruncationSelectionPolicyResponseOutput {
	return o
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyResponseOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.DelayEvaluation }).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyResponseOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.EvaluationInterval }).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyResponseOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) string { return v.PolicyType }).(pulumi.StringOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyResponseOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TruncationSelectionPolicyResponse) *int { return v.TruncationPercentage }).(pulumi.IntPtrOutput)
}

type TruncationSelectionPolicyResponsePtrOutput struct{ *pulumi.OutputState }

func (TruncationSelectionPolicyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TruncationSelectionPolicyResponse)(nil)).Elem()
}

func (o TruncationSelectionPolicyResponsePtrOutput) ToTruncationSelectionPolicyResponsePtrOutput() TruncationSelectionPolicyResponsePtrOutput {
	return o
}

func (o TruncationSelectionPolicyResponsePtrOutput) ToTruncationSelectionPolicyResponsePtrOutputWithContext(ctx context.Context) TruncationSelectionPolicyResponsePtrOutput {
	return o
}

func (o TruncationSelectionPolicyResponsePtrOutput) Elem() TruncationSelectionPolicyResponseOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) TruncationSelectionPolicyResponse {
		if v != nil {
			return *v
		}
		var ret TruncationSelectionPolicyResponse
		return ret
	}).(TruncationSelectionPolicyResponseOutput)
}

// Number of intervals by which to delay the first evaluation.
func (o TruncationSelectionPolicyResponsePtrOutput) DelayEvaluation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.DelayEvaluation
	}).(pulumi.IntPtrOutput)
}

// Interval (number of runs) between policy evaluations.
func (o TruncationSelectionPolicyResponsePtrOutput) EvaluationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.IntPtrOutput)
}

// Expected value is 'TruncationSelection'.
func (o TruncationSelectionPolicyResponsePtrOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PolicyType
	}).(pulumi.StringPtrOutput)
}

// The percentage of runs to cancel at each evaluation interval.
func (o TruncationSelectionPolicyResponsePtrOutput) TruncationPercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TruncationSelectionPolicyResponse) *int {
		if v == nil {
			return nil
		}
		return v.TruncationPercentage
	}).(pulumi.IntPtrOutput)
}

// uri-file data version entity
type UriFileDataVersion struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFile'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersion
func (val *UriFileDataVersion) Defaults() *UriFileDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// UriFileDataVersionInput is an input type that accepts UriFileDataVersionArgs and UriFileDataVersionOutput values.
// You can construct a concrete instance of `UriFileDataVersionInput` via:
//
//	UriFileDataVersionArgs{...}
type UriFileDataVersionInput interface {
	pulumi.Input

	ToUriFileDataVersionOutput() UriFileDataVersionOutput
	ToUriFileDataVersionOutputWithContext(context.Context) UriFileDataVersionOutput
}

// uri-file data version entity
type UriFileDataVersionArgs struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFile'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersionArgs
func (val *UriFileDataVersionArgs) Defaults() *UriFileDataVersionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (UriFileDataVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersion)(nil)).Elem()
}

func (i UriFileDataVersionArgs) ToUriFileDataVersionOutput() UriFileDataVersionOutput {
	return i.ToUriFileDataVersionOutputWithContext(context.Background())
}

func (i UriFileDataVersionArgs) ToUriFileDataVersionOutputWithContext(ctx context.Context) UriFileDataVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileDataVersionOutput)
}

// uri-file data version entity
type UriFileDataVersionOutput struct{ *pulumi.OutputState }

func (UriFileDataVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersion)(nil)).Elem()
}

func (o UriFileDataVersionOutput) ToUriFileDataVersionOutput() UriFileDataVersionOutput {
	return o
}

func (o UriFileDataVersionOutput) ToUriFileDataVersionOutputWithContext(ctx context.Context) UriFileDataVersionOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'UriFile'.
func (o UriFileDataVersionOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersion) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o UriFileDataVersionOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersion) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFileDataVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o UriFileDataVersionOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o UriFileDataVersionOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersion) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFileDataVersionOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersion) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFileDataVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersion) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// uri-file data version entity
type UriFileDataVersionResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFile'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFileDataVersionResponse
func (val *UriFileDataVersionResponse) Defaults() *UriFileDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-file data version entity
type UriFileDataVersionResponseOutput struct{ *pulumi.OutputState }

func (UriFileDataVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileDataVersionResponse)(nil)).Elem()
}

func (o UriFileDataVersionResponseOutput) ToUriFileDataVersionResponseOutput() UriFileDataVersionResponseOutput {
	return o
}

func (o UriFileDataVersionResponseOutput) ToUriFileDataVersionResponseOutputWithContext(ctx context.Context) UriFileDataVersionResponseOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'UriFile'.
func (o UriFileDataVersionResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o UriFileDataVersionResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFileDataVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o UriFileDataVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o UriFileDataVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFileDataVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFileDataVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFileDataVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type UriFileJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFile'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInput
func (val *UriFileJobInput) Defaults() *UriFileJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFileJobInputInput is an input type that accepts UriFileJobInputArgs and UriFileJobInputOutput values.
// You can construct a concrete instance of `UriFileJobInputInput` via:
//
//	UriFileJobInputArgs{...}
type UriFileJobInputInput interface {
	pulumi.Input

	ToUriFileJobInputOutput() UriFileJobInputOutput
	ToUriFileJobInputOutputWithContext(context.Context) UriFileJobInputOutput
}

type UriFileJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFile'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInputArgs
func (val *UriFileJobInputArgs) Defaults() *UriFileJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (UriFileJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInput)(nil)).Elem()
}

func (i UriFileJobInputArgs) ToUriFileJobInputOutput() UriFileJobInputOutput {
	return i.ToUriFileJobInputOutputWithContext(context.Background())
}

func (i UriFileJobInputArgs) ToUriFileJobInputOutputWithContext(ctx context.Context) UriFileJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobInputOutput)
}

type UriFileJobInputOutput struct{ *pulumi.OutputState }

func (UriFileJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInput)(nil)).Elem()
}

func (o UriFileJobInputOutput) ToUriFileJobInputOutput() UriFileJobInputOutput {
	return o
}

func (o UriFileJobInputOutput) ToUriFileJobInputOutputWithContext(ctx context.Context) UriFileJobInputOutput {
	return o
}

// Description for the input.
func (o UriFileJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'UriFile'.
func (o UriFileJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFileJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFile'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobInputResponse
func (val *UriFileJobInputResponse) Defaults() *UriFileJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobInputResponseOutput struct{ *pulumi.OutputState }

func (UriFileJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobInputResponse)(nil)).Elem()
}

func (o UriFileJobInputResponseOutput) ToUriFileJobInputResponseOutput() UriFileJobInputResponseOutput {
	return o
}

func (o UriFileJobInputResponseOutput) ToUriFileJobInputResponseOutputWithContext(ctx context.Context) UriFileJobInputResponseOutput {
	return o
}

// Description for the input.
func (o UriFileJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'UriFile'.
func (o UriFileJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFileJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFileJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFileJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFile'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutput
func (val *UriFileJobOutput) Defaults() *UriFileJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFileJobOutputInput is an input type that accepts UriFileJobOutputArgs and UriFileJobOutputOutput values.
// You can construct a concrete instance of `UriFileJobOutputInput` via:
//
//	UriFileJobOutputArgs{...}
type UriFileJobOutputInput interface {
	pulumi.Input

	ToUriFileJobOutputOutput() UriFileJobOutputOutput
	ToUriFileJobOutputOutputWithContext(context.Context) UriFileJobOutputOutput
}

type UriFileJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFile'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutputArgs
func (val *UriFileJobOutputArgs) Defaults() *UriFileJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (UriFileJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutput)(nil)).Elem()
}

func (i UriFileJobOutputArgs) ToUriFileJobOutputOutput() UriFileJobOutputOutput {
	return i.ToUriFileJobOutputOutputWithContext(context.Background())
}

func (i UriFileJobOutputArgs) ToUriFileJobOutputOutputWithContext(ctx context.Context) UriFileJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFileJobOutputOutput)
}

type UriFileJobOutputOutput struct{ *pulumi.OutputState }

func (UriFileJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutput)(nil)).Elem()
}

func (o UriFileJobOutputOutput) ToUriFileJobOutputOutput() UriFileJobOutputOutput {
	return o
}

func (o UriFileJobOutputOutput) ToUriFileJobOutputOutputWithContext(ctx context.Context) UriFileJobOutputOutput {
	return o
}

// Description for the output.
func (o UriFileJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'UriFile'.
func (o UriFileJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFileJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFileJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type UriFileJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFile'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFileJobOutputResponse
func (val *UriFileJobOutputResponse) Defaults() *UriFileJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFileJobOutputResponseOutput struct{ *pulumi.OutputState }

func (UriFileJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFileJobOutputResponse)(nil)).Elem()
}

func (o UriFileJobOutputResponseOutput) ToUriFileJobOutputResponseOutput() UriFileJobOutputResponseOutput {
	return o
}

func (o UriFileJobOutputResponseOutput) ToUriFileJobOutputResponseOutputWithContext(ctx context.Context) UriFileJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o UriFileJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'UriFile'.
func (o UriFileJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFileJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFileJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFileJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// uri-folder data version entity
type UriFolderDataVersion struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFolder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersion
func (val *UriFolderDataVersion) Defaults() *UriFolderDataVersion {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// UriFolderDataVersionInput is an input type that accepts UriFolderDataVersionArgs and UriFolderDataVersionOutput values.
// You can construct a concrete instance of `UriFolderDataVersionInput` via:
//
//	UriFolderDataVersionArgs{...}
type UriFolderDataVersionInput interface {
	pulumi.Input

	ToUriFolderDataVersionOutput() UriFolderDataVersionOutput
	ToUriFolderDataVersionOutputWithContext(context.Context) UriFolderDataVersionOutput
}

// uri-folder data version entity
type UriFolderDataVersionArgs struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFolder'.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri pulumi.StringInput `pulumi:"dataUri"`
	// The asset description text.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous pulumi.BoolPtrInput `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived pulumi.BoolPtrInput `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersionArgs
func (val *UriFolderDataVersionArgs) Defaults() *UriFolderDataVersionArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		tmp.IsAnonymous = pulumi.BoolPtr(false)
	}
	if tmp.IsArchived == nil {
		tmp.IsArchived = pulumi.BoolPtr(false)
	}
	return &tmp
}
func (UriFolderDataVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersion)(nil)).Elem()
}

func (i UriFolderDataVersionArgs) ToUriFolderDataVersionOutput() UriFolderDataVersionOutput {
	return i.ToUriFolderDataVersionOutputWithContext(context.Background())
}

func (i UriFolderDataVersionArgs) ToUriFolderDataVersionOutputWithContext(ctx context.Context) UriFolderDataVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderDataVersionOutput)
}

// uri-folder data version entity
type UriFolderDataVersionOutput struct{ *pulumi.OutputState }

func (UriFolderDataVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersion)(nil)).Elem()
}

func (o UriFolderDataVersionOutput) ToUriFolderDataVersionOutput() UriFolderDataVersionOutput {
	return o
}

func (o UriFolderDataVersionOutput) ToUriFolderDataVersionOutputWithContext(ctx context.Context) UriFolderDataVersionOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'UriFolder'.
func (o UriFolderDataVersionOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersion) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o UriFolderDataVersionOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersion) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFolderDataVersionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o UriFolderDataVersionOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o UriFolderDataVersionOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersion) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFolderDataVersionOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersion) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFolderDataVersionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersion) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// uri-folder data version entity
type UriFolderDataVersionResponse struct {
	// Enum to determine the type of data.
	// Expected value is 'UriFolder'.
	DataType string `pulumi:"dataType"`
	// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
	DataUri string `pulumi:"dataUri"`
	// The asset description text.
	Description *string `pulumi:"description"`
	// If the name version are system generated (anonymous registration).
	IsAnonymous *bool `pulumi:"isAnonymous"`
	// Is the asset archived?
	IsArchived *bool `pulumi:"isArchived"`
	// The asset property dictionary.
	Properties map[string]string `pulumi:"properties"`
	// Tag dictionary. Tags can be added, removed, and updated.
	Tags map[string]string `pulumi:"tags"`
}

// Defaults sets the appropriate defaults for UriFolderDataVersionResponse
func (val *UriFolderDataVersionResponse) Defaults() *UriFolderDataVersionResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.IsAnonymous == nil {
		isAnonymous_ := false
		tmp.IsAnonymous = &isAnonymous_
	}
	if tmp.IsArchived == nil {
		isArchived_ := false
		tmp.IsArchived = &isArchived_
	}
	return &tmp
}

// uri-folder data version entity
type UriFolderDataVersionResponseOutput struct{ *pulumi.OutputState }

func (UriFolderDataVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderDataVersionResponse)(nil)).Elem()
}

func (o UriFolderDataVersionResponseOutput) ToUriFolderDataVersionResponseOutput() UriFolderDataVersionResponseOutput {
	return o
}

func (o UriFolderDataVersionResponseOutput) ToUriFolderDataVersionResponseOutputWithContext(ctx context.Context) UriFolderDataVersionResponseOutput {
	return o
}

// Enum to determine the type of data.
// Expected value is 'UriFolder'.
func (o UriFolderDataVersionResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// [Required] Uri of the data. Usage/meaning depends on Microsoft.MachineLearning.ManagementFrontEnd.Contracts.V20220201Preview.Assets.DataVersionBase.DataType
func (o UriFolderDataVersionResponseOutput) DataUri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) string { return v.DataUri }).(pulumi.StringOutput)
}

// The asset description text.
func (o UriFolderDataVersionResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// If the name version are system generated (anonymous registration).
func (o UriFolderDataVersionResponseOutput) IsAnonymous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *bool { return v.IsAnonymous }).(pulumi.BoolPtrOutput)
}

// Is the asset archived?
func (o UriFolderDataVersionResponseOutput) IsArchived() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) *bool { return v.IsArchived }).(pulumi.BoolPtrOutput)
}

// The asset property dictionary.
func (o UriFolderDataVersionResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Tag dictionary. Tags can be added, removed, and updated.
func (o UriFolderDataVersionResponseOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v UriFolderDataVersionResponse) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type UriFolderJobInput struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFolder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInput
func (val *UriFolderJobInput) Defaults() *UriFolderJobInput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFolderJobInputInput is an input type that accepts UriFolderJobInputArgs and UriFolderJobInputOutput values.
// You can construct a concrete instance of `UriFolderJobInputInput` via:
//
//	UriFolderJobInputArgs{...}
type UriFolderJobInputInput interface {
	pulumi.Input

	ToUriFolderJobInputOutput() UriFolderJobInputOutput
	ToUriFolderJobInputOutputWithContext(context.Context) UriFolderJobInputOutput
}

type UriFolderJobInputArgs struct {
	// Description for the input.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFolder'.
	JobInputType pulumi.StringInput `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri pulumi.StringInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInputArgs
func (val *UriFolderJobInputArgs) Defaults() *UriFolderJobInputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadOnlyMount")
	}
	return &tmp
}
func (UriFolderJobInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInput)(nil)).Elem()
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputOutput() UriFolderJobInputOutput {
	return i.ToUriFolderJobInputOutputWithContext(context.Background())
}

func (i UriFolderJobInputArgs) ToUriFolderJobInputOutputWithContext(ctx context.Context) UriFolderJobInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobInputOutput)
}

type UriFolderJobInputOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInput)(nil)).Elem()
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputOutput() UriFolderJobInputOutput {
	return o
}

func (o UriFolderJobInputOutput) ToUriFolderJobInputOutputWithContext(ctx context.Context) UriFolderJobInputOutput {
	return o
}

// Description for the input.
func (o UriFolderJobInputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'UriFolder'.
func (o UriFolderJobInputOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInput) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInput) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFolderJobInputResponse struct {
	// Description for the input.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Input Type.
	// Expected value is 'UriFolder'.
	JobInputType string `pulumi:"jobInputType"`
	// Input Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// [Required] Input Asset URI.
	Uri string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobInputResponse
func (val *UriFolderJobInputResponse) Defaults() *UriFolderJobInputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadOnlyMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobInputResponseOutput struct{ *pulumi.OutputState }

func (UriFolderJobInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobInputResponse)(nil)).Elem()
}

func (o UriFolderJobInputResponseOutput) ToUriFolderJobInputResponseOutput() UriFolderJobInputResponseOutput {
	return o
}

func (o UriFolderJobInputResponseOutput) ToUriFolderJobInputResponseOutputWithContext(ctx context.Context) UriFolderJobInputResponseOutput {
	return o
}

// Description for the input.
func (o UriFolderJobInputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Input Type.
// Expected value is 'UriFolder'.
func (o UriFolderJobInputResponseOutput) JobInputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) string { return v.JobInputType }).(pulumi.StringOutput)
}

// Input Asset Delivery Mode.
func (o UriFolderJobInputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] Input Asset URI.
func (o UriFolderJobInputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobInputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UriFolderJobOutput struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFolder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutput
func (val *UriFolderJobOutput) Defaults() *UriFolderJobOutput {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

// UriFolderJobOutputInput is an input type that accepts UriFolderJobOutputArgs and UriFolderJobOutputOutput values.
// You can construct a concrete instance of `UriFolderJobOutputInput` via:
//
//	UriFolderJobOutputArgs{...}
type UriFolderJobOutputInput interface {
	pulumi.Input

	ToUriFolderJobOutputOutput() UriFolderJobOutputOutput
	ToUriFolderJobOutputOutputWithContext(context.Context) UriFolderJobOutputOutput
}

type UriFolderJobOutputArgs struct {
	// Description for the output.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFolder'.
	JobOutputType pulumi.StringInput `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Output Asset URI.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutputArgs
func (val *UriFolderJobOutputArgs) Defaults() *UriFolderJobOutputArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		tmp.Mode = pulumi.StringPtr("ReadWriteMount")
	}
	return &tmp
}
func (UriFolderJobOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutput)(nil)).Elem()
}

func (i UriFolderJobOutputArgs) ToUriFolderJobOutputOutput() UriFolderJobOutputOutput {
	return i.ToUriFolderJobOutputOutputWithContext(context.Background())
}

func (i UriFolderJobOutputArgs) ToUriFolderJobOutputOutputWithContext(ctx context.Context) UriFolderJobOutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UriFolderJobOutputOutput)
}

type UriFolderJobOutputOutput struct{ *pulumi.OutputState }

func (UriFolderJobOutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutput)(nil)).Elem()
}

func (o UriFolderJobOutputOutput) ToUriFolderJobOutputOutput() UriFolderJobOutputOutput {
	return o
}

func (o UriFolderJobOutputOutput) ToUriFolderJobOutputOutputWithContext(ctx context.Context) UriFolderJobOutputOutput {
	return o
}

// Description for the output.
func (o UriFolderJobOutputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'UriFolder'.
func (o UriFolderJobOutputOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobOutput) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFolderJobOutputOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFolderJobOutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutput) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type UriFolderJobOutputResponse struct {
	// Description for the output.
	Description *string `pulumi:"description"`
	// Enum to determine the Job Output Type.
	// Expected value is 'UriFolder'.
	JobOutputType string `pulumi:"jobOutputType"`
	// Output Asset Delivery Mode.
	Mode *string `pulumi:"mode"`
	// Output Asset URI.
	Uri *string `pulumi:"uri"`
}

// Defaults sets the appropriate defaults for UriFolderJobOutputResponse
func (val *UriFolderJobOutputResponse) Defaults() *UriFolderJobOutputResponse {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.Mode == nil {
		mode_ := "ReadWriteMount"
		tmp.Mode = &mode_
	}
	return &tmp
}

type UriFolderJobOutputResponseOutput struct{ *pulumi.OutputState }

func (UriFolderJobOutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UriFolderJobOutputResponse)(nil)).Elem()
}

func (o UriFolderJobOutputResponseOutput) ToUriFolderJobOutputResponseOutput() UriFolderJobOutputResponseOutput {
	return o
}

func (o UriFolderJobOutputResponseOutput) ToUriFolderJobOutputResponseOutputWithContext(ctx context.Context) UriFolderJobOutputResponseOutput {
	return o
}

// Description for the output.
func (o UriFolderJobOutputResponseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Enum to determine the Job Output Type.
// Expected value is 'UriFolder'.
func (o UriFolderJobOutputResponseOutput) JobOutputType() pulumi.StringOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) string { return v.JobOutputType }).(pulumi.StringOutput)
}

// Output Asset Delivery Mode.
func (o UriFolderJobOutputResponseOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Output Asset URI.
func (o UriFolderJobOutputResponseOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UriFolderJobOutputResponse) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// User assigned identity properties
type UserAssignedIdentityResponse struct {
	// The client ID of the assigned identity.
	ClientId string `pulumi:"clientId"`
	// The principal ID of the assigned identity.
	PrincipalId string `pulumi:"principalId"`
}

// User assigned identity properties
type UserAssignedIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutput() UserAssignedIdentityResponseOutput {
	return o
}

func (o UserAssignedIdentityResponseOutput) ToUserAssignedIdentityResponseOutputWithContext(ctx context.Context) UserAssignedIdentityResponseOutput {
	return o
}

// The client ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The principal ID of the assigned identity.
func (o UserAssignedIdentityResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v UserAssignedIdentityResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type UserAssignedIdentityResponseMapOutput struct{ *pulumi.OutputState }

func (UserAssignedIdentityResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserAssignedIdentityResponse)(nil)).Elem()
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutput() UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) ToUserAssignedIdentityResponseMapOutputWithContext(ctx context.Context) UserAssignedIdentityResponseMapOutput {
	return o
}

func (o UserAssignedIdentityResponseMapOutput) MapIndex(k pulumi.StringInput) UserAssignedIdentityResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserAssignedIdentityResponse {
		return vs[0].(map[string]UserAssignedIdentityResponse)[vs[1].(string)]
	}).(UserAssignedIdentityResponseOutput)
}

// User identity configuration.
type UserIdentity struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType string `pulumi:"identityType"`
}

// UserIdentityInput is an input type that accepts UserIdentityArgs and UserIdentityOutput values.
// You can construct a concrete instance of `UserIdentityInput` via:
//
//	UserIdentityArgs{...}
type UserIdentityInput interface {
	pulumi.Input

	ToUserIdentityOutput() UserIdentityOutput
	ToUserIdentityOutputWithContext(context.Context) UserIdentityOutput
}

// User identity configuration.
type UserIdentityArgs struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType pulumi.StringInput `pulumi:"identityType"`
}

func (UserIdentityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (i UserIdentityArgs) ToUserIdentityOutput() UserIdentityOutput {
	return i.ToUserIdentityOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput)
}

func (i UserIdentityArgs) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i UserIdentityArgs) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityOutput).ToUserIdentityPtrOutputWithContext(ctx)
}

// UserIdentityPtrInput is an input type that accepts UserIdentityArgs, UserIdentityPtr and UserIdentityPtrOutput values.
// You can construct a concrete instance of `UserIdentityPtrInput` via:
//
//	        UserIdentityArgs{...}
//
//	or:
//
//	        nil
type UserIdentityPtrInput interface {
	pulumi.Input

	ToUserIdentityPtrOutput() UserIdentityPtrOutput
	ToUserIdentityPtrOutputWithContext(context.Context) UserIdentityPtrOutput
}

type userIdentityPtrType UserIdentityArgs

func UserIdentityPtr(v *UserIdentityArgs) UserIdentityPtrInput {
	return (*userIdentityPtrType)(v)
}

func (*userIdentityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return i.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (i *userIdentityPtrType) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserIdentityPtrOutput)
}

// User identity configuration.
type UserIdentityOutput struct{ *pulumi.OutputState }

func (UserIdentityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentity)(nil)).Elem()
}

func (o UserIdentityOutput) ToUserIdentityOutput() UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityOutputWithContext(ctx context.Context) UserIdentityOutput {
	return o
}

func (o UserIdentityOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o.ToUserIdentityPtrOutputWithContext(context.Background())
}

func (o UserIdentityOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserIdentity) *UserIdentity {
		return &v
	}).(UserIdentityPtrOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentity) string { return v.IdentityType }).(pulumi.StringOutput)
}

type UserIdentityPtrOutput struct{ *pulumi.OutputState }

func (UserIdentityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentity)(nil)).Elem()
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutput() UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) ToUserIdentityPtrOutputWithContext(ctx context.Context) UserIdentityPtrOutput {
	return o
}

func (o UserIdentityPtrOutput) Elem() UserIdentityOutput {
	return o.ApplyT(func(v *UserIdentity) UserIdentity {
		if v != nil {
			return *v
		}
		var ret UserIdentity
		return ret
	}).(UserIdentityOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityPtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentity) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

// User identity configuration.
type UserIdentityResponse struct {
	// Enum to determine identity framework.
	// Expected value is 'UserIdentity'.
	IdentityType string `pulumi:"identityType"`
}

// User identity configuration.
type UserIdentityResponseOutput struct{ *pulumi.OutputState }

func (UserIdentityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutput() UserIdentityResponseOutput {
	return o
}

func (o UserIdentityResponseOutput) ToUserIdentityResponseOutputWithContext(ctx context.Context) UserIdentityResponseOutput {
	return o
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityResponseOutput) IdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v UserIdentityResponse) string { return v.IdentityType }).(pulumi.StringOutput)
}

type UserIdentityResponsePtrOutput struct{ *pulumi.OutputState }

func (UserIdentityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserIdentityResponse)(nil)).Elem()
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutput() UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) ToUserIdentityResponsePtrOutputWithContext(ctx context.Context) UserIdentityResponsePtrOutput {
	return o
}

func (o UserIdentityResponsePtrOutput) Elem() UserIdentityResponseOutput {
	return o.ApplyT(func(v *UserIdentityResponse) UserIdentityResponse {
		if v != nil {
			return *v
		}
		var ret UserIdentityResponse
		return ret
	}).(UserIdentityResponseOutput)
}

// Enum to determine identity framework.
// Expected value is 'UserIdentity'.
func (o UserIdentityResponsePtrOutput) IdentityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserIdentityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.IdentityType
	}).(pulumi.StringPtrOutput)
}

type ColumnTransformerArrayMap map[string]ColumnTransformerArrayInput

func (ColumnTransformerArrayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return i.ToColumnTransformerArrayMapOutputWithContext(context.Background())
}

func (i ColumnTransformerArrayMap) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColumnTransformerArrayMapOutput)
}

// ColumnTransformerArrayMapInput is an input type that accepts ColumnTransformerArrayMap and ColumnTransformerArrayMapOutput values.
// You can construct a concrete instance of `ColumnTransformerArrayMapInput` via:
//
//	ColumnTransformerArrayMap{ "key": ColumnTransformerArray{ ColumnTransformerArgs{...} } }
type ColumnTransformerArrayMapInput interface {
	pulumi.Input

	ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput
	ToColumnTransformerArrayMapOutputWithContext(context.Context) ColumnTransformerArrayMapOutput
}

type ColumnTransformerArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformer)(nil)).Elem()
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutput() ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) ToColumnTransformerArrayMapOutputWithContext(ctx context.Context) ColumnTransformerArrayMapOutput {
	return o
}

func (o ColumnTransformerArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformer {
		return vs[0].(map[string][]ColumnTransformer)[vs[1].(string)]
	}).(ColumnTransformerArrayOutput)
}

type ColumnTransformerResponseArrayMapOutput struct{ *pulumi.OutputState }

func (ColumnTransformerResponseArrayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string][]ColumnTransformerResponse)(nil)).Elem()
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutput() ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) ToColumnTransformerResponseArrayMapOutputWithContext(ctx context.Context) ColumnTransformerResponseArrayMapOutput {
	return o
}

func (o ColumnTransformerResponseArrayMapOutput) MapIndex(k pulumi.StringInput) ColumnTransformerResponseArrayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) []ColumnTransformerResponse {
		return vs[0].(map[string][]ColumnTransformerResponse)[vs[1].(string)]
	}).(ColumnTransformerResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(AccountKeyDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(AmlTokenOutput{})
	pulumi.RegisterOutputType(AmlTokenPtrOutput{})
	pulumi.RegisterOutputType(AmlTokenResponseOutput{})
	pulumi.RegisterOutputType(AmlTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(AutoForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoMLJobOutput{})
	pulumi.RegisterOutputType(AutoMLJobResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(AutoNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(AutoSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(AutoTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreOutput{})
	pulumi.RegisterOutputType(AzureBlobDatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen1DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreOutput{})
	pulumi.RegisterOutputType(AzureDataLakeGen2DatastoreResponseOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreOutput{})
	pulumi.RegisterOutputType(AzureFileDatastoreResponseOutput{})
	pulumi.RegisterOutputType(BanditPolicyOutput{})
	pulumi.RegisterOutputType(BanditPolicyPtrOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponseOutput{})
	pulumi.RegisterOutputType(BanditPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchDeploymentTypeOutput{})
	pulumi.RegisterOutputType(BatchDeploymentResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointTypeOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsPtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponseOutput{})
	pulumi.RegisterOutputType(BatchEndpointDefaultsResponsePtrOutput{})
	pulumi.RegisterOutputType(BatchEndpointResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsPtrOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponseOutput{})
	pulumi.RegisterOutputType(BatchRetrySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(BayesianSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(BuildContextOutput{})
	pulumi.RegisterOutputType(BuildContextPtrOutput{})
	pulumi.RegisterOutputType(BuildContextResponseOutput{})
	pulumi.RegisterOutputType(BuildContextResponsePtrOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(CertificateDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ClassificationOutput{})
	pulumi.RegisterOutputType(ClassificationResponseOutput{})
	pulumi.RegisterOutputType(CodeConfigurationOutput{})
	pulumi.RegisterOutputType(CodeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(CodeConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(CodeContainerTypeOutput{})
	pulumi.RegisterOutputType(CodeContainerResponseOutput{})
	pulumi.RegisterOutputType(CodeVersionTypeOutput{})
	pulumi.RegisterOutputType(CodeVersionResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayOutput{})
	pulumi.RegisterOutputType(CommandJobOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(CommandJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(CommandJobResponseOutput{})
	pulumi.RegisterOutputType(ComponentContainerTypeOutput{})
	pulumi.RegisterOutputType(ComponentContainerResponseOutput{})
	pulumi.RegisterOutputType(ComponentVersionTypeOutput{})
	pulumi.RegisterOutputType(ComponentVersionResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceRequirementsResponsePtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsPtrOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponseOutput{})
	pulumi.RegisterOutputType(ContainerResourceSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(CronScheduleOutput{})
	pulumi.RegisterOutputType(CronSchedulePtrOutput{})
	pulumi.RegisterOutputType(CronScheduleResponseOutput{})
	pulumi.RegisterOutputType(CronScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonPtrOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponseOutput{})
	pulumi.RegisterOutputType(CustomForecastHorizonResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputOutput{})
	pulumi.RegisterOutputType(CustomModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputOutput{})
	pulumi.RegisterOutputType(CustomModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsPtrOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponseOutput{})
	pulumi.RegisterOutputType(CustomNCrossValidationsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityPtrOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponseOutput{})
	pulumi.RegisterOutputType(CustomSeasonalityResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsPtrOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetLagsResponsePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizePtrOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponseOutput{})
	pulumi.RegisterOutputType(CustomTargetRollingWindowSizeResponsePtrOutput{})
	pulumi.RegisterOutputType(DataContainerTypeOutput{})
	pulumi.RegisterOutputType(DataContainerResponseOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DataPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(DefaultScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysOutput{})
	pulumi.RegisterOutputType(EndpointAuthKeysPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentContainerResponseOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionTypeOutput{})
	pulumi.RegisterOutputType(EnvironmentVersionResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataOutput{})
	pulumi.RegisterOutputType(FlavorDataMapOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseOutput{})
	pulumi.RegisterOutputType(FlavorDataResponseMapOutput{})
	pulumi.RegisterOutputType(ForecastingOutput{})
	pulumi.RegisterOutputType(ForecastingResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsPtrOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponseOutput{})
	pulumi.RegisterOutputType(ForecastingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(GridSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(HdfsDatastoreOutput{})
	pulumi.RegisterOutputType(HdfsDatastoreResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceOutput{})
	pulumi.RegisterOutputType(IdAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(IdAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageClassificationOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(ImageClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(ImageClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationOutput{})
	pulumi.RegisterOutputType(ImageInstanceSegmentationResponseOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsOutput{})
	pulumi.RegisterOutputType(ImageLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsClassificationResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionArrayOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelDistributionSettingsObjectDetectionResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsClassificationResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionPtrOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageModelSettingsObjectDetectionResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionOutput{})
	pulumi.RegisterOutputType(ImageObjectDetectionResponseOutput{})
	pulumi.RegisterOutputType(ImageSweepLimitSettingsOutput{})
	pulumi.RegisterOutputType(ImageSweepLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(ImageSweepLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageSweepLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsPtrOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageSweepSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(ImageVerticalDataSettingsOutput{})
	pulumi.RegisterOutputType(ImageVerticalDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageVerticalValidationDataSettingsOutput{})
	pulumi.RegisterOutputType(ImageVerticalValidationDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(ImageVerticalValidationDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageVerticalValidationDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(InferenceContainerPropertiesResponsePtrOutput{})
	pulumi.RegisterOutputType(JobServiceOutput{})
	pulumi.RegisterOutputType(JobServiceMapOutput{})
	pulumi.RegisterOutputType(JobServiceResponseOutput{})
	pulumi.RegisterOutputType(JobServiceResponseMapOutput{})
	pulumi.RegisterOutputType(KerberosKeytabCredentialsOutput{})
	pulumi.RegisterOutputType(KerberosKeytabCredentialsResponseOutput{})
	pulumi.RegisterOutputType(KerberosKeytabSecretsOutput{})
	pulumi.RegisterOutputType(KerberosPasswordCredentialsOutput{})
	pulumi.RegisterOutputType(KerberosPasswordCredentialsResponseOutput{})
	pulumi.RegisterOutputType(KerberosPasswordSecretsOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(KubernetesOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(LiteralJobInputOutput{})
	pulumi.RegisterOutputType(LiteralJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputOutput{})
	pulumi.RegisterOutputType(MLFlowModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(MLTableDataOutput{})
	pulumi.RegisterOutputType(MLTableDataResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputOutput{})
	pulumi.RegisterOutputType(MLTableJobInputPtrOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponseOutput{})
	pulumi.RegisterOutputType(MLTableJobInputResponsePtrOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputOutput{})
	pulumi.RegisterOutputType(MLTableJobOutputResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityOutput{})
	pulumi.RegisterOutputType(ManagedIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentOutput{})
	pulumi.RegisterOutputType(ManagedOnlineDeploymentResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityPtrOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponseOutput{})
	pulumi.RegisterOutputType(ManagedServiceIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyPtrOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponseOutput{})
	pulumi.RegisterOutputType(MedianStoppingPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(ModelContainerTypeOutput{})
	pulumi.RegisterOutputType(ModelContainerResponseOutput{})
	pulumi.RegisterOutputType(ModelVersionTypeOutput{})
	pulumi.RegisterOutputType(ModelVersionResponseOutput{})
	pulumi.RegisterOutputType(MpiOutput{})
	pulumi.RegisterOutputType(MpiPtrOutput{})
	pulumi.RegisterOutputType(MpiResponseOutput{})
	pulumi.RegisterOutputType(MpiResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalDataSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalValidationDataSettingsOutput{})
	pulumi.RegisterOutputType(NlpVerticalValidationDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(NlpVerticalValidationDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(NlpVerticalValidationDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(NoneDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ObjectiveOutput{})
	pulumi.RegisterOutputType(ObjectiveResponseOutput{})
	pulumi.RegisterOutputType(OnlineEndpointTypeOutput{})
	pulumi.RegisterOutputType(OnlineEndpointResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsPtrOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponseOutput{})
	pulumi.RegisterOutputType(OnlineRequestSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferencePtrOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponseOutput{})
	pulumi.RegisterOutputType(OutputPathAssetReferenceResponsePtrOutput{})
	pulumi.RegisterOutputType(PipelineJobOutput{})
	pulumi.RegisterOutputType(PipelineJobResponseOutput{})
	pulumi.RegisterOutputType(ProbeSettingsOutput{})
	pulumi.RegisterOutputType(ProbeSettingsPtrOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponseOutput{})
	pulumi.RegisterOutputType(ProbeSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(PyTorchOutput{})
	pulumi.RegisterOutputType(PyTorchPtrOutput{})
	pulumi.RegisterOutputType(PyTorchResponseOutput{})
	pulumi.RegisterOutputType(PyTorchResponsePtrOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(RandomSamplingAlgorithmResponseOutput{})
	pulumi.RegisterOutputType(RecurrencePatternOutput{})
	pulumi.RegisterOutputType(RecurrencePatternPtrOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponseOutput{})
	pulumi.RegisterOutputType(RecurrencePatternResponsePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleOutput{})
	pulumi.RegisterOutputType(RecurrenceSchedulePtrOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponseOutput{})
	pulumi.RegisterOutputType(RecurrenceScheduleResponsePtrOutput{})
	pulumi.RegisterOutputType(RegressionOutput{})
	pulumi.RegisterOutputType(RegressionResponseOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ResourceConfigurationResponsePtrOutput{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RoutePtrOutput{})
	pulumi.RegisterOutputType(RouteResponseOutput{})
	pulumi.RegisterOutputType(RouteResponsePtrOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(SasDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(SasDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreCredentialsResponseOutput{})
	pulumi.RegisterOutputType(ServicePrincipalDatastoreSecretsOutput{})
	pulumi.RegisterOutputType(SkuOutput{})
	pulumi.RegisterOutputType(SkuPtrOutput{})
	pulumi.RegisterOutputType(SkuResponseOutput{})
	pulumi.RegisterOutputType(SkuResponsePtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsPtrOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponseOutput{})
	pulumi.RegisterOutputType(StackEnsembleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(SweepJobOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsPtrOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponseOutput{})
	pulumi.RegisterOutputType(SweepJobLimitsResponsePtrOutput{})
	pulumi.RegisterOutputType(SweepJobResponseOutput{})
	pulumi.RegisterOutputType(SystemDataResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalDataSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalFeaturizationSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalLimitSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TableVerticalValidationDataSettingsOutput{})
	pulumi.RegisterOutputType(TableVerticalValidationDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(TableVerticalValidationDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(TableVerticalValidationDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsPtrOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponseOutput{})
	pulumi.RegisterOutputType(TargetUtilizationScaleSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TensorFlowOutput{})
	pulumi.RegisterOutputType(TensorFlowPtrOutput{})
	pulumi.RegisterOutputType(TensorFlowResponseOutput{})
	pulumi.RegisterOutputType(TensorFlowResponsePtrOutput{})
	pulumi.RegisterOutputType(TestDataSettingsOutput{})
	pulumi.RegisterOutputType(TestDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(TestDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(TestDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TextClassificationOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelOutput{})
	pulumi.RegisterOutputType(TextClassificationMultilabelResponseOutput{})
	pulumi.RegisterOutputType(TextClassificationResponseOutput{})
	pulumi.RegisterOutputType(TextNerOutput{})
	pulumi.RegisterOutputType(TextNerResponseOutput{})
	pulumi.RegisterOutputType(TrainingDataSettingsOutput{})
	pulumi.RegisterOutputType(TrainingDataSettingsPtrOutput{})
	pulumi.RegisterOutputType(TrainingDataSettingsResponseOutput{})
	pulumi.RegisterOutputType(TrainingDataSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TrainingSettingsOutput{})
	pulumi.RegisterOutputType(TrainingSettingsPtrOutput{})
	pulumi.RegisterOutputType(TrainingSettingsResponseOutput{})
	pulumi.RegisterOutputType(TrainingSettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(TrialComponentOutput{})
	pulumi.RegisterOutputType(TrialComponentResponseOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputOutput{})
	pulumi.RegisterOutputType(TritonModelJobInputResponseOutput{})
	pulumi.RegisterOutputType(TritonModelJobOutputOutput{})
	pulumi.RegisterOutputType(TritonModelJobOutputResponseOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(TruncationSelectionPolicyResponsePtrOutput{})
	pulumi.RegisterOutputType(UriFileDataVersionOutput{})
	pulumi.RegisterOutputType(UriFileDataVersionResponseOutput{})
	pulumi.RegisterOutputType(UriFileJobInputOutput{})
	pulumi.RegisterOutputType(UriFileJobInputResponseOutput{})
	pulumi.RegisterOutputType(UriFileJobOutputOutput{})
	pulumi.RegisterOutputType(UriFileJobOutputResponseOutput{})
	pulumi.RegisterOutputType(UriFolderDataVersionOutput{})
	pulumi.RegisterOutputType(UriFolderDataVersionResponseOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputOutput{})
	pulumi.RegisterOutputType(UriFolderJobInputResponseOutput{})
	pulumi.RegisterOutputType(UriFolderJobOutputOutput{})
	pulumi.RegisterOutputType(UriFolderJobOutputResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserAssignedIdentityResponseMapOutput{})
	pulumi.RegisterOutputType(UserIdentityOutput{})
	pulumi.RegisterOutputType(UserIdentityPtrOutput{})
	pulumi.RegisterOutputType(UserIdentityResponseOutput{})
	pulumi.RegisterOutputType(UserIdentityResponsePtrOutput{})
	pulumi.RegisterOutputType(ColumnTransformerArrayMapOutput{})
	pulumi.RegisterOutputType(ColumnTransformerResponseArrayMapOutput{})
}
