// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210301preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Logging level for batch inference operation.
type BatchLoggingLevel string

const (
	BatchLoggingLevelInfo    = BatchLoggingLevel("Info")
	BatchLoggingLevelWarning = BatchLoggingLevel("Warning")
	BatchLoggingLevelDebug   = BatchLoggingLevel("Debug")
)

func (BatchLoggingLevel) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchLoggingLevel)(nil)).Elem()
}

func (e BatchLoggingLevel) ToBatchLoggingLevelOutput() BatchLoggingLevelOutput {
	return pulumi.ToOutput(e).(BatchLoggingLevelOutput)
}

func (e BatchLoggingLevel) ToBatchLoggingLevelOutputWithContext(ctx context.Context) BatchLoggingLevelOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BatchLoggingLevelOutput)
}

func (e BatchLoggingLevel) ToBatchLoggingLevelPtrOutput() BatchLoggingLevelPtrOutput {
	return e.ToBatchLoggingLevelPtrOutputWithContext(context.Background())
}

func (e BatchLoggingLevel) ToBatchLoggingLevelPtrOutputWithContext(ctx context.Context) BatchLoggingLevelPtrOutput {
	return BatchLoggingLevel(e).ToBatchLoggingLevelOutputWithContext(ctx).ToBatchLoggingLevelPtrOutputWithContext(ctx)
}

func (e BatchLoggingLevel) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BatchLoggingLevel) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BatchLoggingLevel) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BatchLoggingLevel) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BatchLoggingLevelOutput struct{ *pulumi.OutputState }

func (BatchLoggingLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchLoggingLevel)(nil)).Elem()
}

func (o BatchLoggingLevelOutput) ToBatchLoggingLevelOutput() BatchLoggingLevelOutput {
	return o
}

func (o BatchLoggingLevelOutput) ToBatchLoggingLevelOutputWithContext(ctx context.Context) BatchLoggingLevelOutput {
	return o
}

func (o BatchLoggingLevelOutput) ToBatchLoggingLevelPtrOutput() BatchLoggingLevelPtrOutput {
	return o.ToBatchLoggingLevelPtrOutputWithContext(context.Background())
}

func (o BatchLoggingLevelOutput) ToBatchLoggingLevelPtrOutputWithContext(ctx context.Context) BatchLoggingLevelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchLoggingLevel) *BatchLoggingLevel {
		return &v
	}).(BatchLoggingLevelPtrOutput)
}

func (o BatchLoggingLevelOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BatchLoggingLevelOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BatchLoggingLevel) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BatchLoggingLevelOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BatchLoggingLevelOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BatchLoggingLevel) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BatchLoggingLevelPtrOutput struct{ *pulumi.OutputState }

func (BatchLoggingLevelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchLoggingLevel)(nil)).Elem()
}

func (o BatchLoggingLevelPtrOutput) ToBatchLoggingLevelPtrOutput() BatchLoggingLevelPtrOutput {
	return o
}

func (o BatchLoggingLevelPtrOutput) ToBatchLoggingLevelPtrOutputWithContext(ctx context.Context) BatchLoggingLevelPtrOutput {
	return o
}

func (o BatchLoggingLevelPtrOutput) Elem() BatchLoggingLevelOutput {
	return o.ApplyT(func(v *BatchLoggingLevel) BatchLoggingLevel {
		if v != nil {
			return *v
		}
		var ret BatchLoggingLevel
		return ret
	}).(BatchLoggingLevelOutput)
}

func (o BatchLoggingLevelPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BatchLoggingLevelPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BatchLoggingLevel) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BatchLoggingLevelInput is an input type that accepts values of the BatchLoggingLevel enum
// A concrete instance of `BatchLoggingLevelInput` can be one of the following:
//
//	BatchLoggingLevelInfo
//	BatchLoggingLevelWarning
//	BatchLoggingLevelDebug
type BatchLoggingLevelInput interface {
	pulumi.Input

	ToBatchLoggingLevelOutput() BatchLoggingLevelOutput
	ToBatchLoggingLevelOutputWithContext(context.Context) BatchLoggingLevelOutput
}

var batchLoggingLevelPtrType = reflect.TypeOf((**BatchLoggingLevel)(nil)).Elem()

type BatchLoggingLevelPtrInput interface {
	pulumi.Input

	ToBatchLoggingLevelPtrOutput() BatchLoggingLevelPtrOutput
	ToBatchLoggingLevelPtrOutputWithContext(context.Context) BatchLoggingLevelPtrOutput
}

type batchLoggingLevelPtr string

func BatchLoggingLevelPtr(v string) BatchLoggingLevelPtrInput {
	return (*batchLoggingLevelPtr)(&v)
}

func (*batchLoggingLevelPtr) ElementType() reflect.Type {
	return batchLoggingLevelPtrType
}

func (in *batchLoggingLevelPtr) ToBatchLoggingLevelPtrOutput() BatchLoggingLevelPtrOutput {
	return pulumi.ToOutput(in).(BatchLoggingLevelPtrOutput)
}

func (in *batchLoggingLevelPtr) ToBatchLoggingLevelPtrOutputWithContext(ctx context.Context) BatchLoggingLevelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BatchLoggingLevelPtrOutput)
}

// Indicates how the output will be organized.
type BatchOutputAction string

const (
	BatchOutputActionSummaryOnly = BatchOutputAction("SummaryOnly")
	BatchOutputActionAppendRow   = BatchOutputAction("AppendRow")
)

func (BatchOutputAction) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchOutputAction)(nil)).Elem()
}

func (e BatchOutputAction) ToBatchOutputActionOutput() BatchOutputActionOutput {
	return pulumi.ToOutput(e).(BatchOutputActionOutput)
}

func (e BatchOutputAction) ToBatchOutputActionOutputWithContext(ctx context.Context) BatchOutputActionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BatchOutputActionOutput)
}

func (e BatchOutputAction) ToBatchOutputActionPtrOutput() BatchOutputActionPtrOutput {
	return e.ToBatchOutputActionPtrOutputWithContext(context.Background())
}

func (e BatchOutputAction) ToBatchOutputActionPtrOutputWithContext(ctx context.Context) BatchOutputActionPtrOutput {
	return BatchOutputAction(e).ToBatchOutputActionOutputWithContext(ctx).ToBatchOutputActionPtrOutputWithContext(ctx)
}

func (e BatchOutputAction) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BatchOutputAction) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BatchOutputAction) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BatchOutputAction) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BatchOutputActionOutput struct{ *pulumi.OutputState }

func (BatchOutputActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BatchOutputAction)(nil)).Elem()
}

func (o BatchOutputActionOutput) ToBatchOutputActionOutput() BatchOutputActionOutput {
	return o
}

func (o BatchOutputActionOutput) ToBatchOutputActionOutputWithContext(ctx context.Context) BatchOutputActionOutput {
	return o
}

func (o BatchOutputActionOutput) ToBatchOutputActionPtrOutput() BatchOutputActionPtrOutput {
	return o.ToBatchOutputActionPtrOutputWithContext(context.Background())
}

func (o BatchOutputActionOutput) ToBatchOutputActionPtrOutputWithContext(ctx context.Context) BatchOutputActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BatchOutputAction) *BatchOutputAction {
		return &v
	}).(BatchOutputActionPtrOutput)
}

func (o BatchOutputActionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BatchOutputActionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BatchOutputAction) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BatchOutputActionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BatchOutputActionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BatchOutputAction) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BatchOutputActionPtrOutput struct{ *pulumi.OutputState }

func (BatchOutputActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchOutputAction)(nil)).Elem()
}

func (o BatchOutputActionPtrOutput) ToBatchOutputActionPtrOutput() BatchOutputActionPtrOutput {
	return o
}

func (o BatchOutputActionPtrOutput) ToBatchOutputActionPtrOutputWithContext(ctx context.Context) BatchOutputActionPtrOutput {
	return o
}

func (o BatchOutputActionPtrOutput) Elem() BatchOutputActionOutput {
	return o.ApplyT(func(v *BatchOutputAction) BatchOutputAction {
		if v != nil {
			return *v
		}
		var ret BatchOutputAction
		return ret
	}).(BatchOutputActionOutput)
}

func (o BatchOutputActionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BatchOutputActionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BatchOutputAction) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BatchOutputActionInput is an input type that accepts values of the BatchOutputAction enum
// A concrete instance of `BatchOutputActionInput` can be one of the following:
//
//	BatchOutputActionSummaryOnly
//	BatchOutputActionAppendRow
type BatchOutputActionInput interface {
	pulumi.Input

	ToBatchOutputActionOutput() BatchOutputActionOutput
	ToBatchOutputActionOutputWithContext(context.Context) BatchOutputActionOutput
}

var batchOutputActionPtrType = reflect.TypeOf((**BatchOutputAction)(nil)).Elem()

type BatchOutputActionPtrInput interface {
	pulumi.Input

	ToBatchOutputActionPtrOutput() BatchOutputActionPtrOutput
	ToBatchOutputActionPtrOutputWithContext(context.Context) BatchOutputActionPtrOutput
}

type batchOutputActionPtr string

func BatchOutputActionPtr(v string) BatchOutputActionPtrInput {
	return (*batchOutputActionPtr)(&v)
}

func (*batchOutputActionPtr) ElementType() reflect.Type {
	return batchOutputActionPtrType
}

func (in *batchOutputActionPtr) ToBatchOutputActionPtrOutput() BatchOutputActionPtrOutput {
	return pulumi.ToOutput(in).(BatchOutputActionPtrOutput)
}

func (in *batchOutputActionPtr) ToBatchOutputActionPtrOutputWithContext(ctx context.Context) BatchOutputActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BatchOutputActionPtrOutput)
}

// [Required] Storage type backing the datastore.
type ContentsType string

const (
	ContentsTypeAzureBlob         = ContentsType("AzureBlob")
	ContentsTypeAzureDataLakeGen1 = ContentsType("AzureDataLakeGen1")
	ContentsTypeAzureDataLakeGen2 = ContentsType("AzureDataLakeGen2")
	ContentsTypeAzureFile         = ContentsType("AzureFile")
	ContentsTypeAzureMySql        = ContentsType("AzureMySql")
	ContentsTypeAzurePostgreSql   = ContentsType("AzurePostgreSql")
	ContentsTypeAzureSqlDatabase  = ContentsType("AzureSqlDatabase")
	ContentsTypeGlusterFs         = ContentsType("GlusterFs")
)

// [Required] Credential type used to authentication with storage.
type CredentialsType string

const (
	CredentialsTypeAccountKey       = CredentialsType("AccountKey")
	CredentialsTypeCertificate      = CredentialsType("Certificate")
	CredentialsTypeNone             = CredentialsType("None")
	CredentialsTypeSas              = CredentialsType("Sas")
	CredentialsTypeServicePrincipal = CredentialsType("ServicePrincipal")
	CredentialsTypeSqlAdmin         = CredentialsType("SqlAdmin")
)

// Mechanism for data movement to datastore.
type DataBindingMode string

const (
	DataBindingModeMount          = DataBindingMode("Mount")
	DataBindingModeDownload       = DataBindingMode("Download")
	DataBindingModeUpload         = DataBindingMode("Upload")
	DataBindingModeReadOnlyMount  = DataBindingMode("ReadOnlyMount")
	DataBindingModeReadWriteMount = DataBindingMode("ReadWriteMount")
	DataBindingModeDirect         = DataBindingMode("Direct")
	DataBindingModeEvalMount      = DataBindingMode("EvalMount")
	DataBindingModeEvalDownload   = DataBindingMode("EvalDownload")
)

func (DataBindingMode) ElementType() reflect.Type {
	return reflect.TypeOf((*DataBindingMode)(nil)).Elem()
}

func (e DataBindingMode) ToDataBindingModeOutput() DataBindingModeOutput {
	return pulumi.ToOutput(e).(DataBindingModeOutput)
}

func (e DataBindingMode) ToDataBindingModeOutputWithContext(ctx context.Context) DataBindingModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DataBindingModeOutput)
}

func (e DataBindingMode) ToDataBindingModePtrOutput() DataBindingModePtrOutput {
	return e.ToDataBindingModePtrOutputWithContext(context.Background())
}

func (e DataBindingMode) ToDataBindingModePtrOutputWithContext(ctx context.Context) DataBindingModePtrOutput {
	return DataBindingMode(e).ToDataBindingModeOutputWithContext(ctx).ToDataBindingModePtrOutputWithContext(ctx)
}

func (e DataBindingMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataBindingMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DataBindingMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DataBindingMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DataBindingModeOutput struct{ *pulumi.OutputState }

func (DataBindingModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataBindingMode)(nil)).Elem()
}

func (o DataBindingModeOutput) ToDataBindingModeOutput() DataBindingModeOutput {
	return o
}

func (o DataBindingModeOutput) ToDataBindingModeOutputWithContext(ctx context.Context) DataBindingModeOutput {
	return o
}

func (o DataBindingModeOutput) ToDataBindingModePtrOutput() DataBindingModePtrOutput {
	return o.ToDataBindingModePtrOutputWithContext(context.Background())
}

func (o DataBindingModeOutput) ToDataBindingModePtrOutputWithContext(ctx context.Context) DataBindingModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataBindingMode) *DataBindingMode {
		return &v
	}).(DataBindingModePtrOutput)
}

func (o DataBindingModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DataBindingModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataBindingMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DataBindingModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataBindingModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DataBindingMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DataBindingModePtrOutput struct{ *pulumi.OutputState }

func (DataBindingModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataBindingMode)(nil)).Elem()
}

func (o DataBindingModePtrOutput) ToDataBindingModePtrOutput() DataBindingModePtrOutput {
	return o
}

func (o DataBindingModePtrOutput) ToDataBindingModePtrOutputWithContext(ctx context.Context) DataBindingModePtrOutput {
	return o
}

func (o DataBindingModePtrOutput) Elem() DataBindingModeOutput {
	return o.ApplyT(func(v *DataBindingMode) DataBindingMode {
		if v != nil {
			return *v
		}
		var ret DataBindingMode
		return ret
	}).(DataBindingModeOutput)
}

func (o DataBindingModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DataBindingModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DataBindingMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DataBindingModeInput is an input type that accepts values of the DataBindingMode enum
// A concrete instance of `DataBindingModeInput` can be one of the following:
//
//	DataBindingModeMount
//	DataBindingModeDownload
//	DataBindingModeUpload
//	DataBindingModeReadOnlyMount
//	DataBindingModeReadWriteMount
//	DataBindingModeDirect
//	DataBindingModeEvalMount
//	DataBindingModeEvalDownload
type DataBindingModeInput interface {
	pulumi.Input

	ToDataBindingModeOutput() DataBindingModeOutput
	ToDataBindingModeOutputWithContext(context.Context) DataBindingModeOutput
}

var dataBindingModePtrType = reflect.TypeOf((**DataBindingMode)(nil)).Elem()

type DataBindingModePtrInput interface {
	pulumi.Input

	ToDataBindingModePtrOutput() DataBindingModePtrOutput
	ToDataBindingModePtrOutputWithContext(context.Context) DataBindingModePtrOutput
}

type dataBindingModePtr string

func DataBindingModePtr(v string) DataBindingModePtrInput {
	return (*dataBindingModePtr)(&v)
}

func (*dataBindingModePtr) ElementType() reflect.Type {
	return dataBindingModePtrType
}

func (in *dataBindingModePtr) ToDataBindingModePtrOutput() DataBindingModePtrOutput {
	return pulumi.ToOutput(in).(DataBindingModePtrOutput)
}

func (in *dataBindingModePtr) ToDataBindingModePtrOutputWithContext(ctx context.Context) DataBindingModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DataBindingModePtrOutput)
}

// The Format of dataset.
type DatasetType string

const (
	DatasetTypeSimple   = DatasetType("Simple")
	DatasetTypeDataflow = DatasetType("Dataflow")
)

func (DatasetType) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (e DatasetType) ToDatasetTypeOutput() DatasetTypeOutput {
	return pulumi.ToOutput(e).(DatasetTypeOutput)
}

func (e DatasetType) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DatasetTypeOutput)
}

func (e DatasetType) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return e.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (e DatasetType) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return DatasetType(e).ToDatasetTypeOutputWithContext(ctx).ToDatasetTypePtrOutputWithContext(ctx)
}

func (e DatasetType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DatasetType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DatasetType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DatasetTypeOutput struct{ *pulumi.OutputState }

func (DatasetTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetType)(nil)).Elem()
}

func (o DatasetTypeOutput) ToDatasetTypeOutput() DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypeOutputWithContext(ctx context.Context) DatasetTypeOutput {
	return o
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o.ToDatasetTypePtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetType) *DatasetType {
		return &v
	}).(DatasetTypePtrOutput)
}

func (o DatasetTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DatasetTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DatasetType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DatasetTypePtrOutput struct{ *pulumi.OutputState }

func (DatasetTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetType)(nil)).Elem()
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return o
}

func (o DatasetTypePtrOutput) Elem() DatasetTypeOutput {
	return o.ApplyT(func(v *DatasetType) DatasetType {
		if v != nil {
			return *v
		}
		var ret DatasetType
		return ret
	}).(DatasetTypeOutput)
}

func (o DatasetTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DatasetTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DatasetType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DatasetTypeInput is an input type that accepts values of the DatasetType enum
// A concrete instance of `DatasetTypeInput` can be one of the following:
//
//	DatasetTypeSimple
//	DatasetTypeDataflow
type DatasetTypeInput interface {
	pulumi.Input

	ToDatasetTypeOutput() DatasetTypeOutput
	ToDatasetTypeOutputWithContext(context.Context) DatasetTypeOutput
}

var datasetTypePtrType = reflect.TypeOf((**DatasetType)(nil)).Elem()

type DatasetTypePtrInput interface {
	pulumi.Input

	ToDatasetTypePtrOutput() DatasetTypePtrOutput
	ToDatasetTypePtrOutputWithContext(context.Context) DatasetTypePtrOutput
}

type datasetTypePtr string

func DatasetTypePtr(v string) DatasetTypePtrInput {
	return (*datasetTypePtr)(&v)
}

func (*datasetTypePtr) ElementType() reflect.Type {
	return datasetTypePtrType
}

func (in *datasetTypePtr) ToDatasetTypePtrOutput() DatasetTypePtrOutput {
	return pulumi.ToOutput(in).(DatasetTypePtrOutput)
}

func (in *datasetTypePtr) ToDatasetTypePtrOutputWithContext(ctx context.Context) DatasetTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DatasetTypePtrOutput)
}

// [Required] Specifies the type of distribution framework.
type DistributionType string

const (
	DistributionTypePyTorch    = DistributionType("PyTorch")
	DistributionTypeTensorFlow = DistributionType("TensorFlow")
	DistributionTypeMpi        = DistributionType("Mpi")
)

// [Required] Docker specification must be either Build or Image
type DockerSpecificationType string

const (
	DockerSpecificationTypeBuild = DockerSpecificationType("Build")
	DockerSpecificationTypeImage = DockerSpecificationType("Image")
)

// [Required] Name of policy configuration
type EarlyTerminationPolicyType string

const (
	EarlyTerminationPolicyTypeBandit              = EarlyTerminationPolicyType("Bandit")
	EarlyTerminationPolicyTypeMedianStopping      = EarlyTerminationPolicyType("MedianStopping")
	EarlyTerminationPolicyTypeTruncationSelection = EarlyTerminationPolicyType("TruncationSelection")
)

// [Required] Inference endpoint authentication mode type
type EndpointAuthMode string

const (
	EndpointAuthModeAMLToken = EndpointAuthMode("AMLToken")
	EndpointAuthModeKey      = EndpointAuthMode("Key")
	EndpointAuthModeAADToken = EndpointAuthMode("AADToken")
)

func (EndpointAuthMode) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthMode)(nil)).Elem()
}

func (e EndpointAuthMode) ToEndpointAuthModeOutput() EndpointAuthModeOutput {
	return pulumi.ToOutput(e).(EndpointAuthModeOutput)
}

func (e EndpointAuthMode) ToEndpointAuthModeOutputWithContext(ctx context.Context) EndpointAuthModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EndpointAuthModeOutput)
}

func (e EndpointAuthMode) ToEndpointAuthModePtrOutput() EndpointAuthModePtrOutput {
	return e.ToEndpointAuthModePtrOutputWithContext(context.Background())
}

func (e EndpointAuthMode) ToEndpointAuthModePtrOutputWithContext(ctx context.Context) EndpointAuthModePtrOutput {
	return EndpointAuthMode(e).ToEndpointAuthModeOutputWithContext(ctx).ToEndpointAuthModePtrOutputWithContext(ctx)
}

func (e EndpointAuthMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EndpointAuthMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EndpointAuthMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EndpointAuthMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EndpointAuthModeOutput struct{ *pulumi.OutputState }

func (EndpointAuthModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAuthMode)(nil)).Elem()
}

func (o EndpointAuthModeOutput) ToEndpointAuthModeOutput() EndpointAuthModeOutput {
	return o
}

func (o EndpointAuthModeOutput) ToEndpointAuthModeOutputWithContext(ctx context.Context) EndpointAuthModeOutput {
	return o
}

func (o EndpointAuthModeOutput) ToEndpointAuthModePtrOutput() EndpointAuthModePtrOutput {
	return o.ToEndpointAuthModePtrOutputWithContext(context.Background())
}

func (o EndpointAuthModeOutput) ToEndpointAuthModePtrOutputWithContext(ctx context.Context) EndpointAuthModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointAuthMode) *EndpointAuthMode {
		return &v
	}).(EndpointAuthModePtrOutput)
}

func (o EndpointAuthModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EndpointAuthModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EndpointAuthMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EndpointAuthModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EndpointAuthModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EndpointAuthMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EndpointAuthModePtrOutput struct{ *pulumi.OutputState }

func (EndpointAuthModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointAuthMode)(nil)).Elem()
}

func (o EndpointAuthModePtrOutput) ToEndpointAuthModePtrOutput() EndpointAuthModePtrOutput {
	return o
}

func (o EndpointAuthModePtrOutput) ToEndpointAuthModePtrOutputWithContext(ctx context.Context) EndpointAuthModePtrOutput {
	return o
}

func (o EndpointAuthModePtrOutput) Elem() EndpointAuthModeOutput {
	return o.ApplyT(func(v *EndpointAuthMode) EndpointAuthMode {
		if v != nil {
			return *v
		}
		var ret EndpointAuthMode
		return ret
	}).(EndpointAuthModeOutput)
}

func (o EndpointAuthModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EndpointAuthModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EndpointAuthMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EndpointAuthModeInput is an input type that accepts values of the EndpointAuthMode enum
// A concrete instance of `EndpointAuthModeInput` can be one of the following:
//
//	EndpointAuthModeAMLToken
//	EndpointAuthModeKey
//	EndpointAuthModeAADToken
type EndpointAuthModeInput interface {
	pulumi.Input

	ToEndpointAuthModeOutput() EndpointAuthModeOutput
	ToEndpointAuthModeOutputWithContext(context.Context) EndpointAuthModeOutput
}

var endpointAuthModePtrType = reflect.TypeOf((**EndpointAuthMode)(nil)).Elem()

type EndpointAuthModePtrInput interface {
	pulumi.Input

	ToEndpointAuthModePtrOutput() EndpointAuthModePtrOutput
	ToEndpointAuthModePtrOutputWithContext(context.Context) EndpointAuthModePtrOutput
}

type endpointAuthModePtr string

func EndpointAuthModePtr(v string) EndpointAuthModePtrInput {
	return (*endpointAuthModePtr)(&v)
}

func (*endpointAuthModePtr) ElementType() reflect.Type {
	return endpointAuthModePtrType
}

func (in *endpointAuthModePtr) ToEndpointAuthModePtrOutput() EndpointAuthModePtrOutput {
	return pulumi.ToOutput(in).(EndpointAuthModePtrOutput)
}

func (in *endpointAuthModePtr) ToEndpointAuthModePtrOutputWithContext(ctx context.Context) EndpointAuthModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EndpointAuthModePtrOutput)
}

// [Required] The compute type of the endpoint.
type EndpointComputeType string

const (
	EndpointComputeTypeManaged        = EndpointComputeType("Managed")
	EndpointComputeTypeK8S            = EndpointComputeType("K8S")
	EndpointComputeTypeAzureMLCompute = EndpointComputeType("AzureMLCompute")
)

// [Required] Defines supported metric goals for hyperparameter tuning
type Goal string

const (
	GoalMinimize = Goal("Minimize")
	GoalMaximize = Goal("Maximize")
)

func (Goal) ElementType() reflect.Type {
	return reflect.TypeOf((*Goal)(nil)).Elem()
}

func (e Goal) ToGoalOutput() GoalOutput {
	return pulumi.ToOutput(e).(GoalOutput)
}

func (e Goal) ToGoalOutputWithContext(ctx context.Context) GoalOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GoalOutput)
}

func (e Goal) ToGoalPtrOutput() GoalPtrOutput {
	return e.ToGoalPtrOutputWithContext(context.Background())
}

func (e Goal) ToGoalPtrOutputWithContext(ctx context.Context) GoalPtrOutput {
	return Goal(e).ToGoalOutputWithContext(ctx).ToGoalPtrOutputWithContext(ctx)
}

func (e Goal) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Goal) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Goal) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Goal) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GoalOutput struct{ *pulumi.OutputState }

func (GoalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Goal)(nil)).Elem()
}

func (o GoalOutput) ToGoalOutput() GoalOutput {
	return o
}

func (o GoalOutput) ToGoalOutputWithContext(ctx context.Context) GoalOutput {
	return o
}

func (o GoalOutput) ToGoalPtrOutput() GoalPtrOutput {
	return o.ToGoalPtrOutputWithContext(context.Background())
}

func (o GoalOutput) ToGoalPtrOutputWithContext(ctx context.Context) GoalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Goal) *Goal {
		return &v
	}).(GoalPtrOutput)
}

func (o GoalOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GoalOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Goal) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GoalOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoalOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Goal) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GoalPtrOutput struct{ *pulumi.OutputState }

func (GoalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Goal)(nil)).Elem()
}

func (o GoalPtrOutput) ToGoalPtrOutput() GoalPtrOutput {
	return o
}

func (o GoalPtrOutput) ToGoalPtrOutputWithContext(ctx context.Context) GoalPtrOutput {
	return o
}

func (o GoalPtrOutput) Elem() GoalOutput {
	return o.ApplyT(func(v *Goal) Goal {
		if v != nil {
			return *v
		}
		var ret Goal
		return ret
	}).(GoalOutput)
}

func (o GoalPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GoalPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Goal) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GoalInput is an input type that accepts values of the Goal enum
// A concrete instance of `GoalInput` can be one of the following:
//
//	GoalMinimize
//	GoalMaximize
type GoalInput interface {
	pulumi.Input

	ToGoalOutput() GoalOutput
	ToGoalOutputWithContext(context.Context) GoalOutput
}

var goalPtrType = reflect.TypeOf((**Goal)(nil)).Elem()

type GoalPtrInput interface {
	pulumi.Input

	ToGoalPtrOutput() GoalPtrOutput
	ToGoalPtrOutputWithContext(context.Context) GoalPtrOutput
}

type goalPtr string

func GoalPtr(v string) GoalPtrInput {
	return (*goalPtr)(&v)
}

func (*goalPtr) ElementType() reflect.Type {
	return goalPtrType
}

func (in *goalPtr) ToGoalPtrOutput() GoalPtrOutput {
	return pulumi.ToOutput(in).(GoalPtrOutput)
}

func (in *goalPtr) ToGoalPtrOutputWithContext(ctx context.Context) GoalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GoalPtrOutput)
}

// [Required] Specifies the type of identity framework.
type IdentityConfigurationType string

const (
	IdentityConfigurationTypeManaged  = IdentityConfigurationType("Managed")
	IdentityConfigurationTypeAMLToken = IdentityConfigurationType("AMLToken")
)

// Annotation type of image labeling job.
type ImageAnnotationType string

const (
	ImageAnnotationTypeClassification       = ImageAnnotationType("Classification")
	ImageAnnotationTypeBoundingBox          = ImageAnnotationType("BoundingBox")
	ImageAnnotationTypeInstanceSegmentation = ImageAnnotationType("InstanceSegmentation")
)

func (ImageAnnotationType) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageAnnotationType)(nil)).Elem()
}

func (e ImageAnnotationType) ToImageAnnotationTypeOutput() ImageAnnotationTypeOutput {
	return pulumi.ToOutput(e).(ImageAnnotationTypeOutput)
}

func (e ImageAnnotationType) ToImageAnnotationTypeOutputWithContext(ctx context.Context) ImageAnnotationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ImageAnnotationTypeOutput)
}

func (e ImageAnnotationType) ToImageAnnotationTypePtrOutput() ImageAnnotationTypePtrOutput {
	return e.ToImageAnnotationTypePtrOutputWithContext(context.Background())
}

func (e ImageAnnotationType) ToImageAnnotationTypePtrOutputWithContext(ctx context.Context) ImageAnnotationTypePtrOutput {
	return ImageAnnotationType(e).ToImageAnnotationTypeOutputWithContext(ctx).ToImageAnnotationTypePtrOutputWithContext(ctx)
}

func (e ImageAnnotationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageAnnotationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ImageAnnotationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ImageAnnotationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ImageAnnotationTypeOutput struct{ *pulumi.OutputState }

func (ImageAnnotationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageAnnotationType)(nil)).Elem()
}

func (o ImageAnnotationTypeOutput) ToImageAnnotationTypeOutput() ImageAnnotationTypeOutput {
	return o
}

func (o ImageAnnotationTypeOutput) ToImageAnnotationTypeOutputWithContext(ctx context.Context) ImageAnnotationTypeOutput {
	return o
}

func (o ImageAnnotationTypeOutput) ToImageAnnotationTypePtrOutput() ImageAnnotationTypePtrOutput {
	return o.ToImageAnnotationTypePtrOutputWithContext(context.Background())
}

func (o ImageAnnotationTypeOutput) ToImageAnnotationTypePtrOutputWithContext(ctx context.Context) ImageAnnotationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageAnnotationType) *ImageAnnotationType {
		return &v
	}).(ImageAnnotationTypePtrOutput)
}

func (o ImageAnnotationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ImageAnnotationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImageAnnotationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ImageAnnotationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImageAnnotationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ImageAnnotationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ImageAnnotationTypePtrOutput struct{ *pulumi.OutputState }

func (ImageAnnotationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageAnnotationType)(nil)).Elem()
}

func (o ImageAnnotationTypePtrOutput) ToImageAnnotationTypePtrOutput() ImageAnnotationTypePtrOutput {
	return o
}

func (o ImageAnnotationTypePtrOutput) ToImageAnnotationTypePtrOutputWithContext(ctx context.Context) ImageAnnotationTypePtrOutput {
	return o
}

func (o ImageAnnotationTypePtrOutput) Elem() ImageAnnotationTypeOutput {
	return o.ApplyT(func(v *ImageAnnotationType) ImageAnnotationType {
		if v != nil {
			return *v
		}
		var ret ImageAnnotationType
		return ret
	}).(ImageAnnotationTypeOutput)
}

func (o ImageAnnotationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ImageAnnotationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ImageAnnotationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ImageAnnotationTypeInput is an input type that accepts values of the ImageAnnotationType enum
// A concrete instance of `ImageAnnotationTypeInput` can be one of the following:
//
//	ImageAnnotationTypeClassification
//	ImageAnnotationTypeBoundingBox
//	ImageAnnotationTypeInstanceSegmentation
type ImageAnnotationTypeInput interface {
	pulumi.Input

	ToImageAnnotationTypeOutput() ImageAnnotationTypeOutput
	ToImageAnnotationTypeOutputWithContext(context.Context) ImageAnnotationTypeOutput
}

var imageAnnotationTypePtrType = reflect.TypeOf((**ImageAnnotationType)(nil)).Elem()

type ImageAnnotationTypePtrInput interface {
	pulumi.Input

	ToImageAnnotationTypePtrOutput() ImageAnnotationTypePtrOutput
	ToImageAnnotationTypePtrOutputWithContext(context.Context) ImageAnnotationTypePtrOutput
}

type imageAnnotationTypePtr string

func ImageAnnotationTypePtr(v string) ImageAnnotationTypePtrInput {
	return (*imageAnnotationTypePtr)(&v)
}

func (*imageAnnotationTypePtr) ElementType() reflect.Type {
	return imageAnnotationTypePtrType
}

func (in *imageAnnotationTypePtr) ToImageAnnotationTypePtrOutput() ImageAnnotationTypePtrOutput {
	return pulumi.ToOutput(in).(ImageAnnotationTypePtrOutput)
}

func (in *imageAnnotationTypePtr) ToImageAnnotationTypePtrOutputWithContext(ctx context.Context) ImageAnnotationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ImageAnnotationTypePtrOutput)
}

// [Required] Specifies the type of job. This field should always be set to "Labeling".
type JobType string

const (
	JobTypeCommand  = JobType("Command")
	JobTypeSweep    = JobType("Sweep")
	JobTypeLabeling = JobType("Labeling")
)

func (JobType) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (e JobType) ToJobTypeOutput() JobTypeOutput {
	return pulumi.ToOutput(e).(JobTypeOutput)
}

func (e JobType) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JobTypeOutput)
}

func (e JobType) ToJobTypePtrOutput() JobTypePtrOutput {
	return e.ToJobTypePtrOutputWithContext(context.Background())
}

func (e JobType) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return JobType(e).ToJobTypeOutputWithContext(ctx).ToJobTypePtrOutputWithContext(ctx)
}

func (e JobType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JobType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JobTypeOutput struct{ *pulumi.OutputState }

func (JobTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobType)(nil)).Elem()
}

func (o JobTypeOutput) ToJobTypeOutput() JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypeOutputWithContext(ctx context.Context) JobTypeOutput {
	return o
}

func (o JobTypeOutput) ToJobTypePtrOutput() JobTypePtrOutput {
	return o.ToJobTypePtrOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobType) *JobType {
		return &v
	}).(JobTypePtrOutput)
}

func (o JobTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JobType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JobTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JobTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JobType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JobTypePtrOutput struct{ *pulumi.OutputState }

func (JobTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobType)(nil)).Elem()
}

func (o JobTypePtrOutput) ToJobTypePtrOutput() JobTypePtrOutput {
	return o
}

func (o JobTypePtrOutput) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return o
}

func (o JobTypePtrOutput) Elem() JobTypeOutput {
	return o.ApplyT(func(v *JobType) JobType {
		if v != nil {
			return *v
		}
		var ret JobType
		return ret
	}).(JobTypeOutput)
}

func (o JobTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JobTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JobType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JobTypeInput is an input type that accepts values of the JobType enum
// A concrete instance of `JobTypeInput` can be one of the following:
//
//	JobTypeCommand
//	JobTypeSweep
//	JobTypeLabeling
type JobTypeInput interface {
	pulumi.Input

	ToJobTypeOutput() JobTypeOutput
	ToJobTypeOutputWithContext(context.Context) JobTypeOutput
}

var jobTypePtrType = reflect.TypeOf((**JobType)(nil)).Elem()

type JobTypePtrInput interface {
	pulumi.Input

	ToJobTypePtrOutput() JobTypePtrOutput
	ToJobTypePtrOutputWithContext(context.Context) JobTypePtrOutput
}

type jobTypePtr string

func JobTypePtr(v string) JobTypePtrInput {
	return (*jobTypePtr)(&v)
}

func (*jobTypePtr) ElementType() reflect.Type {
	return jobTypePtrType
}

func (in *jobTypePtr) ToJobTypePtrOutput() JobTypePtrOutput {
	return pulumi.ToOutput(in).(JobTypePtrOutput)
}

func (in *jobTypePtr) ToJobTypePtrOutputWithContext(ctx context.Context) JobTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JobTypePtrOutput)
}

// [Required] Media type of the job.
type MediaType string

const (
	MediaTypeImage = MediaType("Image")
	MediaTypeText  = MediaType("Text")
)

// The OS type the Environment.
type OperatingSystemType string

const (
	OperatingSystemTypeLinux   = OperatingSystemType("Linux")
	OperatingSystemTypeWindows = OperatingSystemType("Windows")
)

func (OperatingSystemType) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (e OperatingSystemType) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return pulumi.ToOutput(e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OperatingSystemTypeOutput)
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return e.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return OperatingSystemType(e).ToOperatingSystemTypeOutputWithContext(ctx).ToOperatingSystemTypePtrOutputWithContext(ctx)
}

func (e OperatingSystemType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OperatingSystemType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OperatingSystemType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OperatingSystemTypeOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutput() OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypeOutputWithContext(ctx context.Context) OperatingSystemTypeOutput {
	return o
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o.ToOperatingSystemTypePtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatingSystemType) *OperatingSystemType {
		return &v
	}).(OperatingSystemTypePtrOutput)
}

func (o OperatingSystemTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OperatingSystemTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OperatingSystemType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OperatingSystemTypePtrOutput struct{ *pulumi.OutputState }

func (OperatingSystemTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatingSystemType)(nil)).Elem()
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return o
}

func (o OperatingSystemTypePtrOutput) Elem() OperatingSystemTypeOutput {
	return o.ApplyT(func(v *OperatingSystemType) OperatingSystemType {
		if v != nil {
			return *v
		}
		var ret OperatingSystemType
		return ret
	}).(OperatingSystemTypeOutput)
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OperatingSystemTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OperatingSystemType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OperatingSystemTypeInput is an input type that accepts values of the OperatingSystemType enum
// A concrete instance of `OperatingSystemTypeInput` can be one of the following:
//
//	OperatingSystemTypeLinux
//	OperatingSystemTypeWindows
type OperatingSystemTypeInput interface {
	pulumi.Input

	ToOperatingSystemTypeOutput() OperatingSystemTypeOutput
	ToOperatingSystemTypeOutputWithContext(context.Context) OperatingSystemTypeOutput
}

var operatingSystemTypePtrType = reflect.TypeOf((**OperatingSystemType)(nil)).Elem()

type OperatingSystemTypePtrInput interface {
	pulumi.Input

	ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput
	ToOperatingSystemTypePtrOutputWithContext(context.Context) OperatingSystemTypePtrOutput
}

type operatingSystemTypePtr string

func OperatingSystemTypePtr(v string) OperatingSystemTypePtrInput {
	return (*operatingSystemTypePtr)(&v)
}

func (*operatingSystemTypePtr) ElementType() reflect.Type {
	return operatingSystemTypePtrType
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutput() OperatingSystemTypePtrOutput {
	return pulumi.ToOutput(in).(OperatingSystemTypePtrOutput)
}

func (in *operatingSystemTypePtr) ToOperatingSystemTypePtrOutputWithContext(ctx context.Context) OperatingSystemTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OperatingSystemTypePtrOutput)
}

// Type of the linked service.
type OriginType string

const (
	OriginTypeSynapse = OriginType("Synapse")
)

func (OriginType) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginType)(nil)).Elem()
}

func (e OriginType) ToOriginTypeOutput() OriginTypeOutput {
	return pulumi.ToOutput(e).(OriginTypeOutput)
}

func (e OriginType) ToOriginTypeOutputWithContext(ctx context.Context) OriginTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(OriginTypeOutput)
}

func (e OriginType) ToOriginTypePtrOutput() OriginTypePtrOutput {
	return e.ToOriginTypePtrOutputWithContext(context.Background())
}

func (e OriginType) ToOriginTypePtrOutputWithContext(ctx context.Context) OriginTypePtrOutput {
	return OriginType(e).ToOriginTypeOutputWithContext(ctx).ToOriginTypePtrOutputWithContext(ctx)
}

func (e OriginType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e OriginType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e OriginType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e OriginType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type OriginTypeOutput struct{ *pulumi.OutputState }

func (OriginTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginType)(nil)).Elem()
}

func (o OriginTypeOutput) ToOriginTypeOutput() OriginTypeOutput {
	return o
}

func (o OriginTypeOutput) ToOriginTypeOutputWithContext(ctx context.Context) OriginTypeOutput {
	return o
}

func (o OriginTypeOutput) ToOriginTypePtrOutput() OriginTypePtrOutput {
	return o.ToOriginTypePtrOutputWithContext(context.Background())
}

func (o OriginTypeOutput) ToOriginTypePtrOutputWithContext(ctx context.Context) OriginTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginType) *OriginType {
		return &v
	}).(OriginTypePtrOutput)
}

func (o OriginTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o OriginTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OriginType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o OriginTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OriginTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e OriginType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type OriginTypePtrOutput struct{ *pulumi.OutputState }

func (OriginTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginType)(nil)).Elem()
}

func (o OriginTypePtrOutput) ToOriginTypePtrOutput() OriginTypePtrOutput {
	return o
}

func (o OriginTypePtrOutput) ToOriginTypePtrOutputWithContext(ctx context.Context) OriginTypePtrOutput {
	return o
}

func (o OriginTypePtrOutput) Elem() OriginTypeOutput {
	return o.ApplyT(func(v *OriginType) OriginType {
		if v != nil {
			return *v
		}
		var ret OriginType
		return ret
	}).(OriginTypeOutput)
}

func (o OriginTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o OriginTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *OriginType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// OriginTypeInput is an input type that accepts values of the OriginType enum
// A concrete instance of `OriginTypeInput` can be one of the following:
//
//	OriginTypeSynapse
type OriginTypeInput interface {
	pulumi.Input

	ToOriginTypeOutput() OriginTypeOutput
	ToOriginTypeOutputWithContext(context.Context) OriginTypeOutput
}

var originTypePtrType = reflect.TypeOf((**OriginType)(nil)).Elem()

type OriginTypePtrInput interface {
	pulumi.Input

	ToOriginTypePtrOutput() OriginTypePtrOutput
	ToOriginTypePtrOutputWithContext(context.Context) OriginTypePtrOutput
}

type originTypePtr string

func OriginTypePtr(v string) OriginTypePtrInput {
	return (*originTypePtr)(&v)
}

func (*originTypePtr) ElementType() reflect.Type {
	return originTypePtrType
}

func (in *originTypePtr) ToOriginTypePtrOutput() OriginTypePtrOutput {
	return pulumi.ToOutput(in).(OriginTypePtrOutput)
}

func (in *originTypePtr) ToOriginTypePtrOutputWithContext(ctx context.Context) OriginTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(OriginTypePtrOutput)
}

// [Required] Specifies the type of asset reference.
type ReferenceType string

const (
	ReferenceTypeId         = ReferenceType("Id")
	ReferenceTypeDataPath   = ReferenceType("DataPath")
	ReferenceTypeOutputPath = ReferenceType("OutputPath")
)

// Defines values for a ResourceIdentity's type.
type ResourceIdentityAssignment string

const (
	ResourceIdentityAssignmentSystemAssigned               = ResourceIdentityAssignment("SystemAssigned")
	ResourceIdentityAssignmentUserAssigned                 = ResourceIdentityAssignment("UserAssigned")
	ResourceIdentityAssignment_SystemAssigned_UserAssigned = ResourceIdentityAssignment("SystemAssigned,UserAssigned")
	ResourceIdentityAssignmentNone                         = ResourceIdentityAssignment("None")
)

func (ResourceIdentityAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityAssignment)(nil)).Elem()
}

func (e ResourceIdentityAssignment) ToResourceIdentityAssignmentOutput() ResourceIdentityAssignmentOutput {
	return pulumi.ToOutput(e).(ResourceIdentityAssignmentOutput)
}

func (e ResourceIdentityAssignment) ToResourceIdentityAssignmentOutputWithContext(ctx context.Context) ResourceIdentityAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceIdentityAssignmentOutput)
}

func (e ResourceIdentityAssignment) ToResourceIdentityAssignmentPtrOutput() ResourceIdentityAssignmentPtrOutput {
	return e.ToResourceIdentityAssignmentPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityAssignment) ToResourceIdentityAssignmentPtrOutputWithContext(ctx context.Context) ResourceIdentityAssignmentPtrOutput {
	return ResourceIdentityAssignment(e).ToResourceIdentityAssignmentOutputWithContext(ctx).ToResourceIdentityAssignmentPtrOutputWithContext(ctx)
}

func (e ResourceIdentityAssignment) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityAssignment) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceIdentityAssignment) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceIdentityAssignment) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceIdentityAssignmentOutput struct{ *pulumi.OutputState }

func (ResourceIdentityAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceIdentityAssignment)(nil)).Elem()
}

func (o ResourceIdentityAssignmentOutput) ToResourceIdentityAssignmentOutput() ResourceIdentityAssignmentOutput {
	return o
}

func (o ResourceIdentityAssignmentOutput) ToResourceIdentityAssignmentOutputWithContext(ctx context.Context) ResourceIdentityAssignmentOutput {
	return o
}

func (o ResourceIdentityAssignmentOutput) ToResourceIdentityAssignmentPtrOutput() ResourceIdentityAssignmentPtrOutput {
	return o.ToResourceIdentityAssignmentPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityAssignmentOutput) ToResourceIdentityAssignmentPtrOutputWithContext(ctx context.Context) ResourceIdentityAssignmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceIdentityAssignment) *ResourceIdentityAssignment {
		return &v
	}).(ResourceIdentityAssignmentPtrOutput)
}

func (o ResourceIdentityAssignmentOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceIdentityAssignmentOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityAssignment) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceIdentityAssignmentOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityAssignmentOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceIdentityAssignment) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceIdentityAssignmentPtrOutput struct{ *pulumi.OutputState }

func (ResourceIdentityAssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceIdentityAssignment)(nil)).Elem()
}

func (o ResourceIdentityAssignmentPtrOutput) ToResourceIdentityAssignmentPtrOutput() ResourceIdentityAssignmentPtrOutput {
	return o
}

func (o ResourceIdentityAssignmentPtrOutput) ToResourceIdentityAssignmentPtrOutputWithContext(ctx context.Context) ResourceIdentityAssignmentPtrOutput {
	return o
}

func (o ResourceIdentityAssignmentPtrOutput) Elem() ResourceIdentityAssignmentOutput {
	return o.ApplyT(func(v *ResourceIdentityAssignment) ResourceIdentityAssignment {
		if v != nil {
			return *v
		}
		var ret ResourceIdentityAssignment
		return ret
	}).(ResourceIdentityAssignmentOutput)
}

func (o ResourceIdentityAssignmentPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceIdentityAssignmentPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceIdentityAssignment) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceIdentityAssignmentInput is an input type that accepts values of the ResourceIdentityAssignment enum
// A concrete instance of `ResourceIdentityAssignmentInput` can be one of the following:
//
//	ResourceIdentityAssignmentSystemAssigned
//	ResourceIdentityAssignmentUserAssigned
//	ResourceIdentityAssignment_SystemAssigned_UserAssigned
//	ResourceIdentityAssignmentNone
type ResourceIdentityAssignmentInput interface {
	pulumi.Input

	ToResourceIdentityAssignmentOutput() ResourceIdentityAssignmentOutput
	ToResourceIdentityAssignmentOutputWithContext(context.Context) ResourceIdentityAssignmentOutput
}

var resourceIdentityAssignmentPtrType = reflect.TypeOf((**ResourceIdentityAssignment)(nil)).Elem()

type ResourceIdentityAssignmentPtrInput interface {
	pulumi.Input

	ToResourceIdentityAssignmentPtrOutput() ResourceIdentityAssignmentPtrOutput
	ToResourceIdentityAssignmentPtrOutputWithContext(context.Context) ResourceIdentityAssignmentPtrOutput
}

type resourceIdentityAssignmentPtr string

func ResourceIdentityAssignmentPtr(v string) ResourceIdentityAssignmentPtrInput {
	return (*resourceIdentityAssignmentPtr)(&v)
}

func (*resourceIdentityAssignmentPtr) ElementType() reflect.Type {
	return resourceIdentityAssignmentPtrType
}

func (in *resourceIdentityAssignmentPtr) ToResourceIdentityAssignmentPtrOutput() ResourceIdentityAssignmentPtrOutput {
	return pulumi.ToOutput(in).(ResourceIdentityAssignmentPtrOutput)
}

func (in *resourceIdentityAssignmentPtr) ToResourceIdentityAssignmentPtrOutputWithContext(ctx context.Context) ResourceIdentityAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceIdentityAssignmentPtrOutput)
}

// [Required] Type of the hyperparameter sampling algorithms
type SamplingAlgorithm string

const (
	SamplingAlgorithmGrid     = SamplingAlgorithm("Grid")
	SamplingAlgorithmRandom   = SamplingAlgorithm("Random")
	SamplingAlgorithmBayesian = SamplingAlgorithm("Bayesian")
)

func (SamplingAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingAlgorithm)(nil)).Elem()
}

func (e SamplingAlgorithm) ToSamplingAlgorithmOutput() SamplingAlgorithmOutput {
	return pulumi.ToOutput(e).(SamplingAlgorithmOutput)
}

func (e SamplingAlgorithm) ToSamplingAlgorithmOutputWithContext(ctx context.Context) SamplingAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(SamplingAlgorithmOutput)
}

func (e SamplingAlgorithm) ToSamplingAlgorithmPtrOutput() SamplingAlgorithmPtrOutput {
	return e.ToSamplingAlgorithmPtrOutputWithContext(context.Background())
}

func (e SamplingAlgorithm) ToSamplingAlgorithmPtrOutputWithContext(ctx context.Context) SamplingAlgorithmPtrOutput {
	return SamplingAlgorithm(e).ToSamplingAlgorithmOutputWithContext(ctx).ToSamplingAlgorithmPtrOutputWithContext(ctx)
}

func (e SamplingAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SamplingAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SamplingAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SamplingAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type SamplingAlgorithmOutput struct{ *pulumi.OutputState }

func (SamplingAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamplingAlgorithm)(nil)).Elem()
}

func (o SamplingAlgorithmOutput) ToSamplingAlgorithmOutput() SamplingAlgorithmOutput {
	return o
}

func (o SamplingAlgorithmOutput) ToSamplingAlgorithmOutputWithContext(ctx context.Context) SamplingAlgorithmOutput {
	return o
}

func (o SamplingAlgorithmOutput) ToSamplingAlgorithmPtrOutput() SamplingAlgorithmPtrOutput {
	return o.ToSamplingAlgorithmPtrOutputWithContext(context.Background())
}

func (o SamplingAlgorithmOutput) ToSamplingAlgorithmPtrOutputWithContext(ctx context.Context) SamplingAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SamplingAlgorithm) *SamplingAlgorithm {
		return &v
	}).(SamplingAlgorithmPtrOutput)
}

func (o SamplingAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o SamplingAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SamplingAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o SamplingAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SamplingAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e SamplingAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type SamplingAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (SamplingAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamplingAlgorithm)(nil)).Elem()
}

func (o SamplingAlgorithmPtrOutput) ToSamplingAlgorithmPtrOutput() SamplingAlgorithmPtrOutput {
	return o
}

func (o SamplingAlgorithmPtrOutput) ToSamplingAlgorithmPtrOutputWithContext(ctx context.Context) SamplingAlgorithmPtrOutput {
	return o
}

func (o SamplingAlgorithmPtrOutput) Elem() SamplingAlgorithmOutput {
	return o.ApplyT(func(v *SamplingAlgorithm) SamplingAlgorithm {
		if v != nil {
			return *v
		}
		var ret SamplingAlgorithm
		return ret
	}).(SamplingAlgorithmOutput)
}

func (o SamplingAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o SamplingAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *SamplingAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// SamplingAlgorithmInput is an input type that accepts values of the SamplingAlgorithm enum
// A concrete instance of `SamplingAlgorithmInput` can be one of the following:
//
//	SamplingAlgorithmGrid
//	SamplingAlgorithmRandom
//	SamplingAlgorithmBayesian
type SamplingAlgorithmInput interface {
	pulumi.Input

	ToSamplingAlgorithmOutput() SamplingAlgorithmOutput
	ToSamplingAlgorithmOutputWithContext(context.Context) SamplingAlgorithmOutput
}

var samplingAlgorithmPtrType = reflect.TypeOf((**SamplingAlgorithm)(nil)).Elem()

type SamplingAlgorithmPtrInput interface {
	pulumi.Input

	ToSamplingAlgorithmPtrOutput() SamplingAlgorithmPtrOutput
	ToSamplingAlgorithmPtrOutputWithContext(context.Context) SamplingAlgorithmPtrOutput
}

type samplingAlgorithmPtr string

func SamplingAlgorithmPtr(v string) SamplingAlgorithmPtrInput {
	return (*samplingAlgorithmPtr)(&v)
}

func (*samplingAlgorithmPtr) ElementType() reflect.Type {
	return samplingAlgorithmPtrType
}

func (in *samplingAlgorithmPtr) ToSamplingAlgorithmPtrOutput() SamplingAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(SamplingAlgorithmPtrOutput)
}

func (in *samplingAlgorithmPtr) ToSamplingAlgorithmPtrOutputWithContext(ctx context.Context) SamplingAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(SamplingAlgorithmPtrOutput)
}

// [Required] Type of deployment scaling algorithm
type ScaleType string

const (
	ScaleTypeAuto   = ScaleType("Auto")
	ScaleTypeManual = ScaleType("Manual")
)

// [Required] Credential type used to authentication with storage.
type SecretsType string

const (
	SecretsTypeAccountKey       = SecretsType("AccountKey")
	SecretsTypeCertificate      = SecretsType("Certificate")
	SecretsTypeNone             = SecretsType("None")
	SecretsTypeSas              = SecretsType("Sas")
	SecretsTypeServicePrincipal = SecretsType("ServicePrincipal")
	SecretsTypeSqlAdmin         = SecretsType("SqlAdmin")
)

// Annotation type of text labeling job.
type TextAnnotationType string

const (
	TextAnnotationTypeClassification = TextAnnotationType("Classification")
)

func (TextAnnotationType) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAnnotationType)(nil)).Elem()
}

func (e TextAnnotationType) ToTextAnnotationTypeOutput() TextAnnotationTypeOutput {
	return pulumi.ToOutput(e).(TextAnnotationTypeOutput)
}

func (e TextAnnotationType) ToTextAnnotationTypeOutputWithContext(ctx context.Context) TextAnnotationTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(TextAnnotationTypeOutput)
}

func (e TextAnnotationType) ToTextAnnotationTypePtrOutput() TextAnnotationTypePtrOutput {
	return e.ToTextAnnotationTypePtrOutputWithContext(context.Background())
}

func (e TextAnnotationType) ToTextAnnotationTypePtrOutputWithContext(ctx context.Context) TextAnnotationTypePtrOutput {
	return TextAnnotationType(e).ToTextAnnotationTypeOutputWithContext(ctx).ToTextAnnotationTypePtrOutputWithContext(ctx)
}

func (e TextAnnotationType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TextAnnotationType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TextAnnotationType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TextAnnotationType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type TextAnnotationTypeOutput struct{ *pulumi.OutputState }

func (TextAnnotationTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAnnotationType)(nil)).Elem()
}

func (o TextAnnotationTypeOutput) ToTextAnnotationTypeOutput() TextAnnotationTypeOutput {
	return o
}

func (o TextAnnotationTypeOutput) ToTextAnnotationTypeOutputWithContext(ctx context.Context) TextAnnotationTypeOutput {
	return o
}

func (o TextAnnotationTypeOutput) ToTextAnnotationTypePtrOutput() TextAnnotationTypePtrOutput {
	return o.ToTextAnnotationTypePtrOutputWithContext(context.Background())
}

func (o TextAnnotationTypeOutput) ToTextAnnotationTypePtrOutputWithContext(ctx context.Context) TextAnnotationTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextAnnotationType) *TextAnnotationType {
		return &v
	}).(TextAnnotationTypePtrOutput)
}

func (o TextAnnotationTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o TextAnnotationTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TextAnnotationType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o TextAnnotationTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TextAnnotationTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e TextAnnotationType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type TextAnnotationTypePtrOutput struct{ *pulumi.OutputState }

func (TextAnnotationTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextAnnotationType)(nil)).Elem()
}

func (o TextAnnotationTypePtrOutput) ToTextAnnotationTypePtrOutput() TextAnnotationTypePtrOutput {
	return o
}

func (o TextAnnotationTypePtrOutput) ToTextAnnotationTypePtrOutputWithContext(ctx context.Context) TextAnnotationTypePtrOutput {
	return o
}

func (o TextAnnotationTypePtrOutput) Elem() TextAnnotationTypeOutput {
	return o.ApplyT(func(v *TextAnnotationType) TextAnnotationType {
		if v != nil {
			return *v
		}
		var ret TextAnnotationType
		return ret
	}).(TextAnnotationTypeOutput)
}

func (o TextAnnotationTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o TextAnnotationTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *TextAnnotationType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// TextAnnotationTypeInput is an input type that accepts values of the TextAnnotationType enum
// A concrete instance of `TextAnnotationTypeInput` can be one of the following:
//
//	TextAnnotationTypeClassification
type TextAnnotationTypeInput interface {
	pulumi.Input

	ToTextAnnotationTypeOutput() TextAnnotationTypeOutput
	ToTextAnnotationTypeOutputWithContext(context.Context) TextAnnotationTypeOutput
}

var textAnnotationTypePtrType = reflect.TypeOf((**TextAnnotationType)(nil)).Elem()

type TextAnnotationTypePtrInput interface {
	pulumi.Input

	ToTextAnnotationTypePtrOutput() TextAnnotationTypePtrOutput
	ToTextAnnotationTypePtrOutputWithContext(context.Context) TextAnnotationTypePtrOutput
}

type textAnnotationTypePtr string

func TextAnnotationTypePtr(v string) TextAnnotationTypePtrInput {
	return (*textAnnotationTypePtr)(&v)
}

func (*textAnnotationTypePtr) ElementType() reflect.Type {
	return textAnnotationTypePtrType
}

func (in *textAnnotationTypePtr) ToTextAnnotationTypePtrOutput() TextAnnotationTypePtrOutput {
	return pulumi.ToOutput(in).(TextAnnotationTypePtrOutput)
}

func (in *textAnnotationTypePtr) ToTextAnnotationTypePtrOutputWithContext(ctx context.Context) TextAnnotationTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TextAnnotationTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(BatchLoggingLevelOutput{})
	pulumi.RegisterOutputType(BatchLoggingLevelPtrOutput{})
	pulumi.RegisterOutputType(BatchOutputActionOutput{})
	pulumi.RegisterOutputType(BatchOutputActionPtrOutput{})
	pulumi.RegisterOutputType(DataBindingModeOutput{})
	pulumi.RegisterOutputType(DataBindingModePtrOutput{})
	pulumi.RegisterOutputType(DatasetTypeOutput{})
	pulumi.RegisterOutputType(DatasetTypePtrOutput{})
	pulumi.RegisterOutputType(EndpointAuthModeOutput{})
	pulumi.RegisterOutputType(EndpointAuthModePtrOutput{})
	pulumi.RegisterOutputType(GoalOutput{})
	pulumi.RegisterOutputType(GoalPtrOutput{})
	pulumi.RegisterOutputType(ImageAnnotationTypeOutput{})
	pulumi.RegisterOutputType(ImageAnnotationTypePtrOutput{})
	pulumi.RegisterOutputType(JobTypeOutput{})
	pulumi.RegisterOutputType(JobTypePtrOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypeOutput{})
	pulumi.RegisterOutputType(OperatingSystemTypePtrOutput{})
	pulumi.RegisterOutputType(OriginTypeOutput{})
	pulumi.RegisterOutputType(OriginTypePtrOutput{})
	pulumi.RegisterOutputType(ResourceIdentityAssignmentOutput{})
	pulumi.RegisterOutputType(ResourceIdentityAssignmentPtrOutput{})
	pulumi.RegisterOutputType(SamplingAlgorithmOutput{})
	pulumi.RegisterOutputType(SamplingAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(TextAnnotationTypeOutput{})
	pulumi.RegisterOutputType(TextAnnotationTypePtrOutput{})
}
