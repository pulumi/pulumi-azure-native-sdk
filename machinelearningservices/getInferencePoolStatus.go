// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearningservices

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Azure REST API version: 2023-08-01-preview.
//
// Other available API versions: 2024-01-01-preview, 2024-04-01-preview.
func GetInferencePoolStatus(ctx *pulumi.Context, args *GetInferencePoolStatusArgs, opts ...pulumi.InvokeOption) (*GetInferencePoolStatusResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv GetInferencePoolStatusResult
	err := ctx.Invoke("azure-native:machinelearningservices:getInferencePoolStatus", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type GetInferencePoolStatusArgs struct {
	// Name of InferencePool
	InferencePoolName string `pulumi:"inferencePoolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

type GetInferencePoolStatusResult struct {
	// Gets or sets the actual number of instances in the pool.
	ActualCapacity *int `pulumi:"actualCapacity"`
	// Gets or sets the actual number of groups in the pool.
	GroupCount *int `pulumi:"groupCount"`
	// Gets or sets the requested number of instances for the pool.
	RequestedCapacity *int `pulumi:"requestedCapacity"`
	// Gets or sets the number of instances in the pool reserved by the system.
	ReservedCapacity *int `pulumi:"reservedCapacity"`
}

// Defaults sets the appropriate defaults for GetInferencePoolStatusResult
func (val *GetInferencePoolStatusResult) Defaults() *GetInferencePoolStatusResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ActualCapacity == nil {
		actualCapacity_ := 0
		tmp.ActualCapacity = &actualCapacity_
	}
	if tmp.GroupCount == nil {
		groupCount_ := 0
		tmp.GroupCount = &groupCount_
	}
	if tmp.RequestedCapacity == nil {
		requestedCapacity_ := 0
		tmp.RequestedCapacity = &requestedCapacity_
	}
	if tmp.ReservedCapacity == nil {
		reservedCapacity_ := 0
		tmp.ReservedCapacity = &reservedCapacity_
	}
	return &tmp
}

func GetInferencePoolStatusOutput(ctx *pulumi.Context, args GetInferencePoolStatusOutputArgs, opts ...pulumi.InvokeOption) GetInferencePoolStatusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInferencePoolStatusResult, error) {
			args := v.(GetInferencePoolStatusArgs)
			r, err := GetInferencePoolStatus(ctx, &args, opts...)
			var s GetInferencePoolStatusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInferencePoolStatusResultOutput)
}

type GetInferencePoolStatusOutputArgs struct {
	// Name of InferencePool
	InferencePoolName pulumi.StringInput `pulumi:"inferencePoolName"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringInput `pulumi:"workspaceName"`
}

func (GetInferencePoolStatusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInferencePoolStatusArgs)(nil)).Elem()
}

type GetInferencePoolStatusResultOutput struct{ *pulumi.OutputState }

func (GetInferencePoolStatusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInferencePoolStatusResult)(nil)).Elem()
}

func (o GetInferencePoolStatusResultOutput) ToGetInferencePoolStatusResultOutput() GetInferencePoolStatusResultOutput {
	return o
}

func (o GetInferencePoolStatusResultOutput) ToGetInferencePoolStatusResultOutputWithContext(ctx context.Context) GetInferencePoolStatusResultOutput {
	return o
}

// Gets or sets the actual number of instances in the pool.
func (o GetInferencePoolStatusResultOutput) ActualCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInferencePoolStatusResult) *int { return v.ActualCapacity }).(pulumi.IntPtrOutput)
}

// Gets or sets the actual number of groups in the pool.
func (o GetInferencePoolStatusResultOutput) GroupCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInferencePoolStatusResult) *int { return v.GroupCount }).(pulumi.IntPtrOutput)
}

// Gets or sets the requested number of instances for the pool.
func (o GetInferencePoolStatusResultOutput) RequestedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInferencePoolStatusResult) *int { return v.RequestedCapacity }).(pulumi.IntPtrOutput)
}

// Gets or sets the number of instances in the pool reserved by the system.
func (o GetInferencePoolStatusResultOutput) ReservedCapacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetInferencePoolStatusResult) *int { return v.ReservedCapacity }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInferencePoolStatusResultOutput{})
}
