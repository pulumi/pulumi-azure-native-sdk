// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20210216preview

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Fabric model.
type Fabric struct {
	pulumi.CustomResourceState

	// Gets or sets the location of the fabric.
	Location pulumi.StringOutput `pulumi:"location"`
	// Gets or sets the name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Fabric model properties.
	Properties FabricModelPropertiesResponseOutput `pulumi:"properties"`
	SystemData FabricModelResponseSystemDataOutput `pulumi:"systemData"`
	// Gets or sets the resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Gets or sets the type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFabric registers a new resource with the given unique name, arguments, and options.
func NewFabric(ctx *pulumi.Context,
	name string, args *FabricArgs, opts ...pulumi.ResourceOption) (*Fabric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azure-native:datareplication:Fabric"),
		},
	})
	opts = append(opts, aliases)
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Fabric
	err := ctx.RegisterResource("azure-native:datareplication/v20210216preview:Fabric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFabric gets an existing Fabric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFabric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FabricState, opts ...pulumi.ResourceOption) (*Fabric, error) {
	var resource Fabric
	err := ctx.ReadResource("azure-native:datareplication/v20210216preview:Fabric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fabric resources.
type fabricState struct {
}

type FabricState struct {
}

func (FabricState) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricState)(nil)).Elem()
}

type fabricArgs struct {
	// The fabric name.
	FabricName *string `pulumi:"fabricName"`
	// Gets or sets the location of the fabric.
	Location *string `pulumi:"location"`
	// Fabric model properties.
	Properties FabricModelProperties `pulumi:"properties"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets the resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Fabric resource.
type FabricArgs struct {
	// The fabric name.
	FabricName pulumi.StringPtrInput
	// Gets or sets the location of the fabric.
	Location pulumi.StringPtrInput
	// Fabric model properties.
	Properties FabricModelPropertiesInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Gets or sets the resource tags.
	Tags pulumi.StringMapInput
}

func (FabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricArgs)(nil)).Elem()
}

type FabricInput interface {
	pulumi.Input

	ToFabricOutput() FabricOutput
	ToFabricOutputWithContext(ctx context.Context) FabricOutput
}

func (*Fabric) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil)).Elem()
}

func (i *Fabric) ToFabricOutput() FabricOutput {
	return i.ToFabricOutputWithContext(context.Background())
}

func (i *Fabric) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOutput)
}

func (i *Fabric) ToOutput(ctx context.Context) pulumix.Output[*Fabric] {
	return pulumix.Output[*Fabric]{
		OutputState: i.ToFabricOutputWithContext(ctx).OutputState,
	}
}

type FabricOutput struct{ *pulumi.OutputState }

func (FabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil)).Elem()
}

func (o FabricOutput) ToFabricOutput() FabricOutput {
	return o
}

func (o FabricOutput) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return o
}

func (o FabricOutput) ToOutput(ctx context.Context) pulumix.Output[*Fabric] {
	return pulumix.Output[*Fabric]{
		OutputState: o.OutputState,
	}
}

// Gets or sets the location of the fabric.
func (o FabricOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Fabric) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Gets or sets the name of the resource.
func (o FabricOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Fabric) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Fabric model properties.
func (o FabricOutput) Properties() FabricModelPropertiesResponseOutput {
	return o.ApplyT(func(v *Fabric) FabricModelPropertiesResponseOutput { return v.Properties }).(FabricModelPropertiesResponseOutput)
}

func (o FabricOutput) SystemData() FabricModelResponseSystemDataOutput {
	return o.ApplyT(func(v *Fabric) FabricModelResponseSystemDataOutput { return v.SystemData }).(FabricModelResponseSystemDataOutput)
}

// Gets or sets the resource tags.
func (o FabricOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Fabric) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Gets or sets the type of the resource.
func (o FabricOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Fabric) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FabricOutput{})
}
