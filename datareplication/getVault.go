// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package datareplication

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure-native-sdk/v2/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets the details of the vault.
// Azure REST API version: 2021-02-16-preview.
func LookupVault(ctx *pulumi.Context, args *LookupVaultArgs, opts ...pulumi.InvokeOption) (*LookupVaultResult, error) {
	opts = utilities.PkgInvokeDefaultOpts(opts)
	var rv LookupVaultResult
	err := ctx.Invoke("azure-native:datareplication:getVault", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupVaultArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The vault name.
	VaultName string `pulumi:"vaultName"`
}

// Vault model.
type LookupVaultResult struct {
	// Gets or sets the Id of the resource.
	Id string `pulumi:"id"`
	// Gets or sets the location of the vault.
	Location string `pulumi:"location"`
	// Gets or sets the name of the resource.
	Name string `pulumi:"name"`
	// Vault properties.
	Properties VaultModelPropertiesResponse `pulumi:"properties"`
	SystemData VaultModelResponseSystemData `pulumi:"systemData"`
	// Gets or sets the resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Gets or sets the type of the resource.
	Type string `pulumi:"type"`
}

func LookupVaultOutput(ctx *pulumi.Context, args LookupVaultOutputArgs, opts ...pulumi.InvokeOption) LookupVaultResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVaultResult, error) {
			args := v.(LookupVaultArgs)
			r, err := LookupVault(ctx, &args, opts...)
			var s LookupVaultResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVaultResultOutput)
}

type LookupVaultOutputArgs struct {
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
	// The vault name.
	VaultName pulumi.StringInput `pulumi:"vaultName"`
}

func (LookupVaultOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVaultArgs)(nil)).Elem()
}

// Vault model.
type LookupVaultResultOutput struct{ *pulumi.OutputState }

func (LookupVaultResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVaultResult)(nil)).Elem()
}

func (o LookupVaultResultOutput) ToLookupVaultResultOutput() LookupVaultResultOutput {
	return o
}

func (o LookupVaultResultOutput) ToLookupVaultResultOutputWithContext(ctx context.Context) LookupVaultResultOutput {
	return o
}

// Gets or sets the Id of the resource.
func (o LookupVaultResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultResult) string { return v.Id }).(pulumi.StringOutput)
}

// Gets or sets the location of the vault.
func (o LookupVaultResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultResult) string { return v.Location }).(pulumi.StringOutput)
}

// Gets or sets the name of the resource.
func (o LookupVaultResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultResult) string { return v.Name }).(pulumi.StringOutput)
}

// Vault properties.
func (o LookupVaultResultOutput) Properties() VaultModelPropertiesResponseOutput {
	return o.ApplyT(func(v LookupVaultResult) VaultModelPropertiesResponse { return v.Properties }).(VaultModelPropertiesResponseOutput)
}

func (o LookupVaultResultOutput) SystemData() VaultModelResponseSystemDataOutput {
	return o.ApplyT(func(v LookupVaultResult) VaultModelResponseSystemData { return v.SystemData }).(VaultModelResponseSystemDataOutput)
}

// Gets or sets the resource tags.
func (o LookupVaultResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupVaultResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Gets or sets the type of the resource.
func (o LookupVaultResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVaultResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVaultResultOutput{})
}
