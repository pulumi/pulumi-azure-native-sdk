// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20250315preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Group type.
type GroupType string

const (
	GroupTypeEnforcedGroup   = GroupType("EnforcedGroup")
	GroupTypeAllocationGroup = GroupType("AllocationGroup")
)

func (GroupType) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupType)(nil)).Elem()
}

func (e GroupType) ToGroupTypeOutput() GroupTypeOutput {
	return pulumi.ToOutput(e).(GroupTypeOutput)
}

func (e GroupType) ToGroupTypeOutputWithContext(ctx context.Context) GroupTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GroupTypeOutput)
}

func (e GroupType) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return e.ToGroupTypePtrOutputWithContext(context.Background())
}

func (e GroupType) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return GroupType(e).ToGroupTypeOutputWithContext(ctx).ToGroupTypePtrOutputWithContext(ctx)
}

func (e GroupType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GroupType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GroupTypeOutput struct{ *pulumi.OutputState }

func (GroupTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupType)(nil)).Elem()
}

func (o GroupTypeOutput) ToGroupTypeOutput() GroupTypeOutput {
	return o
}

func (o GroupTypeOutput) ToGroupTypeOutputWithContext(ctx context.Context) GroupTypeOutput {
	return o
}

func (o GroupTypeOutput) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return o.ToGroupTypePtrOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupType) *GroupType {
		return &v
	}).(GroupTypePtrOutput)
}

func (o GroupTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GroupTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GroupTypePtrOutput struct{ *pulumi.OutputState }

func (GroupTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupType)(nil)).Elem()
}

func (o GroupTypePtrOutput) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return o
}

func (o GroupTypePtrOutput) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return o
}

func (o GroupTypePtrOutput) Elem() GroupTypeOutput {
	return o.ApplyT(func(v *GroupType) GroupType {
		if v != nil {
			return *v
		}
		var ret GroupType
		return ret
	}).(GroupTypeOutput)
}

func (o GroupTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GroupType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GroupTypeInput is an input type that accepts values of the GroupType enum
// A concrete instance of `GroupTypeInput` can be one of the following:
//
//	GroupTypeEnforcedGroup
//	GroupTypeAllocationGroup
type GroupTypeInput interface {
	pulumi.Input

	ToGroupTypeOutput() GroupTypeOutput
	ToGroupTypeOutputWithContext(context.Context) GroupTypeOutput
}

var groupTypePtrType = reflect.TypeOf((**GroupType)(nil)).Elem()

type GroupTypePtrInput interface {
	pulumi.Input

	ToGroupTypePtrOutput() GroupTypePtrOutput
	ToGroupTypePtrOutputWithContext(context.Context) GroupTypePtrOutput
}

type groupTypePtr string

func GroupTypePtr(v string) GroupTypePtrInput {
	return (*groupTypePtr)(&v)
}

func (*groupTypePtr) ElementType() reflect.Type {
	return groupTypePtrType
}

func (in *groupTypePtr) ToGroupTypePtrOutput() GroupTypePtrOutput {
	return pulumi.ToOutput(in).(GroupTypePtrOutput)
}

func (in *groupTypePtr) ToGroupTypePtrOutputWithContext(ctx context.Context) GroupTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GroupTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupTypeOutput{})
	pulumi.RegisterOutputType(GroupTypePtrOutput{})
}
