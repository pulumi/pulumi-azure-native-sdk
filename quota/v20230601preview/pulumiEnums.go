// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v20230601preview

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// GroupingId type. It is a required property. More types of groupIds can be supported in future. MGID is already in the URI, so it's not needed.'
type GroupingIdType string

const (
	GroupingIdTypeServiceTreeId = GroupingIdType("ServiceTreeId")
	GroupingIdTypeBillingId     = GroupingIdType("BillingId")
)

func (GroupingIdType) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingIdType)(nil)).Elem()
}

func (e GroupingIdType) ToGroupingIdTypeOutput() GroupingIdTypeOutput {
	return pulumi.ToOutput(e).(GroupingIdTypeOutput)
}

func (e GroupingIdType) ToGroupingIdTypeOutputWithContext(ctx context.Context) GroupingIdTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(GroupingIdTypeOutput)
}

func (e GroupingIdType) ToGroupingIdTypePtrOutput() GroupingIdTypePtrOutput {
	return e.ToGroupingIdTypePtrOutputWithContext(context.Background())
}

func (e GroupingIdType) ToGroupingIdTypePtrOutputWithContext(ctx context.Context) GroupingIdTypePtrOutput {
	return GroupingIdType(e).ToGroupingIdTypeOutputWithContext(ctx).ToGroupingIdTypePtrOutputWithContext(ctx)
}

func (e GroupingIdType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupingIdType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e GroupingIdType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e GroupingIdType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type GroupingIdTypeOutput struct{ *pulumi.OutputState }

func (GroupingIdTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupingIdType)(nil)).Elem()
}

func (o GroupingIdTypeOutput) ToGroupingIdTypeOutput() GroupingIdTypeOutput {
	return o
}

func (o GroupingIdTypeOutput) ToGroupingIdTypeOutputWithContext(ctx context.Context) GroupingIdTypeOutput {
	return o
}

func (o GroupingIdTypeOutput) ToGroupingIdTypePtrOutput() GroupingIdTypePtrOutput {
	return o.ToGroupingIdTypePtrOutputWithContext(context.Background())
}

func (o GroupingIdTypeOutput) ToGroupingIdTypePtrOutputWithContext(ctx context.Context) GroupingIdTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GroupingIdType) *GroupingIdType {
		return &v
	}).(GroupingIdTypePtrOutput)
}

func (o GroupingIdTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o GroupingIdTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupingIdType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o GroupingIdTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupingIdTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e GroupingIdType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type GroupingIdTypePtrOutput struct{ *pulumi.OutputState }

func (GroupingIdTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupingIdType)(nil)).Elem()
}

func (o GroupingIdTypePtrOutput) ToGroupingIdTypePtrOutput() GroupingIdTypePtrOutput {
	return o
}

func (o GroupingIdTypePtrOutput) ToGroupingIdTypePtrOutputWithContext(ctx context.Context) GroupingIdTypePtrOutput {
	return o
}

func (o GroupingIdTypePtrOutput) Elem() GroupingIdTypeOutput {
	return o.ApplyT(func(v *GroupingIdType) GroupingIdType {
		if v != nil {
			return *v
		}
		var ret GroupingIdType
		return ret
	}).(GroupingIdTypeOutput)
}

func (o GroupingIdTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o GroupingIdTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *GroupingIdType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// GroupingIdTypeInput is an input type that accepts values of the GroupingIdType enum
// A concrete instance of `GroupingIdTypeInput` can be one of the following:
//
//	GroupingIdTypeServiceTreeId
//	GroupingIdTypeBillingId
type GroupingIdTypeInput interface {
	pulumi.Input

	ToGroupingIdTypeOutput() GroupingIdTypeOutput
	ToGroupingIdTypeOutputWithContext(context.Context) GroupingIdTypeOutput
}

var groupingIdTypePtrType = reflect.TypeOf((**GroupingIdType)(nil)).Elem()

type GroupingIdTypePtrInput interface {
	pulumi.Input

	ToGroupingIdTypePtrOutput() GroupingIdTypePtrOutput
	ToGroupingIdTypePtrOutputWithContext(context.Context) GroupingIdTypePtrOutput
}

type groupingIdTypePtr string

func GroupingIdTypePtr(v string) GroupingIdTypePtrInput {
	return (*groupingIdTypePtr)(&v)
}

func (*groupingIdTypePtr) ElementType() reflect.Type {
	return groupingIdTypePtrType
}

func (in *groupingIdTypePtr) ToGroupingIdTypePtrOutput() GroupingIdTypePtrOutput {
	return pulumi.ToOutput(in).(GroupingIdTypePtrOutput)
}

func (in *groupingIdTypePtr) ToGroupingIdTypePtrOutputWithContext(ctx context.Context) GroupingIdTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(GroupingIdTypePtrOutput)
}

func (in *groupingIdTypePtr) ToOutput(ctx context.Context) pulumix.Output[*GroupingIdType] {
	return pulumix.Output[*GroupingIdType]{
		OutputState: in.ToGroupingIdTypePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterOutputType(GroupingIdTypeOutput{})
	pulumi.RegisterOutputType(GroupingIdTypePtrOutput{})
}
